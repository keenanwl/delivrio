// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionBringUpdate is the builder for updating DeliveryOptionBring entities.
type DeliveryOptionBringUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryOptionBringMutation
}

// Where appends a list predicates to the DeliveryOptionBringUpdate builder.
func (dobu *DeliveryOptionBringUpdate) Where(ps ...predicate.DeliveryOptionBring) *DeliveryOptionBringUpdate {
	dobu.mutation.Where(ps...)
	return dobu
}

// SetTenantID sets the "tenant_id" field.
func (dobu *DeliveryOptionBringUpdate) SetTenantID(pu pulid.ID) *DeliveryOptionBringUpdate {
	dobu.mutation.SetTenantID(pu)
	return dobu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dobu *DeliveryOptionBringUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionBringUpdate {
	if pu != nil {
		dobu.SetTenantID(*pu)
	}
	return dobu
}

// SetElectronicCustoms sets the "electronic_customs" field.
func (dobu *DeliveryOptionBringUpdate) SetElectronicCustoms(b bool) *DeliveryOptionBringUpdate {
	dobu.mutation.SetElectronicCustoms(b)
	return dobu
}

// SetNillableElectronicCustoms sets the "electronic_customs" field if the given value is not nil.
func (dobu *DeliveryOptionBringUpdate) SetNillableElectronicCustoms(b *bool) *DeliveryOptionBringUpdate {
	if b != nil {
		dobu.SetElectronicCustoms(*b)
	}
	return dobu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dobu *DeliveryOptionBringUpdate) SetTenant(t *Tenant) *DeliveryOptionBringUpdate {
	return dobu.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dobu *DeliveryOptionBringUpdate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionBringUpdate {
	dobu.mutation.SetDeliveryOptionID(id)
	return dobu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dobu *DeliveryOptionBringUpdate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionBringUpdate {
	return dobu.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceBringIDs adds the "carrier_additional_service_bring" edge to the CarrierAdditionalServiceBring entity by IDs.
func (dobu *DeliveryOptionBringUpdate) AddCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *DeliveryOptionBringUpdate {
	dobu.mutation.AddCarrierAdditionalServiceBringIDs(ids...)
	return dobu
}

// AddCarrierAdditionalServiceBring adds the "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (dobu *DeliveryOptionBringUpdate) AddCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *DeliveryOptionBringUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dobu.AddCarrierAdditionalServiceBringIDs(ids...)
}

// Mutation returns the DeliveryOptionBringMutation object of the builder.
func (dobu *DeliveryOptionBringUpdate) Mutation() *DeliveryOptionBringMutation {
	return dobu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dobu *DeliveryOptionBringUpdate) ClearTenant() *DeliveryOptionBringUpdate {
	dobu.mutation.ClearTenant()
	return dobu
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (dobu *DeliveryOptionBringUpdate) ClearDeliveryOption() *DeliveryOptionBringUpdate {
	dobu.mutation.ClearDeliveryOption()
	return dobu
}

// ClearCarrierAdditionalServiceBring clears all "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (dobu *DeliveryOptionBringUpdate) ClearCarrierAdditionalServiceBring() *DeliveryOptionBringUpdate {
	dobu.mutation.ClearCarrierAdditionalServiceBring()
	return dobu
}

// RemoveCarrierAdditionalServiceBringIDs removes the "carrier_additional_service_bring" edge to CarrierAdditionalServiceBring entities by IDs.
func (dobu *DeliveryOptionBringUpdate) RemoveCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *DeliveryOptionBringUpdate {
	dobu.mutation.RemoveCarrierAdditionalServiceBringIDs(ids...)
	return dobu
}

// RemoveCarrierAdditionalServiceBring removes "carrier_additional_service_bring" edges to CarrierAdditionalServiceBring entities.
func (dobu *DeliveryOptionBringUpdate) RemoveCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *DeliveryOptionBringUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dobu.RemoveCarrierAdditionalServiceBringIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dobu *DeliveryOptionBringUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dobu.sqlSave, dobu.mutation, dobu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dobu *DeliveryOptionBringUpdate) SaveX(ctx context.Context) int {
	affected, err := dobu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dobu *DeliveryOptionBringUpdate) Exec(ctx context.Context) error {
	_, err := dobu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dobu *DeliveryOptionBringUpdate) ExecX(ctx context.Context) {
	if err := dobu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dobu *DeliveryOptionBringUpdate) check() error {
	if dobu.mutation.TenantCleared() && len(dobu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionBring.tenant"`)
	}
	if dobu.mutation.DeliveryOptionCleared() && len(dobu.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionBring.delivery_option"`)
	}
	return nil
}

func (dobu *DeliveryOptionBringUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dobu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptionbring.Table, deliveryoptionbring.Columns, sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString))
	if ps := dobu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dobu.mutation.ElectronicCustoms(); ok {
		_spec.SetField(deliveryoptionbring.FieldElectronicCustoms, field.TypeBool, value)
	}
	if dobu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionbring.TenantTable,
			Columns: []string{deliveryoptionbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dobu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionbring.TenantTable,
			Columns: []string{deliveryoptionbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dobu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionbring.DeliveryOptionTable,
			Columns: []string{deliveryoptionbring.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dobu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionbring.DeliveryOptionTable,
			Columns: []string{deliveryoptionbring.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dobu.mutation.CarrierAdditionalServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionbring.CarrierAdditionalServiceBringTable,
			Columns: deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dobu.mutation.RemovedCarrierAdditionalServiceBringIDs(); len(nodes) > 0 && !dobu.mutation.CarrierAdditionalServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionbring.CarrierAdditionalServiceBringTable,
			Columns: deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dobu.mutation.CarrierAdditionalServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionbring.CarrierAdditionalServiceBringTable,
			Columns: deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dobu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptionbring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dobu.mutation.done = true
	return n, nil
}

// DeliveryOptionBringUpdateOne is the builder for updating a single DeliveryOptionBring entity.
type DeliveryOptionBringUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryOptionBringMutation
}

// SetTenantID sets the "tenant_id" field.
func (dobuo *DeliveryOptionBringUpdateOne) SetTenantID(pu pulid.ID) *DeliveryOptionBringUpdateOne {
	dobuo.mutation.SetTenantID(pu)
	return dobuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dobuo *DeliveryOptionBringUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionBringUpdateOne {
	if pu != nil {
		dobuo.SetTenantID(*pu)
	}
	return dobuo
}

// SetElectronicCustoms sets the "electronic_customs" field.
func (dobuo *DeliveryOptionBringUpdateOne) SetElectronicCustoms(b bool) *DeliveryOptionBringUpdateOne {
	dobuo.mutation.SetElectronicCustoms(b)
	return dobuo
}

// SetNillableElectronicCustoms sets the "electronic_customs" field if the given value is not nil.
func (dobuo *DeliveryOptionBringUpdateOne) SetNillableElectronicCustoms(b *bool) *DeliveryOptionBringUpdateOne {
	if b != nil {
		dobuo.SetElectronicCustoms(*b)
	}
	return dobuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dobuo *DeliveryOptionBringUpdateOne) SetTenant(t *Tenant) *DeliveryOptionBringUpdateOne {
	return dobuo.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dobuo *DeliveryOptionBringUpdateOne) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionBringUpdateOne {
	dobuo.mutation.SetDeliveryOptionID(id)
	return dobuo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dobuo *DeliveryOptionBringUpdateOne) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionBringUpdateOne {
	return dobuo.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceBringIDs adds the "carrier_additional_service_bring" edge to the CarrierAdditionalServiceBring entity by IDs.
func (dobuo *DeliveryOptionBringUpdateOne) AddCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *DeliveryOptionBringUpdateOne {
	dobuo.mutation.AddCarrierAdditionalServiceBringIDs(ids...)
	return dobuo
}

// AddCarrierAdditionalServiceBring adds the "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (dobuo *DeliveryOptionBringUpdateOne) AddCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *DeliveryOptionBringUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dobuo.AddCarrierAdditionalServiceBringIDs(ids...)
}

// Mutation returns the DeliveryOptionBringMutation object of the builder.
func (dobuo *DeliveryOptionBringUpdateOne) Mutation() *DeliveryOptionBringMutation {
	return dobuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dobuo *DeliveryOptionBringUpdateOne) ClearTenant() *DeliveryOptionBringUpdateOne {
	dobuo.mutation.ClearTenant()
	return dobuo
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (dobuo *DeliveryOptionBringUpdateOne) ClearDeliveryOption() *DeliveryOptionBringUpdateOne {
	dobuo.mutation.ClearDeliveryOption()
	return dobuo
}

// ClearCarrierAdditionalServiceBring clears all "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (dobuo *DeliveryOptionBringUpdateOne) ClearCarrierAdditionalServiceBring() *DeliveryOptionBringUpdateOne {
	dobuo.mutation.ClearCarrierAdditionalServiceBring()
	return dobuo
}

// RemoveCarrierAdditionalServiceBringIDs removes the "carrier_additional_service_bring" edge to CarrierAdditionalServiceBring entities by IDs.
func (dobuo *DeliveryOptionBringUpdateOne) RemoveCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *DeliveryOptionBringUpdateOne {
	dobuo.mutation.RemoveCarrierAdditionalServiceBringIDs(ids...)
	return dobuo
}

// RemoveCarrierAdditionalServiceBring removes "carrier_additional_service_bring" edges to CarrierAdditionalServiceBring entities.
func (dobuo *DeliveryOptionBringUpdateOne) RemoveCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *DeliveryOptionBringUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dobuo.RemoveCarrierAdditionalServiceBringIDs(ids...)
}

// Where appends a list predicates to the DeliveryOptionBringUpdate builder.
func (dobuo *DeliveryOptionBringUpdateOne) Where(ps ...predicate.DeliveryOptionBring) *DeliveryOptionBringUpdateOne {
	dobuo.mutation.Where(ps...)
	return dobuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dobuo *DeliveryOptionBringUpdateOne) Select(field string, fields ...string) *DeliveryOptionBringUpdateOne {
	dobuo.fields = append([]string{field}, fields...)
	return dobuo
}

// Save executes the query and returns the updated DeliveryOptionBring entity.
func (dobuo *DeliveryOptionBringUpdateOne) Save(ctx context.Context) (*DeliveryOptionBring, error) {
	return withHooks(ctx, dobuo.sqlSave, dobuo.mutation, dobuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dobuo *DeliveryOptionBringUpdateOne) SaveX(ctx context.Context) *DeliveryOptionBring {
	node, err := dobuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dobuo *DeliveryOptionBringUpdateOne) Exec(ctx context.Context) error {
	_, err := dobuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dobuo *DeliveryOptionBringUpdateOne) ExecX(ctx context.Context) {
	if err := dobuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dobuo *DeliveryOptionBringUpdateOne) check() error {
	if dobuo.mutation.TenantCleared() && len(dobuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionBring.tenant"`)
	}
	if dobuo.mutation.DeliveryOptionCleared() && len(dobuo.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionBring.delivery_option"`)
	}
	return nil
}

func (dobuo *DeliveryOptionBringUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryOptionBring, err error) {
	if err := dobuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptionbring.Table, deliveryoptionbring.Columns, sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString))
	id, ok := dobuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryOptionBring.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dobuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptionbring.FieldID)
		for _, f := range fields {
			if !deliveryoptionbring.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryoptionbring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dobuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dobuo.mutation.ElectronicCustoms(); ok {
		_spec.SetField(deliveryoptionbring.FieldElectronicCustoms, field.TypeBool, value)
	}
	if dobuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionbring.TenantTable,
			Columns: []string{deliveryoptionbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dobuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionbring.TenantTable,
			Columns: []string{deliveryoptionbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dobuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionbring.DeliveryOptionTable,
			Columns: []string{deliveryoptionbring.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dobuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionbring.DeliveryOptionTable,
			Columns: []string{deliveryoptionbring.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dobuo.mutation.CarrierAdditionalServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionbring.CarrierAdditionalServiceBringTable,
			Columns: deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dobuo.mutation.RemovedCarrierAdditionalServiceBringIDs(); len(nodes) > 0 && !dobuo.mutation.CarrierAdditionalServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionbring.CarrierAdditionalServiceBringTable,
			Columns: deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dobuo.mutation.CarrierAdditionalServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionbring.CarrierAdditionalServiceBringTable,
			Columns: deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryOptionBring{config: dobuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dobuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptionbring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dobuo.mutation.done = true
	return _node, nil
}
