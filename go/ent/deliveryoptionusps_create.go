// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionUSPSCreate is the builder for creating a DeliveryOptionUSPS entity.
type DeliveryOptionUSPSCreate struct {
	config
	mutation *DeliveryOptionUSPSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (douc *DeliveryOptionUSPSCreate) SetTenantID(pu pulid.ID) *DeliveryOptionUSPSCreate {
	douc.mutation.SetTenantID(pu)
	return douc
}

// SetFormatZpl sets the "format_zpl" field.
func (douc *DeliveryOptionUSPSCreate) SetFormatZpl(b bool) *DeliveryOptionUSPSCreate {
	douc.mutation.SetFormatZpl(b)
	return douc
}

// SetNillableFormatZpl sets the "format_zpl" field if the given value is not nil.
func (douc *DeliveryOptionUSPSCreate) SetNillableFormatZpl(b *bool) *DeliveryOptionUSPSCreate {
	if b != nil {
		douc.SetFormatZpl(*b)
	}
	return douc
}

// SetID sets the "id" field.
func (douc *DeliveryOptionUSPSCreate) SetID(pu pulid.ID) *DeliveryOptionUSPSCreate {
	douc.mutation.SetID(pu)
	return douc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (douc *DeliveryOptionUSPSCreate) SetNillableID(pu *pulid.ID) *DeliveryOptionUSPSCreate {
	if pu != nil {
		douc.SetID(*pu)
	}
	return douc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (douc *DeliveryOptionUSPSCreate) SetTenant(t *Tenant) *DeliveryOptionUSPSCreate {
	return douc.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (douc *DeliveryOptionUSPSCreate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionUSPSCreate {
	douc.mutation.SetDeliveryOptionID(id)
	return douc
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (douc *DeliveryOptionUSPSCreate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionUSPSCreate {
	return douc.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceUspIDs adds the "carrier_additional_service_usps" edge to the CarrierAdditionalServiceUSPS entity by IDs.
func (douc *DeliveryOptionUSPSCreate) AddCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *DeliveryOptionUSPSCreate {
	douc.mutation.AddCarrierAdditionalServiceUspIDs(ids...)
	return douc
}

// AddCarrierAdditionalServiceUSPS adds the "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (douc *DeliveryOptionUSPSCreate) AddCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *DeliveryOptionUSPSCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douc.AddCarrierAdditionalServiceUspIDs(ids...)
}

// Mutation returns the DeliveryOptionUSPSMutation object of the builder.
func (douc *DeliveryOptionUSPSCreate) Mutation() *DeliveryOptionUSPSMutation {
	return douc.mutation
}

// Save creates the DeliveryOptionUSPS in the database.
func (douc *DeliveryOptionUSPSCreate) Save(ctx context.Context) (*DeliveryOptionUSPS, error) {
	if err := douc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, douc.sqlSave, douc.mutation, douc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (douc *DeliveryOptionUSPSCreate) SaveX(ctx context.Context) *DeliveryOptionUSPS {
	v, err := douc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (douc *DeliveryOptionUSPSCreate) Exec(ctx context.Context) error {
	_, err := douc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (douc *DeliveryOptionUSPSCreate) ExecX(ctx context.Context) {
	if err := douc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (douc *DeliveryOptionUSPSCreate) defaults() error {
	if _, ok := douc.mutation.FormatZpl(); !ok {
		v := deliveryoptionusps.DefaultFormatZpl
		douc.mutation.SetFormatZpl(v)
	}
	if _, ok := douc.mutation.ID(); !ok {
		if deliveryoptionusps.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deliveryoptionusps.DefaultID (forgotten import ent/runtime?)")
		}
		v := deliveryoptionusps.DefaultID()
		douc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (douc *DeliveryOptionUSPSCreate) check() error {
	if _, ok := douc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DeliveryOptionUSPS.tenant_id"`)}
	}
	if _, ok := douc.mutation.FormatZpl(); !ok {
		return &ValidationError{Name: "format_zpl", err: errors.New(`ent: missing required field "DeliveryOptionUSPS.format_zpl"`)}
	}
	if len(douc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DeliveryOptionUSPS.tenant"`)}
	}
	if len(douc.mutation.DeliveryOptionIDs()) == 0 {
		return &ValidationError{Name: "delivery_option", err: errors.New(`ent: missing required edge "DeliveryOptionUSPS.delivery_option"`)}
	}
	return nil
}

func (douc *DeliveryOptionUSPSCreate) sqlSave(ctx context.Context) (*DeliveryOptionUSPS, error) {
	if err := douc.check(); err != nil {
		return nil, err
	}
	_node, _spec := douc.createSpec()
	if err := sqlgraph.CreateNode(ctx, douc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	douc.mutation.id = &_node.ID
	douc.mutation.done = true
	return _node, nil
}

func (douc *DeliveryOptionUSPSCreate) createSpec() (*DeliveryOptionUSPS, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryOptionUSPS{config: douc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryoptionusps.Table, sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString))
	)
	_spec.OnConflict = douc.conflict
	if id, ok := douc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := douc.mutation.FormatZpl(); ok {
		_spec.SetField(deliveryoptionusps.FieldFormatZpl, field.TypeBool, value)
		_node.FormatZpl = value
	}
	if nodes := douc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionusps.TenantTable,
			Columns: []string{deliveryoptionusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := douc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionusps.DeliveryOptionTable,
			Columns: []string{deliveryoptionusps.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_delivery_option_usps = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := douc.mutation.CarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionusps.CarrierAdditionalServiceUSPSTable,
			Columns: deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOptionUSPS.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionUSPSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (douc *DeliveryOptionUSPSCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionUSPSUpsertOne {
	douc.conflict = opts
	return &DeliveryOptionUSPSUpsertOne{
		create: douc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOptionUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (douc *DeliveryOptionUSPSCreate) OnConflictColumns(columns ...string) *DeliveryOptionUSPSUpsertOne {
	douc.conflict = append(douc.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionUSPSUpsertOne{
		create: douc,
	}
}

type (
	// DeliveryOptionUSPSUpsertOne is the builder for "upsert"-ing
	//  one DeliveryOptionUSPS node.
	DeliveryOptionUSPSUpsertOne struct {
		create *DeliveryOptionUSPSCreate
	}

	// DeliveryOptionUSPSUpsert is the "OnConflict" setter.
	DeliveryOptionUSPSUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionUSPSUpsert) SetTenantID(v pulid.ID) *DeliveryOptionUSPSUpsert {
	u.Set(deliveryoptionusps.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionUSPSUpsert) UpdateTenantID() *DeliveryOptionUSPSUpsert {
	u.SetExcluded(deliveryoptionusps.FieldTenantID)
	return u
}

// SetFormatZpl sets the "format_zpl" field.
func (u *DeliveryOptionUSPSUpsert) SetFormatZpl(v bool) *DeliveryOptionUSPSUpsert {
	u.Set(deliveryoptionusps.FieldFormatZpl, v)
	return u
}

// UpdateFormatZpl sets the "format_zpl" field to the value that was provided on create.
func (u *DeliveryOptionUSPSUpsert) UpdateFormatZpl() *DeliveryOptionUSPSUpsert {
	u.SetExcluded(deliveryoptionusps.FieldFormatZpl)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoptionusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionUSPSUpsertOne) UpdateNewValues() *DeliveryOptionUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deliveryoptionusps.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionUSPS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryOptionUSPSUpsertOne) Ignore() *DeliveryOptionUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionUSPSUpsertOne) DoNothing() *DeliveryOptionUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionUSPSCreate.OnConflict
// documentation for more info.
func (u *DeliveryOptionUSPSUpsertOne) Update(set func(*DeliveryOptionUSPSUpsert)) *DeliveryOptionUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionUSPSUpsertOne) SetTenantID(v pulid.ID) *DeliveryOptionUSPSUpsertOne {
	return u.Update(func(s *DeliveryOptionUSPSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionUSPSUpsertOne) UpdateTenantID() *DeliveryOptionUSPSUpsertOne {
	return u.Update(func(s *DeliveryOptionUSPSUpsert) {
		s.UpdateTenantID()
	})
}

// SetFormatZpl sets the "format_zpl" field.
func (u *DeliveryOptionUSPSUpsertOne) SetFormatZpl(v bool) *DeliveryOptionUSPSUpsertOne {
	return u.Update(func(s *DeliveryOptionUSPSUpsert) {
		s.SetFormatZpl(v)
	})
}

// UpdateFormatZpl sets the "format_zpl" field to the value that was provided on create.
func (u *DeliveryOptionUSPSUpsertOne) UpdateFormatZpl() *DeliveryOptionUSPSUpsertOne {
	return u.Update(func(s *DeliveryOptionUSPSUpsert) {
		s.UpdateFormatZpl()
	})
}

// Exec executes the query.
func (u *DeliveryOptionUSPSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionUSPSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionUSPSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryOptionUSPSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeliveryOptionUSPSUpsertOne.ID is not supported by MySQL driver. Use DeliveryOptionUSPSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryOptionUSPSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryOptionUSPSCreateBulk is the builder for creating many DeliveryOptionUSPS entities in bulk.
type DeliveryOptionUSPSCreateBulk struct {
	config
	err      error
	builders []*DeliveryOptionUSPSCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryOptionUSPS entities in the database.
func (doucb *DeliveryOptionUSPSCreateBulk) Save(ctx context.Context) ([]*DeliveryOptionUSPS, error) {
	if doucb.err != nil {
		return nil, doucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(doucb.builders))
	nodes := make([]*DeliveryOptionUSPS, len(doucb.builders))
	mutators := make([]Mutator, len(doucb.builders))
	for i := range doucb.builders {
		func(i int, root context.Context) {
			builder := doucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryOptionUSPSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, doucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = doucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, doucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, doucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (doucb *DeliveryOptionUSPSCreateBulk) SaveX(ctx context.Context) []*DeliveryOptionUSPS {
	v, err := doucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (doucb *DeliveryOptionUSPSCreateBulk) Exec(ctx context.Context) error {
	_, err := doucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doucb *DeliveryOptionUSPSCreateBulk) ExecX(ctx context.Context) {
	if err := doucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOptionUSPS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionUSPSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (doucb *DeliveryOptionUSPSCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionUSPSUpsertBulk {
	doucb.conflict = opts
	return &DeliveryOptionUSPSUpsertBulk{
		create: doucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOptionUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (doucb *DeliveryOptionUSPSCreateBulk) OnConflictColumns(columns ...string) *DeliveryOptionUSPSUpsertBulk {
	doucb.conflict = append(doucb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionUSPSUpsertBulk{
		create: doucb,
	}
}

// DeliveryOptionUSPSUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryOptionUSPS nodes.
type DeliveryOptionUSPSUpsertBulk struct {
	create *DeliveryOptionUSPSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryOptionUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoptionusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionUSPSUpsertBulk) UpdateNewValues() *DeliveryOptionUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deliveryoptionusps.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionUSPS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryOptionUSPSUpsertBulk) Ignore() *DeliveryOptionUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionUSPSUpsertBulk) DoNothing() *DeliveryOptionUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionUSPSCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryOptionUSPSUpsertBulk) Update(set func(*DeliveryOptionUSPSUpsert)) *DeliveryOptionUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionUSPSUpsertBulk) SetTenantID(v pulid.ID) *DeliveryOptionUSPSUpsertBulk {
	return u.Update(func(s *DeliveryOptionUSPSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionUSPSUpsertBulk) UpdateTenantID() *DeliveryOptionUSPSUpsertBulk {
	return u.Update(func(s *DeliveryOptionUSPSUpsert) {
		s.UpdateTenantID()
	})
}

// SetFormatZpl sets the "format_zpl" field.
func (u *DeliveryOptionUSPSUpsertBulk) SetFormatZpl(v bool) *DeliveryOptionUSPSUpsertBulk {
	return u.Update(func(s *DeliveryOptionUSPSUpsert) {
		s.SetFormatZpl(v)
	})
}

// UpdateFormatZpl sets the "format_zpl" field to the value that was provided on create.
func (u *DeliveryOptionUSPSUpsertBulk) UpdateFormatZpl() *DeliveryOptionUSPSUpsertBulk {
	return u.Update(func(s *DeliveryOptionUSPSUpsert) {
		s.UpdateFormatZpl()
	})
}

// Exec executes the query.
func (u *DeliveryOptionUSPSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryOptionUSPSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionUSPSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionUSPSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
