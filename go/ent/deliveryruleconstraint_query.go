// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleConstraintQuery is the builder for querying DeliveryRuleConstraint entities.
type DeliveryRuleConstraintQuery struct {
	config
	ctx                             *QueryContext
	order                           []deliveryruleconstraint.OrderOption
	inters                          []Interceptor
	predicates                      []predicate.DeliveryRuleConstraint
	withTenant                      *TenantQuery
	withDeliveryRuleConstraintGroup *DeliveryRuleConstraintGroupQuery
	withFKs                         bool
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*DeliveryRuleConstraint) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeliveryRuleConstraintQuery builder.
func (drcq *DeliveryRuleConstraintQuery) Where(ps ...predicate.DeliveryRuleConstraint) *DeliveryRuleConstraintQuery {
	drcq.predicates = append(drcq.predicates, ps...)
	return drcq
}

// Limit the number of records to be returned by this query.
func (drcq *DeliveryRuleConstraintQuery) Limit(limit int) *DeliveryRuleConstraintQuery {
	drcq.ctx.Limit = &limit
	return drcq
}

// Offset to start from.
func (drcq *DeliveryRuleConstraintQuery) Offset(offset int) *DeliveryRuleConstraintQuery {
	drcq.ctx.Offset = &offset
	return drcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drcq *DeliveryRuleConstraintQuery) Unique(unique bool) *DeliveryRuleConstraintQuery {
	drcq.ctx.Unique = &unique
	return drcq
}

// Order specifies how the records should be ordered.
func (drcq *DeliveryRuleConstraintQuery) Order(o ...deliveryruleconstraint.OrderOption) *DeliveryRuleConstraintQuery {
	drcq.order = append(drcq.order, o...)
	return drcq
}

// QueryTenant chains the current query on the "tenant" edge.
func (drcq *DeliveryRuleConstraintQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: drcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraint.Table, deliveryruleconstraint.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryruleconstraint.TenantTable, deliveryruleconstraint.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(drcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryRuleConstraintGroup chains the current query on the "delivery_rule_constraint_group" edge.
func (drcq *DeliveryRuleConstraintQuery) QueryDeliveryRuleConstraintGroup() *DeliveryRuleConstraintGroupQuery {
	query := (&DeliveryRuleConstraintGroupClient{config: drcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraint.Table, deliveryruleconstraint.FieldID, selector),
			sqlgraph.To(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryruleconstraint.DeliveryRuleConstraintGroupTable, deliveryruleconstraint.DeliveryRuleConstraintGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(drcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeliveryRuleConstraint entity from the query.
// Returns a *NotFoundError when no DeliveryRuleConstraint was found.
func (drcq *DeliveryRuleConstraintQuery) First(ctx context.Context) (*DeliveryRuleConstraint, error) {
	nodes, err := drcq.Limit(1).All(setContextOp(ctx, drcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deliveryruleconstraint.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drcq *DeliveryRuleConstraintQuery) FirstX(ctx context.Context) *DeliveryRuleConstraint {
	node, err := drcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeliveryRuleConstraint ID from the query.
// Returns a *NotFoundError when no DeliveryRuleConstraint ID was found.
func (drcq *DeliveryRuleConstraintQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = drcq.Limit(1).IDs(setContextOp(ctx, drcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deliveryruleconstraint.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drcq *DeliveryRuleConstraintQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := drcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeliveryRuleConstraint entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeliveryRuleConstraint entity is found.
// Returns a *NotFoundError when no DeliveryRuleConstraint entities are found.
func (drcq *DeliveryRuleConstraintQuery) Only(ctx context.Context) (*DeliveryRuleConstraint, error) {
	nodes, err := drcq.Limit(2).All(setContextOp(ctx, drcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deliveryruleconstraint.Label}
	default:
		return nil, &NotSingularError{deliveryruleconstraint.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drcq *DeliveryRuleConstraintQuery) OnlyX(ctx context.Context) *DeliveryRuleConstraint {
	node, err := drcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeliveryRuleConstraint ID in the query.
// Returns a *NotSingularError when more than one DeliveryRuleConstraint ID is found.
// Returns a *NotFoundError when no entities are found.
func (drcq *DeliveryRuleConstraintQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = drcq.Limit(2).IDs(setContextOp(ctx, drcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deliveryruleconstraint.Label}
	default:
		err = &NotSingularError{deliveryruleconstraint.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drcq *DeliveryRuleConstraintQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := drcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeliveryRuleConstraints.
func (drcq *DeliveryRuleConstraintQuery) All(ctx context.Context) ([]*DeliveryRuleConstraint, error) {
	ctx = setContextOp(ctx, drcq.ctx, ent.OpQueryAll)
	if err := drcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeliveryRuleConstraint, *DeliveryRuleConstraintQuery]()
	return withInterceptors[[]*DeliveryRuleConstraint](ctx, drcq, qr, drcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drcq *DeliveryRuleConstraintQuery) AllX(ctx context.Context) []*DeliveryRuleConstraint {
	nodes, err := drcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeliveryRuleConstraint IDs.
func (drcq *DeliveryRuleConstraintQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if drcq.ctx.Unique == nil && drcq.path != nil {
		drcq.Unique(true)
	}
	ctx = setContextOp(ctx, drcq.ctx, ent.OpQueryIDs)
	if err = drcq.Select(deliveryruleconstraint.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drcq *DeliveryRuleConstraintQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := drcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drcq *DeliveryRuleConstraintQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drcq.ctx, ent.OpQueryCount)
	if err := drcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drcq, querierCount[*DeliveryRuleConstraintQuery](), drcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drcq *DeliveryRuleConstraintQuery) CountX(ctx context.Context) int {
	count, err := drcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drcq *DeliveryRuleConstraintQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drcq.ctx, ent.OpQueryExist)
	switch _, err := drcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drcq *DeliveryRuleConstraintQuery) ExistX(ctx context.Context) bool {
	exist, err := drcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeliveryRuleConstraintQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drcq *DeliveryRuleConstraintQuery) Clone() *DeliveryRuleConstraintQuery {
	if drcq == nil {
		return nil
	}
	return &DeliveryRuleConstraintQuery{
		config:                          drcq.config,
		ctx:                             drcq.ctx.Clone(),
		order:                           append([]deliveryruleconstraint.OrderOption{}, drcq.order...),
		inters:                          append([]Interceptor{}, drcq.inters...),
		predicates:                      append([]predicate.DeliveryRuleConstraint{}, drcq.predicates...),
		withTenant:                      drcq.withTenant.Clone(),
		withDeliveryRuleConstraintGroup: drcq.withDeliveryRuleConstraintGroup.Clone(),
		// clone intermediate query.
		sql:  drcq.sql.Clone(),
		path: drcq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (drcq *DeliveryRuleConstraintQuery) WithTenant(opts ...func(*TenantQuery)) *DeliveryRuleConstraintQuery {
	query := (&TenantClient{config: drcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drcq.withTenant = query
	return drcq
}

// WithDeliveryRuleConstraintGroup tells the query-builder to eager-load the nodes that are connected to
// the "delivery_rule_constraint_group" edge. The optional arguments are used to configure the query builder of the edge.
func (drcq *DeliveryRuleConstraintQuery) WithDeliveryRuleConstraintGroup(opts ...func(*DeliveryRuleConstraintGroupQuery)) *DeliveryRuleConstraintQuery {
	query := (&DeliveryRuleConstraintGroupClient{config: drcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drcq.withDeliveryRuleConstraintGroup = query
	return drcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeliveryRuleConstraint.Query().
//		GroupBy(deliveryruleconstraint.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (drcq *DeliveryRuleConstraintQuery) GroupBy(field string, fields ...string) *DeliveryRuleConstraintGroupBy {
	drcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeliveryRuleConstraintGroupBy{build: drcq}
	grbuild.flds = &drcq.ctx.Fields
	grbuild.label = deliveryruleconstraint.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.DeliveryRuleConstraint.Query().
//		Select(deliveryruleconstraint.FieldTenantID).
//		Scan(ctx, &v)
func (drcq *DeliveryRuleConstraintQuery) Select(fields ...string) *DeliveryRuleConstraintSelect {
	drcq.ctx.Fields = append(drcq.ctx.Fields, fields...)
	sbuild := &DeliveryRuleConstraintSelect{DeliveryRuleConstraintQuery: drcq}
	sbuild.label = deliveryruleconstraint.Label
	sbuild.flds, sbuild.scan = &drcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeliveryRuleConstraintSelect configured with the given aggregations.
func (drcq *DeliveryRuleConstraintQuery) Aggregate(fns ...AggregateFunc) *DeliveryRuleConstraintSelect {
	return drcq.Select().Aggregate(fns...)
}

func (drcq *DeliveryRuleConstraintQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drcq); err != nil {
				return err
			}
		}
	}
	for _, f := range drcq.ctx.Fields {
		if !deliveryruleconstraint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if drcq.path != nil {
		prev, err := drcq.path(ctx)
		if err != nil {
			return err
		}
		drcq.sql = prev
	}
	if deliveryruleconstraint.Policy == nil {
		return errors.New("ent: uninitialized deliveryruleconstraint.Policy (forgotten import ent/runtime?)")
	}
	if err := deliveryruleconstraint.Policy.EvalQuery(ctx, drcq); err != nil {
		return err
	}
	return nil
}

func (drcq *DeliveryRuleConstraintQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeliveryRuleConstraint, error) {
	var (
		nodes       = []*DeliveryRuleConstraint{}
		withFKs     = drcq.withFKs
		_spec       = drcq.querySpec()
		loadedTypes = [2]bool{
			drcq.withTenant != nil,
			drcq.withDeliveryRuleConstraintGroup != nil,
		}
	)
	if drcq.withDeliveryRuleConstraintGroup != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryruleconstraint.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeliveryRuleConstraint).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeliveryRuleConstraint{config: drcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(drcq.modifiers) > 0 {
		_spec.Modifiers = drcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drcq.withTenant; query != nil {
		if err := drcq.loadTenant(ctx, query, nodes, nil,
			func(n *DeliveryRuleConstraint, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := drcq.withDeliveryRuleConstraintGroup; query != nil {
		if err := drcq.loadDeliveryRuleConstraintGroup(ctx, query, nodes, nil,
			func(n *DeliveryRuleConstraint, e *DeliveryRuleConstraintGroup) {
				n.Edges.DeliveryRuleConstraintGroup = e
			}); err != nil {
			return nil, err
		}
	}
	for i := range drcq.loadTotal {
		if err := drcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drcq *DeliveryRuleConstraintQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*DeliveryRuleConstraint, init func(*DeliveryRuleConstraint), assign func(*DeliveryRuleConstraint, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryRuleConstraint)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drcq *DeliveryRuleConstraintQuery) loadDeliveryRuleConstraintGroup(ctx context.Context, query *DeliveryRuleConstraintGroupQuery, nodes []*DeliveryRuleConstraint, init func(*DeliveryRuleConstraint), assign func(*DeliveryRuleConstraint, *DeliveryRuleConstraintGroup)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryRuleConstraint)
	for i := range nodes {
		if nodes[i].delivery_rule_constraint_group_delivery_rule_constraints == nil {
			continue
		}
		fk := *nodes[i].delivery_rule_constraint_group_delivery_rule_constraints
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryruleconstraintgroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delivery_rule_constraint_group_delivery_rule_constraints" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (drcq *DeliveryRuleConstraintQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drcq.querySpec()
	if len(drcq.modifiers) > 0 {
		_spec.Modifiers = drcq.modifiers
	}
	_spec.Node.Columns = drcq.ctx.Fields
	if len(drcq.ctx.Fields) > 0 {
		_spec.Unique = drcq.ctx.Unique != nil && *drcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drcq.driver, _spec)
}

func (drcq *DeliveryRuleConstraintQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deliveryruleconstraint.Table, deliveryruleconstraint.Columns, sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString))
	_spec.From = drcq.sql
	if unique := drcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drcq.path != nil {
		_spec.Unique = true
	}
	if fields := drcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryruleconstraint.FieldID)
		for i := range fields {
			if fields[i] != deliveryruleconstraint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if drcq.withTenant != nil {
			_spec.Node.AddColumnOnce(deliveryruleconstraint.FieldTenantID)
		}
	}
	if ps := drcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drcq *DeliveryRuleConstraintQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drcq.driver.Dialect())
	t1 := builder.Table(deliveryruleconstraint.Table)
	columns := drcq.ctx.Fields
	if len(columns) == 0 {
		columns = deliveryruleconstraint.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drcq.sql != nil {
		selector = drcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drcq.ctx.Unique != nil && *drcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range drcq.predicates {
		p(selector)
	}
	for _, p := range drcq.order {
		p(selector)
	}
	if offset := drcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeliveryRuleConstraintGroupBy is the group-by builder for DeliveryRuleConstraint entities.
type DeliveryRuleConstraintGroupBy struct {
	selector
	build *DeliveryRuleConstraintQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drcgb *DeliveryRuleConstraintGroupBy) Aggregate(fns ...AggregateFunc) *DeliveryRuleConstraintGroupBy {
	drcgb.fns = append(drcgb.fns, fns...)
	return drcgb
}

// Scan applies the selector query and scans the result into the given value.
func (drcgb *DeliveryRuleConstraintGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drcgb.build.ctx, ent.OpQueryGroupBy)
	if err := drcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryRuleConstraintQuery, *DeliveryRuleConstraintGroupBy](ctx, drcgb.build, drcgb, drcgb.build.inters, v)
}

func (drcgb *DeliveryRuleConstraintGroupBy) sqlScan(ctx context.Context, root *DeliveryRuleConstraintQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drcgb.fns))
	for _, fn := range drcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drcgb.flds)+len(drcgb.fns))
		for _, f := range *drcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeliveryRuleConstraintSelect is the builder for selecting fields of DeliveryRuleConstraint entities.
type DeliveryRuleConstraintSelect struct {
	*DeliveryRuleConstraintQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drcs *DeliveryRuleConstraintSelect) Aggregate(fns ...AggregateFunc) *DeliveryRuleConstraintSelect {
	drcs.fns = append(drcs.fns, fns...)
	return drcs
}

// Scan applies the selector query and scans the result into the given value.
func (drcs *DeliveryRuleConstraintSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drcs.ctx, ent.OpQuerySelect)
	if err := drcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryRuleConstraintQuery, *DeliveryRuleConstraintSelect](ctx, drcs.DeliveryRuleConstraintQuery, drcs, drcs.inters, v)
}

func (drcs *DeliveryRuleConstraintSelect) sqlScan(ctx context.Context, root *DeliveryRuleConstraintQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drcs.fns))
	for _, fn := range drcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
