// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectionLookupCreate is the builder for creating a ConnectionLookup entity.
type ConnectionLookupCreate struct {
	config
	mutation *ConnectionLookupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (clc *ConnectionLookupCreate) SetTenantID(pu pulid.ID) *ConnectionLookupCreate {
	clc.mutation.SetTenantID(pu)
	return clc
}

// SetPayload sets the "payload" field.
func (clc *ConnectionLookupCreate) SetPayload(s string) *ConnectionLookupCreate {
	clc.mutation.SetPayload(s)
	return clc
}

// SetOptionsOutputCount sets the "options_output_count" field.
func (clc *ConnectionLookupCreate) SetOptionsOutputCount(i int) *ConnectionLookupCreate {
	clc.mutation.SetOptionsOutputCount(i)
	return clc
}

// SetError sets the "error" field.
func (clc *ConnectionLookupCreate) SetError(s string) *ConnectionLookupCreate {
	clc.mutation.SetError(s)
	return clc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (clc *ConnectionLookupCreate) SetNillableError(s *string) *ConnectionLookupCreate {
	if s != nil {
		clc.SetError(*s)
	}
	return clc
}

// SetCreatedAt sets the "created_at" field.
func (clc *ConnectionLookupCreate) SetCreatedAt(t time.Time) *ConnectionLookupCreate {
	clc.mutation.SetCreatedAt(t)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *ConnectionLookupCreate) SetNillableCreatedAt(t *time.Time) *ConnectionLookupCreate {
	if t != nil {
		clc.SetCreatedAt(*t)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *ConnectionLookupCreate) SetID(pu pulid.ID) *ConnectionLookupCreate {
	clc.mutation.SetID(pu)
	return clc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (clc *ConnectionLookupCreate) SetNillableID(pu *pulid.ID) *ConnectionLookupCreate {
	if pu != nil {
		clc.SetID(*pu)
	}
	return clc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (clc *ConnectionLookupCreate) SetTenant(t *Tenant) *ConnectionLookupCreate {
	return clc.SetTenantID(t.ID)
}

// SetConnectionsID sets the "connections" edge to the Connection entity by ID.
func (clc *ConnectionLookupCreate) SetConnectionsID(id pulid.ID) *ConnectionLookupCreate {
	clc.mutation.SetConnectionsID(id)
	return clc
}

// SetNillableConnectionsID sets the "connections" edge to the Connection entity by ID if the given value is not nil.
func (clc *ConnectionLookupCreate) SetNillableConnectionsID(id *pulid.ID) *ConnectionLookupCreate {
	if id != nil {
		clc = clc.SetConnectionsID(*id)
	}
	return clc
}

// SetConnections sets the "connections" edge to the Connection entity.
func (clc *ConnectionLookupCreate) SetConnections(c *Connection) *ConnectionLookupCreate {
	return clc.SetConnectionsID(c.ID)
}

// Mutation returns the ConnectionLookupMutation object of the builder.
func (clc *ConnectionLookupCreate) Mutation() *ConnectionLookupMutation {
	return clc.mutation
}

// Save creates the ConnectionLookup in the database.
func (clc *ConnectionLookupCreate) Save(ctx context.Context) (*ConnectionLookup, error) {
	if err := clc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *ConnectionLookupCreate) SaveX(ctx context.Context) *ConnectionLookup {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *ConnectionLookupCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *ConnectionLookupCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *ConnectionLookupCreate) defaults() error {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		if connectionlookup.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized connectionlookup.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := connectionlookup.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
	if _, ok := clc.mutation.ID(); !ok {
		if connectionlookup.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized connectionlookup.DefaultID (forgotten import ent/runtime?)")
		}
		v := connectionlookup.DefaultID()
		clc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clc *ConnectionLookupCreate) check() error {
	if _, ok := clc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ConnectionLookup.tenant_id"`)}
	}
	if _, ok := clc.mutation.Payload(); !ok {
		return &ValidationError{Name: "payload", err: errors.New(`ent: missing required field "ConnectionLookup.payload"`)}
	}
	if _, ok := clc.mutation.OptionsOutputCount(); !ok {
		return &ValidationError{Name: "options_output_count", err: errors.New(`ent: missing required field "ConnectionLookup.options_output_count"`)}
	}
	if _, ok := clc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ConnectionLookup.created_at"`)}
	}
	if len(clc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ConnectionLookup.tenant"`)}
	}
	return nil
}

func (clc *ConnectionLookupCreate) sqlSave(ctx context.Context) (*ConnectionLookup, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *ConnectionLookupCreate) createSpec() (*ConnectionLookup, *sqlgraph.CreateSpec) {
	var (
		_node = &ConnectionLookup{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(connectionlookup.Table, sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString))
	)
	_spec.OnConflict = clc.conflict
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := clc.mutation.Payload(); ok {
		_spec.SetField(connectionlookup.FieldPayload, field.TypeString, value)
		_node.Payload = value
	}
	if value, ok := clc.mutation.OptionsOutputCount(); ok {
		_spec.SetField(connectionlookup.FieldOptionsOutputCount, field.TypeInt, value)
		_node.OptionsOutputCount = value
	}
	if value, ok := clc.mutation.Error(); ok {
		_spec.SetField(connectionlookup.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.SetField(connectionlookup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := clc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionlookup.TenantTable,
			Columns: []string{connectionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.ConnectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionlookup.ConnectionsTable,
			Columns: []string{connectionlookup.ConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_lookup_connections = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConnectionLookup.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectionLookupUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (clc *ConnectionLookupCreate) OnConflict(opts ...sql.ConflictOption) *ConnectionLookupUpsertOne {
	clc.conflict = opts
	return &ConnectionLookupUpsertOne{
		create: clc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConnectionLookup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clc *ConnectionLookupCreate) OnConflictColumns(columns ...string) *ConnectionLookupUpsertOne {
	clc.conflict = append(clc.conflict, sql.ConflictColumns(columns...))
	return &ConnectionLookupUpsertOne{
		create: clc,
	}
}

type (
	// ConnectionLookupUpsertOne is the builder for "upsert"-ing
	//  one ConnectionLookup node.
	ConnectionLookupUpsertOne struct {
		create *ConnectionLookupCreate
	}

	// ConnectionLookupUpsert is the "OnConflict" setter.
	ConnectionLookupUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionLookupUpsert) SetTenantID(v pulid.ID) *ConnectionLookupUpsert {
	u.Set(connectionlookup.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionLookupUpsert) UpdateTenantID() *ConnectionLookupUpsert {
	u.SetExcluded(connectionlookup.FieldTenantID)
	return u
}

// SetPayload sets the "payload" field.
func (u *ConnectionLookupUpsert) SetPayload(v string) *ConnectionLookupUpsert {
	u.Set(connectionlookup.FieldPayload, v)
	return u
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *ConnectionLookupUpsert) UpdatePayload() *ConnectionLookupUpsert {
	u.SetExcluded(connectionlookup.FieldPayload)
	return u
}

// SetOptionsOutputCount sets the "options_output_count" field.
func (u *ConnectionLookupUpsert) SetOptionsOutputCount(v int) *ConnectionLookupUpsert {
	u.Set(connectionlookup.FieldOptionsOutputCount, v)
	return u
}

// UpdateOptionsOutputCount sets the "options_output_count" field to the value that was provided on create.
func (u *ConnectionLookupUpsert) UpdateOptionsOutputCount() *ConnectionLookupUpsert {
	u.SetExcluded(connectionlookup.FieldOptionsOutputCount)
	return u
}

// AddOptionsOutputCount adds v to the "options_output_count" field.
func (u *ConnectionLookupUpsert) AddOptionsOutputCount(v int) *ConnectionLookupUpsert {
	u.Add(connectionlookup.FieldOptionsOutputCount, v)
	return u
}

// SetError sets the "error" field.
func (u *ConnectionLookupUpsert) SetError(v string) *ConnectionLookupUpsert {
	u.Set(connectionlookup.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ConnectionLookupUpsert) UpdateError() *ConnectionLookupUpsert {
	u.SetExcluded(connectionlookup.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *ConnectionLookupUpsert) ClearError() *ConnectionLookupUpsert {
	u.SetNull(connectionlookup.FieldError)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ConnectionLookup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connectionlookup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectionLookupUpsertOne) UpdateNewValues() *ConnectionLookupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(connectionlookup.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(connectionlookup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConnectionLookup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConnectionLookupUpsertOne) Ignore() *ConnectionLookupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectionLookupUpsertOne) DoNothing() *ConnectionLookupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectionLookupCreate.OnConflict
// documentation for more info.
func (u *ConnectionLookupUpsertOne) Update(set func(*ConnectionLookupUpsert)) *ConnectionLookupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectionLookupUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionLookupUpsertOne) SetTenantID(v pulid.ID) *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionLookupUpsertOne) UpdateTenantID() *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.UpdateTenantID()
	})
}

// SetPayload sets the "payload" field.
func (u *ConnectionLookupUpsertOne) SetPayload(v string) *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *ConnectionLookupUpsertOne) UpdatePayload() *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.UpdatePayload()
	})
}

// SetOptionsOutputCount sets the "options_output_count" field.
func (u *ConnectionLookupUpsertOne) SetOptionsOutputCount(v int) *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.SetOptionsOutputCount(v)
	})
}

// AddOptionsOutputCount adds v to the "options_output_count" field.
func (u *ConnectionLookupUpsertOne) AddOptionsOutputCount(v int) *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.AddOptionsOutputCount(v)
	})
}

// UpdateOptionsOutputCount sets the "options_output_count" field to the value that was provided on create.
func (u *ConnectionLookupUpsertOne) UpdateOptionsOutputCount() *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.UpdateOptionsOutputCount()
	})
}

// SetError sets the "error" field.
func (u *ConnectionLookupUpsertOne) SetError(v string) *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ConnectionLookupUpsertOne) UpdateError() *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *ConnectionLookupUpsertOne) ClearError() *ConnectionLookupUpsertOne {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.ClearError()
	})
}

// Exec executes the query.
func (u *ConnectionLookupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectionLookupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectionLookupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConnectionLookupUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ConnectionLookupUpsertOne.ID is not supported by MySQL driver. Use ConnectionLookupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConnectionLookupUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConnectionLookupCreateBulk is the builder for creating many ConnectionLookup entities in bulk.
type ConnectionLookupCreateBulk struct {
	config
	err      error
	builders []*ConnectionLookupCreate
	conflict []sql.ConflictOption
}

// Save creates the ConnectionLookup entities in the database.
func (clcb *ConnectionLookupCreateBulk) Save(ctx context.Context) ([]*ConnectionLookup, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*ConnectionLookup, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectionLookupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = clcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *ConnectionLookupCreateBulk) SaveX(ctx context.Context) []*ConnectionLookup {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *ConnectionLookupCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *ConnectionLookupCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConnectionLookup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectionLookupUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (clcb *ConnectionLookupCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConnectionLookupUpsertBulk {
	clcb.conflict = opts
	return &ConnectionLookupUpsertBulk{
		create: clcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConnectionLookup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clcb *ConnectionLookupCreateBulk) OnConflictColumns(columns ...string) *ConnectionLookupUpsertBulk {
	clcb.conflict = append(clcb.conflict, sql.ConflictColumns(columns...))
	return &ConnectionLookupUpsertBulk{
		create: clcb,
	}
}

// ConnectionLookupUpsertBulk is the builder for "upsert"-ing
// a bulk of ConnectionLookup nodes.
type ConnectionLookupUpsertBulk struct {
	create *ConnectionLookupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ConnectionLookup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connectionlookup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectionLookupUpsertBulk) UpdateNewValues() *ConnectionLookupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(connectionlookup.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(connectionlookup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConnectionLookup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConnectionLookupUpsertBulk) Ignore() *ConnectionLookupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectionLookupUpsertBulk) DoNothing() *ConnectionLookupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectionLookupCreateBulk.OnConflict
// documentation for more info.
func (u *ConnectionLookupUpsertBulk) Update(set func(*ConnectionLookupUpsert)) *ConnectionLookupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectionLookupUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionLookupUpsertBulk) SetTenantID(v pulid.ID) *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionLookupUpsertBulk) UpdateTenantID() *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.UpdateTenantID()
	})
}

// SetPayload sets the "payload" field.
func (u *ConnectionLookupUpsertBulk) SetPayload(v string) *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *ConnectionLookupUpsertBulk) UpdatePayload() *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.UpdatePayload()
	})
}

// SetOptionsOutputCount sets the "options_output_count" field.
func (u *ConnectionLookupUpsertBulk) SetOptionsOutputCount(v int) *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.SetOptionsOutputCount(v)
	})
}

// AddOptionsOutputCount adds v to the "options_output_count" field.
func (u *ConnectionLookupUpsertBulk) AddOptionsOutputCount(v int) *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.AddOptionsOutputCount(v)
	})
}

// UpdateOptionsOutputCount sets the "options_output_count" field to the value that was provided on create.
func (u *ConnectionLookupUpsertBulk) UpdateOptionsOutputCount() *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.UpdateOptionsOutputCount()
	})
}

// SetError sets the "error" field.
func (u *ConnectionLookupUpsertBulk) SetError(v string) *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *ConnectionLookupUpsertBulk) UpdateError() *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *ConnectionLookupUpsertBulk) ClearError() *ConnectionLookupUpsertBulk {
	return u.Update(func(s *ConnectionLookupUpsert) {
		s.ClearError()
	})
}

// Exec executes the query.
func (u *ConnectionLookupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConnectionLookupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectionLookupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectionLookupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
