// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/userseat"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserSeat is the model entity for the UserSeat schema.
type UserSeat struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname string `json:"surname,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSeatQuery when eager-loading is set.
	Edges        UserSeatEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserSeatEdges holds the relations/edges for other nodes in the graph.
type UserSeatEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSeatEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSeat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userseat.FieldID, userseat.FieldTenantID:
			values[i] = new(pulid.ID)
		case userseat.FieldName, userseat.FieldSurname, userseat.FieldEmail, userseat.FieldPassword, userseat.FieldHash:
			values[i] = new(sql.NullString)
		case userseat.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSeat fields.
func (us *UserSeat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userseat.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				us.ID = *value
			}
		case userseat.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				us.TenantID = *value
			}
		case userseat.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				us.Name = value.String
			}
		case userseat.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				us.Surname = value.String
			}
		case userseat.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				us.Email = value.String
			}
		case userseat.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				us.Password = value.String
			}
		case userseat.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				us.Hash = value.String
			}
		case userseat.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				us.CreatedAt = value.Time
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSeat.
// This includes values selected through modifiers, order, etc.
func (us *UserSeat) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the UserSeat entity.
func (us *UserSeat) QueryTenant() *TenantQuery {
	return NewUserSeatClient(us.config).QueryTenant(us)
}

// Update returns a builder for updating this UserSeat.
// Note that you need to call UserSeat.Unwrap() before calling this method if this UserSeat
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSeat) Update() *UserSeatUpdateOne {
	return NewUserSeatClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSeat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSeat) Unwrap() *UserSeat {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSeat is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSeat) String() string {
	var builder strings.Builder
	builder.WriteString("UserSeat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", us.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(us.Name)
	builder.WriteString(", ")
	builder.WriteString("surname=")
	builder.WriteString(us.Surname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(us.Email)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("hash=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(us.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserSeats is a parsable slice of UserSeat.
type UserSeats []*UserSeat
