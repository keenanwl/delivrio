// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// APITokenUpdate is the builder for updating APIToken entities.
type APITokenUpdate struct {
	config
	hooks    []Hook
	mutation *APITokenMutation
}

// Where appends a list predicates to the APITokenUpdate builder.
func (atu *APITokenUpdate) Where(ps ...predicate.APIToken) *APITokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetTenantID sets the "tenant_id" field.
func (atu *APITokenUpdate) SetTenantID(pu pulid.ID) *APITokenUpdate {
	atu.mutation.SetTenantID(pu)
	return atu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (atu *APITokenUpdate) SetNillableTenantID(pu *pulid.ID) *APITokenUpdate {
	if pu != nil {
		atu.SetTenantID(*pu)
	}
	return atu
}

// SetName sets the "name" field.
func (atu *APITokenUpdate) SetName(s string) *APITokenUpdate {
	atu.mutation.SetName(s)
	return atu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atu *APITokenUpdate) SetNillableName(s *string) *APITokenUpdate {
	if s != nil {
		atu.SetName(*s)
	}
	return atu
}

// SetLastUsed sets the "last_used" field.
func (atu *APITokenUpdate) SetLastUsed(t time.Time) *APITokenUpdate {
	atu.mutation.SetLastUsed(t)
	return atu
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (atu *APITokenUpdate) SetNillableLastUsed(t *time.Time) *APITokenUpdate {
	if t != nil {
		atu.SetLastUsed(*t)
	}
	return atu
}

// ClearLastUsed clears the value of the "last_used" field.
func (atu *APITokenUpdate) ClearLastUsed() *APITokenUpdate {
	atu.mutation.ClearLastUsed()
	return atu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (atu *APITokenUpdate) SetTenant(t *Tenant) *APITokenUpdate {
	return atu.SetTenantID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (atu *APITokenUpdate) SetUserID(id pulid.ID) *APITokenUpdate {
	atu.mutation.SetUserID(id)
	return atu
}

// SetUser sets the "user" edge to the User entity.
func (atu *APITokenUpdate) SetUser(u *User) *APITokenUpdate {
	return atu.SetUserID(u.ID)
}

// Mutation returns the APITokenMutation object of the builder.
func (atu *APITokenUpdate) Mutation() *APITokenMutation {
	return atu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (atu *APITokenUpdate) ClearTenant() *APITokenUpdate {
	atu.mutation.ClearTenant()
	return atu
}

// ClearUser clears the "user" edge to the User entity.
func (atu *APITokenUpdate) ClearUser() *APITokenUpdate {
	atu.mutation.ClearUser()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *APITokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *APITokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *APITokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *APITokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *APITokenUpdate) check() error {
	if atu.mutation.TenantCleared() && len(atu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "APIToken.tenant"`)
	}
	if atu.mutation.UserCleared() && len(atu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "APIToken.user"`)
	}
	return nil
}

func (atu *APITokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apitoken.Table, apitoken.Columns, sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Name(); ok {
		_spec.SetField(apitoken.FieldName, field.TypeString, value)
	}
	if atu.mutation.CreatedAtCleared() {
		_spec.ClearField(apitoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := atu.mutation.LastUsed(); ok {
		_spec.SetField(apitoken.FieldLastUsed, field.TypeTime, value)
	}
	if atu.mutation.LastUsedCleared() {
		_spec.ClearField(apitoken.FieldLastUsed, field.TypeTime)
	}
	if atu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.TenantTable,
			Columns: []string{apitoken.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.TenantTable,
			Columns: []string{apitoken.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apitoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// APITokenUpdateOne is the builder for updating a single APIToken entity.
type APITokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *APITokenMutation
}

// SetTenantID sets the "tenant_id" field.
func (atuo *APITokenUpdateOne) SetTenantID(pu pulid.ID) *APITokenUpdateOne {
	atuo.mutation.SetTenantID(pu)
	return atuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (atuo *APITokenUpdateOne) SetNillableTenantID(pu *pulid.ID) *APITokenUpdateOne {
	if pu != nil {
		atuo.SetTenantID(*pu)
	}
	return atuo
}

// SetName sets the "name" field.
func (atuo *APITokenUpdateOne) SetName(s string) *APITokenUpdateOne {
	atuo.mutation.SetName(s)
	return atuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atuo *APITokenUpdateOne) SetNillableName(s *string) *APITokenUpdateOne {
	if s != nil {
		atuo.SetName(*s)
	}
	return atuo
}

// SetLastUsed sets the "last_used" field.
func (atuo *APITokenUpdateOne) SetLastUsed(t time.Time) *APITokenUpdateOne {
	atuo.mutation.SetLastUsed(t)
	return atuo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (atuo *APITokenUpdateOne) SetNillableLastUsed(t *time.Time) *APITokenUpdateOne {
	if t != nil {
		atuo.SetLastUsed(*t)
	}
	return atuo
}

// ClearLastUsed clears the value of the "last_used" field.
func (atuo *APITokenUpdateOne) ClearLastUsed() *APITokenUpdateOne {
	atuo.mutation.ClearLastUsed()
	return atuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (atuo *APITokenUpdateOne) SetTenant(t *Tenant) *APITokenUpdateOne {
	return atuo.SetTenantID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (atuo *APITokenUpdateOne) SetUserID(id pulid.ID) *APITokenUpdateOne {
	atuo.mutation.SetUserID(id)
	return atuo
}

// SetUser sets the "user" edge to the User entity.
func (atuo *APITokenUpdateOne) SetUser(u *User) *APITokenUpdateOne {
	return atuo.SetUserID(u.ID)
}

// Mutation returns the APITokenMutation object of the builder.
func (atuo *APITokenUpdateOne) Mutation() *APITokenMutation {
	return atuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (atuo *APITokenUpdateOne) ClearTenant() *APITokenUpdateOne {
	atuo.mutation.ClearTenant()
	return atuo
}

// ClearUser clears the "user" edge to the User entity.
func (atuo *APITokenUpdateOne) ClearUser() *APITokenUpdateOne {
	atuo.mutation.ClearUser()
	return atuo
}

// Where appends a list predicates to the APITokenUpdate builder.
func (atuo *APITokenUpdateOne) Where(ps ...predicate.APIToken) *APITokenUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *APITokenUpdateOne) Select(field string, fields ...string) *APITokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated APIToken entity.
func (atuo *APITokenUpdateOne) Save(ctx context.Context) (*APIToken, error) {
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *APITokenUpdateOne) SaveX(ctx context.Context) *APIToken {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *APITokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *APITokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *APITokenUpdateOne) check() error {
	if atuo.mutation.TenantCleared() && len(atuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "APIToken.tenant"`)
	}
	if atuo.mutation.UserCleared() && len(atuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "APIToken.user"`)
	}
	return nil
}

func (atuo *APITokenUpdateOne) sqlSave(ctx context.Context) (_node *APIToken, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apitoken.Table, apitoken.Columns, sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "APIToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apitoken.FieldID)
		for _, f := range fields {
			if !apitoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apitoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Name(); ok {
		_spec.SetField(apitoken.FieldName, field.TypeString, value)
	}
	if atuo.mutation.CreatedAtCleared() {
		_spec.ClearField(apitoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.LastUsed(); ok {
		_spec.SetField(apitoken.FieldLastUsed, field.TypeTime, value)
	}
	if atuo.mutation.LastUsedCleared() {
		_spec.ClearField(apitoken.FieldLastUsed, field.TypeTime)
	}
	if atuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.TenantTable,
			Columns: []string{apitoken.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.TenantTable,
			Columns: []string{apitoken.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &APIToken{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apitoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
