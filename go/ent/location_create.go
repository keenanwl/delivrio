// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocationCreate is the builder for creating a Location entity.
type LocationCreate struct {
	config
	mutation *LocationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (lc *LocationCreate) SetTenantID(pu pulid.ID) *LocationCreate {
	lc.mutation.SetTenantID(pu)
	return lc
}

// SetName sets the "name" field.
func (lc *LocationCreate) SetName(s string) *LocationCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetID sets the "id" field.
func (lc *LocationCreate) SetID(pu pulid.ID) *LocationCreate {
	lc.mutation.SetID(pu)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LocationCreate) SetNillableID(pu *pulid.ID) *LocationCreate {
	if pu != nil {
		lc.SetID(*pu)
	}
	return lc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (lc *LocationCreate) SetTenant(t *Tenant) *LocationCreate {
	return lc.SetTenantID(t.ID)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (lc *LocationCreate) SetAddressID(id pulid.ID) *LocationCreate {
	lc.mutation.SetAddressID(id)
	return lc
}

// SetAddress sets the "address" edge to the Address entity.
func (lc *LocationCreate) SetAddress(a *Address) *LocationCreate {
	return lc.SetAddressID(a.ID)
}

// AddLocationTagIDs adds the "location_tags" edge to the LocationTag entity by IDs.
func (lc *LocationCreate) AddLocationTagIDs(ids ...pulid.ID) *LocationCreate {
	lc.mutation.AddLocationTagIDs(ids...)
	return lc
}

// AddLocationTags adds the "location_tags" edges to the LocationTag entity.
func (lc *LocationCreate) AddLocationTags(l ...*LocationTag) *LocationCreate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddLocationTagIDs(ids...)
}

// AddSenderConnectionIDs adds the "sender_connection" edge to the Connection entity by IDs.
func (lc *LocationCreate) AddSenderConnectionIDs(ids ...pulid.ID) *LocationCreate {
	lc.mutation.AddSenderConnectionIDs(ids...)
	return lc
}

// AddSenderConnection adds the "sender_connection" edges to the Connection entity.
func (lc *LocationCreate) AddSenderConnection(c ...*Connection) *LocationCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddSenderConnectionIDs(ids...)
}

// AddPickupConnectionIDs adds the "pickup_connection" edge to the Connection entity by IDs.
func (lc *LocationCreate) AddPickupConnectionIDs(ids ...pulid.ID) *LocationCreate {
	lc.mutation.AddPickupConnectionIDs(ids...)
	return lc
}

// AddPickupConnection adds the "pickup_connection" edges to the Connection entity.
func (lc *LocationCreate) AddPickupConnection(c ...*Connection) *LocationCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddPickupConnectionIDs(ids...)
}

// AddReturnConnectionIDs adds the "return_connection" edge to the Connection entity by IDs.
func (lc *LocationCreate) AddReturnConnectionIDs(ids ...pulid.ID) *LocationCreate {
	lc.mutation.AddReturnConnectionIDs(ids...)
	return lc
}

// AddReturnConnection adds the "return_connection" edges to the Connection entity.
func (lc *LocationCreate) AddReturnConnection(c ...*Connection) *LocationCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddReturnConnectionIDs(ids...)
}

// AddSellerConnectionIDs adds the "seller_connection" edge to the Connection entity by IDs.
func (lc *LocationCreate) AddSellerConnectionIDs(ids ...pulid.ID) *LocationCreate {
	lc.mutation.AddSellerConnectionIDs(ids...)
	return lc
}

// AddSellerConnection adds the "seller_connection" edges to the Connection entity.
func (lc *LocationCreate) AddSellerConnection(c ...*Connection) *LocationCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddSellerConnectionIDs(ids...)
}

// AddReturnPortalIDs adds the "return_portal" edge to the ReturnPortal entity by IDs.
func (lc *LocationCreate) AddReturnPortalIDs(ids ...pulid.ID) *LocationCreate {
	lc.mutation.AddReturnPortalIDs(ids...)
	return lc
}

// AddReturnPortal adds the "return_portal" edges to the ReturnPortal entity.
func (lc *LocationCreate) AddReturnPortal(r ...*ReturnPortal) *LocationCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lc.AddReturnPortalIDs(ids...)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (lc *LocationCreate) AddDeliveryOptionIDs(ids ...pulid.ID) *LocationCreate {
	lc.mutation.AddDeliveryOptionIDs(ids...)
	return lc
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (lc *LocationCreate) AddDeliveryOption(d ...*DeliveryOption) *LocationCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return lc.AddDeliveryOptionIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (lc *LocationCreate) AddColliIDs(ids ...pulid.ID) *LocationCreate {
	lc.mutation.AddColliIDs(ids...)
	return lc
}

// AddColli adds the "colli" edges to the Colli entity.
func (lc *LocationCreate) AddColli(c ...*Colli) *LocationCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddColliIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (lc *LocationCreate) Mutation() *LocationMutation {
	return lc.mutation
}

// Save creates the Location in the database.
func (lc *LocationCreate) Save(ctx context.Context) (*Location, error) {
	if err := lc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LocationCreate) SaveX(ctx context.Context) *Location {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LocationCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LocationCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LocationCreate) defaults() error {
	if _, ok := lc.mutation.ID(); !ok {
		if location.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized location.DefaultID (forgotten import ent/runtime?)")
		}
		v := location.DefaultID()
		lc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lc *LocationCreate) check() error {
	if _, ok := lc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Location.tenant_id"`)}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Location.name"`)}
	}
	if len(lc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Location.tenant"`)}
	}
	if len(lc.mutation.AddressIDs()) == 0 {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required edge "Location.address"`)}
	}
	if len(lc.mutation.LocationTagsIDs()) == 0 {
		return &ValidationError{Name: "location_tags", err: errors.New(`ent: missing required edge "Location.location_tags"`)}
	}
	return nil
}

func (lc *LocationCreate) sqlSave(ctx context.Context) (*Location, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LocationCreate) createSpec() (*Location, *sqlgraph.CreateSpec) {
	var (
		_node = &Location{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(location.Table, sqlgraph.NewFieldSpec(location.FieldID, field.TypeString))
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := lc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.TenantTable,
			Columns: []string{location.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.AddressTable,
			Columns: []string{location.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.location_address = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.LocationTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   location.LocationTagsTable,
			Columns: location.LocationTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.SenderConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SenderConnectionTable,
			Columns: []string{location.SenderConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.PickupConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.PickupConnectionTable,
			Columns: []string{location.PickupConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ReturnConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ReturnConnectionTable,
			Columns: []string{location.ReturnConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.SellerConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SellerConnectionTable,
			Columns: []string{location.SellerConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.ReturnPortalTable,
			Columns: location.ReturnPortalPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.DeliveryOptionTable,
			Columns: location.DeliveryOptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ColliTable,
			Columns: []string{location.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Location.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocationUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (lc *LocationCreate) OnConflict(opts ...sql.ConflictOption) *LocationUpsertOne {
	lc.conflict = opts
	return &LocationUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LocationCreate) OnConflictColumns(columns ...string) *LocationUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LocationUpsertOne{
		create: lc,
	}
}

type (
	// LocationUpsertOne is the builder for "upsert"-ing
	//  one Location node.
	LocationUpsertOne struct {
		create *LocationCreate
	}

	// LocationUpsert is the "OnConflict" setter.
	LocationUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *LocationUpsert) SetTenantID(v pulid.ID) *LocationUpsert {
	u.Set(location.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *LocationUpsert) UpdateTenantID() *LocationUpsert {
	u.SetExcluded(location.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *LocationUpsert) SetName(v string) *LocationUpsert {
	u.Set(location.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsert) UpdateName() *LocationUpsert {
	u.SetExcluded(location.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(location.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LocationUpsertOne) UpdateNewValues() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(location.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LocationUpsertOne) Ignore() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocationUpsertOne) DoNothing() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocationCreate.OnConflict
// documentation for more info.
func (u *LocationUpsertOne) Update(set func(*LocationUpsert)) *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *LocationUpsertOne) SetTenantID(v pulid.ID) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateTenantID() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *LocationUpsertOne) SetName(v string) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateName() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *LocationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LocationUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LocationUpsertOne.ID is not supported by MySQL driver. Use LocationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LocationUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LocationCreateBulk is the builder for creating many Location entities in bulk.
type LocationCreateBulk struct {
	config
	err      error
	builders []*LocationCreate
	conflict []sql.ConflictOption
}

// Save creates the Location entities in the database.
func (lcb *LocationCreateBulk) Save(ctx context.Context) ([]*Location, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Location, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LocationCreateBulk) SaveX(ctx context.Context) []*Location {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LocationCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LocationCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Location.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocationUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (lcb *LocationCreateBulk) OnConflict(opts ...sql.ConflictOption) *LocationUpsertBulk {
	lcb.conflict = opts
	return &LocationUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LocationCreateBulk) OnConflictColumns(columns ...string) *LocationUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LocationUpsertBulk{
		create: lcb,
	}
}

// LocationUpsertBulk is the builder for "upsert"-ing
// a bulk of Location nodes.
type LocationUpsertBulk struct {
	create *LocationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(location.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LocationUpsertBulk) UpdateNewValues() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(location.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LocationUpsertBulk) Ignore() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocationUpsertBulk) DoNothing() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocationCreateBulk.OnConflict
// documentation for more info.
func (u *LocationUpsertBulk) Update(set func(*LocationUpsert)) *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *LocationUpsertBulk) SetTenantID(v pulid.ID) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateTenantID() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *LocationUpsertBulk) SetName(v string) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateName() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *LocationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LocationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
