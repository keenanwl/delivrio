// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmailTemplate is the model entity for the EmailTemplate schema.
type EmailTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// HTMLTemplate holds the value of the "html_template" field.
	HTMLTemplate string `json:"html_template,omitempty"`
	// MergeType holds the value of the "merge_type" field.
	MergeType emailtemplate.MergeType `json:"merge_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailTemplateQuery when eager-loading is set.
	Edges        EmailTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmailTemplateEdges holds the relations/edges for other nodes in the graph.
type EmailTemplateEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ReturnPortalConfirmationLabel holds the value of the return_portal_confirmation_label edge.
	ReturnPortalConfirmationLabel []*ReturnPortal `json:"return_portal_confirmation_label,omitempty"`
	// ReturnPortalConfirmationQrCode holds the value of the return_portal_confirmation_qr_code edge.
	ReturnPortalConfirmationQrCode []*ReturnPortal `json:"return_portal_confirmation_qr_code,omitempty"`
	// ReturnPortalReceived holds the value of the return_portal_received edge.
	ReturnPortalReceived []*ReturnPortal `json:"return_portal_received,omitempty"`
	// ReturnPortalAccepted holds the value of the return_portal_accepted edge.
	ReturnPortalAccepted []*ReturnPortal `json:"return_portal_accepted,omitempty"`
	// DeliveryOptionClickCollectAtStore holds the value of the delivery_option_click_collect_at_store edge.
	DeliveryOptionClickCollectAtStore []*DeliveryOption `json:"delivery_option_click_collect_at_store,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedReturnPortalConfirmationLabel     map[string][]*ReturnPortal
	namedReturnPortalConfirmationQrCode    map[string][]*ReturnPortal
	namedReturnPortalReceived              map[string][]*ReturnPortal
	namedReturnPortalAccepted              map[string][]*ReturnPortal
	namedDeliveryOptionClickCollectAtStore map[string][]*DeliveryOption
	namedNotifications                     map[string][]*Notification
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailTemplateEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ReturnPortalConfirmationLabelOrErr returns the ReturnPortalConfirmationLabel value or an error if the edge
// was not loaded in eager-loading.
func (e EmailTemplateEdges) ReturnPortalConfirmationLabelOrErr() ([]*ReturnPortal, error) {
	if e.loadedTypes[1] {
		return e.ReturnPortalConfirmationLabel, nil
	}
	return nil, &NotLoadedError{edge: "return_portal_confirmation_label"}
}

// ReturnPortalConfirmationQrCodeOrErr returns the ReturnPortalConfirmationQrCode value or an error if the edge
// was not loaded in eager-loading.
func (e EmailTemplateEdges) ReturnPortalConfirmationQrCodeOrErr() ([]*ReturnPortal, error) {
	if e.loadedTypes[2] {
		return e.ReturnPortalConfirmationQrCode, nil
	}
	return nil, &NotLoadedError{edge: "return_portal_confirmation_qr_code"}
}

// ReturnPortalReceivedOrErr returns the ReturnPortalReceived value or an error if the edge
// was not loaded in eager-loading.
func (e EmailTemplateEdges) ReturnPortalReceivedOrErr() ([]*ReturnPortal, error) {
	if e.loadedTypes[3] {
		return e.ReturnPortalReceived, nil
	}
	return nil, &NotLoadedError{edge: "return_portal_received"}
}

// ReturnPortalAcceptedOrErr returns the ReturnPortalAccepted value or an error if the edge
// was not loaded in eager-loading.
func (e EmailTemplateEdges) ReturnPortalAcceptedOrErr() ([]*ReturnPortal, error) {
	if e.loadedTypes[4] {
		return e.ReturnPortalAccepted, nil
	}
	return nil, &NotLoadedError{edge: "return_portal_accepted"}
}

// DeliveryOptionClickCollectAtStoreOrErr returns the DeliveryOptionClickCollectAtStore value or an error if the edge
// was not loaded in eager-loading.
func (e EmailTemplateEdges) DeliveryOptionClickCollectAtStoreOrErr() ([]*DeliveryOption, error) {
	if e.loadedTypes[5] {
		return e.DeliveryOptionClickCollectAtStore, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option_click_collect_at_store"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e EmailTemplateEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[6] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailtemplate.FieldID, emailtemplate.FieldTenantID:
			values[i] = new(pulid.ID)
		case emailtemplate.FieldName, emailtemplate.FieldSubject, emailtemplate.FieldHTMLTemplate, emailtemplate.FieldMergeType:
			values[i] = new(sql.NullString)
		case emailtemplate.FieldCreatedAt, emailtemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailTemplate fields.
func (et *EmailTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailtemplate.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				et.ID = *value
			}
		case emailtemplate.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				et.TenantID = *value
			}
		case emailtemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				et.Name = value.String
			}
		case emailtemplate.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				et.Subject = value.String
			}
		case emailtemplate.FieldHTMLTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_template", values[i])
			} else if value.Valid {
				et.HTMLTemplate = value.String
			}
		case emailtemplate.FieldMergeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merge_type", values[i])
			} else if value.Valid {
				et.MergeType = emailtemplate.MergeType(value.String)
			}
		case emailtemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		case emailtemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				et.UpdatedAt = value.Time
			}
		default:
			et.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailTemplate.
// This includes values selected through modifiers, order, etc.
func (et *EmailTemplate) Value(name string) (ent.Value, error) {
	return et.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryTenant() *TenantQuery {
	return NewEmailTemplateClient(et.config).QueryTenant(et)
}

// QueryReturnPortalConfirmationLabel queries the "return_portal_confirmation_label" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryReturnPortalConfirmationLabel() *ReturnPortalQuery {
	return NewEmailTemplateClient(et.config).QueryReturnPortalConfirmationLabel(et)
}

// QueryReturnPortalConfirmationQrCode queries the "return_portal_confirmation_qr_code" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryReturnPortalConfirmationQrCode() *ReturnPortalQuery {
	return NewEmailTemplateClient(et.config).QueryReturnPortalConfirmationQrCode(et)
}

// QueryReturnPortalReceived queries the "return_portal_received" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryReturnPortalReceived() *ReturnPortalQuery {
	return NewEmailTemplateClient(et.config).QueryReturnPortalReceived(et)
}

// QueryReturnPortalAccepted queries the "return_portal_accepted" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryReturnPortalAccepted() *ReturnPortalQuery {
	return NewEmailTemplateClient(et.config).QueryReturnPortalAccepted(et)
}

// QueryDeliveryOptionClickCollectAtStore queries the "delivery_option_click_collect_at_store" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryDeliveryOptionClickCollectAtStore() *DeliveryOptionQuery {
	return NewEmailTemplateClient(et.config).QueryDeliveryOptionClickCollectAtStore(et)
}

// QueryNotifications queries the "notifications" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryNotifications() *NotificationQuery {
	return NewEmailTemplateClient(et.config).QueryNotifications(et)
}

// Update returns a builder for updating this EmailTemplate.
// Note that you need to call EmailTemplate.Unwrap() before calling this method if this EmailTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EmailTemplate) Update() *EmailTemplateUpdateOne {
	return NewEmailTemplateClient(et.config).UpdateOne(et)
}

// Unwrap unwraps the EmailTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EmailTemplate) Unwrap() *EmailTemplate {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailTemplate is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EmailTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("EmailTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", et.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(et.Name)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(et.Subject)
	builder.WriteString(", ")
	builder.WriteString("html_template=")
	builder.WriteString(et.HTMLTemplate)
	builder.WriteString(", ")
	builder.WriteString("merge_type=")
	builder.WriteString(fmt.Sprintf("%v", et.MergeType))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(et.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedReturnPortalConfirmationLabel returns the ReturnPortalConfirmationLabel named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EmailTemplate) NamedReturnPortalConfirmationLabel(name string) ([]*ReturnPortal, error) {
	if et.Edges.namedReturnPortalConfirmationLabel == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedReturnPortalConfirmationLabel[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EmailTemplate) appendNamedReturnPortalConfirmationLabel(name string, edges ...*ReturnPortal) {
	if et.Edges.namedReturnPortalConfirmationLabel == nil {
		et.Edges.namedReturnPortalConfirmationLabel = make(map[string][]*ReturnPortal)
	}
	if len(edges) == 0 {
		et.Edges.namedReturnPortalConfirmationLabel[name] = []*ReturnPortal{}
	} else {
		et.Edges.namedReturnPortalConfirmationLabel[name] = append(et.Edges.namedReturnPortalConfirmationLabel[name], edges...)
	}
}

// NamedReturnPortalConfirmationQrCode returns the ReturnPortalConfirmationQrCode named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EmailTemplate) NamedReturnPortalConfirmationQrCode(name string) ([]*ReturnPortal, error) {
	if et.Edges.namedReturnPortalConfirmationQrCode == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedReturnPortalConfirmationQrCode[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EmailTemplate) appendNamedReturnPortalConfirmationQrCode(name string, edges ...*ReturnPortal) {
	if et.Edges.namedReturnPortalConfirmationQrCode == nil {
		et.Edges.namedReturnPortalConfirmationQrCode = make(map[string][]*ReturnPortal)
	}
	if len(edges) == 0 {
		et.Edges.namedReturnPortalConfirmationQrCode[name] = []*ReturnPortal{}
	} else {
		et.Edges.namedReturnPortalConfirmationQrCode[name] = append(et.Edges.namedReturnPortalConfirmationQrCode[name], edges...)
	}
}

// NamedReturnPortalReceived returns the ReturnPortalReceived named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EmailTemplate) NamedReturnPortalReceived(name string) ([]*ReturnPortal, error) {
	if et.Edges.namedReturnPortalReceived == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedReturnPortalReceived[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EmailTemplate) appendNamedReturnPortalReceived(name string, edges ...*ReturnPortal) {
	if et.Edges.namedReturnPortalReceived == nil {
		et.Edges.namedReturnPortalReceived = make(map[string][]*ReturnPortal)
	}
	if len(edges) == 0 {
		et.Edges.namedReturnPortalReceived[name] = []*ReturnPortal{}
	} else {
		et.Edges.namedReturnPortalReceived[name] = append(et.Edges.namedReturnPortalReceived[name], edges...)
	}
}

// NamedReturnPortalAccepted returns the ReturnPortalAccepted named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EmailTemplate) NamedReturnPortalAccepted(name string) ([]*ReturnPortal, error) {
	if et.Edges.namedReturnPortalAccepted == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedReturnPortalAccepted[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EmailTemplate) appendNamedReturnPortalAccepted(name string, edges ...*ReturnPortal) {
	if et.Edges.namedReturnPortalAccepted == nil {
		et.Edges.namedReturnPortalAccepted = make(map[string][]*ReturnPortal)
	}
	if len(edges) == 0 {
		et.Edges.namedReturnPortalAccepted[name] = []*ReturnPortal{}
	} else {
		et.Edges.namedReturnPortalAccepted[name] = append(et.Edges.namedReturnPortalAccepted[name], edges...)
	}
}

// NamedDeliveryOptionClickCollectAtStore returns the DeliveryOptionClickCollectAtStore named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EmailTemplate) NamedDeliveryOptionClickCollectAtStore(name string) ([]*DeliveryOption, error) {
	if et.Edges.namedDeliveryOptionClickCollectAtStore == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedDeliveryOptionClickCollectAtStore[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EmailTemplate) appendNamedDeliveryOptionClickCollectAtStore(name string, edges ...*DeliveryOption) {
	if et.Edges.namedDeliveryOptionClickCollectAtStore == nil {
		et.Edges.namedDeliveryOptionClickCollectAtStore = make(map[string][]*DeliveryOption)
	}
	if len(edges) == 0 {
		et.Edges.namedDeliveryOptionClickCollectAtStore[name] = []*DeliveryOption{}
	} else {
		et.Edges.namedDeliveryOptionClickCollectAtStore[name] = append(et.Edges.namedDeliveryOptionClickCollectAtStore[name], edges...)
	}
}

// NamedNotifications returns the Notifications named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EmailTemplate) NamedNotifications(name string) ([]*Notification, error) {
	if et.Edges.namedNotifications == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedNotifications[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EmailTemplate) appendNamedNotifications(name string, edges ...*Notification) {
	if et.Edges.namedNotifications == nil {
		et.Edges.namedNotifications = make(map[string][]*Notification)
	}
	if len(edges) == 0 {
		et.Edges.namedNotifications[name] = []*Notification{}
	} else {
		et.Edges.namedNotifications[name] = append(et.Edges.namedNotifications[name], edges...)
	}
}

// EmailTemplates is a parsable slice of EmailTemplate.
type EmailTemplates []*EmailTemplate
