// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierDAOCreate is the builder for creating a CarrierDAO entity.
type CarrierDAOCreate struct {
	config
	mutation *CarrierDAOMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cdc *CarrierDAOCreate) SetTenantID(pu pulid.ID) *CarrierDAOCreate {
	cdc.mutation.SetTenantID(pu)
	return cdc
}

// SetCustomerID sets the "customer_id" field.
func (cdc *CarrierDAOCreate) SetCustomerID(s string) *CarrierDAOCreate {
	cdc.mutation.SetCustomerID(s)
	return cdc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cdc *CarrierDAOCreate) SetNillableCustomerID(s *string) *CarrierDAOCreate {
	if s != nil {
		cdc.SetCustomerID(*s)
	}
	return cdc
}

// SetAPIKey sets the "api_key" field.
func (cdc *CarrierDAOCreate) SetAPIKey(s string) *CarrierDAOCreate {
	cdc.mutation.SetAPIKey(s)
	return cdc
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cdc *CarrierDAOCreate) SetNillableAPIKey(s *string) *CarrierDAOCreate {
	if s != nil {
		cdc.SetAPIKey(*s)
	}
	return cdc
}

// SetTest sets the "Test" field.
func (cdc *CarrierDAOCreate) SetTest(b bool) *CarrierDAOCreate {
	cdc.mutation.SetTest(b)
	return cdc
}

// SetNillableTest sets the "Test" field if the given value is not nil.
func (cdc *CarrierDAOCreate) SetNillableTest(b *bool) *CarrierDAOCreate {
	if b != nil {
		cdc.SetTest(*b)
	}
	return cdc
}

// SetID sets the "id" field.
func (cdc *CarrierDAOCreate) SetID(pu pulid.ID) *CarrierDAOCreate {
	cdc.mutation.SetID(pu)
	return cdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cdc *CarrierDAOCreate) SetNillableID(pu *pulid.ID) *CarrierDAOCreate {
	if pu != nil {
		cdc.SetID(*pu)
	}
	return cdc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cdc *CarrierDAOCreate) SetTenant(t *Tenant) *CarrierDAOCreate {
	return cdc.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cdc *CarrierDAOCreate) SetCarrierID(id pulid.ID) *CarrierDAOCreate {
	cdc.mutation.SetCarrierID(id)
	return cdc
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cdc *CarrierDAOCreate) SetCarrier(c *Carrier) *CarrierDAOCreate {
	return cdc.SetCarrierID(c.ID)
}

// Mutation returns the CarrierDAOMutation object of the builder.
func (cdc *CarrierDAOCreate) Mutation() *CarrierDAOMutation {
	return cdc.mutation
}

// Save creates the CarrierDAO in the database.
func (cdc *CarrierDAOCreate) Save(ctx context.Context) (*CarrierDAO, error) {
	if err := cdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cdc.sqlSave, cdc.mutation, cdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *CarrierDAOCreate) SaveX(ctx context.Context) *CarrierDAO {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *CarrierDAOCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *CarrierDAOCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *CarrierDAOCreate) defaults() error {
	if _, ok := cdc.mutation.Test(); !ok {
		v := carrierdao.DefaultTest
		cdc.mutation.SetTest(v)
	}
	if _, ok := cdc.mutation.ID(); !ok {
		if carrierdao.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierdao.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierdao.DefaultID()
		cdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cdc *CarrierDAOCreate) check() error {
	if _, ok := cdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CarrierDAO.tenant_id"`)}
	}
	if _, ok := cdc.mutation.Test(); !ok {
		return &ValidationError{Name: "Test", err: errors.New(`ent: missing required field "CarrierDAO.Test"`)}
	}
	if len(cdc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CarrierDAO.tenant"`)}
	}
	if len(cdc.mutation.CarrierIDs()) == 0 {
		return &ValidationError{Name: "carrier", err: errors.New(`ent: missing required edge "CarrierDAO.carrier"`)}
	}
	return nil
}

func (cdc *CarrierDAOCreate) sqlSave(ctx context.Context) (*CarrierDAO, error) {
	if err := cdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cdc.mutation.id = &_node.ID
	cdc.mutation.done = true
	return _node, nil
}

func (cdc *CarrierDAOCreate) createSpec() (*CarrierDAO, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierDAO{config: cdc.config}
		_spec = sqlgraph.NewCreateSpec(carrierdao.Table, sqlgraph.NewFieldSpec(carrierdao.FieldID, field.TypeString))
	)
	_spec.OnConflict = cdc.conflict
	if id, ok := cdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cdc.mutation.CustomerID(); ok {
		_spec.SetField(carrierdao.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := cdc.mutation.APIKey(); ok {
		_spec.SetField(carrierdao.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := cdc.mutation.Test(); ok {
		_spec.SetField(carrierdao.FieldTest, field.TypeBool, value)
		_node.Test = value
	}
	if nodes := cdc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdao.TenantTable,
			Columns: []string{carrierdao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdao.CarrierTable,
			Columns: []string{carrierdao.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_carrier_dao = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierDAO.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierDAOUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cdc *CarrierDAOCreate) OnConflict(opts ...sql.ConflictOption) *CarrierDAOUpsertOne {
	cdc.conflict = opts
	return &CarrierDAOUpsertOne{
		create: cdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierDAO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cdc *CarrierDAOCreate) OnConflictColumns(columns ...string) *CarrierDAOUpsertOne {
	cdc.conflict = append(cdc.conflict, sql.ConflictColumns(columns...))
	return &CarrierDAOUpsertOne{
		create: cdc,
	}
}

type (
	// CarrierDAOUpsertOne is the builder for "upsert"-ing
	//  one CarrierDAO node.
	CarrierDAOUpsertOne struct {
		create *CarrierDAOCreate
	}

	// CarrierDAOUpsert is the "OnConflict" setter.
	CarrierDAOUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *CarrierDAOUpsert) SetTenantID(v pulid.ID) *CarrierDAOUpsert {
	u.Set(carrierdao.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierDAOUpsert) UpdateTenantID() *CarrierDAOUpsert {
	u.SetExcluded(carrierdao.FieldTenantID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierDAOUpsert) SetCustomerID(v string) *CarrierDAOUpsert {
	u.Set(carrierdao.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierDAOUpsert) UpdateCustomerID() *CarrierDAOUpsert {
	u.SetExcluded(carrierdao.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CarrierDAOUpsert) ClearCustomerID() *CarrierDAOUpsert {
	u.SetNull(carrierdao.FieldCustomerID)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierDAOUpsert) SetAPIKey(v string) *CarrierDAOUpsert {
	u.Set(carrierdao.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierDAOUpsert) UpdateAPIKey() *CarrierDAOUpsert {
	u.SetExcluded(carrierdao.FieldAPIKey)
	return u
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *CarrierDAOUpsert) ClearAPIKey() *CarrierDAOUpsert {
	u.SetNull(carrierdao.FieldAPIKey)
	return u
}

// SetTest sets the "Test" field.
func (u *CarrierDAOUpsert) SetTest(v bool) *CarrierDAOUpsert {
	u.Set(carrierdao.FieldTest, v)
	return u
}

// UpdateTest sets the "Test" field to the value that was provided on create.
func (u *CarrierDAOUpsert) UpdateTest() *CarrierDAOUpsert {
	u.SetExcluded(carrierdao.FieldTest)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierDAO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierdao.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierDAOUpsertOne) UpdateNewValues() *CarrierDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierdao.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierDAO.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierDAOUpsertOne) Ignore() *CarrierDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierDAOUpsertOne) DoNothing() *CarrierDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierDAOCreate.OnConflict
// documentation for more info.
func (u *CarrierDAOUpsertOne) Update(set func(*CarrierDAOUpsert)) *CarrierDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierDAOUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierDAOUpsertOne) SetTenantID(v pulid.ID) *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierDAOUpsertOne) UpdateTenantID() *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.UpdateTenantID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierDAOUpsertOne) SetCustomerID(v string) *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierDAOUpsertOne) UpdateCustomerID() *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CarrierDAOUpsertOne) ClearCustomerID() *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.ClearCustomerID()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierDAOUpsertOne) SetAPIKey(v string) *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierDAOUpsertOne) UpdateAPIKey() *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.UpdateAPIKey()
	})
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *CarrierDAOUpsertOne) ClearAPIKey() *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.ClearAPIKey()
	})
}

// SetTest sets the "Test" field.
func (u *CarrierDAOUpsertOne) SetTest(v bool) *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "Test" field to the value that was provided on create.
func (u *CarrierDAOUpsertOne) UpdateTest() *CarrierDAOUpsertOne {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.UpdateTest()
	})
}

// Exec executes the query.
func (u *CarrierDAOUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierDAOCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierDAOUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierDAOUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierDAOUpsertOne.ID is not supported by MySQL driver. Use CarrierDAOUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierDAOUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierDAOCreateBulk is the builder for creating many CarrierDAO entities in bulk.
type CarrierDAOCreateBulk struct {
	config
	err      error
	builders []*CarrierDAOCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierDAO entities in the database.
func (cdcb *CarrierDAOCreateBulk) Save(ctx context.Context) ([]*CarrierDAO, error) {
	if cdcb.err != nil {
		return nil, cdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*CarrierDAO, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierDAOMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *CarrierDAOCreateBulk) SaveX(ctx context.Context) []*CarrierDAO {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *CarrierDAOCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *CarrierDAOCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierDAO.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierDAOUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cdcb *CarrierDAOCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierDAOUpsertBulk {
	cdcb.conflict = opts
	return &CarrierDAOUpsertBulk{
		create: cdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierDAO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cdcb *CarrierDAOCreateBulk) OnConflictColumns(columns ...string) *CarrierDAOUpsertBulk {
	cdcb.conflict = append(cdcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierDAOUpsertBulk{
		create: cdcb,
	}
}

// CarrierDAOUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierDAO nodes.
type CarrierDAOUpsertBulk struct {
	create *CarrierDAOCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierDAO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierdao.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierDAOUpsertBulk) UpdateNewValues() *CarrierDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierdao.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierDAO.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierDAOUpsertBulk) Ignore() *CarrierDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierDAOUpsertBulk) DoNothing() *CarrierDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierDAOCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierDAOUpsertBulk) Update(set func(*CarrierDAOUpsert)) *CarrierDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierDAOUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierDAOUpsertBulk) SetTenantID(v pulid.ID) *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierDAOUpsertBulk) UpdateTenantID() *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.UpdateTenantID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierDAOUpsertBulk) SetCustomerID(v string) *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierDAOUpsertBulk) UpdateCustomerID() *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CarrierDAOUpsertBulk) ClearCustomerID() *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.ClearCustomerID()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierDAOUpsertBulk) SetAPIKey(v string) *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierDAOUpsertBulk) UpdateAPIKey() *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.UpdateAPIKey()
	})
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *CarrierDAOUpsertBulk) ClearAPIKey() *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.ClearAPIKey()
	})
}

// SetTest sets the "Test" field.
func (u *CarrierDAOUpsertBulk) SetTest(v bool) *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "Test" field to the value that was provided on create.
func (u *CarrierDAOUpsertBulk) UpdateTest() *CarrierDAOUpsertBulk {
	return u.Update(func(s *CarrierDAOUpsert) {
		s.UpdateTest()
	})
}

// Exec executes the query.
func (u *CarrierDAOUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierDAOCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierDAOCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierDAOUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
