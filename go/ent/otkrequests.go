// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OTKRequests is the model entity for the OTKRequests schema.
type OTKRequests struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Otk holds the value of the "otk" field.
	Otk string `json:"otk,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OTKRequestsQuery when eager-loading is set.
	Edges             OTKRequestsEdges `json:"edges"`
	user_otk_requests *pulid.ID
	selectValues      sql.SelectValues
}

// OTKRequestsEdges holds the relations/edges for other nodes in the graph.
type OTKRequestsEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OTKRequestsEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OTKRequestsEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OTKRequests) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case otkrequests.FieldID, otkrequests.FieldTenantID:
			values[i] = new(pulid.ID)
		case otkrequests.FieldOtk:
			values[i] = new(sql.NullString)
		case otkrequests.ForeignKeys[0]: // user_otk_requests
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OTKRequests fields.
func (or *OTKRequests) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case otkrequests.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				or.ID = *value
			}
		case otkrequests.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				or.TenantID = *value
			}
		case otkrequests.FieldOtk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field otk", values[i])
			} else if value.Valid {
				or.Otk = value.String
			}
		case otkrequests.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_otk_requests", values[i])
			} else if value.Valid {
				or.user_otk_requests = new(pulid.ID)
				*or.user_otk_requests = *value.S.(*pulid.ID)
			}
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OTKRequests.
// This includes values selected through modifiers, order, etc.
func (or *OTKRequests) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the OTKRequests entity.
func (or *OTKRequests) QueryTenant() *TenantQuery {
	return NewOTKRequestsClient(or.config).QueryTenant(or)
}

// QueryUsers queries the "users" edge of the OTKRequests entity.
func (or *OTKRequests) QueryUsers() *UserQuery {
	return NewOTKRequestsClient(or.config).QueryUsers(or)
}

// Update returns a builder for updating this OTKRequests.
// Note that you need to call OTKRequests.Unwrap() before calling this method if this OTKRequests
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OTKRequests) Update() *OTKRequestsUpdateOne {
	return NewOTKRequestsClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OTKRequests entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OTKRequests) Unwrap() *OTKRequests {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OTKRequests is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OTKRequests) String() string {
	var builder strings.Builder
	builder.WriteString("OTKRequests(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", or.TenantID))
	builder.WriteString(", ")
	builder.WriteString("otk=")
	builder.WriteString(or.Otk)
	builder.WriteByte(')')
	return builder.String()
}

// OTKRequestsSlice is a parsable slice of OTKRequests.
type OTKRequestsSlice []*OTKRequests
