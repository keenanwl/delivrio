// Code generated by ent, DO NOT EDIT.

package carrierservicegls

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrierservicegls type in the database.
	Label = "carrier_service_gls"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// FieldAPIValue holds the string denoting the api_value field in the database.
	FieldAPIValue = "api_value"
	// EdgeCarrierService holds the string denoting the carrier_service edge name in mutations.
	EdgeCarrierService = "carrier_service"
	// EdgeCarrierAdditionalServiceGLS holds the string denoting the carrier_additional_service_gls edge name in mutations.
	EdgeCarrierAdditionalServiceGLS = "carrier_additional_service_gls"
	// Table holds the table name of the carrierservicegls in the database.
	Table = "carrier_service_gl_ss"
	// CarrierServiceTable is the table that holds the carrier_service relation/edge.
	CarrierServiceTable = "carrier_service_gl_ss"
	// CarrierServiceInverseTable is the table name for the CarrierService entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservice" package.
	CarrierServiceInverseTable = "carrier_services"
	// CarrierServiceColumn is the table column denoting the carrier_service relation/edge.
	CarrierServiceColumn = "carrier_service_carrier_service_gls"
	// CarrierAdditionalServiceGLSTable is the table that holds the carrier_additional_service_gls relation/edge.
	CarrierAdditionalServiceGLSTable = "carrier_additional_service_gl_ss"
	// CarrierAdditionalServiceGLSInverseTable is the table name for the CarrierAdditionalServiceGLS entity.
	// It exists in this package in order to avoid circular dependency with the "carrieradditionalservicegls" package.
	CarrierAdditionalServiceGLSInverseTable = "carrier_additional_service_gl_ss"
	// CarrierAdditionalServiceGLSColumn is the table column denoting the carrier_additional_service_gls relation/edge.
	CarrierAdditionalServiceGLSColumn = "carrier_service_gls_carrier_additional_service_gls"
)

// Columns holds all SQL columns for carrierservicegls fields.
var Columns = []string{
	FieldID,
	FieldAPIKey,
	FieldAPIValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_service_gl_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_service_carrier_service_gls",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// APIValue defines the type for the "api_value" enum field.
type APIValue string

// APIValue values.
const (
	APIValueY             APIValue = "Y"
	APIValueNumericString APIValue = "numeric_string"
	APIValueNone          APIValue = "none"
)

func (av APIValue) String() string {
	return string(av)
}

// APIValueValidator is a validator for the "api_value" field enum values. It is called by the builders before save.
func APIValueValidator(av APIValue) error {
	switch av {
	case APIValueY, APIValueNumericString, APIValueNone:
		return nil
	default:
		return fmt.Errorf("carrierservicegls: invalid enum value for api_value field: %q", av)
	}
}

// OrderOption defines the ordering options for the CarrierServiceGLS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByAPIValue orders the results by the api_value field.
func ByAPIValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIValue, opts...).ToFunc()
}

// ByCarrierServiceField orders the results by carrier_service field.
func ByCarrierServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierAdditionalServiceGLSCount orders the results by carrier_additional_service_gls count.
func ByCarrierAdditionalServiceGLSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierAdditionalServiceGLSStep(), opts...)
	}
}

// ByCarrierAdditionalServiceGLS orders the results by carrier_additional_service_gls terms.
func ByCarrierAdditionalServiceGLS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierAdditionalServiceGLSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CarrierServiceTable, CarrierServiceColumn),
	)
}
func newCarrierAdditionalServiceGLSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierAdditionalServiceGLSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarrierAdditionalServiceGLSTable, CarrierAdditionalServiceGLSColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e APIValue) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *APIValue) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = APIValue(str)
	if err := APIValueValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid APIValue", str)
	}
	return nil
}
