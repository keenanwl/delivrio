// Code generated by ent, DO NOT EDIT.

package carrierservicegls

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldLTE(FieldID, id))
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldNEQ(FieldAPIKey, v))
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldIn(FieldAPIKey, vs...))
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldNotIn(FieldAPIKey, vs...))
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldGT(FieldAPIKey, v))
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldGTE(FieldAPIKey, v))
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldLT(FieldAPIKey, v))
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldLTE(FieldAPIKey, v))
}

// APIKeyContains applies the Contains predicate on the "api_key" field.
func APIKeyContains(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldContains(FieldAPIKey, v))
}

// APIKeyHasPrefix applies the HasPrefix predicate on the "api_key" field.
func APIKeyHasPrefix(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldHasPrefix(FieldAPIKey, v))
}

// APIKeyHasSuffix applies the HasSuffix predicate on the "api_key" field.
func APIKeyHasSuffix(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldHasSuffix(FieldAPIKey, v))
}

// APIKeyIsNil applies the IsNil predicate on the "api_key" field.
func APIKeyIsNil() predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldIsNull(FieldAPIKey))
}

// APIKeyNotNil applies the NotNil predicate on the "api_key" field.
func APIKeyNotNil() predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldNotNull(FieldAPIKey))
}

// APIKeyEqualFold applies the EqualFold predicate on the "api_key" field.
func APIKeyEqualFold(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldEqualFold(FieldAPIKey, v))
}

// APIKeyContainsFold applies the ContainsFold predicate on the "api_key" field.
func APIKeyContainsFold(v string) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldContainsFold(FieldAPIKey, v))
}

// APIValueEQ applies the EQ predicate on the "api_value" field.
func APIValueEQ(v APIValue) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldEQ(FieldAPIValue, v))
}

// APIValueNEQ applies the NEQ predicate on the "api_value" field.
func APIValueNEQ(v APIValue) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldNEQ(FieldAPIValue, v))
}

// APIValueIn applies the In predicate on the "api_value" field.
func APIValueIn(vs ...APIValue) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldIn(FieldAPIValue, vs...))
}

// APIValueNotIn applies the NotIn predicate on the "api_value" field.
func APIValueNotIn(vs ...APIValue) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.FieldNotIn(FieldAPIValue, vs...))
}

// HasCarrierService applies the HasEdge predicate on the "carrier_service" edge.
func HasCarrierService() predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CarrierServiceTable, CarrierServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceWith applies the HasEdge predicate on the "carrier_service" edge with a given conditions (other predicates).
func HasCarrierServiceWith(preds ...predicate.CarrierService) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(func(s *sql.Selector) {
		step := newCarrierServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierAdditionalServiceGLS applies the HasEdge predicate on the "carrier_additional_service_gls" edge.
func HasCarrierAdditionalServiceGLS() predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarrierAdditionalServiceGLSTable, CarrierAdditionalServiceGLSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierAdditionalServiceGLSWith applies the HasEdge predicate on the "carrier_additional_service_gls" edge with a given conditions (other predicates).
func HasCarrierAdditionalServiceGLSWith(preds ...predicate.CarrierAdditionalServiceGLS) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(func(s *sql.Selector) {
		step := newCarrierAdditionalServiceGLSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarrierServiceGLS) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarrierServiceGLS) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarrierServiceGLS) predicate.CarrierServiceGLS {
	return predicate.CarrierServiceGLS(sql.NotPredicates(p))
}
