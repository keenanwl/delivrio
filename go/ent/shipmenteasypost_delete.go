// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipmenteasypost"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentEasyPostDelete is the builder for deleting a ShipmentEasyPost entity.
type ShipmentEasyPostDelete struct {
	config
	hooks    []Hook
	mutation *ShipmentEasyPostMutation
}

// Where appends a list predicates to the ShipmentEasyPostDelete builder.
func (sepd *ShipmentEasyPostDelete) Where(ps ...predicate.ShipmentEasyPost) *ShipmentEasyPostDelete {
	sepd.mutation.Where(ps...)
	return sepd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sepd *ShipmentEasyPostDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sepd.sqlExec, sepd.mutation, sepd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sepd *ShipmentEasyPostDelete) ExecX(ctx context.Context) int {
	n, err := sepd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sepd *ShipmentEasyPostDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(shipmenteasypost.Table, sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString))
	if ps := sepd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sepd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sepd.mutation.done = true
	return affected, err
}

// ShipmentEasyPostDeleteOne is the builder for deleting a single ShipmentEasyPost entity.
type ShipmentEasyPostDeleteOne struct {
	sepd *ShipmentEasyPostDelete
}

// Where appends a list predicates to the ShipmentEasyPostDelete builder.
func (sepdo *ShipmentEasyPostDeleteOne) Where(ps ...predicate.ShipmentEasyPost) *ShipmentEasyPostDeleteOne {
	sepdo.sepd.mutation.Where(ps...)
	return sepdo
}

// Exec executes the deletion query.
func (sepdo *ShipmentEasyPostDeleteOne) Exec(ctx context.Context) error {
	n, err := sepdo.sepd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{shipmenteasypost.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sepdo *ShipmentEasyPostDeleteOne) ExecX(ctx context.Context) {
	if err := sepdo.Exec(ctx); err != nil {
		panic(err)
	}
}
