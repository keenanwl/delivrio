// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/userseat"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSeatUpdate is the builder for updating UserSeat entities.
type UserSeatUpdate struct {
	config
	hooks    []Hook
	mutation *UserSeatMutation
}

// Where appends a list predicates to the UserSeatUpdate builder.
func (usu *UserSeatUpdate) Where(ps ...predicate.UserSeat) *UserSeatUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetTenantID sets the "tenant_id" field.
func (usu *UserSeatUpdate) SetTenantID(pu pulid.ID) *UserSeatUpdate {
	usu.mutation.SetTenantID(pu)
	return usu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (usu *UserSeatUpdate) SetNillableTenantID(pu *pulid.ID) *UserSeatUpdate {
	if pu != nil {
		usu.SetTenantID(*pu)
	}
	return usu
}

// SetName sets the "name" field.
func (usu *UserSeatUpdate) SetName(s string) *UserSeatUpdate {
	usu.mutation.SetName(s)
	return usu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (usu *UserSeatUpdate) SetNillableName(s *string) *UserSeatUpdate {
	if s != nil {
		usu.SetName(*s)
	}
	return usu
}

// ClearName clears the value of the "name" field.
func (usu *UserSeatUpdate) ClearName() *UserSeatUpdate {
	usu.mutation.ClearName()
	return usu
}

// SetSurname sets the "surname" field.
func (usu *UserSeatUpdate) SetSurname(s string) *UserSeatUpdate {
	usu.mutation.SetSurname(s)
	return usu
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (usu *UserSeatUpdate) SetNillableSurname(s *string) *UserSeatUpdate {
	if s != nil {
		usu.SetSurname(*s)
	}
	return usu
}

// ClearSurname clears the value of the "surname" field.
func (usu *UserSeatUpdate) ClearSurname() *UserSeatUpdate {
	usu.mutation.ClearSurname()
	return usu
}

// SetEmail sets the "email" field.
func (usu *UserSeatUpdate) SetEmail(s string) *UserSeatUpdate {
	usu.mutation.SetEmail(s)
	return usu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (usu *UserSeatUpdate) SetNillableEmail(s *string) *UserSeatUpdate {
	if s != nil {
		usu.SetEmail(*s)
	}
	return usu
}

// SetPassword sets the "password" field.
func (usu *UserSeatUpdate) SetPassword(s string) *UserSeatUpdate {
	usu.mutation.SetPassword(s)
	return usu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (usu *UserSeatUpdate) SetNillablePassword(s *string) *UserSeatUpdate {
	if s != nil {
		usu.SetPassword(*s)
	}
	return usu
}

// SetHash sets the "hash" field.
func (usu *UserSeatUpdate) SetHash(s string) *UserSeatUpdate {
	usu.mutation.SetHash(s)
	return usu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (usu *UserSeatUpdate) SetNillableHash(s *string) *UserSeatUpdate {
	if s != nil {
		usu.SetHash(*s)
	}
	return usu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (usu *UserSeatUpdate) SetTenant(t *Tenant) *UserSeatUpdate {
	return usu.SetTenantID(t.ID)
}

// Mutation returns the UserSeatMutation object of the builder.
func (usu *UserSeatUpdate) Mutation() *UserSeatMutation {
	return usu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (usu *UserSeatUpdate) ClearTenant() *UserSeatUpdate {
	usu.mutation.ClearTenant()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSeatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSeatUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSeatUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSeatUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usu *UserSeatUpdate) check() error {
	if v, ok := usu.mutation.Email(); ok {
		if err := userseat.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "UserSeat.email": %w`, err)}
		}
	}
	if usu.mutation.TenantCleared() && len(usu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserSeat.tenant"`)
	}
	return nil
}

func (usu *UserSeatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := usu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userseat.Table, userseat.Columns, sqlgraph.NewFieldSpec(userseat.FieldID, field.TypeString))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.Name(); ok {
		_spec.SetField(userseat.FieldName, field.TypeString, value)
	}
	if usu.mutation.NameCleared() {
		_spec.ClearField(userseat.FieldName, field.TypeString)
	}
	if value, ok := usu.mutation.Surname(); ok {
		_spec.SetField(userseat.FieldSurname, field.TypeString, value)
	}
	if usu.mutation.SurnameCleared() {
		_spec.ClearField(userseat.FieldSurname, field.TypeString)
	}
	if value, ok := usu.mutation.Email(); ok {
		_spec.SetField(userseat.FieldEmail, field.TypeString, value)
	}
	if value, ok := usu.mutation.Password(); ok {
		_spec.SetField(userseat.FieldPassword, field.TypeString, value)
	}
	if value, ok := usu.mutation.Hash(); ok {
		_spec.SetField(userseat.FieldHash, field.TypeString, value)
	}
	if usu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userseat.TenantTable,
			Columns: []string{userseat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userseat.TenantTable,
			Columns: []string{userseat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userseat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSeatUpdateOne is the builder for updating a single UserSeat entity.
type UserSeatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSeatMutation
}

// SetTenantID sets the "tenant_id" field.
func (usuo *UserSeatUpdateOne) SetTenantID(pu pulid.ID) *UserSeatUpdateOne {
	usuo.mutation.SetTenantID(pu)
	return usuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (usuo *UserSeatUpdateOne) SetNillableTenantID(pu *pulid.ID) *UserSeatUpdateOne {
	if pu != nil {
		usuo.SetTenantID(*pu)
	}
	return usuo
}

// SetName sets the "name" field.
func (usuo *UserSeatUpdateOne) SetName(s string) *UserSeatUpdateOne {
	usuo.mutation.SetName(s)
	return usuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (usuo *UserSeatUpdateOne) SetNillableName(s *string) *UserSeatUpdateOne {
	if s != nil {
		usuo.SetName(*s)
	}
	return usuo
}

// ClearName clears the value of the "name" field.
func (usuo *UserSeatUpdateOne) ClearName() *UserSeatUpdateOne {
	usuo.mutation.ClearName()
	return usuo
}

// SetSurname sets the "surname" field.
func (usuo *UserSeatUpdateOne) SetSurname(s string) *UserSeatUpdateOne {
	usuo.mutation.SetSurname(s)
	return usuo
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (usuo *UserSeatUpdateOne) SetNillableSurname(s *string) *UserSeatUpdateOne {
	if s != nil {
		usuo.SetSurname(*s)
	}
	return usuo
}

// ClearSurname clears the value of the "surname" field.
func (usuo *UserSeatUpdateOne) ClearSurname() *UserSeatUpdateOne {
	usuo.mutation.ClearSurname()
	return usuo
}

// SetEmail sets the "email" field.
func (usuo *UserSeatUpdateOne) SetEmail(s string) *UserSeatUpdateOne {
	usuo.mutation.SetEmail(s)
	return usuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (usuo *UserSeatUpdateOne) SetNillableEmail(s *string) *UserSeatUpdateOne {
	if s != nil {
		usuo.SetEmail(*s)
	}
	return usuo
}

// SetPassword sets the "password" field.
func (usuo *UserSeatUpdateOne) SetPassword(s string) *UserSeatUpdateOne {
	usuo.mutation.SetPassword(s)
	return usuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (usuo *UserSeatUpdateOne) SetNillablePassword(s *string) *UserSeatUpdateOne {
	if s != nil {
		usuo.SetPassword(*s)
	}
	return usuo
}

// SetHash sets the "hash" field.
func (usuo *UserSeatUpdateOne) SetHash(s string) *UserSeatUpdateOne {
	usuo.mutation.SetHash(s)
	return usuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (usuo *UserSeatUpdateOne) SetNillableHash(s *string) *UserSeatUpdateOne {
	if s != nil {
		usuo.SetHash(*s)
	}
	return usuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (usuo *UserSeatUpdateOne) SetTenant(t *Tenant) *UserSeatUpdateOne {
	return usuo.SetTenantID(t.ID)
}

// Mutation returns the UserSeatMutation object of the builder.
func (usuo *UserSeatUpdateOne) Mutation() *UserSeatMutation {
	return usuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (usuo *UserSeatUpdateOne) ClearTenant() *UserSeatUpdateOne {
	usuo.mutation.ClearTenant()
	return usuo
}

// Where appends a list predicates to the UserSeatUpdate builder.
func (usuo *UserSeatUpdateOne) Where(ps ...predicate.UserSeat) *UserSeatUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSeatUpdateOne) Select(field string, fields ...string) *UserSeatUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSeat entity.
func (usuo *UserSeatUpdateOne) Save(ctx context.Context) (*UserSeat, error) {
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSeatUpdateOne) SaveX(ctx context.Context) *UserSeat {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSeatUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSeatUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usuo *UserSeatUpdateOne) check() error {
	if v, ok := usuo.mutation.Email(); ok {
		if err := userseat.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "UserSeat.email": %w`, err)}
		}
	}
	if usuo.mutation.TenantCleared() && len(usuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserSeat.tenant"`)
	}
	return nil
}

func (usuo *UserSeatUpdateOne) sqlSave(ctx context.Context) (_node *UserSeat, err error) {
	if err := usuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userseat.Table, userseat.Columns, sqlgraph.NewFieldSpec(userseat.FieldID, field.TypeString))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSeat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userseat.FieldID)
		for _, f := range fields {
			if !userseat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userseat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.Name(); ok {
		_spec.SetField(userseat.FieldName, field.TypeString, value)
	}
	if usuo.mutation.NameCleared() {
		_spec.ClearField(userseat.FieldName, field.TypeString)
	}
	if value, ok := usuo.mutation.Surname(); ok {
		_spec.SetField(userseat.FieldSurname, field.TypeString, value)
	}
	if usuo.mutation.SurnameCleared() {
		_spec.ClearField(userseat.FieldSurname, field.TypeString)
	}
	if value, ok := usuo.mutation.Email(); ok {
		_spec.SetField(userseat.FieldEmail, field.TypeString, value)
	}
	if value, ok := usuo.mutation.Password(); ok {
		_spec.SetField(userseat.FieldPassword, field.TypeString, value)
	}
	if value, ok := usuo.mutation.Hash(); ok {
		_spec.SetField(userseat.FieldHash, field.TypeString, value)
	}
	if usuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userseat.TenantTable,
			Columns: []string{userseat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userseat.TenantTable,
			Columns: []string{userseat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSeat{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userseat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
