// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentGLSCreate is the builder for creating a ShipmentGLS entity.
type ShipmentGLSCreate struct {
	config
	mutation *ShipmentGLSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (sgc *ShipmentGLSCreate) SetTenantID(pu pulid.ID) *ShipmentGLSCreate {
	sgc.mutation.SetTenantID(pu)
	return sgc
}

// SetConsignmentID sets the "consignment_id" field.
func (sgc *ShipmentGLSCreate) SetConsignmentID(s string) *ShipmentGLSCreate {
	sgc.mutation.SetConsignmentID(s)
	return sgc
}

// SetID sets the "id" field.
func (sgc *ShipmentGLSCreate) SetID(pu pulid.ID) *ShipmentGLSCreate {
	sgc.mutation.SetID(pu)
	return sgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sgc *ShipmentGLSCreate) SetNillableID(pu *pulid.ID) *ShipmentGLSCreate {
	if pu != nil {
		sgc.SetID(*pu)
	}
	return sgc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sgc *ShipmentGLSCreate) SetTenant(t *Tenant) *ShipmentGLSCreate {
	return sgc.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sgc *ShipmentGLSCreate) SetShipmentID(id pulid.ID) *ShipmentGLSCreate {
	sgc.mutation.SetShipmentID(id)
	return sgc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sgc *ShipmentGLSCreate) SetShipment(s *Shipment) *ShipmentGLSCreate {
	return sgc.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentGLSMutation object of the builder.
func (sgc *ShipmentGLSCreate) Mutation() *ShipmentGLSMutation {
	return sgc.mutation
}

// Save creates the ShipmentGLS in the database.
func (sgc *ShipmentGLSCreate) Save(ctx context.Context) (*ShipmentGLS, error) {
	if err := sgc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sgc.sqlSave, sgc.mutation, sgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *ShipmentGLSCreate) SaveX(ctx context.Context) *ShipmentGLS {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgc *ShipmentGLSCreate) Exec(ctx context.Context) error {
	_, err := sgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgc *ShipmentGLSCreate) ExecX(ctx context.Context) {
	if err := sgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgc *ShipmentGLSCreate) defaults() error {
	if _, ok := sgc.mutation.ID(); !ok {
		if shipmentgls.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipmentgls.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipmentgls.DefaultID()
		sgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sgc *ShipmentGLSCreate) check() error {
	if _, ok := sgc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ShipmentGLS.tenant_id"`)}
	}
	if _, ok := sgc.mutation.ConsignmentID(); !ok {
		return &ValidationError{Name: "consignment_id", err: errors.New(`ent: missing required field "ShipmentGLS.consignment_id"`)}
	}
	if len(sgc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ShipmentGLS.tenant"`)}
	}
	if len(sgc.mutation.ShipmentIDs()) == 0 {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentGLS.shipment"`)}
	}
	return nil
}

func (sgc *ShipmentGLSCreate) sqlSave(ctx context.Context) (*ShipmentGLS, error) {
	if err := sgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sgc.mutation.id = &_node.ID
	sgc.mutation.done = true
	return _node, nil
}

func (sgc *ShipmentGLSCreate) createSpec() (*ShipmentGLS, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentGLS{config: sgc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentgls.Table, sqlgraph.NewFieldSpec(shipmentgls.FieldID, field.TypeString))
	)
	_spec.OnConflict = sgc.conflict
	if id, ok := sgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sgc.mutation.ConsignmentID(); ok {
		_spec.SetField(shipmentgls.FieldConsignmentID, field.TypeString, value)
		_node.ConsignmentID = value
	}
	if nodes := sgc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentgls.TenantTable,
			Columns: []string{shipmentgls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgls.ShipmentTable,
			Columns: []string{shipmentgls.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_shipment_gls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentGLS.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentGLSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sgc *ShipmentGLSCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentGLSUpsertOne {
	sgc.conflict = opts
	return &ShipmentGLSUpsertOne{
		create: sgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentGLS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgc *ShipmentGLSCreate) OnConflictColumns(columns ...string) *ShipmentGLSUpsertOne {
	sgc.conflict = append(sgc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentGLSUpsertOne{
		create: sgc,
	}
}

type (
	// ShipmentGLSUpsertOne is the builder for "upsert"-ing
	//  one ShipmentGLS node.
	ShipmentGLSUpsertOne struct {
		create *ShipmentGLSCreate
	}

	// ShipmentGLSUpsert is the "OnConflict" setter.
	ShipmentGLSUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentGLSUpsert) SetTenantID(v pulid.ID) *ShipmentGLSUpsert {
	u.Set(shipmentgls.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentGLSUpsert) UpdateTenantID() *ShipmentGLSUpsert {
	u.SetExcluded(shipmentgls.FieldTenantID)
	return u
}

// SetConsignmentID sets the "consignment_id" field.
func (u *ShipmentGLSUpsert) SetConsignmentID(v string) *ShipmentGLSUpsert {
	u.Set(shipmentgls.FieldConsignmentID, v)
	return u
}

// UpdateConsignmentID sets the "consignment_id" field to the value that was provided on create.
func (u *ShipmentGLSUpsert) UpdateConsignmentID() *ShipmentGLSUpsert {
	u.SetExcluded(shipmentgls.FieldConsignmentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShipmentGLS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentgls.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentGLSUpsertOne) UpdateNewValues() *ShipmentGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipmentgls.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentGLS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentGLSUpsertOne) Ignore() *ShipmentGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentGLSUpsertOne) DoNothing() *ShipmentGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentGLSCreate.OnConflict
// documentation for more info.
func (u *ShipmentGLSUpsertOne) Update(set func(*ShipmentGLSUpsert)) *ShipmentGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentGLSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentGLSUpsertOne) SetTenantID(v pulid.ID) *ShipmentGLSUpsertOne {
	return u.Update(func(s *ShipmentGLSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentGLSUpsertOne) UpdateTenantID() *ShipmentGLSUpsertOne {
	return u.Update(func(s *ShipmentGLSUpsert) {
		s.UpdateTenantID()
	})
}

// SetConsignmentID sets the "consignment_id" field.
func (u *ShipmentGLSUpsertOne) SetConsignmentID(v string) *ShipmentGLSUpsertOne {
	return u.Update(func(s *ShipmentGLSUpsert) {
		s.SetConsignmentID(v)
	})
}

// UpdateConsignmentID sets the "consignment_id" field to the value that was provided on create.
func (u *ShipmentGLSUpsertOne) UpdateConsignmentID() *ShipmentGLSUpsertOne {
	return u.Update(func(s *ShipmentGLSUpsert) {
		s.UpdateConsignmentID()
	})
}

// Exec executes the query.
func (u *ShipmentGLSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentGLSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentGLSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentGLSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentGLSUpsertOne.ID is not supported by MySQL driver. Use ShipmentGLSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentGLSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentGLSCreateBulk is the builder for creating many ShipmentGLS entities in bulk.
type ShipmentGLSCreateBulk struct {
	config
	err      error
	builders []*ShipmentGLSCreate
	conflict []sql.ConflictOption
}

// Save creates the ShipmentGLS entities in the database.
func (sgcb *ShipmentGLSCreateBulk) Save(ctx context.Context) ([]*ShipmentGLS, error) {
	if sgcb.err != nil {
		return nil, sgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*ShipmentGLS, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentGLSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *ShipmentGLSCreateBulk) SaveX(ctx context.Context) []*ShipmentGLS {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgcb *ShipmentGLSCreateBulk) Exec(ctx context.Context) error {
	_, err := sgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcb *ShipmentGLSCreateBulk) ExecX(ctx context.Context) {
	if err := sgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentGLS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentGLSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sgcb *ShipmentGLSCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentGLSUpsertBulk {
	sgcb.conflict = opts
	return &ShipmentGLSUpsertBulk{
		create: sgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentGLS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgcb *ShipmentGLSCreateBulk) OnConflictColumns(columns ...string) *ShipmentGLSUpsertBulk {
	sgcb.conflict = append(sgcb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentGLSUpsertBulk{
		create: sgcb,
	}
}

// ShipmentGLSUpsertBulk is the builder for "upsert"-ing
// a bulk of ShipmentGLS nodes.
type ShipmentGLSUpsertBulk struct {
	create *ShipmentGLSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShipmentGLS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentgls.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentGLSUpsertBulk) UpdateNewValues() *ShipmentGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipmentgls.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentGLS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentGLSUpsertBulk) Ignore() *ShipmentGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentGLSUpsertBulk) DoNothing() *ShipmentGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentGLSCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentGLSUpsertBulk) Update(set func(*ShipmentGLSUpsert)) *ShipmentGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentGLSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentGLSUpsertBulk) SetTenantID(v pulid.ID) *ShipmentGLSUpsertBulk {
	return u.Update(func(s *ShipmentGLSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentGLSUpsertBulk) UpdateTenantID() *ShipmentGLSUpsertBulk {
	return u.Update(func(s *ShipmentGLSUpsert) {
		s.UpdateTenantID()
	})
}

// SetConsignmentID sets the "consignment_id" field.
func (u *ShipmentGLSUpsertBulk) SetConsignmentID(v string) *ShipmentGLSUpsertBulk {
	return u.Update(func(s *ShipmentGLSUpsert) {
		s.SetConsignmentID(v)
	})
}

// UpdateConsignmentID sets the "consignment_id" field to the value that was provided on create.
func (u *ShipmentGLSUpsertBulk) UpdateConsignmentID() *ShipmentGLSUpsertBulk {
	return u.Update(func(s *ShipmentGLSUpsert) {
		s.UpdateConsignmentID()
	})
}

// Exec executes the query.
func (u *ShipmentGLSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentGLSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentGLSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentGLSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
