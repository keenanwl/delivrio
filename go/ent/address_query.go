// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressQuery is the builder for querying Address entities.
type AddressQuery struct {
	config
	ctx                           *QueryContext
	order                         []address.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.Address
	withTenant                    *TenantQuery
	withRecipientColli            *ColliQuery
	withRecipientConsolidation    *ConsolidationQuery
	withCompanyAddress            *TenantQuery
	withLocation                  *LocationQuery
	withSenderColli               *ColliQuery
	withSenderConsolidation       *ConsolidationQuery
	withReturnSenderColli         *ReturnColliQuery
	withReturnRecipientColli      *ReturnColliQuery
	withCountry                   *CountryQuery
	withFKs                       bool
	modifiers                     []func(*sql.Selector)
	loadTotal                     []func(context.Context, []*Address) error
	withNamedRecipientColli       map[string]*ColliQuery
	withNamedCompanyAddress       map[string]*TenantQuery
	withNamedLocation             map[string]*LocationQuery
	withNamedSenderColli          map[string]*ColliQuery
	withNamedReturnSenderColli    map[string]*ReturnColliQuery
	withNamedReturnRecipientColli map[string]*ReturnColliQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AddressQuery builder.
func (aq *AddressQuery) Where(ps ...predicate.Address) *AddressQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *AddressQuery) Limit(limit int) *AddressQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *AddressQuery) Offset(offset int) *AddressQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AddressQuery) Unique(unique bool) *AddressQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *AddressQuery) Order(o ...address.OrderOption) *AddressQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryTenant chains the current query on the "tenant" edge.
func (aq *AddressQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, address.TenantTable, address.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecipientColli chains the current query on the "recipient_colli" edge.
func (aq *AddressQuery) QueryRecipientColli() *ColliQuery {
	query := (&ColliClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.RecipientColliTable, address.RecipientColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecipientConsolidation chains the current query on the "recipient_consolidation" edge.
func (aq *AddressQuery) QueryRecipientConsolidation() *ConsolidationQuery {
	query := (&ConsolidationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, address.RecipientConsolidationTable, address.RecipientConsolidationColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompanyAddress chains the current query on the "company_address" edge.
func (aq *AddressQuery) QueryCompanyAddress() *TenantQuery {
	query := (&TenantClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.CompanyAddressTable, address.CompanyAddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocation chains the current query on the "location" edge.
func (aq *AddressQuery) QueryLocation() *LocationQuery {
	query := (&LocationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.LocationTable, address.LocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySenderColli chains the current query on the "sender_colli" edge.
func (aq *AddressQuery) QuerySenderColli() *ColliQuery {
	query := (&ColliClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.SenderColliTable, address.SenderColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySenderConsolidation chains the current query on the "sender_consolidation" edge.
func (aq *AddressQuery) QuerySenderConsolidation() *ConsolidationQuery {
	query := (&ConsolidationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, address.SenderConsolidationTable, address.SenderConsolidationColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnSenderColli chains the current query on the "return_sender_colli" edge.
func (aq *AddressQuery) QueryReturnSenderColli() *ReturnColliQuery {
	query := (&ReturnColliClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.ReturnSenderColliTable, address.ReturnSenderColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnRecipientColli chains the current query on the "return_recipient_colli" edge.
func (aq *AddressQuery) QueryReturnRecipientColli() *ReturnColliQuery {
	query := (&ReturnColliClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.ReturnRecipientColliTable, address.ReturnRecipientColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountry chains the current query on the "country" edge.
func (aq *AddressQuery) QueryCountry() *CountryQuery {
	query := (&CountryClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, address.CountryTable, address.CountryColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Address entity from the query.
// Returns a *NotFoundError when no Address was found.
func (aq *AddressQuery) First(ctx context.Context) (*Address, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{address.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AddressQuery) FirstX(ctx context.Context) *Address {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Address ID from the query.
// Returns a *NotFoundError when no Address ID was found.
func (aq *AddressQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{address.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AddressQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Address entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Address entity is found.
// Returns a *NotFoundError when no Address entities are found.
func (aq *AddressQuery) Only(ctx context.Context) (*Address, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{address.Label}
	default:
		return nil, &NotSingularError{address.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AddressQuery) OnlyX(ctx context.Context) *Address {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Address ID in the query.
// Returns a *NotSingularError when more than one Address ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AddressQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{address.Label}
	default:
		err = &NotSingularError{address.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AddressQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Addresses.
func (aq *AddressQuery) All(ctx context.Context) ([]*Address, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryAll)
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Address, *AddressQuery]()
	return withInterceptors[[]*Address](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *AddressQuery) AllX(ctx context.Context) []*Address {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Address IDs.
func (aq *AddressQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryIDs)
	if err = aq.Select(address.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AddressQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AddressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryCount)
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*AddressQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AddressQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AddressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryExist)
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AddressQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AddressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AddressQuery) Clone() *AddressQuery {
	if aq == nil {
		return nil
	}
	return &AddressQuery{
		config:                     aq.config,
		ctx:                        aq.ctx.Clone(),
		order:                      append([]address.OrderOption{}, aq.order...),
		inters:                     append([]Interceptor{}, aq.inters...),
		predicates:                 append([]predicate.Address{}, aq.predicates...),
		withTenant:                 aq.withTenant.Clone(),
		withRecipientColli:         aq.withRecipientColli.Clone(),
		withRecipientConsolidation: aq.withRecipientConsolidation.Clone(),
		withCompanyAddress:         aq.withCompanyAddress.Clone(),
		withLocation:               aq.withLocation.Clone(),
		withSenderColli:            aq.withSenderColli.Clone(),
		withSenderConsolidation:    aq.withSenderConsolidation.Clone(),
		withReturnSenderColli:      aq.withReturnSenderColli.Clone(),
		withReturnRecipientColli:   aq.withReturnRecipientColli.Clone(),
		withCountry:                aq.withCountry.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithTenant(opts ...func(*TenantQuery)) *AddressQuery {
	query := (&TenantClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withTenant = query
	return aq
}

// WithRecipientColli tells the query-builder to eager-load the nodes that are connected to
// the "recipient_colli" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithRecipientColli(opts ...func(*ColliQuery)) *AddressQuery {
	query := (&ColliClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRecipientColli = query
	return aq
}

// WithRecipientConsolidation tells the query-builder to eager-load the nodes that are connected to
// the "recipient_consolidation" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithRecipientConsolidation(opts ...func(*ConsolidationQuery)) *AddressQuery {
	query := (&ConsolidationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRecipientConsolidation = query
	return aq
}

// WithCompanyAddress tells the query-builder to eager-load the nodes that are connected to
// the "company_address" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithCompanyAddress(opts ...func(*TenantQuery)) *AddressQuery {
	query := (&TenantClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCompanyAddress = query
	return aq
}

// WithLocation tells the query-builder to eager-load the nodes that are connected to
// the "location" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithLocation(opts ...func(*LocationQuery)) *AddressQuery {
	query := (&LocationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withLocation = query
	return aq
}

// WithSenderColli tells the query-builder to eager-load the nodes that are connected to
// the "sender_colli" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithSenderColli(opts ...func(*ColliQuery)) *AddressQuery {
	query := (&ColliClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withSenderColli = query
	return aq
}

// WithSenderConsolidation tells the query-builder to eager-load the nodes that are connected to
// the "sender_consolidation" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithSenderConsolidation(opts ...func(*ConsolidationQuery)) *AddressQuery {
	query := (&ConsolidationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withSenderConsolidation = query
	return aq
}

// WithReturnSenderColli tells the query-builder to eager-load the nodes that are connected to
// the "return_sender_colli" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithReturnSenderColli(opts ...func(*ReturnColliQuery)) *AddressQuery {
	query := (&ReturnColliClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withReturnSenderColli = query
	return aq
}

// WithReturnRecipientColli tells the query-builder to eager-load the nodes that are connected to
// the "return_recipient_colli" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithReturnRecipientColli(opts ...func(*ReturnColliQuery)) *AddressQuery {
	query := (&ReturnColliClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withReturnRecipientColli = query
	return aq
}

// WithCountry tells the query-builder to eager-load the nodes that are connected to
// the "country" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithCountry(opts ...func(*CountryQuery)) *AddressQuery {
	query := (&CountryClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCountry = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Address.Query().
//		GroupBy(address.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *AddressQuery) GroupBy(field string, fields ...string) *AddressGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AddressGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = address.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Address.Query().
//		Select(address.FieldTenantID).
//		Scan(ctx, &v)
func (aq *AddressQuery) Select(fields ...string) *AddressSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &AddressSelect{AddressQuery: aq}
	sbuild.label = address.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AddressSelect configured with the given aggregations.
func (aq *AddressQuery) Aggregate(fns ...AggregateFunc) *AddressSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *AddressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !address.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	if address.Policy == nil {
		return errors.New("ent: uninitialized address.Policy (forgotten import ent/runtime?)")
	}
	if err := address.Policy.EvalQuery(ctx, aq); err != nil {
		return err
	}
	return nil
}

func (aq *AddressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Address, error) {
	var (
		nodes       = []*Address{}
		withFKs     = aq.withFKs
		_spec       = aq.querySpec()
		loadedTypes = [10]bool{
			aq.withTenant != nil,
			aq.withRecipientColli != nil,
			aq.withRecipientConsolidation != nil,
			aq.withCompanyAddress != nil,
			aq.withLocation != nil,
			aq.withSenderColli != nil,
			aq.withSenderConsolidation != nil,
			aq.withReturnSenderColli != nil,
			aq.withReturnRecipientColli != nil,
			aq.withCountry != nil,
		}
	)
	if aq.withRecipientConsolidation != nil || aq.withSenderConsolidation != nil || aq.withCountry != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, address.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Address).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Address{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withTenant; query != nil {
		if err := aq.loadTenant(ctx, query, nodes, nil,
			func(n *Address, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRecipientColli; query != nil {
		if err := aq.loadRecipientColli(ctx, query, nodes,
			func(n *Address) { n.Edges.RecipientColli = []*Colli{} },
			func(n *Address, e *Colli) { n.Edges.RecipientColli = append(n.Edges.RecipientColli, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRecipientConsolidation; query != nil {
		if err := aq.loadRecipientConsolidation(ctx, query, nodes, nil,
			func(n *Address, e *Consolidation) { n.Edges.RecipientConsolidation = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withCompanyAddress; query != nil {
		if err := aq.loadCompanyAddress(ctx, query, nodes,
			func(n *Address) { n.Edges.CompanyAddress = []*Tenant{} },
			func(n *Address, e *Tenant) { n.Edges.CompanyAddress = append(n.Edges.CompanyAddress, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withLocation; query != nil {
		if err := aq.loadLocation(ctx, query, nodes,
			func(n *Address) { n.Edges.Location = []*Location{} },
			func(n *Address, e *Location) { n.Edges.Location = append(n.Edges.Location, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withSenderColli; query != nil {
		if err := aq.loadSenderColli(ctx, query, nodes,
			func(n *Address) { n.Edges.SenderColli = []*Colli{} },
			func(n *Address, e *Colli) { n.Edges.SenderColli = append(n.Edges.SenderColli, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withSenderConsolidation; query != nil {
		if err := aq.loadSenderConsolidation(ctx, query, nodes, nil,
			func(n *Address, e *Consolidation) { n.Edges.SenderConsolidation = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withReturnSenderColli; query != nil {
		if err := aq.loadReturnSenderColli(ctx, query, nodes,
			func(n *Address) { n.Edges.ReturnSenderColli = []*ReturnColli{} },
			func(n *Address, e *ReturnColli) { n.Edges.ReturnSenderColli = append(n.Edges.ReturnSenderColli, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withReturnRecipientColli; query != nil {
		if err := aq.loadReturnRecipientColli(ctx, query, nodes,
			func(n *Address) { n.Edges.ReturnRecipientColli = []*ReturnColli{} },
			func(n *Address, e *ReturnColli) {
				n.Edges.ReturnRecipientColli = append(n.Edges.ReturnRecipientColli, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := aq.withCountry; query != nil {
		if err := aq.loadCountry(ctx, query, nodes, nil,
			func(n *Address, e *Country) { n.Edges.Country = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedRecipientColli {
		if err := aq.loadRecipientColli(ctx, query, nodes,
			func(n *Address) { n.appendNamedRecipientColli(name) },
			func(n *Address, e *Colli) { n.appendNamedRecipientColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedCompanyAddress {
		if err := aq.loadCompanyAddress(ctx, query, nodes,
			func(n *Address) { n.appendNamedCompanyAddress(name) },
			func(n *Address, e *Tenant) { n.appendNamedCompanyAddress(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedLocation {
		if err := aq.loadLocation(ctx, query, nodes,
			func(n *Address) { n.appendNamedLocation(name) },
			func(n *Address, e *Location) { n.appendNamedLocation(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedSenderColli {
		if err := aq.loadSenderColli(ctx, query, nodes,
			func(n *Address) { n.appendNamedSenderColli(name) },
			func(n *Address, e *Colli) { n.appendNamedSenderColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedReturnSenderColli {
		if err := aq.loadReturnSenderColli(ctx, query, nodes,
			func(n *Address) { n.appendNamedReturnSenderColli(name) },
			func(n *Address, e *ReturnColli) { n.appendNamedReturnSenderColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedReturnRecipientColli {
		if err := aq.loadReturnRecipientColli(ctx, query, nodes,
			func(n *Address) { n.appendNamedReturnRecipientColli(name) },
			func(n *Address, e *ReturnColli) { n.appendNamedReturnRecipientColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range aq.loadTotal {
		if err := aq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AddressQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Address, init func(*Address), assign func(*Address, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Address)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AddressQuery) loadRecipientColli(ctx context.Context, query *ColliQuery, nodes []*Address, init func(*Address), assign func(*Address, *Colli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Address)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Colli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(address.RecipientColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.colli_recipient
		if fk == nil {
			return fmt.Errorf(`foreign-key "colli_recipient" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "colli_recipient" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AddressQuery) loadRecipientConsolidation(ctx context.Context, query *ConsolidationQuery, nodes []*Address, init func(*Address), assign func(*Address, *Consolidation)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Address)
	for i := range nodes {
		if nodes[i].consolidation_recipient == nil {
			continue
		}
		fk := *nodes[i].consolidation_recipient
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(consolidation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "consolidation_recipient" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AddressQuery) loadCompanyAddress(ctx context.Context, query *TenantQuery, nodes []*Address, init func(*Address), assign func(*Address, *Tenant)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Address)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(address.CompanyAddressColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.tenant_company_address
		if fk == nil {
			return fmt.Errorf(`foreign-key "tenant_company_address" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "tenant_company_address" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AddressQuery) loadLocation(ctx context.Context, query *LocationQuery, nodes []*Address, init func(*Address), assign func(*Address, *Location)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Address)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Location(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(address.LocationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.location_address
		if fk == nil {
			return fmt.Errorf(`foreign-key "location_address" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "location_address" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AddressQuery) loadSenderColli(ctx context.Context, query *ColliQuery, nodes []*Address, init func(*Address), assign func(*Address, *Colli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Address)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Colli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(address.SenderColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.colli_sender
		if fk == nil {
			return fmt.Errorf(`foreign-key "colli_sender" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "colli_sender" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AddressQuery) loadSenderConsolidation(ctx context.Context, query *ConsolidationQuery, nodes []*Address, init func(*Address), assign func(*Address, *Consolidation)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Address)
	for i := range nodes {
		if nodes[i].consolidation_sender == nil {
			continue
		}
		fk := *nodes[i].consolidation_sender
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(consolidation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "consolidation_sender" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AddressQuery) loadReturnSenderColli(ctx context.Context, query *ReturnColliQuery, nodes []*Address, init func(*Address), assign func(*Address, *ReturnColli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Address)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnColli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(address.ReturnSenderColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_colli_sender
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_colli_sender" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_colli_sender" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AddressQuery) loadReturnRecipientColli(ctx context.Context, query *ReturnColliQuery, nodes []*Address, init func(*Address), assign func(*Address, *ReturnColli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Address)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnColli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(address.ReturnRecipientColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_colli_recipient
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_colli_recipient" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_colli_recipient" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AddressQuery) loadCountry(ctx context.Context, query *CountryQuery, nodes []*Address, init func(*Address), assign func(*Address, *Country)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Address)
	for i := range nodes {
		if nodes[i].address_country == nil {
			continue
		}
		fk := *nodes[i].address_country
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(country.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "address_country" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aq *AddressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AddressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeString))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for i := range fields {
			if fields[i] != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if aq.withTenant != nil {
			_spec.Node.AddColumnOnce(address.FieldTenantID)
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AddressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(address.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = address.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedRecipientColli tells the query-builder to eager-load the nodes that are connected to the "recipient_colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithNamedRecipientColli(name string, opts ...func(*ColliQuery)) *AddressQuery {
	query := (&ColliClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedRecipientColli == nil {
		aq.withNamedRecipientColli = make(map[string]*ColliQuery)
	}
	aq.withNamedRecipientColli[name] = query
	return aq
}

// WithNamedCompanyAddress tells the query-builder to eager-load the nodes that are connected to the "company_address"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithNamedCompanyAddress(name string, opts ...func(*TenantQuery)) *AddressQuery {
	query := (&TenantClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedCompanyAddress == nil {
		aq.withNamedCompanyAddress = make(map[string]*TenantQuery)
	}
	aq.withNamedCompanyAddress[name] = query
	return aq
}

// WithNamedLocation tells the query-builder to eager-load the nodes that are connected to the "location"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithNamedLocation(name string, opts ...func(*LocationQuery)) *AddressQuery {
	query := (&LocationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedLocation == nil {
		aq.withNamedLocation = make(map[string]*LocationQuery)
	}
	aq.withNamedLocation[name] = query
	return aq
}

// WithNamedSenderColli tells the query-builder to eager-load the nodes that are connected to the "sender_colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithNamedSenderColli(name string, opts ...func(*ColliQuery)) *AddressQuery {
	query := (&ColliClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedSenderColli == nil {
		aq.withNamedSenderColli = make(map[string]*ColliQuery)
	}
	aq.withNamedSenderColli[name] = query
	return aq
}

// WithNamedReturnSenderColli tells the query-builder to eager-load the nodes that are connected to the "return_sender_colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithNamedReturnSenderColli(name string, opts ...func(*ReturnColliQuery)) *AddressQuery {
	query := (&ReturnColliClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedReturnSenderColli == nil {
		aq.withNamedReturnSenderColli = make(map[string]*ReturnColliQuery)
	}
	aq.withNamedReturnSenderColli[name] = query
	return aq
}

// WithNamedReturnRecipientColli tells the query-builder to eager-load the nodes that are connected to the "return_recipient_colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AddressQuery) WithNamedReturnRecipientColli(name string, opts ...func(*ReturnColliQuery)) *AddressQuery {
	query := (&ReturnColliClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedReturnRecipientColli == nil {
		aq.withNamedReturnRecipientColli = make(map[string]*ReturnColliQuery)
	}
	aq.withNamedReturnRecipientColli[name] = query
	return aq
}

// AddressGroupBy is the group-by builder for Address entities.
type AddressGroupBy struct {
	selector
	build *AddressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AddressGroupBy) Aggregate(fns ...AggregateFunc) *AddressGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AddressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, ent.OpQueryGroupBy)
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AddressQuery, *AddressGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AddressGroupBy) sqlScan(ctx context.Context, root *AddressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AddressSelect is the builder for selecting fields of Address entities.
type AddressSelect struct {
	*AddressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AddressSelect) Aggregate(fns ...AggregateFunc) *AddressSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AddressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, ent.OpQuerySelect)
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AddressQuery, *AddressSelect](ctx, as.AddressQuery, as, as.inters, v)
}

func (as *AddressSelect) sqlScan(ctx context.Context, root *AddressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
