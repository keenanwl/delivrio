// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/ordersender"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderSender is the model entity for the OrderSender schema.
type OrderSender struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// UniquenessID holds the value of the "uniqueness_id" field.
	UniquenessID string `json:"uniqueness_id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// VatNumber holds the value of the "vat_number" field.
	VatNumber string `json:"vat_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderSenderQuery when eager-loading is set.
	Edges        OrderSenderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderSenderEdges holds the relations/edges for other nodes in the graph.
type OrderSenderEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderSenderEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderSender) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordersender.FieldID, ordersender.FieldTenantID:
			values[i] = new(pulid.ID)
		case ordersender.FieldUniquenessID, ordersender.FieldFirstName, ordersender.FieldLastName, ordersender.FieldEmail, ordersender.FieldPhoneNumber, ordersender.FieldVatNumber:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderSender fields.
func (os *OrderSender) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordersender.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				os.ID = *value
			}
		case ordersender.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				os.TenantID = *value
			}
		case ordersender.FieldUniquenessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uniqueness_id", values[i])
			} else if value.Valid {
				os.UniquenessID = value.String
			}
		case ordersender.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				os.FirstName = value.String
			}
		case ordersender.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				os.LastName = value.String
			}
		case ordersender.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				os.Email = value.String
			}
		case ordersender.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				os.PhoneNumber = value.String
			}
		case ordersender.FieldVatNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vat_number", values[i])
			} else if value.Valid {
				os.VatNumber = value.String
			}
		default:
			os.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderSender.
// This includes values selected through modifiers, order, etc.
func (os *OrderSender) Value(name string) (ent.Value, error) {
	return os.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the OrderSender entity.
func (os *OrderSender) QueryTenant() *TenantQuery {
	return NewOrderSenderClient(os.config).QueryTenant(os)
}

// Update returns a builder for updating this OrderSender.
// Note that you need to call OrderSender.Unwrap() before calling this method if this OrderSender
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrderSender) Update() *OrderSenderUpdateOne {
	return NewOrderSenderClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OrderSender entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrderSender) Unwrap() *OrderSender {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderSender is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrderSender) String() string {
	var builder strings.Builder
	builder.WriteString("OrderSender(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", os.TenantID))
	builder.WriteString(", ")
	builder.WriteString("uniqueness_id=")
	builder.WriteString(os.UniquenessID)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(os.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(os.LastName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(os.Email)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(os.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("vat_number=")
	builder.WriteString(os.VatNumber)
	builder.WriteByte(')')
	return builder.String()
}

// OrderSenders is a parsable slice of OrderSender.
type OrderSenders []*OrderSender
