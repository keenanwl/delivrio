// Code generated by ent, DO NOT EDIT.

package locationtag

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the locationtag type in the database.
	Label = "location_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldInternalID holds the string denoting the internal_id field in the database.
	FieldInternalID = "internal_id"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "location"
	// Table holds the table name of the locationtag in the database.
	Table = "location_tags"
	// LocationTable is the table that holds the location relation/edge. The primary key declared below.
	LocationTable = "location_location_tags"
	// LocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationInverseTable = "locations"
)

// Columns holds all SQL columns for locationtag fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldInternalID,
}

var (
	// LocationPrimaryKey and LocationColumn2 are the table columns denoting the
	// primary key for the location relation (M2M).
	LocationPrimaryKey = []string{"location_id", "location_tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the LocationTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByInternalID orders the results by the internal_id field.
func ByInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalID, opts...).ToFunc()
}

// ByLocationCount orders the results by location count.
func ByLocationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLocationStep(), opts...)
	}
}

// ByLocation orders the results by location terms.
func ByLocation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LocationTable, LocationPrimaryKey...),
	)
}
