// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/systemevents"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SystemEvents is the model entity for the SystemEvents schema.
type SystemEvents struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType systemevents.EventType `json:"event_type,omitempty"`
	// EventTypeID holds the value of the "event_type_id" field.
	EventTypeID string `json:"event_type_id,omitempty"`
	// Status holds the value of the "status" field.
	Status systemevents.Status `json:"status,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemEventsQuery when eager-loading is set.
	Edges        SystemEventsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SystemEventsEdges holds the relations/edges for other nodes in the graph.
type SystemEventsEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemEventsEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemEvents) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemevents.FieldID, systemevents.FieldTenantID:
			values[i] = new(pulid.ID)
		case systemevents.FieldEventType, systemevents.FieldEventTypeID, systemevents.FieldStatus, systemevents.FieldDescription, systemevents.FieldData:
			values[i] = new(sql.NullString)
		case systemevents.FieldUpdatedAt, systemevents.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemEvents fields.
func (se *SystemEvents) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemevents.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				se.ID = *value
			}
		case systemevents.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				se.TenantID = *value
			}
		case systemevents.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				se.EventType = systemevents.EventType(value.String)
			}
		case systemevents.FieldEventTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type_id", values[i])
			} else if value.Valid {
				se.EventTypeID = value.String
			}
		case systemevents.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				se.Status = systemevents.Status(value.String)
			}
		case systemevents.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				se.Description = value.String
			}
		case systemevents.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				se.Data = value.String
			}
		case systemevents.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				se.UpdatedAt = value.Time
			}
		case systemevents.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				se.CreatedAt = value.Time
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemEvents.
// This includes values selected through modifiers, order, etc.
func (se *SystemEvents) Value(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the SystemEvents entity.
func (se *SystemEvents) QueryTenant() *TenantQuery {
	return NewSystemEventsClient(se.config).QueryTenant(se)
}

// Update returns a builder for updating this SystemEvents.
// Note that you need to call SystemEvents.Unwrap() before calling this method if this SystemEvents
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SystemEvents) Update() *SystemEventsUpdateOne {
	return NewSystemEventsClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SystemEvents entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SystemEvents) Unwrap() *SystemEvents {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemEvents is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SystemEvents) String() string {
	var builder strings.Builder
	builder.WriteString("SystemEvents(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", se.TenantID))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(fmt.Sprintf("%v", se.EventType))
	builder.WriteString(", ")
	builder.WriteString("event_type_id=")
	builder.WriteString(se.EventTypeID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", se.Status))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(se.Description)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(se.Data)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(se.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(se.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemEventsSlice is a parsable slice of SystemEvents.
type SystemEventsSlice []*SystemEvents
