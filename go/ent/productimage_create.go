// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductImageCreate is the builder for creating a ProductImage entity.
type ProductImageCreate struct {
	config
	mutation *ProductImageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (pic *ProductImageCreate) SetTenantID(pu pulid.ID) *ProductImageCreate {
	pic.mutation.SetTenantID(pu)
	return pic
}

// SetExternalID sets the "external_id" field.
func (pic *ProductImageCreate) SetExternalID(s string) *ProductImageCreate {
	pic.mutation.SetExternalID(s)
	return pic
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pic *ProductImageCreate) SetNillableExternalID(s *string) *ProductImageCreate {
	if s != nil {
		pic.SetExternalID(*s)
	}
	return pic
}

// SetURL sets the "url" field.
func (pic *ProductImageCreate) SetURL(s string) *ProductImageCreate {
	pic.mutation.SetURL(s)
	return pic
}

// SetID sets the "id" field.
func (pic *ProductImageCreate) SetID(pu pulid.ID) *ProductImageCreate {
	pic.mutation.SetID(pu)
	return pic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pic *ProductImageCreate) SetNillableID(pu *pulid.ID) *ProductImageCreate {
	if pu != nil {
		pic.SetID(*pu)
	}
	return pic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pic *ProductImageCreate) SetTenant(t *Tenant) *ProductImageCreate {
	return pic.SetTenantID(t.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pic *ProductImageCreate) SetProductID(id pulid.ID) *ProductImageCreate {
	pic.mutation.SetProductID(id)
	return pic
}

// SetProduct sets the "product" edge to the Product entity.
func (pic *ProductImageCreate) SetProduct(p *Product) *ProductImageCreate {
	return pic.SetProductID(p.ID)
}

// AddProductVariantIDs adds the "product_variant" edge to the ProductVariant entity by IDs.
func (pic *ProductImageCreate) AddProductVariantIDs(ids ...pulid.ID) *ProductImageCreate {
	pic.mutation.AddProductVariantIDs(ids...)
	return pic
}

// AddProductVariant adds the "product_variant" edges to the ProductVariant entity.
func (pic *ProductImageCreate) AddProductVariant(p ...*ProductVariant) *ProductImageCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pic.AddProductVariantIDs(ids...)
}

// Mutation returns the ProductImageMutation object of the builder.
func (pic *ProductImageCreate) Mutation() *ProductImageMutation {
	return pic.mutation
}

// Save creates the ProductImage in the database.
func (pic *ProductImageCreate) Save(ctx context.Context) (*ProductImage, error) {
	if err := pic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProductImageCreate) SaveX(ctx context.Context) *ProductImage {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProductImageCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProductImageCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProductImageCreate) defaults() error {
	if _, ok := pic.mutation.ID(); !ok {
		if productimage.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized productimage.DefaultID (forgotten import ent/runtime?)")
		}
		v := productimage.DefaultID()
		pic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProductImageCreate) check() error {
	if _, ok := pic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProductImage.tenant_id"`)}
	}
	if _, ok := pic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "ProductImage.url"`)}
	}
	if v, ok := pic.mutation.URL(); ok {
		if err := productimage.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "ProductImage.url": %w`, err)}
		}
	}
	if len(pic.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ProductImage.tenant"`)}
	}
	if len(pic.mutation.ProductIDs()) == 0 {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "ProductImage.product"`)}
	}
	return nil
}

func (pic *ProductImageCreate) sqlSave(ctx context.Context) (*ProductImage, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProductImageCreate) createSpec() (*ProductImage, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductImage{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(productimage.Table, sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString))
	)
	_spec.OnConflict = pic.conflict
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pic.mutation.ExternalID(); ok {
		_spec.SetField(productimage.FieldExternalID, field.TypeString, value)
		_node.ExternalID = &value
	}
	if value, ok := pic.mutation.URL(); ok {
		_spec.SetField(productimage.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := pic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.TenantTable,
			Columns: []string{productimage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_image_product = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productimage.ProductVariantTable,
			Columns: productimage.ProductVariantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductImage.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductImageUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pic *ProductImageCreate) OnConflict(opts ...sql.ConflictOption) *ProductImageUpsertOne {
	pic.conflict = opts
	return &ProductImageUpsertOne{
		create: pic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductImage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pic *ProductImageCreate) OnConflictColumns(columns ...string) *ProductImageUpsertOne {
	pic.conflict = append(pic.conflict, sql.ConflictColumns(columns...))
	return &ProductImageUpsertOne{
		create: pic,
	}
}

type (
	// ProductImageUpsertOne is the builder for "upsert"-ing
	//  one ProductImage node.
	ProductImageUpsertOne struct {
		create *ProductImageCreate
	}

	// ProductImageUpsert is the "OnConflict" setter.
	ProductImageUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ProductImageUpsert) SetTenantID(v pulid.ID) *ProductImageUpsert {
	u.Set(productimage.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductImageUpsert) UpdateTenantID() *ProductImageUpsert {
	u.SetExcluded(productimage.FieldTenantID)
	return u
}

// SetExternalID sets the "external_id" field.
func (u *ProductImageUpsert) SetExternalID(v string) *ProductImageUpsert {
	u.Set(productimage.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *ProductImageUpsert) UpdateExternalID() *ProductImageUpsert {
	u.SetExcluded(productimage.FieldExternalID)
	return u
}

// ClearExternalID clears the value of the "external_id" field.
func (u *ProductImageUpsert) ClearExternalID() *ProductImageUpsert {
	u.SetNull(productimage.FieldExternalID)
	return u
}

// SetURL sets the "url" field.
func (u *ProductImageUpsert) SetURL(v string) *ProductImageUpsert {
	u.Set(productimage.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ProductImageUpsert) UpdateURL() *ProductImageUpsert {
	u.SetExcluded(productimage.FieldURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProductImage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(productimage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductImageUpsertOne) UpdateNewValues() *ProductImageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(productimage.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductImage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductImageUpsertOne) Ignore() *ProductImageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductImageUpsertOne) DoNothing() *ProductImageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductImageCreate.OnConflict
// documentation for more info.
func (u *ProductImageUpsertOne) Update(set func(*ProductImageUpsert)) *ProductImageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductImageUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ProductImageUpsertOne) SetTenantID(v pulid.ID) *ProductImageUpsertOne {
	return u.Update(func(s *ProductImageUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductImageUpsertOne) UpdateTenantID() *ProductImageUpsertOne {
	return u.Update(func(s *ProductImageUpsert) {
		s.UpdateTenantID()
	})
}

// SetExternalID sets the "external_id" field.
func (u *ProductImageUpsertOne) SetExternalID(v string) *ProductImageUpsertOne {
	return u.Update(func(s *ProductImageUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *ProductImageUpsertOne) UpdateExternalID() *ProductImageUpsertOne {
	return u.Update(func(s *ProductImageUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *ProductImageUpsertOne) ClearExternalID() *ProductImageUpsertOne {
	return u.Update(func(s *ProductImageUpsert) {
		s.ClearExternalID()
	})
}

// SetURL sets the "url" field.
func (u *ProductImageUpsertOne) SetURL(v string) *ProductImageUpsertOne {
	return u.Update(func(s *ProductImageUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ProductImageUpsertOne) UpdateURL() *ProductImageUpsertOne {
	return u.Update(func(s *ProductImageUpsert) {
		s.UpdateURL()
	})
}

// Exec executes the query.
func (u *ProductImageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductImageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductImageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductImageUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProductImageUpsertOne.ID is not supported by MySQL driver. Use ProductImageUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductImageUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductImageCreateBulk is the builder for creating many ProductImage entities in bulk.
type ProductImageCreateBulk struct {
	config
	err      error
	builders []*ProductImageCreate
	conflict []sql.ConflictOption
}

// Save creates the ProductImage entities in the database.
func (picb *ProductImageCreateBulk) Save(ctx context.Context) ([]*ProductImage, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProductImage, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = picb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProductImageCreateBulk) SaveX(ctx context.Context) []*ProductImage {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProductImageCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProductImageCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductImage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductImageUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (picb *ProductImageCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductImageUpsertBulk {
	picb.conflict = opts
	return &ProductImageUpsertBulk{
		create: picb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductImage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (picb *ProductImageCreateBulk) OnConflictColumns(columns ...string) *ProductImageUpsertBulk {
	picb.conflict = append(picb.conflict, sql.ConflictColumns(columns...))
	return &ProductImageUpsertBulk{
		create: picb,
	}
}

// ProductImageUpsertBulk is the builder for "upsert"-ing
// a bulk of ProductImage nodes.
type ProductImageUpsertBulk struct {
	create *ProductImageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProductImage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(productimage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductImageUpsertBulk) UpdateNewValues() *ProductImageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(productimage.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductImage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductImageUpsertBulk) Ignore() *ProductImageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductImageUpsertBulk) DoNothing() *ProductImageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductImageCreateBulk.OnConflict
// documentation for more info.
func (u *ProductImageUpsertBulk) Update(set func(*ProductImageUpsert)) *ProductImageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductImageUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ProductImageUpsertBulk) SetTenantID(v pulid.ID) *ProductImageUpsertBulk {
	return u.Update(func(s *ProductImageUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductImageUpsertBulk) UpdateTenantID() *ProductImageUpsertBulk {
	return u.Update(func(s *ProductImageUpsert) {
		s.UpdateTenantID()
	})
}

// SetExternalID sets the "external_id" field.
func (u *ProductImageUpsertBulk) SetExternalID(v string) *ProductImageUpsertBulk {
	return u.Update(func(s *ProductImageUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *ProductImageUpsertBulk) UpdateExternalID() *ProductImageUpsertBulk {
	return u.Update(func(s *ProductImageUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *ProductImageUpsertBulk) ClearExternalID() *ProductImageUpsertBulk {
	return u.Update(func(s *ProductImageUpsert) {
		s.ClearExternalID()
	})
}

// SetURL sets the "url" field.
func (u *ProductImageUpsertBulk) SetURL(v string) *ProductImageUpsertBulk {
	return u.Update(func(s *ProductImageUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ProductImageUpsertBulk) UpdateURL() *ProductImageUpsertBulk {
	return u.Update(func(s *ProductImageUpsert) {
		s.UpdateURL()
	})
}

// Exec executes the query.
func (u *ProductImageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProductImageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductImageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductImageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
