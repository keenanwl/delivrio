// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OTKRequestsCreate is the builder for creating a OTKRequests entity.
type OTKRequestsCreate struct {
	config
	mutation *OTKRequestsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (orc *OTKRequestsCreate) SetTenantID(pu pulid.ID) *OTKRequestsCreate {
	orc.mutation.SetTenantID(pu)
	return orc
}

// SetOtk sets the "otk" field.
func (orc *OTKRequestsCreate) SetOtk(s string) *OTKRequestsCreate {
	orc.mutation.SetOtk(s)
	return orc
}

// SetID sets the "id" field.
func (orc *OTKRequestsCreate) SetID(pu pulid.ID) *OTKRequestsCreate {
	orc.mutation.SetID(pu)
	return orc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (orc *OTKRequestsCreate) SetNillableID(pu *pulid.ID) *OTKRequestsCreate {
	if pu != nil {
		orc.SetID(*pu)
	}
	return orc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (orc *OTKRequestsCreate) SetTenant(t *Tenant) *OTKRequestsCreate {
	return orc.SetTenantID(t.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (orc *OTKRequestsCreate) SetUsersID(id pulid.ID) *OTKRequestsCreate {
	orc.mutation.SetUsersID(id)
	return orc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (orc *OTKRequestsCreate) SetNillableUsersID(id *pulid.ID) *OTKRequestsCreate {
	if id != nil {
		orc = orc.SetUsersID(*id)
	}
	return orc
}

// SetUsers sets the "users" edge to the User entity.
func (orc *OTKRequestsCreate) SetUsers(u *User) *OTKRequestsCreate {
	return orc.SetUsersID(u.ID)
}

// Mutation returns the OTKRequestsMutation object of the builder.
func (orc *OTKRequestsCreate) Mutation() *OTKRequestsMutation {
	return orc.mutation
}

// Save creates the OTKRequests in the database.
func (orc *OTKRequestsCreate) Save(ctx context.Context) (*OTKRequests, error) {
	if err := orc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OTKRequestsCreate) SaveX(ctx context.Context) *OTKRequests {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OTKRequestsCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OTKRequestsCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (orc *OTKRequestsCreate) defaults() error {
	if _, ok := orc.mutation.ID(); !ok {
		if otkrequests.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized otkrequests.DefaultID (forgotten import ent/runtime?)")
		}
		v := otkrequests.DefaultID()
		orc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (orc *OTKRequestsCreate) check() error {
	if _, ok := orc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OTKRequests.tenant_id"`)}
	}
	if _, ok := orc.mutation.Otk(); !ok {
		return &ValidationError{Name: "otk", err: errors.New(`ent: missing required field "OTKRequests.otk"`)}
	}
	if len(orc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "OTKRequests.tenant"`)}
	}
	return nil
}

func (orc *OTKRequestsCreate) sqlSave(ctx context.Context) (*OTKRequests, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OTKRequestsCreate) createSpec() (*OTKRequests, *sqlgraph.CreateSpec) {
	var (
		_node = &OTKRequests{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(otkrequests.Table, sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString))
	)
	_spec.OnConflict = orc.conflict
	if id, ok := orc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := orc.mutation.Otk(); ok {
		_spec.SetField(otkrequests.FieldOtk, field.TypeString, value)
		_node.Otk = value
	}
	if nodes := orc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   otkrequests.TenantTable,
			Columns: []string{otkrequests.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otkrequests.UsersTable,
			Columns: []string{otkrequests.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_otk_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OTKRequests.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OTKRequestsUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (orc *OTKRequestsCreate) OnConflict(opts ...sql.ConflictOption) *OTKRequestsUpsertOne {
	orc.conflict = opts
	return &OTKRequestsUpsertOne{
		create: orc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OTKRequests.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (orc *OTKRequestsCreate) OnConflictColumns(columns ...string) *OTKRequestsUpsertOne {
	orc.conflict = append(orc.conflict, sql.ConflictColumns(columns...))
	return &OTKRequestsUpsertOne{
		create: orc,
	}
}

type (
	// OTKRequestsUpsertOne is the builder for "upsert"-ing
	//  one OTKRequests node.
	OTKRequestsUpsertOne struct {
		create *OTKRequestsCreate
	}

	// OTKRequestsUpsert is the "OnConflict" setter.
	OTKRequestsUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *OTKRequestsUpsert) SetTenantID(v pulid.ID) *OTKRequestsUpsert {
	u.Set(otkrequests.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OTKRequestsUpsert) UpdateTenantID() *OTKRequestsUpsert {
	u.SetExcluded(otkrequests.FieldTenantID)
	return u
}

// SetOtk sets the "otk" field.
func (u *OTKRequestsUpsert) SetOtk(v string) *OTKRequestsUpsert {
	u.Set(otkrequests.FieldOtk, v)
	return u
}

// UpdateOtk sets the "otk" field to the value that was provided on create.
func (u *OTKRequestsUpsert) UpdateOtk() *OTKRequestsUpsert {
	u.SetExcluded(otkrequests.FieldOtk)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OTKRequests.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(otkrequests.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OTKRequestsUpsertOne) UpdateNewValues() *OTKRequestsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(otkrequests.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OTKRequests.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OTKRequestsUpsertOne) Ignore() *OTKRequestsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OTKRequestsUpsertOne) DoNothing() *OTKRequestsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OTKRequestsCreate.OnConflict
// documentation for more info.
func (u *OTKRequestsUpsertOne) Update(set func(*OTKRequestsUpsert)) *OTKRequestsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OTKRequestsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *OTKRequestsUpsertOne) SetTenantID(v pulid.ID) *OTKRequestsUpsertOne {
	return u.Update(func(s *OTKRequestsUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OTKRequestsUpsertOne) UpdateTenantID() *OTKRequestsUpsertOne {
	return u.Update(func(s *OTKRequestsUpsert) {
		s.UpdateTenantID()
	})
}

// SetOtk sets the "otk" field.
func (u *OTKRequestsUpsertOne) SetOtk(v string) *OTKRequestsUpsertOne {
	return u.Update(func(s *OTKRequestsUpsert) {
		s.SetOtk(v)
	})
}

// UpdateOtk sets the "otk" field to the value that was provided on create.
func (u *OTKRequestsUpsertOne) UpdateOtk() *OTKRequestsUpsertOne {
	return u.Update(func(s *OTKRequestsUpsert) {
		s.UpdateOtk()
	})
}

// Exec executes the query.
func (u *OTKRequestsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OTKRequestsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OTKRequestsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OTKRequestsUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OTKRequestsUpsertOne.ID is not supported by MySQL driver. Use OTKRequestsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OTKRequestsUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OTKRequestsCreateBulk is the builder for creating many OTKRequests entities in bulk.
type OTKRequestsCreateBulk struct {
	config
	err      error
	builders []*OTKRequestsCreate
	conflict []sql.ConflictOption
}

// Save creates the OTKRequests entities in the database.
func (orcb *OTKRequestsCreateBulk) Save(ctx context.Context) ([]*OTKRequests, error) {
	if orcb.err != nil {
		return nil, orcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OTKRequests, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OTKRequestsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = orcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OTKRequestsCreateBulk) SaveX(ctx context.Context) []*OTKRequests {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OTKRequestsCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OTKRequestsCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OTKRequests.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OTKRequestsUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (orcb *OTKRequestsCreateBulk) OnConflict(opts ...sql.ConflictOption) *OTKRequestsUpsertBulk {
	orcb.conflict = opts
	return &OTKRequestsUpsertBulk{
		create: orcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OTKRequests.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (orcb *OTKRequestsCreateBulk) OnConflictColumns(columns ...string) *OTKRequestsUpsertBulk {
	orcb.conflict = append(orcb.conflict, sql.ConflictColumns(columns...))
	return &OTKRequestsUpsertBulk{
		create: orcb,
	}
}

// OTKRequestsUpsertBulk is the builder for "upsert"-ing
// a bulk of OTKRequests nodes.
type OTKRequestsUpsertBulk struct {
	create *OTKRequestsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OTKRequests.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(otkrequests.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OTKRequestsUpsertBulk) UpdateNewValues() *OTKRequestsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(otkrequests.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OTKRequests.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OTKRequestsUpsertBulk) Ignore() *OTKRequestsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OTKRequestsUpsertBulk) DoNothing() *OTKRequestsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OTKRequestsCreateBulk.OnConflict
// documentation for more info.
func (u *OTKRequestsUpsertBulk) Update(set func(*OTKRequestsUpsert)) *OTKRequestsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OTKRequestsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *OTKRequestsUpsertBulk) SetTenantID(v pulid.ID) *OTKRequestsUpsertBulk {
	return u.Update(func(s *OTKRequestsUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OTKRequestsUpsertBulk) UpdateTenantID() *OTKRequestsUpsertBulk {
	return u.Update(func(s *OTKRequestsUpsert) {
		s.UpdateTenantID()
	})
}

// SetOtk sets the "otk" field.
func (u *OTKRequestsUpsertBulk) SetOtk(v string) *OTKRequestsUpsertBulk {
	return u.Update(func(s *OTKRequestsUpsert) {
		s.SetOtk(v)
	})
}

// UpdateOtk sets the "otk" field to the value that was provided on create.
func (u *OTKRequestsUpsertBulk) UpdateOtk() *OTKRequestsUpsertBulk {
	return u.Update(func(s *OTKRequestsUpsert) {
		s.UpdateOtk()
	})
}

// Exec executes the query.
func (u *OTKRequestsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OTKRequestsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OTKRequestsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OTKRequestsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
