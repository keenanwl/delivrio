// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductTagUpdate is the builder for updating ProductTag entities.
type ProductTagUpdate struct {
	config
	hooks    []Hook
	mutation *ProductTagMutation
}

// Where appends a list predicates to the ProductTagUpdate builder.
func (ptu *ProductTagUpdate) Where(ps ...predicate.ProductTag) *ProductTagUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetTenantID sets the "tenant_id" field.
func (ptu *ProductTagUpdate) SetTenantID(pu pulid.ID) *ProductTagUpdate {
	ptu.mutation.SetTenantID(pu)
	return ptu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ptu *ProductTagUpdate) SetNillableTenantID(pu *pulid.ID) *ProductTagUpdate {
	if pu != nil {
		ptu.SetTenantID(*pu)
	}
	return ptu
}

// SetName sets the "name" field.
func (ptu *ProductTagUpdate) SetName(s string) *ProductTagUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptu *ProductTagUpdate) SetNillableName(s *string) *ProductTagUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ptu *ProductTagUpdate) SetTenant(t *Tenant) *ProductTagUpdate {
	return ptu.SetTenantID(t.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (ptu *ProductTagUpdate) AddProductIDs(ids ...pulid.ID) *ProductTagUpdate {
	ptu.mutation.AddProductIDs(ids...)
	return ptu
}

// AddProducts adds the "products" edges to the Product entity.
func (ptu *ProductTagUpdate) AddProducts(p ...*Product) *ProductTagUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddProductIDs(ids...)
}

// Mutation returns the ProductTagMutation object of the builder.
func (ptu *ProductTagUpdate) Mutation() *ProductTagMutation {
	return ptu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ptu *ProductTagUpdate) ClearTenant() *ProductTagUpdate {
	ptu.mutation.ClearTenant()
	return ptu
}

// ClearProducts clears all "products" edges to the Product entity.
func (ptu *ProductTagUpdate) ClearProducts() *ProductTagUpdate {
	ptu.mutation.ClearProducts()
	return ptu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (ptu *ProductTagUpdate) RemoveProductIDs(ids ...pulid.ID) *ProductTagUpdate {
	ptu.mutation.RemoveProductIDs(ids...)
	return ptu
}

// RemoveProducts removes "products" edges to Product entities.
func (ptu *ProductTagUpdate) RemoveProducts(p ...*Product) *ProductTagUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProductTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProductTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProductTagUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProductTagUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProductTagUpdate) check() error {
	if ptu.mutation.TenantCleared() && len(ptu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductTag.tenant"`)
	}
	return nil
}

func (ptu *ProductTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(producttag.Table, producttag.Columns, sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.SetField(producttag.FieldName, field.TypeString, value)
	}
	if ptu.mutation.CreatedAtCleared() {
		_spec.ClearField(producttag.FieldCreatedAt, field.TypeTime)
	}
	if ptu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   producttag.TenantTable,
			Columns: []string{producttag.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   producttag.TenantTable,
			Columns: []string{producttag.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttag.ProductsTable,
			Columns: producttag.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !ptu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttag.ProductsTable,
			Columns: producttag.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttag.ProductsTable,
			Columns: producttag.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProductTagUpdateOne is the builder for updating a single ProductTag entity.
type ProductTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductTagMutation
}

// SetTenantID sets the "tenant_id" field.
func (ptuo *ProductTagUpdateOne) SetTenantID(pu pulid.ID) *ProductTagUpdateOne {
	ptuo.mutation.SetTenantID(pu)
	return ptuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ptuo *ProductTagUpdateOne) SetNillableTenantID(pu *pulid.ID) *ProductTagUpdateOne {
	if pu != nil {
		ptuo.SetTenantID(*pu)
	}
	return ptuo
}

// SetName sets the "name" field.
func (ptuo *ProductTagUpdateOne) SetName(s string) *ProductTagUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptuo *ProductTagUpdateOne) SetNillableName(s *string) *ProductTagUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ptuo *ProductTagUpdateOne) SetTenant(t *Tenant) *ProductTagUpdateOne {
	return ptuo.SetTenantID(t.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (ptuo *ProductTagUpdateOne) AddProductIDs(ids ...pulid.ID) *ProductTagUpdateOne {
	ptuo.mutation.AddProductIDs(ids...)
	return ptuo
}

// AddProducts adds the "products" edges to the Product entity.
func (ptuo *ProductTagUpdateOne) AddProducts(p ...*Product) *ProductTagUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddProductIDs(ids...)
}

// Mutation returns the ProductTagMutation object of the builder.
func (ptuo *ProductTagUpdateOne) Mutation() *ProductTagMutation {
	return ptuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ptuo *ProductTagUpdateOne) ClearTenant() *ProductTagUpdateOne {
	ptuo.mutation.ClearTenant()
	return ptuo
}

// ClearProducts clears all "products" edges to the Product entity.
func (ptuo *ProductTagUpdateOne) ClearProducts() *ProductTagUpdateOne {
	ptuo.mutation.ClearProducts()
	return ptuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (ptuo *ProductTagUpdateOne) RemoveProductIDs(ids ...pulid.ID) *ProductTagUpdateOne {
	ptuo.mutation.RemoveProductIDs(ids...)
	return ptuo
}

// RemoveProducts removes "products" edges to Product entities.
func (ptuo *ProductTagUpdateOne) RemoveProducts(p ...*Product) *ProductTagUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the ProductTagUpdate builder.
func (ptuo *ProductTagUpdateOne) Where(ps ...predicate.ProductTag) *ProductTagUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProductTagUpdateOne) Select(field string, fields ...string) *ProductTagUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProductTag entity.
func (ptuo *ProductTagUpdateOne) Save(ctx context.Context) (*ProductTag, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProductTagUpdateOne) SaveX(ctx context.Context) *ProductTag {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProductTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProductTagUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProductTagUpdateOne) check() error {
	if ptuo.mutation.TenantCleared() && len(ptuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductTag.tenant"`)
	}
	return nil
}

func (ptuo *ProductTagUpdateOne) sqlSave(ctx context.Context) (_node *ProductTag, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(producttag.Table, producttag.Columns, sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producttag.FieldID)
		for _, f := range fields {
			if !producttag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != producttag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.SetField(producttag.FieldName, field.TypeString, value)
	}
	if ptuo.mutation.CreatedAtCleared() {
		_spec.ClearField(producttag.FieldCreatedAt, field.TypeTime)
	}
	if ptuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   producttag.TenantTable,
			Columns: []string{producttag.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   producttag.TenantTable,
			Columns: []string{producttag.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttag.ProductsTable,
			Columns: producttag.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !ptuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttag.ProductsTable,
			Columns: producttag.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttag.ProductsTable,
			Columns: producttag.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductTag{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
