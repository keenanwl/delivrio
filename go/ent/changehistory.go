// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChangeHistory is the model entity for the ChangeHistory schema.
type ChangeHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Origin holds the value of the "origin" field.
	Origin changehistory.Origin `json:"origin,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChangeHistoryQuery when eager-loading is set.
	Edges               ChangeHistoryEdges `json:"edges"`
	change_history_user *pulid.ID
	selectValues        sql.SelectValues
}

// ChangeHistoryEdges holds the relations/edges for other nodes in the graph.
type ChangeHistoryEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// PlanHistory holds the value of the plan_history edge.
	PlanHistory []*PlanHistory `json:"plan_history,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// OrderHistory holds the value of the order_history edge.
	OrderHistory []*OrderHistory `json:"order_history,omitempty"`
	// ShipmentHistory holds the value of the shipment_history edge.
	ShipmentHistory []*ShipmentHistory `json:"shipment_history,omitempty"`
	// ReturnColliHistory holds the value of the return_colli_history edge.
	ReturnColliHistory []*ReturnColliHistory `json:"return_colli_history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedPlanHistory        map[string][]*PlanHistory
	namedOrderHistory       map[string][]*OrderHistory
	namedShipmentHistory    map[string][]*ShipmentHistory
	namedReturnColliHistory map[string][]*ReturnColliHistory
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChangeHistoryEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// PlanHistoryOrErr returns the PlanHistory value or an error if the edge
// was not loaded in eager-loading.
func (e ChangeHistoryEdges) PlanHistoryOrErr() ([]*PlanHistory, error) {
	if e.loadedTypes[1] {
		return e.PlanHistory, nil
	}
	return nil, &NotLoadedError{edge: "plan_history"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChangeHistoryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrderHistoryOrErr returns the OrderHistory value or an error if the edge
// was not loaded in eager-loading.
func (e ChangeHistoryEdges) OrderHistoryOrErr() ([]*OrderHistory, error) {
	if e.loadedTypes[3] {
		return e.OrderHistory, nil
	}
	return nil, &NotLoadedError{edge: "order_history"}
}

// ShipmentHistoryOrErr returns the ShipmentHistory value or an error if the edge
// was not loaded in eager-loading.
func (e ChangeHistoryEdges) ShipmentHistoryOrErr() ([]*ShipmentHistory, error) {
	if e.loadedTypes[4] {
		return e.ShipmentHistory, nil
	}
	return nil, &NotLoadedError{edge: "shipment_history"}
}

// ReturnColliHistoryOrErr returns the ReturnColliHistory value or an error if the edge
// was not loaded in eager-loading.
func (e ChangeHistoryEdges) ReturnColliHistoryOrErr() ([]*ReturnColliHistory, error) {
	if e.loadedTypes[5] {
		return e.ReturnColliHistory, nil
	}
	return nil, &NotLoadedError{edge: "return_colli_history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChangeHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case changehistory.FieldID, changehistory.FieldTenantID:
			values[i] = new(pulid.ID)
		case changehistory.FieldOrigin:
			values[i] = new(sql.NullString)
		case changehistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case changehistory.ForeignKeys[0]: // change_history_user
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChangeHistory fields.
func (ch *ChangeHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case changehistory.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ch.ID = *value
			}
		case changehistory.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				ch.TenantID = *value
			}
		case changehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ch.CreatedAt = value.Time
			}
		case changehistory.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				ch.Origin = changehistory.Origin(value.String)
			}
		case changehistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field change_history_user", values[i])
			} else if value.Valid {
				ch.change_history_user = new(pulid.ID)
				*ch.change_history_user = *value.S.(*pulid.ID)
			}
		default:
			ch.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChangeHistory.
// This includes values selected through modifiers, order, etc.
func (ch *ChangeHistory) Value(name string) (ent.Value, error) {
	return ch.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ChangeHistory entity.
func (ch *ChangeHistory) QueryTenant() *TenantQuery {
	return NewChangeHistoryClient(ch.config).QueryTenant(ch)
}

// QueryPlanHistory queries the "plan_history" edge of the ChangeHistory entity.
func (ch *ChangeHistory) QueryPlanHistory() *PlanHistoryQuery {
	return NewChangeHistoryClient(ch.config).QueryPlanHistory(ch)
}

// QueryUser queries the "user" edge of the ChangeHistory entity.
func (ch *ChangeHistory) QueryUser() *UserQuery {
	return NewChangeHistoryClient(ch.config).QueryUser(ch)
}

// QueryOrderHistory queries the "order_history" edge of the ChangeHistory entity.
func (ch *ChangeHistory) QueryOrderHistory() *OrderHistoryQuery {
	return NewChangeHistoryClient(ch.config).QueryOrderHistory(ch)
}

// QueryShipmentHistory queries the "shipment_history" edge of the ChangeHistory entity.
func (ch *ChangeHistory) QueryShipmentHistory() *ShipmentHistoryQuery {
	return NewChangeHistoryClient(ch.config).QueryShipmentHistory(ch)
}

// QueryReturnColliHistory queries the "return_colli_history" edge of the ChangeHistory entity.
func (ch *ChangeHistory) QueryReturnColliHistory() *ReturnColliHistoryQuery {
	return NewChangeHistoryClient(ch.config).QueryReturnColliHistory(ch)
}

// Update returns a builder for updating this ChangeHistory.
// Note that you need to call ChangeHistory.Unwrap() before calling this method if this ChangeHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ch *ChangeHistory) Update() *ChangeHistoryUpdateOne {
	return NewChangeHistoryClient(ch.config).UpdateOne(ch)
}

// Unwrap unwraps the ChangeHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ch *ChangeHistory) Unwrap() *ChangeHistory {
	_tx, ok := ch.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChangeHistory is not a transactional entity")
	}
	ch.config.driver = _tx.drv
	return ch
}

// String implements the fmt.Stringer.
func (ch *ChangeHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ChangeHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ch.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ch.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ch.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(fmt.Sprintf("%v", ch.Origin))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPlanHistory returns the PlanHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ch *ChangeHistory) NamedPlanHistory(name string) ([]*PlanHistory, error) {
	if ch.Edges.namedPlanHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ch.Edges.namedPlanHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ch *ChangeHistory) appendNamedPlanHistory(name string, edges ...*PlanHistory) {
	if ch.Edges.namedPlanHistory == nil {
		ch.Edges.namedPlanHistory = make(map[string][]*PlanHistory)
	}
	if len(edges) == 0 {
		ch.Edges.namedPlanHistory[name] = []*PlanHistory{}
	} else {
		ch.Edges.namedPlanHistory[name] = append(ch.Edges.namedPlanHistory[name], edges...)
	}
}

// NamedOrderHistory returns the OrderHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ch *ChangeHistory) NamedOrderHistory(name string) ([]*OrderHistory, error) {
	if ch.Edges.namedOrderHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ch.Edges.namedOrderHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ch *ChangeHistory) appendNamedOrderHistory(name string, edges ...*OrderHistory) {
	if ch.Edges.namedOrderHistory == nil {
		ch.Edges.namedOrderHistory = make(map[string][]*OrderHistory)
	}
	if len(edges) == 0 {
		ch.Edges.namedOrderHistory[name] = []*OrderHistory{}
	} else {
		ch.Edges.namedOrderHistory[name] = append(ch.Edges.namedOrderHistory[name], edges...)
	}
}

// NamedShipmentHistory returns the ShipmentHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ch *ChangeHistory) NamedShipmentHistory(name string) ([]*ShipmentHistory, error) {
	if ch.Edges.namedShipmentHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ch.Edges.namedShipmentHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ch *ChangeHistory) appendNamedShipmentHistory(name string, edges ...*ShipmentHistory) {
	if ch.Edges.namedShipmentHistory == nil {
		ch.Edges.namedShipmentHistory = make(map[string][]*ShipmentHistory)
	}
	if len(edges) == 0 {
		ch.Edges.namedShipmentHistory[name] = []*ShipmentHistory{}
	} else {
		ch.Edges.namedShipmentHistory[name] = append(ch.Edges.namedShipmentHistory[name], edges...)
	}
}

// NamedReturnColliHistory returns the ReturnColliHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ch *ChangeHistory) NamedReturnColliHistory(name string) ([]*ReturnColliHistory, error) {
	if ch.Edges.namedReturnColliHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ch.Edges.namedReturnColliHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ch *ChangeHistory) appendNamedReturnColliHistory(name string, edges ...*ReturnColliHistory) {
	if ch.Edges.namedReturnColliHistory == nil {
		ch.Edges.namedReturnColliHistory = make(map[string][]*ReturnColliHistory)
	}
	if len(edges) == 0 {
		ch.Edges.namedReturnColliHistory[name] = []*ReturnColliHistory{}
	} else {
		ch.Edges.namedReturnColliHistory[name] = append(ch.Edges.namedReturnColliHistory[name], edges...)
	}
}

// ChangeHistories is a parsable slice of ChangeHistory.
type ChangeHistories []*ChangeHistory
