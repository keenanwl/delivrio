// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopDAOCreate is the builder for creating a ParcelShopDAO entity.
type ParcelShopDAOCreate struct {
	config
	mutation *ParcelShopDAOMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetShopID sets the "shop_id" field.
func (psdc *ParcelShopDAOCreate) SetShopID(s string) *ParcelShopDAOCreate {
	psdc.mutation.SetShopID(s)
	return psdc
}

// SetID sets the "id" field.
func (psdc *ParcelShopDAOCreate) SetID(pu pulid.ID) *ParcelShopDAOCreate {
	psdc.mutation.SetID(pu)
	return psdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psdc *ParcelShopDAOCreate) SetNillableID(pu *pulid.ID) *ParcelShopDAOCreate {
	if pu != nil {
		psdc.SetID(*pu)
	}
	return psdc
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psdc *ParcelShopDAOCreate) SetParcelShopID(id pulid.ID) *ParcelShopDAOCreate {
	psdc.mutation.SetParcelShopID(id)
	return psdc
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psdc *ParcelShopDAOCreate) SetParcelShop(p *ParcelShop) *ParcelShopDAOCreate {
	return psdc.SetParcelShopID(p.ID)
}

// Mutation returns the ParcelShopDAOMutation object of the builder.
func (psdc *ParcelShopDAOCreate) Mutation() *ParcelShopDAOMutation {
	return psdc.mutation
}

// Save creates the ParcelShopDAO in the database.
func (psdc *ParcelShopDAOCreate) Save(ctx context.Context) (*ParcelShopDAO, error) {
	if err := psdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, psdc.sqlSave, psdc.mutation, psdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psdc *ParcelShopDAOCreate) SaveX(ctx context.Context) *ParcelShopDAO {
	v, err := psdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psdc *ParcelShopDAOCreate) Exec(ctx context.Context) error {
	_, err := psdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psdc *ParcelShopDAOCreate) ExecX(ctx context.Context) {
	if err := psdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psdc *ParcelShopDAOCreate) defaults() error {
	if _, ok := psdc.mutation.ID(); !ok {
		if parcelshopdao.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized parcelshopdao.DefaultID (forgotten import ent/runtime?)")
		}
		v := parcelshopdao.DefaultID()
		psdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (psdc *ParcelShopDAOCreate) check() error {
	if _, ok := psdc.mutation.ShopID(); !ok {
		return &ValidationError{Name: "shop_id", err: errors.New(`ent: missing required field "ParcelShopDAO.shop_id"`)}
	}
	if len(psdc.mutation.ParcelShopIDs()) == 0 {
		return &ValidationError{Name: "parcel_shop", err: errors.New(`ent: missing required edge "ParcelShopDAO.parcel_shop"`)}
	}
	return nil
}

func (psdc *ParcelShopDAOCreate) sqlSave(ctx context.Context) (*ParcelShopDAO, error) {
	if err := psdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	psdc.mutation.id = &_node.ID
	psdc.mutation.done = true
	return _node, nil
}

func (psdc *ParcelShopDAOCreate) createSpec() (*ParcelShopDAO, *sqlgraph.CreateSpec) {
	var (
		_node = &ParcelShopDAO{config: psdc.config}
		_spec = sqlgraph.NewCreateSpec(parcelshopdao.Table, sqlgraph.NewFieldSpec(parcelshopdao.FieldID, field.TypeString))
	)
	_spec.OnConflict = psdc.conflict
	if id, ok := psdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := psdc.mutation.ShopID(); ok {
		_spec.SetField(parcelshopdao.FieldShopID, field.TypeString, value)
		_node.ShopID = value
	}
	if nodes := psdc.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopdao.ParcelShopTable,
			Columns: []string{parcelshopdao.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_parcel_shop_dao = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShopDAO.Create().
//		SetShopID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopDAOUpsert) {
//			SetShopID(v+v).
//		}).
//		Exec(ctx)
func (psdc *ParcelShopDAOCreate) OnConflict(opts ...sql.ConflictOption) *ParcelShopDAOUpsertOne {
	psdc.conflict = opts
	return &ParcelShopDAOUpsertOne{
		create: psdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShopDAO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psdc *ParcelShopDAOCreate) OnConflictColumns(columns ...string) *ParcelShopDAOUpsertOne {
	psdc.conflict = append(psdc.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopDAOUpsertOne{
		create: psdc,
	}
}

type (
	// ParcelShopDAOUpsertOne is the builder for "upsert"-ing
	//  one ParcelShopDAO node.
	ParcelShopDAOUpsertOne struct {
		create *ParcelShopDAOCreate
	}

	// ParcelShopDAOUpsert is the "OnConflict" setter.
	ParcelShopDAOUpsert struct {
		*sql.UpdateSet
	}
)

// SetShopID sets the "shop_id" field.
func (u *ParcelShopDAOUpsert) SetShopID(v string) *ParcelShopDAOUpsert {
	u.Set(parcelshopdao.FieldShopID, v)
	return u
}

// UpdateShopID sets the "shop_id" field to the value that was provided on create.
func (u *ParcelShopDAOUpsert) UpdateShopID() *ParcelShopDAOUpsert {
	u.SetExcluded(parcelshopdao.FieldShopID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ParcelShopDAO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshopdao.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopDAOUpsertOne) UpdateNewValues() *ParcelShopDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(parcelshopdao.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShopDAO.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ParcelShopDAOUpsertOne) Ignore() *ParcelShopDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopDAOUpsertOne) DoNothing() *ParcelShopDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopDAOCreate.OnConflict
// documentation for more info.
func (u *ParcelShopDAOUpsertOne) Update(set func(*ParcelShopDAOUpsert)) *ParcelShopDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopDAOUpsert{UpdateSet: update})
	}))
	return u
}

// SetShopID sets the "shop_id" field.
func (u *ParcelShopDAOUpsertOne) SetShopID(v string) *ParcelShopDAOUpsertOne {
	return u.Update(func(s *ParcelShopDAOUpsert) {
		s.SetShopID(v)
	})
}

// UpdateShopID sets the "shop_id" field to the value that was provided on create.
func (u *ParcelShopDAOUpsertOne) UpdateShopID() *ParcelShopDAOUpsertOne {
	return u.Update(func(s *ParcelShopDAOUpsert) {
		s.UpdateShopID()
	})
}

// Exec executes the query.
func (u *ParcelShopDAOUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopDAOCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopDAOUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ParcelShopDAOUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ParcelShopDAOUpsertOne.ID is not supported by MySQL driver. Use ParcelShopDAOUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ParcelShopDAOUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ParcelShopDAOCreateBulk is the builder for creating many ParcelShopDAO entities in bulk.
type ParcelShopDAOCreateBulk struct {
	config
	err      error
	builders []*ParcelShopDAOCreate
	conflict []sql.ConflictOption
}

// Save creates the ParcelShopDAO entities in the database.
func (psdcb *ParcelShopDAOCreateBulk) Save(ctx context.Context) ([]*ParcelShopDAO, error) {
	if psdcb.err != nil {
		return nil, psdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(psdcb.builders))
	nodes := make([]*ParcelShopDAO, len(psdcb.builders))
	mutators := make([]Mutator, len(psdcb.builders))
	for i := range psdcb.builders {
		func(i int, root context.Context) {
			builder := psdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParcelShopDAOMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, psdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = psdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, psdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, psdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (psdcb *ParcelShopDAOCreateBulk) SaveX(ctx context.Context) []*ParcelShopDAO {
	v, err := psdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psdcb *ParcelShopDAOCreateBulk) Exec(ctx context.Context) error {
	_, err := psdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psdcb *ParcelShopDAOCreateBulk) ExecX(ctx context.Context) {
	if err := psdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShopDAO.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopDAOUpsert) {
//			SetShopID(v+v).
//		}).
//		Exec(ctx)
func (psdcb *ParcelShopDAOCreateBulk) OnConflict(opts ...sql.ConflictOption) *ParcelShopDAOUpsertBulk {
	psdcb.conflict = opts
	return &ParcelShopDAOUpsertBulk{
		create: psdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShopDAO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psdcb *ParcelShopDAOCreateBulk) OnConflictColumns(columns ...string) *ParcelShopDAOUpsertBulk {
	psdcb.conflict = append(psdcb.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopDAOUpsertBulk{
		create: psdcb,
	}
}

// ParcelShopDAOUpsertBulk is the builder for "upsert"-ing
// a bulk of ParcelShopDAO nodes.
type ParcelShopDAOUpsertBulk struct {
	create *ParcelShopDAOCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ParcelShopDAO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshopdao.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopDAOUpsertBulk) UpdateNewValues() *ParcelShopDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(parcelshopdao.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShopDAO.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ParcelShopDAOUpsertBulk) Ignore() *ParcelShopDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopDAOUpsertBulk) DoNothing() *ParcelShopDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopDAOCreateBulk.OnConflict
// documentation for more info.
func (u *ParcelShopDAOUpsertBulk) Update(set func(*ParcelShopDAOUpsert)) *ParcelShopDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopDAOUpsert{UpdateSet: update})
	}))
	return u
}

// SetShopID sets the "shop_id" field.
func (u *ParcelShopDAOUpsertBulk) SetShopID(v string) *ParcelShopDAOUpsertBulk {
	return u.Update(func(s *ParcelShopDAOUpsert) {
		s.SetShopID(v)
	})
}

// UpdateShopID sets the "shop_id" field to the value that was provided on create.
func (u *ParcelShopDAOUpsertBulk) UpdateShopID() *ParcelShopDAOUpsertBulk {
	return u.Update(func(s *ParcelShopDAOUpsert) {
		s.UpdateShopID()
	})
}

// Exec executes the query.
func (u *ParcelShopDAOUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ParcelShopDAOCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopDAOCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopDAOUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
