// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PackagingUSPSRateIndicator is the model entity for the PackagingUSPSRateIndicator schema.
type PackagingUSPSRateIndicator struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackagingUSPSRateIndicatorQuery when eager-loading is set.
	Edges        PackagingUSPSRateIndicatorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PackagingUSPSRateIndicatorEdges holds the relations/edges for other nodes in the graph.
type PackagingUSPSRateIndicatorEdges struct {
	// PackagingUSPS holds the value of the packaging_usps edge.
	PackagingUSPS []*PackagingUSPS `json:"packaging_usps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedPackagingUSPS map[string][]*PackagingUSPS
}

// PackagingUSPSOrErr returns the PackagingUSPS value or an error if the edge
// was not loaded in eager-loading.
func (e PackagingUSPSRateIndicatorEdges) PackagingUSPSOrErr() ([]*PackagingUSPS, error) {
	if e.loadedTypes[0] {
		return e.PackagingUSPS, nil
	}
	return nil, &NotLoadedError{edge: "packaging_usps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackagingUSPSRateIndicator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packaginguspsrateindicator.FieldID:
			values[i] = new(pulid.ID)
		case packaginguspsrateindicator.FieldCode, packaginguspsrateindicator.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackagingUSPSRateIndicator fields.
func (puri *PackagingUSPSRateIndicator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packaginguspsrateindicator.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				puri.ID = *value
			}
		case packaginguspsrateindicator.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				puri.Code = value.String
			}
		case packaginguspsrateindicator.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				puri.Name = value.String
			}
		default:
			puri.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PackagingUSPSRateIndicator.
// This includes values selected through modifiers, order, etc.
func (puri *PackagingUSPSRateIndicator) Value(name string) (ent.Value, error) {
	return puri.selectValues.Get(name)
}

// QueryPackagingUSPS queries the "packaging_usps" edge of the PackagingUSPSRateIndicator entity.
func (puri *PackagingUSPSRateIndicator) QueryPackagingUSPS() *PackagingUSPSQuery {
	return NewPackagingUSPSRateIndicatorClient(puri.config).QueryPackagingUSPS(puri)
}

// Update returns a builder for updating this PackagingUSPSRateIndicator.
// Note that you need to call PackagingUSPSRateIndicator.Unwrap() before calling this method if this PackagingUSPSRateIndicator
// was returned from a transaction, and the transaction was committed or rolled back.
func (puri *PackagingUSPSRateIndicator) Update() *PackagingUSPSRateIndicatorUpdateOne {
	return NewPackagingUSPSRateIndicatorClient(puri.config).UpdateOne(puri)
}

// Unwrap unwraps the PackagingUSPSRateIndicator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (puri *PackagingUSPSRateIndicator) Unwrap() *PackagingUSPSRateIndicator {
	_tx, ok := puri.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackagingUSPSRateIndicator is not a transactional entity")
	}
	puri.config.driver = _tx.drv
	return puri
}

// String implements the fmt.Stringer.
func (puri *PackagingUSPSRateIndicator) String() string {
	var builder strings.Builder
	builder.WriteString("PackagingUSPSRateIndicator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", puri.ID))
	builder.WriteString("code=")
	builder.WriteString(puri.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(puri.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPackagingUSPS returns the PackagingUSPS named value or an error if the edge was not
// loaded in eager-loading with this name.
func (puri *PackagingUSPSRateIndicator) NamedPackagingUSPS(name string) ([]*PackagingUSPS, error) {
	if puri.Edges.namedPackagingUSPS == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := puri.Edges.namedPackagingUSPS[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (puri *PackagingUSPSRateIndicator) appendNamedPackagingUSPS(name string, edges ...*PackagingUSPS) {
	if puri.Edges.namedPackagingUSPS == nil {
		puri.Edges.namedPackagingUSPS = make(map[string][]*PackagingUSPS)
	}
	if len(edges) == 0 {
		puri.Edges.namedPackagingUSPS[name] = []*PackagingUSPS{}
	} else {
		puri.Edges.namedPackagingUSPS[name] = append(puri.Edges.namedPackagingUSPS[name], edges...)
	}
}

// PackagingUSPSRateIndicators is a parsable slice of PackagingUSPSRateIndicator.
type PackagingUSPSRateIndicators []*PackagingUSPSRateIndicator
