// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Document is the model entity for the Document schema.
type Document struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// HTMLTemplate holds the value of the "html_template" field.
	HTMLTemplate string `json:"html_template,omitempty"`
	// HTMLHeader holds the value of the "html_header" field.
	HTMLHeader string `json:"html_header,omitempty"`
	// HTMLFooter holds the value of the "html_footer" field.
	HTMLFooter string `json:"html_footer,omitempty"`
	// Facilitates printing by saving the latest version of this document
	LastBase64Pdf string `json:"last_base64_pdf,omitempty"`
	// MergeType holds the value of the "merge_type" field.
	MergeType document.MergeType `json:"merge_type,omitempty"`
	// PaperSize holds the value of the "paper_size" field.
	PaperSize document.PaperSize `json:"paper_size,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentQuery when eager-loading is set.
	Edges                  DocumentEdges `json:"edges"`
	document_carrier_brand *pulid.ID
	selectValues           sql.SelectValues
}

// DocumentEdges holds the relations/edges for other nodes in the graph.
type DocumentEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// CarrierBrand holds the value of the carrier_brand edge.
	CarrierBrand *CarrierBrand `json:"carrier_brand,omitempty"`
	// ConnectionPackingSlip holds the value of the connection_packing_slip edge.
	ConnectionPackingSlip []*Connection `json:"connection_packing_slip,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedConnectionPackingSlip map[string][]*Connection
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarrierBrandOrErr returns the CarrierBrand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) CarrierBrandOrErr() (*CarrierBrand, error) {
	if e.CarrierBrand != nil {
		return e.CarrierBrand, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrierbrand.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_brand"}
}

// ConnectionPackingSlipOrErr returns the ConnectionPackingSlip value or an error if the edge
// was not loaded in eager-loading.
func (e DocumentEdges) ConnectionPackingSlipOrErr() ([]*Connection, error) {
	if e.loadedTypes[2] {
		return e.ConnectionPackingSlip, nil
	}
	return nil, &NotLoadedError{edge: "connection_packing_slip"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Document) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case document.FieldID, document.FieldTenantID:
			values[i] = new(pulid.ID)
		case document.FieldName, document.FieldHTMLTemplate, document.FieldHTMLHeader, document.FieldHTMLFooter, document.FieldLastBase64Pdf, document.FieldMergeType, document.FieldPaperSize:
			values[i] = new(sql.NullString)
		case document.FieldStartAt, document.FieldEndAt, document.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case document.ForeignKeys[0]: // document_carrier_brand
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Document fields.
func (d *Document) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case document.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case document.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				d.TenantID = *value
			}
		case document.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case document.FieldHTMLTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_template", values[i])
			} else if value.Valid {
				d.HTMLTemplate = value.String
			}
		case document.FieldHTMLHeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_header", values[i])
			} else if value.Valid {
				d.HTMLHeader = value.String
			}
		case document.FieldHTMLFooter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_footer", values[i])
			} else if value.Valid {
				d.HTMLFooter = value.String
			}
		case document.FieldLastBase64Pdf:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_base64_pdf", values[i])
			} else if value.Valid {
				d.LastBase64Pdf = value.String
			}
		case document.FieldMergeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merge_type", values[i])
			} else if value.Valid {
				d.MergeType = document.MergeType(value.String)
			}
		case document.FieldPaperSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paper_size", values[i])
			} else if value.Valid {
				d.PaperSize = document.PaperSize(value.String)
			}
		case document.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				d.StartAt = value.Time
			}
		case document.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				d.EndAt = value.Time
			}
		case document.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case document.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field document_carrier_brand", values[i])
			} else if value.Valid {
				d.document_carrier_brand = new(pulid.ID)
				*d.document_carrier_brand = *value.S.(*pulid.ID)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Document.
// This includes values selected through modifiers, order, etc.
func (d *Document) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Document entity.
func (d *Document) QueryTenant() *TenantQuery {
	return NewDocumentClient(d.config).QueryTenant(d)
}

// QueryCarrierBrand queries the "carrier_brand" edge of the Document entity.
func (d *Document) QueryCarrierBrand() *CarrierBrandQuery {
	return NewDocumentClient(d.config).QueryCarrierBrand(d)
}

// QueryConnectionPackingSlip queries the "connection_packing_slip" edge of the Document entity.
func (d *Document) QueryConnectionPackingSlip() *ConnectionQuery {
	return NewDocumentClient(d.config).QueryConnectionPackingSlip(d)
}

// Update returns a builder for updating this Document.
// Note that you need to call Document.Unwrap() before calling this method if this Document
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Document) Update() *DocumentUpdateOne {
	return NewDocumentClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Document entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Document) Unwrap() *Document {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Document is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Document) String() string {
	var builder strings.Builder
	builder.WriteString("Document(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", d.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("html_template=")
	builder.WriteString(d.HTMLTemplate)
	builder.WriteString(", ")
	builder.WriteString("html_header=")
	builder.WriteString(d.HTMLHeader)
	builder.WriteString(", ")
	builder.WriteString("html_footer=")
	builder.WriteString(d.HTMLFooter)
	builder.WriteString(", ")
	builder.WriteString("last_base64_pdf=")
	builder.WriteString(d.LastBase64Pdf)
	builder.WriteString(", ")
	builder.WriteString("merge_type=")
	builder.WriteString(fmt.Sprintf("%v", d.MergeType))
	builder.WriteString(", ")
	builder.WriteString("paper_size=")
	builder.WriteString(fmt.Sprintf("%v", d.PaperSize))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(d.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(d.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedConnectionPackingSlip returns the ConnectionPackingSlip named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *Document) NamedConnectionPackingSlip(name string) ([]*Connection, error) {
	if d.Edges.namedConnectionPackingSlip == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedConnectionPackingSlip[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *Document) appendNamedConnectionPackingSlip(name string, edges ...*Connection) {
	if d.Edges.namedConnectionPackingSlip == nil {
		d.Edges.namedConnectionPackingSlip = make(map[string][]*Connection)
	}
	if len(edges) == 0 {
		d.Edges.namedConnectionPackingSlip[name] = []*Connection{}
	} else {
		d.Edges.namedConnectionPackingSlip[name] = append(d.Edges.namedConnectionPackingSlip[name], edges...)
	}
}

// Documents is a parsable slice of Document.
type Documents []*Document
