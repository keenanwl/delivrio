// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierUSPSQuery is the builder for querying CarrierUSPS entities.
type CarrierUSPSQuery struct {
	config
	ctx         *QueryContext
	order       []carrierusps.OrderOption
	inters      []Interceptor
	predicates  []predicate.CarrierUSPS
	withTenant  *TenantQuery
	withCarrier *CarrierQuery
	withFKs     bool
	modifiers   []func(*sql.Selector)
	loadTotal   []func(context.Context, []*CarrierUSPS) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierUSPSQuery builder.
func (cuq *CarrierUSPSQuery) Where(ps ...predicate.CarrierUSPS) *CarrierUSPSQuery {
	cuq.predicates = append(cuq.predicates, ps...)
	return cuq
}

// Limit the number of records to be returned by this query.
func (cuq *CarrierUSPSQuery) Limit(limit int) *CarrierUSPSQuery {
	cuq.ctx.Limit = &limit
	return cuq
}

// Offset to start from.
func (cuq *CarrierUSPSQuery) Offset(offset int) *CarrierUSPSQuery {
	cuq.ctx.Offset = &offset
	return cuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cuq *CarrierUSPSQuery) Unique(unique bool) *CarrierUSPSQuery {
	cuq.ctx.Unique = &unique
	return cuq
}

// Order specifies how the records should be ordered.
func (cuq *CarrierUSPSQuery) Order(o ...carrierusps.OrderOption) *CarrierUSPSQuery {
	cuq.order = append(cuq.order, o...)
	return cuq
}

// QueryTenant chains the current query on the "tenant" edge.
func (cuq *CarrierUSPSQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: cuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierusps.Table, carrierusps.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrierusps.TenantTable, carrierusps.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(cuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrier chains the current query on the "carrier" edge.
func (cuq *CarrierUSPSQuery) QueryCarrier() *CarrierQuery {
	query := (&CarrierClient{config: cuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierusps.Table, carrierusps.FieldID, selector),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierusps.CarrierTable, carrierusps.CarrierColumn),
		)
		fromU = sqlgraph.SetNeighbors(cuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierUSPS entity from the query.
// Returns a *NotFoundError when no CarrierUSPS was found.
func (cuq *CarrierUSPSQuery) First(ctx context.Context) (*CarrierUSPS, error) {
	nodes, err := cuq.Limit(1).All(setContextOp(ctx, cuq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrierusps.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cuq *CarrierUSPSQuery) FirstX(ctx context.Context) *CarrierUSPS {
	node, err := cuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierUSPS ID from the query.
// Returns a *NotFoundError when no CarrierUSPS ID was found.
func (cuq *CarrierUSPSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cuq.Limit(1).IDs(setContextOp(ctx, cuq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrierusps.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cuq *CarrierUSPSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierUSPS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierUSPS entity is found.
// Returns a *NotFoundError when no CarrierUSPS entities are found.
func (cuq *CarrierUSPSQuery) Only(ctx context.Context) (*CarrierUSPS, error) {
	nodes, err := cuq.Limit(2).All(setContextOp(ctx, cuq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrierusps.Label}
	default:
		return nil, &NotSingularError{carrierusps.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cuq *CarrierUSPSQuery) OnlyX(ctx context.Context) *CarrierUSPS {
	node, err := cuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierUSPS ID in the query.
// Returns a *NotSingularError when more than one CarrierUSPS ID is found.
// Returns a *NotFoundError when no entities are found.
func (cuq *CarrierUSPSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cuq.Limit(2).IDs(setContextOp(ctx, cuq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrierusps.Label}
	default:
		err = &NotSingularError{carrierusps.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cuq *CarrierUSPSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierUSPSs.
func (cuq *CarrierUSPSQuery) All(ctx context.Context) ([]*CarrierUSPS, error) {
	ctx = setContextOp(ctx, cuq.ctx, ent.OpQueryAll)
	if err := cuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierUSPS, *CarrierUSPSQuery]()
	return withInterceptors[[]*CarrierUSPS](ctx, cuq, qr, cuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cuq *CarrierUSPSQuery) AllX(ctx context.Context) []*CarrierUSPS {
	nodes, err := cuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierUSPS IDs.
func (cuq *CarrierUSPSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cuq.ctx.Unique == nil && cuq.path != nil {
		cuq.Unique(true)
	}
	ctx = setContextOp(ctx, cuq.ctx, ent.OpQueryIDs)
	if err = cuq.Select(carrierusps.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cuq *CarrierUSPSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cuq *CarrierUSPSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cuq.ctx, ent.OpQueryCount)
	if err := cuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cuq, querierCount[*CarrierUSPSQuery](), cuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cuq *CarrierUSPSQuery) CountX(ctx context.Context) int {
	count, err := cuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cuq *CarrierUSPSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cuq.ctx, ent.OpQueryExist)
	switch _, err := cuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cuq *CarrierUSPSQuery) ExistX(ctx context.Context) bool {
	exist, err := cuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierUSPSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cuq *CarrierUSPSQuery) Clone() *CarrierUSPSQuery {
	if cuq == nil {
		return nil
	}
	return &CarrierUSPSQuery{
		config:      cuq.config,
		ctx:         cuq.ctx.Clone(),
		order:       append([]carrierusps.OrderOption{}, cuq.order...),
		inters:      append([]Interceptor{}, cuq.inters...),
		predicates:  append([]predicate.CarrierUSPS{}, cuq.predicates...),
		withTenant:  cuq.withTenant.Clone(),
		withCarrier: cuq.withCarrier.Clone(),
		// clone intermediate query.
		sql:  cuq.sql.Clone(),
		path: cuq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (cuq *CarrierUSPSQuery) WithTenant(opts ...func(*TenantQuery)) *CarrierUSPSQuery {
	query := (&TenantClient{config: cuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cuq.withTenant = query
	return cuq
}

// WithCarrier tells the query-builder to eager-load the nodes that are connected to
// the "carrier" edge. The optional arguments are used to configure the query builder of the edge.
func (cuq *CarrierUSPSQuery) WithCarrier(opts ...func(*CarrierQuery)) *CarrierUSPSQuery {
	query := (&CarrierClient{config: cuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cuq.withCarrier = query
	return cuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierUSPS.Query().
//		GroupBy(carrierusps.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cuq *CarrierUSPSQuery) GroupBy(field string, fields ...string) *CarrierUSPSGroupBy {
	cuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierUSPSGroupBy{build: cuq}
	grbuild.flds = &cuq.ctx.Fields
	grbuild.label = carrierusps.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.CarrierUSPS.Query().
//		Select(carrierusps.FieldTenantID).
//		Scan(ctx, &v)
func (cuq *CarrierUSPSQuery) Select(fields ...string) *CarrierUSPSSelect {
	cuq.ctx.Fields = append(cuq.ctx.Fields, fields...)
	sbuild := &CarrierUSPSSelect{CarrierUSPSQuery: cuq}
	sbuild.label = carrierusps.Label
	sbuild.flds, sbuild.scan = &cuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierUSPSSelect configured with the given aggregations.
func (cuq *CarrierUSPSQuery) Aggregate(fns ...AggregateFunc) *CarrierUSPSSelect {
	return cuq.Select().Aggregate(fns...)
}

func (cuq *CarrierUSPSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cuq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cuq); err != nil {
				return err
			}
		}
	}
	for _, f := range cuq.ctx.Fields {
		if !carrierusps.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cuq.path != nil {
		prev, err := cuq.path(ctx)
		if err != nil {
			return err
		}
		cuq.sql = prev
	}
	if carrierusps.Policy == nil {
		return errors.New("ent: uninitialized carrierusps.Policy (forgotten import ent/runtime?)")
	}
	if err := carrierusps.Policy.EvalQuery(ctx, cuq); err != nil {
		return err
	}
	return nil
}

func (cuq *CarrierUSPSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierUSPS, error) {
	var (
		nodes       = []*CarrierUSPS{}
		withFKs     = cuq.withFKs
		_spec       = cuq.querySpec()
		loadedTypes = [2]bool{
			cuq.withTenant != nil,
			cuq.withCarrier != nil,
		}
	)
	if cuq.withCarrier != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrierusps.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierUSPS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierUSPS{config: cuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cuq.modifiers) > 0 {
		_spec.Modifiers = cuq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cuq.withTenant; query != nil {
		if err := cuq.loadTenant(ctx, query, nodes, nil,
			func(n *CarrierUSPS, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := cuq.withCarrier; query != nil {
		if err := cuq.loadCarrier(ctx, query, nodes, nil,
			func(n *CarrierUSPS, e *Carrier) { n.Edges.Carrier = e }); err != nil {
			return nil, err
		}
	}
	for i := range cuq.loadTotal {
		if err := cuq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cuq *CarrierUSPSQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*CarrierUSPS, init func(*CarrierUSPS), assign func(*CarrierUSPS, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierUSPS)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cuq *CarrierUSPSQuery) loadCarrier(ctx context.Context, query *CarrierQuery, nodes []*CarrierUSPS, init func(*CarrierUSPS), assign func(*CarrierUSPS, *Carrier)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierUSPS)
	for i := range nodes {
		if nodes[i].carrier_carrier_usps == nil {
			continue
		}
		fk := *nodes[i].carrier_carrier_usps
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrier.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_carrier_usps" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cuq *CarrierUSPSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cuq.querySpec()
	if len(cuq.modifiers) > 0 {
		_spec.Modifiers = cuq.modifiers
	}
	_spec.Node.Columns = cuq.ctx.Fields
	if len(cuq.ctx.Fields) > 0 {
		_spec.Unique = cuq.ctx.Unique != nil && *cuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cuq.driver, _spec)
}

func (cuq *CarrierUSPSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrierusps.Table, carrierusps.Columns, sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString))
	_spec.From = cuq.sql
	if unique := cuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cuq.path != nil {
		_spec.Unique = true
	}
	if fields := cuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierusps.FieldID)
		for i := range fields {
			if fields[i] != carrierusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cuq.withTenant != nil {
			_spec.Node.AddColumnOnce(carrierusps.FieldTenantID)
		}
	}
	if ps := cuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cuq *CarrierUSPSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cuq.driver.Dialect())
	t1 := builder.Table(carrierusps.Table)
	columns := cuq.ctx.Fields
	if len(columns) == 0 {
		columns = carrierusps.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cuq.sql != nil {
		selector = cuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cuq.ctx.Unique != nil && *cuq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cuq.predicates {
		p(selector)
	}
	for _, p := range cuq.order {
		p(selector)
	}
	if offset := cuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CarrierUSPSGroupBy is the group-by builder for CarrierUSPS entities.
type CarrierUSPSGroupBy struct {
	selector
	build *CarrierUSPSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cugb *CarrierUSPSGroupBy) Aggregate(fns ...AggregateFunc) *CarrierUSPSGroupBy {
	cugb.fns = append(cugb.fns, fns...)
	return cugb
}

// Scan applies the selector query and scans the result into the given value.
func (cugb *CarrierUSPSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cugb.build.ctx, ent.OpQueryGroupBy)
	if err := cugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierUSPSQuery, *CarrierUSPSGroupBy](ctx, cugb.build, cugb, cugb.build.inters, v)
}

func (cugb *CarrierUSPSGroupBy) sqlScan(ctx context.Context, root *CarrierUSPSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cugb.fns))
	for _, fn := range cugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cugb.flds)+len(cugb.fns))
		for _, f := range *cugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierUSPSSelect is the builder for selecting fields of CarrierUSPS entities.
type CarrierUSPSSelect struct {
	*CarrierUSPSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cus *CarrierUSPSSelect) Aggregate(fns ...AggregateFunc) *CarrierUSPSSelect {
	cus.fns = append(cus.fns, fns...)
	return cus
}

// Scan applies the selector query and scans the result into the given value.
func (cus *CarrierUSPSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cus.ctx, ent.OpQuerySelect)
	if err := cus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierUSPSQuery, *CarrierUSPSSelect](ctx, cus.CarrierUSPSQuery, cus, cus.inters, v)
}

func (cus *CarrierUSPSSelect) sqlScan(ctx context.Context, root *CarrierUSPSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cus.fns))
	for _, fn := range cus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
