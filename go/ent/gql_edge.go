// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (at *APIToken) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := at.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryTenant().Only(ctx)
	}
	return result, err
}

func (at *APIToken) User(ctx context.Context) (*User, error) {
	result, err := at.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = at.QueryUser().Only(ctx)
	}
	return result, err
}

func (ar *AccessRight) AssignedAccessRight(ctx context.Context) (result []*SeatGroup, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ar.NamedAssignedAccessRight(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ar.Edges.AssignedAccessRightOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ar.QueryAssignedAccessRight().All(ctx)
	}
	return result, err
}

func (ar *AccessRight) SeatGroupAccessRight(ctx context.Context) (result []*SeatGroupAccessRight, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ar.NamedSeatGroupAccessRight(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ar.Edges.SeatGroupAccessRightOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ar.QuerySeatGroupAccessRight().All(ctx)
	}
	return result, err
}

func (a *Address) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := a.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryTenant().Only(ctx)
	}
	return result, err
}

func (a *Address) RecipientColli(ctx context.Context) (result []*Colli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedRecipientColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.RecipientColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryRecipientColli().All(ctx)
	}
	return result, err
}

func (a *Address) RecipientConsolidation(ctx context.Context) (*Consolidation, error) {
	result, err := a.Edges.RecipientConsolidationOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryRecipientConsolidation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Address) CompanyAddress(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedCompanyAddress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.CompanyAddressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryCompanyAddress().All(ctx)
	}
	return result, err
}

func (a *Address) Location(ctx context.Context) (result []*Location, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedLocation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.LocationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryLocation().All(ctx)
	}
	return result, err
}

func (a *Address) SenderColli(ctx context.Context) (result []*Colli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedSenderColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.SenderColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QuerySenderColli().All(ctx)
	}
	return result, err
}

func (a *Address) SenderConsolidation(ctx context.Context) (*Consolidation, error) {
	result, err := a.Edges.SenderConsolidationOrErr()
	if IsNotLoaded(err) {
		result, err = a.QuerySenderConsolidation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Address) ReturnSenderColli(ctx context.Context) (result []*ReturnColli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedReturnSenderColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.ReturnSenderColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryReturnSenderColli().All(ctx)
	}
	return result, err
}

func (a *Address) ReturnRecipientColli(ctx context.Context) (result []*ReturnColli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedReturnRecipientColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.ReturnRecipientColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryReturnRecipientColli().All(ctx)
	}
	return result, err
}

func (a *Address) Country(ctx context.Context) (*Country, error) {
	result, err := a.Edges.CountryOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryCountry().Only(ctx)
	}
	return result, err
}

func (ag *AddressGlobal) ParcelShopPostNordDelivery(ctx context.Context) (*ParcelShopPostNord, error) {
	result, err := ag.Edges.ParcelShopPostNordDeliveryOrErr()
	if IsNotLoaded(err) {
		result, err = ag.QueryParcelShopPostNordDelivery().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ag *AddressGlobal) ParcelShopBringDelivery(ctx context.Context) (*ParcelShopBring, error) {
	result, err := ag.Edges.ParcelShopBringDeliveryOrErr()
	if IsNotLoaded(err) {
		result, err = ag.QueryParcelShopBringDelivery().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ag *AddressGlobal) ParcelShop(ctx context.Context) (*ParcelShop, error) {
	result, err := ag.Edges.ParcelShopOrErr()
	if IsNotLoaded(err) {
		result, err = ag.QueryParcelShop().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ag *AddressGlobal) Country(ctx context.Context) (*Country, error) {
	result, err := ag.Edges.CountryOrErr()
	if IsNotLoaded(err) {
		result, err = ag.QueryCountry().Only(ctx)
	}
	return result, err
}

func (bhp *BusinessHoursPeriod) ParcelShop(ctx context.Context) (*ParcelShop, error) {
	result, err := bhp.Edges.ParcelShopOrErr()
	if IsNotLoaded(err) {
		result, err = bhp.QueryParcelShop().Only(ctx)
	}
	return result, err
}

func (c *Carrier) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := c.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryTenant().Only(ctx)
	}
	return result, err
}

func (c *Carrier) CarrierBrand(ctx context.Context) (*CarrierBrand, error) {
	result, err := c.Edges.CarrierBrandOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierBrand().Only(ctx)
	}
	return result, err
}

func (c *Carrier) CarrierDAO(ctx context.Context) (*CarrierDAO, error) {
	result, err := c.Edges.CarrierDAOOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierDAO().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Carrier) CarrierDF(ctx context.Context) (*CarrierDF, error) {
	result, err := c.Edges.CarrierDFOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierDF().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Carrier) CarrierDSV(ctx context.Context) (*CarrierDSV, error) {
	result, err := c.Edges.CarrierDSVOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierDSV().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Carrier) CarrierEasyPost(ctx context.Context) (*CarrierEasyPost, error) {
	result, err := c.Edges.CarrierEasyPostOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierEasyPost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Carrier) CarrierGLS(ctx context.Context) (*CarrierGLS, error) {
	result, err := c.Edges.CarrierGLSOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierGLS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Carrier) CarrierPostNord(ctx context.Context) (*CarrierPostNord, error) {
	result, err := c.Edges.CarrierPostNordOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierPostNord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Carrier) CarrierUSPS(ctx context.Context) (*CarrierUSPS, error) {
	result, err := c.Edges.CarrierUSPSOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierUSPS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Carrier) CarrierBring(ctx context.Context) (*CarrierBring, error) {
	result, err := c.Edges.CarrierBringOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierBring().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Carrier) DeliveryOption(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDeliveryOption(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DeliveryOptionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDeliveryOption().All(ctx)
	}
	return result, err
}

func (c *Carrier) Shipment(ctx context.Context) (result []*Shipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedShipment(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ShipmentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryShipment().All(ctx)
	}
	return result, err
}

func (casb *CarrierAdditionalServiceBring) CarrierServiceBring(ctx context.Context) (*CarrierServiceBring, error) {
	result, err := casb.Edges.CarrierServiceBringOrErr()
	if IsNotLoaded(err) {
		result, err = casb.QueryCarrierServiceBring().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (casb *CarrierAdditionalServiceBring) DeliveryOptionBring(ctx context.Context) (result []*DeliveryOptionBring, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casb.NamedDeliveryOptionBring(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casb.Edges.DeliveryOptionBringOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casb.QueryDeliveryOptionBring().All(ctx)
	}
	return result, err
}

func (casd *CarrierAdditionalServiceDAO) CarrierServiceDAO(ctx context.Context) (result []*CarrierServiceDAO, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casd.NamedCarrierServiceDAO(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casd.Edges.CarrierServiceDAOOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casd.QueryCarrierServiceDAO().All(ctx)
	}
	return result, err
}

func (casd *CarrierAdditionalServiceDAO) DeliveryOptionDAO(ctx context.Context) (result []*DeliveryOptionDAO, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casd.NamedDeliveryOptionDAO(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casd.Edges.DeliveryOptionDAOOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casd.QueryDeliveryOptionDAO().All(ctx)
	}
	return result, err
}

func (casd *CarrierAdditionalServiceDF) CarrierServiceDF(ctx context.Context) (result []*CarrierServiceDF, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casd.NamedCarrierServiceDF(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casd.Edges.CarrierServiceDFOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casd.QueryCarrierServiceDF().All(ctx)
	}
	return result, err
}

func (casd *CarrierAdditionalServiceDF) DeliveryOptionDF(ctx context.Context) (result []*DeliveryOptionDF, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casd.NamedDeliveryOptionDF(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casd.Edges.DeliveryOptionDFOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casd.QueryDeliveryOptionDF().All(ctx)
	}
	return result, err
}

func (casd *CarrierAdditionalServiceDSV) CarrierServiceDSV(ctx context.Context) (result []*CarrierServiceDSV, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casd.NamedCarrierServiceDSV(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casd.Edges.CarrierServiceDSVOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casd.QueryCarrierServiceDSV().All(ctx)
	}
	return result, err
}

func (casd *CarrierAdditionalServiceDSV) DeliveryOptionDSV(ctx context.Context) (result []*DeliveryOptionDSV, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casd.NamedDeliveryOptionDSV(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casd.Edges.DeliveryOptionDSVOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casd.QueryDeliveryOptionDSV().All(ctx)
	}
	return result, err
}

func (casep *CarrierAdditionalServiceEasyPost) CarrierServiceEasyPost(ctx context.Context) (result []*CarrierServiceEasyPost, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casep.NamedCarrierServiceEasyPost(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casep.Edges.CarrierServiceEasyPostOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casep.QueryCarrierServiceEasyPost().All(ctx)
	}
	return result, err
}

func (casep *CarrierAdditionalServiceEasyPost) DeliveryOptionEasyPost(ctx context.Context) (result []*DeliveryOptionEasyPost, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casep.NamedDeliveryOptionEasyPost(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casep.Edges.DeliveryOptionEasyPostOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casep.QueryDeliveryOptionEasyPost().All(ctx)
	}
	return result, err
}

func (casg *CarrierAdditionalServiceGLS) CarrierServiceGLS(ctx context.Context) (*CarrierServiceGLS, error) {
	result, err := casg.Edges.CarrierServiceGLSOrErr()
	if IsNotLoaded(err) {
		result, err = casg.QueryCarrierServiceGLS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (casg *CarrierAdditionalServiceGLS) DeliveryOptionGLS(ctx context.Context) (result []*DeliveryOptionGLS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casg.NamedDeliveryOptionGLS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casg.Edges.DeliveryOptionGLSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casg.QueryDeliveryOptionGLS().All(ctx)
	}
	return result, err
}

func (casg *CarrierAdditionalServiceGLS) CountriesConsignee(ctx context.Context) (result []*Country, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casg.NamedCountriesConsignee(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casg.Edges.CountriesConsigneeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casg.QueryCountriesConsignee().All(ctx)
	}
	return result, err
}

func (casg *CarrierAdditionalServiceGLS) CountriesConsignor(ctx context.Context) (result []*Country, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casg.NamedCountriesConsignor(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casg.Edges.CountriesConsignorOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casg.QueryCountriesConsignor().All(ctx)
	}
	return result, err
}

func (caspn *CarrierAdditionalServicePostNord) CarrierServicePostNord(ctx context.Context) (*CarrierServicePostNord, error) {
	result, err := caspn.Edges.CarrierServicePostNordOrErr()
	if IsNotLoaded(err) {
		result, err = caspn.QueryCarrierServicePostNord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (caspn *CarrierAdditionalServicePostNord) DeliveryOptionPostNord(ctx context.Context) (result []*DeliveryOptionPostNord, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = caspn.NamedDeliveryOptionPostNord(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = caspn.Edges.DeliveryOptionPostNordOrErr()
	}
	if IsNotLoaded(err) {
		result, err = caspn.QueryDeliveryOptionPostNord().All(ctx)
	}
	return result, err
}

func (caspn *CarrierAdditionalServicePostNord) CountriesConsignee(ctx context.Context) (result []*Country, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = caspn.NamedCountriesConsignee(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = caspn.Edges.CountriesConsigneeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = caspn.QueryCountriesConsignee().All(ctx)
	}
	return result, err
}

func (caspn *CarrierAdditionalServicePostNord) CountriesConsignor(ctx context.Context) (result []*Country, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = caspn.NamedCountriesConsignor(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = caspn.Edges.CountriesConsignorOrErr()
	}
	if IsNotLoaded(err) {
		result, err = caspn.QueryCountriesConsignor().All(ctx)
	}
	return result, err
}

func (casu *CarrierAdditionalServiceUSPS) CarrierServiceUSPS(ctx context.Context) (*CarrierServiceUSPS, error) {
	result, err := casu.Edges.CarrierServiceUSPSOrErr()
	if IsNotLoaded(err) {
		result, err = casu.QueryCarrierServiceUSPS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (casu *CarrierAdditionalServiceUSPS) DeliveryOptionUSPS(ctx context.Context) (result []*DeliveryOptionUSPS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = casu.NamedDeliveryOptionUSPS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = casu.Edges.DeliveryOptionUSPSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = casu.QueryDeliveryOptionUSPS().All(ctx)
	}
	return result, err
}

func (cb *CarrierBrand) CarrierService(ctx context.Context) (result []*CarrierService, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cb.NamedCarrierService(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cb.Edges.CarrierServiceOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cb.QueryCarrierService().All(ctx)
	}
	return result, err
}

func (cb *CarrierBrand) Carrier(ctx context.Context) (result []*Carrier, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cb.NamedCarrier(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cb.Edges.CarrierOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cb.QueryCarrier().All(ctx)
	}
	return result, err
}

func (cb *CarrierBrand) ParcelShop(ctx context.Context) (result []*ParcelShop, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cb.NamedParcelShop(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cb.Edges.ParcelShopOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cb.QueryParcelShop().All(ctx)
	}
	return result, err
}

func (cb *CarrierBrand) Packaging(ctx context.Context) (result []*Packaging, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cb.NamedPackaging(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cb.Edges.PackagingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cb.QueryPackaging().All(ctx)
	}
	return result, err
}

func (cb *CarrierBrand) Document(ctx context.Context) (result []*Document, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cb.NamedDocument(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cb.Edges.DocumentOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cb.QueryDocument().All(ctx)
	}
	return result, err
}

func (cb *CarrierBring) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cb.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cb.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cb *CarrierBring) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := cb.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = cb.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (cd *CarrierDAO) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cd.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cd *CarrierDAO) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := cd.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (cd *CarrierDF) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cd.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cd *CarrierDF) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := cd.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (cd *CarrierDSV) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cd.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cd *CarrierDSV) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := cd.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (cep *CarrierEasyPost) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cep.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cep.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cep *CarrierEasyPost) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := cep.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = cep.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (cg *CarrierGLS) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cg.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cg.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cg *CarrierGLS) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := cg.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = cg.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (cpn *CarrierPostNord) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cpn.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cpn.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cpn *CarrierPostNord) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := cpn.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = cpn.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (cs *CarrierService) CarrierServicePostNord(ctx context.Context) (*CarrierServicePostNord, error) {
	result, err := cs.Edges.CarrierServicePostNordOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierServicePostNord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *CarrierService) CarrierServiceDAO(ctx context.Context) (*CarrierServiceDAO, error) {
	result, err := cs.Edges.CarrierServiceDAOOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierServiceDAO().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *CarrierService) CarrierServiceDF(ctx context.Context) (*CarrierServiceDF, error) {
	result, err := cs.Edges.CarrierServiceDFOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierServiceDF().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *CarrierService) CarrierServiceDSV(ctx context.Context) (*CarrierServiceDSV, error) {
	result, err := cs.Edges.CarrierServiceDSVOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierServiceDSV().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *CarrierService) CarrierServEasyPost(ctx context.Context) (*CarrierServiceEasyPost, error) {
	result, err := cs.Edges.CarrierServEasyPostOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierServEasyPost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *CarrierService) CarrierServiceGLS(ctx context.Context) (*CarrierServiceGLS, error) {
	result, err := cs.Edges.CarrierServiceGLSOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierServiceGLS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *CarrierService) CarrierServiceUSPS(ctx context.Context) (*CarrierServiceUSPS, error) {
	result, err := cs.Edges.CarrierServiceUSPSOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierServiceUSPS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *CarrierService) CarrierServiceBring(ctx context.Context) (*CarrierServiceBring, error) {
	result, err := cs.Edges.CarrierServiceBringOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierServiceBring().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *CarrierService) CarrierBrand(ctx context.Context) (*CarrierBrand, error) {
	result, err := cs.Edges.CarrierBrandOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCarrierBrand().Only(ctx)
	}
	return result, err
}

func (cs *CarrierService) DeliveryOption(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cs.NamedDeliveryOption(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cs.Edges.DeliveryOptionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cs.QueryDeliveryOption().All(ctx)
	}
	return result, err
}

func (csb *CarrierServiceBring) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := csb.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = csb.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (csb *CarrierServiceBring) CarrierAdditionalServiceBring(ctx context.Context) (result []*CarrierAdditionalServiceBring, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = csb.NamedCarrierAdditionalServiceBring(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = csb.Edges.CarrierAdditionalServiceBringOrErr()
	}
	if IsNotLoaded(err) {
		result, err = csb.QueryCarrierAdditionalServiceBring().All(ctx)
	}
	return result, err
}

func (csd *CarrierServiceDAO) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := csd.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = csd.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (csd *CarrierServiceDAO) CarrierAdditionalServiceDAO(ctx context.Context) (result []*CarrierAdditionalServiceDAO, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = csd.NamedCarrierAdditionalServiceDAO(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = csd.Edges.CarrierAdditionalServiceDAOOrErr()
	}
	if IsNotLoaded(err) {
		result, err = csd.QueryCarrierAdditionalServiceDAO().All(ctx)
	}
	return result, err
}

func (csd *CarrierServiceDF) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := csd.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = csd.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (csd *CarrierServiceDF) CarrierAdditionalServiceDF(ctx context.Context) (result []*CarrierAdditionalServiceDF, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = csd.NamedCarrierAdditionalServiceDF(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = csd.Edges.CarrierAdditionalServiceDFOrErr()
	}
	if IsNotLoaded(err) {
		result, err = csd.QueryCarrierAdditionalServiceDF().All(ctx)
	}
	return result, err
}

func (csd *CarrierServiceDSV) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := csd.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = csd.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (csd *CarrierServiceDSV) CarrierAdditionalServiceDSV(ctx context.Context) (result []*CarrierAdditionalServiceDSV, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = csd.NamedCarrierAdditionalServiceDSV(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = csd.Edges.CarrierAdditionalServiceDSVOrErr()
	}
	if IsNotLoaded(err) {
		result, err = csd.QueryCarrierAdditionalServiceDSV().All(ctx)
	}
	return result, err
}

func (csep *CarrierServiceEasyPost) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := csep.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = csep.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (csep *CarrierServiceEasyPost) CarrierAddServEasyPost(ctx context.Context) (result []*CarrierAdditionalServiceEasyPost, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = csep.NamedCarrierAddServEasyPost(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = csep.Edges.CarrierAddServEasyPostOrErr()
	}
	if IsNotLoaded(err) {
		result, err = csep.QueryCarrierAddServEasyPost().All(ctx)
	}
	return result, err
}

func (csg *CarrierServiceGLS) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := csg.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = csg.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (csg *CarrierServiceGLS) CarrierAdditionalServiceGLS(ctx context.Context) (result []*CarrierAdditionalServiceGLS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = csg.NamedCarrierAdditionalServiceGLS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = csg.Edges.CarrierAdditionalServiceGLSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = csg.QueryCarrierAdditionalServiceGLS().All(ctx)
	}
	return result, err
}

func (cspn *CarrierServicePostNord) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := cspn.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = cspn.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (cspn *CarrierServicePostNord) CarrierAddServPostNord(ctx context.Context) (result []*CarrierAdditionalServicePostNord, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cspn.NamedCarrierAddServPostNord(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cspn.Edges.CarrierAddServPostNordOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cspn.QueryCarrierAddServPostNord().All(ctx)
	}
	return result, err
}

func (csu *CarrierServiceUSPS) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := csu.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = csu.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (csu *CarrierServiceUSPS) CarrierAdditionalServiceUSPS(ctx context.Context) (result []*CarrierAdditionalServiceUSPS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = csu.NamedCarrierAdditionalServiceUSPS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = csu.Edges.CarrierAdditionalServiceUSPSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = csu.QueryCarrierAdditionalServiceUSPS().All(ctx)
	}
	return result, err
}

func (cu *CarrierUSPS) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cu.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cu.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cu *CarrierUSPS) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := cu.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = cu.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (ch *ChangeHistory) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := ch.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = ch.QueryTenant().Only(ctx)
	}
	return result, err
}

func (ch *ChangeHistory) PlanHistory(ctx context.Context) (result []*PlanHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ch.NamedPlanHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ch.Edges.PlanHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ch.QueryPlanHistory().All(ctx)
	}
	return result, err
}

func (ch *ChangeHistory) User(ctx context.Context) (*User, error) {
	result, err := ch.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ch.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ch *ChangeHistory) OrderHistory(ctx context.Context) (result []*OrderHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ch.NamedOrderHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ch.Edges.OrderHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ch.QueryOrderHistory().All(ctx)
	}
	return result, err
}

func (ch *ChangeHistory) ShipmentHistory(ctx context.Context) (result []*ShipmentHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ch.NamedShipmentHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ch.Edges.ShipmentHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ch.QueryShipmentHistory().All(ctx)
	}
	return result, err
}

func (ch *ChangeHistory) ReturnColliHistory(ctx context.Context) (result []*ReturnColliHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ch.NamedReturnColliHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ch.Edges.ReturnColliHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ch.QueryReturnColliHistory().All(ctx)
	}
	return result, err
}

func (c *Colli) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := c.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryTenant().Only(ctx)
	}
	return result, err
}

func (c *Colli) Recipient(ctx context.Context) (*Address, error) {
	result, err := c.Edges.RecipientOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryRecipient().Only(ctx)
	}
	return result, err
}

func (c *Colli) Sender(ctx context.Context) (*Address, error) {
	result, err := c.Edges.SenderOrErr()
	if IsNotLoaded(err) {
		result, err = c.QuerySender().Only(ctx)
	}
	return result, err
}

func (c *Colli) ParcelShop(ctx context.Context) (*ParcelShop, error) {
	result, err := c.Edges.ParcelShopOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryParcelShop().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Colli) ClickCollectLocation(ctx context.Context) (*Location, error) {
	result, err := c.Edges.ClickCollectLocationOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryClickCollectLocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Colli) OrderLines(ctx context.Context) (result []*OrderLine, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedOrderLines(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.OrderLinesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryOrderLines().All(ctx)
	}
	return result, err
}

func (c *Colli) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := c.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryDeliveryOption().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Colli) DocumentFile(ctx context.Context) (result []*DocumentFile, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDocumentFile(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DocumentFileOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDocumentFile().All(ctx)
	}
	return result, err
}

func (c *Colli) ShipmentParcel(ctx context.Context) (*ShipmentParcel, error) {
	result, err := c.Edges.ShipmentParcelOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryShipmentParcel().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Colli) CancelledShipmentParcel(ctx context.Context) (result []*ShipmentParcel, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCancelledShipmentParcel(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CancelledShipmentParcelOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCancelledShipmentParcel().All(ctx)
	}
	return result, err
}

func (c *Colli) Order(ctx context.Context) (*Order, error) {
	result, err := c.Edges.OrderOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOrder().Only(ctx)
	}
	return result, err
}

func (c *Colli) Packaging(ctx context.Context) (*Packaging, error) {
	result, err := c.Edges.PackagingOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryPackaging().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Colli) PrintJob(ctx context.Context) (result []*PrintJob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedPrintJob(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.PrintJobOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryPrintJob().All(ctx)
	}
	return result, err
}

func (coc *ConnectOptionCarrier) Tenant(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = coc.NamedTenant(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = coc.Edges.TenantOrErr()
	}
	if IsNotLoaded(err) {
		result, err = coc.QueryTenant().All(ctx)
	}
	return result, err
}

func (cop *ConnectOptionPlatform) Tenant(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cop.NamedTenant(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cop.Edges.TenantOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cop.QueryTenant().All(ctx)
	}
	return result, err
}

func (c *Connection) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := c.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryTenant().Only(ctx)
	}
	return result, err
}

func (c *Connection) ConnectionBrand(ctx context.Context) (*ConnectionBrand, error) {
	result, err := c.Edges.ConnectionBrandOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryConnectionBrand().Only(ctx)
	}
	return result, err
}

func (c *Connection) ConnectionShopify(ctx context.Context) (*ConnectionShopify, error) {
	result, err := c.Edges.ConnectionShopifyOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryConnectionShopify().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Connection) Orders(ctx context.Context) (result []*Order, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedOrders(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.OrdersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryOrders().All(ctx)
	}
	return result, err
}

func (c *Connection) SenderLocation(ctx context.Context) (*Location, error) {
	result, err := c.Edges.SenderLocationOrErr()
	if IsNotLoaded(err) {
		result, err = c.QuerySenderLocation().Only(ctx)
	}
	return result, err
}

func (c *Connection) PickupLocation(ctx context.Context) (*Location, error) {
	result, err := c.Edges.PickupLocationOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryPickupLocation().Only(ctx)
	}
	return result, err
}

func (c *Connection) ReturnLocation(ctx context.Context) (*Location, error) {
	result, err := c.Edges.ReturnLocationOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryReturnLocation().Only(ctx)
	}
	return result, err
}

func (c *Connection) SellerLocation(ctx context.Context) (*Location, error) {
	result, err := c.Edges.SellerLocationOrErr()
	if IsNotLoaded(err) {
		result, err = c.QuerySellerLocation().Only(ctx)
	}
	return result, err
}

func (c *Connection) DeliveryOption(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDeliveryOption(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DeliveryOptionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDeliveryOption().All(ctx)
	}
	return result, err
}

func (c *Connection) DefaultDeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := c.Edges.DefaultDeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryDefaultDeliveryOption().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Connection) ReturnPortal(ctx context.Context) (*ReturnPortal, error) {
	result, err := c.Edges.ReturnPortalOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryReturnPortal().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Connection) HypothesisTest(ctx context.Context) (result []*HypothesisTest, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedHypothesisTest(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.HypothesisTestOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryHypothesisTest().All(ctx)
	}
	return result, err
}

func (c *Connection) Notifications(ctx context.Context) (result []*Notification, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedNotifications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.NotificationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryNotifications().All(ctx)
	}
	return result, err
}

func (c *Connection) Currency(ctx context.Context) (*Currency, error) {
	result, err := c.Edges.CurrencyOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCurrency().Only(ctx)
	}
	return result, err
}

func (c *Connection) PackingSlipTemplate(ctx context.Context) (*Document, error) {
	result, err := c.Edges.PackingSlipTemplateOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryPackingSlipTemplate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Connection) ConnectionLookup(ctx context.Context) (result []*ConnectionLookup, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedConnectionLookup(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ConnectionLookupOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryConnectionLookup().All(ctx)
	}
	return result, err
}

func (cb *ConnectionBrand) Connection(ctx context.Context) (result []*Connection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cb.NamedConnection(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cb.Edges.ConnectionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cb.QueryConnection().All(ctx)
	}
	return result, err
}

func (cl *ConnectionLookup) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cl.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cl.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cl *ConnectionLookup) Connections(ctx context.Context) (*Connection, error) {
	result, err := cl.Edges.ConnectionsOrErr()
	if IsNotLoaded(err) {
		result, err = cl.QueryConnections().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cs *ConnectionShopify) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := cs.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryTenant().Only(ctx)
	}
	return result, err
}

func (cs *ConnectionShopify) Connection(ctx context.Context) (*Connection, error) {
	result, err := cs.Edges.ConnectionOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryConnection().Only(ctx)
	}
	return result, err
}

func (c *Consolidation) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := c.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryTenant().Only(ctx)
	}
	return result, err
}

func (c *Consolidation) Pallets(ctx context.Context) (result []*Pallet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedPallets(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.PalletsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryPallets().All(ctx)
	}
	return result, err
}

func (c *Consolidation) Orders(ctx context.Context) (result []*Order, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedOrders(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.OrdersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryOrders().All(ctx)
	}
	return result, err
}

func (c *Consolidation) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := c.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryDeliveryOption().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Consolidation) Recipient(ctx context.Context) (*Address, error) {
	result, err := c.Edges.RecipientOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryRecipient().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Consolidation) Sender(ctx context.Context) (*Address, error) {
	result, err := c.Edges.SenderOrErr()
	if IsNotLoaded(err) {
		result, err = c.QuerySender().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Consolidation) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := c.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryShipment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Consolidation) CancelledShipments(ctx context.Context) (result []*Shipment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCancelledShipments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CancelledShipmentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCancelledShipments().All(ctx)
	}
	return result, err
}

func (c *Contact) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := c.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryTenant().Only(ctx)
	}
	return result, err
}

func (c *Contact) BillingContact(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedBillingContact(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.BillingContactOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryBillingContact().All(ctx)
	}
	return result, err
}

func (c *Contact) AdminContact(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedAdminContact(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.AdminContactOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryAdminContact().All(ctx)
	}
	return result, err
}

func (c *Country) DeliveryRule(ctx context.Context) (result []*DeliveryRule, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDeliveryRule(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DeliveryRuleOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDeliveryRule().All(ctx)
	}
	return result, err
}

func (c *Country) Address(ctx context.Context) (result []*Address, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedAddress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.AddressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryAddress().All(ctx)
	}
	return result, err
}

func (c *Country) AddressGlobal(ctx context.Context) (result []*AddressGlobal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedAddressGlobal(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.AddressGlobalOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryAddressGlobal().All(ctx)
	}
	return result, err
}

func (c *Country) CarrierAdditionalServicePostNordConsignee(ctx context.Context) (result []*CarrierAdditionalServicePostNord, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCarrierAdditionalServicePostNordConsignee(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CarrierAdditionalServicePostNordConsigneeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierAdditionalServicePostNordConsignee().All(ctx)
	}
	return result, err
}

func (c *Country) CarrierAdditionalServicePostNordConsignor(ctx context.Context) (result []*CarrierAdditionalServicePostNord, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCarrierAdditionalServicePostNordConsignor(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CarrierAdditionalServicePostNordConsignorOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierAdditionalServicePostNordConsignor().All(ctx)
	}
	return result, err
}

func (c *Country) CarrierAdditionalServiceGLSConsignee(ctx context.Context) (result []*CarrierAdditionalServiceGLS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCarrierAdditionalServiceGLSConsignee(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CarrierAdditionalServiceGLSConsigneeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierAdditionalServiceGLSConsignee().All(ctx)
	}
	return result, err
}

func (c *Country) CarrierAdditionalServiceGLSConsignor(ctx context.Context) (result []*CarrierAdditionalServiceGLS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCarrierAdditionalServiceGLSConsignor(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CarrierAdditionalServiceGLSConsignorOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCarrierAdditionalServiceGLSConsignor().All(ctx)
	}
	return result, err
}

func (c *Country) CountryHarmonizedCode(ctx context.Context) (result []*CountryHarmonizedCode, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedCountryHarmonizedCode(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.CountryHarmonizedCodeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryCountryHarmonizedCode().All(ctx)
	}
	return result, err
}

func (c *Country) InventoryItem(ctx context.Context) (result []*InventoryItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedInventoryItem(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.InventoryItemOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryInventoryItem().All(ctx)
	}
	return result, err
}

func (chc *CountryHarmonizedCode) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := chc.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = chc.QueryTenant().Only(ctx)
	}
	return result, err
}

func (chc *CountryHarmonizedCode) InventoryItem(ctx context.Context) (*InventoryItem, error) {
	result, err := chc.Edges.InventoryItemOrErr()
	if IsNotLoaded(err) {
		result, err = chc.QueryInventoryItem().Only(ctx)
	}
	return result, err
}

func (chc *CountryHarmonizedCode) Country(ctx context.Context) (*Country, error) {
	result, err := chc.Edges.CountryOrErr()
	if IsNotLoaded(err) {
		result, err = chc.QueryCountry().Only(ctx)
	}
	return result, err
}

func (c *Currency) OrderLine(ctx context.Context) (result []*OrderLine, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedOrderLine(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.OrderLineOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryOrderLine().All(ctx)
	}
	return result, err
}

func (c *Currency) DeliveryRule(ctx context.Context) (result []*DeliveryRule, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDeliveryRule(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DeliveryRuleOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDeliveryRule().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := do.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryTenant().Only(ctx)
	}
	return result, err
}

func (do *DeliveryOption) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := do.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (do *DeliveryOption) DeliveryRule(ctx context.Context) (result []*DeliveryRule, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedDeliveryRule(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.DeliveryRuleOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryRule().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) DeliveryOptionDAO(ctx context.Context) (*DeliveryOptionDAO, error) {
	result, err := do.Edges.DeliveryOptionDAOOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryOptionDAO().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) DeliveryOptionDF(ctx context.Context) (*DeliveryOptionDF, error) {
	result, err := do.Edges.DeliveryOptionDFOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryOptionDF().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) DeliveryOptionDSV(ctx context.Context) (*DeliveryOptionDSV, error) {
	result, err := do.Edges.DeliveryOptionDSVOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryOptionDSV().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) DeliveryOptionEasyPost(ctx context.Context) (*DeliveryOptionEasyPost, error) {
	result, err := do.Edges.DeliveryOptionEasyPostOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryOptionEasyPost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) DeliveryOptionGLS(ctx context.Context) (*DeliveryOptionGLS, error) {
	result, err := do.Edges.DeliveryOptionGLSOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryOptionGLS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) DeliveryOptionPostNord(ctx context.Context) (*DeliveryOptionPostNord, error) {
	result, err := do.Edges.DeliveryOptionPostNordOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryOptionPostNord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) DeliveryOptionUSPS(ctx context.Context) (*DeliveryOptionUSPS, error) {
	result, err := do.Edges.DeliveryOptionUSPSOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryOptionUSPS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) DeliveryOptionBring(ctx context.Context) (*DeliveryOptionBring, error) {
	result, err := do.Edges.DeliveryOptionBringOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDeliveryOptionBring().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) ReturnPortals(ctx context.Context) (result []*ReturnPortal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedReturnPortals(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.ReturnPortalsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryReturnPortals().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) Colli(ctx context.Context) (result []*Colli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.ColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryColli().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) ReturnColli(ctx context.Context) (result []*ReturnColli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedReturnColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.ReturnColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryReturnColli().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) CarrierService(ctx context.Context) (*CarrierService, error) {
	result, err := do.Edges.CarrierServiceOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryCarrierService().Only(ctx)
	}
	return result, err
}

func (do *DeliveryOption) Connection(ctx context.Context) (*Connection, error) {
	result, err := do.Edges.ConnectionOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryConnection().Only(ctx)
	}
	return result, err
}

func (do *DeliveryOption) ConnectionDefault(ctx context.Context) (*Connection, error) {
	result, err := do.Edges.ConnectionDefaultOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryConnectionDefault().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) HypothesisTestDeliveryOptionGroupOne(ctx context.Context) (result []*HypothesisTestDeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedHypothesisTestDeliveryOptionGroupOne(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.HypothesisTestDeliveryOptionGroupOneOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryHypothesisTestDeliveryOptionGroupOne().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) HypothesisTestDeliveryOptionGroupTwo(ctx context.Context) (result []*HypothesisTestDeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedHypothesisTestDeliveryOptionGroupTwo(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.HypothesisTestDeliveryOptionGroupTwoOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryHypothesisTestDeliveryOptionGroupTwo().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) HypothesisTestDeliveryOptionLookup(ctx context.Context) (result []*HypothesisTestDeliveryOptionLookup, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedHypothesisTestDeliveryOptionLookup(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.HypothesisTestDeliveryOptionLookupOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryHypothesisTestDeliveryOptionLookup().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) ClickCollectLocation(ctx context.Context) (result []*Location, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedClickCollectLocation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.ClickCollectLocationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryClickCollectLocation().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) EmailClickCollectAtStore(ctx context.Context) (*EmailTemplate, error) {
	result, err := do.Edges.EmailClickCollectAtStoreOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryEmailClickCollectAtStore().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (do *DeliveryOption) Consolidation(ctx context.Context) (result []*Consolidation, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = do.NamedConsolidation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = do.Edges.ConsolidationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = do.QueryConsolidation().All(ctx)
	}
	return result, err
}

func (do *DeliveryOption) DefaultPackaging(ctx context.Context) (*Packaging, error) {
	result, err := do.Edges.DefaultPackagingOrErr()
	if IsNotLoaded(err) {
		result, err = do.QueryDefaultPackaging().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dob *DeliveryOptionBring) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := dob.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = dob.QueryTenant().Only(ctx)
	}
	return result, err
}

func (dob *DeliveryOptionBring) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := dob.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = dob.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (dob *DeliveryOptionBring) CarrierAdditionalServiceBring(ctx context.Context) (result []*CarrierAdditionalServiceBring, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dob.NamedCarrierAdditionalServiceBring(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dob.Edges.CarrierAdditionalServiceBringOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dob.QueryCarrierAdditionalServiceBring().All(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDAO) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := dod.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = dod.QueryTenant().Only(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDAO) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := dod.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = dod.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDAO) CarrierAdditionalServiceDAO(ctx context.Context) (result []*CarrierAdditionalServiceDAO, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dod.NamedCarrierAdditionalServiceDAO(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dod.Edges.CarrierAdditionalServiceDAOOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dod.QueryCarrierAdditionalServiceDAO().All(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDF) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := dod.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = dod.QueryTenant().Only(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDF) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := dod.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = dod.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDF) CarrierAdditionalServiceDF(ctx context.Context) (result []*CarrierAdditionalServiceDF, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dod.NamedCarrierAdditionalServiceDF(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dod.Edges.CarrierAdditionalServiceDFOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dod.QueryCarrierAdditionalServiceDF().All(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDSV) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := dod.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = dod.QueryTenant().Only(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDSV) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := dod.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = dod.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (dod *DeliveryOptionDSV) CarrierAdditionalServiceDSV(ctx context.Context) (result []*CarrierAdditionalServiceDSV, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dod.NamedCarrierAdditionalServiceDSV(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dod.Edges.CarrierAdditionalServiceDSVOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dod.QueryCarrierAdditionalServiceDSV().All(ctx)
	}
	return result, err
}

func (doep *DeliveryOptionEasyPost) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := doep.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = doep.QueryTenant().Only(ctx)
	}
	return result, err
}

func (doep *DeliveryOptionEasyPost) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := doep.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = doep.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (doep *DeliveryOptionEasyPost) CarrierAddServEasyPost(ctx context.Context) (result []*CarrierAdditionalServiceEasyPost, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = doep.NamedCarrierAddServEasyPost(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = doep.Edges.CarrierAddServEasyPostOrErr()
	}
	if IsNotLoaded(err) {
		result, err = doep.QueryCarrierAddServEasyPost().All(ctx)
	}
	return result, err
}

func (dog *DeliveryOptionGLS) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := dog.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = dog.QueryTenant().Only(ctx)
	}
	return result, err
}

func (dog *DeliveryOptionGLS) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := dog.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = dog.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (dog *DeliveryOptionGLS) CarrierAdditionalServiceGLS(ctx context.Context) (result []*CarrierAdditionalServiceGLS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dog.NamedCarrierAdditionalServiceGLS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dog.Edges.CarrierAdditionalServiceGLSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dog.QueryCarrierAdditionalServiceGLS().All(ctx)
	}
	return result, err
}

func (dopn *DeliveryOptionPostNord) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := dopn.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = dopn.QueryTenant().Only(ctx)
	}
	return result, err
}

func (dopn *DeliveryOptionPostNord) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := dopn.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = dopn.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (dopn *DeliveryOptionPostNord) CarrierAddServPostNord(ctx context.Context) (result []*CarrierAdditionalServicePostNord, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dopn.NamedCarrierAddServPostNord(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dopn.Edges.CarrierAddServPostNordOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dopn.QueryCarrierAddServPostNord().All(ctx)
	}
	return result, err
}

func (dou *DeliveryOptionUSPS) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := dou.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = dou.QueryTenant().Only(ctx)
	}
	return result, err
}

func (dou *DeliveryOptionUSPS) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := dou.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = dou.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (dou *DeliveryOptionUSPS) CarrierAdditionalServiceUSPS(ctx context.Context) (result []*CarrierAdditionalServiceUSPS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dou.NamedCarrierAdditionalServiceUSPS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dou.Edges.CarrierAdditionalServiceUSPSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dou.QueryCarrierAdditionalServiceUSPS().All(ctx)
	}
	return result, err
}

func (dr *DeliveryRule) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := dr.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QueryTenant().Only(ctx)
	}
	return result, err
}

func (dr *DeliveryRule) DeliveryRuleConstraintGroup(ctx context.Context) (result []*DeliveryRuleConstraintGroup, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dr.NamedDeliveryRuleConstraintGroup(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dr.Edges.DeliveryRuleConstraintGroupOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dr.QueryDeliveryRuleConstraintGroup().All(ctx)
	}
	return result, err
}

func (dr *DeliveryRule) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := dr.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QueryDeliveryOption().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dr *DeliveryRule) Country(ctx context.Context) (result []*Country, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = dr.NamedCountry(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = dr.Edges.CountryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = dr.QueryCountry().All(ctx)
	}
	return result, err
}

func (dr *DeliveryRule) Currency(ctx context.Context) (*Currency, error) {
	result, err := dr.Edges.CurrencyOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QueryCurrency().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (drc *DeliveryRuleConstraint) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := drc.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = drc.QueryTenant().Only(ctx)
	}
	return result, err
}

func (drc *DeliveryRuleConstraint) DeliveryRuleConstraintGroup(ctx context.Context) (*DeliveryRuleConstraintGroup, error) {
	result, err := drc.Edges.DeliveryRuleConstraintGroupOrErr()
	if IsNotLoaded(err) {
		result, err = drc.QueryDeliveryRuleConstraintGroup().Only(ctx)
	}
	return result, err
}

func (drcg *DeliveryRuleConstraintGroup) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := drcg.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = drcg.QueryTenant().Only(ctx)
	}
	return result, err
}

func (drcg *DeliveryRuleConstraintGroup) DeliveryRuleConstraints(ctx context.Context) (result []*DeliveryRuleConstraint, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = drcg.NamedDeliveryRuleConstraints(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = drcg.Edges.DeliveryRuleConstraintsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = drcg.QueryDeliveryRuleConstraints().All(ctx)
	}
	return result, err
}

func (drcg *DeliveryRuleConstraintGroup) DeliveryRule(ctx context.Context) (*DeliveryRule, error) {
	result, err := drcg.Edges.DeliveryRuleOrErr()
	if IsNotLoaded(err) {
		result, err = drcg.QueryDeliveryRule().Only(ctx)
	}
	return result, err
}

func (d *Document) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := d.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryTenant().Only(ctx)
	}
	return result, err
}

func (d *Document) CarrierBrand(ctx context.Context) (*CarrierBrand, error) {
	result, err := d.Edges.CarrierBrandOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryCarrierBrand().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) ConnectionPackingSlip(ctx context.Context) (result []*Connection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedConnectionPackingSlip(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.ConnectionPackingSlipOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryConnectionPackingSlip().All(ctx)
	}
	return result, err
}

func (df *DocumentFile) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := df.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = df.QueryTenant().Only(ctx)
	}
	return result, err
}

func (df *DocumentFile) Colli(ctx context.Context) (*Colli, error) {
	result, err := df.Edges.ColliOrErr()
	if IsNotLoaded(err) {
		result, err = df.QueryColli().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (df *DocumentFile) ShipmentParcel(ctx context.Context) (*ShipmentParcel, error) {
	result, err := df.Edges.ShipmentParcelOrErr()
	if IsNotLoaded(err) {
		result, err = df.QueryShipmentParcel().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (et *EmailTemplate) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := et.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = et.QueryTenant().Only(ctx)
	}
	return result, err
}

func (et *EmailTemplate) ReturnPortalConfirmationLabel(ctx context.Context) (result []*ReturnPortal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = et.NamedReturnPortalConfirmationLabel(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = et.Edges.ReturnPortalConfirmationLabelOrErr()
	}
	if IsNotLoaded(err) {
		result, err = et.QueryReturnPortalConfirmationLabel().All(ctx)
	}
	return result, err
}

func (et *EmailTemplate) ReturnPortalConfirmationQrCode(ctx context.Context) (result []*ReturnPortal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = et.NamedReturnPortalConfirmationQrCode(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = et.Edges.ReturnPortalConfirmationQrCodeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = et.QueryReturnPortalConfirmationQrCode().All(ctx)
	}
	return result, err
}

func (et *EmailTemplate) ReturnPortalReceived(ctx context.Context) (result []*ReturnPortal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = et.NamedReturnPortalReceived(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = et.Edges.ReturnPortalReceivedOrErr()
	}
	if IsNotLoaded(err) {
		result, err = et.QueryReturnPortalReceived().All(ctx)
	}
	return result, err
}

func (et *EmailTemplate) ReturnPortalAccepted(ctx context.Context) (result []*ReturnPortal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = et.NamedReturnPortalAccepted(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = et.Edges.ReturnPortalAcceptedOrErr()
	}
	if IsNotLoaded(err) {
		result, err = et.QueryReturnPortalAccepted().All(ctx)
	}
	return result, err
}

func (et *EmailTemplate) DeliveryOptionClickCollectAtStore(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = et.NamedDeliveryOptionClickCollectAtStore(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = et.Edges.DeliveryOptionClickCollectAtStoreOrErr()
	}
	if IsNotLoaded(err) {
		result, err = et.QueryDeliveryOptionClickCollectAtStore().All(ctx)
	}
	return result, err
}

func (et *EmailTemplate) Notifications(ctx context.Context) (result []*Notification, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = et.NamedNotifications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = et.Edges.NotificationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = et.QueryNotifications().All(ctx)
	}
	return result, err
}

func (ht *HypothesisTest) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := ht.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = ht.QueryTenant().Only(ctx)
	}
	return result, err
}

func (ht *HypothesisTest) HypothesisTestDeliveryOption(ctx context.Context) (*HypothesisTestDeliveryOption, error) {
	result, err := ht.Edges.HypothesisTestDeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = ht.QueryHypothesisTestDeliveryOption().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ht *HypothesisTest) Connection(ctx context.Context) (*Connection, error) {
	result, err := ht.Edges.ConnectionOrErr()
	if IsNotLoaded(err) {
		result, err = ht.QueryConnection().Only(ctx)
	}
	return result, err
}

func (htdo *HypothesisTestDeliveryOption) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := htdo.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = htdo.QueryTenant().Only(ctx)
	}
	return result, err
}

func (htdo *HypothesisTestDeliveryOption) HypothesisTest(ctx context.Context) (*HypothesisTest, error) {
	result, err := htdo.Edges.HypothesisTestOrErr()
	if IsNotLoaded(err) {
		result, err = htdo.QueryHypothesisTest().Only(ctx)
	}
	return result, err
}

func (htdo *HypothesisTestDeliveryOption) HypothesisTestDeliveryOptionRequest(ctx context.Context) (result []*HypothesisTestDeliveryOptionRequest, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = htdo.NamedHypothesisTestDeliveryOptionRequest(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = htdo.Edges.HypothesisTestDeliveryOptionRequestOrErr()
	}
	if IsNotLoaded(err) {
		result, err = htdo.QueryHypothesisTestDeliveryOptionRequest().All(ctx)
	}
	return result, err
}

func (htdo *HypothesisTestDeliveryOption) DeliveryOptionGroupOne(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = htdo.NamedDeliveryOptionGroupOne(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = htdo.Edges.DeliveryOptionGroupOneOrErr()
	}
	if IsNotLoaded(err) {
		result, err = htdo.QueryDeliveryOptionGroupOne().All(ctx)
	}
	return result, err
}

func (htdo *HypothesisTestDeliveryOption) DeliveryOptionGroupTwo(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = htdo.NamedDeliveryOptionGroupTwo(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = htdo.Edges.DeliveryOptionGroupTwoOrErr()
	}
	if IsNotLoaded(err) {
		result, err = htdo.QueryDeliveryOptionGroupTwo().All(ctx)
	}
	return result, err
}

func (htdol *HypothesisTestDeliveryOptionLookup) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := htdol.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = htdol.QueryTenant().Only(ctx)
	}
	return result, err
}

func (htdol *HypothesisTestDeliveryOptionLookup) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := htdol.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = htdol.QueryDeliveryOption().Only(ctx)
	}
	return result, err
}

func (htdol *HypothesisTestDeliveryOptionLookup) HypothesisTestDeliveryOptionRequest(ctx context.Context) (*HypothesisTestDeliveryOptionRequest, error) {
	result, err := htdol.Edges.HypothesisTestDeliveryOptionRequestOrErr()
	if IsNotLoaded(err) {
		result, err = htdol.QueryHypothesisTestDeliveryOptionRequest().Only(ctx)
	}
	return result, err
}

func (htdor *HypothesisTestDeliveryOptionRequest) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := htdor.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = htdor.QueryTenant().Only(ctx)
	}
	return result, err
}

func (htdor *HypothesisTestDeliveryOptionRequest) HypothesisTestDeliveryOption(ctx context.Context) (*HypothesisTestDeliveryOption, error) {
	result, err := htdor.Edges.HypothesisTestDeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = htdor.QueryHypothesisTestDeliveryOption().Only(ctx)
	}
	return result, err
}

func (htdor *HypothesisTestDeliveryOptionRequest) Order(ctx context.Context) (*Order, error) {
	result, err := htdor.Edges.OrderOrErr()
	if IsNotLoaded(err) {
		result, err = htdor.QueryOrder().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (htdor *HypothesisTestDeliveryOptionRequest) HypothesisTestDeliveryOptionLookup(ctx context.Context) (result []*HypothesisTestDeliveryOptionLookup, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = htdor.NamedHypothesisTestDeliveryOptionLookup(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = htdor.Edges.HypothesisTestDeliveryOptionLookupOrErr()
	}
	if IsNotLoaded(err) {
		result, err = htdor.QueryHypothesisTestDeliveryOptionLookup().All(ctx)
	}
	return result, err
}

func (ii *InventoryItem) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := ii.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = ii.QueryTenant().Only(ctx)
	}
	return result, err
}

func (ii *InventoryItem) CountryHarmonizedCode(ctx context.Context) (result []*CountryHarmonizedCode, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ii.NamedCountryHarmonizedCode(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ii.Edges.CountryHarmonizedCodeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ii.QueryCountryHarmonizedCode().All(ctx)
	}
	return result, err
}

func (ii *InventoryItem) CountryOfOrigin(ctx context.Context) (*Country, error) {
	result, err := ii.Edges.CountryOfOriginOrErr()
	if IsNotLoaded(err) {
		result, err = ii.QueryCountryOfOrigin().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ii *InventoryItem) ProductVariant(ctx context.Context) (*ProductVariant, error) {
	result, err := ii.Edges.ProductVariantOrErr()
	if IsNotLoaded(err) {
		result, err = ii.QueryProductVariant().Only(ctx)
	}
	return result, err
}

func (l *Language) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryUsers().All(ctx)
	}
	return result, err
}

func (l *Language) Language(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedLanguage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.LanguageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryLanguage().All(ctx)
	}
	return result, err
}

func (l *Location) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := l.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryTenant().Only(ctx)
	}
	return result, err
}

func (l *Location) Address(ctx context.Context) (*Address, error) {
	result, err := l.Edges.AddressOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryAddress().Only(ctx)
	}
	return result, err
}

func (l *Location) LocationTags(ctx context.Context) (result []*LocationTag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedLocationTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.LocationTagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryLocationTags().All(ctx)
	}
	return result, err
}

func (l *Location) SenderConnection(ctx context.Context) (result []*Connection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedSenderConnection(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.SenderConnectionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QuerySenderConnection().All(ctx)
	}
	return result, err
}

func (l *Location) PickupConnection(ctx context.Context) (result []*Connection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedPickupConnection(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.PickupConnectionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryPickupConnection().All(ctx)
	}
	return result, err
}

func (l *Location) ReturnConnection(ctx context.Context) (result []*Connection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedReturnConnection(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.ReturnConnectionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryReturnConnection().All(ctx)
	}
	return result, err
}

func (l *Location) SellerConnection(ctx context.Context) (result []*Connection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedSellerConnection(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.SellerConnectionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QuerySellerConnection().All(ctx)
	}
	return result, err
}

func (l *Location) ReturnPortal(ctx context.Context) (result []*ReturnPortal, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedReturnPortal(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.ReturnPortalOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryReturnPortal().All(ctx)
	}
	return result, err
}

func (l *Location) DeliveryOption(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedDeliveryOption(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.DeliveryOptionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryDeliveryOption().All(ctx)
	}
	return result, err
}

func (l *Location) Colli(ctx context.Context) (result []*Colli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.ColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryColli().All(ctx)
	}
	return result, err
}

func (lt *LocationTag) Location(ctx context.Context) (result []*Location, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = lt.NamedLocation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = lt.Edges.LocationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = lt.QueryLocation().All(ctx)
	}
	return result, err
}

func (n *Notification) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := n.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryTenant().Only(ctx)
	}
	return result, err
}

func (n *Notification) Connection(ctx context.Context) (*Connection, error) {
	result, err := n.Edges.ConnectionOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryConnection().Only(ctx)
	}
	return result, err
}

func (n *Notification) EmailTemplate(ctx context.Context) (*EmailTemplate, error) {
	result, err := n.Edges.EmailTemplateOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryEmailTemplate().Only(ctx)
	}
	return result, err
}

func (or *OTKRequests) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := or.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = or.QueryTenant().Only(ctx)
	}
	return result, err
}

func (or *OTKRequests) Users(ctx context.Context) (*User, error) {
	result, err := or.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = or.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Order) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := o.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryTenant().Only(ctx)
	}
	return result, err
}

func (o *Order) OrderHistory(ctx context.Context) (result []*OrderHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedOrderHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.OrderHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryOrderHistory().All(ctx)
	}
	return result, err
}

func (o *Order) Connection(ctx context.Context) (*Connection, error) {
	result, err := o.Edges.ConnectionOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryConnection().Only(ctx)
	}
	return result, err
}

func (o *Order) Colli(ctx context.Context) (result []*Colli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryColli().All(ctx)
	}
	return result, err
}

func (o *Order) ReturnColli(ctx context.Context) (result []*ReturnColli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedReturnColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ReturnColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryReturnColli().All(ctx)
	}
	return result, err
}

func (o *Order) HypothesisTestDeliveryOptionRequest(ctx context.Context) (*HypothesisTestDeliveryOptionRequest, error) {
	result, err := o.Edges.HypothesisTestDeliveryOptionRequestOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryHypothesisTestDeliveryOptionRequest().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Order) Pallet(ctx context.Context) (*Pallet, error) {
	result, err := o.Edges.PalletOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryPallet().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (o *Order) Consolidation(ctx context.Context) (*Consolidation, error) {
	result, err := o.Edges.ConsolidationOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryConsolidation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (oh *OrderHistory) ChangeHistory(ctx context.Context) (*ChangeHistory, error) {
	result, err := oh.Edges.ChangeHistoryOrErr()
	if IsNotLoaded(err) {
		result, err = oh.QueryChangeHistory().Only(ctx)
	}
	return result, err
}

func (oh *OrderHistory) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := oh.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = oh.QueryTenant().Only(ctx)
	}
	return result, err
}

func (oh *OrderHistory) Order(ctx context.Context) (*Order, error) {
	result, err := oh.Edges.OrderOrErr()
	if IsNotLoaded(err) {
		result, err = oh.QueryOrder().Only(ctx)
	}
	return result, err
}

func (ol *OrderLine) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := ol.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = ol.QueryTenant().Only(ctx)
	}
	return result, err
}

func (ol *OrderLine) ProductVariant(ctx context.Context) (*ProductVariant, error) {
	result, err := ol.Edges.ProductVariantOrErr()
	if IsNotLoaded(err) {
		result, err = ol.QueryProductVariant().Only(ctx)
	}
	return result, err
}

func (ol *OrderLine) Colli(ctx context.Context) (*Colli, error) {
	result, err := ol.Edges.ColliOrErr()
	if IsNotLoaded(err) {
		result, err = ol.QueryColli().Only(ctx)
	}
	return result, err
}

func (ol *OrderLine) ReturnOrderLine(ctx context.Context) (result []*ReturnOrderLine, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ol.NamedReturnOrderLine(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ol.Edges.ReturnOrderLineOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ol.QueryReturnOrderLine().All(ctx)
	}
	return result, err
}

func (ol *OrderLine) Currency(ctx context.Context) (*Currency, error) {
	result, err := ol.Edges.CurrencyOrErr()
	if IsNotLoaded(err) {
		result, err = ol.QueryCurrency().Only(ctx)
	}
	return result, err
}

func (os *OrderSender) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := os.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = os.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pa *Packaging) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pa.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pa *Packaging) ShipmentParcel(ctx context.Context) (result []*ShipmentParcel, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedShipmentParcel(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ShipmentParcelOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryShipmentParcel().All(ctx)
	}
	return result, err
}

func (pa *Packaging) Pallet(ctx context.Context) (result []*Pallet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedPallet(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.PalletOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryPallet().All(ctx)
	}
	return result, err
}

func (pa *Packaging) Colli(ctx context.Context) (result []*Colli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryColli().All(ctx)
	}
	return result, err
}

func (pa *Packaging) ReturnColli(ctx context.Context) (result []*ReturnColli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedReturnColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.ReturnColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryReturnColli().All(ctx)
	}
	return result, err
}

func (pa *Packaging) PackagingDF(ctx context.Context) (*PackagingDF, error) {
	result, err := pa.Edges.PackagingDFOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryPackagingDF().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Packaging) PackagingUSPS(ctx context.Context) (*PackagingUSPS, error) {
	result, err := pa.Edges.PackagingUSPSOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryPackagingUSPS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Packaging) CarrierBrand(ctx context.Context) (*CarrierBrand, error) {
	result, err := pa.Edges.CarrierBrandOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryCarrierBrand().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Packaging) DeliveryOption(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedDeliveryOption(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.DeliveryOptionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryDeliveryOption().All(ctx)
	}
	return result, err
}

func (pd *PackagingDF) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pd.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pd.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pd *PackagingDF) Packaging(ctx context.Context) (*Packaging, error) {
	result, err := pd.Edges.PackagingOrErr()
	if IsNotLoaded(err) {
		result, err = pd.QueryPackaging().Only(ctx)
	}
	return result, err
}

func (pu *PackagingUSPS) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pu.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pu.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pu *PackagingUSPS) Packaging(ctx context.Context) (*Packaging, error) {
	result, err := pu.Edges.PackagingOrErr()
	if IsNotLoaded(err) {
		result, err = pu.QueryPackaging().Only(ctx)
	}
	return result, err
}

func (pu *PackagingUSPS) PackagingUSPSRateIndicator(ctx context.Context) (*PackagingUSPSRateIndicator, error) {
	result, err := pu.Edges.PackagingUSPSRateIndicatorOrErr()
	if IsNotLoaded(err) {
		result, err = pu.QueryPackagingUSPSRateIndicator().Only(ctx)
	}
	return result, err
}

func (pu *PackagingUSPS) PackagingUSPSProcessingCategory(ctx context.Context) (*PackagingUSPSProcessingCategory, error) {
	result, err := pu.Edges.PackagingUSPSProcessingCategoryOrErr()
	if IsNotLoaded(err) {
		result, err = pu.QueryPackagingUSPSProcessingCategory().Only(ctx)
	}
	return result, err
}

func (puri *PackagingUSPSRateIndicator) PackagingUSPS(ctx context.Context) (result []*PackagingUSPS, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = puri.NamedPackagingUSPS(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = puri.Edges.PackagingUSPSOrErr()
	}
	if IsNotLoaded(err) {
		result, err = puri.QueryPackagingUSPS().All(ctx)
	}
	return result, err
}

func (pa *Pallet) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pa.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pa *Pallet) Orders(ctx context.Context) (result []*Order, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedOrders(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.OrdersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryOrders().All(ctx)
	}
	return result, err
}

func (pa *Pallet) Packaging(ctx context.Context) (*Packaging, error) {
	result, err := pa.Edges.PackagingOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryPackaging().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Pallet) Consolidation(ctx context.Context) (*Consolidation, error) {
	result, err := pa.Edges.ConsolidationOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryConsolidation().Only(ctx)
	}
	return result, err
}

func (pa *Pallet) ShipmentPallet(ctx context.Context) (*ShipmentPallet, error) {
	result, err := pa.Edges.ShipmentPalletOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryShipmentPallet().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pa *Pallet) CancelledShipmentPallet(ctx context.Context) (result []*ShipmentPallet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pa.NamedCancelledShipmentPallet(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pa.Edges.CancelledShipmentPalletOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pa.QueryCancelledShipmentPallet().All(ctx)
	}
	return result, err
}

func (ps *ParcelShop) ParcelShopDAO(ctx context.Context) (*ParcelShopDAO, error) {
	result, err := ps.Edges.ParcelShopDAOOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryParcelShopDAO().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ParcelShop) ParcelShopPostNord(ctx context.Context) (*ParcelShopPostNord, error) {
	result, err := ps.Edges.ParcelShopPostNordOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryParcelShopPostNord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ParcelShop) ParcelShopGLS(ctx context.Context) (*ParcelShopGLS, error) {
	result, err := ps.Edges.ParcelShopGLSOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryParcelShopGLS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ParcelShop) ParcelShopBring(ctx context.Context) (*ParcelShopBring, error) {
	result, err := ps.Edges.ParcelShopBringOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryParcelShopBring().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *ParcelShop) CarrierBrand(ctx context.Context) (*CarrierBrand, error) {
	result, err := ps.Edges.CarrierBrandOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryCarrierBrand().Only(ctx)
	}
	return result, err
}

func (ps *ParcelShop) Address(ctx context.Context) (*AddressGlobal, error) {
	result, err := ps.Edges.AddressOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryAddress().Only(ctx)
	}
	return result, err
}

func (ps *ParcelShop) Colli(ctx context.Context) (result []*Colli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ps.NamedColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ps.Edges.ColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ps.QueryColli().All(ctx)
	}
	return result, err
}

func (ps *ParcelShop) BusinessHoursPeriod(ctx context.Context) (result []*BusinessHoursPeriod, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ps.NamedBusinessHoursPeriod(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ps.Edges.BusinessHoursPeriodOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ps.QueryBusinessHoursPeriod().All(ctx)
	}
	return result, err
}

func (psb *ParcelShopBring) ParcelShop(ctx context.Context) (*ParcelShop, error) {
	result, err := psb.Edges.ParcelShopOrErr()
	if IsNotLoaded(err) {
		result, err = psb.QueryParcelShop().Only(ctx)
	}
	return result, err
}

func (psb *ParcelShopBring) AddressDelivery(ctx context.Context) (*AddressGlobal, error) {
	result, err := psb.Edges.AddressDeliveryOrErr()
	if IsNotLoaded(err) {
		result, err = psb.QueryAddressDelivery().Only(ctx)
	}
	return result, err
}

func (psd *ParcelShopDAO) ParcelShop(ctx context.Context) (*ParcelShop, error) {
	result, err := psd.Edges.ParcelShopOrErr()
	if IsNotLoaded(err) {
		result, err = psd.QueryParcelShop().Only(ctx)
	}
	return result, err
}

func (psg *ParcelShopGLS) ParcelShop(ctx context.Context) (*ParcelShop, error) {
	result, err := psg.Edges.ParcelShopOrErr()
	if IsNotLoaded(err) {
		result, err = psg.QueryParcelShop().Only(ctx)
	}
	return result, err
}

func (pspn *ParcelShopPostNord) ParcelShop(ctx context.Context) (*ParcelShop, error) {
	result, err := pspn.Edges.ParcelShopOrErr()
	if IsNotLoaded(err) {
		result, err = pspn.QueryParcelShop().Only(ctx)
	}
	return result, err
}

func (pspn *ParcelShopPostNord) AddressDelivery(ctx context.Context) (*AddressGlobal, error) {
	result, err := pspn.Edges.AddressDeliveryOrErr()
	if IsNotLoaded(err) {
		result, err = pspn.QueryAddressDelivery().Only(ctx)
	}
	return result, err
}

func (pl *Plan) Tenant(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedTenant(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.TenantOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QueryTenant().All(ctx)
	}
	return result, err
}

func (pl *Plan) PlanHistoryPlan(ctx context.Context) (result []*PlanHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedPlanHistoryPlan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.PlanHistoryPlanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QueryPlanHistoryPlan().All(ctx)
	}
	return result, err
}

func (ph *PlanHistory) ChangeHistory(ctx context.Context) (*ChangeHistory, error) {
	result, err := ph.Edges.ChangeHistoryOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryChangeHistory().Only(ctx)
	}
	return result, err
}

func (ph *PlanHistory) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := ph.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryTenant().Only(ctx)
	}
	return result, err
}

func (ph *PlanHistory) ChangedBy(ctx context.Context) (*User, error) {
	result, err := ph.Edges.ChangedByOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryChangedBy().Only(ctx)
	}
	return result, err
}

func (ph *PlanHistory) ChangedFrom(ctx context.Context) (*Plan, error) {
	result, err := ph.Edges.ChangedFromOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryChangedFrom().Only(ctx)
	}
	return result, err
}

func (pj *PrintJob) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pj.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pj.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pj *PrintJob) Printer(ctx context.Context) (*Printer, error) {
	result, err := pj.Edges.PrinterOrErr()
	if IsNotLoaded(err) {
		result, err = pj.QueryPrinter().Only(ctx)
	}
	return result, err
}

func (pj *PrintJob) Colli(ctx context.Context) (*Colli, error) {
	result, err := pj.Edges.ColliOrErr()
	if IsNotLoaded(err) {
		result, err = pj.QueryColli().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pj *PrintJob) ShipmentParcel(ctx context.Context) (*ShipmentParcel, error) {
	result, err := pj.Edges.ShipmentParcelOrErr()
	if IsNotLoaded(err) {
		result, err = pj.QueryShipmentParcel().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Printer) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pr.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pr *Printer) Workstation(ctx context.Context) (*Workstation, error) {
	result, err := pr.Edges.WorkstationOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryWorkstation().Only(ctx)
	}
	return result, err
}

func (pr *Printer) PrintJobs(ctx context.Context) (result []*PrintJob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedPrintJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.PrintJobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryPrintJobs().All(ctx)
	}
	return result, err
}

func (pr *Product) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pr.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pr *Product) ProductTags(ctx context.Context) (result []*ProductTag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedProductTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ProductTagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryProductTags().All(ctx)
	}
	return result, err
}

func (pr *Product) ProductVariant(ctx context.Context) (result []*ProductVariant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedProductVariant(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ProductVariantOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryProductVariant().All(ctx)
	}
	return result, err
}

func (pr *Product) ProductImage(ctx context.Context) (result []*ProductImage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedProductImage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ProductImageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryProductImage().All(ctx)
	}
	return result, err
}

func (pi *ProductImage) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pi.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pi.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pi *ProductImage) Product(ctx context.Context) (*Product, error) {
	result, err := pi.Edges.ProductOrErr()
	if IsNotLoaded(err) {
		result, err = pi.QueryProduct().Only(ctx)
	}
	return result, err
}

func (pi *ProductImage) ProductVariant(ctx context.Context) (result []*ProductVariant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pi.NamedProductVariant(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pi.Edges.ProductVariantOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pi.QueryProductVariant().All(ctx)
	}
	return result, err
}

func (pt *ProductTag) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pt.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pt.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pt *ProductTag) Products(ctx context.Context) (result []*Product, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pt.NamedProducts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pt.Edges.ProductsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pt.QueryProducts().All(ctx)
	}
	return result, err
}

func (pv *ProductVariant) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pv.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pv.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pv *ProductVariant) Product(ctx context.Context) (*Product, error) {
	result, err := pv.Edges.ProductOrErr()
	if IsNotLoaded(err) {
		result, err = pv.QueryProduct().Only(ctx)
	}
	return result, err
}

func (pv *ProductVariant) OrderLines(ctx context.Context) (result []*OrderLine, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pv.NamedOrderLines(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pv.Edges.OrderLinesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pv.QueryOrderLines().All(ctx)
	}
	return result, err
}

func (pv *ProductVariant) ProductImage(ctx context.Context) (result []*ProductImage, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pv.NamedProductImage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pv.Edges.ProductImageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pv.QueryProductImage().All(ctx)
	}
	return result, err
}

func (pv *ProductVariant) InventoryItem(ctx context.Context) (*InventoryItem, error) {
	result, err := pv.Edges.InventoryItemOrErr()
	if IsNotLoaded(err) {
		result, err = pv.QueryInventoryItem().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rc *ReturnColli) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := rc.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryTenant().Only(ctx)
	}
	return result, err
}

func (rc *ReturnColli) Recipient(ctx context.Context) (*Address, error) {
	result, err := rc.Edges.RecipientOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryRecipient().Only(ctx)
	}
	return result, err
}

func (rc *ReturnColli) Sender(ctx context.Context) (*Address, error) {
	result, err := rc.Edges.SenderOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QuerySender().Only(ctx)
	}
	return result, err
}

func (rc *ReturnColli) Order(ctx context.Context) (*Order, error) {
	result, err := rc.Edges.OrderOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryOrder().Only(ctx)
	}
	return result, err
}

func (rc *ReturnColli) DeliveryOption(ctx context.Context) (*DeliveryOption, error) {
	result, err := rc.Edges.DeliveryOptionOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryDeliveryOption().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rc *ReturnColli) ReturnPortal(ctx context.Context) (*ReturnPortal, error) {
	result, err := rc.Edges.ReturnPortalOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryReturnPortal().Only(ctx)
	}
	return result, err
}

func (rc *ReturnColli) Packaging(ctx context.Context) (*Packaging, error) {
	result, err := rc.Edges.PackagingOrErr()
	if IsNotLoaded(err) {
		result, err = rc.QueryPackaging().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rc *ReturnColli) ReturnOrderLine(ctx context.Context) (result []*ReturnOrderLine, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rc.NamedReturnOrderLine(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rc.Edges.ReturnOrderLineOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rc.QueryReturnOrderLine().All(ctx)
	}
	return result, err
}

func (rc *ReturnColli) ReturnColliHistory(ctx context.Context) (result []*ReturnColliHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rc.NamedReturnColliHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rc.Edges.ReturnColliHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rc.QueryReturnColliHistory().All(ctx)
	}
	return result, err
}

func (rch *ReturnColliHistory) ChangeHistory(ctx context.Context) (*ChangeHistory, error) {
	result, err := rch.Edges.ChangeHistoryOrErr()
	if IsNotLoaded(err) {
		result, err = rch.QueryChangeHistory().Only(ctx)
	}
	return result, err
}

func (rch *ReturnColliHistory) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := rch.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = rch.QueryTenant().Only(ctx)
	}
	return result, err
}

func (rch *ReturnColliHistory) ReturnColli(ctx context.Context) (*ReturnColli, error) {
	result, err := rch.Edges.ReturnColliOrErr()
	if IsNotLoaded(err) {
		result, err = rch.QueryReturnColli().Only(ctx)
	}
	return result, err
}

func (rol *ReturnOrderLine) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := rol.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = rol.QueryTenant().Only(ctx)
	}
	return result, err
}

func (rol *ReturnOrderLine) ReturnColli(ctx context.Context) (*ReturnColli, error) {
	result, err := rol.Edges.ReturnColliOrErr()
	if IsNotLoaded(err) {
		result, err = rol.QueryReturnColli().Only(ctx)
	}
	return result, err
}

func (rol *ReturnOrderLine) OrderLine(ctx context.Context) (*OrderLine, error) {
	result, err := rol.Edges.OrderLineOrErr()
	if IsNotLoaded(err) {
		result, err = rol.QueryOrderLine().Only(ctx)
	}
	return result, err
}

func (rol *ReturnOrderLine) ReturnPortalClaim(ctx context.Context) (*ReturnPortalClaim, error) {
	result, err := rol.Edges.ReturnPortalClaimOrErr()
	if IsNotLoaded(err) {
		result, err = rol.QueryReturnPortalClaim().Only(ctx)
	}
	return result, err
}

func (rp *ReturnPortal) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := rp.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryTenant().Only(ctx)
	}
	return result, err
}

func (rp *ReturnPortal) ReturnPortalClaim(ctx context.Context) (result []*ReturnPortalClaim, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rp.NamedReturnPortalClaim(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rp.Edges.ReturnPortalClaimOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rp.QueryReturnPortalClaim().All(ctx)
	}
	return result, err
}

func (rp *ReturnPortal) ReturnLocation(ctx context.Context) (result []*Location, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rp.NamedReturnLocation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rp.Edges.ReturnLocationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rp.QueryReturnLocation().All(ctx)
	}
	return result, err
}

func (rp *ReturnPortal) DeliveryOptions(ctx context.Context) (result []*DeliveryOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rp.NamedDeliveryOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rp.Edges.DeliveryOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rp.QueryDeliveryOptions().All(ctx)
	}
	return result, err
}

func (rp *ReturnPortal) Connection(ctx context.Context) (*Connection, error) {
	result, err := rp.Edges.ConnectionOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryConnection().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ReturnPortal) EmailConfirmationLabel(ctx context.Context) (*EmailTemplate, error) {
	result, err := rp.Edges.EmailConfirmationLabelOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryEmailConfirmationLabel().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ReturnPortal) EmailConfirmationQrCode(ctx context.Context) (*EmailTemplate, error) {
	result, err := rp.Edges.EmailConfirmationQrCodeOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryEmailConfirmationQrCode().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ReturnPortal) EmailReceived(ctx context.Context) (*EmailTemplate, error) {
	result, err := rp.Edges.EmailReceivedOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryEmailReceived().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ReturnPortal) EmailAccepted(ctx context.Context) (*EmailTemplate, error) {
	result, err := rp.Edges.EmailAcceptedOrErr()
	if IsNotLoaded(err) {
		result, err = rp.QueryEmailAccepted().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rp *ReturnPortal) ReturnColli(ctx context.Context) (result []*ReturnColli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rp.NamedReturnColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rp.Edges.ReturnColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rp.QueryReturnColli().All(ctx)
	}
	return result, err
}

func (rpc *ReturnPortalClaim) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := rpc.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = rpc.QueryTenant().Only(ctx)
	}
	return result, err
}

func (rpc *ReturnPortalClaim) ReturnPortal(ctx context.Context) (*ReturnPortal, error) {
	result, err := rpc.Edges.ReturnPortalOrErr()
	if IsNotLoaded(err) {
		result, err = rpc.QueryReturnPortal().Only(ctx)
	}
	return result, err
}

func (rpc *ReturnPortalClaim) ReturnLocation(ctx context.Context) (*Location, error) {
	result, err := rpc.Edges.ReturnLocationOrErr()
	if IsNotLoaded(err) {
		result, err = rpc.QueryReturnLocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rpc *ReturnPortalClaim) ReturnOrderLine(ctx context.Context) (result []*ReturnOrderLine, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rpc.NamedReturnOrderLine(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rpc.Edges.ReturnOrderLineOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rpc.QueryReturnOrderLine().All(ctx)
	}
	return result, err
}

func (sg *SeatGroup) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sg.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sg.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sg *SeatGroup) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sg.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sg.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sg.QueryUser().All(ctx)
	}
	return result, err
}

func (sg *SeatGroup) AssignedAccessRight(ctx context.Context) (result []*AccessRight, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sg.NamedAssignedAccessRight(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sg.Edges.AssignedAccessRightOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sg.QueryAssignedAccessRight().All(ctx)
	}
	return result, err
}

func (sg *SeatGroup) SeatGroupAccessRight(ctx context.Context) (result []*SeatGroupAccessRight, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sg.NamedSeatGroupAccessRight(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sg.Edges.SeatGroupAccessRightOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sg.QuerySeatGroupAccessRight().All(ctx)
	}
	return result, err
}

func (sgar *SeatGroupAccessRight) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sgar.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sgar.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sgar *SeatGroupAccessRight) AccessRight(ctx context.Context) (*AccessRight, error) {
	result, err := sgar.Edges.AccessRightOrErr()
	if IsNotLoaded(err) {
		result, err = sgar.QueryAccessRight().Only(ctx)
	}
	return result, err
}

func (sgar *SeatGroupAccessRight) SeatGroup(ctx context.Context) (*SeatGroup, error) {
	result, err := sgar.Edges.SeatGroupOrErr()
	if IsNotLoaded(err) {
		result, err = sgar.QuerySeatGroup().Only(ctx)
	}
	return result, err
}

func (s *Shipment) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := s.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryTenant().Only(ctx)
	}
	return result, err
}

func (s *Shipment) Carrier(ctx context.Context) (*Carrier, error) {
	result, err := s.Edges.CarrierOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryCarrier().Only(ctx)
	}
	return result, err
}

func (s *Shipment) ShipmentHistory(ctx context.Context) (result []*ShipmentHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedShipmentHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ShipmentHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentHistory().All(ctx)
	}
	return result, err
}

func (s *Shipment) ShipmentBring(ctx context.Context) (*ShipmentBring, error) {
	result, err := s.Edges.ShipmentBringOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentBring().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) ShipmentDAO(ctx context.Context) (*ShipmentDAO, error) {
	result, err := s.Edges.ShipmentDAOOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentDAO().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) ShipmentDF(ctx context.Context) (*ShipmentDF, error) {
	result, err := s.Edges.ShipmentDFOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentDF().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) ShipmentDSV(ctx context.Context) (*ShipmentDSV, error) {
	result, err := s.Edges.ShipmentDSVOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentDSV().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) ShipmentEasyPost(ctx context.Context) (*ShipmentEasyPost, error) {
	result, err := s.Edges.ShipmentEasyPostOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentEasyPost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) ShipmentPostNord(ctx context.Context) (*ShipmentPostNord, error) {
	result, err := s.Edges.ShipmentPostNordOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentPostNord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) ShipmentGLS(ctx context.Context) (*ShipmentGLS, error) {
	result, err := s.Edges.ShipmentGLSOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentGLS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) ShipmentUSPS(ctx context.Context) (*ShipmentUSPS, error) {
	result, err := s.Edges.ShipmentUSPSOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentUSPS().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) Consolidation(ctx context.Context) (*Consolidation, error) {
	result, err := s.Edges.ConsolidationOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryConsolidation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipment) OldConsolidation(ctx context.Context) (result []*Consolidation, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedOldConsolidation(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.OldConsolidationOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryOldConsolidation().All(ctx)
	}
	return result, err
}

func (s *Shipment) ShipmentParcel(ctx context.Context) (result []*ShipmentParcel, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedShipmentParcel(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ShipmentParcelOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentParcel().All(ctx)
	}
	return result, err
}

func (s *Shipment) ShipmentPallet(ctx context.Context) (result []*ShipmentPallet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedShipmentPallet(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.ShipmentPalletOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryShipmentPallet().All(ctx)
	}
	return result, err
}

func (sb *ShipmentBring) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sb.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sb.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sb *ShipmentBring) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sb.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sb.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sd *ShipmentDAO) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sd.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sd.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sd *ShipmentDAO) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sd.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sd.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sd *ShipmentDF) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sd.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sd.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sd *ShipmentDF) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sd.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sd.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sd *ShipmentDSV) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sd.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sd.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sd *ShipmentDSV) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sd.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sd.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sep *ShipmentEasyPost) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sep.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sep.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sep *ShipmentEasyPost) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sep.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sep.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sg *ShipmentGLS) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sg.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sg.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sg *ShipmentGLS) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sg.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sg.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sh *ShipmentHistory) ChangeHistory(ctx context.Context) (*ChangeHistory, error) {
	result, err := sh.Edges.ChangeHistoryOrErr()
	if IsNotLoaded(err) {
		result, err = sh.QueryChangeHistory().Only(ctx)
	}
	return result, err
}

func (sh *ShipmentHistory) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sh.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sh.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sh *ShipmentHistory) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sh.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sh.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sp *ShipmentPallet) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sp.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sp *ShipmentPallet) Pallet(ctx context.Context) (*Pallet, error) {
	result, err := sp.Edges.PalletOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryPallet().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sp *ShipmentPallet) OldPallet(ctx context.Context) (result []*Pallet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sp.NamedOldPallet(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sp.Edges.OldPalletOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sp.QueryOldPallet().All(ctx)
	}
	return result, err
}

func (sp *ShipmentPallet) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sp.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sp *ShipmentParcel) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := sp.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryTenant().Only(ctx)
	}
	return result, err
}

func (sp *ShipmentParcel) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := sp.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryShipment().Only(ctx)
	}
	return result, err
}

func (sp *ShipmentParcel) Colli(ctx context.Context) (*Colli, error) {
	result, err := sp.Edges.ColliOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryColli().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sp *ShipmentParcel) OldColli(ctx context.Context) (result []*Colli, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sp.NamedOldColli(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sp.Edges.OldColliOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sp.QueryOldColli().All(ctx)
	}
	return result, err
}

func (sp *ShipmentParcel) WorkspaceRecentScan(ctx context.Context) (result []*WorkspaceRecentScan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sp.NamedWorkspaceRecentScan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sp.Edges.WorkspaceRecentScanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sp.QueryWorkspaceRecentScan().All(ctx)
	}
	return result, err
}

func (sp *ShipmentParcel) Packaging(ctx context.Context) (*Packaging, error) {
	result, err := sp.Edges.PackagingOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryPackaging().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sp *ShipmentParcel) PrintJob(ctx context.Context) (result []*PrintJob, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sp.NamedPrintJob(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sp.Edges.PrintJobOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sp.QueryPrintJob().All(ctx)
	}
	return result, err
}

func (sp *ShipmentParcel) DocumentFile(ctx context.Context) (*DocumentFile, error) {
	result, err := sp.Edges.DocumentFileOrErr()
	if IsNotLoaded(err) {
		result, err = sp.QueryDocumentFile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (spn *ShipmentPostNord) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := spn.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = spn.QueryTenant().Only(ctx)
	}
	return result, err
}

func (spn *ShipmentPostNord) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := spn.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = spn.QueryShipment().Only(ctx)
	}
	return result, err
}

func (su *ShipmentUSPS) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := su.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = su.QueryTenant().Only(ctx)
	}
	return result, err
}

func (su *ShipmentUSPS) Shipment(ctx context.Context) (*Shipment, error) {
	result, err := su.Edges.ShipmentOrErr()
	if IsNotLoaded(err) {
		result, err = su.QueryShipment().Only(ctx)
	}
	return result, err
}

func (so *SignupOptions) Users(ctx context.Context) (*User, error) {
	result, err := so.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = so.QueryUsers().Only(ctx)
	}
	return result, err
}

func (se *SystemEvents) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := se.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = se.QueryTenant().Only(ctx)
	}
	return result, err
}

func (t *Tenant) ConnectOptionCarriers(ctx context.Context) (result []*ConnectOptionCarrier, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedConnectOptionCarriers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ConnectOptionCarriersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryConnectOptionCarriers().All(ctx)
	}
	return result, err
}

func (t *Tenant) ConnectOptionPlatforms(ctx context.Context) (result []*ConnectOptionPlatform, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedConnectOptionPlatforms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ConnectOptionPlatformsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryConnectOptionPlatforms().All(ctx)
	}
	return result, err
}

func (t *Tenant) Plan(ctx context.Context) (*Plan, error) {
	result, err := t.Edges.PlanOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryPlan().Only(ctx)
	}
	return result, err
}

func (t *Tenant) CompanyAddress(ctx context.Context) (*Address, error) {
	result, err := t.Edges.CompanyAddressOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCompanyAddress().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tenant) DefaultLanguage(ctx context.Context) (*Language, error) {
	result, err := t.Edges.DefaultLanguageOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryDefaultLanguage().Only(ctx)
	}
	return result, err
}

func (t *Tenant) BillingContact(ctx context.Context) (*Contact, error) {
	result, err := t.Edges.BillingContactOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryBillingContact().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tenant) AdminContact(ctx context.Context) (*Contact, error) {
	result, err := t.Edges.AdminContactOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryAdminContact().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := u.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryTenant().Only(ctx)
	}
	return result, err
}

func (u *User) OtkRequests(ctx context.Context) (result []*OTKRequests, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedOtkRequests(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.OtkRequestsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryOtkRequests().All(ctx)
	}
	return result, err
}

func (u *User) SignupOptions(ctx context.Context) (*SignupOptions, error) {
	result, err := u.Edges.SignupOptionsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QuerySignupOptions().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Language(ctx context.Context) (*Language, error) {
	result, err := u.Edges.LanguageOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLanguage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) ChangeHistory(ctx context.Context) (result []*ChangeHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedChangeHistory(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ChangeHistoryOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryChangeHistory().All(ctx)
	}
	return result, err
}

func (u *User) PlanHistoryUser(ctx context.Context) (result []*PlanHistory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPlanHistoryUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PlanHistoryUserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPlanHistoryUser().All(ctx)
	}
	return result, err
}

func (u *User) APIToken(ctx context.Context) (result []*APIToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAPIToken(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.APITokenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAPIToken().All(ctx)
	}
	return result, err
}

func (u *User) SelectedWorkstation(ctx context.Context) (*Workstation, error) {
	result, err := u.Edges.SelectedWorkstationOrErr()
	if IsNotLoaded(err) {
		result, err = u.QuerySelectedWorkstation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) SeatGroup(ctx context.Context) (*SeatGroup, error) {
	result, err := u.Edges.SeatGroupOrErr()
	if IsNotLoaded(err) {
		result, err = u.QuerySeatGroup().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) WorkspaceRecentScan(ctx context.Context) (result []*WorkspaceRecentScan, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedWorkspaceRecentScan(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.WorkspaceRecentScanOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryWorkspaceRecentScan().All(ctx)
	}
	return result, err
}

func (us *UserSeat) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := us.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = us.QueryTenant().Only(ctx)
	}
	return result, err
}

func (wrs *WorkspaceRecentScan) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := wrs.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = wrs.QueryTenant().Only(ctx)
	}
	return result, err
}

func (wrs *WorkspaceRecentScan) ShipmentParcel(ctx context.Context) (*ShipmentParcel, error) {
	result, err := wrs.Edges.ShipmentParcelOrErr()
	if IsNotLoaded(err) {
		result, err = wrs.QueryShipmentParcel().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wrs *WorkspaceRecentScan) User(ctx context.Context) (*User, error) {
	result, err := wrs.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = wrs.QueryUser().Only(ctx)
	}
	return result, err
}

func (w *Workstation) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := w.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryTenant().Only(ctx)
	}
	return result, err
}

func (w *Workstation) Printer(ctx context.Context) (result []*Printer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedPrinter(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.PrinterOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryPrinter().All(ctx)
	}
	return result, err
}

func (w *Workstation) User(ctx context.Context) (*User, error) {
	result, err := w.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workstation) SelectedUser(ctx context.Context) (*User, error) {
	result, err := w.Edges.SelectedUserOrErr()
	if IsNotLoaded(err) {
		result, err = w.QuerySelectedUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}
