// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderLine is the model entity for the OrderLine schema.
type OrderLine struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice float64 `json:"unit_price,omitempty"`
	// Amount removed from unit_price*units for customs docs
	DiscountAllocationAmount float64 `json:"discount_allocation_amount,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Units holds the value of the "units" field.
	Units int `json:"units,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ProductVariantID holds the value of the "product_variant_id" field.
	ProductVariantID pulid.ID `json:"product_variant_id,omitempty"`
	// ColliID holds the value of the "colli_id" field.
	ColliID pulid.ID `json:"colli_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderLineQuery when eager-loading is set.
	Edges               OrderLineEdges `json:"edges"`
	order_line_currency *pulid.ID
	selectValues        sql.SelectValues
}

// OrderLineEdges holds the relations/edges for other nodes in the graph.
type OrderLineEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ProductVariant holds the value of the product_variant edge.
	ProductVariant *ProductVariant `json:"product_variant,omitempty"`
	// Colli holds the value of the colli edge.
	Colli *Colli `json:"colli,omitempty"`
	// ReturnOrderLine holds the value of the return_order_line edge.
	ReturnOrderLine []*ReturnOrderLine `json:"return_order_line,omitempty"`
	// Currency holds the value of the currency edge.
	Currency *Currency `json:"currency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedReturnOrderLine map[string][]*ReturnOrderLine
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderLineEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ProductVariantOrErr returns the ProductVariant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderLineEdges) ProductVariantOrErr() (*ProductVariant, error) {
	if e.ProductVariant != nil {
		return e.ProductVariant, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: productvariant.Label}
	}
	return nil, &NotLoadedError{edge: "product_variant"}
}

// ColliOrErr returns the Colli value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderLineEdges) ColliOrErr() (*Colli, error) {
	if e.Colli != nil {
		return e.Colli, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: colli.Label}
	}
	return nil, &NotLoadedError{edge: "colli"}
}

// ReturnOrderLineOrErr returns the ReturnOrderLine value or an error if the edge
// was not loaded in eager-loading.
func (e OrderLineEdges) ReturnOrderLineOrErr() ([]*ReturnOrderLine, error) {
	if e.loadedTypes[3] {
		return e.ReturnOrderLine, nil
	}
	return nil, &NotLoadedError{edge: "return_order_line"}
}

// CurrencyOrErr returns the Currency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderLineEdges) CurrencyOrErr() (*Currency, error) {
	if e.Currency != nil {
		return e.Currency, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: currency.Label}
	}
	return nil, &NotLoadedError{edge: "currency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderline.FieldID, orderline.FieldTenantID, orderline.FieldProductVariantID, orderline.FieldColliID:
			values[i] = new(pulid.ID)
		case orderline.FieldUnitPrice, orderline.FieldDiscountAllocationAmount:
			values[i] = new(sql.NullFloat64)
		case orderline.FieldUnits:
			values[i] = new(sql.NullInt64)
		case orderline.FieldExternalID:
			values[i] = new(sql.NullString)
		case orderline.FieldCreatedAt, orderline.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case orderline.ForeignKeys[0]: // order_line_currency
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderLine fields.
func (ol *OrderLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderline.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ol.ID = *value
			}
		case orderline.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				ol.TenantID = *value
			}
		case orderline.FieldUnitPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value.Valid {
				ol.UnitPrice = value.Float64
			}
		case orderline.FieldDiscountAllocationAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_allocation_amount", values[i])
			} else if value.Valid {
				ol.DiscountAllocationAmount = value.Float64
			}
		case orderline.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				ol.ExternalID = value.String
			}
		case orderline.FieldUnits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field units", values[i])
			} else if value.Valid {
				ol.Units = int(value.Int64)
			}
		case orderline.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ol.CreatedAt = value.Time
			}
		case orderline.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ol.UpdatedAt = value.Time
			}
		case orderline.FieldProductVariantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field product_variant_id", values[i])
			} else if value != nil {
				ol.ProductVariantID = *value
			}
		case orderline.FieldColliID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field colli_id", values[i])
			} else if value != nil {
				ol.ColliID = *value
			}
		case orderline.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field order_line_currency", values[i])
			} else if value.Valid {
				ol.order_line_currency = new(pulid.ID)
				*ol.order_line_currency = *value.S.(*pulid.ID)
			}
		default:
			ol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderLine.
// This includes values selected through modifiers, order, etc.
func (ol *OrderLine) Value(name string) (ent.Value, error) {
	return ol.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the OrderLine entity.
func (ol *OrderLine) QueryTenant() *TenantQuery {
	return NewOrderLineClient(ol.config).QueryTenant(ol)
}

// QueryProductVariant queries the "product_variant" edge of the OrderLine entity.
func (ol *OrderLine) QueryProductVariant() *ProductVariantQuery {
	return NewOrderLineClient(ol.config).QueryProductVariant(ol)
}

// QueryColli queries the "colli" edge of the OrderLine entity.
func (ol *OrderLine) QueryColli() *ColliQuery {
	return NewOrderLineClient(ol.config).QueryColli(ol)
}

// QueryReturnOrderLine queries the "return_order_line" edge of the OrderLine entity.
func (ol *OrderLine) QueryReturnOrderLine() *ReturnOrderLineQuery {
	return NewOrderLineClient(ol.config).QueryReturnOrderLine(ol)
}

// QueryCurrency queries the "currency" edge of the OrderLine entity.
func (ol *OrderLine) QueryCurrency() *CurrencyQuery {
	return NewOrderLineClient(ol.config).QueryCurrency(ol)
}

// Update returns a builder for updating this OrderLine.
// Note that you need to call OrderLine.Unwrap() before calling this method if this OrderLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (ol *OrderLine) Update() *OrderLineUpdateOne {
	return NewOrderLineClient(ol.config).UpdateOne(ol)
}

// Unwrap unwraps the OrderLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ol *OrderLine) Unwrap() *OrderLine {
	_tx, ok := ol.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderLine is not a transactional entity")
	}
	ol.config.driver = _tx.drv
	return ol
}

// String implements the fmt.Stringer.
func (ol *OrderLine) String() string {
	var builder strings.Builder
	builder.WriteString("OrderLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ol.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ol.TenantID))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", ol.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("discount_allocation_amount=")
	builder.WriteString(fmt.Sprintf("%v", ol.DiscountAllocationAmount))
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(ol.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("units=")
	builder.WriteString(fmt.Sprintf("%v", ol.Units))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ol.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ol.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("product_variant_id=")
	builder.WriteString(fmt.Sprintf("%v", ol.ProductVariantID))
	builder.WriteString(", ")
	builder.WriteString("colli_id=")
	builder.WriteString(fmt.Sprintf("%v", ol.ColliID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedReturnOrderLine returns the ReturnOrderLine named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ol *OrderLine) NamedReturnOrderLine(name string) ([]*ReturnOrderLine, error) {
	if ol.Edges.namedReturnOrderLine == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ol.Edges.namedReturnOrderLine[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ol *OrderLine) appendNamedReturnOrderLine(name string, edges ...*ReturnOrderLine) {
	if ol.Edges.namedReturnOrderLine == nil {
		ol.Edges.namedReturnOrderLine = make(map[string][]*ReturnOrderLine)
	}
	if len(edges) == 0 {
		ol.Edges.namedReturnOrderLine[name] = []*ReturnOrderLine{}
	} else {
		ol.Edges.namedReturnOrderLine[name] = append(ol.Edges.namedReturnOrderLine[name], edges...)
	}
}

// OrderLines is a parsable slice of OrderLine.
type OrderLines []*OrderLine
