// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierAdditionalServiceGLS is the model entity for the CarrierAdditionalServiceGLS schema.
type CarrierAdditionalServiceGLS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Mandatory holds the value of the "mandatory" field.
	Mandatory bool `json:"mandatory,omitempty"`
	// When false, only edge countries will validate on this consignor service
	AllCountriesConsignor bool `json:"all_countries_consignor,omitempty"`
	// When false, only edge countries will validate on this consignee service
	AllCountriesConsignee bool `json:"all_countries_consignee,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID string `json:"internal_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierAdditionalServiceGLSQuery when eager-loading is set.
	Edges                                              CarrierAdditionalServiceGLSEdges `json:"edges"`
	carrier_service_gls_carrier_additional_service_gls *pulid.ID
	selectValues                                       sql.SelectValues
}

// CarrierAdditionalServiceGLSEdges holds the relations/edges for other nodes in the graph.
type CarrierAdditionalServiceGLSEdges struct {
	// CarrierServiceGLS holds the value of the carrier_service_gls edge.
	CarrierServiceGLS *CarrierServiceGLS `json:"carrier_service_gls,omitempty"`
	// DeliveryOptionGLS holds the value of the delivery_option_gls edge.
	DeliveryOptionGLS []*DeliveryOptionGLS `json:"delivery_option_gls,omitempty"`
	// CountriesConsignee holds the value of the countries_consignee edge.
	CountriesConsignee []*Country `json:"countries_consignee,omitempty"`
	// CountriesConsignor holds the value of the countries_consignor edge.
	CountriesConsignor []*Country `json:"countries_consignor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedDeliveryOptionGLS  map[string][]*DeliveryOptionGLS
	namedCountriesConsignee map[string][]*Country
	namedCountriesConsignor map[string][]*Country
}

// CarrierServiceGLSOrErr returns the CarrierServiceGLS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierAdditionalServiceGLSEdges) CarrierServiceGLSOrErr() (*CarrierServiceGLS, error) {
	if e.CarrierServiceGLS != nil {
		return e.CarrierServiceGLS, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierservicegls.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_gls"}
}

// DeliveryOptionGLSOrErr returns the DeliveryOptionGLS value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceGLSEdges) DeliveryOptionGLSOrErr() ([]*DeliveryOptionGLS, error) {
	if e.loadedTypes[1] {
		return e.DeliveryOptionGLS, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option_gls"}
}

// CountriesConsigneeOrErr returns the CountriesConsignee value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceGLSEdges) CountriesConsigneeOrErr() ([]*Country, error) {
	if e.loadedTypes[2] {
		return e.CountriesConsignee, nil
	}
	return nil, &NotLoadedError{edge: "countries_consignee"}
}

// CountriesConsignorOrErr returns the CountriesConsignor value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceGLSEdges) CountriesConsignorOrErr() ([]*Country, error) {
	if e.loadedTypes[3] {
		return e.CountriesConsignor, nil
	}
	return nil, &NotLoadedError{edge: "countries_consignor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierAdditionalServiceGLS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrieradditionalservicegls.FieldID:
			values[i] = new(pulid.ID)
		case carrieradditionalservicegls.FieldMandatory, carrieradditionalservicegls.FieldAllCountriesConsignor, carrieradditionalservicegls.FieldAllCountriesConsignee:
			values[i] = new(sql.NullBool)
		case carrieradditionalservicegls.FieldLabel, carrieradditionalservicegls.FieldInternalID:
			values[i] = new(sql.NullString)
		case carrieradditionalservicegls.ForeignKeys[0]: // carrier_service_gls_carrier_additional_service_gls
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierAdditionalServiceGLS fields.
func (casg *CarrierAdditionalServiceGLS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrieradditionalservicegls.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				casg.ID = *value
			}
		case carrieradditionalservicegls.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				casg.Label = value.String
			}
		case carrieradditionalservicegls.FieldMandatory:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mandatory", values[i])
			} else if value.Valid {
				casg.Mandatory = value.Bool
			}
		case carrieradditionalservicegls.FieldAllCountriesConsignor:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field all_countries_consignor", values[i])
			} else if value.Valid {
				casg.AllCountriesConsignor = value.Bool
			}
		case carrieradditionalservicegls.FieldAllCountriesConsignee:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field all_countries_consignee", values[i])
			} else if value.Valid {
				casg.AllCountriesConsignee = value.Bool
			}
		case carrieradditionalservicegls.FieldInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				casg.InternalID = value.String
			}
		case carrieradditionalservicegls.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_service_gls_carrier_additional_service_gls", values[i])
			} else if value.Valid {
				casg.carrier_service_gls_carrier_additional_service_gls = new(pulid.ID)
				*casg.carrier_service_gls_carrier_additional_service_gls = *value.S.(*pulid.ID)
			}
		default:
			casg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierAdditionalServiceGLS.
// This includes values selected through modifiers, order, etc.
func (casg *CarrierAdditionalServiceGLS) Value(name string) (ent.Value, error) {
	return casg.selectValues.Get(name)
}

// QueryCarrierServiceGLS queries the "carrier_service_gls" edge of the CarrierAdditionalServiceGLS entity.
func (casg *CarrierAdditionalServiceGLS) QueryCarrierServiceGLS() *CarrierServiceGLSQuery {
	return NewCarrierAdditionalServiceGLSClient(casg.config).QueryCarrierServiceGLS(casg)
}

// QueryDeliveryOptionGLS queries the "delivery_option_gls" edge of the CarrierAdditionalServiceGLS entity.
func (casg *CarrierAdditionalServiceGLS) QueryDeliveryOptionGLS() *DeliveryOptionGLSQuery {
	return NewCarrierAdditionalServiceGLSClient(casg.config).QueryDeliveryOptionGLS(casg)
}

// QueryCountriesConsignee queries the "countries_consignee" edge of the CarrierAdditionalServiceGLS entity.
func (casg *CarrierAdditionalServiceGLS) QueryCountriesConsignee() *CountryQuery {
	return NewCarrierAdditionalServiceGLSClient(casg.config).QueryCountriesConsignee(casg)
}

// QueryCountriesConsignor queries the "countries_consignor" edge of the CarrierAdditionalServiceGLS entity.
func (casg *CarrierAdditionalServiceGLS) QueryCountriesConsignor() *CountryQuery {
	return NewCarrierAdditionalServiceGLSClient(casg.config).QueryCountriesConsignor(casg)
}

// Update returns a builder for updating this CarrierAdditionalServiceGLS.
// Note that you need to call CarrierAdditionalServiceGLS.Unwrap() before calling this method if this CarrierAdditionalServiceGLS
// was returned from a transaction, and the transaction was committed or rolled back.
func (casg *CarrierAdditionalServiceGLS) Update() *CarrierAdditionalServiceGLSUpdateOne {
	return NewCarrierAdditionalServiceGLSClient(casg.config).UpdateOne(casg)
}

// Unwrap unwraps the CarrierAdditionalServiceGLS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (casg *CarrierAdditionalServiceGLS) Unwrap() *CarrierAdditionalServiceGLS {
	_tx, ok := casg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierAdditionalServiceGLS is not a transactional entity")
	}
	casg.config.driver = _tx.drv
	return casg
}

// String implements the fmt.Stringer.
func (casg *CarrierAdditionalServiceGLS) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierAdditionalServiceGLS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", casg.ID))
	builder.WriteString("label=")
	builder.WriteString(casg.Label)
	builder.WriteString(", ")
	builder.WriteString("mandatory=")
	builder.WriteString(fmt.Sprintf("%v", casg.Mandatory))
	builder.WriteString(", ")
	builder.WriteString("all_countries_consignor=")
	builder.WriteString(fmt.Sprintf("%v", casg.AllCountriesConsignor))
	builder.WriteString(", ")
	builder.WriteString("all_countries_consignee=")
	builder.WriteString(fmt.Sprintf("%v", casg.AllCountriesConsignee))
	builder.WriteString(", ")
	builder.WriteString("internal_id=")
	builder.WriteString(casg.InternalID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryOptionGLS returns the DeliveryOptionGLS named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casg *CarrierAdditionalServiceGLS) NamedDeliveryOptionGLS(name string) ([]*DeliveryOptionGLS, error) {
	if casg.Edges.namedDeliveryOptionGLS == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casg.Edges.namedDeliveryOptionGLS[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casg *CarrierAdditionalServiceGLS) appendNamedDeliveryOptionGLS(name string, edges ...*DeliveryOptionGLS) {
	if casg.Edges.namedDeliveryOptionGLS == nil {
		casg.Edges.namedDeliveryOptionGLS = make(map[string][]*DeliveryOptionGLS)
	}
	if len(edges) == 0 {
		casg.Edges.namedDeliveryOptionGLS[name] = []*DeliveryOptionGLS{}
	} else {
		casg.Edges.namedDeliveryOptionGLS[name] = append(casg.Edges.namedDeliveryOptionGLS[name], edges...)
	}
}

// NamedCountriesConsignee returns the CountriesConsignee named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casg *CarrierAdditionalServiceGLS) NamedCountriesConsignee(name string) ([]*Country, error) {
	if casg.Edges.namedCountriesConsignee == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casg.Edges.namedCountriesConsignee[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casg *CarrierAdditionalServiceGLS) appendNamedCountriesConsignee(name string, edges ...*Country) {
	if casg.Edges.namedCountriesConsignee == nil {
		casg.Edges.namedCountriesConsignee = make(map[string][]*Country)
	}
	if len(edges) == 0 {
		casg.Edges.namedCountriesConsignee[name] = []*Country{}
	} else {
		casg.Edges.namedCountriesConsignee[name] = append(casg.Edges.namedCountriesConsignee[name], edges...)
	}
}

// NamedCountriesConsignor returns the CountriesConsignor named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casg *CarrierAdditionalServiceGLS) NamedCountriesConsignor(name string) ([]*Country, error) {
	if casg.Edges.namedCountriesConsignor == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casg.Edges.namedCountriesConsignor[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casg *CarrierAdditionalServiceGLS) appendNamedCountriesConsignor(name string, edges ...*Country) {
	if casg.Edges.namedCountriesConsignor == nil {
		casg.Edges.namedCountriesConsignor = make(map[string][]*Country)
	}
	if len(edges) == 0 {
		casg.Edges.namedCountriesConsignor[name] = []*Country{}
	} else {
		casg.Edges.namedCountriesConsignor[name] = append(casg.Edges.namedCountriesConsignor[name], edges...)
	}
}

// CarrierAdditionalServiceGLSs is a parsable slice of CarrierAdditionalServiceGLS.
type CarrierAdditionalServiceGLSs []*CarrierAdditionalServiceGLS
