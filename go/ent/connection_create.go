// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectionCreate is the builder for creating a Connection entity.
type ConnectionCreate struct {
	config
	mutation *ConnectionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cc *ConnectionCreate) SetTenantID(pu pulid.ID) *ConnectionCreate {
	cc.mutation.SetTenantID(pu)
	return cc
}

// SetName sets the "name" field.
func (cc *ConnectionCreate) SetName(s string) *ConnectionCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetSyncOrders sets the "sync_orders" field.
func (cc *ConnectionCreate) SetSyncOrders(b bool) *ConnectionCreate {
	cc.mutation.SetSyncOrders(b)
	return cc
}

// SetNillableSyncOrders sets the "sync_orders" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableSyncOrders(b *bool) *ConnectionCreate {
	if b != nil {
		cc.SetSyncOrders(*b)
	}
	return cc
}

// SetSyncProducts sets the "sync_products" field.
func (cc *ConnectionCreate) SetSyncProducts(b bool) *ConnectionCreate {
	cc.mutation.SetSyncProducts(b)
	return cc
}

// SetNillableSyncProducts sets the "sync_products" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableSyncProducts(b *bool) *ConnectionCreate {
	if b != nil {
		cc.SetSyncProducts(*b)
	}
	return cc
}

// SetFulfillAutomatically sets the "fulfill_automatically" field.
func (cc *ConnectionCreate) SetFulfillAutomatically(b bool) *ConnectionCreate {
	cc.mutation.SetFulfillAutomatically(b)
	return cc
}

// SetNillableFulfillAutomatically sets the "fulfill_automatically" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableFulfillAutomatically(b *bool) *ConnectionCreate {
	if b != nil {
		cc.SetFulfillAutomatically(*b)
	}
	return cc
}

// SetDispatchAutomatically sets the "dispatch_automatically" field.
func (cc *ConnectionCreate) SetDispatchAutomatically(b bool) *ConnectionCreate {
	cc.mutation.SetDispatchAutomatically(b)
	return cc
}

// SetNillableDispatchAutomatically sets the "dispatch_automatically" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableDispatchAutomatically(b *bool) *ConnectionCreate {
	if b != nil {
		cc.SetDispatchAutomatically(*b)
	}
	return cc
}

// SetConvertCurrency sets the "convert_currency" field.
func (cc *ConnectionCreate) SetConvertCurrency(b bool) *ConnectionCreate {
	cc.mutation.SetConvertCurrency(b)
	return cc
}

// SetNillableConvertCurrency sets the "convert_currency" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableConvertCurrency(b *bool) *ConnectionCreate {
	if b != nil {
		cc.SetConvertCurrency(*b)
	}
	return cc
}

// SetAutoPrintParcelSlip sets the "auto_print_parcel_slip" field.
func (cc *ConnectionCreate) SetAutoPrintParcelSlip(b bool) *ConnectionCreate {
	cc.mutation.SetAutoPrintParcelSlip(b)
	return cc
}

// SetNillableAutoPrintParcelSlip sets the "auto_print_parcel_slip" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableAutoPrintParcelSlip(b *bool) *ConnectionCreate {
	if b != nil {
		cc.SetAutoPrintParcelSlip(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConnectionCreate) SetID(pu pulid.ID) *ConnectionCreate {
	cc.mutation.SetID(pu)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ConnectionCreate) SetNillableID(pu *pulid.ID) *ConnectionCreate {
	if pu != nil {
		cc.SetID(*pu)
	}
	return cc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cc *ConnectionCreate) SetTenant(t *Tenant) *ConnectionCreate {
	return cc.SetTenantID(t.ID)
}

// SetConnectionBrandID sets the "connection_brand" edge to the ConnectionBrand entity by ID.
func (cc *ConnectionCreate) SetConnectionBrandID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetConnectionBrandID(id)
	return cc
}

// SetConnectionBrand sets the "connection_brand" edge to the ConnectionBrand entity.
func (cc *ConnectionCreate) SetConnectionBrand(c *ConnectionBrand) *ConnectionCreate {
	return cc.SetConnectionBrandID(c.ID)
}

// SetConnectionShopifyID sets the "connection_shopify" edge to the ConnectionShopify entity by ID.
func (cc *ConnectionCreate) SetConnectionShopifyID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetConnectionShopifyID(id)
	return cc
}

// SetNillableConnectionShopifyID sets the "connection_shopify" edge to the ConnectionShopify entity by ID if the given value is not nil.
func (cc *ConnectionCreate) SetNillableConnectionShopifyID(id *pulid.ID) *ConnectionCreate {
	if id != nil {
		cc = cc.SetConnectionShopifyID(*id)
	}
	return cc
}

// SetConnectionShopify sets the "connection_shopify" edge to the ConnectionShopify entity.
func (cc *ConnectionCreate) SetConnectionShopify(c *ConnectionShopify) *ConnectionCreate {
	return cc.SetConnectionShopifyID(c.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cc *ConnectionCreate) AddOrderIDs(ids ...pulid.ID) *ConnectionCreate {
	cc.mutation.AddOrderIDs(ids...)
	return cc
}

// AddOrders adds the "orders" edges to the Order entity.
func (cc *ConnectionCreate) AddOrders(o ...*Order) *ConnectionCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderIDs(ids...)
}

// SetSenderLocationID sets the "sender_location" edge to the Location entity by ID.
func (cc *ConnectionCreate) SetSenderLocationID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetSenderLocationID(id)
	return cc
}

// SetSenderLocation sets the "sender_location" edge to the Location entity.
func (cc *ConnectionCreate) SetSenderLocation(l *Location) *ConnectionCreate {
	return cc.SetSenderLocationID(l.ID)
}

// SetPickupLocationID sets the "pickup_location" edge to the Location entity by ID.
func (cc *ConnectionCreate) SetPickupLocationID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetPickupLocationID(id)
	return cc
}

// SetPickupLocation sets the "pickup_location" edge to the Location entity.
func (cc *ConnectionCreate) SetPickupLocation(l *Location) *ConnectionCreate {
	return cc.SetPickupLocationID(l.ID)
}

// SetReturnLocationID sets the "return_location" edge to the Location entity by ID.
func (cc *ConnectionCreate) SetReturnLocationID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetReturnLocationID(id)
	return cc
}

// SetReturnLocation sets the "return_location" edge to the Location entity.
func (cc *ConnectionCreate) SetReturnLocation(l *Location) *ConnectionCreate {
	return cc.SetReturnLocationID(l.ID)
}

// SetSellerLocationID sets the "seller_location" edge to the Location entity by ID.
func (cc *ConnectionCreate) SetSellerLocationID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetSellerLocationID(id)
	return cc
}

// SetSellerLocation sets the "seller_location" edge to the Location entity.
func (cc *ConnectionCreate) SetSellerLocation(l *Location) *ConnectionCreate {
	return cc.SetSellerLocationID(l.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (cc *ConnectionCreate) AddDeliveryOptionIDs(ids ...pulid.ID) *ConnectionCreate {
	cc.mutation.AddDeliveryOptionIDs(ids...)
	return cc
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (cc *ConnectionCreate) AddDeliveryOption(d ...*DeliveryOption) *ConnectionCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDeliveryOptionIDs(ids...)
}

// SetDefaultDeliveryOptionID sets the "default_delivery_option" edge to the DeliveryOption entity by ID.
func (cc *ConnectionCreate) SetDefaultDeliveryOptionID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetDefaultDeliveryOptionID(id)
	return cc
}

// SetNillableDefaultDeliveryOptionID sets the "default_delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cc *ConnectionCreate) SetNillableDefaultDeliveryOptionID(id *pulid.ID) *ConnectionCreate {
	if id != nil {
		cc = cc.SetDefaultDeliveryOptionID(*id)
	}
	return cc
}

// SetDefaultDeliveryOption sets the "default_delivery_option" edge to the DeliveryOption entity.
func (cc *ConnectionCreate) SetDefaultDeliveryOption(d *DeliveryOption) *ConnectionCreate {
	return cc.SetDefaultDeliveryOptionID(d.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (cc *ConnectionCreate) SetReturnPortalID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetReturnPortalID(id)
	return cc
}

// SetNillableReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID if the given value is not nil.
func (cc *ConnectionCreate) SetNillableReturnPortalID(id *pulid.ID) *ConnectionCreate {
	if id != nil {
		cc = cc.SetReturnPortalID(*id)
	}
	return cc
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (cc *ConnectionCreate) SetReturnPortal(r *ReturnPortal) *ConnectionCreate {
	return cc.SetReturnPortalID(r.ID)
}

// AddHypothesisTestIDs adds the "hypothesis_test" edge to the HypothesisTest entity by IDs.
func (cc *ConnectionCreate) AddHypothesisTestIDs(ids ...pulid.ID) *ConnectionCreate {
	cc.mutation.AddHypothesisTestIDs(ids...)
	return cc
}

// AddHypothesisTest adds the "hypothesis_test" edges to the HypothesisTest entity.
func (cc *ConnectionCreate) AddHypothesisTest(h ...*HypothesisTest) *ConnectionCreate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cc.AddHypothesisTestIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cc *ConnectionCreate) AddNotificationIDs(ids ...pulid.ID) *ConnectionCreate {
	cc.mutation.AddNotificationIDs(ids...)
	return cc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cc *ConnectionCreate) AddNotifications(n ...*Notification) *ConnectionCreate {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cc.AddNotificationIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (cc *ConnectionCreate) SetCurrencyID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetCurrencyID(id)
	return cc
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (cc *ConnectionCreate) SetCurrency(c *Currency) *ConnectionCreate {
	return cc.SetCurrencyID(c.ID)
}

// SetPackingSlipTemplateID sets the "packing_slip_template" edge to the Document entity by ID.
func (cc *ConnectionCreate) SetPackingSlipTemplateID(id pulid.ID) *ConnectionCreate {
	cc.mutation.SetPackingSlipTemplateID(id)
	return cc
}

// SetNillablePackingSlipTemplateID sets the "packing_slip_template" edge to the Document entity by ID if the given value is not nil.
func (cc *ConnectionCreate) SetNillablePackingSlipTemplateID(id *pulid.ID) *ConnectionCreate {
	if id != nil {
		cc = cc.SetPackingSlipTemplateID(*id)
	}
	return cc
}

// SetPackingSlipTemplate sets the "packing_slip_template" edge to the Document entity.
func (cc *ConnectionCreate) SetPackingSlipTemplate(d *Document) *ConnectionCreate {
	return cc.SetPackingSlipTemplateID(d.ID)
}

// AddConnectionLookupIDs adds the "connection_lookup" edge to the ConnectionLookup entity by IDs.
func (cc *ConnectionCreate) AddConnectionLookupIDs(ids ...pulid.ID) *ConnectionCreate {
	cc.mutation.AddConnectionLookupIDs(ids...)
	return cc
}

// AddConnectionLookup adds the "connection_lookup" edges to the ConnectionLookup entity.
func (cc *ConnectionCreate) AddConnectionLookup(c ...*ConnectionLookup) *ConnectionCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddConnectionLookupIDs(ids...)
}

// Mutation returns the ConnectionMutation object of the builder.
func (cc *ConnectionCreate) Mutation() *ConnectionMutation {
	return cc.mutation
}

// Save creates the Connection in the database.
func (cc *ConnectionCreate) Save(ctx context.Context) (*Connection, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConnectionCreate) SaveX(ctx context.Context) *Connection {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConnectionCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConnectionCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConnectionCreate) defaults() error {
	if _, ok := cc.mutation.SyncOrders(); !ok {
		v := connection.DefaultSyncOrders
		cc.mutation.SetSyncOrders(v)
	}
	if _, ok := cc.mutation.SyncProducts(); !ok {
		v := connection.DefaultSyncProducts
		cc.mutation.SetSyncProducts(v)
	}
	if _, ok := cc.mutation.FulfillAutomatically(); !ok {
		v := connection.DefaultFulfillAutomatically
		cc.mutation.SetFulfillAutomatically(v)
	}
	if _, ok := cc.mutation.DispatchAutomatically(); !ok {
		v := connection.DefaultDispatchAutomatically
		cc.mutation.SetDispatchAutomatically(v)
	}
	if _, ok := cc.mutation.ConvertCurrency(); !ok {
		v := connection.DefaultConvertCurrency
		cc.mutation.SetConvertCurrency(v)
	}
	if _, ok := cc.mutation.AutoPrintParcelSlip(); !ok {
		v := connection.DefaultAutoPrintParcelSlip
		cc.mutation.SetAutoPrintParcelSlip(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if connection.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized connection.DefaultID (forgotten import ent/runtime?)")
		}
		v := connection.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConnectionCreate) check() error {
	if _, ok := cc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Connection.tenant_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Connection.name"`)}
	}
	if _, ok := cc.mutation.SyncOrders(); !ok {
		return &ValidationError{Name: "sync_orders", err: errors.New(`ent: missing required field "Connection.sync_orders"`)}
	}
	if _, ok := cc.mutation.SyncProducts(); !ok {
		return &ValidationError{Name: "sync_products", err: errors.New(`ent: missing required field "Connection.sync_products"`)}
	}
	if _, ok := cc.mutation.FulfillAutomatically(); !ok {
		return &ValidationError{Name: "fulfill_automatically", err: errors.New(`ent: missing required field "Connection.fulfill_automatically"`)}
	}
	if _, ok := cc.mutation.DispatchAutomatically(); !ok {
		return &ValidationError{Name: "dispatch_automatically", err: errors.New(`ent: missing required field "Connection.dispatch_automatically"`)}
	}
	if _, ok := cc.mutation.ConvertCurrency(); !ok {
		return &ValidationError{Name: "convert_currency", err: errors.New(`ent: missing required field "Connection.convert_currency"`)}
	}
	if _, ok := cc.mutation.AutoPrintParcelSlip(); !ok {
		return &ValidationError{Name: "auto_print_parcel_slip", err: errors.New(`ent: missing required field "Connection.auto_print_parcel_slip"`)}
	}
	if len(cc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Connection.tenant"`)}
	}
	if len(cc.mutation.ConnectionBrandIDs()) == 0 {
		return &ValidationError{Name: "connection_brand", err: errors.New(`ent: missing required edge "Connection.connection_brand"`)}
	}
	if len(cc.mutation.SenderLocationIDs()) == 0 {
		return &ValidationError{Name: "sender_location", err: errors.New(`ent: missing required edge "Connection.sender_location"`)}
	}
	if len(cc.mutation.PickupLocationIDs()) == 0 {
		return &ValidationError{Name: "pickup_location", err: errors.New(`ent: missing required edge "Connection.pickup_location"`)}
	}
	if len(cc.mutation.ReturnLocationIDs()) == 0 {
		return &ValidationError{Name: "return_location", err: errors.New(`ent: missing required edge "Connection.return_location"`)}
	}
	if len(cc.mutation.SellerLocationIDs()) == 0 {
		return &ValidationError{Name: "seller_location", err: errors.New(`ent: missing required edge "Connection.seller_location"`)}
	}
	if len(cc.mutation.CurrencyIDs()) == 0 {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required edge "Connection.currency"`)}
	}
	return nil
}

func (cc *ConnectionCreate) sqlSave(ctx context.Context) (*Connection, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConnectionCreate) createSpec() (*Connection, *sqlgraph.CreateSpec) {
	var (
		_node = &Connection{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(connection.Table, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.SyncOrders(); ok {
		_spec.SetField(connection.FieldSyncOrders, field.TypeBool, value)
		_node.SyncOrders = value
	}
	if value, ok := cc.mutation.SyncProducts(); ok {
		_spec.SetField(connection.FieldSyncProducts, field.TypeBool, value)
		_node.SyncProducts = value
	}
	if value, ok := cc.mutation.FulfillAutomatically(); ok {
		_spec.SetField(connection.FieldFulfillAutomatically, field.TypeBool, value)
		_node.FulfillAutomatically = value
	}
	if value, ok := cc.mutation.DispatchAutomatically(); ok {
		_spec.SetField(connection.FieldDispatchAutomatically, field.TypeBool, value)
		_node.DispatchAutomatically = value
	}
	if value, ok := cc.mutation.ConvertCurrency(); ok {
		_spec.SetField(connection.FieldConvertCurrency, field.TypeBool, value)
		_node.ConvertCurrency = value
	}
	if value, ok := cc.mutation.AutoPrintParcelSlip(); ok {
		_spec.SetField(connection.FieldAutoPrintParcelSlip, field.TypeBool, value)
		_node.AutoPrintParcelSlip = value
	}
	if nodes := cc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.TenantTable,
			Columns: []string{connection.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConnectionBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ConnectionBrandTable,
			Columns: []string{connection.ConnectionBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_connection_brand = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConnectionShopifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.ConnectionShopifyTable,
			Columns: []string{connection.ConnectionShopifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionshopify.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.OrdersTable,
			Columns: []string{connection.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SenderLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SenderLocationTable,
			Columns: []string{connection.SenderLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_sender_location = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PickupLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PickupLocationTable,
			Columns: []string{connection.PickupLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_pickup_location = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ReturnLocationTable,
			Columns: []string{connection.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_return_location = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SellerLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SellerLocationTable,
			Columns: []string{connection.SellerLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_seller_location = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.DeliveryOptionTable,
			Columns: []string{connection.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DefaultDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.DefaultDeliveryOptionTable,
			Columns: []string{connection.DefaultDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connection.ReturnPortalTable,
			Columns: []string{connection.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_portal_connection = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.HypothesisTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.HypothesisTestTable,
			Columns: []string{connection.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.NotificationsTable,
			Columns: []string{connection.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.CurrencyTable,
			Columns: []string{connection.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_currency = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PackingSlipTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PackingSlipTemplateTable,
			Columns: []string{connection.PackingSlipTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_packing_slip_template = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConnectionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.ConnectionLookupTable,
			Columns: []string{connection.ConnectionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Connection.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectionUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cc *ConnectionCreate) OnConflict(opts ...sql.ConflictOption) *ConnectionUpsertOne {
	cc.conflict = opts
	return &ConnectionUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Connection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ConnectionCreate) OnConflictColumns(columns ...string) *ConnectionUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ConnectionUpsertOne{
		create: cc,
	}
}

type (
	// ConnectionUpsertOne is the builder for "upsert"-ing
	//  one Connection node.
	ConnectionUpsertOne struct {
		create *ConnectionCreate
	}

	// ConnectionUpsert is the "OnConflict" setter.
	ConnectionUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionUpsert) SetTenantID(v pulid.ID) *ConnectionUpsert {
	u.Set(connection.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionUpsert) UpdateTenantID() *ConnectionUpsert {
	u.SetExcluded(connection.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *ConnectionUpsert) SetName(v string) *ConnectionUpsert {
	u.Set(connection.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ConnectionUpsert) UpdateName() *ConnectionUpsert {
	u.SetExcluded(connection.FieldName)
	return u
}

// SetSyncOrders sets the "sync_orders" field.
func (u *ConnectionUpsert) SetSyncOrders(v bool) *ConnectionUpsert {
	u.Set(connection.FieldSyncOrders, v)
	return u
}

// UpdateSyncOrders sets the "sync_orders" field to the value that was provided on create.
func (u *ConnectionUpsert) UpdateSyncOrders() *ConnectionUpsert {
	u.SetExcluded(connection.FieldSyncOrders)
	return u
}

// SetSyncProducts sets the "sync_products" field.
func (u *ConnectionUpsert) SetSyncProducts(v bool) *ConnectionUpsert {
	u.Set(connection.FieldSyncProducts, v)
	return u
}

// UpdateSyncProducts sets the "sync_products" field to the value that was provided on create.
func (u *ConnectionUpsert) UpdateSyncProducts() *ConnectionUpsert {
	u.SetExcluded(connection.FieldSyncProducts)
	return u
}

// SetFulfillAutomatically sets the "fulfill_automatically" field.
func (u *ConnectionUpsert) SetFulfillAutomatically(v bool) *ConnectionUpsert {
	u.Set(connection.FieldFulfillAutomatically, v)
	return u
}

// UpdateFulfillAutomatically sets the "fulfill_automatically" field to the value that was provided on create.
func (u *ConnectionUpsert) UpdateFulfillAutomatically() *ConnectionUpsert {
	u.SetExcluded(connection.FieldFulfillAutomatically)
	return u
}

// SetDispatchAutomatically sets the "dispatch_automatically" field.
func (u *ConnectionUpsert) SetDispatchAutomatically(v bool) *ConnectionUpsert {
	u.Set(connection.FieldDispatchAutomatically, v)
	return u
}

// UpdateDispatchAutomatically sets the "dispatch_automatically" field to the value that was provided on create.
func (u *ConnectionUpsert) UpdateDispatchAutomatically() *ConnectionUpsert {
	u.SetExcluded(connection.FieldDispatchAutomatically)
	return u
}

// SetConvertCurrency sets the "convert_currency" field.
func (u *ConnectionUpsert) SetConvertCurrency(v bool) *ConnectionUpsert {
	u.Set(connection.FieldConvertCurrency, v)
	return u
}

// UpdateConvertCurrency sets the "convert_currency" field to the value that was provided on create.
func (u *ConnectionUpsert) UpdateConvertCurrency() *ConnectionUpsert {
	u.SetExcluded(connection.FieldConvertCurrency)
	return u
}

// SetAutoPrintParcelSlip sets the "auto_print_parcel_slip" field.
func (u *ConnectionUpsert) SetAutoPrintParcelSlip(v bool) *ConnectionUpsert {
	u.Set(connection.FieldAutoPrintParcelSlip, v)
	return u
}

// UpdateAutoPrintParcelSlip sets the "auto_print_parcel_slip" field to the value that was provided on create.
func (u *ConnectionUpsert) UpdateAutoPrintParcelSlip() *ConnectionUpsert {
	u.SetExcluded(connection.FieldAutoPrintParcelSlip)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Connection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connection.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectionUpsertOne) UpdateNewValues() *ConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(connection.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Connection.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConnectionUpsertOne) Ignore() *ConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectionUpsertOne) DoNothing() *ConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectionCreate.OnConflict
// documentation for more info.
func (u *ConnectionUpsertOne) Update(set func(*ConnectionUpsert)) *ConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionUpsertOne) SetTenantID(v pulid.ID) *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionUpsertOne) UpdateTenantID() *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *ConnectionUpsertOne) SetName(v string) *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ConnectionUpsertOne) UpdateName() *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateName()
	})
}

// SetSyncOrders sets the "sync_orders" field.
func (u *ConnectionUpsertOne) SetSyncOrders(v bool) *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetSyncOrders(v)
	})
}

// UpdateSyncOrders sets the "sync_orders" field to the value that was provided on create.
func (u *ConnectionUpsertOne) UpdateSyncOrders() *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateSyncOrders()
	})
}

// SetSyncProducts sets the "sync_products" field.
func (u *ConnectionUpsertOne) SetSyncProducts(v bool) *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetSyncProducts(v)
	})
}

// UpdateSyncProducts sets the "sync_products" field to the value that was provided on create.
func (u *ConnectionUpsertOne) UpdateSyncProducts() *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateSyncProducts()
	})
}

// SetFulfillAutomatically sets the "fulfill_automatically" field.
func (u *ConnectionUpsertOne) SetFulfillAutomatically(v bool) *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetFulfillAutomatically(v)
	})
}

// UpdateFulfillAutomatically sets the "fulfill_automatically" field to the value that was provided on create.
func (u *ConnectionUpsertOne) UpdateFulfillAutomatically() *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateFulfillAutomatically()
	})
}

// SetDispatchAutomatically sets the "dispatch_automatically" field.
func (u *ConnectionUpsertOne) SetDispatchAutomatically(v bool) *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetDispatchAutomatically(v)
	})
}

// UpdateDispatchAutomatically sets the "dispatch_automatically" field to the value that was provided on create.
func (u *ConnectionUpsertOne) UpdateDispatchAutomatically() *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateDispatchAutomatically()
	})
}

// SetConvertCurrency sets the "convert_currency" field.
func (u *ConnectionUpsertOne) SetConvertCurrency(v bool) *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetConvertCurrency(v)
	})
}

// UpdateConvertCurrency sets the "convert_currency" field to the value that was provided on create.
func (u *ConnectionUpsertOne) UpdateConvertCurrency() *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateConvertCurrency()
	})
}

// SetAutoPrintParcelSlip sets the "auto_print_parcel_slip" field.
func (u *ConnectionUpsertOne) SetAutoPrintParcelSlip(v bool) *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetAutoPrintParcelSlip(v)
	})
}

// UpdateAutoPrintParcelSlip sets the "auto_print_parcel_slip" field to the value that was provided on create.
func (u *ConnectionUpsertOne) UpdateAutoPrintParcelSlip() *ConnectionUpsertOne {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateAutoPrintParcelSlip()
	})
}

// Exec executes the query.
func (u *ConnectionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConnectionUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ConnectionUpsertOne.ID is not supported by MySQL driver. Use ConnectionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConnectionUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConnectionCreateBulk is the builder for creating many Connection entities in bulk.
type ConnectionCreateBulk struct {
	config
	err      error
	builders []*ConnectionCreate
	conflict []sql.ConflictOption
}

// Save creates the Connection entities in the database.
func (ccb *ConnectionCreateBulk) Save(ctx context.Context) ([]*Connection, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Connection, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConnectionCreateBulk) SaveX(ctx context.Context) []*Connection {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConnectionCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConnectionCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Connection.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectionUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ccb *ConnectionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConnectionUpsertBulk {
	ccb.conflict = opts
	return &ConnectionUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Connection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ConnectionCreateBulk) OnConflictColumns(columns ...string) *ConnectionUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ConnectionUpsertBulk{
		create: ccb,
	}
}

// ConnectionUpsertBulk is the builder for "upsert"-ing
// a bulk of Connection nodes.
type ConnectionUpsertBulk struct {
	create *ConnectionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Connection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connection.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectionUpsertBulk) UpdateNewValues() *ConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(connection.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Connection.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConnectionUpsertBulk) Ignore() *ConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectionUpsertBulk) DoNothing() *ConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectionCreateBulk.OnConflict
// documentation for more info.
func (u *ConnectionUpsertBulk) Update(set func(*ConnectionUpsert)) *ConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionUpsertBulk) SetTenantID(v pulid.ID) *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionUpsertBulk) UpdateTenantID() *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *ConnectionUpsertBulk) SetName(v string) *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ConnectionUpsertBulk) UpdateName() *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateName()
	})
}

// SetSyncOrders sets the "sync_orders" field.
func (u *ConnectionUpsertBulk) SetSyncOrders(v bool) *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetSyncOrders(v)
	})
}

// UpdateSyncOrders sets the "sync_orders" field to the value that was provided on create.
func (u *ConnectionUpsertBulk) UpdateSyncOrders() *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateSyncOrders()
	})
}

// SetSyncProducts sets the "sync_products" field.
func (u *ConnectionUpsertBulk) SetSyncProducts(v bool) *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetSyncProducts(v)
	})
}

// UpdateSyncProducts sets the "sync_products" field to the value that was provided on create.
func (u *ConnectionUpsertBulk) UpdateSyncProducts() *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateSyncProducts()
	})
}

// SetFulfillAutomatically sets the "fulfill_automatically" field.
func (u *ConnectionUpsertBulk) SetFulfillAutomatically(v bool) *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetFulfillAutomatically(v)
	})
}

// UpdateFulfillAutomatically sets the "fulfill_automatically" field to the value that was provided on create.
func (u *ConnectionUpsertBulk) UpdateFulfillAutomatically() *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateFulfillAutomatically()
	})
}

// SetDispatchAutomatically sets the "dispatch_automatically" field.
func (u *ConnectionUpsertBulk) SetDispatchAutomatically(v bool) *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetDispatchAutomatically(v)
	})
}

// UpdateDispatchAutomatically sets the "dispatch_automatically" field to the value that was provided on create.
func (u *ConnectionUpsertBulk) UpdateDispatchAutomatically() *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateDispatchAutomatically()
	})
}

// SetConvertCurrency sets the "convert_currency" field.
func (u *ConnectionUpsertBulk) SetConvertCurrency(v bool) *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetConvertCurrency(v)
	})
}

// UpdateConvertCurrency sets the "convert_currency" field to the value that was provided on create.
func (u *ConnectionUpsertBulk) UpdateConvertCurrency() *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateConvertCurrency()
	})
}

// SetAutoPrintParcelSlip sets the "auto_print_parcel_slip" field.
func (u *ConnectionUpsertBulk) SetAutoPrintParcelSlip(v bool) *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.SetAutoPrintParcelSlip(v)
	})
}

// UpdateAutoPrintParcelSlip sets the "auto_print_parcel_slip" field to the value that was provided on create.
func (u *ConnectionUpsertBulk) UpdateAutoPrintParcelSlip() *ConnectionUpsertBulk {
	return u.Update(func(s *ConnectionUpsert) {
		s.UpdateAutoPrintParcelSlip()
	})
}

// Exec executes the query.
func (u *ConnectionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConnectionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
