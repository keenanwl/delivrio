// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTenantID sets the "tenant_id" field.
func (au *AddressUpdate) SetTenantID(pu pulid.ID) *AddressUpdate {
	au.mutation.SetTenantID(pu)
	return au
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillableTenantID(pu *pulid.ID) *AddressUpdate {
	if pu != nil {
		au.SetTenantID(*pu)
	}
	return au
}

// SetUniquenessID sets the "uniqueness_id" field.
func (au *AddressUpdate) SetUniquenessID(s string) *AddressUpdate {
	au.mutation.SetUniquenessID(s)
	return au
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillableUniquenessID(s *string) *AddressUpdate {
	if s != nil {
		au.SetUniquenessID(*s)
	}
	return au
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (au *AddressUpdate) ClearUniquenessID() *AddressUpdate {
	au.mutation.ClearUniquenessID()
	return au
}

// SetFirstName sets the "first_name" field.
func (au *AddressUpdate) SetFirstName(s string) *AddressUpdate {
	au.mutation.SetFirstName(s)
	return au
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (au *AddressUpdate) SetNillableFirstName(s *string) *AddressUpdate {
	if s != nil {
		au.SetFirstName(*s)
	}
	return au
}

// SetLastName sets the "last_name" field.
func (au *AddressUpdate) SetLastName(s string) *AddressUpdate {
	au.mutation.SetLastName(s)
	return au
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (au *AddressUpdate) SetNillableLastName(s *string) *AddressUpdate {
	if s != nil {
		au.SetLastName(*s)
	}
	return au
}

// SetEmail sets the "email" field.
func (au *AddressUpdate) SetEmail(s string) *AddressUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (au *AddressUpdate) SetNillableEmail(s *string) *AddressUpdate {
	if s != nil {
		au.SetEmail(*s)
	}
	return au
}

// SetPhoneNumber sets the "phone_number" field.
func (au *AddressUpdate) SetPhoneNumber(s string) *AddressUpdate {
	au.mutation.SetPhoneNumber(s)
	return au
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (au *AddressUpdate) SetNillablePhoneNumber(s *string) *AddressUpdate {
	if s != nil {
		au.SetPhoneNumber(*s)
	}
	return au
}

// SetPhoneNumber2 sets the "phone_number_2" field.
func (au *AddressUpdate) SetPhoneNumber2(s string) *AddressUpdate {
	au.mutation.SetPhoneNumber2(s)
	return au
}

// SetNillablePhoneNumber2 sets the "phone_number_2" field if the given value is not nil.
func (au *AddressUpdate) SetNillablePhoneNumber2(s *string) *AddressUpdate {
	if s != nil {
		au.SetPhoneNumber2(*s)
	}
	return au
}

// ClearPhoneNumber2 clears the value of the "phone_number_2" field.
func (au *AddressUpdate) ClearPhoneNumber2() *AddressUpdate {
	au.mutation.ClearPhoneNumber2()
	return au
}

// SetVatNumber sets the "vat_number" field.
func (au *AddressUpdate) SetVatNumber(s string) *AddressUpdate {
	au.mutation.SetVatNumber(s)
	return au
}

// SetNillableVatNumber sets the "vat_number" field if the given value is not nil.
func (au *AddressUpdate) SetNillableVatNumber(s *string) *AddressUpdate {
	if s != nil {
		au.SetVatNumber(*s)
	}
	return au
}

// ClearVatNumber clears the value of the "vat_number" field.
func (au *AddressUpdate) ClearVatNumber() *AddressUpdate {
	au.mutation.ClearVatNumber()
	return au
}

// SetCompany sets the "company" field.
func (au *AddressUpdate) SetCompany(s string) *AddressUpdate {
	au.mutation.SetCompany(s)
	return au
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCompany(s *string) *AddressUpdate {
	if s != nil {
		au.SetCompany(*s)
	}
	return au
}

// ClearCompany clears the value of the "company" field.
func (au *AddressUpdate) ClearCompany() *AddressUpdate {
	au.mutation.ClearCompany()
	return au
}

// SetAddressOne sets the "address_one" field.
func (au *AddressUpdate) SetAddressOne(s string) *AddressUpdate {
	au.mutation.SetAddressOne(s)
	return au
}

// SetNillableAddressOne sets the "address_one" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAddressOne(s *string) *AddressUpdate {
	if s != nil {
		au.SetAddressOne(*s)
	}
	return au
}

// SetAddressTwo sets the "address_two" field.
func (au *AddressUpdate) SetAddressTwo(s string) *AddressUpdate {
	au.mutation.SetAddressTwo(s)
	return au
}

// SetNillableAddressTwo sets the "address_two" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAddressTwo(s *string) *AddressUpdate {
	if s != nil {
		au.SetAddressTwo(*s)
	}
	return au
}

// SetCity sets the "city" field.
func (au *AddressUpdate) SetCity(s string) *AddressUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCity(s *string) *AddressUpdate {
	if s != nil {
		au.SetCity(*s)
	}
	return au
}

// SetState sets the "state" field.
func (au *AddressUpdate) SetState(s string) *AddressUpdate {
	au.mutation.SetState(s)
	return au
}

// SetNillableState sets the "state" field if the given value is not nil.
func (au *AddressUpdate) SetNillableState(s *string) *AddressUpdate {
	if s != nil {
		au.SetState(*s)
	}
	return au
}

// ClearState clears the value of the "state" field.
func (au *AddressUpdate) ClearState() *AddressUpdate {
	au.mutation.ClearState()
	return au
}

// SetZip sets the "zip" field.
func (au *AddressUpdate) SetZip(s string) *AddressUpdate {
	au.mutation.SetZip(s)
	return au
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (au *AddressUpdate) SetNillableZip(s *string) *AddressUpdate {
	if s != nil {
		au.SetZip(*s)
	}
	return au
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (au *AddressUpdate) SetTenant(t *Tenant) *AddressUpdate {
	return au.SetTenantID(t.ID)
}

// AddRecipientColliIDs adds the "recipient_colli" edge to the Colli entity by IDs.
func (au *AddressUpdate) AddRecipientColliIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.AddRecipientColliIDs(ids...)
	return au
}

// AddRecipientColli adds the "recipient_colli" edges to the Colli entity.
func (au *AddressUpdate) AddRecipientColli(c ...*Colli) *AddressUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddRecipientColliIDs(ids...)
}

// SetRecipientConsolidationID sets the "recipient_consolidation" edge to the Consolidation entity by ID.
func (au *AddressUpdate) SetRecipientConsolidationID(id pulid.ID) *AddressUpdate {
	au.mutation.SetRecipientConsolidationID(id)
	return au
}

// SetNillableRecipientConsolidationID sets the "recipient_consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (au *AddressUpdate) SetNillableRecipientConsolidationID(id *pulid.ID) *AddressUpdate {
	if id != nil {
		au = au.SetRecipientConsolidationID(*id)
	}
	return au
}

// SetRecipientConsolidation sets the "recipient_consolidation" edge to the Consolidation entity.
func (au *AddressUpdate) SetRecipientConsolidation(c *Consolidation) *AddressUpdate {
	return au.SetRecipientConsolidationID(c.ID)
}

// AddCompanyAddresIDs adds the "company_address" edge to the Tenant entity by IDs.
func (au *AddressUpdate) AddCompanyAddresIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.AddCompanyAddresIDs(ids...)
	return au
}

// AddCompanyAddress adds the "company_address" edges to the Tenant entity.
func (au *AddressUpdate) AddCompanyAddress(t ...*Tenant) *AddressUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddCompanyAddresIDs(ids...)
}

// AddLocationIDs adds the "location" edge to the Location entity by IDs.
func (au *AddressUpdate) AddLocationIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.AddLocationIDs(ids...)
	return au
}

// AddLocation adds the "location" edges to the Location entity.
func (au *AddressUpdate) AddLocation(l ...*Location) *AddressUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.AddLocationIDs(ids...)
}

// AddSenderColliIDs adds the "sender_colli" edge to the Colli entity by IDs.
func (au *AddressUpdate) AddSenderColliIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.AddSenderColliIDs(ids...)
	return au
}

// AddSenderColli adds the "sender_colli" edges to the Colli entity.
func (au *AddressUpdate) AddSenderColli(c ...*Colli) *AddressUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddSenderColliIDs(ids...)
}

// SetSenderConsolidationID sets the "sender_consolidation" edge to the Consolidation entity by ID.
func (au *AddressUpdate) SetSenderConsolidationID(id pulid.ID) *AddressUpdate {
	au.mutation.SetSenderConsolidationID(id)
	return au
}

// SetNillableSenderConsolidationID sets the "sender_consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (au *AddressUpdate) SetNillableSenderConsolidationID(id *pulid.ID) *AddressUpdate {
	if id != nil {
		au = au.SetSenderConsolidationID(*id)
	}
	return au
}

// SetSenderConsolidation sets the "sender_consolidation" edge to the Consolidation entity.
func (au *AddressUpdate) SetSenderConsolidation(c *Consolidation) *AddressUpdate {
	return au.SetSenderConsolidationID(c.ID)
}

// AddReturnSenderColliIDs adds the "return_sender_colli" edge to the ReturnColli entity by IDs.
func (au *AddressUpdate) AddReturnSenderColliIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.AddReturnSenderColliIDs(ids...)
	return au
}

// AddReturnSenderColli adds the "return_sender_colli" edges to the ReturnColli entity.
func (au *AddressUpdate) AddReturnSenderColli(r ...*ReturnColli) *AddressUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddReturnSenderColliIDs(ids...)
}

// AddReturnRecipientColliIDs adds the "return_recipient_colli" edge to the ReturnColli entity by IDs.
func (au *AddressUpdate) AddReturnRecipientColliIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.AddReturnRecipientColliIDs(ids...)
	return au
}

// AddReturnRecipientColli adds the "return_recipient_colli" edges to the ReturnColli entity.
func (au *AddressUpdate) AddReturnRecipientColli(r ...*ReturnColli) *AddressUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddReturnRecipientColliIDs(ids...)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (au *AddressUpdate) SetCountryID(id pulid.ID) *AddressUpdate {
	au.mutation.SetCountryID(id)
	return au
}

// SetCountry sets the "country" edge to the Country entity.
func (au *AddressUpdate) SetCountry(c *Country) *AddressUpdate {
	return au.SetCountryID(c.ID)
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (au *AddressUpdate) ClearTenant() *AddressUpdate {
	au.mutation.ClearTenant()
	return au
}

// ClearRecipientColli clears all "recipient_colli" edges to the Colli entity.
func (au *AddressUpdate) ClearRecipientColli() *AddressUpdate {
	au.mutation.ClearRecipientColli()
	return au
}

// RemoveRecipientColliIDs removes the "recipient_colli" edge to Colli entities by IDs.
func (au *AddressUpdate) RemoveRecipientColliIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.RemoveRecipientColliIDs(ids...)
	return au
}

// RemoveRecipientColli removes "recipient_colli" edges to Colli entities.
func (au *AddressUpdate) RemoveRecipientColli(c ...*Colli) *AddressUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveRecipientColliIDs(ids...)
}

// ClearRecipientConsolidation clears the "recipient_consolidation" edge to the Consolidation entity.
func (au *AddressUpdate) ClearRecipientConsolidation() *AddressUpdate {
	au.mutation.ClearRecipientConsolidation()
	return au
}

// ClearCompanyAddress clears all "company_address" edges to the Tenant entity.
func (au *AddressUpdate) ClearCompanyAddress() *AddressUpdate {
	au.mutation.ClearCompanyAddress()
	return au
}

// RemoveCompanyAddresIDs removes the "company_address" edge to Tenant entities by IDs.
func (au *AddressUpdate) RemoveCompanyAddresIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.RemoveCompanyAddresIDs(ids...)
	return au
}

// RemoveCompanyAddress removes "company_address" edges to Tenant entities.
func (au *AddressUpdate) RemoveCompanyAddress(t ...*Tenant) *AddressUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveCompanyAddresIDs(ids...)
}

// ClearLocation clears all "location" edges to the Location entity.
func (au *AddressUpdate) ClearLocation() *AddressUpdate {
	au.mutation.ClearLocation()
	return au
}

// RemoveLocationIDs removes the "location" edge to Location entities by IDs.
func (au *AddressUpdate) RemoveLocationIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.RemoveLocationIDs(ids...)
	return au
}

// RemoveLocation removes "location" edges to Location entities.
func (au *AddressUpdate) RemoveLocation(l ...*Location) *AddressUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.RemoveLocationIDs(ids...)
}

// ClearSenderColli clears all "sender_colli" edges to the Colli entity.
func (au *AddressUpdate) ClearSenderColli() *AddressUpdate {
	au.mutation.ClearSenderColli()
	return au
}

// RemoveSenderColliIDs removes the "sender_colli" edge to Colli entities by IDs.
func (au *AddressUpdate) RemoveSenderColliIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.RemoveSenderColliIDs(ids...)
	return au
}

// RemoveSenderColli removes "sender_colli" edges to Colli entities.
func (au *AddressUpdate) RemoveSenderColli(c ...*Colli) *AddressUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveSenderColliIDs(ids...)
}

// ClearSenderConsolidation clears the "sender_consolidation" edge to the Consolidation entity.
func (au *AddressUpdate) ClearSenderConsolidation() *AddressUpdate {
	au.mutation.ClearSenderConsolidation()
	return au
}

// ClearReturnSenderColli clears all "return_sender_colli" edges to the ReturnColli entity.
func (au *AddressUpdate) ClearReturnSenderColli() *AddressUpdate {
	au.mutation.ClearReturnSenderColli()
	return au
}

// RemoveReturnSenderColliIDs removes the "return_sender_colli" edge to ReturnColli entities by IDs.
func (au *AddressUpdate) RemoveReturnSenderColliIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.RemoveReturnSenderColliIDs(ids...)
	return au
}

// RemoveReturnSenderColli removes "return_sender_colli" edges to ReturnColli entities.
func (au *AddressUpdate) RemoveReturnSenderColli(r ...*ReturnColli) *AddressUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveReturnSenderColliIDs(ids...)
}

// ClearReturnRecipientColli clears all "return_recipient_colli" edges to the ReturnColli entity.
func (au *AddressUpdate) ClearReturnRecipientColli() *AddressUpdate {
	au.mutation.ClearReturnRecipientColli()
	return au
}

// RemoveReturnRecipientColliIDs removes the "return_recipient_colli" edge to ReturnColli entities by IDs.
func (au *AddressUpdate) RemoveReturnRecipientColliIDs(ids ...pulid.ID) *AddressUpdate {
	au.mutation.RemoveReturnRecipientColliIDs(ids...)
	return au
}

// RemoveReturnRecipientColli removes "return_recipient_colli" edges to ReturnColli entities.
func (au *AddressUpdate) RemoveReturnRecipientColli(r ...*ReturnColli) *AddressUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveReturnRecipientColliIDs(ids...)
}

// ClearCountry clears the "country" edge to the Country entity.
func (au *AddressUpdate) ClearCountry() *AddressUpdate {
	au.mutation.ClearCountry()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AddressUpdate) check() error {
	if au.mutation.TenantCleared() && len(au.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Address.tenant"`)
	}
	if au.mutation.CountryCleared() && len(au.mutation.CountryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Address.country"`)
	}
	return nil
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UniquenessID(); ok {
		_spec.SetField(address.FieldUniquenessID, field.TypeString, value)
	}
	if au.mutation.UniquenessIDCleared() {
		_spec.ClearField(address.FieldUniquenessID, field.TypeString)
	}
	if value, ok := au.mutation.FirstName(); ok {
		_spec.SetField(address.FieldFirstName, field.TypeString, value)
	}
	if value, ok := au.mutation.LastName(); ok {
		_spec.SetField(address.FieldLastName, field.TypeString, value)
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(address.FieldEmail, field.TypeString, value)
	}
	if value, ok := au.mutation.PhoneNumber(); ok {
		_spec.SetField(address.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := au.mutation.PhoneNumber2(); ok {
		_spec.SetField(address.FieldPhoneNumber2, field.TypeString, value)
	}
	if au.mutation.PhoneNumber2Cleared() {
		_spec.ClearField(address.FieldPhoneNumber2, field.TypeString)
	}
	if value, ok := au.mutation.VatNumber(); ok {
		_spec.SetField(address.FieldVatNumber, field.TypeString, value)
	}
	if au.mutation.VatNumberCleared() {
		_spec.ClearField(address.FieldVatNumber, field.TypeString)
	}
	if value, ok := au.mutation.Company(); ok {
		_spec.SetField(address.FieldCompany, field.TypeString, value)
	}
	if au.mutation.CompanyCleared() {
		_spec.ClearField(address.FieldCompany, field.TypeString)
	}
	if value, ok := au.mutation.AddressOne(); ok {
		_spec.SetField(address.FieldAddressOne, field.TypeString, value)
	}
	if value, ok := au.mutation.AddressTwo(); ok {
		_spec.SetField(address.FieldAddressTwo, field.TypeString, value)
	}
	if value, ok := au.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if value, ok := au.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
	}
	if au.mutation.StateCleared() {
		_spec.ClearField(address.FieldState, field.TypeString)
	}
	if value, ok := au.mutation.Zip(); ok {
		_spec.SetField(address.FieldZip, field.TypeString, value)
	}
	if au.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.TenantTable,
			Columns: []string{address.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.TenantTable,
			Columns: []string{address.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RecipientColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.RecipientColliTable,
			Columns: []string{address.RecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRecipientColliIDs(); len(nodes) > 0 && !au.mutation.RecipientColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.RecipientColliTable,
			Columns: []string{address.RecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RecipientColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.RecipientColliTable,
			Columns: []string{address.RecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RecipientConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.RecipientConsolidationTable,
			Columns: []string{address.RecipientConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RecipientConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.RecipientConsolidationTable,
			Columns: []string{address.RecipientConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CompanyAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressTable,
			Columns: []string{address.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCompanyAddressIDs(); len(nodes) > 0 && !au.mutation.CompanyAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressTable,
			Columns: []string{address.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CompanyAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressTable,
			Columns: []string{address.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.LocationTable,
			Columns: []string{address.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedLocationIDs(); len(nodes) > 0 && !au.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.LocationTable,
			Columns: []string{address.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.LocationTable,
			Columns: []string{address.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SenderColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.SenderColliTable,
			Columns: []string{address.SenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSenderColliIDs(); len(nodes) > 0 && !au.mutation.SenderColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.SenderColliTable,
			Columns: []string{address.SenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SenderColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.SenderColliTable,
			Columns: []string{address.SenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SenderConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.SenderConsolidationTable,
			Columns: []string{address.SenderConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SenderConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.SenderConsolidationTable,
			Columns: []string{address.SenderConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ReturnSenderColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnSenderColliTable,
			Columns: []string{address.ReturnSenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedReturnSenderColliIDs(); len(nodes) > 0 && !au.mutation.ReturnSenderColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnSenderColliTable,
			Columns: []string{address.ReturnSenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ReturnSenderColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnSenderColliTable,
			Columns: []string{address.ReturnSenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ReturnRecipientColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnRecipientColliTable,
			Columns: []string{address.ReturnRecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedReturnRecipientColliIDs(); len(nodes) > 0 && !au.mutation.ReturnRecipientColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnRecipientColliTable,
			Columns: []string{address.ReturnRecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ReturnRecipientColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnRecipientColliTable,
			Columns: []string{address.ReturnRecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.CountryTable,
			Columns: []string{address.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.CountryTable,
			Columns: []string{address.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetTenantID sets the "tenant_id" field.
func (auo *AddressUpdateOne) SetTenantID(pu pulid.ID) *AddressUpdateOne {
	auo.mutation.SetTenantID(pu)
	return auo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableTenantID(pu *pulid.ID) *AddressUpdateOne {
	if pu != nil {
		auo.SetTenantID(*pu)
	}
	return auo
}

// SetUniquenessID sets the "uniqueness_id" field.
func (auo *AddressUpdateOne) SetUniquenessID(s string) *AddressUpdateOne {
	auo.mutation.SetUniquenessID(s)
	return auo
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableUniquenessID(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetUniquenessID(*s)
	}
	return auo
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (auo *AddressUpdateOne) ClearUniquenessID() *AddressUpdateOne {
	auo.mutation.ClearUniquenessID()
	return auo
}

// SetFirstName sets the "first_name" field.
func (auo *AddressUpdateOne) SetFirstName(s string) *AddressUpdateOne {
	auo.mutation.SetFirstName(s)
	return auo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableFirstName(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetFirstName(*s)
	}
	return auo
}

// SetLastName sets the "last_name" field.
func (auo *AddressUpdateOne) SetLastName(s string) *AddressUpdateOne {
	auo.mutation.SetLastName(s)
	return auo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableLastName(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetLastName(*s)
	}
	return auo
}

// SetEmail sets the "email" field.
func (auo *AddressUpdateOne) SetEmail(s string) *AddressUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableEmail(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetEmail(*s)
	}
	return auo
}

// SetPhoneNumber sets the "phone_number" field.
func (auo *AddressUpdateOne) SetPhoneNumber(s string) *AddressUpdateOne {
	auo.mutation.SetPhoneNumber(s)
	return auo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillablePhoneNumber(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetPhoneNumber(*s)
	}
	return auo
}

// SetPhoneNumber2 sets the "phone_number_2" field.
func (auo *AddressUpdateOne) SetPhoneNumber2(s string) *AddressUpdateOne {
	auo.mutation.SetPhoneNumber2(s)
	return auo
}

// SetNillablePhoneNumber2 sets the "phone_number_2" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillablePhoneNumber2(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetPhoneNumber2(*s)
	}
	return auo
}

// ClearPhoneNumber2 clears the value of the "phone_number_2" field.
func (auo *AddressUpdateOne) ClearPhoneNumber2() *AddressUpdateOne {
	auo.mutation.ClearPhoneNumber2()
	return auo
}

// SetVatNumber sets the "vat_number" field.
func (auo *AddressUpdateOne) SetVatNumber(s string) *AddressUpdateOne {
	auo.mutation.SetVatNumber(s)
	return auo
}

// SetNillableVatNumber sets the "vat_number" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableVatNumber(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetVatNumber(*s)
	}
	return auo
}

// ClearVatNumber clears the value of the "vat_number" field.
func (auo *AddressUpdateOne) ClearVatNumber() *AddressUpdateOne {
	auo.mutation.ClearVatNumber()
	return auo
}

// SetCompany sets the "company" field.
func (auo *AddressUpdateOne) SetCompany(s string) *AddressUpdateOne {
	auo.mutation.SetCompany(s)
	return auo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCompany(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCompany(*s)
	}
	return auo
}

// ClearCompany clears the value of the "company" field.
func (auo *AddressUpdateOne) ClearCompany() *AddressUpdateOne {
	auo.mutation.ClearCompany()
	return auo
}

// SetAddressOne sets the "address_one" field.
func (auo *AddressUpdateOne) SetAddressOne(s string) *AddressUpdateOne {
	auo.mutation.SetAddressOne(s)
	return auo
}

// SetNillableAddressOne sets the "address_one" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAddressOne(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetAddressOne(*s)
	}
	return auo
}

// SetAddressTwo sets the "address_two" field.
func (auo *AddressUpdateOne) SetAddressTwo(s string) *AddressUpdateOne {
	auo.mutation.SetAddressTwo(s)
	return auo
}

// SetNillableAddressTwo sets the "address_two" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAddressTwo(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetAddressTwo(*s)
	}
	return auo
}

// SetCity sets the "city" field.
func (auo *AddressUpdateOne) SetCity(s string) *AddressUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCity(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCity(*s)
	}
	return auo
}

// SetState sets the "state" field.
func (auo *AddressUpdateOne) SetState(s string) *AddressUpdateOne {
	auo.mutation.SetState(s)
	return auo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableState(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetState(*s)
	}
	return auo
}

// ClearState clears the value of the "state" field.
func (auo *AddressUpdateOne) ClearState() *AddressUpdateOne {
	auo.mutation.ClearState()
	return auo
}

// SetZip sets the "zip" field.
func (auo *AddressUpdateOne) SetZip(s string) *AddressUpdateOne {
	auo.mutation.SetZip(s)
	return auo
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableZip(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetZip(*s)
	}
	return auo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (auo *AddressUpdateOne) SetTenant(t *Tenant) *AddressUpdateOne {
	return auo.SetTenantID(t.ID)
}

// AddRecipientColliIDs adds the "recipient_colli" edge to the Colli entity by IDs.
func (auo *AddressUpdateOne) AddRecipientColliIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.AddRecipientColliIDs(ids...)
	return auo
}

// AddRecipientColli adds the "recipient_colli" edges to the Colli entity.
func (auo *AddressUpdateOne) AddRecipientColli(c ...*Colli) *AddressUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddRecipientColliIDs(ids...)
}

// SetRecipientConsolidationID sets the "recipient_consolidation" edge to the Consolidation entity by ID.
func (auo *AddressUpdateOne) SetRecipientConsolidationID(id pulid.ID) *AddressUpdateOne {
	auo.mutation.SetRecipientConsolidationID(id)
	return auo
}

// SetNillableRecipientConsolidationID sets the "recipient_consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableRecipientConsolidationID(id *pulid.ID) *AddressUpdateOne {
	if id != nil {
		auo = auo.SetRecipientConsolidationID(*id)
	}
	return auo
}

// SetRecipientConsolidation sets the "recipient_consolidation" edge to the Consolidation entity.
func (auo *AddressUpdateOne) SetRecipientConsolidation(c *Consolidation) *AddressUpdateOne {
	return auo.SetRecipientConsolidationID(c.ID)
}

// AddCompanyAddresIDs adds the "company_address" edge to the Tenant entity by IDs.
func (auo *AddressUpdateOne) AddCompanyAddresIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.AddCompanyAddresIDs(ids...)
	return auo
}

// AddCompanyAddress adds the "company_address" edges to the Tenant entity.
func (auo *AddressUpdateOne) AddCompanyAddress(t ...*Tenant) *AddressUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddCompanyAddresIDs(ids...)
}

// AddLocationIDs adds the "location" edge to the Location entity by IDs.
func (auo *AddressUpdateOne) AddLocationIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.AddLocationIDs(ids...)
	return auo
}

// AddLocation adds the "location" edges to the Location entity.
func (auo *AddressUpdateOne) AddLocation(l ...*Location) *AddressUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.AddLocationIDs(ids...)
}

// AddSenderColliIDs adds the "sender_colli" edge to the Colli entity by IDs.
func (auo *AddressUpdateOne) AddSenderColliIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.AddSenderColliIDs(ids...)
	return auo
}

// AddSenderColli adds the "sender_colli" edges to the Colli entity.
func (auo *AddressUpdateOne) AddSenderColli(c ...*Colli) *AddressUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddSenderColliIDs(ids...)
}

// SetSenderConsolidationID sets the "sender_consolidation" edge to the Consolidation entity by ID.
func (auo *AddressUpdateOne) SetSenderConsolidationID(id pulid.ID) *AddressUpdateOne {
	auo.mutation.SetSenderConsolidationID(id)
	return auo
}

// SetNillableSenderConsolidationID sets the "sender_consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableSenderConsolidationID(id *pulid.ID) *AddressUpdateOne {
	if id != nil {
		auo = auo.SetSenderConsolidationID(*id)
	}
	return auo
}

// SetSenderConsolidation sets the "sender_consolidation" edge to the Consolidation entity.
func (auo *AddressUpdateOne) SetSenderConsolidation(c *Consolidation) *AddressUpdateOne {
	return auo.SetSenderConsolidationID(c.ID)
}

// AddReturnSenderColliIDs adds the "return_sender_colli" edge to the ReturnColli entity by IDs.
func (auo *AddressUpdateOne) AddReturnSenderColliIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.AddReturnSenderColliIDs(ids...)
	return auo
}

// AddReturnSenderColli adds the "return_sender_colli" edges to the ReturnColli entity.
func (auo *AddressUpdateOne) AddReturnSenderColli(r ...*ReturnColli) *AddressUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddReturnSenderColliIDs(ids...)
}

// AddReturnRecipientColliIDs adds the "return_recipient_colli" edge to the ReturnColli entity by IDs.
func (auo *AddressUpdateOne) AddReturnRecipientColliIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.AddReturnRecipientColliIDs(ids...)
	return auo
}

// AddReturnRecipientColli adds the "return_recipient_colli" edges to the ReturnColli entity.
func (auo *AddressUpdateOne) AddReturnRecipientColli(r ...*ReturnColli) *AddressUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddReturnRecipientColliIDs(ids...)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (auo *AddressUpdateOne) SetCountryID(id pulid.ID) *AddressUpdateOne {
	auo.mutation.SetCountryID(id)
	return auo
}

// SetCountry sets the "country" edge to the Country entity.
func (auo *AddressUpdateOne) SetCountry(c *Country) *AddressUpdateOne {
	return auo.SetCountryID(c.ID)
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (auo *AddressUpdateOne) ClearTenant() *AddressUpdateOne {
	auo.mutation.ClearTenant()
	return auo
}

// ClearRecipientColli clears all "recipient_colli" edges to the Colli entity.
func (auo *AddressUpdateOne) ClearRecipientColli() *AddressUpdateOne {
	auo.mutation.ClearRecipientColli()
	return auo
}

// RemoveRecipientColliIDs removes the "recipient_colli" edge to Colli entities by IDs.
func (auo *AddressUpdateOne) RemoveRecipientColliIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.RemoveRecipientColliIDs(ids...)
	return auo
}

// RemoveRecipientColli removes "recipient_colli" edges to Colli entities.
func (auo *AddressUpdateOne) RemoveRecipientColli(c ...*Colli) *AddressUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveRecipientColliIDs(ids...)
}

// ClearRecipientConsolidation clears the "recipient_consolidation" edge to the Consolidation entity.
func (auo *AddressUpdateOne) ClearRecipientConsolidation() *AddressUpdateOne {
	auo.mutation.ClearRecipientConsolidation()
	return auo
}

// ClearCompanyAddress clears all "company_address" edges to the Tenant entity.
func (auo *AddressUpdateOne) ClearCompanyAddress() *AddressUpdateOne {
	auo.mutation.ClearCompanyAddress()
	return auo
}

// RemoveCompanyAddresIDs removes the "company_address" edge to Tenant entities by IDs.
func (auo *AddressUpdateOne) RemoveCompanyAddresIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.RemoveCompanyAddresIDs(ids...)
	return auo
}

// RemoveCompanyAddress removes "company_address" edges to Tenant entities.
func (auo *AddressUpdateOne) RemoveCompanyAddress(t ...*Tenant) *AddressUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveCompanyAddresIDs(ids...)
}

// ClearLocation clears all "location" edges to the Location entity.
func (auo *AddressUpdateOne) ClearLocation() *AddressUpdateOne {
	auo.mutation.ClearLocation()
	return auo
}

// RemoveLocationIDs removes the "location" edge to Location entities by IDs.
func (auo *AddressUpdateOne) RemoveLocationIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.RemoveLocationIDs(ids...)
	return auo
}

// RemoveLocation removes "location" edges to Location entities.
func (auo *AddressUpdateOne) RemoveLocation(l ...*Location) *AddressUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.RemoveLocationIDs(ids...)
}

// ClearSenderColli clears all "sender_colli" edges to the Colli entity.
func (auo *AddressUpdateOne) ClearSenderColli() *AddressUpdateOne {
	auo.mutation.ClearSenderColli()
	return auo
}

// RemoveSenderColliIDs removes the "sender_colli" edge to Colli entities by IDs.
func (auo *AddressUpdateOne) RemoveSenderColliIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.RemoveSenderColliIDs(ids...)
	return auo
}

// RemoveSenderColli removes "sender_colli" edges to Colli entities.
func (auo *AddressUpdateOne) RemoveSenderColli(c ...*Colli) *AddressUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveSenderColliIDs(ids...)
}

// ClearSenderConsolidation clears the "sender_consolidation" edge to the Consolidation entity.
func (auo *AddressUpdateOne) ClearSenderConsolidation() *AddressUpdateOne {
	auo.mutation.ClearSenderConsolidation()
	return auo
}

// ClearReturnSenderColli clears all "return_sender_colli" edges to the ReturnColli entity.
func (auo *AddressUpdateOne) ClearReturnSenderColli() *AddressUpdateOne {
	auo.mutation.ClearReturnSenderColli()
	return auo
}

// RemoveReturnSenderColliIDs removes the "return_sender_colli" edge to ReturnColli entities by IDs.
func (auo *AddressUpdateOne) RemoveReturnSenderColliIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.RemoveReturnSenderColliIDs(ids...)
	return auo
}

// RemoveReturnSenderColli removes "return_sender_colli" edges to ReturnColli entities.
func (auo *AddressUpdateOne) RemoveReturnSenderColli(r ...*ReturnColli) *AddressUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveReturnSenderColliIDs(ids...)
}

// ClearReturnRecipientColli clears all "return_recipient_colli" edges to the ReturnColli entity.
func (auo *AddressUpdateOne) ClearReturnRecipientColli() *AddressUpdateOne {
	auo.mutation.ClearReturnRecipientColli()
	return auo
}

// RemoveReturnRecipientColliIDs removes the "return_recipient_colli" edge to ReturnColli entities by IDs.
func (auo *AddressUpdateOne) RemoveReturnRecipientColliIDs(ids ...pulid.ID) *AddressUpdateOne {
	auo.mutation.RemoveReturnRecipientColliIDs(ids...)
	return auo
}

// RemoveReturnRecipientColli removes "return_recipient_colli" edges to ReturnColli entities.
func (auo *AddressUpdateOne) RemoveReturnRecipientColli(r ...*ReturnColli) *AddressUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveReturnRecipientColliIDs(ids...)
}

// ClearCountry clears the "country" edge to the Country entity.
func (auo *AddressUpdateOne) ClearCountry() *AddressUpdateOne {
	auo.mutation.ClearCountry()
	return auo
}

// Where appends a list predicates to the AddressUpdate builder.
func (auo *AddressUpdateOne) Where(ps ...predicate.Address) *AddressUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AddressUpdateOne) check() error {
	if auo.mutation.TenantCleared() && len(auo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Address.tenant"`)
	}
	if auo.mutation.CountryCleared() && len(auo.mutation.CountryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Address.country"`)
	}
	return nil
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UniquenessID(); ok {
		_spec.SetField(address.FieldUniquenessID, field.TypeString, value)
	}
	if auo.mutation.UniquenessIDCleared() {
		_spec.ClearField(address.FieldUniquenessID, field.TypeString)
	}
	if value, ok := auo.mutation.FirstName(); ok {
		_spec.SetField(address.FieldFirstName, field.TypeString, value)
	}
	if value, ok := auo.mutation.LastName(); ok {
		_spec.SetField(address.FieldLastName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(address.FieldEmail, field.TypeString, value)
	}
	if value, ok := auo.mutation.PhoneNumber(); ok {
		_spec.SetField(address.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := auo.mutation.PhoneNumber2(); ok {
		_spec.SetField(address.FieldPhoneNumber2, field.TypeString, value)
	}
	if auo.mutation.PhoneNumber2Cleared() {
		_spec.ClearField(address.FieldPhoneNumber2, field.TypeString)
	}
	if value, ok := auo.mutation.VatNumber(); ok {
		_spec.SetField(address.FieldVatNumber, field.TypeString, value)
	}
	if auo.mutation.VatNumberCleared() {
		_spec.ClearField(address.FieldVatNumber, field.TypeString)
	}
	if value, ok := auo.mutation.Company(); ok {
		_spec.SetField(address.FieldCompany, field.TypeString, value)
	}
	if auo.mutation.CompanyCleared() {
		_spec.ClearField(address.FieldCompany, field.TypeString)
	}
	if value, ok := auo.mutation.AddressOne(); ok {
		_spec.SetField(address.FieldAddressOne, field.TypeString, value)
	}
	if value, ok := auo.mutation.AddressTwo(); ok {
		_spec.SetField(address.FieldAddressTwo, field.TypeString, value)
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if value, ok := auo.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
	}
	if auo.mutation.StateCleared() {
		_spec.ClearField(address.FieldState, field.TypeString)
	}
	if value, ok := auo.mutation.Zip(); ok {
		_spec.SetField(address.FieldZip, field.TypeString, value)
	}
	if auo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.TenantTable,
			Columns: []string{address.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.TenantTable,
			Columns: []string{address.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RecipientColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.RecipientColliTable,
			Columns: []string{address.RecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRecipientColliIDs(); len(nodes) > 0 && !auo.mutation.RecipientColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.RecipientColliTable,
			Columns: []string{address.RecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RecipientColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.RecipientColliTable,
			Columns: []string{address.RecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RecipientConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.RecipientConsolidationTable,
			Columns: []string{address.RecipientConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RecipientConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.RecipientConsolidationTable,
			Columns: []string{address.RecipientConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CompanyAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressTable,
			Columns: []string{address.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCompanyAddressIDs(); len(nodes) > 0 && !auo.mutation.CompanyAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressTable,
			Columns: []string{address.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CompanyAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressTable,
			Columns: []string{address.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.LocationTable,
			Columns: []string{address.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedLocationIDs(); len(nodes) > 0 && !auo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.LocationTable,
			Columns: []string{address.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.LocationTable,
			Columns: []string{address.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SenderColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.SenderColliTable,
			Columns: []string{address.SenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSenderColliIDs(); len(nodes) > 0 && !auo.mutation.SenderColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.SenderColliTable,
			Columns: []string{address.SenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SenderColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.SenderColliTable,
			Columns: []string{address.SenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SenderConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.SenderConsolidationTable,
			Columns: []string{address.SenderConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SenderConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.SenderConsolidationTable,
			Columns: []string{address.SenderConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ReturnSenderColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnSenderColliTable,
			Columns: []string{address.ReturnSenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedReturnSenderColliIDs(); len(nodes) > 0 && !auo.mutation.ReturnSenderColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnSenderColliTable,
			Columns: []string{address.ReturnSenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ReturnSenderColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnSenderColliTable,
			Columns: []string{address.ReturnSenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ReturnRecipientColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnRecipientColliTable,
			Columns: []string{address.ReturnRecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedReturnRecipientColliIDs(); len(nodes) > 0 && !auo.mutation.ReturnRecipientColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnRecipientColliTable,
			Columns: []string{address.ReturnRecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ReturnRecipientColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnRecipientColliTable,
			Columns: []string{address.ReturnRecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.CountryTable,
			Columns: []string{address.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.CountryTable,
			Columns: []string{address.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
