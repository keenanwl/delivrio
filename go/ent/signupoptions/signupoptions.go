// Code generated by ent, DO NOT EDIT.

package signupoptions

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the signupoptions type in the database.
	Label = "signup_options"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBetterDeliveryOptions holds the string denoting the better_delivery_options field in the database.
	FieldBetterDeliveryOptions = "better_delivery_options"
	// FieldImprovePickPack holds the string denoting the improve_pick_pack field in the database.
	FieldImprovePickPack = "improve_pick_pack"
	// FieldShippingLabel holds the string denoting the shipping_label field in the database.
	FieldShippingLabel = "shipping_label"
	// FieldCustomDocs holds the string denoting the custom_docs field in the database.
	FieldCustomDocs = "custom_docs"
	// FieldReducedCosts holds the string denoting the reduced_costs field in the database.
	FieldReducedCosts = "reduced_costs"
	// FieldEasyReturns holds the string denoting the easy_returns field in the database.
	FieldEasyReturns = "easy_returns"
	// FieldClickCollect holds the string denoting the click_collect field in the database.
	FieldClickCollect = "click_collect"
	// FieldNumShipments holds the string denoting the num_shipments field in the database.
	FieldNumShipments = "num_shipments"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the signupoptions in the database.
	Table = "signup_options"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "signup_options"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_signup_options"
)

// Columns holds all SQL columns for signupoptions fields.
var Columns = []string{
	FieldID,
	FieldBetterDeliveryOptions,
	FieldImprovePickPack,
	FieldShippingLabel,
	FieldCustomDocs,
	FieldReducedCosts,
	FieldEasyReturns,
	FieldClickCollect,
	FieldNumShipments,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "signup_options"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_signup_options",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the SignupOptions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBetterDeliveryOptions orders the results by the better_delivery_options field.
func ByBetterDeliveryOptions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBetterDeliveryOptions, opts...).ToFunc()
}

// ByImprovePickPack orders the results by the improve_pick_pack field.
func ByImprovePickPack(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImprovePickPack, opts...).ToFunc()
}

// ByShippingLabel orders the results by the shipping_label field.
func ByShippingLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingLabel, opts...).ToFunc()
}

// ByCustomDocs orders the results by the custom_docs field.
func ByCustomDocs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomDocs, opts...).ToFunc()
}

// ByReducedCosts orders the results by the reduced_costs field.
func ByReducedCosts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReducedCosts, opts...).ToFunc()
}

// ByEasyReturns orders the results by the easy_returns field.
func ByEasyReturns(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEasyReturns, opts...).ToFunc()
}

// ByClickCollect orders the results by the click_collect field.
func ByClickCollect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClickCollect, opts...).ToFunc()
}

// ByNumShipments orders the results by the num_shipments field.
func ByNumShipments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumShipments, opts...).ToFunc()
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UsersTable, UsersColumn),
	)
}
