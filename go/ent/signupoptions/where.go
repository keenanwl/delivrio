// Code generated by ent, DO NOT EDIT.

package signupoptions

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldLTE(FieldID, id))
}

// BetterDeliveryOptions applies equality check predicate on the "better_delivery_options" field. It's identical to BetterDeliveryOptionsEQ.
func BetterDeliveryOptions(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldBetterDeliveryOptions, v))
}

// ImprovePickPack applies equality check predicate on the "improve_pick_pack" field. It's identical to ImprovePickPackEQ.
func ImprovePickPack(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldImprovePickPack, v))
}

// ShippingLabel applies equality check predicate on the "shipping_label" field. It's identical to ShippingLabelEQ.
func ShippingLabel(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldShippingLabel, v))
}

// CustomDocs applies equality check predicate on the "custom_docs" field. It's identical to CustomDocsEQ.
func CustomDocs(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldCustomDocs, v))
}

// ReducedCosts applies equality check predicate on the "reduced_costs" field. It's identical to ReducedCostsEQ.
func ReducedCosts(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldReducedCosts, v))
}

// EasyReturns applies equality check predicate on the "easy_returns" field. It's identical to EasyReturnsEQ.
func EasyReturns(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldEasyReturns, v))
}

// ClickCollect applies equality check predicate on the "click_collect" field. It's identical to ClickCollectEQ.
func ClickCollect(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldClickCollect, v))
}

// NumShipments applies equality check predicate on the "num_shipments" field. It's identical to NumShipmentsEQ.
func NumShipments(v int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldNumShipments, v))
}

// BetterDeliveryOptionsEQ applies the EQ predicate on the "better_delivery_options" field.
func BetterDeliveryOptionsEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldBetterDeliveryOptions, v))
}

// BetterDeliveryOptionsNEQ applies the NEQ predicate on the "better_delivery_options" field.
func BetterDeliveryOptionsNEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldBetterDeliveryOptions, v))
}

// ImprovePickPackEQ applies the EQ predicate on the "improve_pick_pack" field.
func ImprovePickPackEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldImprovePickPack, v))
}

// ImprovePickPackNEQ applies the NEQ predicate on the "improve_pick_pack" field.
func ImprovePickPackNEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldImprovePickPack, v))
}

// ShippingLabelEQ applies the EQ predicate on the "shipping_label" field.
func ShippingLabelEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldShippingLabel, v))
}

// ShippingLabelNEQ applies the NEQ predicate on the "shipping_label" field.
func ShippingLabelNEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldShippingLabel, v))
}

// CustomDocsEQ applies the EQ predicate on the "custom_docs" field.
func CustomDocsEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldCustomDocs, v))
}

// CustomDocsNEQ applies the NEQ predicate on the "custom_docs" field.
func CustomDocsNEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldCustomDocs, v))
}

// ReducedCostsEQ applies the EQ predicate on the "reduced_costs" field.
func ReducedCostsEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldReducedCosts, v))
}

// ReducedCostsNEQ applies the NEQ predicate on the "reduced_costs" field.
func ReducedCostsNEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldReducedCosts, v))
}

// EasyReturnsEQ applies the EQ predicate on the "easy_returns" field.
func EasyReturnsEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldEasyReturns, v))
}

// EasyReturnsNEQ applies the NEQ predicate on the "easy_returns" field.
func EasyReturnsNEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldEasyReturns, v))
}

// ClickCollectEQ applies the EQ predicate on the "click_collect" field.
func ClickCollectEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldClickCollect, v))
}

// ClickCollectNEQ applies the NEQ predicate on the "click_collect" field.
func ClickCollectNEQ(v bool) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldClickCollect, v))
}

// NumShipmentsEQ applies the EQ predicate on the "num_shipments" field.
func NumShipmentsEQ(v int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldEQ(FieldNumShipments, v))
}

// NumShipmentsNEQ applies the NEQ predicate on the "num_shipments" field.
func NumShipmentsNEQ(v int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNEQ(FieldNumShipments, v))
}

// NumShipmentsIn applies the In predicate on the "num_shipments" field.
func NumShipmentsIn(vs ...int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldIn(FieldNumShipments, vs...))
}

// NumShipmentsNotIn applies the NotIn predicate on the "num_shipments" field.
func NumShipmentsNotIn(vs ...int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldNotIn(FieldNumShipments, vs...))
}

// NumShipmentsGT applies the GT predicate on the "num_shipments" field.
func NumShipmentsGT(v int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldGT(FieldNumShipments, v))
}

// NumShipmentsGTE applies the GTE predicate on the "num_shipments" field.
func NumShipmentsGTE(v int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldGTE(FieldNumShipments, v))
}

// NumShipmentsLT applies the LT predicate on the "num_shipments" field.
func NumShipmentsLT(v int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldLT(FieldNumShipments, v))
}

// NumShipmentsLTE applies the LTE predicate on the "num_shipments" field.
func NumShipmentsLTE(v int) predicate.SignupOptions {
	return predicate.SignupOptions(sql.FieldLTE(FieldNumShipments, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.SignupOptions {
	return predicate.SignupOptions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.SignupOptions {
	return predicate.SignupOptions(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SignupOptions) predicate.SignupOptions {
	return predicate.SignupOptions(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SignupOptions) predicate.SignupOptions {
	return predicate.SignupOptions(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SignupOptions) predicate.SignupOptions {
	return predicate.SignupOptions(sql.NotPredicates(p))
}
