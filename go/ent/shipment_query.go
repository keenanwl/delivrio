// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentQuery is the builder for querying Shipment entities.
type ShipmentQuery struct {
	config
	ctx                       *QueryContext
	order                     []shipment.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Shipment
	withTenant                *TenantQuery
	withCarrier               *CarrierQuery
	withShipmentHistory       *ShipmentHistoryQuery
	withShipmentBring         *ShipmentBringQuery
	withShipmentDAO           *ShipmentDAOQuery
	withShipmentDF            *ShipmentDFQuery
	withShipmentDSV           *ShipmentDSVQuery
	withShipmentEasyPost      *ShipmentEasyPostQuery
	withShipmentPostNord      *ShipmentPostNordQuery
	withShipmentGLS           *ShipmentGLSQuery
	withShipmentUSPS          *ShipmentUSPSQuery
	withConsolidation         *ConsolidationQuery
	withOldConsolidation      *ConsolidationQuery
	withShipmentParcel        *ShipmentParcelQuery
	withShipmentPallet        *ShipmentPalletQuery
	withFKs                   bool
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*Shipment) error
	withNamedShipmentHistory  map[string]*ShipmentHistoryQuery
	withNamedOldConsolidation map[string]*ConsolidationQuery
	withNamedShipmentParcel   map[string]*ShipmentParcelQuery
	withNamedShipmentPallet   map[string]*ShipmentPalletQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShipmentQuery builder.
func (sq *ShipmentQuery) Where(ps ...predicate.Shipment) *ShipmentQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *ShipmentQuery) Limit(limit int) *ShipmentQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *ShipmentQuery) Offset(offset int) *ShipmentQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *ShipmentQuery) Unique(unique bool) *ShipmentQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *ShipmentQuery) Order(o ...shipment.OrderOption) *ShipmentQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryTenant chains the current query on the "tenant" edge.
func (sq *ShipmentQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.TenantTable, shipment.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrier chains the current query on the "carrier" edge.
func (sq *ShipmentQuery) QueryCarrier() *CarrierQuery {
	query := (&CarrierClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.CarrierTable, shipment.CarrierColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentHistory chains the current query on the "shipment_history" edge.
func (sq *ShipmentQuery) QueryShipmentHistory() *ShipmentHistoryQuery {
	query := (&ShipmentHistoryClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmenthistory.Table, shipmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentHistoryTable, shipment.ShipmentHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentBring chains the current query on the "shipment_bring" edge.
func (sq *ShipmentQuery) QueryShipmentBring() *ShipmentBringQuery {
	query := (&ShipmentBringClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentbring.Table, shipmentbring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentBringTable, shipment.ShipmentBringColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentDAO chains the current query on the "shipment_dao" edge.
func (sq *ShipmentQuery) QueryShipmentDAO() *ShipmentDAOQuery {
	query := (&ShipmentDAOClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentdao.Table, shipmentdao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentDAOTable, shipment.ShipmentDAOColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentDF chains the current query on the "shipment_df" edge.
func (sq *ShipmentQuery) QueryShipmentDF() *ShipmentDFQuery {
	query := (&ShipmentDFClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentdf.Table, shipmentdf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentDFTable, shipment.ShipmentDFColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentDSV chains the current query on the "shipment_dsv" edge.
func (sq *ShipmentQuery) QueryShipmentDSV() *ShipmentDSVQuery {
	query := (&ShipmentDSVClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentdsv.Table, shipmentdsv.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentDSVTable, shipment.ShipmentDSVColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentEasyPost chains the current query on the "shipment_easy_post" edge.
func (sq *ShipmentQuery) QueryShipmentEasyPost() *ShipmentEasyPostQuery {
	query := (&ShipmentEasyPostClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmenteasypost.Table, shipmenteasypost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentEasyPostTable, shipment.ShipmentEasyPostColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentPostNord chains the current query on the "shipment_post_nord" edge.
func (sq *ShipmentQuery) QueryShipmentPostNord() *ShipmentPostNordQuery {
	query := (&ShipmentPostNordClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentpostnord.Table, shipmentpostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentPostNordTable, shipment.ShipmentPostNordColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentGLS chains the current query on the "shipment_gls" edge.
func (sq *ShipmentQuery) QueryShipmentGLS() *ShipmentGLSQuery {
	query := (&ShipmentGLSClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentgls.Table, shipmentgls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentGLSTable, shipment.ShipmentGLSColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentUSPS chains the current query on the "shipment_usps" edge.
func (sq *ShipmentQuery) QueryShipmentUSPS() *ShipmentUSPSQuery {
	query := (&ShipmentUSPSClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentusps.Table, shipmentusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentUSPSTable, shipment.ShipmentUSPSColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConsolidation chains the current query on the "consolidation" edge.
func (sq *ShipmentQuery) QueryConsolidation() *ConsolidationQuery {
	query := (&ConsolidationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ConsolidationTable, shipment.ConsolidationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOldConsolidation chains the current query on the "old_consolidation" edge.
func (sq *ShipmentQuery) QueryOldConsolidation() *ConsolidationQuery {
	query := (&ConsolidationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, shipment.OldConsolidationTable, shipment.OldConsolidationPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentParcel chains the current query on the "shipment_parcel" edge.
func (sq *ShipmentQuery) QueryShipmentParcel() *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentParcelTable, shipment.ShipmentParcelColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentPallet chains the current query on the "shipment_pallet" edge.
func (sq *ShipmentQuery) QueryShipmentPallet() *ShipmentPalletQuery {
	query := (&ShipmentPalletClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, selector),
			sqlgraph.To(shipmentpallet.Table, shipmentpallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentPalletTable, shipment.ShipmentPalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Shipment entity from the query.
// Returns a *NotFoundError when no Shipment was found.
func (sq *ShipmentQuery) First(ctx context.Context) (*Shipment, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shipment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *ShipmentQuery) FirstX(ctx context.Context) *Shipment {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Shipment ID from the query.
// Returns a *NotFoundError when no Shipment ID was found.
func (sq *ShipmentQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shipment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *ShipmentQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Shipment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Shipment entity is found.
// Returns a *NotFoundError when no Shipment entities are found.
func (sq *ShipmentQuery) Only(ctx context.Context) (*Shipment, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shipment.Label}
	default:
		return nil, &NotSingularError{shipment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *ShipmentQuery) OnlyX(ctx context.Context) *Shipment {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Shipment ID in the query.
// Returns a *NotSingularError when more than one Shipment ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *ShipmentQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shipment.Label}
	default:
		err = &NotSingularError{shipment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *ShipmentQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Shipments.
func (sq *ShipmentQuery) All(ctx context.Context) ([]*Shipment, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryAll)
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Shipment, *ShipmentQuery]()
	return withInterceptors[[]*Shipment](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *ShipmentQuery) AllX(ctx context.Context) []*Shipment {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Shipment IDs.
func (sq *ShipmentQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryIDs)
	if err = sq.Select(shipment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *ShipmentQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *ShipmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryCount)
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*ShipmentQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *ShipmentQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *ShipmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryExist)
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *ShipmentQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShipmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *ShipmentQuery) Clone() *ShipmentQuery {
	if sq == nil {
		return nil
	}
	return &ShipmentQuery{
		config:               sq.config,
		ctx:                  sq.ctx.Clone(),
		order:                append([]shipment.OrderOption{}, sq.order...),
		inters:               append([]Interceptor{}, sq.inters...),
		predicates:           append([]predicate.Shipment{}, sq.predicates...),
		withTenant:           sq.withTenant.Clone(),
		withCarrier:          sq.withCarrier.Clone(),
		withShipmentHistory:  sq.withShipmentHistory.Clone(),
		withShipmentBring:    sq.withShipmentBring.Clone(),
		withShipmentDAO:      sq.withShipmentDAO.Clone(),
		withShipmentDF:       sq.withShipmentDF.Clone(),
		withShipmentDSV:      sq.withShipmentDSV.Clone(),
		withShipmentEasyPost: sq.withShipmentEasyPost.Clone(),
		withShipmentPostNord: sq.withShipmentPostNord.Clone(),
		withShipmentGLS:      sq.withShipmentGLS.Clone(),
		withShipmentUSPS:     sq.withShipmentUSPS.Clone(),
		withConsolidation:    sq.withConsolidation.Clone(),
		withOldConsolidation: sq.withOldConsolidation.Clone(),
		withShipmentParcel:   sq.withShipmentParcel.Clone(),
		withShipmentPallet:   sq.withShipmentPallet.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithTenant(opts ...func(*TenantQuery)) *ShipmentQuery {
	query := (&TenantClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withTenant = query
	return sq
}

// WithCarrier tells the query-builder to eager-load the nodes that are connected to
// the "carrier" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithCarrier(opts ...func(*CarrierQuery)) *ShipmentQuery {
	query := (&CarrierClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withCarrier = query
	return sq
}

// WithShipmentHistory tells the query-builder to eager-load the nodes that are connected to
// the "shipment_history" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentHistory(opts ...func(*ShipmentHistoryQuery)) *ShipmentQuery {
	query := (&ShipmentHistoryClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentHistory = query
	return sq
}

// WithShipmentBring tells the query-builder to eager-load the nodes that are connected to
// the "shipment_bring" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentBring(opts ...func(*ShipmentBringQuery)) *ShipmentQuery {
	query := (&ShipmentBringClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentBring = query
	return sq
}

// WithShipmentDAO tells the query-builder to eager-load the nodes that are connected to
// the "shipment_dao" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentDAO(opts ...func(*ShipmentDAOQuery)) *ShipmentQuery {
	query := (&ShipmentDAOClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentDAO = query
	return sq
}

// WithShipmentDF tells the query-builder to eager-load the nodes that are connected to
// the "shipment_df" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentDF(opts ...func(*ShipmentDFQuery)) *ShipmentQuery {
	query := (&ShipmentDFClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentDF = query
	return sq
}

// WithShipmentDSV tells the query-builder to eager-load the nodes that are connected to
// the "shipment_dsv" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentDSV(opts ...func(*ShipmentDSVQuery)) *ShipmentQuery {
	query := (&ShipmentDSVClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentDSV = query
	return sq
}

// WithShipmentEasyPost tells the query-builder to eager-load the nodes that are connected to
// the "shipment_easy_post" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentEasyPost(opts ...func(*ShipmentEasyPostQuery)) *ShipmentQuery {
	query := (&ShipmentEasyPostClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentEasyPost = query
	return sq
}

// WithShipmentPostNord tells the query-builder to eager-load the nodes that are connected to
// the "shipment_post_nord" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentPostNord(opts ...func(*ShipmentPostNordQuery)) *ShipmentQuery {
	query := (&ShipmentPostNordClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentPostNord = query
	return sq
}

// WithShipmentGLS tells the query-builder to eager-load the nodes that are connected to
// the "shipment_gls" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentGLS(opts ...func(*ShipmentGLSQuery)) *ShipmentQuery {
	query := (&ShipmentGLSClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentGLS = query
	return sq
}

// WithShipmentUSPS tells the query-builder to eager-load the nodes that are connected to
// the "shipment_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentUSPS(opts ...func(*ShipmentUSPSQuery)) *ShipmentQuery {
	query := (&ShipmentUSPSClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentUSPS = query
	return sq
}

// WithConsolidation tells the query-builder to eager-load the nodes that are connected to
// the "consolidation" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithConsolidation(opts ...func(*ConsolidationQuery)) *ShipmentQuery {
	query := (&ConsolidationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withConsolidation = query
	return sq
}

// WithOldConsolidation tells the query-builder to eager-load the nodes that are connected to
// the "old_consolidation" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithOldConsolidation(opts ...func(*ConsolidationQuery)) *ShipmentQuery {
	query := (&ConsolidationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withOldConsolidation = query
	return sq
}

// WithShipmentParcel tells the query-builder to eager-load the nodes that are connected to
// the "shipment_parcel" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentParcel(opts ...func(*ShipmentParcelQuery)) *ShipmentQuery {
	query := (&ShipmentParcelClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentParcel = query
	return sq
}

// WithShipmentPallet tells the query-builder to eager-load the nodes that are connected to
// the "shipment_pallet" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithShipmentPallet(opts ...func(*ShipmentPalletQuery)) *ShipmentQuery {
	query := (&ShipmentPalletClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withShipmentPallet = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Shipment.Query().
//		GroupBy(shipment.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *ShipmentQuery) GroupBy(field string, fields ...string) *ShipmentGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ShipmentGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = shipment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Shipment.Query().
//		Select(shipment.FieldTenantID).
//		Scan(ctx, &v)
func (sq *ShipmentQuery) Select(fields ...string) *ShipmentSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &ShipmentSelect{ShipmentQuery: sq}
	sbuild.label = shipment.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ShipmentSelect configured with the given aggregations.
func (sq *ShipmentQuery) Aggregate(fns ...AggregateFunc) *ShipmentSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *ShipmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !shipment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	if shipment.Policy == nil {
		return errors.New("ent: uninitialized shipment.Policy (forgotten import ent/runtime?)")
	}
	if err := shipment.Policy.EvalQuery(ctx, sq); err != nil {
		return err
	}
	return nil
}

func (sq *ShipmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Shipment, error) {
	var (
		nodes       = []*Shipment{}
		withFKs     = sq.withFKs
		_spec       = sq.querySpec()
		loadedTypes = [15]bool{
			sq.withTenant != nil,
			sq.withCarrier != nil,
			sq.withShipmentHistory != nil,
			sq.withShipmentBring != nil,
			sq.withShipmentDAO != nil,
			sq.withShipmentDF != nil,
			sq.withShipmentDSV != nil,
			sq.withShipmentEasyPost != nil,
			sq.withShipmentPostNord != nil,
			sq.withShipmentGLS != nil,
			sq.withShipmentUSPS != nil,
			sq.withConsolidation != nil,
			sq.withOldConsolidation != nil,
			sq.withShipmentParcel != nil,
			sq.withShipmentPallet != nil,
		}
	)
	if sq.withCarrier != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, shipment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Shipment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Shipment{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withTenant; query != nil {
		if err := sq.loadTenant(ctx, query, nodes, nil,
			func(n *Shipment, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withCarrier; query != nil {
		if err := sq.loadCarrier(ctx, query, nodes, nil,
			func(n *Shipment, e *Carrier) { n.Edges.Carrier = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentHistory; query != nil {
		if err := sq.loadShipmentHistory(ctx, query, nodes,
			func(n *Shipment) { n.Edges.ShipmentHistory = []*ShipmentHistory{} },
			func(n *Shipment, e *ShipmentHistory) { n.Edges.ShipmentHistory = append(n.Edges.ShipmentHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentBring; query != nil {
		if err := sq.loadShipmentBring(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentBring) { n.Edges.ShipmentBring = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentDAO; query != nil {
		if err := sq.loadShipmentDAO(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentDAO) { n.Edges.ShipmentDAO = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentDF; query != nil {
		if err := sq.loadShipmentDF(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentDF) { n.Edges.ShipmentDF = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentDSV; query != nil {
		if err := sq.loadShipmentDSV(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentDSV) { n.Edges.ShipmentDSV = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentEasyPost; query != nil {
		if err := sq.loadShipmentEasyPost(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentEasyPost) { n.Edges.ShipmentEasyPost = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentPostNord; query != nil {
		if err := sq.loadShipmentPostNord(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentPostNord) { n.Edges.ShipmentPostNord = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentGLS; query != nil {
		if err := sq.loadShipmentGLS(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentGLS) { n.Edges.ShipmentGLS = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentUSPS; query != nil {
		if err := sq.loadShipmentUSPS(ctx, query, nodes, nil,
			func(n *Shipment, e *ShipmentUSPS) { n.Edges.ShipmentUSPS = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withConsolidation; query != nil {
		if err := sq.loadConsolidation(ctx, query, nodes, nil,
			func(n *Shipment, e *Consolidation) { n.Edges.Consolidation = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withOldConsolidation; query != nil {
		if err := sq.loadOldConsolidation(ctx, query, nodes,
			func(n *Shipment) { n.Edges.OldConsolidation = []*Consolidation{} },
			func(n *Shipment, e *Consolidation) { n.Edges.OldConsolidation = append(n.Edges.OldConsolidation, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentParcel; query != nil {
		if err := sq.loadShipmentParcel(ctx, query, nodes,
			func(n *Shipment) { n.Edges.ShipmentParcel = []*ShipmentParcel{} },
			func(n *Shipment, e *ShipmentParcel) { n.Edges.ShipmentParcel = append(n.Edges.ShipmentParcel, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withShipmentPallet; query != nil {
		if err := sq.loadShipmentPallet(ctx, query, nodes,
			func(n *Shipment) { n.Edges.ShipmentPallet = []*ShipmentPallet{} },
			func(n *Shipment, e *ShipmentPallet) { n.Edges.ShipmentPallet = append(n.Edges.ShipmentPallet, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedShipmentHistory {
		if err := sq.loadShipmentHistory(ctx, query, nodes,
			func(n *Shipment) { n.appendNamedShipmentHistory(name) },
			func(n *Shipment, e *ShipmentHistory) { n.appendNamedShipmentHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedOldConsolidation {
		if err := sq.loadOldConsolidation(ctx, query, nodes,
			func(n *Shipment) { n.appendNamedOldConsolidation(name) },
			func(n *Shipment, e *Consolidation) { n.appendNamedOldConsolidation(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedShipmentParcel {
		if err := sq.loadShipmentParcel(ctx, query, nodes,
			func(n *Shipment) { n.appendNamedShipmentParcel(name) },
			func(n *Shipment, e *ShipmentParcel) { n.appendNamedShipmentParcel(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedShipmentPallet {
		if err := sq.loadShipmentPallet(ctx, query, nodes,
			func(n *Shipment) { n.appendNamedShipmentPallet(name) },
			func(n *Shipment, e *ShipmentPallet) { n.appendNamedShipmentPallet(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sq.loadTotal {
		if err := sq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *ShipmentQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Shipment)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadCarrier(ctx context.Context, query *CarrierQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *Carrier)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Shipment)
	for i := range nodes {
		if nodes[i].shipment_carrier == nil {
			continue
		}
		fk := *nodes[i].shipment_carrier
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrier.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_carrier" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentHistory(ctx context.Context, query *ShipmentHistoryQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ShipmentHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentBring(ctx context.Context, query *ShipmentBringQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentBring)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentBring(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentBringColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_bring
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_bring" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_bring" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentDAO(ctx context.Context, query *ShipmentDAOQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentDAO)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentDAO(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentDAOColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_dao
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_dao" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_dao" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentDF(ctx context.Context, query *ShipmentDFQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentDF)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentDF(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentDFColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_df
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_df" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_df" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentDSV(ctx context.Context, query *ShipmentDSVQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentDSV)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentDSV(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentDSVColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_dsv
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_dsv" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_dsv" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentEasyPost(ctx context.Context, query *ShipmentEasyPostQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentEasyPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentEasyPost(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentEasyPostColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_easy_post
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_easy_post" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_easy_post" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentPostNord(ctx context.Context, query *ShipmentPostNordQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentPostNord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentPostNord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentPostNordColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_post_nord
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_post_nord" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_post_nord" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentGLS(ctx context.Context, query *ShipmentGLSQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentGLS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentGLS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentGLSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_gls
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_gls" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_gls" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentUSPS(ctx context.Context, query *ShipmentUSPSQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentUSPS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentUSPS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentUSPSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_usps
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_usps" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_usps" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadConsolidation(ctx context.Context, query *ConsolidationQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *Consolidation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Consolidation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ConsolidationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_consolidation
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_consolidation" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_consolidation" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadOldConsolidation(ctx context.Context, query *ConsolidationQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *Consolidation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Shipment)
	nids := make(map[pulid.ID]map[*Shipment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(shipment.OldConsolidationTable)
		s.Join(joinT).On(s.C(consolidation.FieldID), joinT.C(shipment.OldConsolidationPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(shipment.OldConsolidationPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(shipment.OldConsolidationPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Shipment]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Consolidation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "old_consolidation" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentParcel(ctx context.Context, query *ShipmentParcelQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentParcel)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ShipmentParcel(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentParcelColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_parcel
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_parcel" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_parcel" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *ShipmentQuery) loadShipmentPallet(ctx context.Context, query *ShipmentPalletQuery, nodes []*Shipment, init func(*Shipment), assign func(*Shipment, *ShipmentPallet)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Shipment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ShipmentPallet(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipment.ShipmentPalletColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_shipment_pallet
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_shipment_pallet" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_shipment_pallet" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sq *ShipmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *ShipmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(shipment.Table, shipment.Columns, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipment.FieldID)
		for i := range fields {
			if fields[i] != shipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sq.withTenant != nil {
			_spec.Node.AddColumnOnce(shipment.FieldTenantID)
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *ShipmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(shipment.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = shipment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedShipmentHistory tells the query-builder to eager-load the nodes that are connected to the "shipment_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithNamedShipmentHistory(name string, opts ...func(*ShipmentHistoryQuery)) *ShipmentQuery {
	query := (&ShipmentHistoryClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedShipmentHistory == nil {
		sq.withNamedShipmentHistory = make(map[string]*ShipmentHistoryQuery)
	}
	sq.withNamedShipmentHistory[name] = query
	return sq
}

// WithNamedOldConsolidation tells the query-builder to eager-load the nodes that are connected to the "old_consolidation"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithNamedOldConsolidation(name string, opts ...func(*ConsolidationQuery)) *ShipmentQuery {
	query := (&ConsolidationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedOldConsolidation == nil {
		sq.withNamedOldConsolidation = make(map[string]*ConsolidationQuery)
	}
	sq.withNamedOldConsolidation[name] = query
	return sq
}

// WithNamedShipmentParcel tells the query-builder to eager-load the nodes that are connected to the "shipment_parcel"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithNamedShipmentParcel(name string, opts ...func(*ShipmentParcelQuery)) *ShipmentQuery {
	query := (&ShipmentParcelClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedShipmentParcel == nil {
		sq.withNamedShipmentParcel = make(map[string]*ShipmentParcelQuery)
	}
	sq.withNamedShipmentParcel[name] = query
	return sq
}

// WithNamedShipmentPallet tells the query-builder to eager-load the nodes that are connected to the "shipment_pallet"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *ShipmentQuery) WithNamedShipmentPallet(name string, opts ...func(*ShipmentPalletQuery)) *ShipmentQuery {
	query := (&ShipmentPalletClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedShipmentPallet == nil {
		sq.withNamedShipmentPallet = make(map[string]*ShipmentPalletQuery)
	}
	sq.withNamedShipmentPallet[name] = query
	return sq
}

// ShipmentGroupBy is the group-by builder for Shipment entities.
type ShipmentGroupBy struct {
	selector
	build *ShipmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *ShipmentGroupBy) Aggregate(fns ...AggregateFunc) *ShipmentGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *ShipmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, ent.OpQueryGroupBy)
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentQuery, *ShipmentGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *ShipmentGroupBy) sqlScan(ctx context.Context, root *ShipmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ShipmentSelect is the builder for selecting fields of Shipment entities.
type ShipmentSelect struct {
	*ShipmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *ShipmentSelect) Aggregate(fns ...AggregateFunc) *ShipmentSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *ShipmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, ent.OpQuerySelect)
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentQuery, *ShipmentSelect](ctx, ss.ShipmentQuery, ss, ss.inters, v)
}

func (ss *ShipmentSelect) sqlScan(ctx context.Context, root *ShipmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
