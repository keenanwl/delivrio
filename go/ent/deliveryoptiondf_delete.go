// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionDFDelete is the builder for deleting a DeliveryOptionDF entity.
type DeliveryOptionDFDelete struct {
	config
	hooks    []Hook
	mutation *DeliveryOptionDFMutation
}

// Where appends a list predicates to the DeliveryOptionDFDelete builder.
func (dodd *DeliveryOptionDFDelete) Where(ps ...predicate.DeliveryOptionDF) *DeliveryOptionDFDelete {
	dodd.mutation.Where(ps...)
	return dodd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dodd *DeliveryOptionDFDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dodd.sqlExec, dodd.mutation, dodd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dodd *DeliveryOptionDFDelete) ExecX(ctx context.Context) int {
	n, err := dodd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dodd *DeliveryOptionDFDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(deliveryoptiondf.Table, sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString))
	if ps := dodd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dodd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dodd.mutation.done = true
	return affected, err
}

// DeliveryOptionDFDeleteOne is the builder for deleting a single DeliveryOptionDF entity.
type DeliveryOptionDFDeleteOne struct {
	dodd *DeliveryOptionDFDelete
}

// Where appends a list predicates to the DeliveryOptionDFDelete builder.
func (doddo *DeliveryOptionDFDeleteOne) Where(ps ...predicate.DeliveryOptionDF) *DeliveryOptionDFDeleteOne {
	doddo.dodd.mutation.Where(ps...)
	return doddo
}

// Exec executes the deletion query.
func (doddo *DeliveryOptionDFDeleteOne) Exec(ctx context.Context) error {
	n, err := doddo.dodd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{deliveryoptiondf.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (doddo *DeliveryOptionDFDeleteOne) ExecX(ctx context.Context) {
	if err := doddo.Exec(ctx); err != nil {
		panic(err)
	}
}
