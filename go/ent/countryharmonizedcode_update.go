// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CountryHarmonizedCodeUpdate is the builder for updating CountryHarmonizedCode entities.
type CountryHarmonizedCodeUpdate struct {
	config
	hooks    []Hook
	mutation *CountryHarmonizedCodeMutation
}

// Where appends a list predicates to the CountryHarmonizedCodeUpdate builder.
func (chcu *CountryHarmonizedCodeUpdate) Where(ps ...predicate.CountryHarmonizedCode) *CountryHarmonizedCodeUpdate {
	chcu.mutation.Where(ps...)
	return chcu
}

// SetTenantID sets the "tenant_id" field.
func (chcu *CountryHarmonizedCodeUpdate) SetTenantID(pu pulid.ID) *CountryHarmonizedCodeUpdate {
	chcu.mutation.SetTenantID(pu)
	return chcu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (chcu *CountryHarmonizedCodeUpdate) SetNillableTenantID(pu *pulid.ID) *CountryHarmonizedCodeUpdate {
	if pu != nil {
		chcu.SetTenantID(*pu)
	}
	return chcu
}

// SetCode sets the "code" field.
func (chcu *CountryHarmonizedCodeUpdate) SetCode(s string) *CountryHarmonizedCodeUpdate {
	chcu.mutation.SetCode(s)
	return chcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (chcu *CountryHarmonizedCodeUpdate) SetNillableCode(s *string) *CountryHarmonizedCodeUpdate {
	if s != nil {
		chcu.SetCode(*s)
	}
	return chcu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (chcu *CountryHarmonizedCodeUpdate) SetTenant(t *Tenant) *CountryHarmonizedCodeUpdate {
	return chcu.SetTenantID(t.ID)
}

// SetInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID.
func (chcu *CountryHarmonizedCodeUpdate) SetInventoryItemID(id pulid.ID) *CountryHarmonizedCodeUpdate {
	chcu.mutation.SetInventoryItemID(id)
	return chcu
}

// SetInventoryItem sets the "inventory_item" edge to the InventoryItem entity.
func (chcu *CountryHarmonizedCodeUpdate) SetInventoryItem(i *InventoryItem) *CountryHarmonizedCodeUpdate {
	return chcu.SetInventoryItemID(i.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (chcu *CountryHarmonizedCodeUpdate) SetCountryID(id pulid.ID) *CountryHarmonizedCodeUpdate {
	chcu.mutation.SetCountryID(id)
	return chcu
}

// SetCountry sets the "country" edge to the Country entity.
func (chcu *CountryHarmonizedCodeUpdate) SetCountry(c *Country) *CountryHarmonizedCodeUpdate {
	return chcu.SetCountryID(c.ID)
}

// Mutation returns the CountryHarmonizedCodeMutation object of the builder.
func (chcu *CountryHarmonizedCodeUpdate) Mutation() *CountryHarmonizedCodeMutation {
	return chcu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (chcu *CountryHarmonizedCodeUpdate) ClearTenant() *CountryHarmonizedCodeUpdate {
	chcu.mutation.ClearTenant()
	return chcu
}

// ClearInventoryItem clears the "inventory_item" edge to the InventoryItem entity.
func (chcu *CountryHarmonizedCodeUpdate) ClearInventoryItem() *CountryHarmonizedCodeUpdate {
	chcu.mutation.ClearInventoryItem()
	return chcu
}

// ClearCountry clears the "country" edge to the Country entity.
func (chcu *CountryHarmonizedCodeUpdate) ClearCountry() *CountryHarmonizedCodeUpdate {
	chcu.mutation.ClearCountry()
	return chcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chcu *CountryHarmonizedCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, chcu.sqlSave, chcu.mutation, chcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chcu *CountryHarmonizedCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := chcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chcu *CountryHarmonizedCodeUpdate) Exec(ctx context.Context) error {
	_, err := chcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcu *CountryHarmonizedCodeUpdate) ExecX(ctx context.Context) {
	if err := chcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chcu *CountryHarmonizedCodeUpdate) check() error {
	if chcu.mutation.TenantCleared() && len(chcu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CountryHarmonizedCode.tenant"`)
	}
	if chcu.mutation.InventoryItemCleared() && len(chcu.mutation.InventoryItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CountryHarmonizedCode.inventory_item"`)
	}
	if chcu.mutation.CountryCleared() && len(chcu.mutation.CountryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CountryHarmonizedCode.country"`)
	}
	return nil
}

func (chcu *CountryHarmonizedCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := chcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(countryharmonizedcode.Table, countryharmonizedcode.Columns, sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString))
	if ps := chcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chcu.mutation.Code(); ok {
		_spec.SetField(countryharmonizedcode.FieldCode, field.TypeString, value)
	}
	if chcu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.TenantTable,
			Columns: []string{countryharmonizedcode.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.TenantTable,
			Columns: []string{countryharmonizedcode.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chcu.mutation.InventoryItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countryharmonizedcode.InventoryItemTable,
			Columns: []string{countryharmonizedcode.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcu.mutation.InventoryItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countryharmonizedcode.InventoryItemTable,
			Columns: []string{countryharmonizedcode.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chcu.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.CountryTable,
			Columns: []string{countryharmonizedcode.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcu.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.CountryTable,
			Columns: []string{countryharmonizedcode.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, chcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{countryharmonizedcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chcu.mutation.done = true
	return n, nil
}

// CountryHarmonizedCodeUpdateOne is the builder for updating a single CountryHarmonizedCode entity.
type CountryHarmonizedCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CountryHarmonizedCodeMutation
}

// SetTenantID sets the "tenant_id" field.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetTenantID(pu pulid.ID) *CountryHarmonizedCodeUpdateOne {
	chcuo.mutation.SetTenantID(pu)
	return chcuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetNillableTenantID(pu *pulid.ID) *CountryHarmonizedCodeUpdateOne {
	if pu != nil {
		chcuo.SetTenantID(*pu)
	}
	return chcuo
}

// SetCode sets the "code" field.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetCode(s string) *CountryHarmonizedCodeUpdateOne {
	chcuo.mutation.SetCode(s)
	return chcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetNillableCode(s *string) *CountryHarmonizedCodeUpdateOne {
	if s != nil {
		chcuo.SetCode(*s)
	}
	return chcuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetTenant(t *Tenant) *CountryHarmonizedCodeUpdateOne {
	return chcuo.SetTenantID(t.ID)
}

// SetInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetInventoryItemID(id pulid.ID) *CountryHarmonizedCodeUpdateOne {
	chcuo.mutation.SetInventoryItemID(id)
	return chcuo
}

// SetInventoryItem sets the "inventory_item" edge to the InventoryItem entity.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetInventoryItem(i *InventoryItem) *CountryHarmonizedCodeUpdateOne {
	return chcuo.SetInventoryItemID(i.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetCountryID(id pulid.ID) *CountryHarmonizedCodeUpdateOne {
	chcuo.mutation.SetCountryID(id)
	return chcuo
}

// SetCountry sets the "country" edge to the Country entity.
func (chcuo *CountryHarmonizedCodeUpdateOne) SetCountry(c *Country) *CountryHarmonizedCodeUpdateOne {
	return chcuo.SetCountryID(c.ID)
}

// Mutation returns the CountryHarmonizedCodeMutation object of the builder.
func (chcuo *CountryHarmonizedCodeUpdateOne) Mutation() *CountryHarmonizedCodeMutation {
	return chcuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (chcuo *CountryHarmonizedCodeUpdateOne) ClearTenant() *CountryHarmonizedCodeUpdateOne {
	chcuo.mutation.ClearTenant()
	return chcuo
}

// ClearInventoryItem clears the "inventory_item" edge to the InventoryItem entity.
func (chcuo *CountryHarmonizedCodeUpdateOne) ClearInventoryItem() *CountryHarmonizedCodeUpdateOne {
	chcuo.mutation.ClearInventoryItem()
	return chcuo
}

// ClearCountry clears the "country" edge to the Country entity.
func (chcuo *CountryHarmonizedCodeUpdateOne) ClearCountry() *CountryHarmonizedCodeUpdateOne {
	chcuo.mutation.ClearCountry()
	return chcuo
}

// Where appends a list predicates to the CountryHarmonizedCodeUpdate builder.
func (chcuo *CountryHarmonizedCodeUpdateOne) Where(ps ...predicate.CountryHarmonizedCode) *CountryHarmonizedCodeUpdateOne {
	chcuo.mutation.Where(ps...)
	return chcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chcuo *CountryHarmonizedCodeUpdateOne) Select(field string, fields ...string) *CountryHarmonizedCodeUpdateOne {
	chcuo.fields = append([]string{field}, fields...)
	return chcuo
}

// Save executes the query and returns the updated CountryHarmonizedCode entity.
func (chcuo *CountryHarmonizedCodeUpdateOne) Save(ctx context.Context) (*CountryHarmonizedCode, error) {
	return withHooks(ctx, chcuo.sqlSave, chcuo.mutation, chcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chcuo *CountryHarmonizedCodeUpdateOne) SaveX(ctx context.Context) *CountryHarmonizedCode {
	node, err := chcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chcuo *CountryHarmonizedCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := chcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcuo *CountryHarmonizedCodeUpdateOne) ExecX(ctx context.Context) {
	if err := chcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chcuo *CountryHarmonizedCodeUpdateOne) check() error {
	if chcuo.mutation.TenantCleared() && len(chcuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CountryHarmonizedCode.tenant"`)
	}
	if chcuo.mutation.InventoryItemCleared() && len(chcuo.mutation.InventoryItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CountryHarmonizedCode.inventory_item"`)
	}
	if chcuo.mutation.CountryCleared() && len(chcuo.mutation.CountryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CountryHarmonizedCode.country"`)
	}
	return nil
}

func (chcuo *CountryHarmonizedCodeUpdateOne) sqlSave(ctx context.Context) (_node *CountryHarmonizedCode, err error) {
	if err := chcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(countryharmonizedcode.Table, countryharmonizedcode.Columns, sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString))
	id, ok := chcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CountryHarmonizedCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, countryharmonizedcode.FieldID)
		for _, f := range fields {
			if !countryharmonizedcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != countryharmonizedcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chcuo.mutation.Code(); ok {
		_spec.SetField(countryharmonizedcode.FieldCode, field.TypeString, value)
	}
	if chcuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.TenantTable,
			Columns: []string{countryharmonizedcode.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.TenantTable,
			Columns: []string{countryharmonizedcode.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chcuo.mutation.InventoryItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countryharmonizedcode.InventoryItemTable,
			Columns: []string{countryharmonizedcode.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcuo.mutation.InventoryItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countryharmonizedcode.InventoryItemTable,
			Columns: []string{countryharmonizedcode.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chcuo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.CountryTable,
			Columns: []string{countryharmonizedcode.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcuo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.CountryTable,
			Columns: []string{countryharmonizedcode.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CountryHarmonizedCode{config: chcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{countryharmonizedcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chcuo.mutation.done = true
	return _node, nil
}
