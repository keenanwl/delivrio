// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceDSVCreate is the builder for creating a CarrierAdditionalServiceDSV entity.
type CarrierAdditionalServiceDSVCreate struct {
	config
	mutation *CarrierAdditionalServiceDSVMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (casdc *CarrierAdditionalServiceDSVCreate) SetLabel(s string) *CarrierAdditionalServiceDSVCreate {
	casdc.mutation.SetLabel(s)
	return casdc
}

// SetAPICode sets the "api_code" field.
func (casdc *CarrierAdditionalServiceDSVCreate) SetAPICode(s string) *CarrierAdditionalServiceDSVCreate {
	casdc.mutation.SetAPICode(s)
	return casdc
}

// SetID sets the "id" field.
func (casdc *CarrierAdditionalServiceDSVCreate) SetID(pu pulid.ID) *CarrierAdditionalServiceDSVCreate {
	casdc.mutation.SetID(pu)
	return casdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (casdc *CarrierAdditionalServiceDSVCreate) SetNillableID(pu *pulid.ID) *CarrierAdditionalServiceDSVCreate {
	if pu != nil {
		casdc.SetID(*pu)
	}
	return casdc
}

// AddCarrierServiceDSVIDs adds the "carrier_service_dsv" edge to the CarrierServiceDSV entity by IDs.
func (casdc *CarrierAdditionalServiceDSVCreate) AddCarrierServiceDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVCreate {
	casdc.mutation.AddCarrierServiceDSVIDs(ids...)
	return casdc
}

// AddCarrierServiceDSV adds the "carrier_service_dsv" edges to the CarrierServiceDSV entity.
func (casdc *CarrierAdditionalServiceDSVCreate) AddCarrierServiceDSV(c ...*CarrierServiceDSV) *CarrierAdditionalServiceDSVCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casdc.AddCarrierServiceDSVIDs(ids...)
}

// AddDeliveryOptionDSVIDs adds the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by IDs.
func (casdc *CarrierAdditionalServiceDSVCreate) AddDeliveryOptionDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVCreate {
	casdc.mutation.AddDeliveryOptionDSVIDs(ids...)
	return casdc
}

// AddDeliveryOptionDSV adds the "delivery_option_dsv" edges to the DeliveryOptionDSV entity.
func (casdc *CarrierAdditionalServiceDSVCreate) AddDeliveryOptionDSV(d ...*DeliveryOptionDSV) *CarrierAdditionalServiceDSVCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casdc.AddDeliveryOptionDSVIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceDSVMutation object of the builder.
func (casdc *CarrierAdditionalServiceDSVCreate) Mutation() *CarrierAdditionalServiceDSVMutation {
	return casdc.mutation
}

// Save creates the CarrierAdditionalServiceDSV in the database.
func (casdc *CarrierAdditionalServiceDSVCreate) Save(ctx context.Context) (*CarrierAdditionalServiceDSV, error) {
	if err := casdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, casdc.sqlSave, casdc.mutation, casdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (casdc *CarrierAdditionalServiceDSVCreate) SaveX(ctx context.Context) *CarrierAdditionalServiceDSV {
	v, err := casdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (casdc *CarrierAdditionalServiceDSVCreate) Exec(ctx context.Context) error {
	_, err := casdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casdc *CarrierAdditionalServiceDSVCreate) ExecX(ctx context.Context) {
	if err := casdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (casdc *CarrierAdditionalServiceDSVCreate) defaults() error {
	if _, ok := casdc.mutation.ID(); !ok {
		if carrieradditionalservicedsv.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrieradditionalservicedsv.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrieradditionalservicedsv.DefaultID()
		casdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (casdc *CarrierAdditionalServiceDSVCreate) check() error {
	if _, ok := casdc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "CarrierAdditionalServiceDSV.label"`)}
	}
	if _, ok := casdc.mutation.APICode(); !ok {
		return &ValidationError{Name: "api_code", err: errors.New(`ent: missing required field "CarrierAdditionalServiceDSV.api_code"`)}
	}
	return nil
}

func (casdc *CarrierAdditionalServiceDSVCreate) sqlSave(ctx context.Context) (*CarrierAdditionalServiceDSV, error) {
	if err := casdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := casdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, casdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	casdc.mutation.id = &_node.ID
	casdc.mutation.done = true
	return _node, nil
}

func (casdc *CarrierAdditionalServiceDSVCreate) createSpec() (*CarrierAdditionalServiceDSV, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierAdditionalServiceDSV{config: casdc.config}
		_spec = sqlgraph.NewCreateSpec(carrieradditionalservicedsv.Table, sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString))
	)
	_spec.OnConflict = casdc.conflict
	if id, ok := casdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := casdc.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicedsv.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := casdc.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicedsv.FieldAPICode, field.TypeString, value)
		_node.APICode = value
	}
	if nodes := casdc.mutation.CarrierServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.CarrierServiceDSVTable,
			Columns: carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := casdc.mutation.DeliveryOptionDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.DeliveryOptionDSVTable,
			Columns: carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierAdditionalServiceDSV.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierAdditionalServiceDSVUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (casdc *CarrierAdditionalServiceDSVCreate) OnConflict(opts ...sql.ConflictOption) *CarrierAdditionalServiceDSVUpsertOne {
	casdc.conflict = opts
	return &CarrierAdditionalServiceDSVUpsertOne{
		create: casdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceDSV.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (casdc *CarrierAdditionalServiceDSVCreate) OnConflictColumns(columns ...string) *CarrierAdditionalServiceDSVUpsertOne {
	casdc.conflict = append(casdc.conflict, sql.ConflictColumns(columns...))
	return &CarrierAdditionalServiceDSVUpsertOne{
		create: casdc,
	}
}

type (
	// CarrierAdditionalServiceDSVUpsertOne is the builder for "upsert"-ing
	//  one CarrierAdditionalServiceDSV node.
	CarrierAdditionalServiceDSVUpsertOne struct {
		create *CarrierAdditionalServiceDSVCreate
	}

	// CarrierAdditionalServiceDSVUpsert is the "OnConflict" setter.
	CarrierAdditionalServiceDSVUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceDSVUpsert) SetLabel(v string) *CarrierAdditionalServiceDSVUpsert {
	u.Set(carrieradditionalservicedsv.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceDSVUpsert) UpdateLabel() *CarrierAdditionalServiceDSVUpsert {
	u.SetExcluded(carrieradditionalservicedsv.FieldLabel)
	return u
}

// SetAPICode sets the "api_code" field.
func (u *CarrierAdditionalServiceDSVUpsert) SetAPICode(v string) *CarrierAdditionalServiceDSVUpsert {
	u.Set(carrieradditionalservicedsv.FieldAPICode, v)
	return u
}

// UpdateAPICode sets the "api_code" field to the value that was provided on create.
func (u *CarrierAdditionalServiceDSVUpsert) UpdateAPICode() *CarrierAdditionalServiceDSVUpsert {
	u.SetExcluded(carrieradditionalservicedsv.FieldAPICode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceDSV.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrieradditionalservicedsv.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierAdditionalServiceDSVUpsertOne) UpdateNewValues() *CarrierAdditionalServiceDSVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrieradditionalservicedsv.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceDSV.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierAdditionalServiceDSVUpsertOne) Ignore() *CarrierAdditionalServiceDSVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierAdditionalServiceDSVUpsertOne) DoNothing() *CarrierAdditionalServiceDSVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierAdditionalServiceDSVCreate.OnConflict
// documentation for more info.
func (u *CarrierAdditionalServiceDSVUpsertOne) Update(set func(*CarrierAdditionalServiceDSVUpsert)) *CarrierAdditionalServiceDSVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierAdditionalServiceDSVUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceDSVUpsertOne) SetLabel(v string) *CarrierAdditionalServiceDSVUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceDSVUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceDSVUpsertOne) UpdateLabel() *CarrierAdditionalServiceDSVUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceDSVUpsert) {
		s.UpdateLabel()
	})
}

// SetAPICode sets the "api_code" field.
func (u *CarrierAdditionalServiceDSVUpsertOne) SetAPICode(v string) *CarrierAdditionalServiceDSVUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceDSVUpsert) {
		s.SetAPICode(v)
	})
}

// UpdateAPICode sets the "api_code" field to the value that was provided on create.
func (u *CarrierAdditionalServiceDSVUpsertOne) UpdateAPICode() *CarrierAdditionalServiceDSVUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceDSVUpsert) {
		s.UpdateAPICode()
	})
}

// Exec executes the query.
func (u *CarrierAdditionalServiceDSVUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierAdditionalServiceDSVCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierAdditionalServiceDSVUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierAdditionalServiceDSVUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierAdditionalServiceDSVUpsertOne.ID is not supported by MySQL driver. Use CarrierAdditionalServiceDSVUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierAdditionalServiceDSVUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierAdditionalServiceDSVCreateBulk is the builder for creating many CarrierAdditionalServiceDSV entities in bulk.
type CarrierAdditionalServiceDSVCreateBulk struct {
	config
	err      error
	builders []*CarrierAdditionalServiceDSVCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierAdditionalServiceDSV entities in the database.
func (casdcb *CarrierAdditionalServiceDSVCreateBulk) Save(ctx context.Context) ([]*CarrierAdditionalServiceDSV, error) {
	if casdcb.err != nil {
		return nil, casdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(casdcb.builders))
	nodes := make([]*CarrierAdditionalServiceDSV, len(casdcb.builders))
	mutators := make([]Mutator, len(casdcb.builders))
	for i := range casdcb.builders {
		func(i int, root context.Context) {
			builder := casdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierAdditionalServiceDSVMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, casdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = casdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, casdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, casdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (casdcb *CarrierAdditionalServiceDSVCreateBulk) SaveX(ctx context.Context) []*CarrierAdditionalServiceDSV {
	v, err := casdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (casdcb *CarrierAdditionalServiceDSVCreateBulk) Exec(ctx context.Context) error {
	_, err := casdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casdcb *CarrierAdditionalServiceDSVCreateBulk) ExecX(ctx context.Context) {
	if err := casdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierAdditionalServiceDSV.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierAdditionalServiceDSVUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (casdcb *CarrierAdditionalServiceDSVCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierAdditionalServiceDSVUpsertBulk {
	casdcb.conflict = opts
	return &CarrierAdditionalServiceDSVUpsertBulk{
		create: casdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceDSV.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (casdcb *CarrierAdditionalServiceDSVCreateBulk) OnConflictColumns(columns ...string) *CarrierAdditionalServiceDSVUpsertBulk {
	casdcb.conflict = append(casdcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierAdditionalServiceDSVUpsertBulk{
		create: casdcb,
	}
}

// CarrierAdditionalServiceDSVUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierAdditionalServiceDSV nodes.
type CarrierAdditionalServiceDSVUpsertBulk struct {
	create *CarrierAdditionalServiceDSVCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceDSV.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrieradditionalservicedsv.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierAdditionalServiceDSVUpsertBulk) UpdateNewValues() *CarrierAdditionalServiceDSVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrieradditionalservicedsv.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceDSV.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierAdditionalServiceDSVUpsertBulk) Ignore() *CarrierAdditionalServiceDSVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierAdditionalServiceDSVUpsertBulk) DoNothing() *CarrierAdditionalServiceDSVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierAdditionalServiceDSVCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierAdditionalServiceDSVUpsertBulk) Update(set func(*CarrierAdditionalServiceDSVUpsert)) *CarrierAdditionalServiceDSVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierAdditionalServiceDSVUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceDSVUpsertBulk) SetLabel(v string) *CarrierAdditionalServiceDSVUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceDSVUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceDSVUpsertBulk) UpdateLabel() *CarrierAdditionalServiceDSVUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceDSVUpsert) {
		s.UpdateLabel()
	})
}

// SetAPICode sets the "api_code" field.
func (u *CarrierAdditionalServiceDSVUpsertBulk) SetAPICode(v string) *CarrierAdditionalServiceDSVUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceDSVUpsert) {
		s.SetAPICode(v)
	})
}

// UpdateAPICode sets the "api_code" field to the value that was provided on create.
func (u *CarrierAdditionalServiceDSVUpsertBulk) UpdateAPICode() *CarrierAdditionalServiceDSVUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceDSVUpsert) {
		s.UpdateAPICode()
	})
}

// Exec executes the query.
func (u *CarrierAdditionalServiceDSVUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierAdditionalServiceDSVCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierAdditionalServiceDSVCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierAdditionalServiceDSVUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
