// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopPostNordQuery is the builder for querying ParcelShopPostNord entities.
type ParcelShopPostNordQuery struct {
	config
	ctx                 *QueryContext
	order               []parcelshoppostnord.OrderOption
	inters              []Interceptor
	predicates          []predicate.ParcelShopPostNord
	withParcelShop      *ParcelShopQuery
	withAddressDelivery *AddressGlobalQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*ParcelShopPostNord) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ParcelShopPostNordQuery builder.
func (pspnq *ParcelShopPostNordQuery) Where(ps ...predicate.ParcelShopPostNord) *ParcelShopPostNordQuery {
	pspnq.predicates = append(pspnq.predicates, ps...)
	return pspnq
}

// Limit the number of records to be returned by this query.
func (pspnq *ParcelShopPostNordQuery) Limit(limit int) *ParcelShopPostNordQuery {
	pspnq.ctx.Limit = &limit
	return pspnq
}

// Offset to start from.
func (pspnq *ParcelShopPostNordQuery) Offset(offset int) *ParcelShopPostNordQuery {
	pspnq.ctx.Offset = &offset
	return pspnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pspnq *ParcelShopPostNordQuery) Unique(unique bool) *ParcelShopPostNordQuery {
	pspnq.ctx.Unique = &unique
	return pspnq
}

// Order specifies how the records should be ordered.
func (pspnq *ParcelShopPostNordQuery) Order(o ...parcelshoppostnord.OrderOption) *ParcelShopPostNordQuery {
	pspnq.order = append(pspnq.order, o...)
	return pspnq
}

// QueryParcelShop chains the current query on the "parcel_shop" edge.
func (pspnq *ParcelShopPostNordQuery) QueryParcelShop() *ParcelShopQuery {
	query := (&ParcelShopClient{config: pspnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pspnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pspnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshoppostnord.Table, parcelshoppostnord.FieldID, selector),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, parcelshoppostnord.ParcelShopTable, parcelshoppostnord.ParcelShopColumn),
		)
		fromU = sqlgraph.SetNeighbors(pspnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddressDelivery chains the current query on the "address_delivery" edge.
func (pspnq *ParcelShopPostNordQuery) QueryAddressDelivery() *AddressGlobalQuery {
	query := (&AddressGlobalClient{config: pspnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pspnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pspnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshoppostnord.Table, parcelshoppostnord.FieldID, selector),
			sqlgraph.To(addressglobal.Table, addressglobal.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshoppostnord.AddressDeliveryTable, parcelshoppostnord.AddressDeliveryColumn),
		)
		fromU = sqlgraph.SetNeighbors(pspnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ParcelShopPostNord entity from the query.
// Returns a *NotFoundError when no ParcelShopPostNord was found.
func (pspnq *ParcelShopPostNordQuery) First(ctx context.Context) (*ParcelShopPostNord, error) {
	nodes, err := pspnq.Limit(1).All(setContextOp(ctx, pspnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{parcelshoppostnord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pspnq *ParcelShopPostNordQuery) FirstX(ctx context.Context) *ParcelShopPostNord {
	node, err := pspnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ParcelShopPostNord ID from the query.
// Returns a *NotFoundError when no ParcelShopPostNord ID was found.
func (pspnq *ParcelShopPostNordQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = pspnq.Limit(1).IDs(setContextOp(ctx, pspnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{parcelshoppostnord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pspnq *ParcelShopPostNordQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := pspnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ParcelShopPostNord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ParcelShopPostNord entity is found.
// Returns a *NotFoundError when no ParcelShopPostNord entities are found.
func (pspnq *ParcelShopPostNordQuery) Only(ctx context.Context) (*ParcelShopPostNord, error) {
	nodes, err := pspnq.Limit(2).All(setContextOp(ctx, pspnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{parcelshoppostnord.Label}
	default:
		return nil, &NotSingularError{parcelshoppostnord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pspnq *ParcelShopPostNordQuery) OnlyX(ctx context.Context) *ParcelShopPostNord {
	node, err := pspnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ParcelShopPostNord ID in the query.
// Returns a *NotSingularError when more than one ParcelShopPostNord ID is found.
// Returns a *NotFoundError when no entities are found.
func (pspnq *ParcelShopPostNordQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = pspnq.Limit(2).IDs(setContextOp(ctx, pspnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{parcelshoppostnord.Label}
	default:
		err = &NotSingularError{parcelshoppostnord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pspnq *ParcelShopPostNordQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := pspnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ParcelShopPostNords.
func (pspnq *ParcelShopPostNordQuery) All(ctx context.Context) ([]*ParcelShopPostNord, error) {
	ctx = setContextOp(ctx, pspnq.ctx, ent.OpQueryAll)
	if err := pspnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ParcelShopPostNord, *ParcelShopPostNordQuery]()
	return withInterceptors[[]*ParcelShopPostNord](ctx, pspnq, qr, pspnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pspnq *ParcelShopPostNordQuery) AllX(ctx context.Context) []*ParcelShopPostNord {
	nodes, err := pspnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ParcelShopPostNord IDs.
func (pspnq *ParcelShopPostNordQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if pspnq.ctx.Unique == nil && pspnq.path != nil {
		pspnq.Unique(true)
	}
	ctx = setContextOp(ctx, pspnq.ctx, ent.OpQueryIDs)
	if err = pspnq.Select(parcelshoppostnord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pspnq *ParcelShopPostNordQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := pspnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pspnq *ParcelShopPostNordQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pspnq.ctx, ent.OpQueryCount)
	if err := pspnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pspnq, querierCount[*ParcelShopPostNordQuery](), pspnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pspnq *ParcelShopPostNordQuery) CountX(ctx context.Context) int {
	count, err := pspnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pspnq *ParcelShopPostNordQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pspnq.ctx, ent.OpQueryExist)
	switch _, err := pspnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pspnq *ParcelShopPostNordQuery) ExistX(ctx context.Context) bool {
	exist, err := pspnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ParcelShopPostNordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pspnq *ParcelShopPostNordQuery) Clone() *ParcelShopPostNordQuery {
	if pspnq == nil {
		return nil
	}
	return &ParcelShopPostNordQuery{
		config:              pspnq.config,
		ctx:                 pspnq.ctx.Clone(),
		order:               append([]parcelshoppostnord.OrderOption{}, pspnq.order...),
		inters:              append([]Interceptor{}, pspnq.inters...),
		predicates:          append([]predicate.ParcelShopPostNord{}, pspnq.predicates...),
		withParcelShop:      pspnq.withParcelShop.Clone(),
		withAddressDelivery: pspnq.withAddressDelivery.Clone(),
		// clone intermediate query.
		sql:  pspnq.sql.Clone(),
		path: pspnq.path,
	}
}

// WithParcelShop tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop" edge. The optional arguments are used to configure the query builder of the edge.
func (pspnq *ParcelShopPostNordQuery) WithParcelShop(opts ...func(*ParcelShopQuery)) *ParcelShopPostNordQuery {
	query := (&ParcelShopClient{config: pspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pspnq.withParcelShop = query
	return pspnq
}

// WithAddressDelivery tells the query-builder to eager-load the nodes that are connected to
// the "address_delivery" edge. The optional arguments are used to configure the query builder of the edge.
func (pspnq *ParcelShopPostNordQuery) WithAddressDelivery(opts ...func(*AddressGlobalQuery)) *ParcelShopPostNordQuery {
	query := (&AddressGlobalClient{config: pspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pspnq.withAddressDelivery = query
	return pspnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ServicePointID string `json:"service_point_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ParcelShopPostNord.Query().
//		GroupBy(parcelshoppostnord.FieldServicePointID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pspnq *ParcelShopPostNordQuery) GroupBy(field string, fields ...string) *ParcelShopPostNordGroupBy {
	pspnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ParcelShopPostNordGroupBy{build: pspnq}
	grbuild.flds = &pspnq.ctx.Fields
	grbuild.label = parcelshoppostnord.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ServicePointID string `json:"service_point_id,omitempty"`
//	}
//
//	client.ParcelShopPostNord.Query().
//		Select(parcelshoppostnord.FieldServicePointID).
//		Scan(ctx, &v)
func (pspnq *ParcelShopPostNordQuery) Select(fields ...string) *ParcelShopPostNordSelect {
	pspnq.ctx.Fields = append(pspnq.ctx.Fields, fields...)
	sbuild := &ParcelShopPostNordSelect{ParcelShopPostNordQuery: pspnq}
	sbuild.label = parcelshoppostnord.Label
	sbuild.flds, sbuild.scan = &pspnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ParcelShopPostNordSelect configured with the given aggregations.
func (pspnq *ParcelShopPostNordQuery) Aggregate(fns ...AggregateFunc) *ParcelShopPostNordSelect {
	return pspnq.Select().Aggregate(fns...)
}

func (pspnq *ParcelShopPostNordQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pspnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pspnq); err != nil {
				return err
			}
		}
	}
	for _, f := range pspnq.ctx.Fields {
		if !parcelshoppostnord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pspnq.path != nil {
		prev, err := pspnq.path(ctx)
		if err != nil {
			return err
		}
		pspnq.sql = prev
	}
	if parcelshoppostnord.Policy == nil {
		return errors.New("ent: uninitialized parcelshoppostnord.Policy (forgotten import ent/runtime?)")
	}
	if err := parcelshoppostnord.Policy.EvalQuery(ctx, pspnq); err != nil {
		return err
	}
	return nil
}

func (pspnq *ParcelShopPostNordQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ParcelShopPostNord, error) {
	var (
		nodes       = []*ParcelShopPostNord{}
		withFKs     = pspnq.withFKs
		_spec       = pspnq.querySpec()
		loadedTypes = [2]bool{
			pspnq.withParcelShop != nil,
			pspnq.withAddressDelivery != nil,
		}
	)
	if pspnq.withParcelShop != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshoppostnord.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ParcelShopPostNord).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ParcelShopPostNord{config: pspnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pspnq.modifiers) > 0 {
		_spec.Modifiers = pspnq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pspnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pspnq.withParcelShop; query != nil {
		if err := pspnq.loadParcelShop(ctx, query, nodes, nil,
			func(n *ParcelShopPostNord, e *ParcelShop) { n.Edges.ParcelShop = e }); err != nil {
			return nil, err
		}
	}
	if query := pspnq.withAddressDelivery; query != nil {
		if err := pspnq.loadAddressDelivery(ctx, query, nodes, nil,
			func(n *ParcelShopPostNord, e *AddressGlobal) { n.Edges.AddressDelivery = e }); err != nil {
			return nil, err
		}
	}
	for i := range pspnq.loadTotal {
		if err := pspnq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pspnq *ParcelShopPostNordQuery) loadParcelShop(ctx context.Context, query *ParcelShopQuery, nodes []*ParcelShopPostNord, init func(*ParcelShopPostNord), assign func(*ParcelShopPostNord, *ParcelShop)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ParcelShopPostNord)
	for i := range nodes {
		if nodes[i].parcel_shop_parcel_shop_post_nord == nil {
			continue
		}
		fk := *nodes[i].parcel_shop_parcel_shop_post_nord
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(parcelshop.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parcel_shop_parcel_shop_post_nord" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pspnq *ParcelShopPostNordQuery) loadAddressDelivery(ctx context.Context, query *AddressGlobalQuery, nodes []*ParcelShopPostNord, init func(*ParcelShopPostNord), assign func(*ParcelShopPostNord, *AddressGlobal)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ParcelShopPostNord)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.AddressGlobal(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(parcelshoppostnord.AddressDeliveryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.parcel_shop_post_nord_address_delivery
		if fk == nil {
			return fmt.Errorf(`foreign-key "parcel_shop_post_nord_address_delivery" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parcel_shop_post_nord_address_delivery" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pspnq *ParcelShopPostNordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pspnq.querySpec()
	if len(pspnq.modifiers) > 0 {
		_spec.Modifiers = pspnq.modifiers
	}
	_spec.Node.Columns = pspnq.ctx.Fields
	if len(pspnq.ctx.Fields) > 0 {
		_spec.Unique = pspnq.ctx.Unique != nil && *pspnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pspnq.driver, _spec)
}

func (pspnq *ParcelShopPostNordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(parcelshoppostnord.Table, parcelshoppostnord.Columns, sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString))
	_spec.From = pspnq.sql
	if unique := pspnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pspnq.path != nil {
		_spec.Unique = true
	}
	if fields := pspnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshoppostnord.FieldID)
		for i := range fields {
			if fields[i] != parcelshoppostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pspnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pspnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pspnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pspnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pspnq *ParcelShopPostNordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pspnq.driver.Dialect())
	t1 := builder.Table(parcelshoppostnord.Table)
	columns := pspnq.ctx.Fields
	if len(columns) == 0 {
		columns = parcelshoppostnord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pspnq.sql != nil {
		selector = pspnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pspnq.ctx.Unique != nil && *pspnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pspnq.predicates {
		p(selector)
	}
	for _, p := range pspnq.order {
		p(selector)
	}
	if offset := pspnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pspnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ParcelShopPostNordGroupBy is the group-by builder for ParcelShopPostNord entities.
type ParcelShopPostNordGroupBy struct {
	selector
	build *ParcelShopPostNordQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pspngb *ParcelShopPostNordGroupBy) Aggregate(fns ...AggregateFunc) *ParcelShopPostNordGroupBy {
	pspngb.fns = append(pspngb.fns, fns...)
	return pspngb
}

// Scan applies the selector query and scans the result into the given value.
func (pspngb *ParcelShopPostNordGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pspngb.build.ctx, ent.OpQueryGroupBy)
	if err := pspngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ParcelShopPostNordQuery, *ParcelShopPostNordGroupBy](ctx, pspngb.build, pspngb, pspngb.build.inters, v)
}

func (pspngb *ParcelShopPostNordGroupBy) sqlScan(ctx context.Context, root *ParcelShopPostNordQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pspngb.fns))
	for _, fn := range pspngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pspngb.flds)+len(pspngb.fns))
		for _, f := range *pspngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pspngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pspngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ParcelShopPostNordSelect is the builder for selecting fields of ParcelShopPostNord entities.
type ParcelShopPostNordSelect struct {
	*ParcelShopPostNordQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pspns *ParcelShopPostNordSelect) Aggregate(fns ...AggregateFunc) *ParcelShopPostNordSelect {
	pspns.fns = append(pspns.fns, fns...)
	return pspns
}

// Scan applies the selector query and scans the result into the given value.
func (pspns *ParcelShopPostNordSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pspns.ctx, ent.OpQuerySelect)
	if err := pspns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ParcelShopPostNordQuery, *ParcelShopPostNordSelect](ctx, pspns.ParcelShopPostNordQuery, pspns, pspns.inters, v)
}

func (pspns *ParcelShopPostNordSelect) sqlScan(ctx context.Context, root *ParcelShopPostNordQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pspns.fns))
	for _, fn := range pspns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pspns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pspns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
