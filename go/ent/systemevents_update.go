// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/systemevents"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemEventsUpdate is the builder for updating SystemEvents entities.
type SystemEventsUpdate struct {
	config
	hooks    []Hook
	mutation *SystemEventsMutation
}

// Where appends a list predicates to the SystemEventsUpdate builder.
func (seu *SystemEventsUpdate) Where(ps ...predicate.SystemEvents) *SystemEventsUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetTenantID sets the "tenant_id" field.
func (seu *SystemEventsUpdate) SetTenantID(pu pulid.ID) *SystemEventsUpdate {
	seu.mutation.SetTenantID(pu)
	return seu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (seu *SystemEventsUpdate) SetNillableTenantID(pu *pulid.ID) *SystemEventsUpdate {
	if pu != nil {
		seu.SetTenantID(*pu)
	}
	return seu
}

// SetEventType sets the "event_type" field.
func (seu *SystemEventsUpdate) SetEventType(st systemevents.EventType) *SystemEventsUpdate {
	seu.mutation.SetEventType(st)
	return seu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (seu *SystemEventsUpdate) SetNillableEventType(st *systemevents.EventType) *SystemEventsUpdate {
	if st != nil {
		seu.SetEventType(*st)
	}
	return seu
}

// SetEventTypeID sets the "event_type_id" field.
func (seu *SystemEventsUpdate) SetEventTypeID(s string) *SystemEventsUpdate {
	seu.mutation.SetEventTypeID(s)
	return seu
}

// SetNillableEventTypeID sets the "event_type_id" field if the given value is not nil.
func (seu *SystemEventsUpdate) SetNillableEventTypeID(s *string) *SystemEventsUpdate {
	if s != nil {
		seu.SetEventTypeID(*s)
	}
	return seu
}

// ClearEventTypeID clears the value of the "event_type_id" field.
func (seu *SystemEventsUpdate) ClearEventTypeID() *SystemEventsUpdate {
	seu.mutation.ClearEventTypeID()
	return seu
}

// SetStatus sets the "status" field.
func (seu *SystemEventsUpdate) SetStatus(s systemevents.Status) *SystemEventsUpdate {
	seu.mutation.SetStatus(s)
	return seu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seu *SystemEventsUpdate) SetNillableStatus(s *systemevents.Status) *SystemEventsUpdate {
	if s != nil {
		seu.SetStatus(*s)
	}
	return seu
}

// SetDescription sets the "description" field.
func (seu *SystemEventsUpdate) SetDescription(s string) *SystemEventsUpdate {
	seu.mutation.SetDescription(s)
	return seu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (seu *SystemEventsUpdate) SetNillableDescription(s *string) *SystemEventsUpdate {
	if s != nil {
		seu.SetDescription(*s)
	}
	return seu
}

// SetData sets the "data" field.
func (seu *SystemEventsUpdate) SetData(s string) *SystemEventsUpdate {
	seu.mutation.SetData(s)
	return seu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (seu *SystemEventsUpdate) SetNillableData(s *string) *SystemEventsUpdate {
	if s != nil {
		seu.SetData(*s)
	}
	return seu
}

// ClearData clears the value of the "data" field.
func (seu *SystemEventsUpdate) ClearData() *SystemEventsUpdate {
	seu.mutation.ClearData()
	return seu
}

// SetUpdatedAt sets the "updated_at" field.
func (seu *SystemEventsUpdate) SetUpdatedAt(t time.Time) *SystemEventsUpdate {
	seu.mutation.SetUpdatedAt(t)
	return seu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (seu *SystemEventsUpdate) SetTenant(t *Tenant) *SystemEventsUpdate {
	return seu.SetTenantID(t.ID)
}

// Mutation returns the SystemEventsMutation object of the builder.
func (seu *SystemEventsUpdate) Mutation() *SystemEventsMutation {
	return seu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (seu *SystemEventsUpdate) ClearTenant() *SystemEventsUpdate {
	seu.mutation.ClearTenant()
	return seu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SystemEventsUpdate) Save(ctx context.Context) (int, error) {
	if err := seu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SystemEventsUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SystemEventsUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SystemEventsUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seu *SystemEventsUpdate) defaults() error {
	if _, ok := seu.mutation.UpdatedAt(); !ok {
		if systemevents.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemevents.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := systemevents.UpdateDefaultUpdatedAt()
		seu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (seu *SystemEventsUpdate) check() error {
	if v, ok := seu.mutation.EventType(); ok {
		if err := systemevents.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "SystemEvents.event_type": %w`, err)}
		}
	}
	if v, ok := seu.mutation.Status(); ok {
		if err := systemevents.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemEvents.status": %w`, err)}
		}
	}
	if seu.mutation.TenantCleared() && len(seu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemEvents.tenant"`)
	}
	return nil
}

func (seu *SystemEventsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := seu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemevents.Table, systemevents.Columns, sqlgraph.NewFieldSpec(systemevents.FieldID, field.TypeString))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.EventType(); ok {
		_spec.SetField(systemevents.FieldEventType, field.TypeEnum, value)
	}
	if value, ok := seu.mutation.EventTypeID(); ok {
		_spec.SetField(systemevents.FieldEventTypeID, field.TypeString, value)
	}
	if seu.mutation.EventTypeIDCleared() {
		_spec.ClearField(systemevents.FieldEventTypeID, field.TypeString)
	}
	if value, ok := seu.mutation.Status(); ok {
		_spec.SetField(systemevents.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := seu.mutation.Description(); ok {
		_spec.SetField(systemevents.FieldDescription, field.TypeString, value)
	}
	if value, ok := seu.mutation.Data(); ok {
		_spec.SetField(systemevents.FieldData, field.TypeString, value)
	}
	if seu.mutation.DataCleared() {
		_spec.ClearField(systemevents.FieldData, field.TypeString)
	}
	if value, ok := seu.mutation.UpdatedAt(); ok {
		_spec.SetField(systemevents.FieldUpdatedAt, field.TypeTime, value)
	}
	if seu.mutation.CreatedAtCleared() {
		_spec.ClearField(systemevents.FieldCreatedAt, field.TypeTime)
	}
	if seu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemevents.TenantTable,
			Columns: []string{systemevents.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemevents.TenantTable,
			Columns: []string{systemevents.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemevents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SystemEventsUpdateOne is the builder for updating a single SystemEvents entity.
type SystemEventsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemEventsMutation
}

// SetTenantID sets the "tenant_id" field.
func (seuo *SystemEventsUpdateOne) SetTenantID(pu pulid.ID) *SystemEventsUpdateOne {
	seuo.mutation.SetTenantID(pu)
	return seuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (seuo *SystemEventsUpdateOne) SetNillableTenantID(pu *pulid.ID) *SystemEventsUpdateOne {
	if pu != nil {
		seuo.SetTenantID(*pu)
	}
	return seuo
}

// SetEventType sets the "event_type" field.
func (seuo *SystemEventsUpdateOne) SetEventType(st systemevents.EventType) *SystemEventsUpdateOne {
	seuo.mutation.SetEventType(st)
	return seuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (seuo *SystemEventsUpdateOne) SetNillableEventType(st *systemevents.EventType) *SystemEventsUpdateOne {
	if st != nil {
		seuo.SetEventType(*st)
	}
	return seuo
}

// SetEventTypeID sets the "event_type_id" field.
func (seuo *SystemEventsUpdateOne) SetEventTypeID(s string) *SystemEventsUpdateOne {
	seuo.mutation.SetEventTypeID(s)
	return seuo
}

// SetNillableEventTypeID sets the "event_type_id" field if the given value is not nil.
func (seuo *SystemEventsUpdateOne) SetNillableEventTypeID(s *string) *SystemEventsUpdateOne {
	if s != nil {
		seuo.SetEventTypeID(*s)
	}
	return seuo
}

// ClearEventTypeID clears the value of the "event_type_id" field.
func (seuo *SystemEventsUpdateOne) ClearEventTypeID() *SystemEventsUpdateOne {
	seuo.mutation.ClearEventTypeID()
	return seuo
}

// SetStatus sets the "status" field.
func (seuo *SystemEventsUpdateOne) SetStatus(s systemevents.Status) *SystemEventsUpdateOne {
	seuo.mutation.SetStatus(s)
	return seuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (seuo *SystemEventsUpdateOne) SetNillableStatus(s *systemevents.Status) *SystemEventsUpdateOne {
	if s != nil {
		seuo.SetStatus(*s)
	}
	return seuo
}

// SetDescription sets the "description" field.
func (seuo *SystemEventsUpdateOne) SetDescription(s string) *SystemEventsUpdateOne {
	seuo.mutation.SetDescription(s)
	return seuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (seuo *SystemEventsUpdateOne) SetNillableDescription(s *string) *SystemEventsUpdateOne {
	if s != nil {
		seuo.SetDescription(*s)
	}
	return seuo
}

// SetData sets the "data" field.
func (seuo *SystemEventsUpdateOne) SetData(s string) *SystemEventsUpdateOne {
	seuo.mutation.SetData(s)
	return seuo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (seuo *SystemEventsUpdateOne) SetNillableData(s *string) *SystemEventsUpdateOne {
	if s != nil {
		seuo.SetData(*s)
	}
	return seuo
}

// ClearData clears the value of the "data" field.
func (seuo *SystemEventsUpdateOne) ClearData() *SystemEventsUpdateOne {
	seuo.mutation.ClearData()
	return seuo
}

// SetUpdatedAt sets the "updated_at" field.
func (seuo *SystemEventsUpdateOne) SetUpdatedAt(t time.Time) *SystemEventsUpdateOne {
	seuo.mutation.SetUpdatedAt(t)
	return seuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (seuo *SystemEventsUpdateOne) SetTenant(t *Tenant) *SystemEventsUpdateOne {
	return seuo.SetTenantID(t.ID)
}

// Mutation returns the SystemEventsMutation object of the builder.
func (seuo *SystemEventsUpdateOne) Mutation() *SystemEventsMutation {
	return seuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (seuo *SystemEventsUpdateOne) ClearTenant() *SystemEventsUpdateOne {
	seuo.mutation.ClearTenant()
	return seuo
}

// Where appends a list predicates to the SystemEventsUpdate builder.
func (seuo *SystemEventsUpdateOne) Where(ps ...predicate.SystemEvents) *SystemEventsUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SystemEventsUpdateOne) Select(field string, fields ...string) *SystemEventsUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SystemEvents entity.
func (seuo *SystemEventsUpdateOne) Save(ctx context.Context) (*SystemEvents, error) {
	if err := seuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SystemEventsUpdateOne) SaveX(ctx context.Context) *SystemEvents {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SystemEventsUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SystemEventsUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seuo *SystemEventsUpdateOne) defaults() error {
	if _, ok := seuo.mutation.UpdatedAt(); !ok {
		if systemevents.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemevents.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := systemevents.UpdateDefaultUpdatedAt()
		seuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (seuo *SystemEventsUpdateOne) check() error {
	if v, ok := seuo.mutation.EventType(); ok {
		if err := systemevents.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "SystemEvents.event_type": %w`, err)}
		}
	}
	if v, ok := seuo.mutation.Status(); ok {
		if err := systemevents.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemEvents.status": %w`, err)}
		}
	}
	if seuo.mutation.TenantCleared() && len(seuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SystemEvents.tenant"`)
	}
	return nil
}

func (seuo *SystemEventsUpdateOne) sqlSave(ctx context.Context) (_node *SystemEvents, err error) {
	if err := seuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemevents.Table, systemevents.Columns, sqlgraph.NewFieldSpec(systemevents.FieldID, field.TypeString))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemEvents.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemevents.FieldID)
		for _, f := range fields {
			if !systemevents.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemevents.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.EventType(); ok {
		_spec.SetField(systemevents.FieldEventType, field.TypeEnum, value)
	}
	if value, ok := seuo.mutation.EventTypeID(); ok {
		_spec.SetField(systemevents.FieldEventTypeID, field.TypeString, value)
	}
	if seuo.mutation.EventTypeIDCleared() {
		_spec.ClearField(systemevents.FieldEventTypeID, field.TypeString)
	}
	if value, ok := seuo.mutation.Status(); ok {
		_spec.SetField(systemevents.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := seuo.mutation.Description(); ok {
		_spec.SetField(systemevents.FieldDescription, field.TypeString, value)
	}
	if value, ok := seuo.mutation.Data(); ok {
		_spec.SetField(systemevents.FieldData, field.TypeString, value)
	}
	if seuo.mutation.DataCleared() {
		_spec.ClearField(systemevents.FieldData, field.TypeString)
	}
	if value, ok := seuo.mutation.UpdatedAt(); ok {
		_spec.SetField(systemevents.FieldUpdatedAt, field.TypeTime, value)
	}
	if seuo.mutation.CreatedAtCleared() {
		_spec.ClearField(systemevents.FieldCreatedAt, field.TypeTime)
	}
	if seuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemevents.TenantTable,
			Columns: []string{systemevents.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemevents.TenantTable,
			Columns: []string{systemevents.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SystemEvents{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemevents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
