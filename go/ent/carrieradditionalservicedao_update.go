// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceDAOUpdate is the builder for updating CarrierAdditionalServiceDAO entities.
type CarrierAdditionalServiceDAOUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierAdditionalServiceDAOMutation
}

// Where appends a list predicates to the CarrierAdditionalServiceDAOUpdate builder.
func (casdu *CarrierAdditionalServiceDAOUpdate) Where(ps ...predicate.CarrierAdditionalServiceDAO) *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.Where(ps...)
	return casdu
}

// SetLabel sets the "label" field.
func (casdu *CarrierAdditionalServiceDAOUpdate) SetLabel(s string) *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.SetLabel(s)
	return casdu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casdu *CarrierAdditionalServiceDAOUpdate) SetNillableLabel(s *string) *CarrierAdditionalServiceDAOUpdate {
	if s != nil {
		casdu.SetLabel(*s)
	}
	return casdu
}

// SetAPICode sets the "api_code" field.
func (casdu *CarrierAdditionalServiceDAOUpdate) SetAPICode(s string) *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.SetAPICode(s)
	return casdu
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (casdu *CarrierAdditionalServiceDAOUpdate) SetNillableAPICode(s *string) *CarrierAdditionalServiceDAOUpdate {
	if s != nil {
		casdu.SetAPICode(*s)
	}
	return casdu
}

// AddCarrierServiceDAOIDs adds the "carrier_service_dao" edge to the CarrierServiceDAO entity by IDs.
func (casdu *CarrierAdditionalServiceDAOUpdate) AddCarrierServiceDAOIDs(ids ...pulid.ID) *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.AddCarrierServiceDAOIDs(ids...)
	return casdu
}

// AddCarrierServiceDAO adds the "carrier_service_dao" edges to the CarrierServiceDAO entity.
func (casdu *CarrierAdditionalServiceDAOUpdate) AddCarrierServiceDAO(c ...*CarrierServiceDAO) *CarrierAdditionalServiceDAOUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casdu.AddCarrierServiceDAOIDs(ids...)
}

// AddDeliveryOptionDAOIDs adds the "delivery_option_dao" edge to the DeliveryOptionDAO entity by IDs.
func (casdu *CarrierAdditionalServiceDAOUpdate) AddDeliveryOptionDAOIDs(ids ...pulid.ID) *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.AddDeliveryOptionDAOIDs(ids...)
	return casdu
}

// AddDeliveryOptionDAO adds the "delivery_option_dao" edges to the DeliveryOptionDAO entity.
func (casdu *CarrierAdditionalServiceDAOUpdate) AddDeliveryOptionDAO(d ...*DeliveryOptionDAO) *CarrierAdditionalServiceDAOUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casdu.AddDeliveryOptionDAOIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceDAOMutation object of the builder.
func (casdu *CarrierAdditionalServiceDAOUpdate) Mutation() *CarrierAdditionalServiceDAOMutation {
	return casdu.mutation
}

// ClearCarrierServiceDAO clears all "carrier_service_dao" edges to the CarrierServiceDAO entity.
func (casdu *CarrierAdditionalServiceDAOUpdate) ClearCarrierServiceDAO() *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.ClearCarrierServiceDAO()
	return casdu
}

// RemoveCarrierServiceDAOIDs removes the "carrier_service_dao" edge to CarrierServiceDAO entities by IDs.
func (casdu *CarrierAdditionalServiceDAOUpdate) RemoveCarrierServiceDAOIDs(ids ...pulid.ID) *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.RemoveCarrierServiceDAOIDs(ids...)
	return casdu
}

// RemoveCarrierServiceDAO removes "carrier_service_dao" edges to CarrierServiceDAO entities.
func (casdu *CarrierAdditionalServiceDAOUpdate) RemoveCarrierServiceDAO(c ...*CarrierServiceDAO) *CarrierAdditionalServiceDAOUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casdu.RemoveCarrierServiceDAOIDs(ids...)
}

// ClearDeliveryOptionDAO clears all "delivery_option_dao" edges to the DeliveryOptionDAO entity.
func (casdu *CarrierAdditionalServiceDAOUpdate) ClearDeliveryOptionDAO() *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.ClearDeliveryOptionDAO()
	return casdu
}

// RemoveDeliveryOptionDAOIDs removes the "delivery_option_dao" edge to DeliveryOptionDAO entities by IDs.
func (casdu *CarrierAdditionalServiceDAOUpdate) RemoveDeliveryOptionDAOIDs(ids ...pulid.ID) *CarrierAdditionalServiceDAOUpdate {
	casdu.mutation.RemoveDeliveryOptionDAOIDs(ids...)
	return casdu
}

// RemoveDeliveryOptionDAO removes "delivery_option_dao" edges to DeliveryOptionDAO entities.
func (casdu *CarrierAdditionalServiceDAOUpdate) RemoveDeliveryOptionDAO(d ...*DeliveryOptionDAO) *CarrierAdditionalServiceDAOUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casdu.RemoveDeliveryOptionDAOIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (casdu *CarrierAdditionalServiceDAOUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, casdu.sqlSave, casdu.mutation, casdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casdu *CarrierAdditionalServiceDAOUpdate) SaveX(ctx context.Context) int {
	affected, err := casdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (casdu *CarrierAdditionalServiceDAOUpdate) Exec(ctx context.Context) error {
	_, err := casdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casdu *CarrierAdditionalServiceDAOUpdate) ExecX(ctx context.Context) {
	if err := casdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casdu *CarrierAdditionalServiceDAOUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicedao.Table, carrieradditionalservicedao.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString))
	if ps := casdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casdu.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicedao.FieldLabel, field.TypeString, value)
	}
	if value, ok := casdu.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicedao.FieldAPICode, field.TypeString, value)
	}
	if casdu.mutation.CarrierServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.CarrierServiceDAOTable,
			Columns: carrieradditionalservicedao.CarrierServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.RemovedCarrierServiceDAOIDs(); len(nodes) > 0 && !casdu.mutation.CarrierServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.CarrierServiceDAOTable,
			Columns: carrieradditionalservicedao.CarrierServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.CarrierServiceDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.CarrierServiceDAOTable,
			Columns: carrieradditionalservicedao.CarrierServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casdu.mutation.DeliveryOptionDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.DeliveryOptionDAOTable,
			Columns: carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.RemovedDeliveryOptionDAOIDs(); len(nodes) > 0 && !casdu.mutation.DeliveryOptionDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.DeliveryOptionDAOTable,
			Columns: carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.DeliveryOptionDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.DeliveryOptionDAOTable,
			Columns: carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, casdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicedao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	casdu.mutation.done = true
	return n, nil
}

// CarrierAdditionalServiceDAOUpdateOne is the builder for updating a single CarrierAdditionalServiceDAO entity.
type CarrierAdditionalServiceDAOUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierAdditionalServiceDAOMutation
}

// SetLabel sets the "label" field.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) SetLabel(s string) *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.SetLabel(s)
	return casduo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) SetNillableLabel(s *string) *CarrierAdditionalServiceDAOUpdateOne {
	if s != nil {
		casduo.SetLabel(*s)
	}
	return casduo
}

// SetAPICode sets the "api_code" field.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) SetAPICode(s string) *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.SetAPICode(s)
	return casduo
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) SetNillableAPICode(s *string) *CarrierAdditionalServiceDAOUpdateOne {
	if s != nil {
		casduo.SetAPICode(*s)
	}
	return casduo
}

// AddCarrierServiceDAOIDs adds the "carrier_service_dao" edge to the CarrierServiceDAO entity by IDs.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) AddCarrierServiceDAOIDs(ids ...pulid.ID) *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.AddCarrierServiceDAOIDs(ids...)
	return casduo
}

// AddCarrierServiceDAO adds the "carrier_service_dao" edges to the CarrierServiceDAO entity.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) AddCarrierServiceDAO(c ...*CarrierServiceDAO) *CarrierAdditionalServiceDAOUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casduo.AddCarrierServiceDAOIDs(ids...)
}

// AddDeliveryOptionDAOIDs adds the "delivery_option_dao" edge to the DeliveryOptionDAO entity by IDs.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) AddDeliveryOptionDAOIDs(ids ...pulid.ID) *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.AddDeliveryOptionDAOIDs(ids...)
	return casduo
}

// AddDeliveryOptionDAO adds the "delivery_option_dao" edges to the DeliveryOptionDAO entity.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) AddDeliveryOptionDAO(d ...*DeliveryOptionDAO) *CarrierAdditionalServiceDAOUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casduo.AddDeliveryOptionDAOIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceDAOMutation object of the builder.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) Mutation() *CarrierAdditionalServiceDAOMutation {
	return casduo.mutation
}

// ClearCarrierServiceDAO clears all "carrier_service_dao" edges to the CarrierServiceDAO entity.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) ClearCarrierServiceDAO() *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.ClearCarrierServiceDAO()
	return casduo
}

// RemoveCarrierServiceDAOIDs removes the "carrier_service_dao" edge to CarrierServiceDAO entities by IDs.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) RemoveCarrierServiceDAOIDs(ids ...pulid.ID) *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.RemoveCarrierServiceDAOIDs(ids...)
	return casduo
}

// RemoveCarrierServiceDAO removes "carrier_service_dao" edges to CarrierServiceDAO entities.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) RemoveCarrierServiceDAO(c ...*CarrierServiceDAO) *CarrierAdditionalServiceDAOUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casduo.RemoveCarrierServiceDAOIDs(ids...)
}

// ClearDeliveryOptionDAO clears all "delivery_option_dao" edges to the DeliveryOptionDAO entity.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) ClearDeliveryOptionDAO() *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.ClearDeliveryOptionDAO()
	return casduo
}

// RemoveDeliveryOptionDAOIDs removes the "delivery_option_dao" edge to DeliveryOptionDAO entities by IDs.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) RemoveDeliveryOptionDAOIDs(ids ...pulid.ID) *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.RemoveDeliveryOptionDAOIDs(ids...)
	return casduo
}

// RemoveDeliveryOptionDAO removes "delivery_option_dao" edges to DeliveryOptionDAO entities.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) RemoveDeliveryOptionDAO(d ...*DeliveryOptionDAO) *CarrierAdditionalServiceDAOUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casduo.RemoveDeliveryOptionDAOIDs(ids...)
}

// Where appends a list predicates to the CarrierAdditionalServiceDAOUpdate builder.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) Where(ps ...predicate.CarrierAdditionalServiceDAO) *CarrierAdditionalServiceDAOUpdateOne {
	casduo.mutation.Where(ps...)
	return casduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) Select(field string, fields ...string) *CarrierAdditionalServiceDAOUpdateOne {
	casduo.fields = append([]string{field}, fields...)
	return casduo
}

// Save executes the query and returns the updated CarrierAdditionalServiceDAO entity.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) Save(ctx context.Context) (*CarrierAdditionalServiceDAO, error) {
	return withHooks(ctx, casduo.sqlSave, casduo.mutation, casduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) SaveX(ctx context.Context) *CarrierAdditionalServiceDAO {
	node, err := casduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) Exec(ctx context.Context) error {
	_, err := casduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casduo *CarrierAdditionalServiceDAOUpdateOne) ExecX(ctx context.Context) {
	if err := casduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casduo *CarrierAdditionalServiceDAOUpdateOne) sqlSave(ctx context.Context) (_node *CarrierAdditionalServiceDAO, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicedao.Table, carrieradditionalservicedao.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString))
	id, ok := casduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierAdditionalServiceDAO.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := casduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicedao.FieldID)
		for _, f := range fields {
			if !carrieradditionalservicedao.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrieradditionalservicedao.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := casduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casduo.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicedao.FieldLabel, field.TypeString, value)
	}
	if value, ok := casduo.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicedao.FieldAPICode, field.TypeString, value)
	}
	if casduo.mutation.CarrierServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.CarrierServiceDAOTable,
			Columns: carrieradditionalservicedao.CarrierServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.RemovedCarrierServiceDAOIDs(); len(nodes) > 0 && !casduo.mutation.CarrierServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.CarrierServiceDAOTable,
			Columns: carrieradditionalservicedao.CarrierServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.CarrierServiceDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.CarrierServiceDAOTable,
			Columns: carrieradditionalservicedao.CarrierServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casduo.mutation.DeliveryOptionDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.DeliveryOptionDAOTable,
			Columns: carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.RemovedDeliveryOptionDAOIDs(); len(nodes) > 0 && !casduo.mutation.DeliveryOptionDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.DeliveryOptionDAOTable,
			Columns: carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.DeliveryOptionDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.DeliveryOptionDAOTable,
			Columns: carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierAdditionalServiceDAO{config: casduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, casduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicedao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	casduo.mutation.done = true
	return _node, nil
}
