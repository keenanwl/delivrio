// Code generated by ent, DO NOT EDIT.

package printer

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the printer type in the database.
	Label = "printer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLabelZpl holds the string denoting the label_zpl field in the database.
	FieldLabelZpl = "label_zpl"
	// FieldLabelPdf holds the string denoting the label_pdf field in the database.
	FieldLabelPdf = "label_pdf"
	// FieldLabelPng holds the string denoting the label_png field in the database.
	FieldLabelPng = "label_png"
	// FieldDocument holds the string denoting the document field in the database.
	FieldDocument = "document"
	// FieldRotate180 holds the string denoting the rotate_180 field in the database.
	FieldRotate180 = "rotate_180"
	// FieldUseShell holds the string denoting the use_shell field in the database.
	FieldUseShell = "use_shell"
	// FieldPrintSize holds the string denoting the print_size field in the database.
	FieldPrintSize = "print_size"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastPing holds the string denoting the last_ping field in the database.
	FieldLastPing = "last_ping"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeWorkstation holds the string denoting the workstation edge name in mutations.
	EdgeWorkstation = "workstation"
	// EdgePrintJobs holds the string denoting the print_jobs edge name in mutations.
	EdgePrintJobs = "print_jobs"
	// Table holds the table name of the printer in the database.
	Table = "printers"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "printers"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// WorkstationTable is the table that holds the workstation relation/edge.
	WorkstationTable = "printers"
	// WorkstationInverseTable is the table name for the Workstation entity.
	// It exists in this package in order to avoid circular dependency with the "workstation" package.
	WorkstationInverseTable = "workstations"
	// WorkstationColumn is the table column denoting the workstation relation/edge.
	WorkstationColumn = "workstation_printer"
	// PrintJobsTable is the table that holds the print_jobs relation/edge.
	PrintJobsTable = "print_jobs"
	// PrintJobsInverseTable is the table name for the PrintJob entity.
	// It exists in this package in order to avoid circular dependency with the "printjob" package.
	PrintJobsInverseTable = "print_jobs"
	// PrintJobsColumn is the table column denoting the print_jobs relation/edge.
	PrintJobsColumn = "print_job_printer"
)

// Columns holds all SQL columns for printer fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldDeviceID,
	FieldName,
	FieldLabelZpl,
	FieldLabelPdf,
	FieldLabelPng,
	FieldDocument,
	FieldRotate180,
	FieldUseShell,
	FieldPrintSize,
	FieldCreatedAt,
	FieldLastPing,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "printers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workstation_printer",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultLabelZpl holds the default value on creation for the "label_zpl" field.
	DefaultLabelZpl bool
	// DefaultLabelPdf holds the default value on creation for the "label_pdf" field.
	DefaultLabelPdf bool
	// DefaultLabelPng holds the default value on creation for the "label_png" field.
	DefaultLabelPng bool
	// DefaultDocument holds the default value on creation for the "document" field.
	DefaultDocument bool
	// DefaultRotate180 holds the default value on creation for the "rotate_180" field.
	DefaultRotate180 bool
	// DefaultUseShell holds the default value on creation for the "use_shell" field.
	DefaultUseShell bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastPing holds the default value on creation for the "last_ping" field.
	DefaultLastPing func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// PrintSize defines the type for the "print_size" enum field.
type PrintSize string

// PrintSizeA4 is the default value of the PrintSize enum.
const DefaultPrintSize = PrintSizeA4

// PrintSize values.
const (
	PrintSizeA4       PrintSize = "A4"
	PrintSizeCm100150 PrintSize = "cm_100_150"
	PrintSizeCm100192 PrintSize = "cm_100_192"
)

func (ps PrintSize) String() string {
	return string(ps)
}

// PrintSizeValidator is a validator for the "print_size" field enum values. It is called by the builders before save.
func PrintSizeValidator(ps PrintSize) error {
	switch ps {
	case PrintSizeA4, PrintSizeCm100150, PrintSizeCm100192:
		return nil
	default:
		return fmt.Errorf("printer: invalid enum value for print_size field: %q", ps)
	}
}

// OrderOption defines the ordering options for the Printer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLabelZpl orders the results by the label_zpl field.
func ByLabelZpl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabelZpl, opts...).ToFunc()
}

// ByLabelPdf orders the results by the label_pdf field.
func ByLabelPdf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabelPdf, opts...).ToFunc()
}

// ByLabelPng orders the results by the label_png field.
func ByLabelPng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabelPng, opts...).ToFunc()
}

// ByDocument orders the results by the document field.
func ByDocument(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocument, opts...).ToFunc()
}

// ByRotate180 orders the results by the rotate_180 field.
func ByRotate180(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRotate180, opts...).ToFunc()
}

// ByUseShell orders the results by the use_shell field.
func ByUseShell(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseShell, opts...).ToFunc()
}

// ByPrintSize orders the results by the print_size field.
func ByPrintSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrintSize, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastPing orders the results by the last_ping field.
func ByLastPing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPing, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkstationField orders the results by workstation field.
func ByWorkstationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkstationStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrintJobsCount orders the results by print_jobs count.
func ByPrintJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrintJobsStep(), opts...)
	}
}

// ByPrintJobs orders the results by print_jobs terms.
func ByPrintJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrintJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newWorkstationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkstationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkstationTable, WorkstationColumn),
	)
}
func newPrintJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrintJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PrintJobsTable, PrintJobsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e PrintSize) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *PrintSize) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = PrintSize(str)
	if err := PrintSizeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid PrintSize", str)
	}
	return nil
}
