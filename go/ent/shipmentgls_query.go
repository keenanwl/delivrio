// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentGLSQuery is the builder for querying ShipmentGLS entities.
type ShipmentGLSQuery struct {
	config
	ctx          *QueryContext
	order        []shipmentgls.OrderOption
	inters       []Interceptor
	predicates   []predicate.ShipmentGLS
	withTenant   *TenantQuery
	withShipment *ShipmentQuery
	withFKs      bool
	modifiers    []func(*sql.Selector)
	loadTotal    []func(context.Context, []*ShipmentGLS) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShipmentGLSQuery builder.
func (sgq *ShipmentGLSQuery) Where(ps ...predicate.ShipmentGLS) *ShipmentGLSQuery {
	sgq.predicates = append(sgq.predicates, ps...)
	return sgq
}

// Limit the number of records to be returned by this query.
func (sgq *ShipmentGLSQuery) Limit(limit int) *ShipmentGLSQuery {
	sgq.ctx.Limit = &limit
	return sgq
}

// Offset to start from.
func (sgq *ShipmentGLSQuery) Offset(offset int) *ShipmentGLSQuery {
	sgq.ctx.Offset = &offset
	return sgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sgq *ShipmentGLSQuery) Unique(unique bool) *ShipmentGLSQuery {
	sgq.ctx.Unique = &unique
	return sgq
}

// Order specifies how the records should be ordered.
func (sgq *ShipmentGLSQuery) Order(o ...shipmentgls.OrderOption) *ShipmentGLSQuery {
	sgq.order = append(sgq.order, o...)
	return sgq
}

// QueryTenant chains the current query on the "tenant" edge.
func (sgq *ShipmentGLSQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: sgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgls.Table, shipmentgls.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentgls.TenantTable, shipmentgls.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipment chains the current query on the "shipment" edge.
func (sgq *ShipmentGLSQuery) QueryShipment() *ShipmentQuery {
	query := (&ShipmentClient{config: sgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgls.Table, shipmentgls.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentgls.ShipmentTable, shipmentgls.ShipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ShipmentGLS entity from the query.
// Returns a *NotFoundError when no ShipmentGLS was found.
func (sgq *ShipmentGLSQuery) First(ctx context.Context) (*ShipmentGLS, error) {
	nodes, err := sgq.Limit(1).All(setContextOp(ctx, sgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shipmentgls.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sgq *ShipmentGLSQuery) FirstX(ctx context.Context) *ShipmentGLS {
	node, err := sgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShipmentGLS ID from the query.
// Returns a *NotFoundError when no ShipmentGLS ID was found.
func (sgq *ShipmentGLSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sgq.Limit(1).IDs(setContextOp(ctx, sgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shipmentgls.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sgq *ShipmentGLSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := sgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ShipmentGLS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ShipmentGLS entity is found.
// Returns a *NotFoundError when no ShipmentGLS entities are found.
func (sgq *ShipmentGLSQuery) Only(ctx context.Context) (*ShipmentGLS, error) {
	nodes, err := sgq.Limit(2).All(setContextOp(ctx, sgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shipmentgls.Label}
	default:
		return nil, &NotSingularError{shipmentgls.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sgq *ShipmentGLSQuery) OnlyX(ctx context.Context) *ShipmentGLS {
	node, err := sgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ShipmentGLS ID in the query.
// Returns a *NotSingularError when more than one ShipmentGLS ID is found.
// Returns a *NotFoundError when no entities are found.
func (sgq *ShipmentGLSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sgq.Limit(2).IDs(setContextOp(ctx, sgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shipmentgls.Label}
	default:
		err = &NotSingularError{shipmentgls.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sgq *ShipmentGLSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := sgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShipmentGLSs.
func (sgq *ShipmentGLSQuery) All(ctx context.Context) ([]*ShipmentGLS, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryAll)
	if err := sgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ShipmentGLS, *ShipmentGLSQuery]()
	return withInterceptors[[]*ShipmentGLS](ctx, sgq, qr, sgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sgq *ShipmentGLSQuery) AllX(ctx context.Context) []*ShipmentGLS {
	nodes, err := sgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShipmentGLS IDs.
func (sgq *ShipmentGLSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if sgq.ctx.Unique == nil && sgq.path != nil {
		sgq.Unique(true)
	}
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryIDs)
	if err = sgq.Select(shipmentgls.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sgq *ShipmentGLSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := sgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sgq *ShipmentGLSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryCount)
	if err := sgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sgq, querierCount[*ShipmentGLSQuery](), sgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sgq *ShipmentGLSQuery) CountX(ctx context.Context) int {
	count, err := sgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sgq *ShipmentGLSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryExist)
	switch _, err := sgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sgq *ShipmentGLSQuery) ExistX(ctx context.Context) bool {
	exist, err := sgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShipmentGLSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sgq *ShipmentGLSQuery) Clone() *ShipmentGLSQuery {
	if sgq == nil {
		return nil
	}
	return &ShipmentGLSQuery{
		config:       sgq.config,
		ctx:          sgq.ctx.Clone(),
		order:        append([]shipmentgls.OrderOption{}, sgq.order...),
		inters:       append([]Interceptor{}, sgq.inters...),
		predicates:   append([]predicate.ShipmentGLS{}, sgq.predicates...),
		withTenant:   sgq.withTenant.Clone(),
		withShipment: sgq.withShipment.Clone(),
		// clone intermediate query.
		sql:  sgq.sql.Clone(),
		path: sgq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (sgq *ShipmentGLSQuery) WithTenant(opts ...func(*TenantQuery)) *ShipmentGLSQuery {
	query := (&TenantClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgq.withTenant = query
	return sgq
}

// WithShipment tells the query-builder to eager-load the nodes that are connected to
// the "shipment" edge. The optional arguments are used to configure the query builder of the edge.
func (sgq *ShipmentGLSQuery) WithShipment(opts ...func(*ShipmentQuery)) *ShipmentGLSQuery {
	query := (&ShipmentClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgq.withShipment = query
	return sgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ShipmentGLS.Query().
//		GroupBy(shipmentgls.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sgq *ShipmentGLSQuery) GroupBy(field string, fields ...string) *ShipmentGLSGroupBy {
	sgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ShipmentGLSGroupBy{build: sgq}
	grbuild.flds = &sgq.ctx.Fields
	grbuild.label = shipmentgls.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ShipmentGLS.Query().
//		Select(shipmentgls.FieldTenantID).
//		Scan(ctx, &v)
func (sgq *ShipmentGLSQuery) Select(fields ...string) *ShipmentGLSSelect {
	sgq.ctx.Fields = append(sgq.ctx.Fields, fields...)
	sbuild := &ShipmentGLSSelect{ShipmentGLSQuery: sgq}
	sbuild.label = shipmentgls.Label
	sbuild.flds, sbuild.scan = &sgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ShipmentGLSSelect configured with the given aggregations.
func (sgq *ShipmentGLSQuery) Aggregate(fns ...AggregateFunc) *ShipmentGLSSelect {
	return sgq.Select().Aggregate(fns...)
}

func (sgq *ShipmentGLSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sgq); err != nil {
				return err
			}
		}
	}
	for _, f := range sgq.ctx.Fields {
		if !shipmentgls.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sgq.path != nil {
		prev, err := sgq.path(ctx)
		if err != nil {
			return err
		}
		sgq.sql = prev
	}
	if shipmentgls.Policy == nil {
		return errors.New("ent: uninitialized shipmentgls.Policy (forgotten import ent/runtime?)")
	}
	if err := shipmentgls.Policy.EvalQuery(ctx, sgq); err != nil {
		return err
	}
	return nil
}

func (sgq *ShipmentGLSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ShipmentGLS, error) {
	var (
		nodes       = []*ShipmentGLS{}
		withFKs     = sgq.withFKs
		_spec       = sgq.querySpec()
		loadedTypes = [2]bool{
			sgq.withTenant != nil,
			sgq.withShipment != nil,
		}
	)
	if sgq.withShipment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgls.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ShipmentGLS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ShipmentGLS{config: sgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sgq.modifiers) > 0 {
		_spec.Modifiers = sgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sgq.withTenant; query != nil {
		if err := sgq.loadTenant(ctx, query, nodes, nil,
			func(n *ShipmentGLS, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := sgq.withShipment; query != nil {
		if err := sgq.loadShipment(ctx, query, nodes, nil,
			func(n *ShipmentGLS, e *Shipment) { n.Edges.Shipment = e }); err != nil {
			return nil, err
		}
	}
	for i := range sgq.loadTotal {
		if err := sgq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sgq *ShipmentGLSQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ShipmentGLS, init func(*ShipmentGLS), assign func(*ShipmentGLS, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentGLS)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sgq *ShipmentGLSQuery) loadShipment(ctx context.Context, query *ShipmentQuery, nodes []*ShipmentGLS, init func(*ShipmentGLS), assign func(*ShipmentGLS, *Shipment)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentGLS)
	for i := range nodes {
		if nodes[i].shipment_shipment_gls == nil {
			continue
		}
		fk := *nodes[i].shipment_shipment_gls
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_shipment_gls" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sgq *ShipmentGLSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sgq.querySpec()
	if len(sgq.modifiers) > 0 {
		_spec.Modifiers = sgq.modifiers
	}
	_spec.Node.Columns = sgq.ctx.Fields
	if len(sgq.ctx.Fields) > 0 {
		_spec.Unique = sgq.ctx.Unique != nil && *sgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sgq.driver, _spec)
}

func (sgq *ShipmentGLSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(shipmentgls.Table, shipmentgls.Columns, sqlgraph.NewFieldSpec(shipmentgls.FieldID, field.TypeString))
	_spec.From = sgq.sql
	if unique := sgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sgq.path != nil {
		_spec.Unique = true
	}
	if fields := sgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentgls.FieldID)
		for i := range fields {
			if fields[i] != shipmentgls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sgq.withTenant != nil {
			_spec.Node.AddColumnOnce(shipmentgls.FieldTenantID)
		}
	}
	if ps := sgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sgq *ShipmentGLSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sgq.driver.Dialect())
	t1 := builder.Table(shipmentgls.Table)
	columns := sgq.ctx.Fields
	if len(columns) == 0 {
		columns = shipmentgls.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sgq.sql != nil {
		selector = sgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sgq.ctx.Unique != nil && *sgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sgq.predicates {
		p(selector)
	}
	for _, p := range sgq.order {
		p(selector)
	}
	if offset := sgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ShipmentGLSGroupBy is the group-by builder for ShipmentGLS entities.
type ShipmentGLSGroupBy struct {
	selector
	build *ShipmentGLSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sggb *ShipmentGLSGroupBy) Aggregate(fns ...AggregateFunc) *ShipmentGLSGroupBy {
	sggb.fns = append(sggb.fns, fns...)
	return sggb
}

// Scan applies the selector query and scans the result into the given value.
func (sggb *ShipmentGLSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sggb.build.ctx, ent.OpQueryGroupBy)
	if err := sggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentGLSQuery, *ShipmentGLSGroupBy](ctx, sggb.build, sggb, sggb.build.inters, v)
}

func (sggb *ShipmentGLSGroupBy) sqlScan(ctx context.Context, root *ShipmentGLSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sggb.fns))
	for _, fn := range sggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sggb.flds)+len(sggb.fns))
		for _, f := range *sggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ShipmentGLSSelect is the builder for selecting fields of ShipmentGLS entities.
type ShipmentGLSSelect struct {
	*ShipmentGLSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sgs *ShipmentGLSSelect) Aggregate(fns ...AggregateFunc) *ShipmentGLSSelect {
	sgs.fns = append(sgs.fns, fns...)
	return sgs
}

// Scan applies the selector query and scans the result into the given value.
func (sgs *ShipmentGLSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgs.ctx, ent.OpQuerySelect)
	if err := sgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentGLSQuery, *ShipmentGLSSelect](ctx, sgs.ShipmentGLSQuery, sgs, sgs.inters, v)
}

func (sgs *ShipmentGLSSelect) sqlScan(ctx context.Context, root *ShipmentGLSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sgs.fns))
	for _, fn := range sgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
