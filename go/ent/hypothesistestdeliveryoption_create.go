// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionCreate is the builder for creating a HypothesisTestDeliveryOption entity.
type HypothesisTestDeliveryOptionCreate struct {
	config
	mutation *HypothesisTestDeliveryOptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetTenantID(pu pulid.ID) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.SetTenantID(pu)
	return htdoc
}

// SetRandomizeWithinGroupSort sets the "randomize_within_group_sort" field.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetRandomizeWithinGroupSort(b bool) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.SetRandomizeWithinGroupSort(b)
	return htdoc
}

// SetNillableRandomizeWithinGroupSort sets the "randomize_within_group_sort" field if the given value is not nil.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetNillableRandomizeWithinGroupSort(b *bool) *HypothesisTestDeliveryOptionCreate {
	if b != nil {
		htdoc.SetRandomizeWithinGroupSort(*b)
	}
	return htdoc
}

// SetByIntervalRotation sets the "by_interval_rotation" field.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetByIntervalRotation(b bool) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.SetByIntervalRotation(b)
	return htdoc
}

// SetNillableByIntervalRotation sets the "by_interval_rotation" field if the given value is not nil.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetNillableByIntervalRotation(b *bool) *HypothesisTestDeliveryOptionCreate {
	if b != nil {
		htdoc.SetByIntervalRotation(*b)
	}
	return htdoc
}

// SetRotationIntervalHours sets the "rotation_interval_hours" field.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetRotationIntervalHours(i int) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.SetRotationIntervalHours(i)
	return htdoc
}

// SetNillableRotationIntervalHours sets the "rotation_interval_hours" field if the given value is not nil.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetNillableRotationIntervalHours(i *int) *HypothesisTestDeliveryOptionCreate {
	if i != nil {
		htdoc.SetRotationIntervalHours(*i)
	}
	return htdoc
}

// SetByOrder sets the "by_order" field.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetByOrder(b bool) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.SetByOrder(b)
	return htdoc
}

// SetNillableByOrder sets the "by_order" field if the given value is not nil.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetNillableByOrder(b *bool) *HypothesisTestDeliveryOptionCreate {
	if b != nil {
		htdoc.SetByOrder(*b)
	}
	return htdoc
}

// SetID sets the "id" field.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetID(pu pulid.ID) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.SetID(pu)
	return htdoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetNillableID(pu *pulid.ID) *HypothesisTestDeliveryOptionCreate {
	if pu != nil {
		htdoc.SetID(*pu)
	}
	return htdoc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetTenant(t *Tenant) *HypothesisTestDeliveryOptionCreate {
	return htdoc.SetTenantID(t.ID)
}

// SetHypothesisTestID sets the "hypothesis_test" edge to the HypothesisTest entity by ID.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetHypothesisTestID(id pulid.ID) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.SetHypothesisTestID(id)
	return htdoc
}

// SetHypothesisTest sets the "hypothesis_test" edge to the HypothesisTest entity.
func (htdoc *HypothesisTestDeliveryOptionCreate) SetHypothesisTest(h *HypothesisTest) *HypothesisTestDeliveryOptionCreate {
	return htdoc.SetHypothesisTestID(h.ID)
}

// AddHypothesisTestDeliveryOptionRequestIDs adds the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by IDs.
func (htdoc *HypothesisTestDeliveryOptionCreate) AddHypothesisTestDeliveryOptionRequestIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.AddHypothesisTestDeliveryOptionRequestIDs(ids...)
	return htdoc
}

// AddHypothesisTestDeliveryOptionRequest adds the "hypothesis_test_delivery_option_request" edges to the HypothesisTestDeliveryOptionRequest entity.
func (htdoc *HypothesisTestDeliveryOptionCreate) AddHypothesisTestDeliveryOptionRequest(h ...*HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionCreate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdoc.AddHypothesisTestDeliveryOptionRequestIDs(ids...)
}

// AddDeliveryOptionGroupOneIDs adds the "delivery_option_group_one" edge to the DeliveryOption entity by IDs.
func (htdoc *HypothesisTestDeliveryOptionCreate) AddDeliveryOptionGroupOneIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.AddDeliveryOptionGroupOneIDs(ids...)
	return htdoc
}

// AddDeliveryOptionGroupOne adds the "delivery_option_group_one" edges to the DeliveryOption entity.
func (htdoc *HypothesisTestDeliveryOptionCreate) AddDeliveryOptionGroupOne(d ...*DeliveryOption) *HypothesisTestDeliveryOptionCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdoc.AddDeliveryOptionGroupOneIDs(ids...)
}

// AddDeliveryOptionGroupTwoIDs adds the "delivery_option_group_two" edge to the DeliveryOption entity by IDs.
func (htdoc *HypothesisTestDeliveryOptionCreate) AddDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionCreate {
	htdoc.mutation.AddDeliveryOptionGroupTwoIDs(ids...)
	return htdoc
}

// AddDeliveryOptionGroupTwo adds the "delivery_option_group_two" edges to the DeliveryOption entity.
func (htdoc *HypothesisTestDeliveryOptionCreate) AddDeliveryOptionGroupTwo(d ...*DeliveryOption) *HypothesisTestDeliveryOptionCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdoc.AddDeliveryOptionGroupTwoIDs(ids...)
}

// Mutation returns the HypothesisTestDeliveryOptionMutation object of the builder.
func (htdoc *HypothesisTestDeliveryOptionCreate) Mutation() *HypothesisTestDeliveryOptionMutation {
	return htdoc.mutation
}

// Save creates the HypothesisTestDeliveryOption in the database.
func (htdoc *HypothesisTestDeliveryOptionCreate) Save(ctx context.Context) (*HypothesisTestDeliveryOption, error) {
	if err := htdoc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, htdoc.sqlSave, htdoc.mutation, htdoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (htdoc *HypothesisTestDeliveryOptionCreate) SaveX(ctx context.Context) *HypothesisTestDeliveryOption {
	v, err := htdoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htdoc *HypothesisTestDeliveryOptionCreate) Exec(ctx context.Context) error {
	_, err := htdoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdoc *HypothesisTestDeliveryOptionCreate) ExecX(ctx context.Context) {
	if err := htdoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htdoc *HypothesisTestDeliveryOptionCreate) defaults() error {
	if _, ok := htdoc.mutation.RandomizeWithinGroupSort(); !ok {
		v := hypothesistestdeliveryoption.DefaultRandomizeWithinGroupSort
		htdoc.mutation.SetRandomizeWithinGroupSort(v)
	}
	if _, ok := htdoc.mutation.ByIntervalRotation(); !ok {
		v := hypothesistestdeliveryoption.DefaultByIntervalRotation
		htdoc.mutation.SetByIntervalRotation(v)
	}
	if _, ok := htdoc.mutation.RotationIntervalHours(); !ok {
		v := hypothesistestdeliveryoption.DefaultRotationIntervalHours
		htdoc.mutation.SetRotationIntervalHours(v)
	}
	if _, ok := htdoc.mutation.ByOrder(); !ok {
		v := hypothesistestdeliveryoption.DefaultByOrder
		htdoc.mutation.SetByOrder(v)
	}
	if _, ok := htdoc.mutation.ID(); !ok {
		if hypothesistestdeliveryoption.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized hypothesistestdeliveryoption.DefaultID (forgotten import ent/runtime?)")
		}
		v := hypothesistestdeliveryoption.DefaultID()
		htdoc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (htdoc *HypothesisTestDeliveryOptionCreate) check() error {
	if _, ok := htdoc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOption.tenant_id"`)}
	}
	if _, ok := htdoc.mutation.RandomizeWithinGroupSort(); !ok {
		return &ValidationError{Name: "randomize_within_group_sort", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOption.randomize_within_group_sort"`)}
	}
	if _, ok := htdoc.mutation.ByIntervalRotation(); !ok {
		return &ValidationError{Name: "by_interval_rotation", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOption.by_interval_rotation"`)}
	}
	if _, ok := htdoc.mutation.RotationIntervalHours(); !ok {
		return &ValidationError{Name: "rotation_interval_hours", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOption.rotation_interval_hours"`)}
	}
	if _, ok := htdoc.mutation.ByOrder(); !ok {
		return &ValidationError{Name: "by_order", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOption.by_order"`)}
	}
	if len(htdoc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "HypothesisTestDeliveryOption.tenant"`)}
	}
	if len(htdoc.mutation.HypothesisTestIDs()) == 0 {
		return &ValidationError{Name: "hypothesis_test", err: errors.New(`ent: missing required edge "HypothesisTestDeliveryOption.hypothesis_test"`)}
	}
	return nil
}

func (htdoc *HypothesisTestDeliveryOptionCreate) sqlSave(ctx context.Context) (*HypothesisTestDeliveryOption, error) {
	if err := htdoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := htdoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, htdoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	htdoc.mutation.id = &_node.ID
	htdoc.mutation.done = true
	return _node, nil
}

func (htdoc *HypothesisTestDeliveryOptionCreate) createSpec() (*HypothesisTestDeliveryOption, *sqlgraph.CreateSpec) {
	var (
		_node = &HypothesisTestDeliveryOption{config: htdoc.config}
		_spec = sqlgraph.NewCreateSpec(hypothesistestdeliveryoption.Table, sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString))
	)
	_spec.OnConflict = htdoc.conflict
	if id, ok := htdoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := htdoc.mutation.RandomizeWithinGroupSort(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort, field.TypeBool, value)
		_node.RandomizeWithinGroupSort = value
	}
	if value, ok := htdoc.mutation.ByIntervalRotation(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldByIntervalRotation, field.TypeBool, value)
		_node.ByIntervalRotation = value
	}
	if value, ok := htdoc.mutation.RotationIntervalHours(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldRotationIntervalHours, field.TypeInt, value)
		_node.RotationIntervalHours = value
	}
	if value, ok := htdoc.mutation.ByOrder(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldByOrder, field.TypeBool, value)
		_node.ByOrder = value
	}
	if nodes := htdoc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.TenantTable,
			Columns: []string{hypothesistestdeliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htdoc.mutation.HypothesisTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hypothesis_test_hypothesis_test_delivery_option = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htdoc.mutation.HypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htdoc.mutation.DeliveryOptionGroupOneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupOneTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htdoc.mutation.DeliveryOptionGroupTwoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HypothesisTestDeliveryOption.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HypothesisTestDeliveryOptionUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (htdoc *HypothesisTestDeliveryOptionCreate) OnConflict(opts ...sql.ConflictOption) *HypothesisTestDeliveryOptionUpsertOne {
	htdoc.conflict = opts
	return &HypothesisTestDeliveryOptionUpsertOne{
		create: htdoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOption.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (htdoc *HypothesisTestDeliveryOptionCreate) OnConflictColumns(columns ...string) *HypothesisTestDeliveryOptionUpsertOne {
	htdoc.conflict = append(htdoc.conflict, sql.ConflictColumns(columns...))
	return &HypothesisTestDeliveryOptionUpsertOne{
		create: htdoc,
	}
}

type (
	// HypothesisTestDeliveryOptionUpsertOne is the builder for "upsert"-ing
	//  one HypothesisTestDeliveryOption node.
	HypothesisTestDeliveryOptionUpsertOne struct {
		create *HypothesisTestDeliveryOptionCreate
	}

	// HypothesisTestDeliveryOptionUpsert is the "OnConflict" setter.
	HypothesisTestDeliveryOptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestDeliveryOptionUpsert) SetTenantID(v pulid.ID) *HypothesisTestDeliveryOptionUpsert {
	u.Set(hypothesistestdeliveryoption.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsert) UpdateTenantID() *HypothesisTestDeliveryOptionUpsert {
	u.SetExcluded(hypothesistestdeliveryoption.FieldTenantID)
	return u
}

// SetRandomizeWithinGroupSort sets the "randomize_within_group_sort" field.
func (u *HypothesisTestDeliveryOptionUpsert) SetRandomizeWithinGroupSort(v bool) *HypothesisTestDeliveryOptionUpsert {
	u.Set(hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort, v)
	return u
}

// UpdateRandomizeWithinGroupSort sets the "randomize_within_group_sort" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsert) UpdateRandomizeWithinGroupSort() *HypothesisTestDeliveryOptionUpsert {
	u.SetExcluded(hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort)
	return u
}

// SetByIntervalRotation sets the "by_interval_rotation" field.
func (u *HypothesisTestDeliveryOptionUpsert) SetByIntervalRotation(v bool) *HypothesisTestDeliveryOptionUpsert {
	u.Set(hypothesistestdeliveryoption.FieldByIntervalRotation, v)
	return u
}

// UpdateByIntervalRotation sets the "by_interval_rotation" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsert) UpdateByIntervalRotation() *HypothesisTestDeliveryOptionUpsert {
	u.SetExcluded(hypothesistestdeliveryoption.FieldByIntervalRotation)
	return u
}

// SetRotationIntervalHours sets the "rotation_interval_hours" field.
func (u *HypothesisTestDeliveryOptionUpsert) SetRotationIntervalHours(v int) *HypothesisTestDeliveryOptionUpsert {
	u.Set(hypothesistestdeliveryoption.FieldRotationIntervalHours, v)
	return u
}

// UpdateRotationIntervalHours sets the "rotation_interval_hours" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsert) UpdateRotationIntervalHours() *HypothesisTestDeliveryOptionUpsert {
	u.SetExcluded(hypothesistestdeliveryoption.FieldRotationIntervalHours)
	return u
}

// AddRotationIntervalHours adds v to the "rotation_interval_hours" field.
func (u *HypothesisTestDeliveryOptionUpsert) AddRotationIntervalHours(v int) *HypothesisTestDeliveryOptionUpsert {
	u.Add(hypothesistestdeliveryoption.FieldRotationIntervalHours, v)
	return u
}

// SetByOrder sets the "by_order" field.
func (u *HypothesisTestDeliveryOptionUpsert) SetByOrder(v bool) *HypothesisTestDeliveryOptionUpsert {
	u.Set(hypothesistestdeliveryoption.FieldByOrder, v)
	return u
}

// UpdateByOrder sets the "by_order" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsert) UpdateByOrder() *HypothesisTestDeliveryOptionUpsert {
	u.SetExcluded(hypothesistestdeliveryoption.FieldByOrder)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOption.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hypothesistestdeliveryoption.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HypothesisTestDeliveryOptionUpsertOne) UpdateNewValues() *HypothesisTestDeliveryOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hypothesistestdeliveryoption.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOption.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HypothesisTestDeliveryOptionUpsertOne) Ignore() *HypothesisTestDeliveryOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HypothesisTestDeliveryOptionUpsertOne) DoNothing() *HypothesisTestDeliveryOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HypothesisTestDeliveryOptionCreate.OnConflict
// documentation for more info.
func (u *HypothesisTestDeliveryOptionUpsertOne) Update(set func(*HypothesisTestDeliveryOptionUpsert)) *HypothesisTestDeliveryOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HypothesisTestDeliveryOptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestDeliveryOptionUpsertOne) SetTenantID(v pulid.ID) *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertOne) UpdateTenantID() *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateTenantID()
	})
}

// SetRandomizeWithinGroupSort sets the "randomize_within_group_sort" field.
func (u *HypothesisTestDeliveryOptionUpsertOne) SetRandomizeWithinGroupSort(v bool) *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetRandomizeWithinGroupSort(v)
	})
}

// UpdateRandomizeWithinGroupSort sets the "randomize_within_group_sort" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertOne) UpdateRandomizeWithinGroupSort() *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateRandomizeWithinGroupSort()
	})
}

// SetByIntervalRotation sets the "by_interval_rotation" field.
func (u *HypothesisTestDeliveryOptionUpsertOne) SetByIntervalRotation(v bool) *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetByIntervalRotation(v)
	})
}

// UpdateByIntervalRotation sets the "by_interval_rotation" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertOne) UpdateByIntervalRotation() *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateByIntervalRotation()
	})
}

// SetRotationIntervalHours sets the "rotation_interval_hours" field.
func (u *HypothesisTestDeliveryOptionUpsertOne) SetRotationIntervalHours(v int) *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetRotationIntervalHours(v)
	})
}

// AddRotationIntervalHours adds v to the "rotation_interval_hours" field.
func (u *HypothesisTestDeliveryOptionUpsertOne) AddRotationIntervalHours(v int) *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.AddRotationIntervalHours(v)
	})
}

// UpdateRotationIntervalHours sets the "rotation_interval_hours" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertOne) UpdateRotationIntervalHours() *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateRotationIntervalHours()
	})
}

// SetByOrder sets the "by_order" field.
func (u *HypothesisTestDeliveryOptionUpsertOne) SetByOrder(v bool) *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetByOrder(v)
	})
}

// UpdateByOrder sets the "by_order" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertOne) UpdateByOrder() *HypothesisTestDeliveryOptionUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateByOrder()
	})
}

// Exec executes the query.
func (u *HypothesisTestDeliveryOptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HypothesisTestDeliveryOptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HypothesisTestDeliveryOptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HypothesisTestDeliveryOptionUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: HypothesisTestDeliveryOptionUpsertOne.ID is not supported by MySQL driver. Use HypothesisTestDeliveryOptionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HypothesisTestDeliveryOptionUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HypothesisTestDeliveryOptionCreateBulk is the builder for creating many HypothesisTestDeliveryOption entities in bulk.
type HypothesisTestDeliveryOptionCreateBulk struct {
	config
	err      error
	builders []*HypothesisTestDeliveryOptionCreate
	conflict []sql.ConflictOption
}

// Save creates the HypothesisTestDeliveryOption entities in the database.
func (htdocb *HypothesisTestDeliveryOptionCreateBulk) Save(ctx context.Context) ([]*HypothesisTestDeliveryOption, error) {
	if htdocb.err != nil {
		return nil, htdocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(htdocb.builders))
	nodes := make([]*HypothesisTestDeliveryOption, len(htdocb.builders))
	mutators := make([]Mutator, len(htdocb.builders))
	for i := range htdocb.builders {
		func(i int, root context.Context) {
			builder := htdocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HypothesisTestDeliveryOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, htdocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = htdocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, htdocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, htdocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (htdocb *HypothesisTestDeliveryOptionCreateBulk) SaveX(ctx context.Context) []*HypothesisTestDeliveryOption {
	v, err := htdocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htdocb *HypothesisTestDeliveryOptionCreateBulk) Exec(ctx context.Context) error {
	_, err := htdocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdocb *HypothesisTestDeliveryOptionCreateBulk) ExecX(ctx context.Context) {
	if err := htdocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HypothesisTestDeliveryOption.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HypothesisTestDeliveryOptionUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (htdocb *HypothesisTestDeliveryOptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *HypothesisTestDeliveryOptionUpsertBulk {
	htdocb.conflict = opts
	return &HypothesisTestDeliveryOptionUpsertBulk{
		create: htdocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOption.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (htdocb *HypothesisTestDeliveryOptionCreateBulk) OnConflictColumns(columns ...string) *HypothesisTestDeliveryOptionUpsertBulk {
	htdocb.conflict = append(htdocb.conflict, sql.ConflictColumns(columns...))
	return &HypothesisTestDeliveryOptionUpsertBulk{
		create: htdocb,
	}
}

// HypothesisTestDeliveryOptionUpsertBulk is the builder for "upsert"-ing
// a bulk of HypothesisTestDeliveryOption nodes.
type HypothesisTestDeliveryOptionUpsertBulk struct {
	create *HypothesisTestDeliveryOptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOption.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hypothesistestdeliveryoption.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HypothesisTestDeliveryOptionUpsertBulk) UpdateNewValues() *HypothesisTestDeliveryOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hypothesistestdeliveryoption.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOption.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HypothesisTestDeliveryOptionUpsertBulk) Ignore() *HypothesisTestDeliveryOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HypothesisTestDeliveryOptionUpsertBulk) DoNothing() *HypothesisTestDeliveryOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HypothesisTestDeliveryOptionCreateBulk.OnConflict
// documentation for more info.
func (u *HypothesisTestDeliveryOptionUpsertBulk) Update(set func(*HypothesisTestDeliveryOptionUpsert)) *HypothesisTestDeliveryOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HypothesisTestDeliveryOptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestDeliveryOptionUpsertBulk) SetTenantID(v pulid.ID) *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertBulk) UpdateTenantID() *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateTenantID()
	})
}

// SetRandomizeWithinGroupSort sets the "randomize_within_group_sort" field.
func (u *HypothesisTestDeliveryOptionUpsertBulk) SetRandomizeWithinGroupSort(v bool) *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetRandomizeWithinGroupSort(v)
	})
}

// UpdateRandomizeWithinGroupSort sets the "randomize_within_group_sort" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertBulk) UpdateRandomizeWithinGroupSort() *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateRandomizeWithinGroupSort()
	})
}

// SetByIntervalRotation sets the "by_interval_rotation" field.
func (u *HypothesisTestDeliveryOptionUpsertBulk) SetByIntervalRotation(v bool) *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetByIntervalRotation(v)
	})
}

// UpdateByIntervalRotation sets the "by_interval_rotation" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertBulk) UpdateByIntervalRotation() *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateByIntervalRotation()
	})
}

// SetRotationIntervalHours sets the "rotation_interval_hours" field.
func (u *HypothesisTestDeliveryOptionUpsertBulk) SetRotationIntervalHours(v int) *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetRotationIntervalHours(v)
	})
}

// AddRotationIntervalHours adds v to the "rotation_interval_hours" field.
func (u *HypothesisTestDeliveryOptionUpsertBulk) AddRotationIntervalHours(v int) *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.AddRotationIntervalHours(v)
	})
}

// UpdateRotationIntervalHours sets the "rotation_interval_hours" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertBulk) UpdateRotationIntervalHours() *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateRotationIntervalHours()
	})
}

// SetByOrder sets the "by_order" field.
func (u *HypothesisTestDeliveryOptionUpsertBulk) SetByOrder(v bool) *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.SetByOrder(v)
	})
}

// UpdateByOrder sets the "by_order" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionUpsertBulk) UpdateByOrder() *HypothesisTestDeliveryOptionUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionUpsert) {
		s.UpdateByOrder()
	})
}

// Exec executes the query.
func (u *HypothesisTestDeliveryOptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HypothesisTestDeliveryOptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HypothesisTestDeliveryOptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HypothesisTestDeliveryOptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
