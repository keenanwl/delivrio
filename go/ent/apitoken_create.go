// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// APITokenCreate is the builder for creating a APIToken entity.
type APITokenCreate struct {
	config
	mutation *APITokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (atc *APITokenCreate) SetTenantID(pu pulid.ID) *APITokenCreate {
	atc.mutation.SetTenantID(pu)
	return atc
}

// SetName sets the "name" field.
func (atc *APITokenCreate) SetName(s string) *APITokenCreate {
	atc.mutation.SetName(s)
	return atc
}

// SetHashedToken sets the "hashed_token" field.
func (atc *APITokenCreate) SetHashedToken(s string) *APITokenCreate {
	atc.mutation.SetHashedToken(s)
	return atc
}

// SetCreatedAt sets the "created_at" field.
func (atc *APITokenCreate) SetCreatedAt(t time.Time) *APITokenCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *APITokenCreate) SetNillableCreatedAt(t *time.Time) *APITokenCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetLastUsed sets the "last_used" field.
func (atc *APITokenCreate) SetLastUsed(t time.Time) *APITokenCreate {
	atc.mutation.SetLastUsed(t)
	return atc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (atc *APITokenCreate) SetNillableLastUsed(t *time.Time) *APITokenCreate {
	if t != nil {
		atc.SetLastUsed(*t)
	}
	return atc
}

// SetID sets the "id" field.
func (atc *APITokenCreate) SetID(pu pulid.ID) *APITokenCreate {
	atc.mutation.SetID(pu)
	return atc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atc *APITokenCreate) SetNillableID(pu *pulid.ID) *APITokenCreate {
	if pu != nil {
		atc.SetID(*pu)
	}
	return atc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (atc *APITokenCreate) SetTenant(t *Tenant) *APITokenCreate {
	return atc.SetTenantID(t.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (atc *APITokenCreate) SetUserID(id pulid.ID) *APITokenCreate {
	atc.mutation.SetUserID(id)
	return atc
}

// SetUser sets the "user" edge to the User entity.
func (atc *APITokenCreate) SetUser(u *User) *APITokenCreate {
	return atc.SetUserID(u.ID)
}

// Mutation returns the APITokenMutation object of the builder.
func (atc *APITokenCreate) Mutation() *APITokenMutation {
	return atc.mutation
}

// Save creates the APIToken in the database.
func (atc *APITokenCreate) Save(ctx context.Context) (*APIToken, error) {
	if err := atc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *APITokenCreate) SaveX(ctx context.Context) *APIToken {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *APITokenCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *APITokenCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *APITokenCreate) defaults() error {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		if apitoken.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized apitoken.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := apitoken.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.ID(); !ok {
		if apitoken.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized apitoken.DefaultID (forgotten import ent/runtime?)")
		}
		v := apitoken.DefaultID()
		atc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (atc *APITokenCreate) check() error {
	if _, ok := atc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "APIToken.tenant_id"`)}
	}
	if _, ok := atc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "APIToken.name"`)}
	}
	if _, ok := atc.mutation.HashedToken(); !ok {
		return &ValidationError{Name: "hashed_token", err: errors.New(`ent: missing required field "APIToken.hashed_token"`)}
	}
	if v, ok := atc.mutation.HashedToken(); ok {
		if err := apitoken.HashedTokenValidator(v); err != nil {
			return &ValidationError{Name: "hashed_token", err: fmt.Errorf(`ent: validator failed for field "APIToken.hashed_token": %w`, err)}
		}
	}
	if len(atc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "APIToken.tenant"`)}
	}
	if len(atc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "APIToken.user"`)}
	}
	return nil
}

func (atc *APITokenCreate) sqlSave(ctx context.Context) (*APIToken, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *APITokenCreate) createSpec() (*APIToken, *sqlgraph.CreateSpec) {
	var (
		_node = &APIToken{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(apitoken.Table, sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString))
	)
	_spec.OnConflict = atc.conflict
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := atc.mutation.Name(); ok {
		_spec.SetField(apitoken.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := atc.mutation.HashedToken(); ok {
		_spec.SetField(apitoken.FieldHashedToken, field.TypeString, value)
		_node.HashedToken = value
	}
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.SetField(apitoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := atc.mutation.LastUsed(); ok {
		_spec.SetField(apitoken.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = value
	}
	if nodes := atc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.TenantTable,
			Columns: []string{apitoken.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_api_token = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.APIToken.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.APITokenUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (atc *APITokenCreate) OnConflict(opts ...sql.ConflictOption) *APITokenUpsertOne {
	atc.conflict = opts
	return &APITokenUpsertOne{
		create: atc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.APIToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atc *APITokenCreate) OnConflictColumns(columns ...string) *APITokenUpsertOne {
	atc.conflict = append(atc.conflict, sql.ConflictColumns(columns...))
	return &APITokenUpsertOne{
		create: atc,
	}
}

type (
	// APITokenUpsertOne is the builder for "upsert"-ing
	//  one APIToken node.
	APITokenUpsertOne struct {
		create *APITokenCreate
	}

	// APITokenUpsert is the "OnConflict" setter.
	APITokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *APITokenUpsert) SetTenantID(v pulid.ID) *APITokenUpsert {
	u.Set(apitoken.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *APITokenUpsert) UpdateTenantID() *APITokenUpsert {
	u.SetExcluded(apitoken.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *APITokenUpsert) SetName(v string) *APITokenUpsert {
	u.Set(apitoken.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *APITokenUpsert) UpdateName() *APITokenUpsert {
	u.SetExcluded(apitoken.FieldName)
	return u
}

// SetLastUsed sets the "last_used" field.
func (u *APITokenUpsert) SetLastUsed(v time.Time) *APITokenUpsert {
	u.Set(apitoken.FieldLastUsed, v)
	return u
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *APITokenUpsert) UpdateLastUsed() *APITokenUpsert {
	u.SetExcluded(apitoken.FieldLastUsed)
	return u
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *APITokenUpsert) ClearLastUsed() *APITokenUpsert {
	u.SetNull(apitoken.FieldLastUsed)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.APIToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apitoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *APITokenUpsertOne) UpdateNewValues() *APITokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apitoken.FieldID)
		}
		if _, exists := u.create.mutation.HashedToken(); exists {
			s.SetIgnore(apitoken.FieldHashedToken)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(apitoken.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.APIToken.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *APITokenUpsertOne) Ignore() *APITokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *APITokenUpsertOne) DoNothing() *APITokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the APITokenCreate.OnConflict
// documentation for more info.
func (u *APITokenUpsertOne) Update(set func(*APITokenUpsert)) *APITokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&APITokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *APITokenUpsertOne) SetTenantID(v pulid.ID) *APITokenUpsertOne {
	return u.Update(func(s *APITokenUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *APITokenUpsertOne) UpdateTenantID() *APITokenUpsertOne {
	return u.Update(func(s *APITokenUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *APITokenUpsertOne) SetName(v string) *APITokenUpsertOne {
	return u.Update(func(s *APITokenUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *APITokenUpsertOne) UpdateName() *APITokenUpsertOne {
	return u.Update(func(s *APITokenUpsert) {
		s.UpdateName()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *APITokenUpsertOne) SetLastUsed(v time.Time) *APITokenUpsertOne {
	return u.Update(func(s *APITokenUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *APITokenUpsertOne) UpdateLastUsed() *APITokenUpsertOne {
	return u.Update(func(s *APITokenUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *APITokenUpsertOne) ClearLastUsed() *APITokenUpsertOne {
	return u.Update(func(s *APITokenUpsert) {
		s.ClearLastUsed()
	})
}

// Exec executes the query.
func (u *APITokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for APITokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *APITokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *APITokenUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: APITokenUpsertOne.ID is not supported by MySQL driver. Use APITokenUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *APITokenUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// APITokenCreateBulk is the builder for creating many APIToken entities in bulk.
type APITokenCreateBulk struct {
	config
	err      error
	builders []*APITokenCreate
	conflict []sql.ConflictOption
}

// Save creates the APIToken entities in the database.
func (atcb *APITokenCreateBulk) Save(ctx context.Context) ([]*APIToken, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*APIToken, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APITokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = atcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *APITokenCreateBulk) SaveX(ctx context.Context) []*APIToken {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *APITokenCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *APITokenCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.APIToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.APITokenUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (atcb *APITokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *APITokenUpsertBulk {
	atcb.conflict = opts
	return &APITokenUpsertBulk{
		create: atcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.APIToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atcb *APITokenCreateBulk) OnConflictColumns(columns ...string) *APITokenUpsertBulk {
	atcb.conflict = append(atcb.conflict, sql.ConflictColumns(columns...))
	return &APITokenUpsertBulk{
		create: atcb,
	}
}

// APITokenUpsertBulk is the builder for "upsert"-ing
// a bulk of APIToken nodes.
type APITokenUpsertBulk struct {
	create *APITokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.APIToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apitoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *APITokenUpsertBulk) UpdateNewValues() *APITokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apitoken.FieldID)
			}
			if _, exists := b.mutation.HashedToken(); exists {
				s.SetIgnore(apitoken.FieldHashedToken)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(apitoken.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.APIToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *APITokenUpsertBulk) Ignore() *APITokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *APITokenUpsertBulk) DoNothing() *APITokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the APITokenCreateBulk.OnConflict
// documentation for more info.
func (u *APITokenUpsertBulk) Update(set func(*APITokenUpsert)) *APITokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&APITokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *APITokenUpsertBulk) SetTenantID(v pulid.ID) *APITokenUpsertBulk {
	return u.Update(func(s *APITokenUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *APITokenUpsertBulk) UpdateTenantID() *APITokenUpsertBulk {
	return u.Update(func(s *APITokenUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *APITokenUpsertBulk) SetName(v string) *APITokenUpsertBulk {
	return u.Update(func(s *APITokenUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *APITokenUpsertBulk) UpdateName() *APITokenUpsertBulk {
	return u.Update(func(s *APITokenUpsert) {
		s.UpdateName()
	})
}

// SetLastUsed sets the "last_used" field.
func (u *APITokenUpsertBulk) SetLastUsed(v time.Time) *APITokenUpsertBulk {
	return u.Update(func(s *APITokenUpsert) {
		s.SetLastUsed(v)
	})
}

// UpdateLastUsed sets the "last_used" field to the value that was provided on create.
func (u *APITokenUpsertBulk) UpdateLastUsed() *APITokenUpsertBulk {
	return u.Update(func(s *APITokenUpsert) {
		s.UpdateLastUsed()
	})
}

// ClearLastUsed clears the value of the "last_used" field.
func (u *APITokenUpsertBulk) ClearLastUsed() *APITokenUpsertBulk {
	return u.Update(func(s *APITokenUpsert) {
		s.ClearLastUsed()
	})
}

// Exec executes the query.
func (u *APITokenUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the APITokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for APITokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *APITokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
