// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentPalletCreate is the builder for creating a ShipmentPallet entity.
type ShipmentPalletCreate struct {
	config
	mutation *ShipmentPalletMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (spc *ShipmentPalletCreate) SetTenantID(pu pulid.ID) *ShipmentPalletCreate {
	spc.mutation.SetTenantID(pu)
	return spc
}

// SetBarcode sets the "barcode" field.
func (spc *ShipmentPalletCreate) SetBarcode(s string) *ShipmentPalletCreate {
	spc.mutation.SetBarcode(s)
	return spc
}

// SetColliNumber sets the "colli_number" field.
func (spc *ShipmentPalletCreate) SetColliNumber(s string) *ShipmentPalletCreate {
	spc.mutation.SetColliNumber(s)
	return spc
}

// SetCarrierID sets the "carrier_id" field.
func (spc *ShipmentPalletCreate) SetCarrierID(s string) *ShipmentPalletCreate {
	spc.mutation.SetCarrierID(s)
	return spc
}

// SetLabelPdf sets the "label_pdf" field.
func (spc *ShipmentPalletCreate) SetLabelPdf(s string) *ShipmentPalletCreate {
	spc.mutation.SetLabelPdf(s)
	return spc
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (spc *ShipmentPalletCreate) SetNillableLabelPdf(s *string) *ShipmentPalletCreate {
	if s != nil {
		spc.SetLabelPdf(*s)
	}
	return spc
}

// SetLabelZpl sets the "label_zpl" field.
func (spc *ShipmentPalletCreate) SetLabelZpl(s string) *ShipmentPalletCreate {
	spc.mutation.SetLabelZpl(s)
	return spc
}

// SetNillableLabelZpl sets the "label_zpl" field if the given value is not nil.
func (spc *ShipmentPalletCreate) SetNillableLabelZpl(s *string) *ShipmentPalletCreate {
	if s != nil {
		spc.SetLabelZpl(*s)
	}
	return spc
}

// SetStatus sets the "status" field.
func (spc *ShipmentPalletCreate) SetStatus(s shipmentpallet.Status) *ShipmentPalletCreate {
	spc.mutation.SetStatus(s)
	return spc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spc *ShipmentPalletCreate) SetNillableStatus(s *shipmentpallet.Status) *ShipmentPalletCreate {
	if s != nil {
		spc.SetStatus(*s)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *ShipmentPalletCreate) SetID(pu pulid.ID) *ShipmentPalletCreate {
	spc.mutation.SetID(pu)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *ShipmentPalletCreate) SetNillableID(pu *pulid.ID) *ShipmentPalletCreate {
	if pu != nil {
		spc.SetID(*pu)
	}
	return spc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spc *ShipmentPalletCreate) SetTenant(t *Tenant) *ShipmentPalletCreate {
	return spc.SetTenantID(t.ID)
}

// SetPalletID sets the "pallet" edge to the Pallet entity by ID.
func (spc *ShipmentPalletCreate) SetPalletID(id pulid.ID) *ShipmentPalletCreate {
	spc.mutation.SetPalletID(id)
	return spc
}

// SetNillablePalletID sets the "pallet" edge to the Pallet entity by ID if the given value is not nil.
func (spc *ShipmentPalletCreate) SetNillablePalletID(id *pulid.ID) *ShipmentPalletCreate {
	if id != nil {
		spc = spc.SetPalletID(*id)
	}
	return spc
}

// SetPallet sets the "pallet" edge to the Pallet entity.
func (spc *ShipmentPalletCreate) SetPallet(p *Pallet) *ShipmentPalletCreate {
	return spc.SetPalletID(p.ID)
}

// AddOldPalletIDs adds the "old_pallet" edge to the Pallet entity by IDs.
func (spc *ShipmentPalletCreate) AddOldPalletIDs(ids ...pulid.ID) *ShipmentPalletCreate {
	spc.mutation.AddOldPalletIDs(ids...)
	return spc
}

// AddOldPallet adds the "old_pallet" edges to the Pallet entity.
func (spc *ShipmentPalletCreate) AddOldPallet(p ...*Pallet) *ShipmentPalletCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spc.AddOldPalletIDs(ids...)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (spc *ShipmentPalletCreate) SetShipmentID(id pulid.ID) *ShipmentPalletCreate {
	spc.mutation.SetShipmentID(id)
	return spc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (spc *ShipmentPalletCreate) SetShipment(s *Shipment) *ShipmentPalletCreate {
	return spc.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentPalletMutation object of the builder.
func (spc *ShipmentPalletCreate) Mutation() *ShipmentPalletMutation {
	return spc.mutation
}

// Save creates the ShipmentPallet in the database.
func (spc *ShipmentPalletCreate) Save(ctx context.Context) (*ShipmentPallet, error) {
	if err := spc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *ShipmentPalletCreate) SaveX(ctx context.Context) *ShipmentPallet {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *ShipmentPalletCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *ShipmentPalletCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *ShipmentPalletCreate) defaults() error {
	if _, ok := spc.mutation.Status(); !ok {
		v := shipmentpallet.DefaultStatus
		spc.mutation.SetStatus(v)
	}
	if _, ok := spc.mutation.ID(); !ok {
		if shipmentpallet.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipmentpallet.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipmentpallet.DefaultID()
		spc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spc *ShipmentPalletCreate) check() error {
	if _, ok := spc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ShipmentPallet.tenant_id"`)}
	}
	if _, ok := spc.mutation.Barcode(); !ok {
		return &ValidationError{Name: "barcode", err: errors.New(`ent: missing required field "ShipmentPallet.barcode"`)}
	}
	if _, ok := spc.mutation.ColliNumber(); !ok {
		return &ValidationError{Name: "colli_number", err: errors.New(`ent: missing required field "ShipmentPallet.colli_number"`)}
	}
	if _, ok := spc.mutation.CarrierID(); !ok {
		return &ValidationError{Name: "carrier_id", err: errors.New(`ent: missing required field "ShipmentPallet.carrier_id"`)}
	}
	if _, ok := spc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ShipmentPallet.status"`)}
	}
	if v, ok := spc.mutation.Status(); ok {
		if err := shipmentpallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentPallet.status": %w`, err)}
		}
	}
	if len(spc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ShipmentPallet.tenant"`)}
	}
	if len(spc.mutation.ShipmentIDs()) == 0 {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentPallet.shipment"`)}
	}
	return nil
}

func (spc *ShipmentPalletCreate) sqlSave(ctx context.Context) (*ShipmentPallet, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *ShipmentPalletCreate) createSpec() (*ShipmentPallet, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentPallet{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentpallet.Table, sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString))
	)
	_spec.OnConflict = spc.conflict
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spc.mutation.Barcode(); ok {
		_spec.SetField(shipmentpallet.FieldBarcode, field.TypeString, value)
		_node.Barcode = value
	}
	if value, ok := spc.mutation.ColliNumber(); ok {
		_spec.SetField(shipmentpallet.FieldColliNumber, field.TypeString, value)
		_node.ColliNumber = value
	}
	if value, ok := spc.mutation.CarrierID(); ok {
		_spec.SetField(shipmentpallet.FieldCarrierID, field.TypeString, value)
		_node.CarrierID = value
	}
	if value, ok := spc.mutation.LabelPdf(); ok {
		_spec.SetField(shipmentpallet.FieldLabelPdf, field.TypeString, value)
		_node.LabelPdf = value
	}
	if value, ok := spc.mutation.LabelZpl(); ok {
		_spec.SetField(shipmentpallet.FieldLabelZpl, field.TypeString, value)
		_node.LabelZpl = value
	}
	if value, ok := spc.mutation.Status(); ok {
		_spec.SetField(shipmentpallet.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := spc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpallet.TenantTable,
			Columns: []string{shipmentpallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpallet.PalletTable,
			Columns: []string{shipmentpallet.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pallet_shipment_pallet = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.OldPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentpallet.OldPalletTable,
			Columns: shipmentpallet.OldPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentpallet.ShipmentTable,
			Columns: []string{shipmentpallet.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_shipment_pallet = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentPallet.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentPalletUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (spc *ShipmentPalletCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentPalletUpsertOne {
	spc.conflict = opts
	return &ShipmentPalletUpsertOne{
		create: spc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentPallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spc *ShipmentPalletCreate) OnConflictColumns(columns ...string) *ShipmentPalletUpsertOne {
	spc.conflict = append(spc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentPalletUpsertOne{
		create: spc,
	}
}

type (
	// ShipmentPalletUpsertOne is the builder for "upsert"-ing
	//  one ShipmentPallet node.
	ShipmentPalletUpsertOne struct {
		create *ShipmentPalletCreate
	}

	// ShipmentPalletUpsert is the "OnConflict" setter.
	ShipmentPalletUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentPalletUpsert) SetTenantID(v pulid.ID) *ShipmentPalletUpsert {
	u.Set(shipmentpallet.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentPalletUpsert) UpdateTenantID() *ShipmentPalletUpsert {
	u.SetExcluded(shipmentpallet.FieldTenantID)
	return u
}

// SetBarcode sets the "barcode" field.
func (u *ShipmentPalletUpsert) SetBarcode(v string) *ShipmentPalletUpsert {
	u.Set(shipmentpallet.FieldBarcode, v)
	return u
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *ShipmentPalletUpsert) UpdateBarcode() *ShipmentPalletUpsert {
	u.SetExcluded(shipmentpallet.FieldBarcode)
	return u
}

// SetColliNumber sets the "colli_number" field.
func (u *ShipmentPalletUpsert) SetColliNumber(v string) *ShipmentPalletUpsert {
	u.Set(shipmentpallet.FieldColliNumber, v)
	return u
}

// UpdateColliNumber sets the "colli_number" field to the value that was provided on create.
func (u *ShipmentPalletUpsert) UpdateColliNumber() *ShipmentPalletUpsert {
	u.SetExcluded(shipmentpallet.FieldColliNumber)
	return u
}

// SetCarrierID sets the "carrier_id" field.
func (u *ShipmentPalletUpsert) SetCarrierID(v string) *ShipmentPalletUpsert {
	u.Set(shipmentpallet.FieldCarrierID, v)
	return u
}

// UpdateCarrierID sets the "carrier_id" field to the value that was provided on create.
func (u *ShipmentPalletUpsert) UpdateCarrierID() *ShipmentPalletUpsert {
	u.SetExcluded(shipmentpallet.FieldCarrierID)
	return u
}

// SetLabelPdf sets the "label_pdf" field.
func (u *ShipmentPalletUpsert) SetLabelPdf(v string) *ShipmentPalletUpsert {
	u.Set(shipmentpallet.FieldLabelPdf, v)
	return u
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *ShipmentPalletUpsert) UpdateLabelPdf() *ShipmentPalletUpsert {
	u.SetExcluded(shipmentpallet.FieldLabelPdf)
	return u
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (u *ShipmentPalletUpsert) ClearLabelPdf() *ShipmentPalletUpsert {
	u.SetNull(shipmentpallet.FieldLabelPdf)
	return u
}

// SetLabelZpl sets the "label_zpl" field.
func (u *ShipmentPalletUpsert) SetLabelZpl(v string) *ShipmentPalletUpsert {
	u.Set(shipmentpallet.FieldLabelZpl, v)
	return u
}

// UpdateLabelZpl sets the "label_zpl" field to the value that was provided on create.
func (u *ShipmentPalletUpsert) UpdateLabelZpl() *ShipmentPalletUpsert {
	u.SetExcluded(shipmentpallet.FieldLabelZpl)
	return u
}

// ClearLabelZpl clears the value of the "label_zpl" field.
func (u *ShipmentPalletUpsert) ClearLabelZpl() *ShipmentPalletUpsert {
	u.SetNull(shipmentpallet.FieldLabelZpl)
	return u
}

// SetStatus sets the "status" field.
func (u *ShipmentPalletUpsert) SetStatus(v shipmentpallet.Status) *ShipmentPalletUpsert {
	u.Set(shipmentpallet.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentPalletUpsert) UpdateStatus() *ShipmentPalletUpsert {
	u.SetExcluded(shipmentpallet.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShipmentPallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentpallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentPalletUpsertOne) UpdateNewValues() *ShipmentPalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipmentpallet.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentPallet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentPalletUpsertOne) Ignore() *ShipmentPalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentPalletUpsertOne) DoNothing() *ShipmentPalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentPalletCreate.OnConflict
// documentation for more info.
func (u *ShipmentPalletUpsertOne) Update(set func(*ShipmentPalletUpsert)) *ShipmentPalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentPalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentPalletUpsertOne) SetTenantID(v pulid.ID) *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentPalletUpsertOne) UpdateTenantID() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateTenantID()
	})
}

// SetBarcode sets the "barcode" field.
func (u *ShipmentPalletUpsertOne) SetBarcode(v string) *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *ShipmentPalletUpsertOne) UpdateBarcode() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateBarcode()
	})
}

// SetColliNumber sets the "colli_number" field.
func (u *ShipmentPalletUpsertOne) SetColliNumber(v string) *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetColliNumber(v)
	})
}

// UpdateColliNumber sets the "colli_number" field to the value that was provided on create.
func (u *ShipmentPalletUpsertOne) UpdateColliNumber() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateColliNumber()
	})
}

// SetCarrierID sets the "carrier_id" field.
func (u *ShipmentPalletUpsertOne) SetCarrierID(v string) *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetCarrierID(v)
	})
}

// UpdateCarrierID sets the "carrier_id" field to the value that was provided on create.
func (u *ShipmentPalletUpsertOne) UpdateCarrierID() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateCarrierID()
	})
}

// SetLabelPdf sets the "label_pdf" field.
func (u *ShipmentPalletUpsertOne) SetLabelPdf(v string) *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetLabelPdf(v)
	})
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *ShipmentPalletUpsertOne) UpdateLabelPdf() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateLabelPdf()
	})
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (u *ShipmentPalletUpsertOne) ClearLabelPdf() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.ClearLabelPdf()
	})
}

// SetLabelZpl sets the "label_zpl" field.
func (u *ShipmentPalletUpsertOne) SetLabelZpl(v string) *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetLabelZpl(v)
	})
}

// UpdateLabelZpl sets the "label_zpl" field to the value that was provided on create.
func (u *ShipmentPalletUpsertOne) UpdateLabelZpl() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateLabelZpl()
	})
}

// ClearLabelZpl clears the value of the "label_zpl" field.
func (u *ShipmentPalletUpsertOne) ClearLabelZpl() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.ClearLabelZpl()
	})
}

// SetStatus sets the "status" field.
func (u *ShipmentPalletUpsertOne) SetStatus(v shipmentpallet.Status) *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentPalletUpsertOne) UpdateStatus() *ShipmentPalletUpsertOne {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ShipmentPalletUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentPalletCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentPalletUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentPalletUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentPalletUpsertOne.ID is not supported by MySQL driver. Use ShipmentPalletUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentPalletUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentPalletCreateBulk is the builder for creating many ShipmentPallet entities in bulk.
type ShipmentPalletCreateBulk struct {
	config
	err      error
	builders []*ShipmentPalletCreate
	conflict []sql.ConflictOption
}

// Save creates the ShipmentPallet entities in the database.
func (spcb *ShipmentPalletCreateBulk) Save(ctx context.Context) ([]*ShipmentPallet, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*ShipmentPallet, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentPalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *ShipmentPalletCreateBulk) SaveX(ctx context.Context) []*ShipmentPallet {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *ShipmentPalletCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *ShipmentPalletCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentPallet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentPalletUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (spcb *ShipmentPalletCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentPalletUpsertBulk {
	spcb.conflict = opts
	return &ShipmentPalletUpsertBulk{
		create: spcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentPallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spcb *ShipmentPalletCreateBulk) OnConflictColumns(columns ...string) *ShipmentPalletUpsertBulk {
	spcb.conflict = append(spcb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentPalletUpsertBulk{
		create: spcb,
	}
}

// ShipmentPalletUpsertBulk is the builder for "upsert"-ing
// a bulk of ShipmentPallet nodes.
type ShipmentPalletUpsertBulk struct {
	create *ShipmentPalletCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShipmentPallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentpallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentPalletUpsertBulk) UpdateNewValues() *ShipmentPalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipmentpallet.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentPallet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentPalletUpsertBulk) Ignore() *ShipmentPalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentPalletUpsertBulk) DoNothing() *ShipmentPalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentPalletCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentPalletUpsertBulk) Update(set func(*ShipmentPalletUpsert)) *ShipmentPalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentPalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentPalletUpsertBulk) SetTenantID(v pulid.ID) *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentPalletUpsertBulk) UpdateTenantID() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateTenantID()
	})
}

// SetBarcode sets the "barcode" field.
func (u *ShipmentPalletUpsertBulk) SetBarcode(v string) *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetBarcode(v)
	})
}

// UpdateBarcode sets the "barcode" field to the value that was provided on create.
func (u *ShipmentPalletUpsertBulk) UpdateBarcode() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateBarcode()
	})
}

// SetColliNumber sets the "colli_number" field.
func (u *ShipmentPalletUpsertBulk) SetColliNumber(v string) *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetColliNumber(v)
	})
}

// UpdateColliNumber sets the "colli_number" field to the value that was provided on create.
func (u *ShipmentPalletUpsertBulk) UpdateColliNumber() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateColliNumber()
	})
}

// SetCarrierID sets the "carrier_id" field.
func (u *ShipmentPalletUpsertBulk) SetCarrierID(v string) *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetCarrierID(v)
	})
}

// UpdateCarrierID sets the "carrier_id" field to the value that was provided on create.
func (u *ShipmentPalletUpsertBulk) UpdateCarrierID() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateCarrierID()
	})
}

// SetLabelPdf sets the "label_pdf" field.
func (u *ShipmentPalletUpsertBulk) SetLabelPdf(v string) *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetLabelPdf(v)
	})
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *ShipmentPalletUpsertBulk) UpdateLabelPdf() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateLabelPdf()
	})
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (u *ShipmentPalletUpsertBulk) ClearLabelPdf() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.ClearLabelPdf()
	})
}

// SetLabelZpl sets the "label_zpl" field.
func (u *ShipmentPalletUpsertBulk) SetLabelZpl(v string) *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetLabelZpl(v)
	})
}

// UpdateLabelZpl sets the "label_zpl" field to the value that was provided on create.
func (u *ShipmentPalletUpsertBulk) UpdateLabelZpl() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateLabelZpl()
	})
}

// ClearLabelZpl clears the value of the "label_zpl" field.
func (u *ShipmentPalletUpsertBulk) ClearLabelZpl() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.ClearLabelZpl()
	})
}

// SetStatus sets the "status" field.
func (u *ShipmentPalletUpsertBulk) SetStatus(v shipmentpallet.Status) *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentPalletUpsertBulk) UpdateStatus() *ShipmentPalletUpsertBulk {
	return u.Update(func(s *ShipmentPalletUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ShipmentPalletUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentPalletCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentPalletCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentPalletUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
