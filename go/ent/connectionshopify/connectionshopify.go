// Code generated by ent, DO NOT EDIT.

package connectionshopify

import (
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the connectionshopify type in the database.
	Label = "connection_shopify"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldRateIntegration holds the string denoting the rate_integration field in the database.
	FieldRateIntegration = "rate_integration"
	// FieldStoreURL holds the string denoting the store_url field in the database.
	FieldStoreURL = "store_url"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// FieldLookupKey holds the string denoting the lookup_key field in the database.
	FieldLookupKey = "lookup_key"
	// FieldSyncFrom holds the string denoting the sync_from field in the database.
	FieldSyncFrom = "sync_from"
	// FieldFilterTags holds the string denoting the filter_tags field in the database.
	FieldFilterTags = "filter_tags"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// Table holds the table name of the connectionshopify in the database.
	Table = "connection_shopifies"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "connection_shopifies"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ConnectionTable is the table that holds the connection relation/edge.
	ConnectionTable = "connection_shopifies"
	// ConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionInverseTable = "connections"
	// ConnectionColumn is the table column denoting the connection relation/edge.
	ConnectionColumn = "connection_connection_shopify"
)

// Columns holds all SQL columns for connectionshopify fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldRateIntegration,
	FieldStoreURL,
	FieldAPIKey,
	FieldLookupKey,
	FieldSyncFrom,
	FieldFilterTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "connection_shopifies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"connection_connection_shopify",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [4]ent.Hook
	Policy ent.Policy
	// DefaultRateIntegration holds the default value on creation for the "rate_integration" field.
	DefaultRateIntegration bool
	// DefaultSyncFrom holds the default value on creation for the "sync_from" field.
	DefaultSyncFrom func() time.Time
	// DefaultFilterTags holds the default value on creation for the "filter_tags" field.
	DefaultFilterTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ConnectionShopify queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByRateIntegration orders the results by the rate_integration field.
func ByRateIntegration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRateIntegration, opts...).ToFunc()
}

// ByStoreURL orders the results by the store_url field.
func ByStoreURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreURL, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByLookupKey orders the results by the lookup_key field.
func ByLookupKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLookupKey, opts...).ToFunc()
}

// BySyncFrom orders the results by the sync_from field.
func BySyncFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSyncFrom, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByConnectionField orders the results by connection field.
func ByConnectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ConnectionTable, ConnectionColumn),
	)
}
