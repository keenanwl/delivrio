// Code generated by ent, DO NOT EDIT.

package connectionshopify

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldTenantID, v))
}

// RateIntegration applies equality check predicate on the "rate_integration" field. It's identical to RateIntegrationEQ.
func RateIntegration(v bool) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldRateIntegration, v))
}

// StoreURL applies equality check predicate on the "store_url" field. It's identical to StoreURLEQ.
func StoreURL(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldStoreURL, v))
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldAPIKey, v))
}

// LookupKey applies equality check predicate on the "lookup_key" field. It's identical to LookupKeyEQ.
func LookupKey(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldLookupKey, v))
}

// SyncFrom applies equality check predicate on the "sync_from" field. It's identical to SyncFromEQ.
func SyncFrom(v time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldSyncFrom, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.ConnectionShopify {
	vc := string(v)
	return predicate.ConnectionShopify(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.ConnectionShopify {
	vc := string(v)
	return predicate.ConnectionShopify(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.ConnectionShopify {
	vc := string(v)
	return predicate.ConnectionShopify(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.ConnectionShopify {
	vc := string(v)
	return predicate.ConnectionShopify(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.ConnectionShopify {
	vc := string(v)
	return predicate.ConnectionShopify(sql.FieldContainsFold(FieldTenantID, vc))
}

// RateIntegrationEQ applies the EQ predicate on the "rate_integration" field.
func RateIntegrationEQ(v bool) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldRateIntegration, v))
}

// RateIntegrationNEQ applies the NEQ predicate on the "rate_integration" field.
func RateIntegrationNEQ(v bool) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNEQ(FieldRateIntegration, v))
}

// StoreURLEQ applies the EQ predicate on the "store_url" field.
func StoreURLEQ(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldStoreURL, v))
}

// StoreURLNEQ applies the NEQ predicate on the "store_url" field.
func StoreURLNEQ(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNEQ(FieldStoreURL, v))
}

// StoreURLIn applies the In predicate on the "store_url" field.
func StoreURLIn(vs ...string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIn(FieldStoreURL, vs...))
}

// StoreURLNotIn applies the NotIn predicate on the "store_url" field.
func StoreURLNotIn(vs ...string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotIn(FieldStoreURL, vs...))
}

// StoreURLGT applies the GT predicate on the "store_url" field.
func StoreURLGT(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGT(FieldStoreURL, v))
}

// StoreURLGTE applies the GTE predicate on the "store_url" field.
func StoreURLGTE(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGTE(FieldStoreURL, v))
}

// StoreURLLT applies the LT predicate on the "store_url" field.
func StoreURLLT(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLT(FieldStoreURL, v))
}

// StoreURLLTE applies the LTE predicate on the "store_url" field.
func StoreURLLTE(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLTE(FieldStoreURL, v))
}

// StoreURLContains applies the Contains predicate on the "store_url" field.
func StoreURLContains(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldContains(FieldStoreURL, v))
}

// StoreURLHasPrefix applies the HasPrefix predicate on the "store_url" field.
func StoreURLHasPrefix(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldHasPrefix(FieldStoreURL, v))
}

// StoreURLHasSuffix applies the HasSuffix predicate on the "store_url" field.
func StoreURLHasSuffix(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldHasSuffix(FieldStoreURL, v))
}

// StoreURLIsNil applies the IsNil predicate on the "store_url" field.
func StoreURLIsNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIsNull(FieldStoreURL))
}

// StoreURLNotNil applies the NotNil predicate on the "store_url" field.
func StoreURLNotNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotNull(FieldStoreURL))
}

// StoreURLEqualFold applies the EqualFold predicate on the "store_url" field.
func StoreURLEqualFold(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEqualFold(FieldStoreURL, v))
}

// StoreURLContainsFold applies the ContainsFold predicate on the "store_url" field.
func StoreURLContainsFold(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldContainsFold(FieldStoreURL, v))
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNEQ(FieldAPIKey, v))
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIn(FieldAPIKey, vs...))
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotIn(FieldAPIKey, vs...))
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGT(FieldAPIKey, v))
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGTE(FieldAPIKey, v))
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLT(FieldAPIKey, v))
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLTE(FieldAPIKey, v))
}

// APIKeyContains applies the Contains predicate on the "api_key" field.
func APIKeyContains(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldContains(FieldAPIKey, v))
}

// APIKeyHasPrefix applies the HasPrefix predicate on the "api_key" field.
func APIKeyHasPrefix(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldHasPrefix(FieldAPIKey, v))
}

// APIKeyHasSuffix applies the HasSuffix predicate on the "api_key" field.
func APIKeyHasSuffix(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldHasSuffix(FieldAPIKey, v))
}

// APIKeyIsNil applies the IsNil predicate on the "api_key" field.
func APIKeyIsNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIsNull(FieldAPIKey))
}

// APIKeyNotNil applies the NotNil predicate on the "api_key" field.
func APIKeyNotNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotNull(FieldAPIKey))
}

// APIKeyEqualFold applies the EqualFold predicate on the "api_key" field.
func APIKeyEqualFold(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEqualFold(FieldAPIKey, v))
}

// APIKeyContainsFold applies the ContainsFold predicate on the "api_key" field.
func APIKeyContainsFold(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldContainsFold(FieldAPIKey, v))
}

// LookupKeyEQ applies the EQ predicate on the "lookup_key" field.
func LookupKeyEQ(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldLookupKey, v))
}

// LookupKeyNEQ applies the NEQ predicate on the "lookup_key" field.
func LookupKeyNEQ(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNEQ(FieldLookupKey, v))
}

// LookupKeyIn applies the In predicate on the "lookup_key" field.
func LookupKeyIn(vs ...string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIn(FieldLookupKey, vs...))
}

// LookupKeyNotIn applies the NotIn predicate on the "lookup_key" field.
func LookupKeyNotIn(vs ...string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotIn(FieldLookupKey, vs...))
}

// LookupKeyGT applies the GT predicate on the "lookup_key" field.
func LookupKeyGT(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGT(FieldLookupKey, v))
}

// LookupKeyGTE applies the GTE predicate on the "lookup_key" field.
func LookupKeyGTE(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGTE(FieldLookupKey, v))
}

// LookupKeyLT applies the LT predicate on the "lookup_key" field.
func LookupKeyLT(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLT(FieldLookupKey, v))
}

// LookupKeyLTE applies the LTE predicate on the "lookup_key" field.
func LookupKeyLTE(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLTE(FieldLookupKey, v))
}

// LookupKeyContains applies the Contains predicate on the "lookup_key" field.
func LookupKeyContains(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldContains(FieldLookupKey, v))
}

// LookupKeyHasPrefix applies the HasPrefix predicate on the "lookup_key" field.
func LookupKeyHasPrefix(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldHasPrefix(FieldLookupKey, v))
}

// LookupKeyHasSuffix applies the HasSuffix predicate on the "lookup_key" field.
func LookupKeyHasSuffix(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldHasSuffix(FieldLookupKey, v))
}

// LookupKeyIsNil applies the IsNil predicate on the "lookup_key" field.
func LookupKeyIsNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIsNull(FieldLookupKey))
}

// LookupKeyNotNil applies the NotNil predicate on the "lookup_key" field.
func LookupKeyNotNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotNull(FieldLookupKey))
}

// LookupKeyEqualFold applies the EqualFold predicate on the "lookup_key" field.
func LookupKeyEqualFold(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEqualFold(FieldLookupKey, v))
}

// LookupKeyContainsFold applies the ContainsFold predicate on the "lookup_key" field.
func LookupKeyContainsFold(v string) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldContainsFold(FieldLookupKey, v))
}

// SyncFromEQ applies the EQ predicate on the "sync_from" field.
func SyncFromEQ(v time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldEQ(FieldSyncFrom, v))
}

// SyncFromNEQ applies the NEQ predicate on the "sync_from" field.
func SyncFromNEQ(v time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNEQ(FieldSyncFrom, v))
}

// SyncFromIn applies the In predicate on the "sync_from" field.
func SyncFromIn(vs ...time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIn(FieldSyncFrom, vs...))
}

// SyncFromNotIn applies the NotIn predicate on the "sync_from" field.
func SyncFromNotIn(vs ...time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotIn(FieldSyncFrom, vs...))
}

// SyncFromGT applies the GT predicate on the "sync_from" field.
func SyncFromGT(v time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGT(FieldSyncFrom, v))
}

// SyncFromGTE applies the GTE predicate on the "sync_from" field.
func SyncFromGTE(v time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldGTE(FieldSyncFrom, v))
}

// SyncFromLT applies the LT predicate on the "sync_from" field.
func SyncFromLT(v time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLT(FieldSyncFrom, v))
}

// SyncFromLTE applies the LTE predicate on the "sync_from" field.
func SyncFromLTE(v time.Time) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldLTE(FieldSyncFrom, v))
}

// SyncFromIsNil applies the IsNil predicate on the "sync_from" field.
func SyncFromIsNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIsNull(FieldSyncFrom))
}

// SyncFromNotNil applies the NotNil predicate on the "sync_from" field.
func SyncFromNotNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotNull(FieldSyncFrom))
}

// FilterTagsIsNil applies the IsNil predicate on the "filter_tags" field.
func FilterTagsIsNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldIsNull(FieldFilterTags))
}

// FilterTagsNotNil applies the NotNil predicate on the "filter_tags" field.
func FilterTagsNotNil() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.FieldNotNull(FieldFilterTags))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnection applies the HasEdge predicate on the "connection" edge.
func HasConnection() predicate.ConnectionShopify {
	return predicate.ConnectionShopify(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ConnectionTable, ConnectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionWith applies the HasEdge predicate on the "connection" edge with a given conditions (other predicates).
func HasConnectionWith(preds ...predicate.Connection) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(func(s *sql.Selector) {
		step := newConnectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConnectionShopify) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConnectionShopify) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConnectionShopify) predicate.ConnectionShopify {
	return predicate.ConnectionShopify(sql.NotPredicates(p))
}
