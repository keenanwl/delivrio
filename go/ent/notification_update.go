// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetTenantID sets the "tenant_id" field.
func (nu *NotificationUpdate) SetTenantID(pu pulid.ID) *NotificationUpdate {
	nu.mutation.SetTenantID(pu)
	return nu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableTenantID(pu *pulid.ID) *NotificationUpdate {
	if pu != nil {
		nu.SetTenantID(*pu)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NotificationUpdate) SetName(s string) *NotificationUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableName(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetActive sets the "active" field.
func (nu *NotificationUpdate) SetActive(b bool) *NotificationUpdate {
	nu.mutation.SetActive(b)
	return nu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableActive(b *bool) *NotificationUpdate {
	if b != nil {
		nu.SetActive(*b)
	}
	return nu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (nu *NotificationUpdate) SetTenant(t *Tenant) *NotificationUpdate {
	return nu.SetTenantID(t.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (nu *NotificationUpdate) SetConnectionID(id pulid.ID) *NotificationUpdate {
	nu.mutation.SetConnectionID(id)
	return nu
}

// SetConnection sets the "connection" edge to the Connection entity.
func (nu *NotificationUpdate) SetConnection(c *Connection) *NotificationUpdate {
	return nu.SetConnectionID(c.ID)
}

// SetEmailTemplateID sets the "email_template" edge to the EmailTemplate entity by ID.
func (nu *NotificationUpdate) SetEmailTemplateID(id pulid.ID) *NotificationUpdate {
	nu.mutation.SetEmailTemplateID(id)
	return nu
}

// SetEmailTemplate sets the "email_template" edge to the EmailTemplate entity.
func (nu *NotificationUpdate) SetEmailTemplate(e *EmailTemplate) *NotificationUpdate {
	return nu.SetEmailTemplateID(e.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (nu *NotificationUpdate) ClearTenant() *NotificationUpdate {
	nu.mutation.ClearTenant()
	return nu
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (nu *NotificationUpdate) ClearConnection() *NotificationUpdate {
	nu.mutation.ClearConnection()
	return nu
}

// ClearEmailTemplate clears the "email_template" edge to the EmailTemplate entity.
func (nu *NotificationUpdate) ClearEmailTemplate() *NotificationUpdate {
	nu.mutation.ClearEmailTemplate()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if nu.mutation.TenantCleared() && len(nu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.tenant"`)
	}
	if nu.mutation.ConnectionCleared() && len(nu.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.connection"`)
	}
	if nu.mutation.EmailTemplateCleared() && len(nu.mutation.EmailTemplateIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.email_template"`)
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(notification.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Active(); ok {
		_spec.SetField(notification.FieldActive, field.TypeBool, value)
	}
	if nu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.TenantTable,
			Columns: []string{notification.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.TenantTable,
			Columns: []string{notification.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.ConnectionTable,
			Columns: []string{notification.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.ConnectionTable,
			Columns: []string{notification.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.EmailTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.EmailTemplateTable,
			Columns: []string{notification.EmailTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.EmailTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.EmailTemplateTable,
			Columns: []string{notification.EmailTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetTenantID sets the "tenant_id" field.
func (nuo *NotificationUpdateOne) SetTenantID(pu pulid.ID) *NotificationUpdateOne {
	nuo.mutation.SetTenantID(pu)
	return nuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableTenantID(pu *pulid.ID) *NotificationUpdateOne {
	if pu != nil {
		nuo.SetTenantID(*pu)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NotificationUpdateOne) SetName(s string) *NotificationUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableName(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetActive sets the "active" field.
func (nuo *NotificationUpdateOne) SetActive(b bool) *NotificationUpdateOne {
	nuo.mutation.SetActive(b)
	return nuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableActive(b *bool) *NotificationUpdateOne {
	if b != nil {
		nuo.SetActive(*b)
	}
	return nuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (nuo *NotificationUpdateOne) SetTenant(t *Tenant) *NotificationUpdateOne {
	return nuo.SetTenantID(t.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (nuo *NotificationUpdateOne) SetConnectionID(id pulid.ID) *NotificationUpdateOne {
	nuo.mutation.SetConnectionID(id)
	return nuo
}

// SetConnection sets the "connection" edge to the Connection entity.
func (nuo *NotificationUpdateOne) SetConnection(c *Connection) *NotificationUpdateOne {
	return nuo.SetConnectionID(c.ID)
}

// SetEmailTemplateID sets the "email_template" edge to the EmailTemplate entity by ID.
func (nuo *NotificationUpdateOne) SetEmailTemplateID(id pulid.ID) *NotificationUpdateOne {
	nuo.mutation.SetEmailTemplateID(id)
	return nuo
}

// SetEmailTemplate sets the "email_template" edge to the EmailTemplate entity.
func (nuo *NotificationUpdateOne) SetEmailTemplate(e *EmailTemplate) *NotificationUpdateOne {
	return nuo.SetEmailTemplateID(e.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (nuo *NotificationUpdateOne) ClearTenant() *NotificationUpdateOne {
	nuo.mutation.ClearTenant()
	return nuo
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (nuo *NotificationUpdateOne) ClearConnection() *NotificationUpdateOne {
	nuo.mutation.ClearConnection()
	return nuo
}

// ClearEmailTemplate clears the "email_template" edge to the EmailTemplate entity.
func (nuo *NotificationUpdateOne) ClearEmailTemplate() *NotificationUpdateOne {
	nuo.mutation.ClearEmailTemplate()
	return nuo
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if nuo.mutation.TenantCleared() && len(nuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.tenant"`)
	}
	if nuo.mutation.ConnectionCleared() && len(nuo.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.connection"`)
	}
	if nuo.mutation.EmailTemplateCleared() && len(nuo.mutation.EmailTemplateIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Notification.email_template"`)
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(notification.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Active(); ok {
		_spec.SetField(notification.FieldActive, field.TypeBool, value)
	}
	if nuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.TenantTable,
			Columns: []string{notification.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.TenantTable,
			Columns: []string{notification.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.ConnectionTable,
			Columns: []string{notification.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.ConnectionTable,
			Columns: []string{notification.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.EmailTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.EmailTemplateTable,
			Columns: []string{notification.EmailTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.EmailTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.EmailTemplateTable,
			Columns: []string{notification.EmailTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
