// Code generated by ent, DO NOT EDIT.

package parcelshopgls

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldLTE(FieldID, id))
}

// GLSParcelShopID applies equality check predicate on the "gls_parcel_shop_id" field. It's identical to GLSParcelShopIDEQ.
func GLSParcelShopID(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEQ(FieldGLSParcelShopID, v))
}

// PartnerID applies equality check predicate on the "partner_id" field. It's identical to PartnerIDEQ.
func PartnerID(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEQ(FieldPartnerID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEQ(FieldType, v))
}

// GLSParcelShopIDEQ applies the EQ predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDEQ(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEQ(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDNEQ applies the NEQ predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDNEQ(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNEQ(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDIn applies the In predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDIn(vs ...string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldIn(FieldGLSParcelShopID, vs...))
}

// GLSParcelShopIDNotIn applies the NotIn predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDNotIn(vs ...string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNotIn(FieldGLSParcelShopID, vs...))
}

// GLSParcelShopIDGT applies the GT predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDGT(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldGT(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDGTE applies the GTE predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDGTE(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldGTE(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDLT applies the LT predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDLT(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldLT(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDLTE applies the LTE predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDLTE(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldLTE(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDContains applies the Contains predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDContains(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldContains(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDHasPrefix applies the HasPrefix predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDHasPrefix(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldHasPrefix(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDHasSuffix applies the HasSuffix predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDHasSuffix(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldHasSuffix(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDEqualFold applies the EqualFold predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDEqualFold(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEqualFold(FieldGLSParcelShopID, v))
}

// GLSParcelShopIDContainsFold applies the ContainsFold predicate on the "gls_parcel_shop_id" field.
func GLSParcelShopIDContainsFold(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldContainsFold(FieldGLSParcelShopID, v))
}

// PartnerIDEQ applies the EQ predicate on the "partner_id" field.
func PartnerIDEQ(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEQ(FieldPartnerID, v))
}

// PartnerIDNEQ applies the NEQ predicate on the "partner_id" field.
func PartnerIDNEQ(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNEQ(FieldPartnerID, v))
}

// PartnerIDIn applies the In predicate on the "partner_id" field.
func PartnerIDIn(vs ...string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldIn(FieldPartnerID, vs...))
}

// PartnerIDNotIn applies the NotIn predicate on the "partner_id" field.
func PartnerIDNotIn(vs ...string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNotIn(FieldPartnerID, vs...))
}

// PartnerIDGT applies the GT predicate on the "partner_id" field.
func PartnerIDGT(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldGT(FieldPartnerID, v))
}

// PartnerIDGTE applies the GTE predicate on the "partner_id" field.
func PartnerIDGTE(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldGTE(FieldPartnerID, v))
}

// PartnerIDLT applies the LT predicate on the "partner_id" field.
func PartnerIDLT(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldLT(FieldPartnerID, v))
}

// PartnerIDLTE applies the LTE predicate on the "partner_id" field.
func PartnerIDLTE(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldLTE(FieldPartnerID, v))
}

// PartnerIDContains applies the Contains predicate on the "partner_id" field.
func PartnerIDContains(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldContains(FieldPartnerID, v))
}

// PartnerIDHasPrefix applies the HasPrefix predicate on the "partner_id" field.
func PartnerIDHasPrefix(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldHasPrefix(FieldPartnerID, v))
}

// PartnerIDHasSuffix applies the HasSuffix predicate on the "partner_id" field.
func PartnerIDHasSuffix(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldHasSuffix(FieldPartnerID, v))
}

// PartnerIDIsNil applies the IsNil predicate on the "partner_id" field.
func PartnerIDIsNil() predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldIsNull(FieldPartnerID))
}

// PartnerIDNotNil applies the NotNil predicate on the "partner_id" field.
func PartnerIDNotNil() predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNotNull(FieldPartnerID))
}

// PartnerIDEqualFold applies the EqualFold predicate on the "partner_id" field.
func PartnerIDEqualFold(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEqualFold(FieldPartnerID, v))
}

// PartnerIDContainsFold applies the ContainsFold predicate on the "partner_id" field.
func PartnerIDContainsFold(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldContainsFold(FieldPartnerID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.FieldContainsFold(FieldType, v))
}

// HasParcelShop applies the HasEdge predicate on the "parcel_shop" edge.
func HasParcelShop() predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopWith applies the HasEdge predicate on the "parcel_shop" edge with a given conditions (other predicates).
func HasParcelShopWith(preds ...predicate.ParcelShop) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(func(s *sql.Selector) {
		step := newParcelShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ParcelShopGLS) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ParcelShopGLS) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ParcelShopGLS) predicate.ParcelShopGLS {
	return predicate.ParcelShopGLS(sql.NotPredicates(p))
}
