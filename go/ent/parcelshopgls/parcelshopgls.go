// Code generated by ent, DO NOT EDIT.

package parcelshopgls

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the parcelshopgls type in the database.
	Label = "parcel_shop_gls"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGLSParcelShopID holds the string denoting the gls_parcel_shop_id field in the database.
	FieldGLSParcelShopID = "gls_parcel_shop_id"
	// FieldPartnerID holds the string denoting the partner_id field in the database.
	FieldPartnerID = "partner_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeParcelShop holds the string denoting the parcel_shop edge name in mutations.
	EdgeParcelShop = "parcel_shop"
	// Table holds the table name of the parcelshopgls in the database.
	Table = "parcel_shop_gl_ss"
	// ParcelShopTable is the table that holds the parcel_shop relation/edge.
	ParcelShopTable = "parcel_shop_gl_ss"
	// ParcelShopInverseTable is the table name for the ParcelShop entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshop" package.
	ParcelShopInverseTable = "parcel_shops"
	// ParcelShopColumn is the table column denoting the parcel_shop relation/edge.
	ParcelShopColumn = "parcel_shop_parcel_shop_gls"
)

// Columns holds all SQL columns for parcelshopgls fields.
var Columns = []string{
	FieldID,
	FieldGLSParcelShopID,
	FieldPartnerID,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "parcel_shop_gl_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"parcel_shop_parcel_shop_gls",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ParcelShopGLS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGLSParcelShopID orders the results by the gls_parcel_shop_id field.
func ByGLSParcelShopID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGLSParcelShopID, opts...).ToFunc()
}

// ByPartnerID orders the results by the partner_id field.
func ByPartnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPartnerID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByParcelShopField orders the results by parcel_shop field.
func ByParcelShopField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopStep(), sql.OrderByField(field, opts...))
	}
}
func newParcelShopStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
	)
}
