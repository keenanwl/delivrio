// Code generated by ent, DO NOT EDIT.

package seatgroupaccessright

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the seatgroupaccessright type in the database.
	Label = "seat_group_access_right"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldAccessRightID holds the string denoting the access_right_id field in the database.
	FieldAccessRightID = "access_right_id"
	// FieldSeatGroupID holds the string denoting the seat_group_id field in the database.
	FieldSeatGroupID = "seat_group_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeAccessRight holds the string denoting the access_right edge name in mutations.
	EdgeAccessRight = "access_right"
	// EdgeSeatGroup holds the string denoting the seat_group edge name in mutations.
	EdgeSeatGroup = "seat_group"
	// Table holds the table name of the seatgroupaccessright in the database.
	Table = "seat_group_access_rights"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "seat_group_access_rights"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// AccessRightTable is the table that holds the access_right relation/edge.
	AccessRightTable = "seat_group_access_rights"
	// AccessRightInverseTable is the table name for the AccessRight entity.
	// It exists in this package in order to avoid circular dependency with the "accessright" package.
	AccessRightInverseTable = "access_rights"
	// AccessRightColumn is the table column denoting the access_right relation/edge.
	AccessRightColumn = "access_right_id"
	// SeatGroupTable is the table that holds the seat_group relation/edge.
	SeatGroupTable = "seat_group_access_rights"
	// SeatGroupInverseTable is the table name for the SeatGroup entity.
	// It exists in this package in order to avoid circular dependency with the "seatgroup" package.
	SeatGroupInverseTable = "seat_groups"
	// SeatGroupColumn is the table column denoting the seat_group relation/edge.
	SeatGroupColumn = "seat_group_id"
)

// Columns holds all SQL columns for seatgroupaccessright fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldLevel,
	FieldAccessRightID,
	FieldSeatGroupID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Level defines the type for the "level" enum field.
type Level string

// LevelNone is the default value of the Level enum.
const DefaultLevel = LevelNone

// Level values.
const (
	LevelNone  Level = "none"
	LevelRead  Level = "read"
	LevelWrite Level = "write"
)

func (l Level) String() string {
	return string(l)
}

// LevelValidator is a validator for the "level" field enum values. It is called by the builders before save.
func LevelValidator(l Level) error {
	switch l {
	case LevelNone, LevelRead, LevelWrite:
		return nil
	default:
		return fmt.Errorf("seatgroupaccessright: invalid enum value for level field: %q", l)
	}
}

// OrderOption defines the ordering options for the SeatGroupAccessRight queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByAccessRightID orders the results by the access_right_id field.
func ByAccessRightID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessRightID, opts...).ToFunc()
}

// BySeatGroupID orders the results by the seat_group_id field.
func BySeatGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeatGroupID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByAccessRightField orders the results by access_right field.
func ByAccessRightField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccessRightStep(), sql.OrderByField(field, opts...))
	}
}

// BySeatGroupField orders the results by seat_group field.
func BySeatGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeatGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newAccessRightStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccessRightInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AccessRightTable, AccessRightColumn),
	)
}
func newSeatGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeatGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SeatGroupTable, SeatGroupColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Level) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Level) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Level(str)
	if err := LevelValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Level", str)
	}
	return nil
}
