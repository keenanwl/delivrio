// Code generated by ent, DO NOT EDIT.

package seatgroupaccessright

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldTenantID, v))
}

// AccessRightID applies equality check predicate on the "access_right_id" field. It's identical to AccessRightIDEQ.
func AccessRightID(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldAccessRightID, v))
}

// SeatGroupID applies equality check predicate on the "seat_group_id" field. It's identical to SeatGroupIDEQ.
func SeatGroupID(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldSeatGroupID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldContainsFold(FieldTenantID, vc))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v Level) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v Level) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...Level) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...Level) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNotIn(FieldLevel, vs...))
}

// AccessRightIDEQ applies the EQ predicate on the "access_right_id" field.
func AccessRightIDEQ(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldAccessRightID, v))
}

// AccessRightIDNEQ applies the NEQ predicate on the "access_right_id" field.
func AccessRightIDNEQ(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNEQ(FieldAccessRightID, v))
}

// AccessRightIDIn applies the In predicate on the "access_right_id" field.
func AccessRightIDIn(vs ...pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldIn(FieldAccessRightID, vs...))
}

// AccessRightIDNotIn applies the NotIn predicate on the "access_right_id" field.
func AccessRightIDNotIn(vs ...pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNotIn(FieldAccessRightID, vs...))
}

// AccessRightIDGT applies the GT predicate on the "access_right_id" field.
func AccessRightIDGT(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldGT(FieldAccessRightID, v))
}

// AccessRightIDGTE applies the GTE predicate on the "access_right_id" field.
func AccessRightIDGTE(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldGTE(FieldAccessRightID, v))
}

// AccessRightIDLT applies the LT predicate on the "access_right_id" field.
func AccessRightIDLT(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldLT(FieldAccessRightID, v))
}

// AccessRightIDLTE applies the LTE predicate on the "access_right_id" field.
func AccessRightIDLTE(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldLTE(FieldAccessRightID, v))
}

// AccessRightIDContains applies the Contains predicate on the "access_right_id" field.
func AccessRightIDContains(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldContains(FieldAccessRightID, vc))
}

// AccessRightIDHasPrefix applies the HasPrefix predicate on the "access_right_id" field.
func AccessRightIDHasPrefix(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldHasPrefix(FieldAccessRightID, vc))
}

// AccessRightIDHasSuffix applies the HasSuffix predicate on the "access_right_id" field.
func AccessRightIDHasSuffix(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldHasSuffix(FieldAccessRightID, vc))
}

// AccessRightIDEqualFold applies the EqualFold predicate on the "access_right_id" field.
func AccessRightIDEqualFold(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldEqualFold(FieldAccessRightID, vc))
}

// AccessRightIDContainsFold applies the ContainsFold predicate on the "access_right_id" field.
func AccessRightIDContainsFold(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldContainsFold(FieldAccessRightID, vc))
}

// SeatGroupIDEQ applies the EQ predicate on the "seat_group_id" field.
func SeatGroupIDEQ(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldEQ(FieldSeatGroupID, v))
}

// SeatGroupIDNEQ applies the NEQ predicate on the "seat_group_id" field.
func SeatGroupIDNEQ(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNEQ(FieldSeatGroupID, v))
}

// SeatGroupIDIn applies the In predicate on the "seat_group_id" field.
func SeatGroupIDIn(vs ...pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldIn(FieldSeatGroupID, vs...))
}

// SeatGroupIDNotIn applies the NotIn predicate on the "seat_group_id" field.
func SeatGroupIDNotIn(vs ...pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldNotIn(FieldSeatGroupID, vs...))
}

// SeatGroupIDGT applies the GT predicate on the "seat_group_id" field.
func SeatGroupIDGT(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldGT(FieldSeatGroupID, v))
}

// SeatGroupIDGTE applies the GTE predicate on the "seat_group_id" field.
func SeatGroupIDGTE(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldGTE(FieldSeatGroupID, v))
}

// SeatGroupIDLT applies the LT predicate on the "seat_group_id" field.
func SeatGroupIDLT(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldLT(FieldSeatGroupID, v))
}

// SeatGroupIDLTE applies the LTE predicate on the "seat_group_id" field.
func SeatGroupIDLTE(v pulid.ID) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.FieldLTE(FieldSeatGroupID, v))
}

// SeatGroupIDContains applies the Contains predicate on the "seat_group_id" field.
func SeatGroupIDContains(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldContains(FieldSeatGroupID, vc))
}

// SeatGroupIDHasPrefix applies the HasPrefix predicate on the "seat_group_id" field.
func SeatGroupIDHasPrefix(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldHasPrefix(FieldSeatGroupID, vc))
}

// SeatGroupIDHasSuffix applies the HasSuffix predicate on the "seat_group_id" field.
func SeatGroupIDHasSuffix(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldHasSuffix(FieldSeatGroupID, vc))
}

// SeatGroupIDEqualFold applies the EqualFold predicate on the "seat_group_id" field.
func SeatGroupIDEqualFold(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldEqualFold(FieldSeatGroupID, vc))
}

// SeatGroupIDContainsFold applies the ContainsFold predicate on the "seat_group_id" field.
func SeatGroupIDContainsFold(v pulid.ID) predicate.SeatGroupAccessRight {
	vc := string(v)
	return predicate.SeatGroupAccessRight(sql.FieldContainsFold(FieldSeatGroupID, vc))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccessRight applies the HasEdge predicate on the "access_right" edge.
func HasAccessRight() predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AccessRightTable, AccessRightColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccessRightWith applies the HasEdge predicate on the "access_right" edge with a given conditions (other predicates).
func HasAccessRightWith(preds ...predicate.AccessRight) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(func(s *sql.Selector) {
		step := newAccessRightStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeatGroup applies the HasEdge predicate on the "seat_group" edge.
func HasSeatGroup() predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SeatGroupTable, SeatGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeatGroupWith applies the HasEdge predicate on the "seat_group" edge with a given conditions (other predicates).
func HasSeatGroupWith(preds ...predicate.SeatGroup) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(func(s *sql.Selector) {
		step := newSeatGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SeatGroupAccessRight) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SeatGroupAccessRight) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SeatGroupAccessRight) predicate.SeatGroupAccessRight {
	return predicate.SeatGroupAccessRight(sql.NotPredicates(p))
}
