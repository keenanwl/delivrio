// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/ordersender"
	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/systemevents"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/userseat"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/go/schema"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	apitokenMixin := schema.APIToken{}.Mixin()
	apitoken.Policy = privacy.NewPolicies(apitokenMixin[0], apitokenMixin[1], schema.APIToken{})
	apitoken.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := apitoken.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	apitokenMixinFields2 := apitokenMixin[2].Fields()
	_ = apitokenMixinFields2
	apitokenFields := schema.APIToken{}.Fields()
	_ = apitokenFields
	// apitokenDescHashedToken is the schema descriptor for hashed_token field.
	apitokenDescHashedToken := apitokenFields[1].Descriptor()
	// apitoken.HashedTokenValidator is a validator for the "hashed_token" field. It is called by the builders before save.
	apitoken.HashedTokenValidator = func() func(string) error {
		validators := apitokenDescHashedToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(hashed_token string) error {
			for _, fn := range fns {
				if err := fn(hashed_token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// apitokenDescCreatedAt is the schema descriptor for created_at field.
	apitokenDescCreatedAt := apitokenFields[2].Descriptor()
	// apitoken.DefaultCreatedAt holds the default value on creation for the created_at field.
	apitoken.DefaultCreatedAt = apitokenDescCreatedAt.Default.(func() time.Time)
	// apitokenDescID is the schema descriptor for id field.
	apitokenDescID := apitokenMixinFields2[0].Descriptor()
	// apitoken.DefaultID holds the default value on creation for the id field.
	apitoken.DefaultID = apitokenDescID.Default.(func() pulid.ID)
	accessrightMixin := schema.AccessRight{}.Mixin()
	accessright.Policy = privacy.NewPolicies(accessrightMixin[0], schema.AccessRight{})
	accessright.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := accessright.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	accessrightMixinFields1 := accessrightMixin[1].Fields()
	_ = accessrightMixinFields1
	accessrightFields := schema.AccessRight{}.Fields()
	_ = accessrightFields
	// accessrightDescID is the schema descriptor for id field.
	accessrightDescID := accessrightMixinFields1[0].Descriptor()
	// accessright.DefaultID holds the default value on creation for the id field.
	accessright.DefaultID = accessrightDescID.Default.(func() pulid.ID)
	addressMixin := schema.Address{}.Mixin()
	address.Policy = privacy.NewPolicies(addressMixin[0], addressMixin[1], schema.Address{})
	address.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := address.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	addressMixinFields2 := addressMixin[2].Fields()
	_ = addressMixinFields2
	addressFields := schema.Address{}.Fields()
	_ = addressFields
	// addressDescID is the schema descriptor for id field.
	addressDescID := addressMixinFields2[0].Descriptor()
	// address.DefaultID holds the default value on creation for the id field.
	address.DefaultID = addressDescID.Default.(func() pulid.ID)
	addressglobalMixin := schema.AddressGlobal{}.Mixin()
	addressglobal.Policy = privacy.NewPolicies(addressglobalMixin[0], schema.AddressGlobal{})
	addressglobal.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := addressglobal.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	addressglobalMixinFields1 := addressglobalMixin[1].Fields()
	_ = addressglobalMixinFields1
	addressglobalFields := schema.AddressGlobal{}.Fields()
	_ = addressglobalFields
	// addressglobalDescLatitude is the schema descriptor for latitude field.
	addressglobalDescLatitude := addressglobalFields[7].Descriptor()
	// addressglobal.DefaultLatitude holds the default value on creation for the latitude field.
	addressglobal.DefaultLatitude = addressglobalDescLatitude.Default.(float64)
	// addressglobalDescLongitude is the schema descriptor for longitude field.
	addressglobalDescLongitude := addressglobalFields[8].Descriptor()
	// addressglobal.DefaultLongitude holds the default value on creation for the longitude field.
	addressglobal.DefaultLongitude = addressglobalDescLongitude.Default.(float64)
	// addressglobalDescID is the schema descriptor for id field.
	addressglobalDescID := addressglobalMixinFields1[0].Descriptor()
	// addressglobal.DefaultID holds the default value on creation for the id field.
	addressglobal.DefaultID = addressglobalDescID.Default.(func() pulid.ID)
	businesshoursperiodMixin := schema.BusinessHoursPeriod{}.Mixin()
	businesshoursperiod.Policy = privacy.NewPolicies(businesshoursperiodMixin[0], schema.BusinessHoursPeriod{})
	businesshoursperiod.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := businesshoursperiod.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	businesshoursperiodMixinFields1 := businesshoursperiodMixin[1].Fields()
	_ = businesshoursperiodMixinFields1
	businesshoursperiodFields := schema.BusinessHoursPeriod{}.Fields()
	_ = businesshoursperiodFields
	// businesshoursperiodDescID is the schema descriptor for id field.
	businesshoursperiodDescID := businesshoursperiodMixinFields1[0].Descriptor()
	// businesshoursperiod.DefaultID holds the default value on creation for the id field.
	businesshoursperiod.DefaultID = businesshoursperiodDescID.Default.(func() pulid.ID)
	carrierMixin := schema.Carrier{}.Mixin()
	carrier.Policy = privacy.NewPolicies(carrierMixin[0], carrierMixin[1], schema.Carrier{})
	carrier.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrier.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierMixinFields2 := carrierMixin[2].Fields()
	_ = carrierMixinFields2
	carrierFields := schema.Carrier{}.Fields()
	_ = carrierFields
	// carrierDescSyncCancelation is the schema descriptor for sync_cancelation field.
	carrierDescSyncCancelation := carrierFields[1].Descriptor()
	// carrier.DefaultSyncCancelation holds the default value on creation for the sync_cancelation field.
	carrier.DefaultSyncCancelation = carrierDescSyncCancelation.Default.(bool)
	// carrierDescID is the schema descriptor for id field.
	carrierDescID := carrierMixinFields2[0].Descriptor()
	// carrier.DefaultID holds the default value on creation for the id field.
	carrier.DefaultID = carrierDescID.Default.(func() pulid.ID)
	carrieradditionalservicebringMixin := schema.CarrierAdditionalServiceBring{}.Mixin()
	carrieradditionalservicebring.Policy = privacy.NewPolicies(carrieradditionalservicebringMixin[0], schema.CarrierAdditionalServiceBring{})
	carrieradditionalservicebring.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrieradditionalservicebring.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieradditionalservicebringMixinFields1 := carrieradditionalservicebringMixin[1].Fields()
	_ = carrieradditionalservicebringMixinFields1
	carrieradditionalservicebringFields := schema.CarrierAdditionalServiceBring{}.Fields()
	_ = carrieradditionalservicebringFields
	// carrieradditionalservicebringDescID is the schema descriptor for id field.
	carrieradditionalservicebringDescID := carrieradditionalservicebringMixinFields1[0].Descriptor()
	// carrieradditionalservicebring.DefaultID holds the default value on creation for the id field.
	carrieradditionalservicebring.DefaultID = carrieradditionalservicebringDescID.Default.(func() pulid.ID)
	carrieradditionalservicedaoMixin := schema.CarrierAdditionalServiceDAO{}.Mixin()
	carrieradditionalservicedao.Policy = privacy.NewPolicies(carrieradditionalservicedaoMixin[0], schema.CarrierAdditionalServiceDAO{})
	carrieradditionalservicedao.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrieradditionalservicedao.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieradditionalservicedaoMixinFields1 := carrieradditionalservicedaoMixin[1].Fields()
	_ = carrieradditionalservicedaoMixinFields1
	carrieradditionalservicedaoFields := schema.CarrierAdditionalServiceDAO{}.Fields()
	_ = carrieradditionalservicedaoFields
	// carrieradditionalservicedaoDescID is the schema descriptor for id field.
	carrieradditionalservicedaoDescID := carrieradditionalservicedaoMixinFields1[0].Descriptor()
	// carrieradditionalservicedao.DefaultID holds the default value on creation for the id field.
	carrieradditionalservicedao.DefaultID = carrieradditionalservicedaoDescID.Default.(func() pulid.ID)
	carrieradditionalservicedfMixin := schema.CarrierAdditionalServiceDF{}.Mixin()
	carrieradditionalservicedf.Policy = privacy.NewPolicies(carrieradditionalservicedfMixin[0], schema.CarrierAdditionalServiceDF{})
	carrieradditionalservicedf.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrieradditionalservicedf.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieradditionalservicedfMixinFields1 := carrieradditionalservicedfMixin[1].Fields()
	_ = carrieradditionalservicedfMixinFields1
	carrieradditionalservicedfFields := schema.CarrierAdditionalServiceDF{}.Fields()
	_ = carrieradditionalservicedfFields
	// carrieradditionalservicedfDescID is the schema descriptor for id field.
	carrieradditionalservicedfDescID := carrieradditionalservicedfMixinFields1[0].Descriptor()
	// carrieradditionalservicedf.DefaultID holds the default value on creation for the id field.
	carrieradditionalservicedf.DefaultID = carrieradditionalservicedfDescID.Default.(func() pulid.ID)
	carrieradditionalservicedsvMixin := schema.CarrierAdditionalServiceDSV{}.Mixin()
	carrieradditionalservicedsv.Policy = privacy.NewPolicies(carrieradditionalservicedsvMixin[0], schema.CarrierAdditionalServiceDSV{})
	carrieradditionalservicedsv.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrieradditionalservicedsv.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieradditionalservicedsvMixinFields1 := carrieradditionalservicedsvMixin[1].Fields()
	_ = carrieradditionalservicedsvMixinFields1
	carrieradditionalservicedsvFields := schema.CarrierAdditionalServiceDSV{}.Fields()
	_ = carrieradditionalservicedsvFields
	// carrieradditionalservicedsvDescID is the schema descriptor for id field.
	carrieradditionalservicedsvDescID := carrieradditionalservicedsvMixinFields1[0].Descriptor()
	// carrieradditionalservicedsv.DefaultID holds the default value on creation for the id field.
	carrieradditionalservicedsv.DefaultID = carrieradditionalservicedsvDescID.Default.(func() pulid.ID)
	carrieradditionalserviceeasypostMixin := schema.CarrierAdditionalServiceEasyPost{}.Mixin()
	carrieradditionalserviceeasypost.Policy = privacy.NewPolicies(carrieradditionalserviceeasypostMixin[0], schema.CarrierAdditionalServiceEasyPost{})
	carrieradditionalserviceeasypost.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrieradditionalserviceeasypost.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieradditionalserviceeasypostMixinFields1 := carrieradditionalserviceeasypostMixin[1].Fields()
	_ = carrieradditionalserviceeasypostMixinFields1
	carrieradditionalserviceeasypostFields := schema.CarrierAdditionalServiceEasyPost{}.Fields()
	_ = carrieradditionalserviceeasypostFields
	// carrieradditionalserviceeasypostDescID is the schema descriptor for id field.
	carrieradditionalserviceeasypostDescID := carrieradditionalserviceeasypostMixinFields1[0].Descriptor()
	// carrieradditionalserviceeasypost.DefaultID holds the default value on creation for the id field.
	carrieradditionalserviceeasypost.DefaultID = carrieradditionalserviceeasypostDescID.Default.(func() pulid.ID)
	carrieradditionalserviceglsMixin := schema.CarrierAdditionalServiceGLS{}.Mixin()
	carrieradditionalservicegls.Policy = privacy.NewPolicies(carrieradditionalserviceglsMixin[0], schema.CarrierAdditionalServiceGLS{})
	carrieradditionalservicegls.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrieradditionalservicegls.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieradditionalserviceglsMixinFields1 := carrieradditionalserviceglsMixin[1].Fields()
	_ = carrieradditionalserviceglsMixinFields1
	carrieradditionalserviceglsFields := schema.CarrierAdditionalServiceGLS{}.Fields()
	_ = carrieradditionalserviceglsFields
	// carrieradditionalserviceglsDescAllCountriesConsignor is the schema descriptor for all_countries_consignor field.
	carrieradditionalserviceglsDescAllCountriesConsignor := carrieradditionalserviceglsFields[2].Descriptor()
	// carrieradditionalservicegls.DefaultAllCountriesConsignor holds the default value on creation for the all_countries_consignor field.
	carrieradditionalservicegls.DefaultAllCountriesConsignor = carrieradditionalserviceglsDescAllCountriesConsignor.Default.(bool)
	// carrieradditionalserviceglsDescAllCountriesConsignee is the schema descriptor for all_countries_consignee field.
	carrieradditionalserviceglsDescAllCountriesConsignee := carrieradditionalserviceglsFields[3].Descriptor()
	// carrieradditionalservicegls.DefaultAllCountriesConsignee holds the default value on creation for the all_countries_consignee field.
	carrieradditionalservicegls.DefaultAllCountriesConsignee = carrieradditionalserviceglsDescAllCountriesConsignee.Default.(bool)
	// carrieradditionalserviceglsDescID is the schema descriptor for id field.
	carrieradditionalserviceglsDescID := carrieradditionalserviceglsMixinFields1[0].Descriptor()
	// carrieradditionalservicegls.DefaultID holds the default value on creation for the id field.
	carrieradditionalservicegls.DefaultID = carrieradditionalserviceglsDescID.Default.(func() pulid.ID)
	carrieradditionalservicepostnordMixin := schema.CarrierAdditionalServicePostNord{}.Mixin()
	carrieradditionalservicepostnord.Policy = privacy.NewPolicies(carrieradditionalservicepostnordMixin[0], schema.CarrierAdditionalServicePostNord{})
	carrieradditionalservicepostnord.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrieradditionalservicepostnord.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieradditionalservicepostnordMixinFields1 := carrieradditionalservicepostnordMixin[1].Fields()
	_ = carrieradditionalservicepostnordMixinFields1
	carrieradditionalservicepostnordFields := schema.CarrierAdditionalServicePostNord{}.Fields()
	_ = carrieradditionalservicepostnordFields
	// carrieradditionalservicepostnordDescAllCountriesConsignor is the schema descriptor for all_countries_consignor field.
	carrieradditionalservicepostnordDescAllCountriesConsignor := carrieradditionalservicepostnordFields[2].Descriptor()
	// carrieradditionalservicepostnord.DefaultAllCountriesConsignor holds the default value on creation for the all_countries_consignor field.
	carrieradditionalservicepostnord.DefaultAllCountriesConsignor = carrieradditionalservicepostnordDescAllCountriesConsignor.Default.(bool)
	// carrieradditionalservicepostnordDescAllCountriesConsignee is the schema descriptor for all_countries_consignee field.
	carrieradditionalservicepostnordDescAllCountriesConsignee := carrieradditionalservicepostnordFields[3].Descriptor()
	// carrieradditionalservicepostnord.DefaultAllCountriesConsignee holds the default value on creation for the all_countries_consignee field.
	carrieradditionalservicepostnord.DefaultAllCountriesConsignee = carrieradditionalservicepostnordDescAllCountriesConsignee.Default.(bool)
	// carrieradditionalservicepostnordDescID is the schema descriptor for id field.
	carrieradditionalservicepostnordDescID := carrieradditionalservicepostnordMixinFields1[0].Descriptor()
	// carrieradditionalservicepostnord.DefaultID holds the default value on creation for the id field.
	carrieradditionalservicepostnord.DefaultID = carrieradditionalservicepostnordDescID.Default.(func() pulid.ID)
	carrieradditionalserviceuspsMixin := schema.CarrierAdditionalServiceUSPS{}.Mixin()
	carrieradditionalserviceusps.Policy = privacy.NewPolicies(carrieradditionalserviceuspsMixin[0], schema.CarrierAdditionalServiceUSPS{})
	carrieradditionalserviceusps.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrieradditionalserviceusps.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieradditionalserviceuspsMixinFields1 := carrieradditionalserviceuspsMixin[1].Fields()
	_ = carrieradditionalserviceuspsMixinFields1
	carrieradditionalserviceuspsFields := schema.CarrierAdditionalServiceUSPS{}.Fields()
	_ = carrieradditionalserviceuspsFields
	// carrieradditionalserviceuspsDescCommonlyUsed is the schema descriptor for commonly_used field.
	carrieradditionalserviceuspsDescCommonlyUsed := carrieradditionalserviceuspsFields[1].Descriptor()
	// carrieradditionalserviceusps.DefaultCommonlyUsed holds the default value on creation for the commonly_used field.
	carrieradditionalserviceusps.DefaultCommonlyUsed = carrieradditionalserviceuspsDescCommonlyUsed.Default.(bool)
	// carrieradditionalserviceuspsDescID is the schema descriptor for id field.
	carrieradditionalserviceuspsDescID := carrieradditionalserviceuspsMixinFields1[0].Descriptor()
	// carrieradditionalserviceusps.DefaultID holds the default value on creation for the id field.
	carrieradditionalserviceusps.DefaultID = carrieradditionalserviceuspsDescID.Default.(func() pulid.ID)
	carrierbrandMixin := schema.CarrierBrand{}.Mixin()
	carrierbrand.Policy = privacy.NewPolicies(carrierbrandMixin[0], schema.CarrierBrand{})
	carrierbrand.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierbrand.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierbrandMixinFields1 := carrierbrandMixin[1].Fields()
	_ = carrierbrandMixinFields1
	carrierbrandFields := schema.CarrierBrand{}.Fields()
	_ = carrierbrandFields
	// carrierbrandDescTextColor is the schema descriptor for text_color field.
	carrierbrandDescTextColor := carrierbrandFields[4].Descriptor()
	// carrierbrand.DefaultTextColor holds the default value on creation for the text_color field.
	carrierbrand.DefaultTextColor = carrierbrandDescTextColor.Default.(string)
	// carrierbrandDescBackgroundColor is the schema descriptor for background_color field.
	carrierbrandDescBackgroundColor := carrierbrandFields[5].Descriptor()
	// carrierbrand.DefaultBackgroundColor holds the default value on creation for the background_color field.
	carrierbrand.DefaultBackgroundColor = carrierbrandDescBackgroundColor.Default.(string)
	// carrierbrandDescID is the schema descriptor for id field.
	carrierbrandDescID := carrierbrandMixinFields1[0].Descriptor()
	// carrierbrand.DefaultID holds the default value on creation for the id field.
	carrierbrand.DefaultID = carrierbrandDescID.Default.(func() pulid.ID)
	carrierbringMixin := schema.CarrierBring{}.Mixin()
	carrierbring.Policy = privacy.NewPolicies(carrierbringMixin[0], carrierbringMixin[1], schema.CarrierBring{})
	carrierbring.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierbring.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierbringMixinFields2 := carrierbringMixin[2].Fields()
	_ = carrierbringMixinFields2
	carrierbringFields := schema.CarrierBring{}.Fields()
	_ = carrierbringFields
	// carrierbringDescTest is the schema descriptor for test field.
	carrierbringDescTest := carrierbringFields[2].Descriptor()
	// carrierbring.DefaultTest holds the default value on creation for the test field.
	carrierbring.DefaultTest = carrierbringDescTest.Default.(bool)
	// carrierbringDescID is the schema descriptor for id field.
	carrierbringDescID := carrierbringMixinFields2[0].Descriptor()
	// carrierbring.DefaultID holds the default value on creation for the id field.
	carrierbring.DefaultID = carrierbringDescID.Default.(func() pulid.ID)
	carrierdaoMixin := schema.CarrierDAO{}.Mixin()
	carrierdao.Policy = privacy.NewPolicies(carrierdaoMixin[0], carrierdaoMixin[1], schema.CarrierDAO{})
	carrierdao.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierdao.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierdaoMixinFields2 := carrierdaoMixin[2].Fields()
	_ = carrierdaoMixinFields2
	carrierdaoFields := schema.CarrierDAO{}.Fields()
	_ = carrierdaoFields
	// carrierdaoDescTest is the schema descriptor for Test field.
	carrierdaoDescTest := carrierdaoFields[2].Descriptor()
	// carrierdao.DefaultTest holds the default value on creation for the Test field.
	carrierdao.DefaultTest = carrierdaoDescTest.Default.(bool)
	// carrierdaoDescID is the schema descriptor for id field.
	carrierdaoDescID := carrierdaoMixinFields2[0].Descriptor()
	// carrierdao.DefaultID holds the default value on creation for the id field.
	carrierdao.DefaultID = carrierdaoDescID.Default.(func() pulid.ID)
	carrierdfMixin := schema.CarrierDF{}.Mixin()
	carrierdf.Policy = privacy.NewPolicies(carrierdfMixin[0], carrierdfMixin[1], schema.CarrierDF{})
	carrierdf.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierdf.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierdfMixinFields2 := carrierdfMixin[2].Fields()
	_ = carrierdfMixinFields2
	carrierdfFields := schema.CarrierDF{}.Fields()
	_ = carrierdfFields
	// carrierdfDescTest is the schema descriptor for test field.
	carrierdfDescTest := carrierdfFields[3].Descriptor()
	// carrierdf.DefaultTest holds the default value on creation for the test field.
	carrierdf.DefaultTest = carrierdfDescTest.Default.(bool)
	// carrierdfDescID is the schema descriptor for id field.
	carrierdfDescID := carrierdfMixinFields2[0].Descriptor()
	// carrierdf.DefaultID holds the default value on creation for the id field.
	carrierdf.DefaultID = carrierdfDescID.Default.(func() pulid.ID)
	carrierdsvMixin := schema.CarrierDSV{}.Mixin()
	carrierdsv.Policy = privacy.NewPolicies(carrierdsvMixin[0], carrierdsvMixin[1], schema.CarrierDSV{})
	carrierdsv.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierdsv.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierdsvMixinFields2 := carrierdsvMixin[2].Fields()
	_ = carrierdsvMixinFields2
	carrierdsvFields := schema.CarrierDSV{}.Fields()
	_ = carrierdsvFields
	// carrierdsvDescID is the schema descriptor for id field.
	carrierdsvDescID := carrierdsvMixinFields2[0].Descriptor()
	// carrierdsv.DefaultID holds the default value on creation for the id field.
	carrierdsv.DefaultID = carrierdsvDescID.Default.(func() pulid.ID)
	carriereasypostMixin := schema.CarrierEasyPost{}.Mixin()
	carriereasypost.Policy = privacy.NewPolicies(carriereasypostMixin[0], carriereasypostMixin[1], schema.CarrierEasyPost{})
	carriereasypost.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carriereasypost.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carriereasypostMixinFields2 := carriereasypostMixin[2].Fields()
	_ = carriereasypostMixinFields2
	carriereasypostFields := schema.CarrierEasyPost{}.Fields()
	_ = carriereasypostFields
	// carriereasypostDescTest is the schema descriptor for test field.
	carriereasypostDescTest := carriereasypostFields[1].Descriptor()
	// carriereasypost.DefaultTest holds the default value on creation for the test field.
	carriereasypost.DefaultTest = carriereasypostDescTest.Default.(bool)
	// carriereasypostDescCarrierAccounts is the schema descriptor for carrier_accounts field.
	carriereasypostDescCarrierAccounts := carriereasypostFields[2].Descriptor()
	// carriereasypost.DefaultCarrierAccounts holds the default value on creation for the carrier_accounts field.
	carriereasypost.DefaultCarrierAccounts = carriereasypostDescCarrierAccounts.Default.([]string)
	// carriereasypostDescID is the schema descriptor for id field.
	carriereasypostDescID := carriereasypostMixinFields2[0].Descriptor()
	// carriereasypost.DefaultID holds the default value on creation for the id field.
	carriereasypost.DefaultID = carriereasypostDescID.Default.(func() pulid.ID)
	carrierglsMixin := schema.CarrierGLS{}.Mixin()
	carriergls.Policy = privacy.NewPolicies(carrierglsMixin[0], carrierglsMixin[1], schema.CarrierGLS{})
	carriergls.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carriergls.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierglsHooks := schema.CarrierGLS{}.Hooks()

	carriergls.Hooks[1] = carrierglsHooks[0]
	carrierglsMixinFields2 := carrierglsMixin[2].Fields()
	_ = carrierglsMixinFields2
	carrierglsFields := schema.CarrierGLS{}.Fields()
	_ = carrierglsFields
	// carrierglsDescSyncShipmentCancellation is the schema descriptor for sync_shipment_cancellation field.
	carrierglsDescSyncShipmentCancellation := carrierglsFields[5].Descriptor()
	// carriergls.DefaultSyncShipmentCancellation holds the default value on creation for the sync_shipment_cancellation field.
	carriergls.DefaultSyncShipmentCancellation = carrierglsDescSyncShipmentCancellation.Default.(bool)
	// carrierglsDescPrintErrorOnLabel is the schema descriptor for print_error_on_label field.
	carrierglsDescPrintErrorOnLabel := carrierglsFields[6].Descriptor()
	// carriergls.DefaultPrintErrorOnLabel holds the default value on creation for the print_error_on_label field.
	carriergls.DefaultPrintErrorOnLabel = carrierglsDescPrintErrorOnLabel.Default.(bool)
	// carrierglsDescID is the schema descriptor for id field.
	carrierglsDescID := carrierglsMixinFields2[0].Descriptor()
	// carriergls.DefaultID holds the default value on creation for the id field.
	carriergls.DefaultID = carrierglsDescID.Default.(func() pulid.ID)
	carrierpostnordMixin := schema.CarrierPostNord{}.Mixin()
	carrierpostnord.Policy = privacy.NewPolicies(carrierpostnordMixin[0], carrierpostnordMixin[1], schema.CarrierPostNord{})
	carrierpostnord.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierpostnord.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierpostnordMixinFields2 := carrierpostnordMixin[2].Fields()
	_ = carrierpostnordMixinFields2
	carrierpostnordFields := schema.CarrierPostNord{}.Fields()
	_ = carrierpostnordFields
	// carrierpostnordDescCustomerNumber is the schema descriptor for customer_number field.
	carrierpostnordDescCustomerNumber := carrierpostnordFields[0].Descriptor()
	// carrierpostnord.DefaultCustomerNumber holds the default value on creation for the customer_number field.
	carrierpostnord.DefaultCustomerNumber = carrierpostnordDescCustomerNumber.Default.(string)
	// carrierpostnordDescID is the schema descriptor for id field.
	carrierpostnordDescID := carrierpostnordMixinFields2[0].Descriptor()
	// carrierpostnord.DefaultID holds the default value on creation for the id field.
	carrierpostnord.DefaultID = carrierpostnordDescID.Default.(func() pulid.ID)
	carrierserviceMixin := schema.CarrierService{}.Mixin()
	carrierservice.Policy = privacy.NewPolicies(carrierserviceMixin[0], schema.CarrierService{})
	carrierservice.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierservice.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierserviceMixinFields1 := carrierserviceMixin[1].Fields()
	_ = carrierserviceMixinFields1
	carrierserviceFields := schema.CarrierService{}.Fields()
	_ = carrierserviceFields
	// carrierserviceDescReturn is the schema descriptor for return field.
	carrierserviceDescReturn := carrierserviceFields[2].Descriptor()
	// carrierservice.DefaultReturn holds the default value on creation for the return field.
	carrierservice.DefaultReturn = carrierserviceDescReturn.Default.(bool)
	// carrierserviceDescConsolidation is the schema descriptor for consolidation field.
	carrierserviceDescConsolidation := carrierserviceFields[3].Descriptor()
	// carrierservice.DefaultConsolidation holds the default value on creation for the consolidation field.
	carrierservice.DefaultConsolidation = carrierserviceDescConsolidation.Default.(bool)
	// carrierserviceDescDeliveryPointOptional is the schema descriptor for delivery_point_optional field.
	carrierserviceDescDeliveryPointOptional := carrierserviceFields[4].Descriptor()
	// carrierservice.DefaultDeliveryPointOptional holds the default value on creation for the delivery_point_optional field.
	carrierservice.DefaultDeliveryPointOptional = carrierserviceDescDeliveryPointOptional.Default.(bool)
	// carrierserviceDescDeliveryPointRequired is the schema descriptor for delivery_point_required field.
	carrierserviceDescDeliveryPointRequired := carrierserviceFields[5].Descriptor()
	// carrierservice.DefaultDeliveryPointRequired holds the default value on creation for the delivery_point_required field.
	carrierservice.DefaultDeliveryPointRequired = carrierserviceDescDeliveryPointRequired.Default.(bool)
	// carrierserviceDescID is the schema descriptor for id field.
	carrierserviceDescID := carrierserviceMixinFields1[0].Descriptor()
	// carrierservice.DefaultID holds the default value on creation for the id field.
	carrierservice.DefaultID = carrierserviceDescID.Default.(func() pulid.ID)
	carrierservicebringMixin := schema.CarrierServiceBring{}.Mixin()
	carrierservicebring.Policy = privacy.NewPolicies(carrierservicebringMixin[0], schema.CarrierServiceBring{})
	carrierservicebring.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierservicebring.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierservicebringMixinFields1 := carrierservicebringMixin[1].Fields()
	_ = carrierservicebringMixinFields1
	carrierservicebringFields := schema.CarrierServiceBring{}.Fields()
	_ = carrierservicebringFields
	// carrierservicebringDescID is the schema descriptor for id field.
	carrierservicebringDescID := carrierservicebringMixinFields1[0].Descriptor()
	// carrierservicebring.DefaultID holds the default value on creation for the id field.
	carrierservicebring.DefaultID = carrierservicebringDescID.Default.(func() pulid.ID)
	carrierservicedaoMixin := schema.CarrierServiceDAO{}.Mixin()
	carrierservicedao.Policy = privacy.NewPolicies(carrierservicedaoMixin[0], schema.CarrierServiceDAO{})
	carrierservicedao.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierservicedao.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierservicedaoMixinFields1 := carrierservicedaoMixin[1].Fields()
	_ = carrierservicedaoMixinFields1
	carrierservicedaoFields := schema.CarrierServiceDAO{}.Fields()
	_ = carrierservicedaoFields
	// carrierservicedaoDescID is the schema descriptor for id field.
	carrierservicedaoDescID := carrierservicedaoMixinFields1[0].Descriptor()
	// carrierservicedao.DefaultID holds the default value on creation for the id field.
	carrierservicedao.DefaultID = carrierservicedaoDescID.Default.(func() pulid.ID)
	carrierservicedfMixin := schema.CarrierServiceDF{}.Mixin()
	carrierservicedf.Policy = privacy.NewPolicies(carrierservicedfMixin[0], schema.CarrierServiceDF{})
	carrierservicedf.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierservicedf.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierservicedfMixinFields1 := carrierservicedfMixin[1].Fields()
	_ = carrierservicedfMixinFields1
	carrierservicedfFields := schema.CarrierServiceDF{}.Fields()
	_ = carrierservicedfFields
	// carrierservicedfDescID is the schema descriptor for id field.
	carrierservicedfDescID := carrierservicedfMixinFields1[0].Descriptor()
	// carrierservicedf.DefaultID holds the default value on creation for the id field.
	carrierservicedf.DefaultID = carrierservicedfDescID.Default.(func() pulid.ID)
	carrierservicedsvMixin := schema.CarrierServiceDSV{}.Mixin()
	carrierservicedsv.Policy = privacy.NewPolicies(carrierservicedsvMixin[0], schema.CarrierServiceDSV{})
	carrierservicedsv.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierservicedsv.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierservicedsvMixinFields1 := carrierservicedsvMixin[1].Fields()
	_ = carrierservicedsvMixinFields1
	carrierservicedsvFields := schema.CarrierServiceDSV{}.Fields()
	_ = carrierservicedsvFields
	// carrierservicedsvDescID is the schema descriptor for id field.
	carrierservicedsvDescID := carrierservicedsvMixinFields1[0].Descriptor()
	// carrierservicedsv.DefaultID holds the default value on creation for the id field.
	carrierservicedsv.DefaultID = carrierservicedsvDescID.Default.(func() pulid.ID)
	carrierserviceeasypostMixin := schema.CarrierServiceEasyPost{}.Mixin()
	carrierserviceeasypost.Policy = privacy.NewPolicies(carrierserviceeasypostMixin[0], schema.CarrierServiceEasyPost{})
	carrierserviceeasypost.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierserviceeasypost.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierserviceeasypostMixinFields1 := carrierserviceeasypostMixin[1].Fields()
	_ = carrierserviceeasypostMixinFields1
	carrierserviceeasypostFields := schema.CarrierServiceEasyPost{}.Fields()
	_ = carrierserviceeasypostFields
	// carrierserviceeasypostDescID is the schema descriptor for id field.
	carrierserviceeasypostDescID := carrierserviceeasypostMixinFields1[0].Descriptor()
	// carrierserviceeasypost.DefaultID holds the default value on creation for the id field.
	carrierserviceeasypost.DefaultID = carrierserviceeasypostDescID.Default.(func() pulid.ID)
	carrierserviceglsMixin := schema.CarrierServiceGLS{}.Mixin()
	carrierservicegls.Policy = privacy.NewPolicies(carrierserviceglsMixin[0], schema.CarrierServiceGLS{})
	carrierservicegls.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierservicegls.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierserviceglsMixinFields1 := carrierserviceglsMixin[1].Fields()
	_ = carrierserviceglsMixinFields1
	carrierserviceglsFields := schema.CarrierServiceGLS{}.Fields()
	_ = carrierserviceglsFields
	// carrierserviceglsDescID is the schema descriptor for id field.
	carrierserviceglsDescID := carrierserviceglsMixinFields1[0].Descriptor()
	// carrierservicegls.DefaultID holds the default value on creation for the id field.
	carrierservicegls.DefaultID = carrierserviceglsDescID.Default.(func() pulid.ID)
	carrierservicepostnordMixin := schema.CarrierServicePostNord{}.Mixin()
	carrierservicepostnord.Policy = privacy.NewPolicies(carrierservicepostnordMixin[0], schema.CarrierServicePostNord{})
	carrierservicepostnord.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierservicepostnord.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierservicepostnordMixinFields1 := carrierservicepostnordMixin[1].Fields()
	_ = carrierservicepostnordMixinFields1
	carrierservicepostnordFields := schema.CarrierServicePostNord{}.Fields()
	_ = carrierservicepostnordFields
	// carrierservicepostnordDescID is the schema descriptor for id field.
	carrierservicepostnordDescID := carrierservicepostnordMixinFields1[0].Descriptor()
	// carrierservicepostnord.DefaultID holds the default value on creation for the id field.
	carrierservicepostnord.DefaultID = carrierservicepostnordDescID.Default.(func() pulid.ID)
	carrierserviceuspsMixin := schema.CarrierServiceUSPS{}.Mixin()
	carrierserviceusps.Policy = privacy.NewPolicies(carrierserviceuspsMixin[0], schema.CarrierServiceUSPS{})
	carrierserviceusps.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierserviceusps.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrierserviceuspsMixinFields1 := carrierserviceuspsMixin[1].Fields()
	_ = carrierserviceuspsMixinFields1
	carrierserviceuspsFields := schema.CarrierServiceUSPS{}.Fields()
	_ = carrierserviceuspsFields
	// carrierserviceuspsDescID is the schema descriptor for id field.
	carrierserviceuspsDescID := carrierserviceuspsMixinFields1[0].Descriptor()
	// carrierserviceusps.DefaultID holds the default value on creation for the id field.
	carrierserviceusps.DefaultID = carrierserviceuspsDescID.Default.(func() pulid.ID)
	carrieruspsMixin := schema.CarrierUSPS{}.Mixin()
	carrierusps.Policy = privacy.NewPolicies(carrieruspsMixin[0], carrieruspsMixin[1], schema.CarrierUSPS{})
	carrierusps.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := carrierusps.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	carrieruspsMixinFields2 := carrieruspsMixin[2].Fields()
	_ = carrieruspsMixinFields2
	carrieruspsFields := schema.CarrierUSPS{}.Fields()
	_ = carrieruspsFields
	// carrieruspsDescIsTestAPI is the schema descriptor for is_test_api field.
	carrieruspsDescIsTestAPI := carrieruspsFields[0].Descriptor()
	// carrierusps.DefaultIsTestAPI holds the default value on creation for the is_test_api field.
	carrierusps.DefaultIsTestAPI = carrieruspsDescIsTestAPI.Default.(bool)
	// carrieruspsDescID is the schema descriptor for id field.
	carrieruspsDescID := carrieruspsMixinFields2[0].Descriptor()
	// carrierusps.DefaultID holds the default value on creation for the id field.
	carrierusps.DefaultID = carrieruspsDescID.Default.(func() pulid.ID)
	changehistoryMixin := schema.ChangeHistory{}.Mixin()
	changehistory.Policy = privacy.NewPolicies(changehistoryMixin[0], changehistoryMixin[1], schema.ChangeHistory{})
	changehistory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := changehistory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	changehistoryMixinFields2 := changehistoryMixin[2].Fields()
	_ = changehistoryMixinFields2
	changehistoryFields := schema.ChangeHistory{}.Fields()
	_ = changehistoryFields
	// changehistoryDescCreatedAt is the schema descriptor for created_at field.
	changehistoryDescCreatedAt := changehistoryFields[0].Descriptor()
	// changehistory.DefaultCreatedAt holds the default value on creation for the created_at field.
	changehistory.DefaultCreatedAt = changehistoryDescCreatedAt.Default.(func() time.Time)
	// changehistoryDescID is the schema descriptor for id field.
	changehistoryDescID := changehistoryMixinFields2[0].Descriptor()
	// changehistory.DefaultID holds the default value on creation for the id field.
	changehistory.DefaultID = changehistoryDescID.Default.(func() pulid.ID)
	colliMixin := schema.Colli{}.Mixin()
	colli.Policy = privacy.NewPolicies(colliMixin[0], colliMixin[1], schema.Colli{})
	colli.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := colli.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	colliHooks := schema.Colli{}.Hooks()

	colli.Hooks[1] = colliHooks[0]

	colli.Hooks[2] = colliHooks[1]

	colli.Hooks[3] = colliHooks[2]

	colli.Hooks[4] = colliHooks[3]

	colli.Hooks[5] = colliHooks[4]

	colli.Hooks[6] = colliHooks[5]
	colliMixinFields2 := colliMixin[2].Fields()
	_ = colliMixinFields2
	colliFields := schema.Colli{}.Fields()
	_ = colliFields
	// colliDescInternalBarcode is the schema descriptor for internal_barcode field.
	colliDescInternalBarcode := colliFields[0].Descriptor()
	// colli.InternalBarcodeValidator is a validator for the "internal_barcode" field. It is called by the builders before save.
	colli.InternalBarcodeValidator = func() func(int64) error {
		validators := colliDescInternalBarcode.Validators
		fns := [...]func(int64) error{
			validators[0].(func(int64) error),
			validators[1].(func(int64) error),
		}
		return func(internal_barcode int64) error {
			for _, fn := range fns {
				if err := fn(internal_barcode); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// colliDescCreatedAt is the schema descriptor for created_at field.
	colliDescCreatedAt := colliFields[3].Descriptor()
	// colli.DefaultCreatedAt holds the default value on creation for the created_at field.
	colli.DefaultCreatedAt = colliDescCreatedAt.Default.(func() time.Time)
	// colliDescID is the schema descriptor for id field.
	colliDescID := colliMixinFields2[0].Descriptor()
	// colli.DefaultID holds the default value on creation for the id field.
	colli.DefaultID = colliDescID.Default.(func() pulid.ID)
	connectoptioncarrierMixin := schema.ConnectOptionCarrier{}.Mixin()
	connectoptioncarrier.Policy = privacy.NewPolicies(connectoptioncarrierMixin[0], schema.ConnectOptionCarrier{})
	connectoptioncarrier.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := connectoptioncarrier.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	connectoptioncarrierMixinFields1 := connectoptioncarrierMixin[1].Fields()
	_ = connectoptioncarrierMixinFields1
	connectoptioncarrierFields := schema.ConnectOptionCarrier{}.Fields()
	_ = connectoptioncarrierFields
	// connectoptioncarrierDescID is the schema descriptor for id field.
	connectoptioncarrierDescID := connectoptioncarrierMixinFields1[0].Descriptor()
	// connectoptioncarrier.DefaultID holds the default value on creation for the id field.
	connectoptioncarrier.DefaultID = connectoptioncarrierDescID.Default.(func() pulid.ID)
	connectoptionplatformMixin := schema.ConnectOptionPlatform{}.Mixin()
	connectoptionplatform.Policy = privacy.NewPolicies(connectoptionplatformMixin[0], schema.ConnectOptionPlatform{})
	connectoptionplatform.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := connectoptionplatform.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	connectoptionplatformMixinFields1 := connectoptionplatformMixin[1].Fields()
	_ = connectoptionplatformMixinFields1
	connectoptionplatformFields := schema.ConnectOptionPlatform{}.Fields()
	_ = connectoptionplatformFields
	// connectoptionplatformDescID is the schema descriptor for id field.
	connectoptionplatformDescID := connectoptionplatformMixinFields1[0].Descriptor()
	// connectoptionplatform.DefaultID holds the default value on creation for the id field.
	connectoptionplatform.DefaultID = connectoptionplatformDescID.Default.(func() pulid.ID)
	connectionMixin := schema.Connection{}.Mixin()
	connection.Policy = privacy.NewPolicies(connectionMixin[0], connectionMixin[1], schema.Connection{})
	connection.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := connection.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	connectionHooks := schema.Connection{}.Hooks()

	connection.Hooks[1] = connectionHooks[0]
	connectionMixinFields2 := connectionMixin[2].Fields()
	_ = connectionMixinFields2
	connectionFields := schema.Connection{}.Fields()
	_ = connectionFields
	// connectionDescSyncOrders is the schema descriptor for sync_orders field.
	connectionDescSyncOrders := connectionFields[1].Descriptor()
	// connection.DefaultSyncOrders holds the default value on creation for the sync_orders field.
	connection.DefaultSyncOrders = connectionDescSyncOrders.Default.(bool)
	// connectionDescSyncProducts is the schema descriptor for sync_products field.
	connectionDescSyncProducts := connectionFields[2].Descriptor()
	// connection.DefaultSyncProducts holds the default value on creation for the sync_products field.
	connection.DefaultSyncProducts = connectionDescSyncProducts.Default.(bool)
	// connectionDescFulfillAutomatically is the schema descriptor for fulfill_automatically field.
	connectionDescFulfillAutomatically := connectionFields[3].Descriptor()
	// connection.DefaultFulfillAutomatically holds the default value on creation for the fulfill_automatically field.
	connection.DefaultFulfillAutomatically = connectionDescFulfillAutomatically.Default.(bool)
	// connectionDescDispatchAutomatically is the schema descriptor for dispatch_automatically field.
	connectionDescDispatchAutomatically := connectionFields[4].Descriptor()
	// connection.DefaultDispatchAutomatically holds the default value on creation for the dispatch_automatically field.
	connection.DefaultDispatchAutomatically = connectionDescDispatchAutomatically.Default.(bool)
	// connectionDescConvertCurrency is the schema descriptor for convert_currency field.
	connectionDescConvertCurrency := connectionFields[5].Descriptor()
	// connection.DefaultConvertCurrency holds the default value on creation for the convert_currency field.
	connection.DefaultConvertCurrency = connectionDescConvertCurrency.Default.(bool)
	// connectionDescAutoPrintParcelSlip is the schema descriptor for auto_print_parcel_slip field.
	connectionDescAutoPrintParcelSlip := connectionFields[6].Descriptor()
	// connection.DefaultAutoPrintParcelSlip holds the default value on creation for the auto_print_parcel_slip field.
	connection.DefaultAutoPrintParcelSlip = connectionDescAutoPrintParcelSlip.Default.(bool)
	// connectionDescID is the schema descriptor for id field.
	connectionDescID := connectionMixinFields2[0].Descriptor()
	// connection.DefaultID holds the default value on creation for the id field.
	connection.DefaultID = connectionDescID.Default.(func() pulid.ID)
	connectionbrandMixin := schema.ConnectionBrand{}.Mixin()
	connectionbrand.Policy = privacy.NewPolicies(connectionbrandMixin[0], schema.ConnectionBrand{})
	connectionbrand.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := connectionbrand.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	connectionbrandMixinFields1 := connectionbrandMixin[1].Fields()
	_ = connectionbrandMixinFields1
	connectionbrandFields := schema.ConnectionBrand{}.Fields()
	_ = connectionbrandFields
	// connectionbrandDescID is the schema descriptor for id field.
	connectionbrandDescID := connectionbrandMixinFields1[0].Descriptor()
	// connectionbrand.DefaultID holds the default value on creation for the id field.
	connectionbrand.DefaultID = connectionbrandDescID.Default.(func() pulid.ID)
	connectionlookupMixin := schema.ConnectionLookup{}.Mixin()
	connectionlookup.Policy = privacy.NewPolicies(connectionlookupMixin[0], connectionlookupMixin[1], schema.ConnectionLookup{})
	connectionlookup.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := connectionlookup.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	connectionlookupMixinFields2 := connectionlookupMixin[2].Fields()
	_ = connectionlookupMixinFields2
	connectionlookupFields := schema.ConnectionLookup{}.Fields()
	_ = connectionlookupFields
	// connectionlookupDescCreatedAt is the schema descriptor for created_at field.
	connectionlookupDescCreatedAt := connectionlookupFields[3].Descriptor()
	// connectionlookup.DefaultCreatedAt holds the default value on creation for the created_at field.
	connectionlookup.DefaultCreatedAt = connectionlookupDescCreatedAt.Default.(func() time.Time)
	// connectionlookupDescID is the schema descriptor for id field.
	connectionlookupDescID := connectionlookupMixinFields2[0].Descriptor()
	// connectionlookup.DefaultID holds the default value on creation for the id field.
	connectionlookup.DefaultID = connectionlookupDescID.Default.(func() pulid.ID)
	connectionshopifyMixin := schema.ConnectionShopify{}.Mixin()
	connectionshopify.Policy = privacy.NewPolicies(connectionshopifyMixin[0], connectionshopifyMixin[1], schema.ConnectionShopify{})
	connectionshopify.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := connectionshopify.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	connectionshopifyHooks := schema.ConnectionShopify{}.Hooks()

	connectionshopify.Hooks[1] = connectionshopifyHooks[0]

	connectionshopify.Hooks[2] = connectionshopifyHooks[1]

	connectionshopify.Hooks[3] = connectionshopifyHooks[2]
	connectionshopifyMixinFields2 := connectionshopifyMixin[2].Fields()
	_ = connectionshopifyMixinFields2
	connectionshopifyFields := schema.ConnectionShopify{}.Fields()
	_ = connectionshopifyFields
	// connectionshopifyDescRateIntegration is the schema descriptor for rate_integration field.
	connectionshopifyDescRateIntegration := connectionshopifyFields[0].Descriptor()
	// connectionshopify.DefaultRateIntegration holds the default value on creation for the rate_integration field.
	connectionshopify.DefaultRateIntegration = connectionshopifyDescRateIntegration.Default.(bool)
	// connectionshopifyDescSyncFrom is the schema descriptor for sync_from field.
	connectionshopifyDescSyncFrom := connectionshopifyFields[4].Descriptor()
	// connectionshopify.DefaultSyncFrom holds the default value on creation for the sync_from field.
	connectionshopify.DefaultSyncFrom = connectionshopifyDescSyncFrom.Default.(func() time.Time)
	// connectionshopifyDescFilterTags is the schema descriptor for filter_tags field.
	connectionshopifyDescFilterTags := connectionshopifyFields[5].Descriptor()
	// connectionshopify.DefaultFilterTags holds the default value on creation for the filter_tags field.
	connectionshopify.DefaultFilterTags = connectionshopifyDescFilterTags.Default.([]string)
	// connectionshopifyDescID is the schema descriptor for id field.
	connectionshopifyDescID := connectionshopifyMixinFields2[0].Descriptor()
	// connectionshopify.DefaultID holds the default value on creation for the id field.
	connectionshopify.DefaultID = connectionshopifyDescID.Default.(func() pulid.ID)
	consolidationMixin := schema.Consolidation{}.Mixin()
	consolidation.Policy = privacy.NewPolicies(consolidationMixin[0], consolidationMixin[1], schema.Consolidation{})
	consolidation.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := consolidation.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	consolidationMixinFields2 := consolidationMixin[2].Fields()
	_ = consolidationMixinFields2
	consolidationFields := schema.Consolidation{}.Fields()
	_ = consolidationFields
	// consolidationDescCreatedAt is the schema descriptor for created_at field.
	consolidationDescCreatedAt := consolidationFields[3].Descriptor()
	// consolidation.DefaultCreatedAt holds the default value on creation for the created_at field.
	consolidation.DefaultCreatedAt = consolidationDescCreatedAt.Default.(func() time.Time)
	// consolidationDescID is the schema descriptor for id field.
	consolidationDescID := consolidationMixinFields2[0].Descriptor()
	// consolidation.DefaultID holds the default value on creation for the id field.
	consolidation.DefaultID = consolidationDescID.Default.(func() pulid.ID)
	contactMixin := schema.Contact{}.Mixin()
	contact.Policy = privacy.NewPolicies(contactMixin[0], contactMixin[1], schema.Contact{})
	contact.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := contact.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	contactHooks := schema.Contact{}.Hooks()

	contact.Hooks[1] = contactHooks[0]
	contactMixinFields2 := contactMixin[2].Fields()
	_ = contactMixinFields2
	contactFields := schema.Contact{}.Fields()
	_ = contactFields
	// contactDescID is the schema descriptor for id field.
	contactDescID := contactMixinFields2[0].Descriptor()
	// contact.DefaultID holds the default value on creation for the id field.
	contact.DefaultID = contactDescID.Default.(func() pulid.ID)
	countryMixin := schema.Country{}.Mixin()
	country.Policy = privacy.NewPolicies(countryMixin[0], schema.Country{})
	country.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := country.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	countryMixinFields1 := countryMixin[1].Fields()
	_ = countryMixinFields1
	countryFields := schema.Country{}.Fields()
	_ = countryFields
	// countryDescAlpha2 is the schema descriptor for alpha_2 field.
	countryDescAlpha2 := countryFields[1].Descriptor()
	// country.Alpha2Validator is a validator for the "alpha_2" field. It is called by the builders before save.
	country.Alpha2Validator = countryDescAlpha2.Validators[0].(func(string) error)
	// countryDescAlpha3 is the schema descriptor for alpha_3 field.
	countryDescAlpha3 := countryFields[2].Descriptor()
	// country.Alpha3Validator is a validator for the "alpha_3" field. It is called by the builders before save.
	country.Alpha3Validator = countryDescAlpha3.Validators[0].(func(string) error)
	// countryDescID is the schema descriptor for id field.
	countryDescID := countryMixinFields1[0].Descriptor()
	// country.DefaultID holds the default value on creation for the id field.
	country.DefaultID = countryDescID.Default.(func() pulid.ID)
	countryharmonizedcodeMixin := schema.CountryHarmonizedCode{}.Mixin()
	countryharmonizedcode.Policy = privacy.NewPolicies(countryharmonizedcodeMixin[0], countryharmonizedcodeMixin[1], schema.CountryHarmonizedCode{})
	countryharmonizedcode.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := countryharmonizedcode.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	countryharmonizedcodeMixinFields2 := countryharmonizedcodeMixin[2].Fields()
	_ = countryharmonizedcodeMixinFields2
	countryharmonizedcodeFields := schema.CountryHarmonizedCode{}.Fields()
	_ = countryharmonizedcodeFields
	// countryharmonizedcodeDescID is the schema descriptor for id field.
	countryharmonizedcodeDescID := countryharmonizedcodeMixinFields2[0].Descriptor()
	// countryharmonizedcode.DefaultID holds the default value on creation for the id field.
	countryharmonizedcode.DefaultID = countryharmonizedcodeDescID.Default.(func() pulid.ID)
	currencyMixin := schema.Currency{}.Mixin()
	currency.Policy = privacy.NewPolicies(currencyMixin[0], schema.Currency{})
	currency.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := currency.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	currencyMixinFields1 := currencyMixin[1].Fields()
	_ = currencyMixinFields1
	currencyFields := schema.Currency{}.Fields()
	_ = currencyFields
	// currencyDescID is the schema descriptor for id field.
	currencyDescID := currencyMixinFields1[0].Descriptor()
	// currency.DefaultID holds the default value on creation for the id field.
	currency.DefaultID = currencyDescID.Default.(func() pulid.ID)
	deliveryoptionMixin := schema.DeliveryOption{}.Mixin()
	deliveryoption.Policy = privacy.NewPolicies(deliveryoptionMixin[0], deliveryoptionMixin[1], schema.DeliveryOption{})
	deliveryoption.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoption.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptionHooks := schema.DeliveryOption{}.Hooks()

	deliveryoption.Hooks[1] = deliveryoptionHooks[0]
	deliveryoptionMixinInters3 := deliveryoptionMixin[3].Interceptors()
	deliveryoption.Interceptors[0] = deliveryoptionMixinInters3[0]
	deliveryoptionMixinFields2 := deliveryoptionMixin[2].Fields()
	_ = deliveryoptionMixinFields2
	deliveryoptionFields := schema.DeliveryOption{}.Fields()
	_ = deliveryoptionFields
	// deliveryoptionDescClickOptionDisplayCount is the schema descriptor for click_option_display_count field.
	deliveryoptionDescClickOptionDisplayCount := deliveryoptionFields[2].Descriptor()
	// deliveryoption.DefaultClickOptionDisplayCount holds the default value on creation for the click_option_display_count field.
	deliveryoption.DefaultClickOptionDisplayCount = deliveryoptionDescClickOptionDisplayCount.Default.(int)
	// deliveryoption.ClickOptionDisplayCountValidator is a validator for the "click_option_display_count" field. It is called by the builders before save.
	deliveryoption.ClickOptionDisplayCountValidator = func() func(int) error {
		validators := deliveryoptionDescClickOptionDisplayCount.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(click_option_display_count int) error {
			for _, fn := range fns {
				if err := fn(click_option_display_count); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// deliveryoptionDescClickCollect is the schema descriptor for click_collect field.
	deliveryoptionDescClickCollect := deliveryoptionFields[4].Descriptor()
	// deliveryoption.DefaultClickCollect holds the default value on creation for the click_collect field.
	deliveryoption.DefaultClickCollect = deliveryoptionDescClickCollect.Default.(bool)
	// deliveryoptionDescOverrideSenderAddress is the schema descriptor for override_sender_address field.
	deliveryoptionDescOverrideSenderAddress := deliveryoptionFields[5].Descriptor()
	// deliveryoption.DefaultOverrideSenderAddress holds the default value on creation for the override_sender_address field.
	deliveryoption.DefaultOverrideSenderAddress = deliveryoptionDescOverrideSenderAddress.Default.(bool)
	// deliveryoptionDescOverrideReturnAddress is the schema descriptor for override_return_address field.
	deliveryoptionDescOverrideReturnAddress := deliveryoptionFields[6].Descriptor()
	// deliveryoption.DefaultOverrideReturnAddress holds the default value on creation for the override_return_address field.
	deliveryoption.DefaultOverrideReturnAddress = deliveryoptionDescOverrideReturnAddress.Default.(bool)
	// deliveryoptionDescHideDeliveryOption is the schema descriptor for hide_delivery_option field.
	deliveryoptionDescHideDeliveryOption := deliveryoptionFields[7].Descriptor()
	// deliveryoption.DefaultHideDeliveryOption holds the default value on creation for the hide_delivery_option field.
	deliveryoption.DefaultHideDeliveryOption = deliveryoptionDescHideDeliveryOption.Default.(bool)
	// deliveryoptionDescWebshipperIntegration is the schema descriptor for webshipper_integration field.
	deliveryoptionDescWebshipperIntegration := deliveryoptionFields[10].Descriptor()
	// deliveryoption.DefaultWebshipperIntegration holds the default value on creation for the webshipper_integration field.
	deliveryoption.DefaultWebshipperIntegration = deliveryoptionDescWebshipperIntegration.Default.(bool)
	// deliveryoptionDescWebshipperID is the schema descriptor for webshipper_id field.
	deliveryoptionDescWebshipperID := deliveryoptionFields[11].Descriptor()
	// deliveryoption.DefaultWebshipperID holds the default value on creation for the webshipper_id field.
	deliveryoption.DefaultWebshipperID = deliveryoptionDescWebshipperID.Default.(int)
	// deliveryoption.WebshipperIDValidator is a validator for the "webshipper_id" field. It is called by the builders before save.
	deliveryoption.WebshipperIDValidator = deliveryoptionDescWebshipperID.Validators[0].(func(int) error)
	// deliveryoptionDescShipmondoIntegration is the schema descriptor for shipmondo_integration field.
	deliveryoptionDescShipmondoIntegration := deliveryoptionFields[12].Descriptor()
	// deliveryoption.DefaultShipmondoIntegration holds the default value on creation for the shipmondo_integration field.
	deliveryoption.DefaultShipmondoIntegration = deliveryoptionDescShipmondoIntegration.Default.(bool)
	// deliveryoptionDescCustomsEnabled is the schema descriptor for customs_enabled field.
	deliveryoptionDescCustomsEnabled := deliveryoptionFields[14].Descriptor()
	// deliveryoption.DefaultCustomsEnabled holds the default value on creation for the customs_enabled field.
	deliveryoption.DefaultCustomsEnabled = deliveryoptionDescCustomsEnabled.Default.(bool)
	// deliveryoptionDescHideIfCompanyEmpty is the schema descriptor for hide_if_company_empty field.
	deliveryoptionDescHideIfCompanyEmpty := deliveryoptionFields[16].Descriptor()
	// deliveryoption.DefaultHideIfCompanyEmpty holds the default value on creation for the hide_if_company_empty field.
	deliveryoption.DefaultHideIfCompanyEmpty = deliveryoptionDescHideIfCompanyEmpty.Default.(bool)
	// deliveryoptionDescID is the schema descriptor for id field.
	deliveryoptionDescID := deliveryoptionMixinFields2[0].Descriptor()
	// deliveryoption.DefaultID holds the default value on creation for the id field.
	deliveryoption.DefaultID = deliveryoptionDescID.Default.(func() pulid.ID)
	deliveryoptionbringMixin := schema.DeliveryOptionBring{}.Mixin()
	deliveryoptionbring.Policy = privacy.NewPolicies(deliveryoptionbringMixin[0], deliveryoptionbringMixin[1], schema.DeliveryOptionBring{})
	deliveryoptionbring.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoptionbring.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptionbringMixinFields2 := deliveryoptionbringMixin[2].Fields()
	_ = deliveryoptionbringMixinFields2
	deliveryoptionbringFields := schema.DeliveryOptionBring{}.Fields()
	_ = deliveryoptionbringFields
	// deliveryoptionbringDescElectronicCustoms is the schema descriptor for electronic_customs field.
	deliveryoptionbringDescElectronicCustoms := deliveryoptionbringFields[0].Descriptor()
	// deliveryoptionbring.DefaultElectronicCustoms holds the default value on creation for the electronic_customs field.
	deliveryoptionbring.DefaultElectronicCustoms = deliveryoptionbringDescElectronicCustoms.Default.(bool)
	// deliveryoptionbringDescID is the schema descriptor for id field.
	deliveryoptionbringDescID := deliveryoptionbringMixinFields2[0].Descriptor()
	// deliveryoptionbring.DefaultID holds the default value on creation for the id field.
	deliveryoptionbring.DefaultID = deliveryoptionbringDescID.Default.(func() pulid.ID)
	deliveryoptiondaoMixin := schema.DeliveryOptionDAO{}.Mixin()
	deliveryoptiondao.Policy = privacy.NewPolicies(deliveryoptiondaoMixin[0], deliveryoptiondaoMixin[1], schema.DeliveryOptionDAO{})
	deliveryoptiondao.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoptiondao.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptiondaoMixinFields2 := deliveryoptiondaoMixin[2].Fields()
	_ = deliveryoptiondaoMixinFields2
	deliveryoptiondaoFields := schema.DeliveryOptionDAO{}.Fields()
	_ = deliveryoptiondaoFields
	// deliveryoptiondaoDescID is the schema descriptor for id field.
	deliveryoptiondaoDescID := deliveryoptiondaoMixinFields2[0].Descriptor()
	// deliveryoptiondao.DefaultID holds the default value on creation for the id field.
	deliveryoptiondao.DefaultID = deliveryoptiondaoDescID.Default.(func() pulid.ID)
	deliveryoptiondfMixin := schema.DeliveryOptionDF{}.Mixin()
	deliveryoptiondf.Policy = privacy.NewPolicies(deliveryoptiondfMixin[0], deliveryoptiondfMixin[1], schema.DeliveryOptionDF{})
	deliveryoptiondf.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoptiondf.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptiondfMixinFields2 := deliveryoptiondfMixin[2].Fields()
	_ = deliveryoptiondfMixinFields2
	deliveryoptiondfFields := schema.DeliveryOptionDF{}.Fields()
	_ = deliveryoptiondfFields
	// deliveryoptiondfDescID is the schema descriptor for id field.
	deliveryoptiondfDescID := deliveryoptiondfMixinFields2[0].Descriptor()
	// deliveryoptiondf.DefaultID holds the default value on creation for the id field.
	deliveryoptiondf.DefaultID = deliveryoptiondfDescID.Default.(func() pulid.ID)
	deliveryoptiondsvMixin := schema.DeliveryOptionDSV{}.Mixin()
	deliveryoptiondsv.Policy = privacy.NewPolicies(deliveryoptiondsvMixin[0], deliveryoptiondsvMixin[1], schema.DeliveryOptionDSV{})
	deliveryoptiondsv.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoptiondsv.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptiondsvMixinFields2 := deliveryoptiondsvMixin[2].Fields()
	_ = deliveryoptiondsvMixinFields2
	deliveryoptiondsvFields := schema.DeliveryOptionDSV{}.Fields()
	_ = deliveryoptiondsvFields
	// deliveryoptiondsvDescID is the schema descriptor for id field.
	deliveryoptiondsvDescID := deliveryoptiondsvMixinFields2[0].Descriptor()
	// deliveryoptiondsv.DefaultID holds the default value on creation for the id field.
	deliveryoptiondsv.DefaultID = deliveryoptiondsvDescID.Default.(func() pulid.ID)
	deliveryoptioneasypostMixin := schema.DeliveryOptionEasyPost{}.Mixin()
	deliveryoptioneasypost.Policy = privacy.NewPolicies(deliveryoptioneasypostMixin[0], deliveryoptioneasypostMixin[1], schema.DeliveryOptionEasyPost{})
	deliveryoptioneasypost.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoptioneasypost.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptioneasypostMixinFields2 := deliveryoptioneasypostMixin[2].Fields()
	_ = deliveryoptioneasypostMixinFields2
	deliveryoptioneasypostFields := schema.DeliveryOptionEasyPost{}.Fields()
	_ = deliveryoptioneasypostFields
	// deliveryoptioneasypostDescID is the schema descriptor for id field.
	deliveryoptioneasypostDescID := deliveryoptioneasypostMixinFields2[0].Descriptor()
	// deliveryoptioneasypost.DefaultID holds the default value on creation for the id field.
	deliveryoptioneasypost.DefaultID = deliveryoptioneasypostDescID.Default.(func() pulid.ID)
	deliveryoptionglsMixin := schema.DeliveryOptionGLS{}.Mixin()
	deliveryoptiongls.Policy = privacy.NewPolicies(deliveryoptionglsMixin[0], deliveryoptionglsMixin[1], schema.DeliveryOptionGLS{})
	deliveryoptiongls.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoptiongls.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptionglsHooks := schema.DeliveryOptionGLS{}.Hooks()

	deliveryoptiongls.Hooks[1] = deliveryoptionglsHooks[0]
	deliveryoptionglsMixinFields2 := deliveryoptionglsMixin[2].Fields()
	_ = deliveryoptionglsMixinFields2
	deliveryoptionglsFields := schema.DeliveryOptionGLS{}.Fields()
	_ = deliveryoptionglsFields
	// deliveryoptionglsDescID is the schema descriptor for id field.
	deliveryoptionglsDescID := deliveryoptionglsMixinFields2[0].Descriptor()
	// deliveryoptiongls.DefaultID holds the default value on creation for the id field.
	deliveryoptiongls.DefaultID = deliveryoptionglsDescID.Default.(func() pulid.ID)
	deliveryoptionpostnordMixin := schema.DeliveryOptionPostNord{}.Mixin()
	deliveryoptionpostnord.Policy = privacy.NewPolicies(deliveryoptionpostnordMixin[0], deliveryoptionpostnordMixin[1], schema.DeliveryOptionPostNord{})
	deliveryoptionpostnord.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoptionpostnord.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptionpostnordMixinFields2 := deliveryoptionpostnordMixin[2].Fields()
	_ = deliveryoptionpostnordMixinFields2
	deliveryoptionpostnordFields := schema.DeliveryOptionPostNord{}.Fields()
	_ = deliveryoptionpostnordFields
	// deliveryoptionpostnordDescFormatZpl is the schema descriptor for format_zpl field.
	deliveryoptionpostnordDescFormatZpl := deliveryoptionpostnordFields[0].Descriptor()
	// deliveryoptionpostnord.DefaultFormatZpl holds the default value on creation for the format_zpl field.
	deliveryoptionpostnord.DefaultFormatZpl = deliveryoptionpostnordDescFormatZpl.Default.(bool)
	// deliveryoptionpostnordDescID is the schema descriptor for id field.
	deliveryoptionpostnordDescID := deliveryoptionpostnordMixinFields2[0].Descriptor()
	// deliveryoptionpostnord.DefaultID holds the default value on creation for the id field.
	deliveryoptionpostnord.DefaultID = deliveryoptionpostnordDescID.Default.(func() pulid.ID)
	deliveryoptionuspsMixin := schema.DeliveryOptionUSPS{}.Mixin()
	deliveryoptionusps.Policy = privacy.NewPolicies(deliveryoptionuspsMixin[0], deliveryoptionuspsMixin[1], schema.DeliveryOptionUSPS{})
	deliveryoptionusps.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryoptionusps.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryoptionuspsMixinFields2 := deliveryoptionuspsMixin[2].Fields()
	_ = deliveryoptionuspsMixinFields2
	deliveryoptionuspsFields := schema.DeliveryOptionUSPS{}.Fields()
	_ = deliveryoptionuspsFields
	// deliveryoptionuspsDescFormatZpl is the schema descriptor for format_zpl field.
	deliveryoptionuspsDescFormatZpl := deliveryoptionuspsFields[0].Descriptor()
	// deliveryoptionusps.DefaultFormatZpl holds the default value on creation for the format_zpl field.
	deliveryoptionusps.DefaultFormatZpl = deliveryoptionuspsDescFormatZpl.Default.(bool)
	// deliveryoptionuspsDescID is the schema descriptor for id field.
	deliveryoptionuspsDescID := deliveryoptionuspsMixinFields2[0].Descriptor()
	// deliveryoptionusps.DefaultID holds the default value on creation for the id field.
	deliveryoptionusps.DefaultID = deliveryoptionuspsDescID.Default.(func() pulid.ID)
	deliveryruleMixin := schema.DeliveryRule{}.Mixin()
	deliveryrule.Policy = privacy.NewPolicies(deliveryruleMixin[0], deliveryruleMixin[1], schema.DeliveryRule{})
	deliveryrule.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryrule.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryruleMixinFields2 := deliveryruleMixin[2].Fields()
	_ = deliveryruleMixinFields2
	deliveryruleFields := schema.DeliveryRule{}.Fields()
	_ = deliveryruleFields
	// deliveryruleDescPrice is the schema descriptor for price field.
	deliveryruleDescPrice := deliveryruleFields[1].Descriptor()
	// deliveryrule.DefaultPrice holds the default value on creation for the price field.
	deliveryrule.DefaultPrice = deliveryruleDescPrice.Default.(float64)
	// deliveryruleDescID is the schema descriptor for id field.
	deliveryruleDescID := deliveryruleMixinFields2[0].Descriptor()
	// deliveryrule.DefaultID holds the default value on creation for the id field.
	deliveryrule.DefaultID = deliveryruleDescID.Default.(func() pulid.ID)
	deliveryruleconstraintMixin := schema.DeliveryRuleConstraint{}.Mixin()
	deliveryruleconstraint.Policy = privacy.NewPolicies(deliveryruleconstraintMixin[0], deliveryruleconstraintMixin[1], schema.DeliveryRuleConstraint{})
	deliveryruleconstraint.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryruleconstraint.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryruleconstraintHooks := schema.DeliveryRuleConstraint{}.Hooks()

	deliveryruleconstraint.Hooks[1] = deliveryruleconstraintHooks[0]

	deliveryruleconstraint.Hooks[2] = deliveryruleconstraintHooks[1]

	deliveryruleconstraint.Hooks[3] = deliveryruleconstraintHooks[2]
	deliveryruleconstraintMixinFields2 := deliveryruleconstraintMixin[2].Fields()
	_ = deliveryruleconstraintMixinFields2
	deliveryruleconstraintFields := schema.DeliveryRuleConstraint{}.Fields()
	_ = deliveryruleconstraintFields
	// deliveryruleconstraintDescID is the schema descriptor for id field.
	deliveryruleconstraintDescID := deliveryruleconstraintMixinFields2[0].Descriptor()
	// deliveryruleconstraint.DefaultID holds the default value on creation for the id field.
	deliveryruleconstraint.DefaultID = deliveryruleconstraintDescID.Default.(func() pulid.ID)
	deliveryruleconstraintgroupMixin := schema.DeliveryRuleConstraintGroup{}.Mixin()
	deliveryruleconstraintgroup.Policy = privacy.NewPolicies(deliveryruleconstraintgroupMixin[0], deliveryruleconstraintgroupMixin[1], schema.DeliveryRuleConstraintGroup{})
	deliveryruleconstraintgroup.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := deliveryruleconstraintgroup.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	deliveryruleconstraintgroupMixinFields2 := deliveryruleconstraintgroupMixin[2].Fields()
	_ = deliveryruleconstraintgroupMixinFields2
	deliveryruleconstraintgroupFields := schema.DeliveryRuleConstraintGroup{}.Fields()
	_ = deliveryruleconstraintgroupFields
	// deliveryruleconstraintgroupDescID is the schema descriptor for id field.
	deliveryruleconstraintgroupDescID := deliveryruleconstraintgroupMixinFields2[0].Descriptor()
	// deliveryruleconstraintgroup.DefaultID holds the default value on creation for the id field.
	deliveryruleconstraintgroup.DefaultID = deliveryruleconstraintgroupDescID.Default.(func() pulid.ID)
	documentMixin := schema.Document{}.Mixin()
	document.Policy = privacy.NewPolicies(documentMixin[0], documentMixin[1], schema.Document{})
	document.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := document.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	documentMixinFields2 := documentMixin[2].Fields()
	_ = documentMixinFields2
	documentFields := schema.Document{}.Fields()
	_ = documentFields
	// documentDescStartAt is the schema descriptor for start_at field.
	documentDescStartAt := documentFields[7].Descriptor()
	// document.DefaultStartAt holds the default value on creation for the start_at field.
	document.DefaultStartAt = documentDescStartAt.Default.(func() time.Time)
	// documentDescEndAt is the schema descriptor for end_at field.
	documentDescEndAt := documentFields[8].Descriptor()
	// document.DefaultEndAt holds the default value on creation for the end_at field.
	document.DefaultEndAt = documentDescEndAt.Default.(func() time.Time)
	// documentDescCreatedAt is the schema descriptor for created_at field.
	documentDescCreatedAt := documentFields[9].Descriptor()
	// document.DefaultCreatedAt holds the default value on creation for the created_at field.
	document.DefaultCreatedAt = documentDescCreatedAt.Default.(func() time.Time)
	// documentDescID is the schema descriptor for id field.
	documentDescID := documentMixinFields2[0].Descriptor()
	// document.DefaultID holds the default value on creation for the id field.
	document.DefaultID = documentDescID.Default.(func() pulid.ID)
	documentfileMixin := schema.DocumentFile{}.Mixin()
	documentfile.Policy = privacy.NewPolicies(documentfileMixin[0], documentfileMixin[1], schema.DocumentFile{})
	documentfile.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := documentfile.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	documentfileMixinFields2 := documentfileMixin[2].Fields()
	_ = documentfileMixinFields2
	documentfileFields := schema.DocumentFile{}.Fields()
	_ = documentfileFields
	// documentfileDescCreatedAt is the schema descriptor for created_at field.
	documentfileDescCreatedAt := documentfileFields[0].Descriptor()
	// documentfile.DefaultCreatedAt holds the default value on creation for the created_at field.
	documentfile.DefaultCreatedAt = documentfileDescCreatedAt.Default.(func() time.Time)
	// documentfileDescStoragePathZpl is the schema descriptor for storage_path_zpl field.
	documentfileDescStoragePathZpl := documentfileFields[3].Descriptor()
	// documentfile.DefaultStoragePathZpl holds the default value on creation for the storage_path_zpl field.
	documentfile.DefaultStoragePathZpl = documentfileDescStoragePathZpl.Default.(string)
	// documentfileDescID is the schema descriptor for id field.
	documentfileDescID := documentfileMixinFields2[0].Descriptor()
	// documentfile.DefaultID holds the default value on creation for the id field.
	documentfile.DefaultID = documentfileDescID.Default.(func() pulid.ID)
	emailtemplateMixin := schema.EmailTemplate{}.Mixin()
	emailtemplate.Policy = privacy.NewPolicies(emailtemplateMixin[0], emailtemplateMixin[1], schema.EmailTemplate{})
	emailtemplate.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := emailtemplate.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	emailtemplateHooks := schema.EmailTemplate{}.Hooks()

	emailtemplate.Hooks[1] = emailtemplateHooks[0]
	emailtemplateMixinFields2 := emailtemplateMixin[2].Fields()
	_ = emailtemplateMixinFields2
	emailtemplateFields := schema.EmailTemplate{}.Fields()
	_ = emailtemplateFields
	// emailtemplateDescName is the schema descriptor for name field.
	emailtemplateDescName := emailtemplateFields[0].Descriptor()
	// emailtemplate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	emailtemplate.NameValidator = emailtemplateDescName.Validators[0].(func(string) error)
	// emailtemplateDescSubject is the schema descriptor for subject field.
	emailtemplateDescSubject := emailtemplateFields[1].Descriptor()
	// emailtemplate.DefaultSubject holds the default value on creation for the subject field.
	emailtemplate.DefaultSubject = emailtemplateDescSubject.Default.(string)
	// emailtemplate.SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	emailtemplate.SubjectValidator = emailtemplateDescSubject.Validators[0].(func(string) error)
	// emailtemplateDescHTMLTemplate is the schema descriptor for html_template field.
	emailtemplateDescHTMLTemplate := emailtemplateFields[2].Descriptor()
	// emailtemplate.DefaultHTMLTemplate holds the default value on creation for the html_template field.
	emailtemplate.DefaultHTMLTemplate = emailtemplateDescHTMLTemplate.Default.(string)
	// emailtemplateDescCreatedAt is the schema descriptor for created_at field.
	emailtemplateDescCreatedAt := emailtemplateFields[4].Descriptor()
	// emailtemplate.DefaultCreatedAt holds the default value on creation for the created_at field.
	emailtemplate.DefaultCreatedAt = emailtemplateDescCreatedAt.Default.(func() time.Time)
	// emailtemplateDescUpdatedAt is the schema descriptor for updated_at field.
	emailtemplateDescUpdatedAt := emailtemplateFields[5].Descriptor()
	// emailtemplate.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	emailtemplate.DefaultUpdatedAt = emailtemplateDescUpdatedAt.Default.(func() time.Time)
	// emailtemplate.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	emailtemplate.UpdateDefaultUpdatedAt = emailtemplateDescUpdatedAt.UpdateDefault.(func() time.Time)
	// emailtemplateDescID is the schema descriptor for id field.
	emailtemplateDescID := emailtemplateMixinFields2[0].Descriptor()
	// emailtemplate.DefaultID holds the default value on creation for the id field.
	emailtemplate.DefaultID = emailtemplateDescID.Default.(func() pulid.ID)
	hypothesistestMixin := schema.HypothesisTest{}.Mixin()
	hypothesistest.Policy = privacy.NewPolicies(hypothesistestMixin[0], hypothesistestMixin[1], schema.HypothesisTest{})
	hypothesistest.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := hypothesistest.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	hypothesistestMixinFields2 := hypothesistestMixin[2].Fields()
	_ = hypothesistestMixinFields2
	hypothesistestFields := schema.HypothesisTest{}.Fields()
	_ = hypothesistestFields
	// hypothesistestDescActive is the schema descriptor for active field.
	hypothesistestDescActive := hypothesistestFields[1].Descriptor()
	// hypothesistest.DefaultActive holds the default value on creation for the active field.
	hypothesistest.DefaultActive = hypothesistestDescActive.Default.(bool)
	// hypothesistestDescID is the schema descriptor for id field.
	hypothesistestDescID := hypothesistestMixinFields2[0].Descriptor()
	// hypothesistest.DefaultID holds the default value on creation for the id field.
	hypothesistest.DefaultID = hypothesistestDescID.Default.(func() pulid.ID)
	hypothesistestdeliveryoptionMixin := schema.HypothesisTestDeliveryOption{}.Mixin()
	hypothesistestdeliveryoption.Policy = privacy.NewPolicies(hypothesistestdeliveryoptionMixin[0], hypothesistestdeliveryoptionMixin[1], schema.HypothesisTestDeliveryOption{})
	hypothesistestdeliveryoption.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := hypothesistestdeliveryoption.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	hypothesistestdeliveryoptionMixinFields2 := hypothesistestdeliveryoptionMixin[2].Fields()
	_ = hypothesistestdeliveryoptionMixinFields2
	hypothesistestdeliveryoptionFields := schema.HypothesisTestDeliveryOption{}.Fields()
	_ = hypothesistestdeliveryoptionFields
	// hypothesistestdeliveryoptionDescRandomizeWithinGroupSort is the schema descriptor for randomize_within_group_sort field.
	hypothesistestdeliveryoptionDescRandomizeWithinGroupSort := hypothesistestdeliveryoptionFields[0].Descriptor()
	// hypothesistestdeliveryoption.DefaultRandomizeWithinGroupSort holds the default value on creation for the randomize_within_group_sort field.
	hypothesistestdeliveryoption.DefaultRandomizeWithinGroupSort = hypothesistestdeliveryoptionDescRandomizeWithinGroupSort.Default.(bool)
	// hypothesistestdeliveryoptionDescByIntervalRotation is the schema descriptor for by_interval_rotation field.
	hypothesistestdeliveryoptionDescByIntervalRotation := hypothesistestdeliveryoptionFields[1].Descriptor()
	// hypothesistestdeliveryoption.DefaultByIntervalRotation holds the default value on creation for the by_interval_rotation field.
	hypothesistestdeliveryoption.DefaultByIntervalRotation = hypothesistestdeliveryoptionDescByIntervalRotation.Default.(bool)
	// hypothesistestdeliveryoptionDescRotationIntervalHours is the schema descriptor for rotation_interval_hours field.
	hypothesistestdeliveryoptionDescRotationIntervalHours := hypothesistestdeliveryoptionFields[2].Descriptor()
	// hypothesistestdeliveryoption.DefaultRotationIntervalHours holds the default value on creation for the rotation_interval_hours field.
	hypothesistestdeliveryoption.DefaultRotationIntervalHours = hypothesistestdeliveryoptionDescRotationIntervalHours.Default.(int)
	// hypothesistestdeliveryoptionDescByOrder is the schema descriptor for by_order field.
	hypothesistestdeliveryoptionDescByOrder := hypothesistestdeliveryoptionFields[3].Descriptor()
	// hypothesistestdeliveryoption.DefaultByOrder holds the default value on creation for the by_order field.
	hypothesistestdeliveryoption.DefaultByOrder = hypothesistestdeliveryoptionDescByOrder.Default.(bool)
	// hypothesistestdeliveryoptionDescID is the schema descriptor for id field.
	hypothesistestdeliveryoptionDescID := hypothesistestdeliveryoptionMixinFields2[0].Descriptor()
	// hypothesistestdeliveryoption.DefaultID holds the default value on creation for the id field.
	hypothesistestdeliveryoption.DefaultID = hypothesistestdeliveryoptionDescID.Default.(func() pulid.ID)
	hypothesistestdeliveryoptionlookupMixin := schema.HypothesisTestDeliveryOptionLookup{}.Mixin()
	hypothesistestdeliveryoptionlookup.Policy = privacy.NewPolicies(hypothesistestdeliveryoptionlookupMixin[0], hypothesistestdeliveryoptionlookupMixin[1], schema.HypothesisTestDeliveryOptionLookup{})
	hypothesistestdeliveryoptionlookup.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := hypothesistestdeliveryoptionlookup.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	hypothesistestdeliveryoptionlookupMixinFields2 := hypothesistestdeliveryoptionlookupMixin[2].Fields()
	_ = hypothesistestdeliveryoptionlookupMixinFields2
	hypothesistestdeliveryoptionlookupFields := schema.HypothesisTestDeliveryOptionLookup{}.Fields()
	_ = hypothesistestdeliveryoptionlookupFields
	// hypothesistestdeliveryoptionlookupDescID is the schema descriptor for id field.
	hypothesistestdeliveryoptionlookupDescID := hypothesistestdeliveryoptionlookupMixinFields2[0].Descriptor()
	// hypothesistestdeliveryoptionlookup.DefaultID holds the default value on creation for the id field.
	hypothesistestdeliveryoptionlookup.DefaultID = hypothesistestdeliveryoptionlookupDescID.Default.(func() pulid.ID)
	hypothesistestdeliveryoptionrequestMixin := schema.HypothesisTestDeliveryOptionRequest{}.Mixin()
	hypothesistestdeliveryoptionrequest.Policy = privacy.NewPolicies(hypothesistestdeliveryoptionrequestMixin[0], hypothesistestdeliveryoptionrequestMixin[1], schema.HypothesisTestDeliveryOptionRequest{})
	hypothesistestdeliveryoptionrequest.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := hypothesistestdeliveryoptionrequest.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	hypothesistestdeliveryoptionrequestMixinFields2 := hypothesistestdeliveryoptionrequestMixin[2].Fields()
	_ = hypothesistestdeliveryoptionrequestMixinFields2
	hypothesistestdeliveryoptionrequestFields := schema.HypothesisTestDeliveryOptionRequest{}.Fields()
	_ = hypothesistestdeliveryoptionrequestFields
	// hypothesistestdeliveryoptionrequestDescCreatedAt is the schema descriptor for created_at field.
	hypothesistestdeliveryoptionrequestDescCreatedAt := hypothesistestdeliveryoptionrequestFields[4].Descriptor()
	// hypothesistestdeliveryoptionrequest.DefaultCreatedAt holds the default value on creation for the created_at field.
	hypothesistestdeliveryoptionrequest.DefaultCreatedAt = hypothesistestdeliveryoptionrequestDescCreatedAt.Default.(func() time.Time)
	// hypothesistestdeliveryoptionrequestDescLastRequestedAt is the schema descriptor for last_requested_at field.
	hypothesistestdeliveryoptionrequestDescLastRequestedAt := hypothesistestdeliveryoptionrequestFields[5].Descriptor()
	// hypothesistestdeliveryoptionrequest.DefaultLastRequestedAt holds the default value on creation for the last_requested_at field.
	hypothesistestdeliveryoptionrequest.DefaultLastRequestedAt = hypothesistestdeliveryoptionrequestDescLastRequestedAt.Default.(func() time.Time)
	// hypothesistestdeliveryoptionrequest.UpdateDefaultLastRequestedAt holds the default value on update for the last_requested_at field.
	hypothesistestdeliveryoptionrequest.UpdateDefaultLastRequestedAt = hypothesistestdeliveryoptionrequestDescLastRequestedAt.UpdateDefault.(func() time.Time)
	// hypothesistestdeliveryoptionrequestDescID is the schema descriptor for id field.
	hypothesistestdeliveryoptionrequestDescID := hypothesistestdeliveryoptionrequestMixinFields2[0].Descriptor()
	// hypothesistestdeliveryoptionrequest.DefaultID holds the default value on creation for the id field.
	hypothesistestdeliveryoptionrequest.DefaultID = hypothesistestdeliveryoptionrequestDescID.Default.(func() pulid.ID)
	inventoryitemMixin := schema.InventoryItem{}.Mixin()
	inventoryitem.Policy = privacy.NewPolicies(inventoryitemMixin[0], inventoryitemMixin[1], schema.InventoryItem{})
	inventoryitem.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := inventoryitem.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	inventoryitemMixinFields2 := inventoryitemMixin[2].Fields()
	_ = inventoryitemMixinFields2
	inventoryitemFields := schema.InventoryItem{}.Fields()
	_ = inventoryitemFields
	// inventoryitemDescID is the schema descriptor for id field.
	inventoryitemDescID := inventoryitemMixinFields2[0].Descriptor()
	// inventoryitem.DefaultID holds the default value on creation for the id field.
	inventoryitem.DefaultID = inventoryitemDescID.Default.(func() pulid.ID)
	languageMixin := schema.Language{}.Mixin()
	language.Policy = privacy.NewPolicies(languageMixin[0], schema.Language{})
	language.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := language.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	languageMixinFields1 := languageMixin[1].Fields()
	_ = languageMixinFields1
	languageFields := schema.Language{}.Fields()
	_ = languageFields
	// languageDescLabel is the schema descriptor for label field.
	languageDescLabel := languageFields[0].Descriptor()
	// language.LabelValidator is a validator for the "label" field. It is called by the builders before save.
	language.LabelValidator = languageDescLabel.Validators[0].(func(string) error)
	// languageDescID is the schema descriptor for id field.
	languageDescID := languageMixinFields1[0].Descriptor()
	// language.DefaultID holds the default value on creation for the id field.
	language.DefaultID = languageDescID.Default.(func() pulid.ID)
	locationMixin := schema.Location{}.Mixin()
	location.Policy = privacy.NewPolicies(locationMixin[0], locationMixin[1], schema.Location{})
	location.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := location.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	locationMixinFields2 := locationMixin[2].Fields()
	_ = locationMixinFields2
	locationFields := schema.Location{}.Fields()
	_ = locationFields
	// locationDescID is the schema descriptor for id field.
	locationDescID := locationMixinFields2[0].Descriptor()
	// location.DefaultID holds the default value on creation for the id field.
	location.DefaultID = locationDescID.Default.(func() pulid.ID)
	locationtagMixin := schema.LocationTag{}.Mixin()
	locationtag.Policy = privacy.NewPolicies(locationtagMixin[0], schema.LocationTag{})
	locationtag.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := locationtag.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	locationtagMixinFields1 := locationtagMixin[1].Fields()
	_ = locationtagMixinFields1
	locationtagFields := schema.LocationTag{}.Fields()
	_ = locationtagFields
	// locationtagDescID is the schema descriptor for id field.
	locationtagDescID := locationtagMixinFields1[0].Descriptor()
	// locationtag.DefaultID holds the default value on creation for the id field.
	locationtag.DefaultID = locationtagDescID.Default.(func() pulid.ID)
	notificationMixin := schema.Notification{}.Mixin()
	notification.Policy = privacy.NewPolicies(notificationMixin[0], notificationMixin[1], schema.Notification{})
	notification.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := notification.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	notificationMixinFields2 := notificationMixin[2].Fields()
	_ = notificationMixinFields2
	notificationFields := schema.Notification{}.Fields()
	_ = notificationFields
	// notificationDescActive is the schema descriptor for active field.
	notificationDescActive := notificationFields[1].Descriptor()
	// notification.DefaultActive holds the default value on creation for the active field.
	notification.DefaultActive = notificationDescActive.Default.(bool)
	// notificationDescID is the schema descriptor for id field.
	notificationDescID := notificationMixinFields2[0].Descriptor()
	// notification.DefaultID holds the default value on creation for the id field.
	notification.DefaultID = notificationDescID.Default.(func() pulid.ID)
	otkrequestsMixin := schema.OTKRequests{}.Mixin()
	otkrequests.Policy = privacy.NewPolicies(otkrequestsMixin[0], otkrequestsMixin[1], schema.OTKRequests{})
	otkrequests.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := otkrequests.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	otkrequestsMixinFields2 := otkrequestsMixin[2].Fields()
	_ = otkrequestsMixinFields2
	otkrequestsFields := schema.OTKRequests{}.Fields()
	_ = otkrequestsFields
	// otkrequestsDescID is the schema descriptor for id field.
	otkrequestsDescID := otkrequestsMixinFields2[0].Descriptor()
	// otkrequests.DefaultID holds the default value on creation for the id field.
	otkrequests.DefaultID = otkrequestsDescID.Default.(func() pulid.ID)
	orderMixin := schema.Order{}.Mixin()
	order.Policy = privacy.NewPolicies(orderMixin[0], orderMixin[1], schema.Order{})
	order.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := order.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	orderHooks := schema.Order{}.Hooks()

	order.Hooks[1] = orderHooks[0]

	order.Hooks[2] = orderHooks[1]
	orderInters := schema.Order{}.Interceptors()
	order.Interceptors[0] = orderInters[0]
	orderMixinFields2 := orderMixin[2].Fields()
	_ = orderMixinFields2
	orderFields := schema.Order{}.Fields()
	_ = orderFields
	// orderDescCreatedAt is the schema descriptor for created_at field.
	orderDescCreatedAt := orderFields[4].Descriptor()
	// order.DefaultCreatedAt holds the default value on creation for the created_at field.
	order.DefaultCreatedAt = orderDescCreatedAt.Default.(func() time.Time)
	// orderDescNoteAttributes is the schema descriptor for note_attributes field.
	orderDescNoteAttributes := orderFields[7].Descriptor()
	// order.DefaultNoteAttributes holds the default value on creation for the note_attributes field.
	order.DefaultNoteAttributes = orderDescNoteAttributes.Default.(fieldjson.NoteAttributes)
	// orderDescID is the schema descriptor for id field.
	orderDescID := orderMixinFields2[0].Descriptor()
	// order.DefaultID holds the default value on creation for the id field.
	order.DefaultID = orderDescID.Default.(func() pulid.ID)
	orderhistoryMixin := schema.OrderHistory{}.Mixin()
	orderhistory.Policy = privacy.NewPolicies(orderhistoryMixin[0], orderhistoryMixin[2], schema.OrderHistory{})
	orderhistory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := orderhistory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	orderhistoryMixinFields3 := orderhistoryMixin[3].Fields()
	_ = orderhistoryMixinFields3
	orderhistoryFields := schema.OrderHistory{}.Fields()
	_ = orderhistoryFields
	// orderhistoryDescID is the schema descriptor for id field.
	orderhistoryDescID := orderhistoryMixinFields3[0].Descriptor()
	// orderhistory.DefaultID holds the default value on creation for the id field.
	orderhistory.DefaultID = orderhistoryDescID.Default.(func() pulid.ID)
	orderlineMixin := schema.OrderLine{}.Mixin()
	orderline.Policy = privacy.NewPolicies(orderlineMixin[0], orderlineMixin[1], schema.OrderLine{})
	orderline.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := orderline.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	orderlineHooks := schema.OrderLine{}.Hooks()

	orderline.Hooks[1] = orderlineHooks[0]

	orderline.Hooks[2] = orderlineHooks[1]

	orderline.Hooks[3] = orderlineHooks[2]
	orderlineMixinFields2 := orderlineMixin[2].Fields()
	_ = orderlineMixinFields2
	orderlineFields := schema.OrderLine{}.Fields()
	_ = orderlineFields
	// orderlineDescUnits is the schema descriptor for units field.
	orderlineDescUnits := orderlineFields[3].Descriptor()
	// orderline.UnitsValidator is a validator for the "units" field. It is called by the builders before save.
	orderline.UnitsValidator = orderlineDescUnits.Validators[0].(func(int) error)
	// orderlineDescCreatedAt is the schema descriptor for created_at field.
	orderlineDescCreatedAt := orderlineFields[4].Descriptor()
	// orderline.DefaultCreatedAt holds the default value on creation for the created_at field.
	orderline.DefaultCreatedAt = orderlineDescCreatedAt.Default.(func() time.Time)
	// orderlineDescUpdatedAt is the schema descriptor for updated_at field.
	orderlineDescUpdatedAt := orderlineFields[5].Descriptor()
	// orderline.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	orderline.DefaultUpdatedAt = orderlineDescUpdatedAt.Default.(func() time.Time)
	// orderline.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	orderline.UpdateDefaultUpdatedAt = orderlineDescUpdatedAt.UpdateDefault.(func() time.Time)
	// orderlineDescID is the schema descriptor for id field.
	orderlineDescID := orderlineMixinFields2[0].Descriptor()
	// orderline.DefaultID holds the default value on creation for the id field.
	orderline.DefaultID = orderlineDescID.Default.(func() pulid.ID)
	ordersenderMixin := schema.OrderSender{}.Mixin()
	ordersender.Policy = privacy.NewPolicies(ordersenderMixin[0], ordersenderMixin[1], schema.OrderSender{})
	ordersender.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := ordersender.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	ordersenderMixinFields2 := ordersenderMixin[2].Fields()
	_ = ordersenderMixinFields2
	ordersenderFields := schema.OrderSender{}.Fields()
	_ = ordersenderFields
	// ordersenderDescID is the schema descriptor for id field.
	ordersenderDescID := ordersenderMixinFields2[0].Descriptor()
	// ordersender.DefaultID holds the default value on creation for the id field.
	ordersender.DefaultID = ordersenderDescID.Default.(func() pulid.ID)
	packagingMixin := schema.Packaging{}.Mixin()
	packaging.Policy = privacy.NewPolicies(packagingMixin[0], packagingMixin[1], schema.Packaging{})
	packaging.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := packaging.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	packagingMixinInters3 := packagingMixin[3].Interceptors()
	packaging.Interceptors[0] = packagingMixinInters3[0]
	packagingMixinFields2 := packagingMixin[2].Fields()
	_ = packagingMixinFields2
	packagingFields := schema.Packaging{}.Fields()
	_ = packagingFields
	// packagingDescID is the schema descriptor for id field.
	packagingDescID := packagingMixinFields2[0].Descriptor()
	// packaging.DefaultID holds the default value on creation for the id field.
	packaging.DefaultID = packagingDescID.Default.(func() pulid.ID)
	packagingdfMixin := schema.PackagingDF{}.Mixin()
	packagingdf.Policy = privacy.NewPolicies(packagingdfMixin[0], packagingdfMixin[1], schema.PackagingDF{})
	packagingdf.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := packagingdf.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	packagingdfMixinFields2 := packagingdfMixin[2].Fields()
	_ = packagingdfMixinFields2
	packagingdfFields := schema.PackagingDF{}.Fields()
	_ = packagingdfFields
	// packagingdfDescStackable is the schema descriptor for stackable field.
	packagingdfDescStackable := packagingdfFields[3].Descriptor()
	// packagingdf.DefaultStackable holds the default value on creation for the stackable field.
	packagingdf.DefaultStackable = packagingdfDescStackable.Default.(bool)
	// packagingdfDescID is the schema descriptor for id field.
	packagingdfDescID := packagingdfMixinFields2[0].Descriptor()
	// packagingdf.DefaultID holds the default value on creation for the id field.
	packagingdf.DefaultID = packagingdfDescID.Default.(func() pulid.ID)
	packaginguspsMixin := schema.PackagingUSPS{}.Mixin()
	packagingusps.Policy = privacy.NewPolicies(packaginguspsMixin[0], packaginguspsMixin[1], schema.PackagingUSPS{})
	packagingusps.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := packagingusps.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	packaginguspsMixinFields2 := packaginguspsMixin[2].Fields()
	_ = packaginguspsMixinFields2
	packaginguspsFields := schema.PackagingUSPS{}.Fields()
	_ = packaginguspsFields
	// packaginguspsDescID is the schema descriptor for id field.
	packaginguspsDescID := packaginguspsMixinFields2[0].Descriptor()
	// packagingusps.DefaultID holds the default value on creation for the id field.
	packagingusps.DefaultID = packaginguspsDescID.Default.(func() pulid.ID)
	packaginguspsprocessingcategoryMixin := schema.PackagingUSPSProcessingCategory{}.Mixin()
	packaginguspsprocessingcategory.Policy = privacy.NewPolicies(packaginguspsprocessingcategoryMixin[0], schema.PackagingUSPSProcessingCategory{})
	packaginguspsprocessingcategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := packaginguspsprocessingcategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	packaginguspsprocessingcategoryMixinFields1 := packaginguspsprocessingcategoryMixin[1].Fields()
	_ = packaginguspsprocessingcategoryMixinFields1
	packaginguspsprocessingcategoryFields := schema.PackagingUSPSProcessingCategory{}.Fields()
	_ = packaginguspsprocessingcategoryFields
	// packaginguspsprocessingcategoryDescID is the schema descriptor for id field.
	packaginguspsprocessingcategoryDescID := packaginguspsprocessingcategoryMixinFields1[0].Descriptor()
	// packaginguspsprocessingcategory.DefaultID holds the default value on creation for the id field.
	packaginguspsprocessingcategory.DefaultID = packaginguspsprocessingcategoryDescID.Default.(func() pulid.ID)
	packaginguspsrateindicatorMixin := schema.PackagingUSPSRateIndicator{}.Mixin()
	packaginguspsrateindicator.Policy = privacy.NewPolicies(packaginguspsrateindicatorMixin[0], schema.PackagingUSPSRateIndicator{})
	packaginguspsrateindicator.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := packaginguspsrateindicator.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	packaginguspsrateindicatorMixinFields1 := packaginguspsrateindicatorMixin[1].Fields()
	_ = packaginguspsrateindicatorMixinFields1
	packaginguspsrateindicatorFields := schema.PackagingUSPSRateIndicator{}.Fields()
	_ = packaginguspsrateindicatorFields
	// packaginguspsrateindicatorDescID is the schema descriptor for id field.
	packaginguspsrateindicatorDescID := packaginguspsrateindicatorMixinFields1[0].Descriptor()
	// packaginguspsrateindicator.DefaultID holds the default value on creation for the id field.
	packaginguspsrateindicator.DefaultID = packaginguspsrateindicatorDescID.Default.(func() pulid.ID)
	palletMixin := schema.Pallet{}.Mixin()
	pallet.Policy = privacy.NewPolicies(palletMixin[0], palletMixin[1], schema.Pallet{})
	pallet.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := pallet.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	palletMixinFields2 := palletMixin[2].Fields()
	_ = palletMixinFields2
	palletFields := schema.Pallet{}.Fields()
	_ = palletFields
	// palletDescID is the schema descriptor for id field.
	palletDescID := palletMixinFields2[0].Descriptor()
	// pallet.DefaultID holds the default value on creation for the id field.
	pallet.DefaultID = palletDescID.Default.(func() pulid.ID)
	parcelshopMixin := schema.ParcelShop{}.Mixin()
	parcelshop.Policy = privacy.NewPolicies(parcelshopMixin[0], schema.ParcelShop{})
	parcelshop.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := parcelshop.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	parcelshopMixinFields1 := parcelshopMixin[1].Fields()
	_ = parcelshopMixinFields1
	parcelshopFields := schema.ParcelShop{}.Fields()
	_ = parcelshopFields
	// parcelshopDescLastUpdated is the schema descriptor for last_updated field.
	parcelshopDescLastUpdated := parcelshopFields[1].Descriptor()
	// parcelshop.DefaultLastUpdated holds the default value on creation for the last_updated field.
	parcelshop.DefaultLastUpdated = parcelshopDescLastUpdated.Default.(func() time.Time)
	// parcelshopDescID is the schema descriptor for id field.
	parcelshopDescID := parcelshopMixinFields1[0].Descriptor()
	// parcelshop.DefaultID holds the default value on creation for the id field.
	parcelshop.DefaultID = parcelshopDescID.Default.(func() pulid.ID)
	parcelshopbringMixin := schema.ParcelShopBring{}.Mixin()
	parcelshopbring.Policy = privacy.NewPolicies(parcelshopbringMixin[0], schema.ParcelShopBring{})
	parcelshopbring.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := parcelshopbring.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	parcelshopbringMixinFields1 := parcelshopbringMixin[1].Fields()
	_ = parcelshopbringMixinFields1
	parcelshopbringFields := schema.ParcelShopBring{}.Fields()
	_ = parcelshopbringFields
	// parcelshopbringDescID is the schema descriptor for id field.
	parcelshopbringDescID := parcelshopbringMixinFields1[0].Descriptor()
	// parcelshopbring.DefaultID holds the default value on creation for the id field.
	parcelshopbring.DefaultID = parcelshopbringDescID.Default.(func() pulid.ID)
	parcelshopdaoMixin := schema.ParcelShopDAO{}.Mixin()
	parcelshopdao.Policy = privacy.NewPolicies(parcelshopdaoMixin[0], schema.ParcelShopDAO{})
	parcelshopdao.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := parcelshopdao.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	parcelshopdaoMixinFields1 := parcelshopdaoMixin[1].Fields()
	_ = parcelshopdaoMixinFields1
	parcelshopdaoFields := schema.ParcelShopDAO{}.Fields()
	_ = parcelshopdaoFields
	// parcelshopdaoDescID is the schema descriptor for id field.
	parcelshopdaoDescID := parcelshopdaoMixinFields1[0].Descriptor()
	// parcelshopdao.DefaultID holds the default value on creation for the id field.
	parcelshopdao.DefaultID = parcelshopdaoDescID.Default.(func() pulid.ID)
	parcelshopglsMixin := schema.ParcelShopGLS{}.Mixin()
	parcelshopgls.Policy = privacy.NewPolicies(parcelshopglsMixin[0], schema.ParcelShopGLS{})
	parcelshopgls.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := parcelshopgls.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	parcelshopglsMixinFields1 := parcelshopglsMixin[1].Fields()
	_ = parcelshopglsMixinFields1
	parcelshopglsFields := schema.ParcelShopGLS{}.Fields()
	_ = parcelshopglsFields
	// parcelshopglsDescID is the schema descriptor for id field.
	parcelshopglsDescID := parcelshopglsMixinFields1[0].Descriptor()
	// parcelshopgls.DefaultID holds the default value on creation for the id field.
	parcelshopgls.DefaultID = parcelshopglsDescID.Default.(func() pulid.ID)
	parcelshoppostnordMixin := schema.ParcelShopPostNord{}.Mixin()
	parcelshoppostnord.Policy = privacy.NewPolicies(parcelshoppostnordMixin[0], schema.ParcelShopPostNord{})
	parcelshoppostnord.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := parcelshoppostnord.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	parcelshoppostnordMixinFields1 := parcelshoppostnordMixin[1].Fields()
	_ = parcelshoppostnordMixinFields1
	parcelshoppostnordFields := schema.ParcelShopPostNord{}.Fields()
	_ = parcelshoppostnordFields
	// parcelshoppostnordDescID is the schema descriptor for id field.
	parcelshoppostnordDescID := parcelshoppostnordMixinFields1[0].Descriptor()
	// parcelshoppostnord.DefaultID holds the default value on creation for the id field.
	parcelshoppostnord.DefaultID = parcelshoppostnordDescID.Default.(func() pulid.ID)
	planMixin := schema.Plan{}.Mixin()
	plan.Policy = privacy.NewPolicies(planMixin[0], schema.Plan{})
	plan.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := plan.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	planMixinFields1 := planMixin[1].Fields()
	_ = planMixinFields1
	planFields := schema.Plan{}.Fields()
	_ = planFields
	// planDescCreatedAt is the schema descriptor for created_at field.
	planDescCreatedAt := planFields[3].Descriptor()
	// plan.DefaultCreatedAt holds the default value on creation for the created_at field.
	plan.DefaultCreatedAt = planDescCreatedAt.Default.(func() time.Time)
	// planDescID is the schema descriptor for id field.
	planDescID := planMixinFields1[0].Descriptor()
	// plan.DefaultID holds the default value on creation for the id field.
	plan.DefaultID = planDescID.Default.(func() pulid.ID)
	planhistoryMixin := schema.PlanHistory{}.Mixin()
	planhistory.Policy = privacy.NewPolicies(planhistoryMixin[0], planhistoryMixin[2], schema.PlanHistory{})
	planhistory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := planhistory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	planhistoryMixinFields3 := planhistoryMixin[3].Fields()
	_ = planhistoryMixinFields3
	planhistoryFields := schema.PlanHistory{}.Fields()
	_ = planhistoryFields
	// planhistoryDescCreatedAt is the schema descriptor for created_at field.
	planhistoryDescCreatedAt := planhistoryFields[0].Descriptor()
	// planhistory.DefaultCreatedAt holds the default value on creation for the created_at field.
	planhistory.DefaultCreatedAt = planhistoryDescCreatedAt.Default.(func() time.Time)
	// planhistoryDescID is the schema descriptor for id field.
	planhistoryDescID := planhistoryMixinFields3[0].Descriptor()
	// planhistory.DefaultID holds the default value on creation for the id field.
	planhistory.DefaultID = planhistoryDescID.Default.(func() pulid.ID)
	printjobMixin := schema.PrintJob{}.Mixin()
	printjob.Policy = privacy.NewPolicies(printjobMixin[0], printjobMixin[1], schema.PrintJob{})
	printjob.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := printjob.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	printjobHooks := schema.PrintJob{}.Hooks()

	printjob.Hooks[1] = printjobHooks[0]
	printjobMixinFields2 := printjobMixin[2].Fields()
	_ = printjobMixinFields2
	printjobFields := schema.PrintJob{}.Fields()
	_ = printjobFields
	// printjobDescCreatedAt is the schema descriptor for created_at field.
	printjobDescCreatedAt := printjobFields[5].Descriptor()
	// printjob.DefaultCreatedAt holds the default value on creation for the created_at field.
	printjob.DefaultCreatedAt = printjobDescCreatedAt.Default.(func() time.Time)
	// printjobDescID is the schema descriptor for id field.
	printjobDescID := printjobMixinFields2[0].Descriptor()
	// printjob.DefaultID holds the default value on creation for the id field.
	printjob.DefaultID = printjobDescID.Default.(func() pulid.ID)
	printerMixin := schema.Printer{}.Mixin()
	printer.Policy = privacy.NewPolicies(printerMixin[0], printerMixin[1], schema.Printer{})
	printer.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := printer.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	printerMixinFields2 := printerMixin[2].Fields()
	_ = printerMixinFields2
	printerFields := schema.Printer{}.Fields()
	_ = printerFields
	// printerDescLabelZpl is the schema descriptor for label_zpl field.
	printerDescLabelZpl := printerFields[2].Descriptor()
	// printer.DefaultLabelZpl holds the default value on creation for the label_zpl field.
	printer.DefaultLabelZpl = printerDescLabelZpl.Default.(bool)
	// printerDescLabelPdf is the schema descriptor for label_pdf field.
	printerDescLabelPdf := printerFields[3].Descriptor()
	// printer.DefaultLabelPdf holds the default value on creation for the label_pdf field.
	printer.DefaultLabelPdf = printerDescLabelPdf.Default.(bool)
	// printerDescLabelPng is the schema descriptor for label_png field.
	printerDescLabelPng := printerFields[4].Descriptor()
	// printer.DefaultLabelPng holds the default value on creation for the label_png field.
	printer.DefaultLabelPng = printerDescLabelPng.Default.(bool)
	// printerDescDocument is the schema descriptor for document field.
	printerDescDocument := printerFields[5].Descriptor()
	// printer.DefaultDocument holds the default value on creation for the document field.
	printer.DefaultDocument = printerDescDocument.Default.(bool)
	// printerDescRotate180 is the schema descriptor for rotate_180 field.
	printerDescRotate180 := printerFields[6].Descriptor()
	// printer.DefaultRotate180 holds the default value on creation for the rotate_180 field.
	printer.DefaultRotate180 = printerDescRotate180.Default.(bool)
	// printerDescUseShell is the schema descriptor for use_shell field.
	printerDescUseShell := printerFields[7].Descriptor()
	// printer.DefaultUseShell holds the default value on creation for the use_shell field.
	printer.DefaultUseShell = printerDescUseShell.Default.(bool)
	// printerDescCreatedAt is the schema descriptor for created_at field.
	printerDescCreatedAt := printerFields[9].Descriptor()
	// printer.DefaultCreatedAt holds the default value on creation for the created_at field.
	printer.DefaultCreatedAt = printerDescCreatedAt.Default.(func() time.Time)
	// printerDescLastPing is the schema descriptor for last_ping field.
	printerDescLastPing := printerFields[10].Descriptor()
	// printer.DefaultLastPing holds the default value on creation for the last_ping field.
	printer.DefaultLastPing = printerDescLastPing.Default.(func() time.Time)
	// printerDescID is the schema descriptor for id field.
	printerDescID := printerMixinFields2[0].Descriptor()
	// printer.DefaultID holds the default value on creation for the id field.
	printer.DefaultID = printerDescID.Default.(func() pulid.ID)
	productMixin := schema.Product{}.Mixin()
	product.Policy = privacy.NewPolicies(productMixin[0], productMixin[1], schema.Product{})
	product.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := product.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	productHooks := schema.Product{}.Hooks()

	product.Hooks[1] = productHooks[0]

	product.Hooks[2] = productHooks[1]
	productMixinFields2 := productMixin[2].Fields()
	_ = productMixinFields2
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescCreatedAt is the schema descriptor for created_at field.
	productDescCreatedAt := productFields[4].Descriptor()
	// product.DefaultCreatedAt holds the default value on creation for the created_at field.
	product.DefaultCreatedAt = productDescCreatedAt.Default.(func() time.Time)
	// productDescUpdatedAt is the schema descriptor for updated_at field.
	productDescUpdatedAt := productFields[5].Descriptor()
	// product.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	product.DefaultUpdatedAt = productDescUpdatedAt.Default.(func() time.Time)
	// product.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	product.UpdateDefaultUpdatedAt = productDescUpdatedAt.UpdateDefault.(func() time.Time)
	// productDescID is the schema descriptor for id field.
	productDescID := productMixinFields2[0].Descriptor()
	// product.DefaultID holds the default value on creation for the id field.
	product.DefaultID = productDescID.Default.(func() pulid.ID)
	productimageMixin := schema.ProductImage{}.Mixin()
	productimage.Policy = privacy.NewPolicies(productimageMixin[0], productimageMixin[1], schema.ProductImage{})
	productimage.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := productimage.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	productimageMixinFields2 := productimageMixin[2].Fields()
	_ = productimageMixinFields2
	productimageFields := schema.ProductImage{}.Fields()
	_ = productimageFields
	// productimageDescURL is the schema descriptor for url field.
	productimageDescURL := productimageFields[1].Descriptor()
	// productimage.URLValidator is a validator for the "url" field. It is called by the builders before save.
	productimage.URLValidator = productimageDescURL.Validators[0].(func(string) error)
	// productimageDescID is the schema descriptor for id field.
	productimageDescID := productimageMixinFields2[0].Descriptor()
	// productimage.DefaultID holds the default value on creation for the id field.
	productimage.DefaultID = productimageDescID.Default.(func() pulid.ID)
	producttagMixin := schema.ProductTag{}.Mixin()
	producttag.Policy = privacy.NewPolicies(producttagMixin[0], producttagMixin[1], schema.ProductTag{})
	producttag.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := producttag.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	producttagMixinFields2 := producttagMixin[2].Fields()
	_ = producttagMixinFields2
	producttagFields := schema.ProductTag{}.Fields()
	_ = producttagFields
	// producttagDescCreatedAt is the schema descriptor for created_at field.
	producttagDescCreatedAt := producttagFields[1].Descriptor()
	// producttag.DefaultCreatedAt holds the default value on creation for the created_at field.
	producttag.DefaultCreatedAt = producttagDescCreatedAt.Default.(func() time.Time)
	// producttagDescID is the schema descriptor for id field.
	producttagDescID := producttagMixinFields2[0].Descriptor()
	// producttag.DefaultID holds the default value on creation for the id field.
	producttag.DefaultID = producttagDescID.Default.(func() pulid.ID)
	productvariantMixin := schema.ProductVariant{}.Mixin()
	productvariant.Policy = privacy.NewPolicies(productvariantMixin[0], productvariantMixin[1], schema.ProductVariant{})
	productvariant.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := productvariant.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	productvariantMixinFields2 := productvariantMixin[2].Fields()
	_ = productvariantMixinFields2
	productvariantFields := schema.ProductVariant{}.Fields()
	_ = productvariantFields
	// productvariantDescArchived is the schema descriptor for archived field.
	productvariantDescArchived := productvariantFields[0].Descriptor()
	// productvariant.DefaultArchived holds the default value on creation for the archived field.
	productvariant.DefaultArchived = productvariantDescArchived.Default.(bool)
	// productvariantDescWeightG is the schema descriptor for weight_g field.
	productvariantDescWeightG := productvariantFields[4].Descriptor()
	// productvariant.DefaultWeightG holds the default value on creation for the weight_g field.
	productvariant.DefaultWeightG = productvariantDescWeightG.Default.(int)
	// productvariant.WeightGValidator is a validator for the "weight_g" field. It is called by the builders before save.
	productvariant.WeightGValidator = productvariantDescWeightG.Validators[0].(func(int) error)
	// productvariantDescDimensionLength is the schema descriptor for dimension_length field.
	productvariantDescDimensionLength := productvariantFields[5].Descriptor()
	// productvariant.DimensionLengthValidator is a validator for the "dimension_length" field. It is called by the builders before save.
	productvariant.DimensionLengthValidator = productvariantDescDimensionLength.Validators[0].(func(int) error)
	// productvariantDescDimensionWidth is the schema descriptor for dimension_width field.
	productvariantDescDimensionWidth := productvariantFields[6].Descriptor()
	// productvariant.DimensionWidthValidator is a validator for the "dimension_width" field. It is called by the builders before save.
	productvariant.DimensionWidthValidator = productvariantDescDimensionWidth.Validators[0].(func(int) error)
	// productvariantDescDimensionHeight is the schema descriptor for dimension_height field.
	productvariantDescDimensionHeight := productvariantFields[7].Descriptor()
	// productvariant.DimensionHeightValidator is a validator for the "dimension_height" field. It is called by the builders before save.
	productvariant.DimensionHeightValidator = productvariantDescDimensionHeight.Validators[0].(func(int) error)
	// productvariantDescCreatedAt is the schema descriptor for created_at field.
	productvariantDescCreatedAt := productvariantFields[8].Descriptor()
	// productvariant.DefaultCreatedAt holds the default value on creation for the created_at field.
	productvariant.DefaultCreatedAt = productvariantDescCreatedAt.Default.(func() time.Time)
	// productvariantDescUpdatedAt is the schema descriptor for updated_at field.
	productvariantDescUpdatedAt := productvariantFields[9].Descriptor()
	// productvariant.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	productvariant.DefaultUpdatedAt = productvariantDescUpdatedAt.Default.(func() time.Time)
	// productvariant.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	productvariant.UpdateDefaultUpdatedAt = productvariantDescUpdatedAt.UpdateDefault.(func() time.Time)
	// productvariantDescID is the schema descriptor for id field.
	productvariantDescID := productvariantMixinFields2[0].Descriptor()
	// productvariant.DefaultID holds the default value on creation for the id field.
	productvariant.DefaultID = productvariantDescID.Default.(func() pulid.ID)
	returncolliMixin := schema.ReturnColli{}.Mixin()
	returncolli.Policy = privacy.NewPolicies(returncolliMixin[0], returncolliMixin[1], schema.ReturnColli{})
	returncolli.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := returncolli.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	returncolliHooks := schema.ReturnColli{}.Hooks()

	returncolli.Hooks[1] = returncolliHooks[0]

	returncolli.Hooks[2] = returncolliHooks[1]

	returncolli.Hooks[3] = returncolliHooks[2]
	returncolliMixinFields2 := returncolliMixin[2].Fields()
	_ = returncolliMixinFields2
	returncolliFields := schema.ReturnColli{}.Fields()
	_ = returncolliFields
	// returncolliDescExpectedAt is the schema descriptor for expected_at field.
	returncolliDescExpectedAt := returncolliFields[0].Descriptor()
	// returncolli.DefaultExpectedAt holds the default value on creation for the expected_at field.
	returncolli.DefaultExpectedAt = returncolliDescExpectedAt.Default.(func() time.Time)
	// returncolliDescCreatedAt is the schema descriptor for created_at field.
	returncolliDescCreatedAt := returncolliFields[5].Descriptor()
	// returncolli.DefaultCreatedAt holds the default value on creation for the created_at field.
	returncolli.DefaultCreatedAt = returncolliDescCreatedAt.Default.(func() time.Time)
	// returncolliDescID is the schema descriptor for id field.
	returncolliDescID := returncolliMixinFields2[0].Descriptor()
	// returncolli.DefaultID holds the default value on creation for the id field.
	returncolli.DefaultID = returncolliDescID.Default.(func() pulid.ID)
	returncollihistoryMixin := schema.ReturnColliHistory{}.Mixin()
	returncollihistory.Policy = privacy.NewPolicies(returncollihistoryMixin[1], returncollihistoryMixin[2], schema.ReturnColliHistory{})
	returncollihistory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := returncollihistory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	returncollihistoryMixinFields3 := returncollihistoryMixin[3].Fields()
	_ = returncollihistoryMixinFields3
	returncollihistoryFields := schema.ReturnColliHistory{}.Fields()
	_ = returncollihistoryFields
	// returncollihistoryDescID is the schema descriptor for id field.
	returncollihistoryDescID := returncollihistoryMixinFields3[0].Descriptor()
	// returncollihistory.DefaultID holds the default value on creation for the id field.
	returncollihistory.DefaultID = returncollihistoryDescID.Default.(func() pulid.ID)
	returnorderlineMixin := schema.ReturnOrderLine{}.Mixin()
	returnorderline.Policy = privacy.NewPolicies(returnorderlineMixin[0], returnorderlineMixin[1], schema.ReturnOrderLine{})
	returnorderline.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := returnorderline.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	returnorderlineHooks := schema.ReturnOrderLine{}.Hooks()

	returnorderline.Hooks[1] = returnorderlineHooks[0]
	returnorderlineMixinFields2 := returnorderlineMixin[2].Fields()
	_ = returnorderlineMixinFields2
	returnorderlineFields := schema.ReturnOrderLine{}.Fields()
	_ = returnorderlineFields
	// returnorderlineDescUnits is the schema descriptor for units field.
	returnorderlineDescUnits := returnorderlineFields[0].Descriptor()
	// returnorderline.UnitsValidator is a validator for the "units" field. It is called by the builders before save.
	returnorderline.UnitsValidator = returnorderlineDescUnits.Validators[0].(func(int) error)
	// returnorderlineDescID is the schema descriptor for id field.
	returnorderlineDescID := returnorderlineMixinFields2[0].Descriptor()
	// returnorderline.DefaultID holds the default value on creation for the id field.
	returnorderline.DefaultID = returnorderlineDescID.Default.(func() pulid.ID)
	returnportalMixin := schema.ReturnPortal{}.Mixin()
	returnportal.Policy = privacy.NewPolicies(returnportalMixin[0], returnportalMixin[1], schema.ReturnPortal{})
	returnportal.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := returnportal.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	returnportalMixinFields2 := returnportalMixin[2].Fields()
	_ = returnportalMixinFields2
	returnportalFields := schema.ReturnPortal{}.Fields()
	_ = returnportalFields
	// returnportalDescReturnOpenHours is the schema descriptor for return_open_hours field.
	returnportalDescReturnOpenHours := returnportalFields[1].Descriptor()
	// returnportal.DefaultReturnOpenHours holds the default value on creation for the return_open_hours field.
	returnportal.DefaultReturnOpenHours = returnportalDescReturnOpenHours.Default.(int)
	// returnportalDescAutomaticallyAccept is the schema descriptor for automatically_accept field.
	returnportalDescAutomaticallyAccept := returnportalFields[2].Descriptor()
	// returnportal.DefaultAutomaticallyAccept holds the default value on creation for the automatically_accept field.
	returnportal.DefaultAutomaticallyAccept = returnportalDescAutomaticallyAccept.Default.(bool)
	// returnportalDescID is the schema descriptor for id field.
	returnportalDescID := returnportalMixinFields2[0].Descriptor()
	// returnportal.DefaultID holds the default value on creation for the id field.
	returnportal.DefaultID = returnportalDescID.Default.(func() pulid.ID)
	returnportalclaimMixin := schema.ReturnPortalClaim{}.Mixin()
	returnportalclaim.Policy = privacy.NewPolicies(returnportalclaimMixin[0], returnportalclaimMixin[1], schema.ReturnPortalClaim{})
	returnportalclaim.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := returnportalclaim.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	returnportalclaimMixinFields2 := returnportalclaimMixin[2].Fields()
	_ = returnportalclaimMixinFields2
	returnportalclaimFields := schema.ReturnPortalClaim{}.Fields()
	_ = returnportalclaimFields
	// returnportalclaimDescID is the schema descriptor for id field.
	returnportalclaimDescID := returnportalclaimMixinFields2[0].Descriptor()
	// returnportalclaim.DefaultID holds the default value on creation for the id field.
	returnportalclaim.DefaultID = returnportalclaimDescID.Default.(func() pulid.ID)
	seatgroupMixin := schema.SeatGroup{}.Mixin()
	seatgroup.Policy = privacy.NewPolicies(seatgroupMixin[0], seatgroupMixin[1], schema.SeatGroup{})
	seatgroup.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := seatgroup.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	seatgroupMixinFields2 := seatgroupMixin[2].Fields()
	_ = seatgroupMixinFields2
	seatgroupFields := schema.SeatGroup{}.Fields()
	_ = seatgroupFields
	// seatgroupDescCreatedAt is the schema descriptor for created_at field.
	seatgroupDescCreatedAt := seatgroupFields[1].Descriptor()
	// seatgroup.DefaultCreatedAt holds the default value on creation for the created_at field.
	seatgroup.DefaultCreatedAt = seatgroupDescCreatedAt.Default.(func() time.Time)
	// seatgroupDescID is the schema descriptor for id field.
	seatgroupDescID := seatgroupMixinFields2[0].Descriptor()
	// seatgroup.DefaultID holds the default value on creation for the id field.
	seatgroup.DefaultID = seatgroupDescID.Default.(func() pulid.ID)
	seatgroupaccessrightMixin := schema.SeatGroupAccessRight{}.Mixin()
	seatgroupaccessright.Policy = privacy.NewPolicies(seatgroupaccessrightMixin[0], seatgroupaccessrightMixin[1], schema.SeatGroupAccessRight{})
	seatgroupaccessright.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := seatgroupaccessright.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	seatgroupaccessrightMixinFields2 := seatgroupaccessrightMixin[2].Fields()
	_ = seatgroupaccessrightMixinFields2
	seatgroupaccessrightFields := schema.SeatGroupAccessRight{}.Fields()
	_ = seatgroupaccessrightFields
	// seatgroupaccessrightDescID is the schema descriptor for id field.
	seatgroupaccessrightDescID := seatgroupaccessrightMixinFields2[0].Descriptor()
	// seatgroupaccessright.DefaultID holds the default value on creation for the id field.
	seatgroupaccessright.DefaultID = seatgroupaccessrightDescID.Default.(func() pulid.ID)
	shipmentMixin := schema.Shipment{}.Mixin()
	shipment.Policy = privacy.NewPolicies(shipmentMixin[0], shipmentMixin[1], schema.Shipment{})
	shipment.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipment.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentHooks := schema.Shipment{}.Hooks()

	shipment.Hooks[1] = shipmentHooks[0]
	shipmentMixinFields2 := shipmentMixin[2].Fields()
	_ = shipmentMixinFields2
	shipmentFields := schema.Shipment{}.Fields()
	_ = shipmentFields
	// shipmentDescCreatedAt is the schema descriptor for created_at field.
	shipmentDescCreatedAt := shipmentFields[1].Descriptor()
	// shipment.DefaultCreatedAt holds the default value on creation for the created_at field.
	shipment.DefaultCreatedAt = shipmentDescCreatedAt.Default.(func() time.Time)
	// shipmentDescID is the schema descriptor for id field.
	shipmentDescID := shipmentMixinFields2[0].Descriptor()
	// shipment.DefaultID holds the default value on creation for the id field.
	shipment.DefaultID = shipmentDescID.Default.(func() pulid.ID)
	shipmentbringMixin := schema.ShipmentBring{}.Mixin()
	shipmentbring.Policy = privacy.NewPolicies(shipmentbringMixin[0], shipmentbringMixin[1], schema.ShipmentBring{})
	shipmentbring.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentbring.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentbringMixinFields2 := shipmentbringMixin[2].Fields()
	_ = shipmentbringMixinFields2
	shipmentbringFields := schema.ShipmentBring{}.Fields()
	_ = shipmentbringFields
	// shipmentbringDescID is the schema descriptor for id field.
	shipmentbringDescID := shipmentbringMixinFields2[0].Descriptor()
	// shipmentbring.DefaultID holds the default value on creation for the id field.
	shipmentbring.DefaultID = shipmentbringDescID.Default.(func() pulid.ID)
	shipmentdaoMixin := schema.ShipmentDAO{}.Mixin()
	shipmentdao.Policy = privacy.NewPolicies(shipmentdaoMixin[0], shipmentdaoMixin[1], schema.ShipmentDAO{})
	shipmentdao.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentdao.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentdaoMixinFields2 := shipmentdaoMixin[2].Fields()
	_ = shipmentdaoMixinFields2
	shipmentdaoFields := schema.ShipmentDAO{}.Fields()
	_ = shipmentdaoFields
	// shipmentdaoDescID is the schema descriptor for id field.
	shipmentdaoDescID := shipmentdaoMixinFields2[0].Descriptor()
	// shipmentdao.DefaultID holds the default value on creation for the id field.
	shipmentdao.DefaultID = shipmentdaoDescID.Default.(func() pulid.ID)
	shipmentdfMixin := schema.ShipmentDF{}.Mixin()
	shipmentdf.Policy = privacy.NewPolicies(shipmentdfMixin[0], shipmentdfMixin[1], schema.ShipmentDF{})
	shipmentdf.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentdf.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentdfMixinFields2 := shipmentdfMixin[2].Fields()
	_ = shipmentdfMixinFields2
	shipmentdfFields := schema.ShipmentDF{}.Fields()
	_ = shipmentdfFields
	// shipmentdfDescID is the schema descriptor for id field.
	shipmentdfDescID := shipmentdfMixinFields2[0].Descriptor()
	// shipmentdf.DefaultID holds the default value on creation for the id field.
	shipmentdf.DefaultID = shipmentdfDescID.Default.(func() pulid.ID)
	shipmentdsvMixin := schema.ShipmentDSV{}.Mixin()
	shipmentdsv.Policy = privacy.NewPolicies(shipmentdsvMixin[0], shipmentdsvMixin[1], schema.ShipmentDSV{})
	shipmentdsv.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentdsv.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentdsvMixinFields2 := shipmentdsvMixin[2].Fields()
	_ = shipmentdsvMixinFields2
	shipmentdsvFields := schema.ShipmentDSV{}.Fields()
	_ = shipmentdsvFields
	// shipmentdsvDescID is the schema descriptor for id field.
	shipmentdsvDescID := shipmentdsvMixinFields2[0].Descriptor()
	// shipmentdsv.DefaultID holds the default value on creation for the id field.
	shipmentdsv.DefaultID = shipmentdsvDescID.Default.(func() pulid.ID)
	shipmenteasypostMixin := schema.ShipmentEasyPost{}.Mixin()
	shipmenteasypost.Policy = privacy.NewPolicies(shipmenteasypostMixin[0], shipmenteasypostMixin[1], schema.ShipmentEasyPost{})
	shipmenteasypost.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmenteasypost.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmenteasypostMixinFields2 := shipmenteasypostMixin[2].Fields()
	_ = shipmenteasypostMixinFields2
	shipmenteasypostFields := schema.ShipmentEasyPost{}.Fields()
	_ = shipmenteasypostFields
	// shipmenteasypostDescID is the schema descriptor for id field.
	shipmenteasypostDescID := shipmenteasypostMixinFields2[0].Descriptor()
	// shipmenteasypost.DefaultID holds the default value on creation for the id field.
	shipmenteasypost.DefaultID = shipmenteasypostDescID.Default.(func() pulid.ID)
	shipmentglsMixin := schema.ShipmentGLS{}.Mixin()
	shipmentgls.Policy = privacy.NewPolicies(shipmentglsMixin[0], shipmentglsMixin[1], schema.ShipmentGLS{})
	shipmentgls.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentgls.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentglsMixinFields2 := shipmentglsMixin[2].Fields()
	_ = shipmentglsMixinFields2
	shipmentglsFields := schema.ShipmentGLS{}.Fields()
	_ = shipmentglsFields
	// shipmentglsDescID is the schema descriptor for id field.
	shipmentglsDescID := shipmentglsMixinFields2[0].Descriptor()
	// shipmentgls.DefaultID holds the default value on creation for the id field.
	shipmentgls.DefaultID = shipmentglsDescID.Default.(func() pulid.ID)
	shipmenthistoryMixin := schema.ShipmentHistory{}.Mixin()
	shipmenthistory.Policy = privacy.NewPolicies(shipmenthistoryMixin[0], shipmenthistoryMixin[2], schema.ShipmentHistory{})
	shipmenthistory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmenthistory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmenthistoryMixinFields3 := shipmenthistoryMixin[3].Fields()
	_ = shipmenthistoryMixinFields3
	shipmenthistoryFields := schema.ShipmentHistory{}.Fields()
	_ = shipmenthistoryFields
	// shipmenthistoryDescID is the schema descriptor for id field.
	shipmenthistoryDescID := shipmenthistoryMixinFields3[0].Descriptor()
	// shipmenthistory.DefaultID holds the default value on creation for the id field.
	shipmenthistory.DefaultID = shipmenthistoryDescID.Default.(func() pulid.ID)
	shipmentpalletMixin := schema.ShipmentPallet{}.Mixin()
	shipmentpallet.Policy = privacy.NewPolicies(shipmentpalletMixin[0], shipmentpalletMixin[1], schema.ShipmentPallet{})
	shipmentpallet.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentpallet.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentpalletMixinFields2 := shipmentpalletMixin[2].Fields()
	_ = shipmentpalletMixinFields2
	shipmentpalletFields := schema.ShipmentPallet{}.Fields()
	_ = shipmentpalletFields
	// shipmentpalletDescID is the schema descriptor for id field.
	shipmentpalletDescID := shipmentpalletMixinFields2[0].Descriptor()
	// shipmentpallet.DefaultID holds the default value on creation for the id field.
	shipmentpallet.DefaultID = shipmentpalletDescID.Default.(func() pulid.ID)
	shipmentparcelMixin := schema.ShipmentParcel{}.Mixin()
	shipmentparcel.Policy = privacy.NewPolicies(shipmentparcelMixin[0], shipmentparcelMixin[1], schema.ShipmentParcel{})
	shipmentparcel.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentparcel.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentparcelHooks := schema.ShipmentParcel{}.Hooks()

	shipmentparcel.Hooks[1] = shipmentparcelHooks[0]

	shipmentparcel.Hooks[2] = shipmentparcelHooks[1]

	shipmentparcel.Hooks[3] = shipmentparcelHooks[2]
	shipmentparcelMixinFields2 := shipmentparcelMixin[2].Fields()
	_ = shipmentparcelMixinFields2
	shipmentparcelFields := schema.ShipmentParcel{}.Fields()
	_ = shipmentparcelFields
	// shipmentparcelDescID is the schema descriptor for id field.
	shipmentparcelDescID := shipmentparcelMixinFields2[0].Descriptor()
	// shipmentparcel.DefaultID holds the default value on creation for the id field.
	shipmentparcel.DefaultID = shipmentparcelDescID.Default.(func() pulid.ID)
	shipmentpostnordMixin := schema.ShipmentPostNord{}.Mixin()
	shipmentpostnord.Policy = privacy.NewPolicies(shipmentpostnordMixin[0], shipmentpostnordMixin[1], schema.ShipmentPostNord{})
	shipmentpostnord.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentpostnord.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentpostnordMixinFields2 := shipmentpostnordMixin[2].Fields()
	_ = shipmentpostnordMixinFields2
	shipmentpostnordFields := schema.ShipmentPostNord{}.Fields()
	_ = shipmentpostnordFields
	// shipmentpostnordDescID is the schema descriptor for id field.
	shipmentpostnordDescID := shipmentpostnordMixinFields2[0].Descriptor()
	// shipmentpostnord.DefaultID holds the default value on creation for the id field.
	shipmentpostnord.DefaultID = shipmentpostnordDescID.Default.(func() pulid.ID)
	shipmentuspsMixin := schema.ShipmentUSPS{}.Mixin()
	shipmentusps.Policy = privacy.NewPolicies(shipmentuspsMixin[0], shipmentuspsMixin[1], schema.ShipmentUSPS{})
	shipmentusps.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := shipmentusps.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	shipmentuspsMixinFields2 := shipmentuspsMixin[2].Fields()
	_ = shipmentuspsMixinFields2
	shipmentuspsFields := schema.ShipmentUSPS{}.Fields()
	_ = shipmentuspsFields
	// shipmentuspsDescID is the schema descriptor for id field.
	shipmentuspsDescID := shipmentuspsMixinFields2[0].Descriptor()
	// shipmentusps.DefaultID holds the default value on creation for the id field.
	shipmentusps.DefaultID = shipmentuspsDescID.Default.(func() pulid.ID)
	signupoptionsMixin := schema.SignupOptions{}.Mixin()
	signupoptions.Policy = privacy.NewPolicies(signupoptionsMixin[0], schema.SignupOptions{})
	signupoptions.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := signupoptions.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	signupoptionsMixinFields1 := signupoptionsMixin[1].Fields()
	_ = signupoptionsMixinFields1
	signupoptionsFields := schema.SignupOptions{}.Fields()
	_ = signupoptionsFields
	// signupoptionsDescID is the schema descriptor for id field.
	signupoptionsDescID := signupoptionsMixinFields1[0].Descriptor()
	// signupoptions.DefaultID holds the default value on creation for the id field.
	signupoptions.DefaultID = signupoptionsDescID.Default.(func() pulid.ID)
	systemeventsMixin := schema.SystemEvents{}.Mixin()
	systemevents.Policy = privacy.NewPolicies(systemeventsMixin[0], systemeventsMixin[1], schema.SystemEvents{})
	systemevents.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := systemevents.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	systemeventsMixinFields2 := systemeventsMixin[2].Fields()
	_ = systemeventsMixinFields2
	systemeventsFields := schema.SystemEvents{}.Fields()
	_ = systemeventsFields
	// systemeventsDescUpdatedAt is the schema descriptor for updated_at field.
	systemeventsDescUpdatedAt := systemeventsFields[5].Descriptor()
	// systemevents.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	systemevents.DefaultUpdatedAt = systemeventsDescUpdatedAt.Default.(func() time.Time)
	// systemevents.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	systemevents.UpdateDefaultUpdatedAt = systemeventsDescUpdatedAt.UpdateDefault.(func() time.Time)
	// systemeventsDescCreatedAt is the schema descriptor for created_at field.
	systemeventsDescCreatedAt := systemeventsFields[6].Descriptor()
	// systemevents.DefaultCreatedAt holds the default value on creation for the created_at field.
	systemevents.DefaultCreatedAt = systemeventsDescCreatedAt.Default.(func() time.Time)
	// systemeventsDescID is the schema descriptor for id field.
	systemeventsDescID := systemeventsMixinFields2[0].Descriptor()
	// systemevents.DefaultID holds the default value on creation for the id field.
	systemevents.DefaultID = systemeventsDescID.Default.(func() pulid.ID)
	tenantMixin := schema.Tenant{}.Mixin()
	tenant.Policy = privacy.NewPolicies(tenantMixin[0], schema.Tenant{})
	tenant.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := tenant.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	tenantMixinFields1 := tenantMixin[1].Fields()
	_ = tenantMixinFields1
	tenantFields := schema.Tenant{}.Fields()
	_ = tenantFields
	// tenantDescName is the schema descriptor for name field.
	tenantDescName := tenantFields[0].Descriptor()
	// tenant.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tenant.NameValidator = tenantDescName.Validators[0].(func(string) error)
	// tenantDescID is the schema descriptor for id field.
	tenantDescID := tenantMixinFields1[0].Descriptor()
	// tenant.DefaultID holds the default value on creation for the id field.
	tenant.DefaultID = tenantDescID.Default.(func() pulid.ID)
	userMixin := schema.User{}.Mixin()
	user.Policy = privacy.NewPolicies(userMixin[0], userMixin[1], schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userHooks := schema.User{}.Hooks()

	user.Hooks[1] = userHooks[0]

	user.Hooks[2] = userHooks[1]
	userMixinFields2 := userMixin[2].Fields()
	_ = userMixinFields2
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescIsAccountOwner is the schema descriptor for is_account_owner field.
	userDescIsAccountOwner := userFields[6].Descriptor()
	// user.DefaultIsAccountOwner holds the default value on creation for the is_account_owner field.
	user.DefaultIsAccountOwner = userDescIsAccountOwner.Default.(bool)
	// userDescIsGlobalAdmin is the schema descriptor for is_global_admin field.
	userDescIsGlobalAdmin := userFields[7].Descriptor()
	// user.DefaultIsGlobalAdmin holds the default value on creation for the is_global_admin field.
	user.DefaultIsGlobalAdmin = userDescIsGlobalAdmin.Default.(bool)
	// userDescMarketingConsent is the schema descriptor for marketing_consent field.
	userDescMarketingConsent := userFields[8].Descriptor()
	// user.DefaultMarketingConsent holds the default value on creation for the marketing_consent field.
	user.DefaultMarketingConsent = userDescMarketingConsent.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[9].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields2[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() pulid.ID)
	userseatMixin := schema.UserSeat{}.Mixin()
	userseat.Policy = privacy.NewPolicies(userseatMixin[0], userseatMixin[1], schema.UserSeat{})
	userseat.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := userseat.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userseatMixinFields2 := userseatMixin[2].Fields()
	_ = userseatMixinFields2
	userseatFields := schema.UserSeat{}.Fields()
	_ = userseatFields
	// userseatDescEmail is the schema descriptor for email field.
	userseatDescEmail := userseatFields[2].Descriptor()
	// userseat.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	userseat.EmailValidator = userseatDescEmail.Validators[0].(func(string) error)
	// userseatDescCreatedAt is the schema descriptor for created_at field.
	userseatDescCreatedAt := userseatFields[5].Descriptor()
	// userseat.DefaultCreatedAt holds the default value on creation for the created_at field.
	userseat.DefaultCreatedAt = userseatDescCreatedAt.Default.(func() time.Time)
	// userseatDescID is the schema descriptor for id field.
	userseatDescID := userseatMixinFields2[0].Descriptor()
	// userseat.DefaultID holds the default value on creation for the id field.
	userseat.DefaultID = userseatDescID.Default.(func() pulid.ID)
	workspacerecentscanMixin := schema.WorkspaceRecentScan{}.Mixin()
	workspacerecentscan.Policy = privacy.NewPolicies(workspacerecentscanMixin[0], workspacerecentscanMixin[1], schema.WorkspaceRecentScan{})
	workspacerecentscan.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := workspacerecentscan.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	workspacerecentscanMixinFields2 := workspacerecentscanMixin[2].Fields()
	_ = workspacerecentscanMixinFields2
	workspacerecentscanFields := schema.WorkspaceRecentScan{}.Fields()
	_ = workspacerecentscanFields
	// workspacerecentscanDescCreatedAt is the schema descriptor for created_at field.
	workspacerecentscanDescCreatedAt := workspacerecentscanFields[0].Descriptor()
	// workspacerecentscan.DefaultCreatedAt holds the default value on creation for the created_at field.
	workspacerecentscan.DefaultCreatedAt = workspacerecentscanDescCreatedAt.Default.(func() time.Time)
	// workspacerecentscanDescID is the schema descriptor for id field.
	workspacerecentscanDescID := workspacerecentscanMixinFields2[0].Descriptor()
	// workspacerecentscan.DefaultID holds the default value on creation for the id field.
	workspacerecentscan.DefaultID = workspacerecentscanDescID.Default.(func() pulid.ID)
	workstationMixin := schema.Workstation{}.Mixin()
	workstation.Policy = privacy.NewPolicies(workstationMixin[0], workstationMixin[1], schema.Workstation{})
	workstation.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := workstation.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	workstationMixinInters3 := workstationMixin[3].Interceptors()
	workstation.Interceptors[0] = workstationMixinInters3[0]
	workstationMixinFields2 := workstationMixin[2].Fields()
	_ = workstationMixinFields2
	workstationFields := schema.Workstation{}.Fields()
	_ = workstationFields
	// workstationDescCreatedAt is the schema descriptor for created_at field.
	workstationDescCreatedAt := workstationFields[4].Descriptor()
	// workstation.DefaultCreatedAt holds the default value on creation for the created_at field.
	workstation.DefaultCreatedAt = workstationDescCreatedAt.Default.(func() time.Time)
	// workstationDescAutoPrintReceiver is the schema descriptor for auto_print_receiver field.
	workstationDescAutoPrintReceiver := workstationFields[7].Descriptor()
	// workstation.DefaultAutoPrintReceiver holds the default value on creation for the auto_print_receiver field.
	workstation.DefaultAutoPrintReceiver = workstationDescAutoPrintReceiver.Default.(bool)
	// workstationDescID is the schema descriptor for id field.
	workstationDescID := workstationMixinFields2[0].Descriptor()
	// workstation.DefaultID holds the default value on creation for the id field.
	workstation.DefaultID = workstationDescID.Default.(func() pulid.ID)
}

const (
	Version = "v0.14.0"                                         // Version of ent codegen.
	Sum     = "h1:EO3Z9aZ5bXJatJeGqu/EVdnNr6K4mRq3rWe5owt0MC4=" // Sum of ent codegen.
)
