// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/currency"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Currency is the model entity for the Currency schema.
type Currency struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Display holds the value of the "display" field.
	Display string `json:"display,omitempty"`
	// CurrencyCode holds the value of the "currency_code" field.
	CurrencyCode currency.CurrencyCode `json:"currency_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CurrencyQuery when eager-loading is set.
	Edges        CurrencyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CurrencyEdges holds the relations/edges for other nodes in the graph.
type CurrencyEdges struct {
	// OrderLine holds the value of the order_line edge.
	OrderLine []*OrderLine `json:"order_line,omitempty"`
	// DeliveryRule holds the value of the delivery_rule edge.
	DeliveryRule []*DeliveryRule `json:"delivery_rule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedOrderLine    map[string][]*OrderLine
	namedDeliveryRule map[string][]*DeliveryRule
}

// OrderLineOrErr returns the OrderLine value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencyEdges) OrderLineOrErr() ([]*OrderLine, error) {
	if e.loadedTypes[0] {
		return e.OrderLine, nil
	}
	return nil, &NotLoadedError{edge: "order_line"}
}

// DeliveryRuleOrErr returns the DeliveryRule value or an error if the edge
// was not loaded in eager-loading.
func (e CurrencyEdges) DeliveryRuleOrErr() ([]*DeliveryRule, error) {
	if e.loadedTypes[1] {
		return e.DeliveryRule, nil
	}
	return nil, &NotLoadedError{edge: "delivery_rule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Currency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case currency.FieldID:
			values[i] = new(pulid.ID)
		case currency.FieldDisplay, currency.FieldCurrencyCode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Currency fields.
func (c *Currency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case currency.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case currency.FieldDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display", values[i])
			} else if value.Valid {
				c.Display = value.String
			}
		case currency.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				c.CurrencyCode = currency.CurrencyCode(value.String)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Currency.
// This includes values selected through modifiers, order, etc.
func (c *Currency) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryOrderLine queries the "order_line" edge of the Currency entity.
func (c *Currency) QueryOrderLine() *OrderLineQuery {
	return NewCurrencyClient(c.config).QueryOrderLine(c)
}

// QueryDeliveryRule queries the "delivery_rule" edge of the Currency entity.
func (c *Currency) QueryDeliveryRule() *DeliveryRuleQuery {
	return NewCurrencyClient(c.config).QueryDeliveryRule(c)
}

// Update returns a builder for updating this Currency.
// Note that you need to call Currency.Unwrap() before calling this method if this Currency
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Currency) Update() *CurrencyUpdateOne {
	return NewCurrencyClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Currency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Currency) Unwrap() *Currency {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Currency is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Currency) String() string {
	var builder strings.Builder
	builder.WriteString("Currency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("display=")
	builder.WriteString(c.Display)
	builder.WriteString(", ")
	builder.WriteString("currency_code=")
	builder.WriteString(fmt.Sprintf("%v", c.CurrencyCode))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrderLine returns the OrderLine named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Currency) NamedOrderLine(name string) ([]*OrderLine, error) {
	if c.Edges.namedOrderLine == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedOrderLine[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Currency) appendNamedOrderLine(name string, edges ...*OrderLine) {
	if c.Edges.namedOrderLine == nil {
		c.Edges.namedOrderLine = make(map[string][]*OrderLine)
	}
	if len(edges) == 0 {
		c.Edges.namedOrderLine[name] = []*OrderLine{}
	} else {
		c.Edges.namedOrderLine[name] = append(c.Edges.namedOrderLine[name], edges...)
	}
}

// NamedDeliveryRule returns the DeliveryRule named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Currency) NamedDeliveryRule(name string) ([]*DeliveryRule, error) {
	if c.Edges.namedDeliveryRule == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDeliveryRule[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Currency) appendNamedDeliveryRule(name string, edges ...*DeliveryRule) {
	if c.Edges.namedDeliveryRule == nil {
		c.Edges.namedDeliveryRule = make(map[string][]*DeliveryRule)
	}
	if len(edges) == 0 {
		c.Edges.namedDeliveryRule[name] = []*DeliveryRule{}
	} else {
		c.Edges.namedDeliveryRule[name] = append(c.Edges.namedDeliveryRule[name], edges...)
	}
}

// Currencies is a parsable slice of Currency.
type Currencies []*Currency
