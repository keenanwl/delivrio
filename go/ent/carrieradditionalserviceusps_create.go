// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceUSPSCreate is the builder for creating a CarrierAdditionalServiceUSPS entity.
type CarrierAdditionalServiceUSPSCreate struct {
	config
	mutation *CarrierAdditionalServiceUSPSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetLabel(s string) *CarrierAdditionalServiceUSPSCreate {
	casuc.mutation.SetLabel(s)
	return casuc
}

// SetCommonlyUsed sets the "commonly_used" field.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetCommonlyUsed(b bool) *CarrierAdditionalServiceUSPSCreate {
	casuc.mutation.SetCommonlyUsed(b)
	return casuc
}

// SetNillableCommonlyUsed sets the "commonly_used" field if the given value is not nil.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetNillableCommonlyUsed(b *bool) *CarrierAdditionalServiceUSPSCreate {
	if b != nil {
		casuc.SetCommonlyUsed(*b)
	}
	return casuc
}

// SetInternalID sets the "internal_id" field.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetInternalID(ci carrieradditionalserviceusps.InternalID) *CarrierAdditionalServiceUSPSCreate {
	casuc.mutation.SetInternalID(ci)
	return casuc
}

// SetAPICode sets the "api_code" field.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetAPICode(s string) *CarrierAdditionalServiceUSPSCreate {
	casuc.mutation.SetAPICode(s)
	return casuc
}

// SetID sets the "id" field.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetID(pu pulid.ID) *CarrierAdditionalServiceUSPSCreate {
	casuc.mutation.SetID(pu)
	return casuc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetNillableID(pu *pulid.ID) *CarrierAdditionalServiceUSPSCreate {
	if pu != nil {
		casuc.SetID(*pu)
	}
	return casuc
}

// SetCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetCarrierServiceUSPSID(id pulid.ID) *CarrierAdditionalServiceUSPSCreate {
	casuc.mutation.SetCarrierServiceUSPSID(id)
	return casuc
}

// SetNillableCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID if the given value is not nil.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetNillableCarrierServiceUSPSID(id *pulid.ID) *CarrierAdditionalServiceUSPSCreate {
	if id != nil {
		casuc = casuc.SetCarrierServiceUSPSID(*id)
	}
	return casuc
}

// SetCarrierServiceUSPS sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (casuc *CarrierAdditionalServiceUSPSCreate) SetCarrierServiceUSPS(c *CarrierServiceUSPS) *CarrierAdditionalServiceUSPSCreate {
	return casuc.SetCarrierServiceUSPSID(c.ID)
}

// AddDeliveryOptionUspIDs adds the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by IDs.
func (casuc *CarrierAdditionalServiceUSPSCreate) AddDeliveryOptionUspIDs(ids ...pulid.ID) *CarrierAdditionalServiceUSPSCreate {
	casuc.mutation.AddDeliveryOptionUspIDs(ids...)
	return casuc
}

// AddDeliveryOptionUSPS adds the "delivery_option_usps" edges to the DeliveryOptionUSPS entity.
func (casuc *CarrierAdditionalServiceUSPSCreate) AddDeliveryOptionUSPS(d ...*DeliveryOptionUSPS) *CarrierAdditionalServiceUSPSCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casuc.AddDeliveryOptionUspIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceUSPSMutation object of the builder.
func (casuc *CarrierAdditionalServiceUSPSCreate) Mutation() *CarrierAdditionalServiceUSPSMutation {
	return casuc.mutation
}

// Save creates the CarrierAdditionalServiceUSPS in the database.
func (casuc *CarrierAdditionalServiceUSPSCreate) Save(ctx context.Context) (*CarrierAdditionalServiceUSPS, error) {
	if err := casuc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, casuc.sqlSave, casuc.mutation, casuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (casuc *CarrierAdditionalServiceUSPSCreate) SaveX(ctx context.Context) *CarrierAdditionalServiceUSPS {
	v, err := casuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (casuc *CarrierAdditionalServiceUSPSCreate) Exec(ctx context.Context) error {
	_, err := casuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casuc *CarrierAdditionalServiceUSPSCreate) ExecX(ctx context.Context) {
	if err := casuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (casuc *CarrierAdditionalServiceUSPSCreate) defaults() error {
	if _, ok := casuc.mutation.CommonlyUsed(); !ok {
		v := carrieradditionalserviceusps.DefaultCommonlyUsed
		casuc.mutation.SetCommonlyUsed(v)
	}
	if _, ok := casuc.mutation.ID(); !ok {
		if carrieradditionalserviceusps.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrieradditionalserviceusps.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrieradditionalserviceusps.DefaultID()
		casuc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (casuc *CarrierAdditionalServiceUSPSCreate) check() error {
	if _, ok := casuc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "CarrierAdditionalServiceUSPS.label"`)}
	}
	if _, ok := casuc.mutation.CommonlyUsed(); !ok {
		return &ValidationError{Name: "commonly_used", err: errors.New(`ent: missing required field "CarrierAdditionalServiceUSPS.commonly_used"`)}
	}
	if _, ok := casuc.mutation.InternalID(); !ok {
		return &ValidationError{Name: "internal_id", err: errors.New(`ent: missing required field "CarrierAdditionalServiceUSPS.internal_id"`)}
	}
	if v, ok := casuc.mutation.InternalID(); ok {
		if err := carrieradditionalserviceusps.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "CarrierAdditionalServiceUSPS.internal_id": %w`, err)}
		}
	}
	if _, ok := casuc.mutation.APICode(); !ok {
		return &ValidationError{Name: "api_code", err: errors.New(`ent: missing required field "CarrierAdditionalServiceUSPS.api_code"`)}
	}
	return nil
}

func (casuc *CarrierAdditionalServiceUSPSCreate) sqlSave(ctx context.Context) (*CarrierAdditionalServiceUSPS, error) {
	if err := casuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := casuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, casuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	casuc.mutation.id = &_node.ID
	casuc.mutation.done = true
	return _node, nil
}

func (casuc *CarrierAdditionalServiceUSPSCreate) createSpec() (*CarrierAdditionalServiceUSPS, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierAdditionalServiceUSPS{config: casuc.config}
		_spec = sqlgraph.NewCreateSpec(carrieradditionalserviceusps.Table, sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString))
	)
	_spec.OnConflict = casuc.conflict
	if id, ok := casuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := casuc.mutation.Label(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := casuc.mutation.CommonlyUsed(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldCommonlyUsed, field.TypeBool, value)
		_node.CommonlyUsed = value
	}
	if value, ok := casuc.mutation.InternalID(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldInternalID, field.TypeEnum, value)
		_node.InternalID = value
	}
	if value, ok := casuc.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldAPICode, field.TypeString, value)
		_node.APICode = value
	}
	if nodes := casuc.mutation.CarrierServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalserviceusps.CarrierServiceUSPSTable,
			Columns: []string{carrieradditionalserviceusps.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_service_usps_carrier_additional_service_usps = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := casuc.mutation.DeliveryOptionUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceusps.DeliveryOptionUSPSTable,
			Columns: carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierAdditionalServiceUSPS.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierAdditionalServiceUSPSUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (casuc *CarrierAdditionalServiceUSPSCreate) OnConflict(opts ...sql.ConflictOption) *CarrierAdditionalServiceUSPSUpsertOne {
	casuc.conflict = opts
	return &CarrierAdditionalServiceUSPSUpsertOne{
		create: casuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (casuc *CarrierAdditionalServiceUSPSCreate) OnConflictColumns(columns ...string) *CarrierAdditionalServiceUSPSUpsertOne {
	casuc.conflict = append(casuc.conflict, sql.ConflictColumns(columns...))
	return &CarrierAdditionalServiceUSPSUpsertOne{
		create: casuc,
	}
}

type (
	// CarrierAdditionalServiceUSPSUpsertOne is the builder for "upsert"-ing
	//  one CarrierAdditionalServiceUSPS node.
	CarrierAdditionalServiceUSPSUpsertOne struct {
		create *CarrierAdditionalServiceUSPSCreate
	}

	// CarrierAdditionalServiceUSPSUpsert is the "OnConflict" setter.
	CarrierAdditionalServiceUSPSUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceUSPSUpsert) SetLabel(v string) *CarrierAdditionalServiceUSPSUpsert {
	u.Set(carrieradditionalserviceusps.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsert) UpdateLabel() *CarrierAdditionalServiceUSPSUpsert {
	u.SetExcluded(carrieradditionalserviceusps.FieldLabel)
	return u
}

// SetCommonlyUsed sets the "commonly_used" field.
func (u *CarrierAdditionalServiceUSPSUpsert) SetCommonlyUsed(v bool) *CarrierAdditionalServiceUSPSUpsert {
	u.Set(carrieradditionalserviceusps.FieldCommonlyUsed, v)
	return u
}

// UpdateCommonlyUsed sets the "commonly_used" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsert) UpdateCommonlyUsed() *CarrierAdditionalServiceUSPSUpsert {
	u.SetExcluded(carrieradditionalserviceusps.FieldCommonlyUsed)
	return u
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierAdditionalServiceUSPSUpsert) SetInternalID(v carrieradditionalserviceusps.InternalID) *CarrierAdditionalServiceUSPSUpsert {
	u.Set(carrieradditionalserviceusps.FieldInternalID, v)
	return u
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsert) UpdateInternalID() *CarrierAdditionalServiceUSPSUpsert {
	u.SetExcluded(carrieradditionalserviceusps.FieldInternalID)
	return u
}

// SetAPICode sets the "api_code" field.
func (u *CarrierAdditionalServiceUSPSUpsert) SetAPICode(v string) *CarrierAdditionalServiceUSPSUpsert {
	u.Set(carrieradditionalserviceusps.FieldAPICode, v)
	return u
}

// UpdateAPICode sets the "api_code" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsert) UpdateAPICode() *CarrierAdditionalServiceUSPSUpsert {
	u.SetExcluded(carrieradditionalserviceusps.FieldAPICode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrieradditionalserviceusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierAdditionalServiceUSPSUpsertOne) UpdateNewValues() *CarrierAdditionalServiceUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrieradditionalserviceusps.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceUSPS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierAdditionalServiceUSPSUpsertOne) Ignore() *CarrierAdditionalServiceUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierAdditionalServiceUSPSUpsertOne) DoNothing() *CarrierAdditionalServiceUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierAdditionalServiceUSPSCreate.OnConflict
// documentation for more info.
func (u *CarrierAdditionalServiceUSPSUpsertOne) Update(set func(*CarrierAdditionalServiceUSPSUpsert)) *CarrierAdditionalServiceUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierAdditionalServiceUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceUSPSUpsertOne) SetLabel(v string) *CarrierAdditionalServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsertOne) UpdateLabel() *CarrierAdditionalServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.UpdateLabel()
	})
}

// SetCommonlyUsed sets the "commonly_used" field.
func (u *CarrierAdditionalServiceUSPSUpsertOne) SetCommonlyUsed(v bool) *CarrierAdditionalServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.SetCommonlyUsed(v)
	})
}

// UpdateCommonlyUsed sets the "commonly_used" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsertOne) UpdateCommonlyUsed() *CarrierAdditionalServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.UpdateCommonlyUsed()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierAdditionalServiceUSPSUpsertOne) SetInternalID(v carrieradditionalserviceusps.InternalID) *CarrierAdditionalServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsertOne) UpdateInternalID() *CarrierAdditionalServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.UpdateInternalID()
	})
}

// SetAPICode sets the "api_code" field.
func (u *CarrierAdditionalServiceUSPSUpsertOne) SetAPICode(v string) *CarrierAdditionalServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.SetAPICode(v)
	})
}

// UpdateAPICode sets the "api_code" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsertOne) UpdateAPICode() *CarrierAdditionalServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.UpdateAPICode()
	})
}

// Exec executes the query.
func (u *CarrierAdditionalServiceUSPSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierAdditionalServiceUSPSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierAdditionalServiceUSPSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierAdditionalServiceUSPSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierAdditionalServiceUSPSUpsertOne.ID is not supported by MySQL driver. Use CarrierAdditionalServiceUSPSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierAdditionalServiceUSPSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierAdditionalServiceUSPSCreateBulk is the builder for creating many CarrierAdditionalServiceUSPS entities in bulk.
type CarrierAdditionalServiceUSPSCreateBulk struct {
	config
	err      error
	builders []*CarrierAdditionalServiceUSPSCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierAdditionalServiceUSPS entities in the database.
func (casucb *CarrierAdditionalServiceUSPSCreateBulk) Save(ctx context.Context) ([]*CarrierAdditionalServiceUSPS, error) {
	if casucb.err != nil {
		return nil, casucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(casucb.builders))
	nodes := make([]*CarrierAdditionalServiceUSPS, len(casucb.builders))
	mutators := make([]Mutator, len(casucb.builders))
	for i := range casucb.builders {
		func(i int, root context.Context) {
			builder := casucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierAdditionalServiceUSPSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, casucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = casucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, casucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, casucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (casucb *CarrierAdditionalServiceUSPSCreateBulk) SaveX(ctx context.Context) []*CarrierAdditionalServiceUSPS {
	v, err := casucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (casucb *CarrierAdditionalServiceUSPSCreateBulk) Exec(ctx context.Context) error {
	_, err := casucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casucb *CarrierAdditionalServiceUSPSCreateBulk) ExecX(ctx context.Context) {
	if err := casucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierAdditionalServiceUSPS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierAdditionalServiceUSPSUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (casucb *CarrierAdditionalServiceUSPSCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierAdditionalServiceUSPSUpsertBulk {
	casucb.conflict = opts
	return &CarrierAdditionalServiceUSPSUpsertBulk{
		create: casucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (casucb *CarrierAdditionalServiceUSPSCreateBulk) OnConflictColumns(columns ...string) *CarrierAdditionalServiceUSPSUpsertBulk {
	casucb.conflict = append(casucb.conflict, sql.ConflictColumns(columns...))
	return &CarrierAdditionalServiceUSPSUpsertBulk{
		create: casucb,
	}
}

// CarrierAdditionalServiceUSPSUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierAdditionalServiceUSPS nodes.
type CarrierAdditionalServiceUSPSUpsertBulk struct {
	create *CarrierAdditionalServiceUSPSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrieradditionalserviceusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierAdditionalServiceUSPSUpsertBulk) UpdateNewValues() *CarrierAdditionalServiceUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrieradditionalserviceusps.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceUSPS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierAdditionalServiceUSPSUpsertBulk) Ignore() *CarrierAdditionalServiceUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) DoNothing() *CarrierAdditionalServiceUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierAdditionalServiceUSPSCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) Update(set func(*CarrierAdditionalServiceUSPSUpsert)) *CarrierAdditionalServiceUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierAdditionalServiceUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) SetLabel(v string) *CarrierAdditionalServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) UpdateLabel() *CarrierAdditionalServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.UpdateLabel()
	})
}

// SetCommonlyUsed sets the "commonly_used" field.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) SetCommonlyUsed(v bool) *CarrierAdditionalServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.SetCommonlyUsed(v)
	})
}

// UpdateCommonlyUsed sets the "commonly_used" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) UpdateCommonlyUsed() *CarrierAdditionalServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.UpdateCommonlyUsed()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) SetInternalID(v carrieradditionalserviceusps.InternalID) *CarrierAdditionalServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) UpdateInternalID() *CarrierAdditionalServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.UpdateInternalID()
	})
}

// SetAPICode sets the "api_code" field.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) SetAPICode(v string) *CarrierAdditionalServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.SetAPICode(v)
	})
}

// UpdateAPICode sets the "api_code" field to the value that was provided on create.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) UpdateAPICode() *CarrierAdditionalServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceUSPSUpsert) {
		s.UpdateAPICode()
	})
}

// Exec executes the query.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierAdditionalServiceUSPSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierAdditionalServiceUSPSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierAdditionalServiceUSPSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
