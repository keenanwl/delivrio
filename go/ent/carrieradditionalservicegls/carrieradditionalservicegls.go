// Code generated by ent, DO NOT EDIT.

package carrieradditionalservicegls

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrieradditionalservicegls type in the database.
	Label = "carrier_additional_service_gls"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldMandatory holds the string denoting the mandatory field in the database.
	FieldMandatory = "mandatory"
	// FieldAllCountriesConsignor holds the string denoting the all_countries_consignor field in the database.
	FieldAllCountriesConsignor = "all_countries_consignor"
	// FieldAllCountriesConsignee holds the string denoting the all_countries_consignee field in the database.
	FieldAllCountriesConsignee = "all_countries_consignee"
	// FieldInternalID holds the string denoting the internal_id field in the database.
	FieldInternalID = "internal_id"
	// EdgeCarrierServiceGLS holds the string denoting the carrier_service_gls edge name in mutations.
	EdgeCarrierServiceGLS = "carrier_service_gls"
	// EdgeDeliveryOptionGLS holds the string denoting the delivery_option_gls edge name in mutations.
	EdgeDeliveryOptionGLS = "delivery_option_gls"
	// EdgeCountriesConsignee holds the string denoting the countries_consignee edge name in mutations.
	EdgeCountriesConsignee = "countries_consignee"
	// EdgeCountriesConsignor holds the string denoting the countries_consignor edge name in mutations.
	EdgeCountriesConsignor = "countries_consignor"
	// Table holds the table name of the carrieradditionalservicegls in the database.
	Table = "carrier_additional_service_gl_ss"
	// CarrierServiceGLSTable is the table that holds the carrier_service_gls relation/edge.
	CarrierServiceGLSTable = "carrier_additional_service_gl_ss"
	// CarrierServiceGLSInverseTable is the table name for the CarrierServiceGLS entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicegls" package.
	CarrierServiceGLSInverseTable = "carrier_service_gl_ss"
	// CarrierServiceGLSColumn is the table column denoting the carrier_service_gls relation/edge.
	CarrierServiceGLSColumn = "carrier_service_gls_carrier_additional_service_gls"
	// DeliveryOptionGLSTable is the table that holds the delivery_option_gls relation/edge. The primary key declared below.
	DeliveryOptionGLSTable = "delivery_option_gls_carrier_additional_service_gls"
	// DeliveryOptionGLSInverseTable is the table name for the DeliveryOptionGLS entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptiongls" package.
	DeliveryOptionGLSInverseTable = "delivery_option_gl_ss"
	// CountriesConsigneeTable is the table that holds the countries_consignee relation/edge. The primary key declared below.
	CountriesConsigneeTable = "carrier_additional_service_gls_countries_consignee"
	// CountriesConsigneeInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountriesConsigneeInverseTable = "countries"
	// CountriesConsignorTable is the table that holds the countries_consignor relation/edge. The primary key declared below.
	CountriesConsignorTable = "carrier_additional_service_gls_countries_consignor"
	// CountriesConsignorInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountriesConsignorInverseTable = "countries"
)

// Columns holds all SQL columns for carrieradditionalservicegls fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldMandatory,
	FieldAllCountriesConsignor,
	FieldAllCountriesConsignee,
	FieldInternalID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_additional_service_gl_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_service_gls_carrier_additional_service_gls",
}

var (
	// DeliveryOptionGLSPrimaryKey and DeliveryOptionGLSColumn2 are the table columns denoting the
	// primary key for the delivery_option_gls relation (M2M).
	DeliveryOptionGLSPrimaryKey = []string{"delivery_option_gls_id", "carrier_additional_service_gls_id"}
	// CountriesConsigneePrimaryKey and CountriesConsigneeColumn2 are the table columns denoting the
	// primary key for the countries_consignee relation (M2M).
	CountriesConsigneePrimaryKey = []string{"carrier_additional_service_gls_id", "country_id"}
	// CountriesConsignorPrimaryKey and CountriesConsignorColumn2 are the table columns denoting the
	// primary key for the countries_consignor relation (M2M).
	CountriesConsignorPrimaryKey = []string{"carrier_additional_service_gls_id", "country_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultAllCountriesConsignor holds the default value on creation for the "all_countries_consignor" field.
	DefaultAllCountriesConsignor bool
	// DefaultAllCountriesConsignee holds the default value on creation for the "all_countries_consignee" field.
	DefaultAllCountriesConsignee bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierAdditionalServiceGLS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByMandatory orders the results by the mandatory field.
func ByMandatory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMandatory, opts...).ToFunc()
}

// ByAllCountriesConsignor orders the results by the all_countries_consignor field.
func ByAllCountriesConsignor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllCountriesConsignor, opts...).ToFunc()
}

// ByAllCountriesConsignee orders the results by the all_countries_consignee field.
func ByAllCountriesConsignee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllCountriesConsignee, opts...).ToFunc()
}

// ByInternalID orders the results by the internal_id field.
func ByInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalID, opts...).ToFunc()
}

// ByCarrierServiceGLSField orders the results by carrier_service_gls field.
func ByCarrierServiceGLSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceGLSStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionGLSCount orders the results by delivery_option_gls count.
func ByDeliveryOptionGLSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionGLSStep(), opts...)
	}
}

// ByDeliveryOptionGLS orders the results by delivery_option_gls terms.
func ByDeliveryOptionGLS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionGLSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCountriesConsigneeCount orders the results by countries_consignee count.
func ByCountriesConsigneeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCountriesConsigneeStep(), opts...)
	}
}

// ByCountriesConsignee orders the results by countries_consignee terms.
func ByCountriesConsignee(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountriesConsigneeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCountriesConsignorCount orders the results by countries_consignor count.
func ByCountriesConsignorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCountriesConsignorStep(), opts...)
	}
}

// ByCountriesConsignor orders the results by countries_consignor terms.
func ByCountriesConsignor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountriesConsignorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceGLSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceGLSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarrierServiceGLSTable, CarrierServiceGLSColumn),
	)
}
func newDeliveryOptionGLSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionGLSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionGLSTable, DeliveryOptionGLSPrimaryKey...),
	)
}
func newCountriesConsigneeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountriesConsigneeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CountriesConsigneeTable, CountriesConsigneePrimaryKey...),
	)
}
func newCountriesConsignorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountriesConsignorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CountriesConsignorTable, CountriesConsignorPrimaryKey...),
	)
}
