// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmailTemplateUpdate is the builder for updating EmailTemplate entities.
type EmailTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// Where appends a list predicates to the EmailTemplateUpdate builder.
func (etu *EmailTemplateUpdate) Where(ps ...predicate.EmailTemplate) *EmailTemplateUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetTenantID sets the "tenant_id" field.
func (etu *EmailTemplateUpdate) SetTenantID(pu pulid.ID) *EmailTemplateUpdate {
	etu.mutation.SetTenantID(pu)
	return etu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableTenantID(pu *pulid.ID) *EmailTemplateUpdate {
	if pu != nil {
		etu.SetTenantID(*pu)
	}
	return etu
}

// SetName sets the "name" field.
func (etu *EmailTemplateUpdate) SetName(s string) *EmailTemplateUpdate {
	etu.mutation.SetName(s)
	return etu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableName(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetName(*s)
	}
	return etu
}

// SetSubject sets the "subject" field.
func (etu *EmailTemplateUpdate) SetSubject(s string) *EmailTemplateUpdate {
	etu.mutation.SetSubject(s)
	return etu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableSubject(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetSubject(*s)
	}
	return etu
}

// SetHTMLTemplate sets the "html_template" field.
func (etu *EmailTemplateUpdate) SetHTMLTemplate(s string) *EmailTemplateUpdate {
	etu.mutation.SetHTMLTemplate(s)
	return etu
}

// SetNillableHTMLTemplate sets the "html_template" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableHTMLTemplate(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetHTMLTemplate(*s)
	}
	return etu
}

// SetMergeType sets the "merge_type" field.
func (etu *EmailTemplateUpdate) SetMergeType(et emailtemplate.MergeType) *EmailTemplateUpdate {
	etu.mutation.SetMergeType(et)
	return etu
}

// SetNillableMergeType sets the "merge_type" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableMergeType(et *emailtemplate.MergeType) *EmailTemplateUpdate {
	if et != nil {
		etu.SetMergeType(*et)
	}
	return etu
}

// SetUpdatedAt sets the "updated_at" field.
func (etu *EmailTemplateUpdate) SetUpdatedAt(t time.Time) *EmailTemplateUpdate {
	etu.mutation.SetUpdatedAt(t)
	return etu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (etu *EmailTemplateUpdate) SetTenant(t *Tenant) *EmailTemplateUpdate {
	return etu.SetTenantID(t.ID)
}

// AddReturnPortalConfirmationLabelIDs adds the "return_portal_confirmation_label" edge to the ReturnPortal entity by IDs.
func (etu *EmailTemplateUpdate) AddReturnPortalConfirmationLabelIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.AddReturnPortalConfirmationLabelIDs(ids...)
	return etu
}

// AddReturnPortalConfirmationLabel adds the "return_portal_confirmation_label" edges to the ReturnPortal entity.
func (etu *EmailTemplateUpdate) AddReturnPortalConfirmationLabel(r ...*ReturnPortal) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.AddReturnPortalConfirmationLabelIDs(ids...)
}

// AddReturnPortalConfirmationQrCodeIDs adds the "return_portal_confirmation_qr_code" edge to the ReturnPortal entity by IDs.
func (etu *EmailTemplateUpdate) AddReturnPortalConfirmationQrCodeIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.AddReturnPortalConfirmationQrCodeIDs(ids...)
	return etu
}

// AddReturnPortalConfirmationQrCode adds the "return_portal_confirmation_qr_code" edges to the ReturnPortal entity.
func (etu *EmailTemplateUpdate) AddReturnPortalConfirmationQrCode(r ...*ReturnPortal) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.AddReturnPortalConfirmationQrCodeIDs(ids...)
}

// AddReturnPortalReceivedIDs adds the "return_portal_received" edge to the ReturnPortal entity by IDs.
func (etu *EmailTemplateUpdate) AddReturnPortalReceivedIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.AddReturnPortalReceivedIDs(ids...)
	return etu
}

// AddReturnPortalReceived adds the "return_portal_received" edges to the ReturnPortal entity.
func (etu *EmailTemplateUpdate) AddReturnPortalReceived(r ...*ReturnPortal) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.AddReturnPortalReceivedIDs(ids...)
}

// AddReturnPortalAcceptedIDs adds the "return_portal_accepted" edge to the ReturnPortal entity by IDs.
func (etu *EmailTemplateUpdate) AddReturnPortalAcceptedIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.AddReturnPortalAcceptedIDs(ids...)
	return etu
}

// AddReturnPortalAccepted adds the "return_portal_accepted" edges to the ReturnPortal entity.
func (etu *EmailTemplateUpdate) AddReturnPortalAccepted(r ...*ReturnPortal) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.AddReturnPortalAcceptedIDs(ids...)
}

// AddDeliveryOptionClickCollectAtStoreIDs adds the "delivery_option_click_collect_at_store" edge to the DeliveryOption entity by IDs.
func (etu *EmailTemplateUpdate) AddDeliveryOptionClickCollectAtStoreIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.AddDeliveryOptionClickCollectAtStoreIDs(ids...)
	return etu
}

// AddDeliveryOptionClickCollectAtStore adds the "delivery_option_click_collect_at_store" edges to the DeliveryOption entity.
func (etu *EmailTemplateUpdate) AddDeliveryOptionClickCollectAtStore(d ...*DeliveryOption) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return etu.AddDeliveryOptionClickCollectAtStoreIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (etu *EmailTemplateUpdate) AddNotificationIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.AddNotificationIDs(ids...)
	return etu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (etu *EmailTemplateUpdate) AddNotifications(n ...*Notification) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return etu.AddNotificationIDs(ids...)
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etu *EmailTemplateUpdate) Mutation() *EmailTemplateMutation {
	return etu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (etu *EmailTemplateUpdate) ClearTenant() *EmailTemplateUpdate {
	etu.mutation.ClearTenant()
	return etu
}

// ClearReturnPortalConfirmationLabel clears all "return_portal_confirmation_label" edges to the ReturnPortal entity.
func (etu *EmailTemplateUpdate) ClearReturnPortalConfirmationLabel() *EmailTemplateUpdate {
	etu.mutation.ClearReturnPortalConfirmationLabel()
	return etu
}

// RemoveReturnPortalConfirmationLabelIDs removes the "return_portal_confirmation_label" edge to ReturnPortal entities by IDs.
func (etu *EmailTemplateUpdate) RemoveReturnPortalConfirmationLabelIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.RemoveReturnPortalConfirmationLabelIDs(ids...)
	return etu
}

// RemoveReturnPortalConfirmationLabel removes "return_portal_confirmation_label" edges to ReturnPortal entities.
func (etu *EmailTemplateUpdate) RemoveReturnPortalConfirmationLabel(r ...*ReturnPortal) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.RemoveReturnPortalConfirmationLabelIDs(ids...)
}

// ClearReturnPortalConfirmationQrCode clears all "return_portal_confirmation_qr_code" edges to the ReturnPortal entity.
func (etu *EmailTemplateUpdate) ClearReturnPortalConfirmationQrCode() *EmailTemplateUpdate {
	etu.mutation.ClearReturnPortalConfirmationQrCode()
	return etu
}

// RemoveReturnPortalConfirmationQrCodeIDs removes the "return_portal_confirmation_qr_code" edge to ReturnPortal entities by IDs.
func (etu *EmailTemplateUpdate) RemoveReturnPortalConfirmationQrCodeIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.RemoveReturnPortalConfirmationQrCodeIDs(ids...)
	return etu
}

// RemoveReturnPortalConfirmationQrCode removes "return_portal_confirmation_qr_code" edges to ReturnPortal entities.
func (etu *EmailTemplateUpdate) RemoveReturnPortalConfirmationQrCode(r ...*ReturnPortal) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.RemoveReturnPortalConfirmationQrCodeIDs(ids...)
}

// ClearReturnPortalReceived clears all "return_portal_received" edges to the ReturnPortal entity.
func (etu *EmailTemplateUpdate) ClearReturnPortalReceived() *EmailTemplateUpdate {
	etu.mutation.ClearReturnPortalReceived()
	return etu
}

// RemoveReturnPortalReceivedIDs removes the "return_portal_received" edge to ReturnPortal entities by IDs.
func (etu *EmailTemplateUpdate) RemoveReturnPortalReceivedIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.RemoveReturnPortalReceivedIDs(ids...)
	return etu
}

// RemoveReturnPortalReceived removes "return_portal_received" edges to ReturnPortal entities.
func (etu *EmailTemplateUpdate) RemoveReturnPortalReceived(r ...*ReturnPortal) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.RemoveReturnPortalReceivedIDs(ids...)
}

// ClearReturnPortalAccepted clears all "return_portal_accepted" edges to the ReturnPortal entity.
func (etu *EmailTemplateUpdate) ClearReturnPortalAccepted() *EmailTemplateUpdate {
	etu.mutation.ClearReturnPortalAccepted()
	return etu
}

// RemoveReturnPortalAcceptedIDs removes the "return_portal_accepted" edge to ReturnPortal entities by IDs.
func (etu *EmailTemplateUpdate) RemoveReturnPortalAcceptedIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.RemoveReturnPortalAcceptedIDs(ids...)
	return etu
}

// RemoveReturnPortalAccepted removes "return_portal_accepted" edges to ReturnPortal entities.
func (etu *EmailTemplateUpdate) RemoveReturnPortalAccepted(r ...*ReturnPortal) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.RemoveReturnPortalAcceptedIDs(ids...)
}

// ClearDeliveryOptionClickCollectAtStore clears all "delivery_option_click_collect_at_store" edges to the DeliveryOption entity.
func (etu *EmailTemplateUpdate) ClearDeliveryOptionClickCollectAtStore() *EmailTemplateUpdate {
	etu.mutation.ClearDeliveryOptionClickCollectAtStore()
	return etu
}

// RemoveDeliveryOptionClickCollectAtStoreIDs removes the "delivery_option_click_collect_at_store" edge to DeliveryOption entities by IDs.
func (etu *EmailTemplateUpdate) RemoveDeliveryOptionClickCollectAtStoreIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.RemoveDeliveryOptionClickCollectAtStoreIDs(ids...)
	return etu
}

// RemoveDeliveryOptionClickCollectAtStore removes "delivery_option_click_collect_at_store" edges to DeliveryOption entities.
func (etu *EmailTemplateUpdate) RemoveDeliveryOptionClickCollectAtStore(d ...*DeliveryOption) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return etu.RemoveDeliveryOptionClickCollectAtStoreIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (etu *EmailTemplateUpdate) ClearNotifications() *EmailTemplateUpdate {
	etu.mutation.ClearNotifications()
	return etu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (etu *EmailTemplateUpdate) RemoveNotificationIDs(ids ...pulid.ID) *EmailTemplateUpdate {
	etu.mutation.RemoveNotificationIDs(ids...)
	return etu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (etu *EmailTemplateUpdate) RemoveNotifications(n ...*Notification) *EmailTemplateUpdate {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return etu.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EmailTemplateUpdate) Save(ctx context.Context) (int, error) {
	if err := etu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, etu.sqlSave, etu.mutation, etu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EmailTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EmailTemplateUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EmailTemplateUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etu *EmailTemplateUpdate) defaults() error {
	if _, ok := etu.mutation.UpdatedAt(); !ok {
		if emailtemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := emailtemplate.UpdateDefaultUpdatedAt()
		etu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (etu *EmailTemplateUpdate) check() error {
	if v, ok := etu.mutation.Name(); ok {
		if err := emailtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.name": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if v, ok := etu.mutation.MergeType(); ok {
		if err := emailtemplate.MergeTypeValidator(v); err != nil {
			return &ValidationError{Name: "merge_type", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.merge_type": %w`, err)}
		}
	}
	if etu.mutation.TenantCleared() && len(etu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EmailTemplate.tenant"`)
	}
	return nil
}

func (etu *EmailTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := etu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailtemplate.Table, emailtemplate.Columns, sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString))
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.Name(); ok {
		_spec.SetField(emailtemplate.FieldName, field.TypeString, value)
	}
	if value, ok := etu.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
	}
	if value, ok := etu.mutation.HTMLTemplate(); ok {
		_spec.SetField(emailtemplate.FieldHTMLTemplate, field.TypeString, value)
	}
	if value, ok := etu.mutation.MergeType(); ok {
		_spec.SetField(emailtemplate.FieldMergeType, field.TypeEnum, value)
	}
	if etu.mutation.CreatedAtCleared() {
		_spec.ClearField(emailtemplate.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := etu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if etu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailtemplate.TenantTable,
			Columns: []string{emailtemplate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailtemplate.TenantTable,
			Columns: []string{emailtemplate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.ReturnPortalConfirmationLabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationLabelTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedReturnPortalConfirmationLabelIDs(); len(nodes) > 0 && !etu.mutation.ReturnPortalConfirmationLabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationLabelTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.ReturnPortalConfirmationLabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationLabelTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.ReturnPortalConfirmationQrCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationQrCodeTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedReturnPortalConfirmationQrCodeIDs(); len(nodes) > 0 && !etu.mutation.ReturnPortalConfirmationQrCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationQrCodeTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.ReturnPortalConfirmationQrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationQrCodeTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.ReturnPortalReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalReceivedTable,
			Columns: []string{emailtemplate.ReturnPortalReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedReturnPortalReceivedIDs(); len(nodes) > 0 && !etu.mutation.ReturnPortalReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalReceivedTable,
			Columns: []string{emailtemplate.ReturnPortalReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.ReturnPortalReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalReceivedTable,
			Columns: []string{emailtemplate.ReturnPortalReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.ReturnPortalAcceptedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalAcceptedTable,
			Columns: []string{emailtemplate.ReturnPortalAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedReturnPortalAcceptedIDs(); len(nodes) > 0 && !etu.mutation.ReturnPortalAcceptedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalAcceptedTable,
			Columns: []string{emailtemplate.ReturnPortalAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.ReturnPortalAcceptedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalAcceptedTable,
			Columns: []string{emailtemplate.ReturnPortalAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.DeliveryOptionClickCollectAtStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.DeliveryOptionClickCollectAtStoreTable,
			Columns: []string{emailtemplate.DeliveryOptionClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedDeliveryOptionClickCollectAtStoreIDs(); len(nodes) > 0 && !etu.mutation.DeliveryOptionClickCollectAtStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.DeliveryOptionClickCollectAtStoreTable,
			Columns: []string{emailtemplate.DeliveryOptionClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.DeliveryOptionClickCollectAtStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.DeliveryOptionClickCollectAtStoreTable,
			Columns: []string{emailtemplate.DeliveryOptionClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.NotificationsTable,
			Columns: []string{emailtemplate.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !etu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.NotificationsTable,
			Columns: []string{emailtemplate.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.NotificationsTable,
			Columns: []string{emailtemplate.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	etu.mutation.done = true
	return n, nil
}

// EmailTemplateUpdateOne is the builder for updating a single EmailTemplate entity.
type EmailTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// SetTenantID sets the "tenant_id" field.
func (etuo *EmailTemplateUpdateOne) SetTenantID(pu pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.SetTenantID(pu)
	return etuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableTenantID(pu *pulid.ID) *EmailTemplateUpdateOne {
	if pu != nil {
		etuo.SetTenantID(*pu)
	}
	return etuo
}

// SetName sets the "name" field.
func (etuo *EmailTemplateUpdateOne) SetName(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetName(s)
	return etuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableName(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetName(*s)
	}
	return etuo
}

// SetSubject sets the "subject" field.
func (etuo *EmailTemplateUpdateOne) SetSubject(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetSubject(s)
	return etuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableSubject(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetSubject(*s)
	}
	return etuo
}

// SetHTMLTemplate sets the "html_template" field.
func (etuo *EmailTemplateUpdateOne) SetHTMLTemplate(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetHTMLTemplate(s)
	return etuo
}

// SetNillableHTMLTemplate sets the "html_template" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableHTMLTemplate(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetHTMLTemplate(*s)
	}
	return etuo
}

// SetMergeType sets the "merge_type" field.
func (etuo *EmailTemplateUpdateOne) SetMergeType(et emailtemplate.MergeType) *EmailTemplateUpdateOne {
	etuo.mutation.SetMergeType(et)
	return etuo
}

// SetNillableMergeType sets the "merge_type" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableMergeType(et *emailtemplate.MergeType) *EmailTemplateUpdateOne {
	if et != nil {
		etuo.SetMergeType(*et)
	}
	return etuo
}

// SetUpdatedAt sets the "updated_at" field.
func (etuo *EmailTemplateUpdateOne) SetUpdatedAt(t time.Time) *EmailTemplateUpdateOne {
	etuo.mutation.SetUpdatedAt(t)
	return etuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (etuo *EmailTemplateUpdateOne) SetTenant(t *Tenant) *EmailTemplateUpdateOne {
	return etuo.SetTenantID(t.ID)
}

// AddReturnPortalConfirmationLabelIDs adds the "return_portal_confirmation_label" edge to the ReturnPortal entity by IDs.
func (etuo *EmailTemplateUpdateOne) AddReturnPortalConfirmationLabelIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.AddReturnPortalConfirmationLabelIDs(ids...)
	return etuo
}

// AddReturnPortalConfirmationLabel adds the "return_portal_confirmation_label" edges to the ReturnPortal entity.
func (etuo *EmailTemplateUpdateOne) AddReturnPortalConfirmationLabel(r ...*ReturnPortal) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.AddReturnPortalConfirmationLabelIDs(ids...)
}

// AddReturnPortalConfirmationQrCodeIDs adds the "return_portal_confirmation_qr_code" edge to the ReturnPortal entity by IDs.
func (etuo *EmailTemplateUpdateOne) AddReturnPortalConfirmationQrCodeIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.AddReturnPortalConfirmationQrCodeIDs(ids...)
	return etuo
}

// AddReturnPortalConfirmationQrCode adds the "return_portal_confirmation_qr_code" edges to the ReturnPortal entity.
func (etuo *EmailTemplateUpdateOne) AddReturnPortalConfirmationQrCode(r ...*ReturnPortal) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.AddReturnPortalConfirmationQrCodeIDs(ids...)
}

// AddReturnPortalReceivedIDs adds the "return_portal_received" edge to the ReturnPortal entity by IDs.
func (etuo *EmailTemplateUpdateOne) AddReturnPortalReceivedIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.AddReturnPortalReceivedIDs(ids...)
	return etuo
}

// AddReturnPortalReceived adds the "return_portal_received" edges to the ReturnPortal entity.
func (etuo *EmailTemplateUpdateOne) AddReturnPortalReceived(r ...*ReturnPortal) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.AddReturnPortalReceivedIDs(ids...)
}

// AddReturnPortalAcceptedIDs adds the "return_portal_accepted" edge to the ReturnPortal entity by IDs.
func (etuo *EmailTemplateUpdateOne) AddReturnPortalAcceptedIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.AddReturnPortalAcceptedIDs(ids...)
	return etuo
}

// AddReturnPortalAccepted adds the "return_portal_accepted" edges to the ReturnPortal entity.
func (etuo *EmailTemplateUpdateOne) AddReturnPortalAccepted(r ...*ReturnPortal) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.AddReturnPortalAcceptedIDs(ids...)
}

// AddDeliveryOptionClickCollectAtStoreIDs adds the "delivery_option_click_collect_at_store" edge to the DeliveryOption entity by IDs.
func (etuo *EmailTemplateUpdateOne) AddDeliveryOptionClickCollectAtStoreIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.AddDeliveryOptionClickCollectAtStoreIDs(ids...)
	return etuo
}

// AddDeliveryOptionClickCollectAtStore adds the "delivery_option_click_collect_at_store" edges to the DeliveryOption entity.
func (etuo *EmailTemplateUpdateOne) AddDeliveryOptionClickCollectAtStore(d ...*DeliveryOption) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return etuo.AddDeliveryOptionClickCollectAtStoreIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (etuo *EmailTemplateUpdateOne) AddNotificationIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.AddNotificationIDs(ids...)
	return etuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (etuo *EmailTemplateUpdateOne) AddNotifications(n ...*Notification) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return etuo.AddNotificationIDs(ids...)
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etuo *EmailTemplateUpdateOne) Mutation() *EmailTemplateMutation {
	return etuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (etuo *EmailTemplateUpdateOne) ClearTenant() *EmailTemplateUpdateOne {
	etuo.mutation.ClearTenant()
	return etuo
}

// ClearReturnPortalConfirmationLabel clears all "return_portal_confirmation_label" edges to the ReturnPortal entity.
func (etuo *EmailTemplateUpdateOne) ClearReturnPortalConfirmationLabel() *EmailTemplateUpdateOne {
	etuo.mutation.ClearReturnPortalConfirmationLabel()
	return etuo
}

// RemoveReturnPortalConfirmationLabelIDs removes the "return_portal_confirmation_label" edge to ReturnPortal entities by IDs.
func (etuo *EmailTemplateUpdateOne) RemoveReturnPortalConfirmationLabelIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.RemoveReturnPortalConfirmationLabelIDs(ids...)
	return etuo
}

// RemoveReturnPortalConfirmationLabel removes "return_portal_confirmation_label" edges to ReturnPortal entities.
func (etuo *EmailTemplateUpdateOne) RemoveReturnPortalConfirmationLabel(r ...*ReturnPortal) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.RemoveReturnPortalConfirmationLabelIDs(ids...)
}

// ClearReturnPortalConfirmationQrCode clears all "return_portal_confirmation_qr_code" edges to the ReturnPortal entity.
func (etuo *EmailTemplateUpdateOne) ClearReturnPortalConfirmationQrCode() *EmailTemplateUpdateOne {
	etuo.mutation.ClearReturnPortalConfirmationQrCode()
	return etuo
}

// RemoveReturnPortalConfirmationQrCodeIDs removes the "return_portal_confirmation_qr_code" edge to ReturnPortal entities by IDs.
func (etuo *EmailTemplateUpdateOne) RemoveReturnPortalConfirmationQrCodeIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.RemoveReturnPortalConfirmationQrCodeIDs(ids...)
	return etuo
}

// RemoveReturnPortalConfirmationQrCode removes "return_portal_confirmation_qr_code" edges to ReturnPortal entities.
func (etuo *EmailTemplateUpdateOne) RemoveReturnPortalConfirmationQrCode(r ...*ReturnPortal) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.RemoveReturnPortalConfirmationQrCodeIDs(ids...)
}

// ClearReturnPortalReceived clears all "return_portal_received" edges to the ReturnPortal entity.
func (etuo *EmailTemplateUpdateOne) ClearReturnPortalReceived() *EmailTemplateUpdateOne {
	etuo.mutation.ClearReturnPortalReceived()
	return etuo
}

// RemoveReturnPortalReceivedIDs removes the "return_portal_received" edge to ReturnPortal entities by IDs.
func (etuo *EmailTemplateUpdateOne) RemoveReturnPortalReceivedIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.RemoveReturnPortalReceivedIDs(ids...)
	return etuo
}

// RemoveReturnPortalReceived removes "return_portal_received" edges to ReturnPortal entities.
func (etuo *EmailTemplateUpdateOne) RemoveReturnPortalReceived(r ...*ReturnPortal) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.RemoveReturnPortalReceivedIDs(ids...)
}

// ClearReturnPortalAccepted clears all "return_portal_accepted" edges to the ReturnPortal entity.
func (etuo *EmailTemplateUpdateOne) ClearReturnPortalAccepted() *EmailTemplateUpdateOne {
	etuo.mutation.ClearReturnPortalAccepted()
	return etuo
}

// RemoveReturnPortalAcceptedIDs removes the "return_portal_accepted" edge to ReturnPortal entities by IDs.
func (etuo *EmailTemplateUpdateOne) RemoveReturnPortalAcceptedIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.RemoveReturnPortalAcceptedIDs(ids...)
	return etuo
}

// RemoveReturnPortalAccepted removes "return_portal_accepted" edges to ReturnPortal entities.
func (etuo *EmailTemplateUpdateOne) RemoveReturnPortalAccepted(r ...*ReturnPortal) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.RemoveReturnPortalAcceptedIDs(ids...)
}

// ClearDeliveryOptionClickCollectAtStore clears all "delivery_option_click_collect_at_store" edges to the DeliveryOption entity.
func (etuo *EmailTemplateUpdateOne) ClearDeliveryOptionClickCollectAtStore() *EmailTemplateUpdateOne {
	etuo.mutation.ClearDeliveryOptionClickCollectAtStore()
	return etuo
}

// RemoveDeliveryOptionClickCollectAtStoreIDs removes the "delivery_option_click_collect_at_store" edge to DeliveryOption entities by IDs.
func (etuo *EmailTemplateUpdateOne) RemoveDeliveryOptionClickCollectAtStoreIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.RemoveDeliveryOptionClickCollectAtStoreIDs(ids...)
	return etuo
}

// RemoveDeliveryOptionClickCollectAtStore removes "delivery_option_click_collect_at_store" edges to DeliveryOption entities.
func (etuo *EmailTemplateUpdateOne) RemoveDeliveryOptionClickCollectAtStore(d ...*DeliveryOption) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return etuo.RemoveDeliveryOptionClickCollectAtStoreIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (etuo *EmailTemplateUpdateOne) ClearNotifications() *EmailTemplateUpdateOne {
	etuo.mutation.ClearNotifications()
	return etuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (etuo *EmailTemplateUpdateOne) RemoveNotificationIDs(ids ...pulid.ID) *EmailTemplateUpdateOne {
	etuo.mutation.RemoveNotificationIDs(ids...)
	return etuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (etuo *EmailTemplateUpdateOne) RemoveNotifications(n ...*Notification) *EmailTemplateUpdateOne {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return etuo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the EmailTemplateUpdate builder.
func (etuo *EmailTemplateUpdateOne) Where(ps ...predicate.EmailTemplate) *EmailTemplateUpdateOne {
	etuo.mutation.Where(ps...)
	return etuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EmailTemplateUpdateOne) Select(field string, fields ...string) *EmailTemplateUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EmailTemplate entity.
func (etuo *EmailTemplateUpdateOne) Save(ctx context.Context) (*EmailTemplate, error) {
	if err := etuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, etuo.sqlSave, etuo.mutation, etuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) SaveX(ctx context.Context) *EmailTemplate {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EmailTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etuo *EmailTemplateUpdateOne) defaults() error {
	if _, ok := etuo.mutation.UpdatedAt(); !ok {
		if emailtemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := emailtemplate.UpdateDefaultUpdatedAt()
		etuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (etuo *EmailTemplateUpdateOne) check() error {
	if v, ok := etuo.mutation.Name(); ok {
		if err := emailtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.name": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.MergeType(); ok {
		if err := emailtemplate.MergeTypeValidator(v); err != nil {
			return &ValidationError{Name: "merge_type", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.merge_type": %w`, err)}
		}
	}
	if etuo.mutation.TenantCleared() && len(etuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EmailTemplate.tenant"`)
	}
	return nil
}

func (etuo *EmailTemplateUpdateOne) sqlSave(ctx context.Context) (_node *EmailTemplate, err error) {
	if err := etuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailtemplate.Table, emailtemplate.Columns, sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString))
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailtemplate.FieldID)
		for _, f := range fields {
			if !emailtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.Name(); ok {
		_spec.SetField(emailtemplate.FieldName, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
	}
	if value, ok := etuo.mutation.HTMLTemplate(); ok {
		_spec.SetField(emailtemplate.FieldHTMLTemplate, field.TypeString, value)
	}
	if value, ok := etuo.mutation.MergeType(); ok {
		_spec.SetField(emailtemplate.FieldMergeType, field.TypeEnum, value)
	}
	if etuo.mutation.CreatedAtCleared() {
		_spec.ClearField(emailtemplate.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := etuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if etuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailtemplate.TenantTable,
			Columns: []string{emailtemplate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailtemplate.TenantTable,
			Columns: []string{emailtemplate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.ReturnPortalConfirmationLabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationLabelTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedReturnPortalConfirmationLabelIDs(); len(nodes) > 0 && !etuo.mutation.ReturnPortalConfirmationLabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationLabelTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.ReturnPortalConfirmationLabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationLabelTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.ReturnPortalConfirmationQrCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationQrCodeTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedReturnPortalConfirmationQrCodeIDs(); len(nodes) > 0 && !etuo.mutation.ReturnPortalConfirmationQrCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationQrCodeTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.ReturnPortalConfirmationQrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationQrCodeTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.ReturnPortalReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalReceivedTable,
			Columns: []string{emailtemplate.ReturnPortalReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedReturnPortalReceivedIDs(); len(nodes) > 0 && !etuo.mutation.ReturnPortalReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalReceivedTable,
			Columns: []string{emailtemplate.ReturnPortalReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.ReturnPortalReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalReceivedTable,
			Columns: []string{emailtemplate.ReturnPortalReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.ReturnPortalAcceptedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalAcceptedTable,
			Columns: []string{emailtemplate.ReturnPortalAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedReturnPortalAcceptedIDs(); len(nodes) > 0 && !etuo.mutation.ReturnPortalAcceptedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalAcceptedTable,
			Columns: []string{emailtemplate.ReturnPortalAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.ReturnPortalAcceptedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalAcceptedTable,
			Columns: []string{emailtemplate.ReturnPortalAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.DeliveryOptionClickCollectAtStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.DeliveryOptionClickCollectAtStoreTable,
			Columns: []string{emailtemplate.DeliveryOptionClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedDeliveryOptionClickCollectAtStoreIDs(); len(nodes) > 0 && !etuo.mutation.DeliveryOptionClickCollectAtStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.DeliveryOptionClickCollectAtStoreTable,
			Columns: []string{emailtemplate.DeliveryOptionClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.DeliveryOptionClickCollectAtStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.DeliveryOptionClickCollectAtStoreTable,
			Columns: []string{emailtemplate.DeliveryOptionClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.NotificationsTable,
			Columns: []string{emailtemplate.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !etuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.NotificationsTable,
			Columns: []string{emailtemplate.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.NotificationsTable,
			Columns: []string{emailtemplate.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmailTemplate{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	etuo.mutation.done = true
	return _node, nil
}
