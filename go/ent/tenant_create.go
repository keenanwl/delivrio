// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantCreate is the builder for creating a Tenant entity.
type TenantCreate struct {
	config
	mutation *TenantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TenantCreate) SetName(s string) *TenantCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetVatNumber sets the "vat_number" field.
func (tc *TenantCreate) SetVatNumber(s string) *TenantCreate {
	tc.mutation.SetVatNumber(s)
	return tc
}

// SetNillableVatNumber sets the "vat_number" field if the given value is not nil.
func (tc *TenantCreate) SetNillableVatNumber(s *string) *TenantCreate {
	if s != nil {
		tc.SetVatNumber(*s)
	}
	return tc
}

// SetInvoiceReference sets the "invoice_reference" field.
func (tc *TenantCreate) SetInvoiceReference(s string) *TenantCreate {
	tc.mutation.SetInvoiceReference(s)
	return tc
}

// SetNillableInvoiceReference sets the "invoice_reference" field if the given value is not nil.
func (tc *TenantCreate) SetNillableInvoiceReference(s *string) *TenantCreate {
	if s != nil {
		tc.SetInvoiceReference(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TenantCreate) SetID(pu pulid.ID) *TenantCreate {
	tc.mutation.SetID(pu)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TenantCreate) SetNillableID(pu *pulid.ID) *TenantCreate {
	if pu != nil {
		tc.SetID(*pu)
	}
	return tc
}

// AddConnectOptionCarrierIDs adds the "connect_option_carriers" edge to the ConnectOptionCarrier entity by IDs.
func (tc *TenantCreate) AddConnectOptionCarrierIDs(ids ...pulid.ID) *TenantCreate {
	tc.mutation.AddConnectOptionCarrierIDs(ids...)
	return tc
}

// AddConnectOptionCarriers adds the "connect_option_carriers" edges to the ConnectOptionCarrier entity.
func (tc *TenantCreate) AddConnectOptionCarriers(c ...*ConnectOptionCarrier) *TenantCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddConnectOptionCarrierIDs(ids...)
}

// AddConnectOptionPlatformIDs adds the "connect_option_platforms" edge to the ConnectOptionPlatform entity by IDs.
func (tc *TenantCreate) AddConnectOptionPlatformIDs(ids ...pulid.ID) *TenantCreate {
	tc.mutation.AddConnectOptionPlatformIDs(ids...)
	return tc
}

// AddConnectOptionPlatforms adds the "connect_option_platforms" edges to the ConnectOptionPlatform entity.
func (tc *TenantCreate) AddConnectOptionPlatforms(c ...*ConnectOptionPlatform) *TenantCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddConnectOptionPlatformIDs(ids...)
}

// SetPlanID sets the "plan" edge to the Plan entity by ID.
func (tc *TenantCreate) SetPlanID(id pulid.ID) *TenantCreate {
	tc.mutation.SetPlanID(id)
	return tc
}

// SetPlan sets the "plan" edge to the Plan entity.
func (tc *TenantCreate) SetPlan(p *Plan) *TenantCreate {
	return tc.SetPlanID(p.ID)
}

// SetCompanyAddressID sets the "company_address" edge to the Address entity by ID.
func (tc *TenantCreate) SetCompanyAddressID(id pulid.ID) *TenantCreate {
	tc.mutation.SetCompanyAddressID(id)
	return tc
}

// SetNillableCompanyAddressID sets the "company_address" edge to the Address entity by ID if the given value is not nil.
func (tc *TenantCreate) SetNillableCompanyAddressID(id *pulid.ID) *TenantCreate {
	if id != nil {
		tc = tc.SetCompanyAddressID(*id)
	}
	return tc
}

// SetCompanyAddress sets the "company_address" edge to the Address entity.
func (tc *TenantCreate) SetCompanyAddress(a *Address) *TenantCreate {
	return tc.SetCompanyAddressID(a.ID)
}

// SetDefaultLanguageID sets the "default_language" edge to the Language entity by ID.
func (tc *TenantCreate) SetDefaultLanguageID(id pulid.ID) *TenantCreate {
	tc.mutation.SetDefaultLanguageID(id)
	return tc
}

// SetDefaultLanguage sets the "default_language" edge to the Language entity.
func (tc *TenantCreate) SetDefaultLanguage(l *Language) *TenantCreate {
	return tc.SetDefaultLanguageID(l.ID)
}

// SetBillingContactID sets the "billing_contact" edge to the Contact entity by ID.
func (tc *TenantCreate) SetBillingContactID(id pulid.ID) *TenantCreate {
	tc.mutation.SetBillingContactID(id)
	return tc
}

// SetNillableBillingContactID sets the "billing_contact" edge to the Contact entity by ID if the given value is not nil.
func (tc *TenantCreate) SetNillableBillingContactID(id *pulid.ID) *TenantCreate {
	if id != nil {
		tc = tc.SetBillingContactID(*id)
	}
	return tc
}

// SetBillingContact sets the "billing_contact" edge to the Contact entity.
func (tc *TenantCreate) SetBillingContact(c *Contact) *TenantCreate {
	return tc.SetBillingContactID(c.ID)
}

// SetAdminContactID sets the "admin_contact" edge to the Contact entity by ID.
func (tc *TenantCreate) SetAdminContactID(id pulid.ID) *TenantCreate {
	tc.mutation.SetAdminContactID(id)
	return tc
}

// SetNillableAdminContactID sets the "admin_contact" edge to the Contact entity by ID if the given value is not nil.
func (tc *TenantCreate) SetNillableAdminContactID(id *pulid.ID) *TenantCreate {
	if id != nil {
		tc = tc.SetAdminContactID(*id)
	}
	return tc
}

// SetAdminContact sets the "admin_contact" edge to the Contact entity.
func (tc *TenantCreate) SetAdminContact(c *Contact) *TenantCreate {
	return tc.SetAdminContactID(c.ID)
}

// Mutation returns the TenantMutation object of the builder.
func (tc *TenantCreate) Mutation() *TenantMutation {
	return tc.mutation
}

// Save creates the Tenant in the database.
func (tc *TenantCreate) Save(ctx context.Context) (*Tenant, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TenantCreate) SaveX(ctx context.Context) *Tenant {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TenantCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TenantCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TenantCreate) defaults() error {
	if _, ok := tc.mutation.ID(); !ok {
		if tenant.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized tenant.DefaultID (forgotten import ent/runtime?)")
		}
		v := tenant.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TenantCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tenant.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if len(tc.mutation.PlanIDs()) == 0 {
		return &ValidationError{Name: "plan", err: errors.New(`ent: missing required edge "Tenant.plan"`)}
	}
	if len(tc.mutation.DefaultLanguageIDs()) == 0 {
		return &ValidationError{Name: "default_language", err: errors.New(`ent: missing required edge "Tenant.default_language"`)}
	}
	return nil
}

func (tc *TenantCreate) sqlSave(ctx context.Context) (*Tenant, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TenantCreate) createSpec() (*Tenant, *sqlgraph.CreateSpec) {
	var (
		_node = &Tenant{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tenant.Table, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.VatNumber(); ok {
		_spec.SetField(tenant.FieldVatNumber, field.TypeString, value)
		_node.VatNumber = value
	}
	if value, ok := tc.mutation.InvoiceReference(); ok {
		_spec.SetField(tenant.FieldInvoiceReference, field.TypeString, value)
		_node.InvoiceReference = value
	}
	if nodes := tc.mutation.ConnectOptionCarriersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionCarriersTable,
			Columns: tenant.ConnectOptionCarriersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ConnectOptionPlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionPlatformsTable,
			Columns: tenant.ConnectOptionPlatformsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.PlanTable,
			Columns: []string{tenant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plan_tenant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CompanyAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.CompanyAddressTable,
			Columns: []string{tenant.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tenant_company_address = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DefaultLanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.DefaultLanguageTable,
			Columns: []string{tenant.DefaultLanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tenant_default_language = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.BillingContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.BillingContactTable,
			Columns: []string{tenant.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tenant_billing_contact = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AdminContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.AdminContactTable,
			Columns: []string{tenant.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tenant_admin_contact = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tc *TenantCreate) OnConflict(opts ...sql.ConflictOption) *TenantUpsertOne {
	tc.conflict = opts
	return &TenantUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TenantCreate) OnConflictColumns(columns ...string) *TenantUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertOne{
		create: tc,
	}
}

type (
	// TenantUpsertOne is the builder for "upsert"-ing
	//  one Tenant node.
	TenantUpsertOne struct {
		create *TenantCreate
	}

	// TenantUpsert is the "OnConflict" setter.
	TenantUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TenantUpsert) SetName(v string) *TenantUpsert {
	u.Set(tenant.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsert) UpdateName() *TenantUpsert {
	u.SetExcluded(tenant.FieldName)
	return u
}

// SetVatNumber sets the "vat_number" field.
func (u *TenantUpsert) SetVatNumber(v string) *TenantUpsert {
	u.Set(tenant.FieldVatNumber, v)
	return u
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *TenantUpsert) UpdateVatNumber() *TenantUpsert {
	u.SetExcluded(tenant.FieldVatNumber)
	return u
}

// ClearVatNumber clears the value of the "vat_number" field.
func (u *TenantUpsert) ClearVatNumber() *TenantUpsert {
	u.SetNull(tenant.FieldVatNumber)
	return u
}

// SetInvoiceReference sets the "invoice_reference" field.
func (u *TenantUpsert) SetInvoiceReference(v string) *TenantUpsert {
	u.Set(tenant.FieldInvoiceReference, v)
	return u
}

// UpdateInvoiceReference sets the "invoice_reference" field to the value that was provided on create.
func (u *TenantUpsert) UpdateInvoiceReference() *TenantUpsert {
	u.SetExcluded(tenant.FieldInvoiceReference)
	return u
}

// ClearInvoiceReference clears the value of the "invoice_reference" field.
func (u *TenantUpsert) ClearInvoiceReference() *TenantUpsert {
	u.SetNull(tenant.FieldInvoiceReference)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUpsertOne) UpdateNewValues() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tenant.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenantUpsertOne) Ignore() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertOne) DoNothing() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreate.OnConflict
// documentation for more info.
func (u *TenantUpsertOne) Update(set func(*TenantUpsert)) *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TenantUpsertOne) SetName(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateName() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateName()
	})
}

// SetVatNumber sets the "vat_number" field.
func (u *TenantUpsertOne) SetVatNumber(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetVatNumber(v)
	})
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateVatNumber() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateVatNumber()
	})
}

// ClearVatNumber clears the value of the "vat_number" field.
func (u *TenantUpsertOne) ClearVatNumber() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearVatNumber()
	})
}

// SetInvoiceReference sets the "invoice_reference" field.
func (u *TenantUpsertOne) SetInvoiceReference(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetInvoiceReference(v)
	})
}

// UpdateInvoiceReference sets the "invoice_reference" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateInvoiceReference() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateInvoiceReference()
	})
}

// ClearInvoiceReference clears the value of the "invoice_reference" field.
func (u *TenantUpsertOne) ClearInvoiceReference() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearInvoiceReference()
	})
}

// Exec executes the query.
func (u *TenantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenantUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TenantUpsertOne.ID is not supported by MySQL driver. Use TenantUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenantUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenantCreateBulk is the builder for creating many Tenant entities in bulk.
type TenantCreateBulk struct {
	config
	err      error
	builders []*TenantCreate
	conflict []sql.ConflictOption
}

// Save creates the Tenant entities in the database.
func (tcb *TenantCreateBulk) Save(ctx context.Context) ([]*Tenant, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tenant, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TenantCreateBulk) SaveX(ctx context.Context) []*Tenant {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TenantCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TenantCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tcb *TenantCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenantUpsertBulk {
	tcb.conflict = opts
	return &TenantUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TenantCreateBulk) OnConflictColumns(columns ...string) *TenantUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertBulk{
		create: tcb,
	}
}

// TenantUpsertBulk is the builder for "upsert"-ing
// a bulk of Tenant nodes.
type TenantUpsertBulk struct {
	create *TenantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUpsertBulk) UpdateNewValues() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tenant.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenantUpsertBulk) Ignore() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertBulk) DoNothing() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreateBulk.OnConflict
// documentation for more info.
func (u *TenantUpsertBulk) Update(set func(*TenantUpsert)) *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TenantUpsertBulk) SetName(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateName() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateName()
	})
}

// SetVatNumber sets the "vat_number" field.
func (u *TenantUpsertBulk) SetVatNumber(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetVatNumber(v)
	})
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateVatNumber() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateVatNumber()
	})
}

// ClearVatNumber clears the value of the "vat_number" field.
func (u *TenantUpsertBulk) ClearVatNumber() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearVatNumber()
	})
}

// SetInvoiceReference sets the "invoice_reference" field.
func (u *TenantUpsertBulk) SetInvoiceReference(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetInvoiceReference(v)
	})
}

// UpdateInvoiceReference sets the "invoice_reference" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateInvoiceReference() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateInvoiceReference()
	})
}

// ClearInvoiceReference clears the value of the "invoice_reference" field.
func (u *TenantUpsertBulk) ClearInvoiceReference() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearInvoiceReference()
	})
}

// Exec executes the query.
func (u *TenantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
