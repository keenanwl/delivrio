// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierAdditionalServiceBring is the model entity for the CarrierAdditionalServiceBring schema.
type CarrierAdditionalServiceBring struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// APICodeBooking holds the value of the "api_code_booking" field.
	APICodeBooking string `json:"api_code_booking,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierAdditionalServiceBringQuery when eager-loading is set.
	Edges                                                  CarrierAdditionalServiceBringEdges `json:"edges"`
	carrier_service_bring_carrier_additional_service_bring *pulid.ID
	selectValues                                           sql.SelectValues
}

// CarrierAdditionalServiceBringEdges holds the relations/edges for other nodes in the graph.
type CarrierAdditionalServiceBringEdges struct {
	// CarrierServiceBring holds the value of the carrier_service_bring edge.
	CarrierServiceBring *CarrierServiceBring `json:"carrier_service_bring,omitempty"`
	// DeliveryOptionBring holds the value of the delivery_option_bring edge.
	DeliveryOptionBring []*DeliveryOptionBring `json:"delivery_option_bring,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedDeliveryOptionBring map[string][]*DeliveryOptionBring
}

// CarrierServiceBringOrErr returns the CarrierServiceBring value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierAdditionalServiceBringEdges) CarrierServiceBringOrErr() (*CarrierServiceBring, error) {
	if e.CarrierServiceBring != nil {
		return e.CarrierServiceBring, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierservicebring.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_bring"}
}

// DeliveryOptionBringOrErr returns the DeliveryOptionBring value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceBringEdges) DeliveryOptionBringOrErr() ([]*DeliveryOptionBring, error) {
	if e.loadedTypes[1] {
		return e.DeliveryOptionBring, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option_bring"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierAdditionalServiceBring) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrieradditionalservicebring.FieldID:
			values[i] = new(pulid.ID)
		case carrieradditionalservicebring.FieldLabel, carrieradditionalservicebring.FieldAPICodeBooking:
			values[i] = new(sql.NullString)
		case carrieradditionalservicebring.ForeignKeys[0]: // carrier_service_bring_carrier_additional_service_bring
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierAdditionalServiceBring fields.
func (casb *CarrierAdditionalServiceBring) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrieradditionalservicebring.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				casb.ID = *value
			}
		case carrieradditionalservicebring.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				casb.Label = value.String
			}
		case carrieradditionalservicebring.FieldAPICodeBooking:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_code_booking", values[i])
			} else if value.Valid {
				casb.APICodeBooking = value.String
			}
		case carrieradditionalservicebring.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_service_bring_carrier_additional_service_bring", values[i])
			} else if value.Valid {
				casb.carrier_service_bring_carrier_additional_service_bring = new(pulid.ID)
				*casb.carrier_service_bring_carrier_additional_service_bring = *value.S.(*pulid.ID)
			}
		default:
			casb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierAdditionalServiceBring.
// This includes values selected through modifiers, order, etc.
func (casb *CarrierAdditionalServiceBring) Value(name string) (ent.Value, error) {
	return casb.selectValues.Get(name)
}

// QueryCarrierServiceBring queries the "carrier_service_bring" edge of the CarrierAdditionalServiceBring entity.
func (casb *CarrierAdditionalServiceBring) QueryCarrierServiceBring() *CarrierServiceBringQuery {
	return NewCarrierAdditionalServiceBringClient(casb.config).QueryCarrierServiceBring(casb)
}

// QueryDeliveryOptionBring queries the "delivery_option_bring" edge of the CarrierAdditionalServiceBring entity.
func (casb *CarrierAdditionalServiceBring) QueryDeliveryOptionBring() *DeliveryOptionBringQuery {
	return NewCarrierAdditionalServiceBringClient(casb.config).QueryDeliveryOptionBring(casb)
}

// Update returns a builder for updating this CarrierAdditionalServiceBring.
// Note that you need to call CarrierAdditionalServiceBring.Unwrap() before calling this method if this CarrierAdditionalServiceBring
// was returned from a transaction, and the transaction was committed or rolled back.
func (casb *CarrierAdditionalServiceBring) Update() *CarrierAdditionalServiceBringUpdateOne {
	return NewCarrierAdditionalServiceBringClient(casb.config).UpdateOne(casb)
}

// Unwrap unwraps the CarrierAdditionalServiceBring entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (casb *CarrierAdditionalServiceBring) Unwrap() *CarrierAdditionalServiceBring {
	_tx, ok := casb.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierAdditionalServiceBring is not a transactional entity")
	}
	casb.config.driver = _tx.drv
	return casb
}

// String implements the fmt.Stringer.
func (casb *CarrierAdditionalServiceBring) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierAdditionalServiceBring(")
	builder.WriteString(fmt.Sprintf("id=%v, ", casb.ID))
	builder.WriteString("label=")
	builder.WriteString(casb.Label)
	builder.WriteString(", ")
	builder.WriteString("api_code_booking=")
	builder.WriteString(casb.APICodeBooking)
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryOptionBring returns the DeliveryOptionBring named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casb *CarrierAdditionalServiceBring) NamedDeliveryOptionBring(name string) ([]*DeliveryOptionBring, error) {
	if casb.Edges.namedDeliveryOptionBring == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casb.Edges.namedDeliveryOptionBring[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casb *CarrierAdditionalServiceBring) appendNamedDeliveryOptionBring(name string, edges ...*DeliveryOptionBring) {
	if casb.Edges.namedDeliveryOptionBring == nil {
		casb.Edges.namedDeliveryOptionBring = make(map[string][]*DeliveryOptionBring)
	}
	if len(edges) == 0 {
		casb.Edges.namedDeliveryOptionBring[name] = []*DeliveryOptionBring{}
	} else {
		casb.Edges.namedDeliveryOptionBring[name] = append(casb.Edges.namedDeliveryOptionBring[name], edges...)
	}
}

// CarrierAdditionalServiceBrings is a parsable slice of CarrierAdditionalServiceBring.
type CarrierAdditionalServiceBrings []*CarrierAdditionalServiceBring
