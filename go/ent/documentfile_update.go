// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentFileUpdate is the builder for updating DocumentFile entities.
type DocumentFileUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentFileMutation
}

// Where appends a list predicates to the DocumentFileUpdate builder.
func (dfu *DocumentFileUpdate) Where(ps ...predicate.DocumentFile) *DocumentFileUpdate {
	dfu.mutation.Where(ps...)
	return dfu
}

// SetTenantID sets the "tenant_id" field.
func (dfu *DocumentFileUpdate) SetTenantID(pu pulid.ID) *DocumentFileUpdate {
	dfu.mutation.SetTenantID(pu)
	return dfu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dfu *DocumentFileUpdate) SetNillableTenantID(pu *pulid.ID) *DocumentFileUpdate {
	if pu != nil {
		dfu.SetTenantID(*pu)
	}
	return dfu
}

// SetStoragePath sets the "storage_path" field.
func (dfu *DocumentFileUpdate) SetStoragePath(s string) *DocumentFileUpdate {
	dfu.mutation.SetStoragePath(s)
	return dfu
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (dfu *DocumentFileUpdate) SetNillableStoragePath(s *string) *DocumentFileUpdate {
	if s != nil {
		dfu.SetStoragePath(*s)
	}
	return dfu
}

// ClearStoragePath clears the value of the "storage_path" field.
func (dfu *DocumentFileUpdate) ClearStoragePath() *DocumentFileUpdate {
	dfu.mutation.ClearStoragePath()
	return dfu
}

// SetStoragePathZpl sets the "storage_path_zpl" field.
func (dfu *DocumentFileUpdate) SetStoragePathZpl(s string) *DocumentFileUpdate {
	dfu.mutation.SetStoragePathZpl(s)
	return dfu
}

// SetNillableStoragePathZpl sets the "storage_path_zpl" field if the given value is not nil.
func (dfu *DocumentFileUpdate) SetNillableStoragePathZpl(s *string) *DocumentFileUpdate {
	if s != nil {
		dfu.SetStoragePathZpl(*s)
	}
	return dfu
}

// ClearStoragePathZpl clears the value of the "storage_path_zpl" field.
func (dfu *DocumentFileUpdate) ClearStoragePathZpl() *DocumentFileUpdate {
	dfu.mutation.ClearStoragePathZpl()
	return dfu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dfu *DocumentFileUpdate) SetTenant(t *Tenant) *DocumentFileUpdate {
	return dfu.SetTenantID(t.ID)
}

// SetColliID sets the "colli" edge to the Colli entity by ID.
func (dfu *DocumentFileUpdate) SetColliID(id pulid.ID) *DocumentFileUpdate {
	dfu.mutation.SetColliID(id)
	return dfu
}

// SetNillableColliID sets the "colli" edge to the Colli entity by ID if the given value is not nil.
func (dfu *DocumentFileUpdate) SetNillableColliID(id *pulid.ID) *DocumentFileUpdate {
	if id != nil {
		dfu = dfu.SetColliID(*id)
	}
	return dfu
}

// SetColli sets the "colli" edge to the Colli entity.
func (dfu *DocumentFileUpdate) SetColli(c *Colli) *DocumentFileUpdate {
	return dfu.SetColliID(c.ID)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (dfu *DocumentFileUpdate) SetShipmentParcelID(id pulid.ID) *DocumentFileUpdate {
	dfu.mutation.SetShipmentParcelID(id)
	return dfu
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (dfu *DocumentFileUpdate) SetNillableShipmentParcelID(id *pulid.ID) *DocumentFileUpdate {
	if id != nil {
		dfu = dfu.SetShipmentParcelID(*id)
	}
	return dfu
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (dfu *DocumentFileUpdate) SetShipmentParcel(s *ShipmentParcel) *DocumentFileUpdate {
	return dfu.SetShipmentParcelID(s.ID)
}

// Mutation returns the DocumentFileMutation object of the builder.
func (dfu *DocumentFileUpdate) Mutation() *DocumentFileMutation {
	return dfu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dfu *DocumentFileUpdate) ClearTenant() *DocumentFileUpdate {
	dfu.mutation.ClearTenant()
	return dfu
}

// ClearColli clears the "colli" edge to the Colli entity.
func (dfu *DocumentFileUpdate) ClearColli() *DocumentFileUpdate {
	dfu.mutation.ClearColli()
	return dfu
}

// ClearShipmentParcel clears the "shipment_parcel" edge to the ShipmentParcel entity.
func (dfu *DocumentFileUpdate) ClearShipmentParcel() *DocumentFileUpdate {
	dfu.mutation.ClearShipmentParcel()
	return dfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dfu *DocumentFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dfu.sqlSave, dfu.mutation, dfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dfu *DocumentFileUpdate) SaveX(ctx context.Context) int {
	affected, err := dfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dfu *DocumentFileUpdate) Exec(ctx context.Context) error {
	_, err := dfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfu *DocumentFileUpdate) ExecX(ctx context.Context) {
	if err := dfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dfu *DocumentFileUpdate) check() error {
	if dfu.mutation.TenantCleared() && len(dfu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DocumentFile.tenant"`)
	}
	return nil
}

func (dfu *DocumentFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(documentfile.Table, documentfile.Columns, sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString))
	if ps := dfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dfu.mutation.StoragePath(); ok {
		_spec.SetField(documentfile.FieldStoragePath, field.TypeString, value)
	}
	if dfu.mutation.StoragePathCleared() {
		_spec.ClearField(documentfile.FieldStoragePath, field.TypeString)
	}
	if value, ok := dfu.mutation.StoragePathZpl(); ok {
		_spec.SetField(documentfile.FieldStoragePathZpl, field.TypeString, value)
	}
	if dfu.mutation.StoragePathZplCleared() {
		_spec.ClearField(documentfile.FieldStoragePathZpl, field.TypeString)
	}
	if dfu.mutation.DataPdfBase64Cleared() {
		_spec.ClearField(documentfile.FieldDataPdfBase64, field.TypeString)
	}
	if dfu.mutation.DataZplBase64Cleared() {
		_spec.ClearField(documentfile.FieldDataZplBase64, field.TypeString)
	}
	if dfu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentfile.TenantTable,
			Columns: []string{documentfile.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentfile.TenantTable,
			Columns: []string{documentfile.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentfile.ColliTable,
			Columns: []string{documentfile.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentfile.ColliTable,
			Columns: []string{documentfile.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfu.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   documentfile.ShipmentParcelTable,
			Columns: []string{documentfile.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   documentfile.ShipmentParcelTable,
			Columns: []string{documentfile.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dfu.mutation.done = true
	return n, nil
}

// DocumentFileUpdateOne is the builder for updating a single DocumentFile entity.
type DocumentFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocumentFileMutation
}

// SetTenantID sets the "tenant_id" field.
func (dfuo *DocumentFileUpdateOne) SetTenantID(pu pulid.ID) *DocumentFileUpdateOne {
	dfuo.mutation.SetTenantID(pu)
	return dfuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dfuo *DocumentFileUpdateOne) SetNillableTenantID(pu *pulid.ID) *DocumentFileUpdateOne {
	if pu != nil {
		dfuo.SetTenantID(*pu)
	}
	return dfuo
}

// SetStoragePath sets the "storage_path" field.
func (dfuo *DocumentFileUpdateOne) SetStoragePath(s string) *DocumentFileUpdateOne {
	dfuo.mutation.SetStoragePath(s)
	return dfuo
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (dfuo *DocumentFileUpdateOne) SetNillableStoragePath(s *string) *DocumentFileUpdateOne {
	if s != nil {
		dfuo.SetStoragePath(*s)
	}
	return dfuo
}

// ClearStoragePath clears the value of the "storage_path" field.
func (dfuo *DocumentFileUpdateOne) ClearStoragePath() *DocumentFileUpdateOne {
	dfuo.mutation.ClearStoragePath()
	return dfuo
}

// SetStoragePathZpl sets the "storage_path_zpl" field.
func (dfuo *DocumentFileUpdateOne) SetStoragePathZpl(s string) *DocumentFileUpdateOne {
	dfuo.mutation.SetStoragePathZpl(s)
	return dfuo
}

// SetNillableStoragePathZpl sets the "storage_path_zpl" field if the given value is not nil.
func (dfuo *DocumentFileUpdateOne) SetNillableStoragePathZpl(s *string) *DocumentFileUpdateOne {
	if s != nil {
		dfuo.SetStoragePathZpl(*s)
	}
	return dfuo
}

// ClearStoragePathZpl clears the value of the "storage_path_zpl" field.
func (dfuo *DocumentFileUpdateOne) ClearStoragePathZpl() *DocumentFileUpdateOne {
	dfuo.mutation.ClearStoragePathZpl()
	return dfuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dfuo *DocumentFileUpdateOne) SetTenant(t *Tenant) *DocumentFileUpdateOne {
	return dfuo.SetTenantID(t.ID)
}

// SetColliID sets the "colli" edge to the Colli entity by ID.
func (dfuo *DocumentFileUpdateOne) SetColliID(id pulid.ID) *DocumentFileUpdateOne {
	dfuo.mutation.SetColliID(id)
	return dfuo
}

// SetNillableColliID sets the "colli" edge to the Colli entity by ID if the given value is not nil.
func (dfuo *DocumentFileUpdateOne) SetNillableColliID(id *pulid.ID) *DocumentFileUpdateOne {
	if id != nil {
		dfuo = dfuo.SetColliID(*id)
	}
	return dfuo
}

// SetColli sets the "colli" edge to the Colli entity.
func (dfuo *DocumentFileUpdateOne) SetColli(c *Colli) *DocumentFileUpdateOne {
	return dfuo.SetColliID(c.ID)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (dfuo *DocumentFileUpdateOne) SetShipmentParcelID(id pulid.ID) *DocumentFileUpdateOne {
	dfuo.mutation.SetShipmentParcelID(id)
	return dfuo
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (dfuo *DocumentFileUpdateOne) SetNillableShipmentParcelID(id *pulid.ID) *DocumentFileUpdateOne {
	if id != nil {
		dfuo = dfuo.SetShipmentParcelID(*id)
	}
	return dfuo
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (dfuo *DocumentFileUpdateOne) SetShipmentParcel(s *ShipmentParcel) *DocumentFileUpdateOne {
	return dfuo.SetShipmentParcelID(s.ID)
}

// Mutation returns the DocumentFileMutation object of the builder.
func (dfuo *DocumentFileUpdateOne) Mutation() *DocumentFileMutation {
	return dfuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dfuo *DocumentFileUpdateOne) ClearTenant() *DocumentFileUpdateOne {
	dfuo.mutation.ClearTenant()
	return dfuo
}

// ClearColli clears the "colli" edge to the Colli entity.
func (dfuo *DocumentFileUpdateOne) ClearColli() *DocumentFileUpdateOne {
	dfuo.mutation.ClearColli()
	return dfuo
}

// ClearShipmentParcel clears the "shipment_parcel" edge to the ShipmentParcel entity.
func (dfuo *DocumentFileUpdateOne) ClearShipmentParcel() *DocumentFileUpdateOne {
	dfuo.mutation.ClearShipmentParcel()
	return dfuo
}

// Where appends a list predicates to the DocumentFileUpdate builder.
func (dfuo *DocumentFileUpdateOne) Where(ps ...predicate.DocumentFile) *DocumentFileUpdateOne {
	dfuo.mutation.Where(ps...)
	return dfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dfuo *DocumentFileUpdateOne) Select(field string, fields ...string) *DocumentFileUpdateOne {
	dfuo.fields = append([]string{field}, fields...)
	return dfuo
}

// Save executes the query and returns the updated DocumentFile entity.
func (dfuo *DocumentFileUpdateOne) Save(ctx context.Context) (*DocumentFile, error) {
	return withHooks(ctx, dfuo.sqlSave, dfuo.mutation, dfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dfuo *DocumentFileUpdateOne) SaveX(ctx context.Context) *DocumentFile {
	node, err := dfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dfuo *DocumentFileUpdateOne) Exec(ctx context.Context) error {
	_, err := dfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfuo *DocumentFileUpdateOne) ExecX(ctx context.Context) {
	if err := dfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dfuo *DocumentFileUpdateOne) check() error {
	if dfuo.mutation.TenantCleared() && len(dfuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DocumentFile.tenant"`)
	}
	return nil
}

func (dfuo *DocumentFileUpdateOne) sqlSave(ctx context.Context) (_node *DocumentFile, err error) {
	if err := dfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(documentfile.Table, documentfile.Columns, sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString))
	id, ok := dfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DocumentFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, documentfile.FieldID)
		for _, f := range fields {
			if !documentfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != documentfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dfuo.mutation.StoragePath(); ok {
		_spec.SetField(documentfile.FieldStoragePath, field.TypeString, value)
	}
	if dfuo.mutation.StoragePathCleared() {
		_spec.ClearField(documentfile.FieldStoragePath, field.TypeString)
	}
	if value, ok := dfuo.mutation.StoragePathZpl(); ok {
		_spec.SetField(documentfile.FieldStoragePathZpl, field.TypeString, value)
	}
	if dfuo.mutation.StoragePathZplCleared() {
		_spec.ClearField(documentfile.FieldStoragePathZpl, field.TypeString)
	}
	if dfuo.mutation.DataPdfBase64Cleared() {
		_spec.ClearField(documentfile.FieldDataPdfBase64, field.TypeString)
	}
	if dfuo.mutation.DataZplBase64Cleared() {
		_spec.ClearField(documentfile.FieldDataZplBase64, field.TypeString)
	}
	if dfuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentfile.TenantTable,
			Columns: []string{documentfile.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentfile.TenantTable,
			Columns: []string{documentfile.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfuo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentfile.ColliTable,
			Columns: []string{documentfile.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentfile.ColliTable,
			Columns: []string{documentfile.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfuo.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   documentfile.ShipmentParcelTable,
			Columns: []string{documentfile.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   documentfile.ShipmentParcelTable,
			Columns: []string{documentfile.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DocumentFile{config: dfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dfuo.mutation.done = true
	return _node, nil
}
