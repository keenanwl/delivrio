// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierDFCreate is the builder for creating a CarrierDF entity.
type CarrierDFCreate struct {
	config
	mutation *CarrierDFMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cdc *CarrierDFCreate) SetTenantID(pu pulid.ID) *CarrierDFCreate {
	cdc.mutation.SetTenantID(pu)
	return cdc
}

// SetCustomerID sets the "customer_id" field.
func (cdc *CarrierDFCreate) SetCustomerID(s string) *CarrierDFCreate {
	cdc.mutation.SetCustomerID(s)
	return cdc
}

// SetAgreementNumber sets the "agreement_number" field.
func (cdc *CarrierDFCreate) SetAgreementNumber(s string) *CarrierDFCreate {
	cdc.mutation.SetAgreementNumber(s)
	return cdc
}

// SetWhoPays sets the "who_pays" field.
func (cdc *CarrierDFCreate) SetWhoPays(cp carrierdf.WhoPays) *CarrierDFCreate {
	cdc.mutation.SetWhoPays(cp)
	return cdc
}

// SetNillableWhoPays sets the "who_pays" field if the given value is not nil.
func (cdc *CarrierDFCreate) SetNillableWhoPays(cp *carrierdf.WhoPays) *CarrierDFCreate {
	if cp != nil {
		cdc.SetWhoPays(*cp)
	}
	return cdc
}

// SetTest sets the "test" field.
func (cdc *CarrierDFCreate) SetTest(b bool) *CarrierDFCreate {
	cdc.mutation.SetTest(b)
	return cdc
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cdc *CarrierDFCreate) SetNillableTest(b *bool) *CarrierDFCreate {
	if b != nil {
		cdc.SetTest(*b)
	}
	return cdc
}

// SetID sets the "id" field.
func (cdc *CarrierDFCreate) SetID(pu pulid.ID) *CarrierDFCreate {
	cdc.mutation.SetID(pu)
	return cdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cdc *CarrierDFCreate) SetNillableID(pu *pulid.ID) *CarrierDFCreate {
	if pu != nil {
		cdc.SetID(*pu)
	}
	return cdc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cdc *CarrierDFCreate) SetTenant(t *Tenant) *CarrierDFCreate {
	return cdc.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cdc *CarrierDFCreate) SetCarrierID(id pulid.ID) *CarrierDFCreate {
	cdc.mutation.SetCarrierID(id)
	return cdc
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cdc *CarrierDFCreate) SetCarrier(c *Carrier) *CarrierDFCreate {
	return cdc.SetCarrierID(c.ID)
}

// Mutation returns the CarrierDFMutation object of the builder.
func (cdc *CarrierDFCreate) Mutation() *CarrierDFMutation {
	return cdc.mutation
}

// Save creates the CarrierDF in the database.
func (cdc *CarrierDFCreate) Save(ctx context.Context) (*CarrierDF, error) {
	if err := cdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cdc.sqlSave, cdc.mutation, cdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *CarrierDFCreate) SaveX(ctx context.Context) *CarrierDF {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *CarrierDFCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *CarrierDFCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *CarrierDFCreate) defaults() error {
	if _, ok := cdc.mutation.WhoPays(); !ok {
		v := carrierdf.DefaultWhoPays
		cdc.mutation.SetWhoPays(v)
	}
	if _, ok := cdc.mutation.Test(); !ok {
		v := carrierdf.DefaultTest
		cdc.mutation.SetTest(v)
	}
	if _, ok := cdc.mutation.ID(); !ok {
		if carrierdf.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierdf.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierdf.DefaultID()
		cdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cdc *CarrierDFCreate) check() error {
	if _, ok := cdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CarrierDF.tenant_id"`)}
	}
	if _, ok := cdc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CarrierDF.customer_id"`)}
	}
	if _, ok := cdc.mutation.AgreementNumber(); !ok {
		return &ValidationError{Name: "agreement_number", err: errors.New(`ent: missing required field "CarrierDF.agreement_number"`)}
	}
	if _, ok := cdc.mutation.WhoPays(); !ok {
		return &ValidationError{Name: "who_pays", err: errors.New(`ent: missing required field "CarrierDF.who_pays"`)}
	}
	if v, ok := cdc.mutation.WhoPays(); ok {
		if err := carrierdf.WhoPaysValidator(v); err != nil {
			return &ValidationError{Name: "who_pays", err: fmt.Errorf(`ent: validator failed for field "CarrierDF.who_pays": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.Test(); !ok {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required field "CarrierDF.test"`)}
	}
	if len(cdc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CarrierDF.tenant"`)}
	}
	if len(cdc.mutation.CarrierIDs()) == 0 {
		return &ValidationError{Name: "carrier", err: errors.New(`ent: missing required edge "CarrierDF.carrier"`)}
	}
	return nil
}

func (cdc *CarrierDFCreate) sqlSave(ctx context.Context) (*CarrierDF, error) {
	if err := cdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cdc.mutation.id = &_node.ID
	cdc.mutation.done = true
	return _node, nil
}

func (cdc *CarrierDFCreate) createSpec() (*CarrierDF, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierDF{config: cdc.config}
		_spec = sqlgraph.NewCreateSpec(carrierdf.Table, sqlgraph.NewFieldSpec(carrierdf.FieldID, field.TypeString))
	)
	_spec.OnConflict = cdc.conflict
	if id, ok := cdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cdc.mutation.CustomerID(); ok {
		_spec.SetField(carrierdf.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := cdc.mutation.AgreementNumber(); ok {
		_spec.SetField(carrierdf.FieldAgreementNumber, field.TypeString, value)
		_node.AgreementNumber = value
	}
	if value, ok := cdc.mutation.WhoPays(); ok {
		_spec.SetField(carrierdf.FieldWhoPays, field.TypeEnum, value)
		_node.WhoPays = value
	}
	if value, ok := cdc.mutation.Test(); ok {
		_spec.SetField(carrierdf.FieldTest, field.TypeBool, value)
		_node.Test = value
	}
	if nodes := cdc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdf.TenantTable,
			Columns: []string{carrierdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdf.CarrierTable,
			Columns: []string{carrierdf.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_carrier_df = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierDF.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierDFUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cdc *CarrierDFCreate) OnConflict(opts ...sql.ConflictOption) *CarrierDFUpsertOne {
	cdc.conflict = opts
	return &CarrierDFUpsertOne{
		create: cdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierDF.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cdc *CarrierDFCreate) OnConflictColumns(columns ...string) *CarrierDFUpsertOne {
	cdc.conflict = append(cdc.conflict, sql.ConflictColumns(columns...))
	return &CarrierDFUpsertOne{
		create: cdc,
	}
}

type (
	// CarrierDFUpsertOne is the builder for "upsert"-ing
	//  one CarrierDF node.
	CarrierDFUpsertOne struct {
		create *CarrierDFCreate
	}

	// CarrierDFUpsert is the "OnConflict" setter.
	CarrierDFUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *CarrierDFUpsert) SetTenantID(v pulid.ID) *CarrierDFUpsert {
	u.Set(carrierdf.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierDFUpsert) UpdateTenantID() *CarrierDFUpsert {
	u.SetExcluded(carrierdf.FieldTenantID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierDFUpsert) SetCustomerID(v string) *CarrierDFUpsert {
	u.Set(carrierdf.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierDFUpsert) UpdateCustomerID() *CarrierDFUpsert {
	u.SetExcluded(carrierdf.FieldCustomerID)
	return u
}

// SetAgreementNumber sets the "agreement_number" field.
func (u *CarrierDFUpsert) SetAgreementNumber(v string) *CarrierDFUpsert {
	u.Set(carrierdf.FieldAgreementNumber, v)
	return u
}

// UpdateAgreementNumber sets the "agreement_number" field to the value that was provided on create.
func (u *CarrierDFUpsert) UpdateAgreementNumber() *CarrierDFUpsert {
	u.SetExcluded(carrierdf.FieldAgreementNumber)
	return u
}

// SetWhoPays sets the "who_pays" field.
func (u *CarrierDFUpsert) SetWhoPays(v carrierdf.WhoPays) *CarrierDFUpsert {
	u.Set(carrierdf.FieldWhoPays, v)
	return u
}

// UpdateWhoPays sets the "who_pays" field to the value that was provided on create.
func (u *CarrierDFUpsert) UpdateWhoPays() *CarrierDFUpsert {
	u.SetExcluded(carrierdf.FieldWhoPays)
	return u
}

// SetTest sets the "test" field.
func (u *CarrierDFUpsert) SetTest(v bool) *CarrierDFUpsert {
	u.Set(carrierdf.FieldTest, v)
	return u
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierDFUpsert) UpdateTest() *CarrierDFUpsert {
	u.SetExcluded(carrierdf.FieldTest)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierDF.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierdf.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierDFUpsertOne) UpdateNewValues() *CarrierDFUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierdf.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierDF.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierDFUpsertOne) Ignore() *CarrierDFUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierDFUpsertOne) DoNothing() *CarrierDFUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierDFCreate.OnConflict
// documentation for more info.
func (u *CarrierDFUpsertOne) Update(set func(*CarrierDFUpsert)) *CarrierDFUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierDFUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierDFUpsertOne) SetTenantID(v pulid.ID) *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierDFUpsertOne) UpdateTenantID() *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateTenantID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierDFUpsertOne) SetCustomerID(v string) *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierDFUpsertOne) UpdateCustomerID() *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateCustomerID()
	})
}

// SetAgreementNumber sets the "agreement_number" field.
func (u *CarrierDFUpsertOne) SetAgreementNumber(v string) *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetAgreementNumber(v)
	})
}

// UpdateAgreementNumber sets the "agreement_number" field to the value that was provided on create.
func (u *CarrierDFUpsertOne) UpdateAgreementNumber() *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateAgreementNumber()
	})
}

// SetWhoPays sets the "who_pays" field.
func (u *CarrierDFUpsertOne) SetWhoPays(v carrierdf.WhoPays) *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetWhoPays(v)
	})
}

// UpdateWhoPays sets the "who_pays" field to the value that was provided on create.
func (u *CarrierDFUpsertOne) UpdateWhoPays() *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateWhoPays()
	})
}

// SetTest sets the "test" field.
func (u *CarrierDFUpsertOne) SetTest(v bool) *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierDFUpsertOne) UpdateTest() *CarrierDFUpsertOne {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateTest()
	})
}

// Exec executes the query.
func (u *CarrierDFUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierDFCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierDFUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierDFUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierDFUpsertOne.ID is not supported by MySQL driver. Use CarrierDFUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierDFUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierDFCreateBulk is the builder for creating many CarrierDF entities in bulk.
type CarrierDFCreateBulk struct {
	config
	err      error
	builders []*CarrierDFCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierDF entities in the database.
func (cdcb *CarrierDFCreateBulk) Save(ctx context.Context) ([]*CarrierDF, error) {
	if cdcb.err != nil {
		return nil, cdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*CarrierDF, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierDFMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *CarrierDFCreateBulk) SaveX(ctx context.Context) []*CarrierDF {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *CarrierDFCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *CarrierDFCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierDF.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierDFUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cdcb *CarrierDFCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierDFUpsertBulk {
	cdcb.conflict = opts
	return &CarrierDFUpsertBulk{
		create: cdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierDF.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cdcb *CarrierDFCreateBulk) OnConflictColumns(columns ...string) *CarrierDFUpsertBulk {
	cdcb.conflict = append(cdcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierDFUpsertBulk{
		create: cdcb,
	}
}

// CarrierDFUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierDF nodes.
type CarrierDFUpsertBulk struct {
	create *CarrierDFCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierDF.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierdf.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierDFUpsertBulk) UpdateNewValues() *CarrierDFUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierdf.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierDF.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierDFUpsertBulk) Ignore() *CarrierDFUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierDFUpsertBulk) DoNothing() *CarrierDFUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierDFCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierDFUpsertBulk) Update(set func(*CarrierDFUpsert)) *CarrierDFUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierDFUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierDFUpsertBulk) SetTenantID(v pulid.ID) *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierDFUpsertBulk) UpdateTenantID() *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateTenantID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierDFUpsertBulk) SetCustomerID(v string) *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierDFUpsertBulk) UpdateCustomerID() *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateCustomerID()
	})
}

// SetAgreementNumber sets the "agreement_number" field.
func (u *CarrierDFUpsertBulk) SetAgreementNumber(v string) *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetAgreementNumber(v)
	})
}

// UpdateAgreementNumber sets the "agreement_number" field to the value that was provided on create.
func (u *CarrierDFUpsertBulk) UpdateAgreementNumber() *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateAgreementNumber()
	})
}

// SetWhoPays sets the "who_pays" field.
func (u *CarrierDFUpsertBulk) SetWhoPays(v carrierdf.WhoPays) *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetWhoPays(v)
	})
}

// UpdateWhoPays sets the "who_pays" field to the value that was provided on create.
func (u *CarrierDFUpsertBulk) UpdateWhoPays() *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateWhoPays()
	})
}

// SetTest sets the "test" field.
func (u *CarrierDFUpsertBulk) SetTest(v bool) *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierDFUpsertBulk) UpdateTest() *CarrierDFUpsertBulk {
	return u.Update(func(s *CarrierDFUpsert) {
		s.UpdateTest()
	})
}

// Exec executes the query.
func (u *CarrierDFUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierDFCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierDFCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierDFUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
