// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierQuery is the builder for querying Carrier entities.
type CarrierQuery struct {
	config
	ctx                     *QueryContext
	order                   []carrier.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Carrier
	withTenant              *TenantQuery
	withCarrierBrand        *CarrierBrandQuery
	withCarrierDAO          *CarrierDAOQuery
	withCarrierDF           *CarrierDFQuery
	withCarrierDSV          *CarrierDSVQuery
	withCarrierEasyPost     *CarrierEasyPostQuery
	withCarrierGLS          *CarrierGLSQuery
	withCarrierPostNord     *CarrierPostNordQuery
	withCarrierUSPS         *CarrierUSPSQuery
	withCarrierBring        *CarrierBringQuery
	withDeliveryOption      *DeliveryOptionQuery
	withShipment            *ShipmentQuery
	withFKs                 bool
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*Carrier) error
	withNamedDeliveryOption map[string]*DeliveryOptionQuery
	withNamedShipment       map[string]*ShipmentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierQuery builder.
func (cq *CarrierQuery) Where(ps ...predicate.Carrier) *CarrierQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *CarrierQuery) Limit(limit int) *CarrierQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *CarrierQuery) Offset(offset int) *CarrierQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CarrierQuery) Unique(unique bool) *CarrierQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *CarrierQuery) Order(o ...carrier.OrderOption) *CarrierQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryTenant chains the current query on the "tenant" edge.
func (cq *CarrierQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrier.TenantTable, carrier.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierBrand chains the current query on the "carrier_brand" edge.
func (cq *CarrierQuery) QueryCarrierBrand() *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrier.CarrierBrandTable, carrier.CarrierBrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierDAO chains the current query on the "carrier_dao" edge.
func (cq *CarrierQuery) QueryCarrierDAO() *CarrierDAOQuery {
	query := (&CarrierDAOClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carrierdao.Table, carrierdao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierDAOTable, carrier.CarrierDAOColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierDF chains the current query on the "carrier_df" edge.
func (cq *CarrierQuery) QueryCarrierDF() *CarrierDFQuery {
	query := (&CarrierDFClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carrierdf.Table, carrierdf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierDFTable, carrier.CarrierDFColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierDSV chains the current query on the "carrier_dsv" edge.
func (cq *CarrierQuery) QueryCarrierDSV() *CarrierDSVQuery {
	query := (&CarrierDSVClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carrierdsv.Table, carrierdsv.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierDSVTable, carrier.CarrierDSVColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierEasyPost chains the current query on the "carrier_easy_post" edge.
func (cq *CarrierQuery) QueryCarrierEasyPost() *CarrierEasyPostQuery {
	query := (&CarrierEasyPostClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carriereasypost.Table, carriereasypost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierEasyPostTable, carrier.CarrierEasyPostColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierGLS chains the current query on the "carrier_gls" edge.
func (cq *CarrierQuery) QueryCarrierGLS() *CarrierGLSQuery {
	query := (&CarrierGLSClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carriergls.Table, carriergls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierGLSTable, carrier.CarrierGLSColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierPostNord chains the current query on the "carrier_post_nord" edge.
func (cq *CarrierQuery) QueryCarrierPostNord() *CarrierPostNordQuery {
	query := (&CarrierPostNordClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carrierpostnord.Table, carrierpostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierPostNordTable, carrier.CarrierPostNordColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierUSPS chains the current query on the "carrier_usps" edge.
func (cq *CarrierQuery) QueryCarrierUSPS() *CarrierUSPSQuery {
	query := (&CarrierUSPSClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carrierusps.Table, carrierusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierUSPSTable, carrier.CarrierUSPSColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierBring chains the current query on the "carrier_bring" edge.
func (cq *CarrierQuery) QueryCarrierBring() *CarrierBringQuery {
	query := (&CarrierBringClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(carrierbring.Table, carrierbring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierBringTable, carrier.CarrierBringColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (cq *CarrierQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrier.DeliveryOptionTable, carrier.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipment chains the current query on the "shipment" edge.
func (cq *CarrierQuery) QueryShipment() *ShipmentQuery {
	query := (&ShipmentClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrier.ShipmentTable, carrier.ShipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Carrier entity from the query.
// Returns a *NotFoundError when no Carrier was found.
func (cq *CarrierQuery) First(ctx context.Context) (*Carrier, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrier.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CarrierQuery) FirstX(ctx context.Context) *Carrier {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Carrier ID from the query.
// Returns a *NotFoundError when no Carrier ID was found.
func (cq *CarrierQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrier.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CarrierQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Carrier entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Carrier entity is found.
// Returns a *NotFoundError when no Carrier entities are found.
func (cq *CarrierQuery) Only(ctx context.Context) (*Carrier, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrier.Label}
	default:
		return nil, &NotSingularError{carrier.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CarrierQuery) OnlyX(ctx context.Context) *Carrier {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Carrier ID in the query.
// Returns a *NotSingularError when more than one Carrier ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CarrierQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrier.Label}
	default:
		err = &NotSingularError{carrier.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CarrierQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Carriers.
func (cq *CarrierQuery) All(ctx context.Context) ([]*Carrier, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Carrier, *CarrierQuery]()
	return withInterceptors[[]*Carrier](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *CarrierQuery) AllX(ctx context.Context) []*Carrier {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Carrier IDs.
func (cq *CarrierQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(carrier.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CarrierQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CarrierQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*CarrierQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CarrierQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CarrierQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CarrierQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CarrierQuery) Clone() *CarrierQuery {
	if cq == nil {
		return nil
	}
	return &CarrierQuery{
		config:              cq.config,
		ctx:                 cq.ctx.Clone(),
		order:               append([]carrier.OrderOption{}, cq.order...),
		inters:              append([]Interceptor{}, cq.inters...),
		predicates:          append([]predicate.Carrier{}, cq.predicates...),
		withTenant:          cq.withTenant.Clone(),
		withCarrierBrand:    cq.withCarrierBrand.Clone(),
		withCarrierDAO:      cq.withCarrierDAO.Clone(),
		withCarrierDF:       cq.withCarrierDF.Clone(),
		withCarrierDSV:      cq.withCarrierDSV.Clone(),
		withCarrierEasyPost: cq.withCarrierEasyPost.Clone(),
		withCarrierGLS:      cq.withCarrierGLS.Clone(),
		withCarrierPostNord: cq.withCarrierPostNord.Clone(),
		withCarrierUSPS:     cq.withCarrierUSPS.Clone(),
		withCarrierBring:    cq.withCarrierBring.Clone(),
		withDeliveryOption:  cq.withDeliveryOption.Clone(),
		withShipment:        cq.withShipment.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithTenant(opts ...func(*TenantQuery)) *CarrierQuery {
	query := (&TenantClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTenant = query
	return cq
}

// WithCarrierBrand tells the query-builder to eager-load the nodes that are connected to
// the "carrier_brand" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierBrand(opts ...func(*CarrierBrandQuery)) *CarrierQuery {
	query := (&CarrierBrandClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierBrand = query
	return cq
}

// WithCarrierDAO tells the query-builder to eager-load the nodes that are connected to
// the "carrier_dao" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierDAO(opts ...func(*CarrierDAOQuery)) *CarrierQuery {
	query := (&CarrierDAOClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierDAO = query
	return cq
}

// WithCarrierDF tells the query-builder to eager-load the nodes that are connected to
// the "carrier_df" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierDF(opts ...func(*CarrierDFQuery)) *CarrierQuery {
	query := (&CarrierDFClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierDF = query
	return cq
}

// WithCarrierDSV tells the query-builder to eager-load the nodes that are connected to
// the "carrier_dsv" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierDSV(opts ...func(*CarrierDSVQuery)) *CarrierQuery {
	query := (&CarrierDSVClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierDSV = query
	return cq
}

// WithCarrierEasyPost tells the query-builder to eager-load the nodes that are connected to
// the "carrier_easy_post" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierEasyPost(opts ...func(*CarrierEasyPostQuery)) *CarrierQuery {
	query := (&CarrierEasyPostClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierEasyPost = query
	return cq
}

// WithCarrierGLS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_gls" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierGLS(opts ...func(*CarrierGLSQuery)) *CarrierQuery {
	query := (&CarrierGLSClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierGLS = query
	return cq
}

// WithCarrierPostNord tells the query-builder to eager-load the nodes that are connected to
// the "carrier_post_nord" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierPostNord(opts ...func(*CarrierPostNordQuery)) *CarrierQuery {
	query := (&CarrierPostNordClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierPostNord = query
	return cq
}

// WithCarrierUSPS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierUSPS(opts ...func(*CarrierUSPSQuery)) *CarrierQuery {
	query := (&CarrierUSPSClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierUSPS = query
	return cq
}

// WithCarrierBring tells the query-builder to eager-load the nodes that are connected to
// the "carrier_bring" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithCarrierBring(opts ...func(*CarrierBringQuery)) *CarrierQuery {
	query := (&CarrierBringClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierBring = query
	return cq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *CarrierQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDeliveryOption = query
	return cq
}

// WithShipment tells the query-builder to eager-load the nodes that are connected to
// the "shipment" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithShipment(opts ...func(*ShipmentQuery)) *CarrierQuery {
	query := (&ShipmentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withShipment = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Carrier.Query().
//		GroupBy(carrier.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *CarrierQuery) GroupBy(field string, fields ...string) *CarrierGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = carrier.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Carrier.Query().
//		Select(carrier.FieldTenantID).
//		Scan(ctx, &v)
func (cq *CarrierQuery) Select(fields ...string) *CarrierSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &CarrierSelect{CarrierQuery: cq}
	sbuild.label = carrier.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierSelect configured with the given aggregations.
func (cq *CarrierQuery) Aggregate(fns ...AggregateFunc) *CarrierSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *CarrierQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !carrier.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	if carrier.Policy == nil {
		return errors.New("ent: uninitialized carrier.Policy (forgotten import ent/runtime?)")
	}
	if err := carrier.Policy.EvalQuery(ctx, cq); err != nil {
		return err
	}
	return nil
}

func (cq *CarrierQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Carrier, error) {
	var (
		nodes       = []*Carrier{}
		withFKs     = cq.withFKs
		_spec       = cq.querySpec()
		loadedTypes = [12]bool{
			cq.withTenant != nil,
			cq.withCarrierBrand != nil,
			cq.withCarrierDAO != nil,
			cq.withCarrierDF != nil,
			cq.withCarrierDSV != nil,
			cq.withCarrierEasyPost != nil,
			cq.withCarrierGLS != nil,
			cq.withCarrierPostNord != nil,
			cq.withCarrierUSPS != nil,
			cq.withCarrierBring != nil,
			cq.withDeliveryOption != nil,
			cq.withShipment != nil,
		}
	)
	if cq.withCarrierBrand != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrier.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Carrier).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Carrier{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withTenant; query != nil {
		if err := cq.loadTenant(ctx, query, nodes, nil,
			func(n *Carrier, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierBrand; query != nil {
		if err := cq.loadCarrierBrand(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierBrand) { n.Edges.CarrierBrand = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierDAO; query != nil {
		if err := cq.loadCarrierDAO(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierDAO) { n.Edges.CarrierDAO = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierDF; query != nil {
		if err := cq.loadCarrierDF(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierDF) { n.Edges.CarrierDF = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierDSV; query != nil {
		if err := cq.loadCarrierDSV(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierDSV) { n.Edges.CarrierDSV = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierEasyPost; query != nil {
		if err := cq.loadCarrierEasyPost(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierEasyPost) { n.Edges.CarrierEasyPost = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierGLS; query != nil {
		if err := cq.loadCarrierGLS(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierGLS) { n.Edges.CarrierGLS = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierPostNord; query != nil {
		if err := cq.loadCarrierPostNord(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierPostNord) { n.Edges.CarrierPostNord = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierUSPS; query != nil {
		if err := cq.loadCarrierUSPS(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierUSPS) { n.Edges.CarrierUSPS = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierBring; query != nil {
		if err := cq.loadCarrierBring(ctx, query, nodes, nil,
			func(n *Carrier, e *CarrierBring) { n.Edges.CarrierBring = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDeliveryOption; query != nil {
		if err := cq.loadDeliveryOption(ctx, query, nodes,
			func(n *Carrier) { n.Edges.DeliveryOption = []*DeliveryOption{} },
			func(n *Carrier, e *DeliveryOption) { n.Edges.DeliveryOption = append(n.Edges.DeliveryOption, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withShipment; query != nil {
		if err := cq.loadShipment(ctx, query, nodes,
			func(n *Carrier) { n.Edges.Shipment = []*Shipment{} },
			func(n *Carrier, e *Shipment) { n.Edges.Shipment = append(n.Edges.Shipment, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDeliveryOption {
		if err := cq.loadDeliveryOption(ctx, query, nodes,
			func(n *Carrier) { n.appendNamedDeliveryOption(name) },
			func(n *Carrier, e *DeliveryOption) { n.appendNamedDeliveryOption(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedShipment {
		if err := cq.loadShipment(ctx, query, nodes,
			func(n *Carrier) { n.appendNamedShipment(name) },
			func(n *Carrier, e *Shipment) { n.appendNamedShipment(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CarrierQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Carrier)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierBrand(ctx context.Context, query *CarrierBrandQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierBrand)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Carrier)
	for i := range nodes {
		if nodes[i].carrier_carrier_brand == nil {
			continue
		}
		fk := *nodes[i].carrier_carrier_brand
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierbrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_carrier_brand" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierDAO(ctx context.Context, query *CarrierDAOQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierDAO)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierDAO(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.CarrierDAOColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_dao
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_dao" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_dao" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierDF(ctx context.Context, query *CarrierDFQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierDF)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierDF(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.CarrierDFColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_df
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_df" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_df" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierDSV(ctx context.Context, query *CarrierDSVQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierDSV)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierDSV(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.CarrierDSVColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_dsv
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_dsv" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_dsv" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierEasyPost(ctx context.Context, query *CarrierEasyPostQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierEasyPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierEasyPost(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.CarrierEasyPostColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_easy_post
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_easy_post" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_easy_post" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierGLS(ctx context.Context, query *CarrierGLSQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierGLS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierGLS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.CarrierGLSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_gls
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_gls" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_gls" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierPostNord(ctx context.Context, query *CarrierPostNordQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierPostNord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierPostNord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.CarrierPostNordColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_post_nord
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_post_nord" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_post_nord" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierUSPS(ctx context.Context, query *CarrierUSPSQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierUSPS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierUSPS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.CarrierUSPSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_usps
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_usps" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_usps" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadCarrierBring(ctx context.Context, query *CarrierBringQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *CarrierBring)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierBring(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.CarrierBringColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_bring
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_bring" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_bring" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *DeliveryOption)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DeliveryOption(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.DeliveryOptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.delivery_option_carrier
		if fk == nil {
			return fmt.Errorf(`foreign-key "delivery_option_carrier" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "delivery_option_carrier" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarrierQuery) loadShipment(ctx context.Context, query *ShipmentQuery, nodes []*Carrier, init func(*Carrier), assign func(*Carrier, *Shipment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Carrier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Shipment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrier.ShipmentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_carrier
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_carrier" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_carrier" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *CarrierQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CarrierQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrier.Table, carrier.Columns, sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrier.FieldID)
		for i := range fields {
			if fields[i] != carrier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cq.withTenant != nil {
			_spec.Node.AddColumnOnce(carrier.FieldTenantID)
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CarrierQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(carrier.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = carrier.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryOption tells the query-builder to eager-load the nodes that are connected to the "delivery_option"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithNamedDeliveryOption(name string, opts ...func(*DeliveryOptionQuery)) *CarrierQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDeliveryOption == nil {
		cq.withNamedDeliveryOption = make(map[string]*DeliveryOptionQuery)
	}
	cq.withNamedDeliveryOption[name] = query
	return cq
}

// WithNamedShipment tells the query-builder to eager-load the nodes that are connected to the "shipment"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarrierQuery) WithNamedShipment(name string, opts ...func(*ShipmentQuery)) *CarrierQuery {
	query := (&ShipmentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedShipment == nil {
		cq.withNamedShipment = make(map[string]*ShipmentQuery)
	}
	cq.withNamedShipment[name] = query
	return cq
}

// CarrierGroupBy is the group-by builder for Carrier entities.
type CarrierGroupBy struct {
	selector
	build *CarrierQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CarrierGroupBy) Aggregate(fns ...AggregateFunc) *CarrierGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *CarrierGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierQuery, *CarrierGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *CarrierGroupBy) sqlScan(ctx context.Context, root *CarrierQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierSelect is the builder for selecting fields of Carrier entities.
type CarrierSelect struct {
	*CarrierQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *CarrierSelect) Aggregate(fns ...AggregateFunc) *CarrierSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CarrierSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierQuery, *CarrierSelect](ctx, cs.CarrierQuery, cs, cs.inters, v)
}

func (cs *CarrierSelect) sqlScan(ctx context.Context, root *CarrierQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
