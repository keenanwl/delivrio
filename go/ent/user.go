// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname string `json:"surname,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Field is just for front end convenience. Password gets stored as hash.
	Password string `json:"-"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"-"`
	// IsAccountOwner holds the value of the "is_account_owner" field.
	IsAccountOwner bool `json:"is_account_owner,omitempty"`
	// IsGlobalAdmin holds the value of the "is_global_admin" field.
	IsGlobalAdmin bool `json:"is_global_admin,omitempty"`
	// MarketingConsent holds the value of the "marketing_consent" field.
	MarketingConsent bool `json:"marketing_consent,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ArchivedAt holds the value of the "archived_at" field.
	ArchivedAt *time.Time `json:"archived_at,omitempty"`
	// When fulfilling, the next carrier pickup date for the package can be selected
	PickupDay user.PickupDay `json:"pickup_day,omitempty"`
	// So we can ask the user to confirm their pickup day after X hours
	PickupDayLastChanged time.Time `json:"pickup_day_last_changed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges           UserEdges `json:"edges"`
	seat_group_user *pulid.ID
	user_language   *pulid.ID
	selectValues    sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// OtkRequests holds the value of the otk_requests edge.
	OtkRequests []*OTKRequests `json:"otk_requests,omitempty"`
	// SignupOptions holds the value of the signup_options edge.
	SignupOptions *SignupOptions `json:"signup_options,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// ChangeHistory holds the value of the change_history edge.
	ChangeHistory []*ChangeHistory `json:"change_history,omitempty"`
	// PlanHistoryUser holds the value of the plan_history_user edge.
	PlanHistoryUser []*PlanHistory `json:"plan_history_user,omitempty"`
	// APIToken holds the value of the api_token edge.
	APIToken []*APIToken `json:"api_token,omitempty"`
	// SelectedWorkstation holds the value of the selected_workstation edge.
	SelectedWorkstation *Workstation `json:"selected_workstation,omitempty"`
	// SeatGroup holds the value of the seat_group edge.
	SeatGroup *SeatGroup `json:"seat_group,omitempty"`
	// WorkspaceRecentScan holds the value of the workspace_recent_scan edge.
	WorkspaceRecentScan []*WorkspaceRecentScan `json:"workspace_recent_scan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
	// totalCount holds the count of the edges above.
	totalCount [10]map[string]int

	namedOtkRequests         map[string][]*OTKRequests
	namedChangeHistory       map[string][]*ChangeHistory
	namedPlanHistoryUser     map[string][]*PlanHistory
	namedAPIToken            map[string][]*APIToken
	namedWorkspaceRecentScan map[string][]*WorkspaceRecentScan
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// OtkRequestsOrErr returns the OtkRequests value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OtkRequestsOrErr() ([]*OTKRequests, error) {
	if e.loadedTypes[1] {
		return e.OtkRequests, nil
	}
	return nil, &NotLoadedError{edge: "otk_requests"}
}

// SignupOptionsOrErr returns the SignupOptions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SignupOptionsOrErr() (*SignupOptions, error) {
	if e.SignupOptions != nil {
		return e.SignupOptions, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: signupoptions.Label}
	}
	return nil, &NotLoadedError{edge: "signup_options"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// ChangeHistoryOrErr returns the ChangeHistory value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ChangeHistoryOrErr() ([]*ChangeHistory, error) {
	if e.loadedTypes[4] {
		return e.ChangeHistory, nil
	}
	return nil, &NotLoadedError{edge: "change_history"}
}

// PlanHistoryUserOrErr returns the PlanHistoryUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PlanHistoryUserOrErr() ([]*PlanHistory, error) {
	if e.loadedTypes[5] {
		return e.PlanHistoryUser, nil
	}
	return nil, &NotLoadedError{edge: "plan_history_user"}
}

// APITokenOrErr returns the APIToken value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) APITokenOrErr() ([]*APIToken, error) {
	if e.loadedTypes[6] {
		return e.APIToken, nil
	}
	return nil, &NotLoadedError{edge: "api_token"}
}

// SelectedWorkstationOrErr returns the SelectedWorkstation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SelectedWorkstationOrErr() (*Workstation, error) {
	if e.SelectedWorkstation != nil {
		return e.SelectedWorkstation, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: workstation.Label}
	}
	return nil, &NotLoadedError{edge: "selected_workstation"}
}

// SeatGroupOrErr returns the SeatGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SeatGroupOrErr() (*SeatGroup, error) {
	if e.SeatGroup != nil {
		return e.SeatGroup, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: seatgroup.Label}
	}
	return nil, &NotLoadedError{edge: "seat_group"}
}

// WorkspaceRecentScanOrErr returns the WorkspaceRecentScan value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) WorkspaceRecentScanOrErr() ([]*WorkspaceRecentScan, error) {
	if e.loadedTypes[9] {
		return e.WorkspaceRecentScan, nil
	}
	return nil, &NotLoadedError{edge: "workspace_recent_scan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldTenantID:
			values[i] = new(pulid.ID)
		case user.FieldIsAccountOwner, user.FieldIsGlobalAdmin, user.FieldMarketingConsent:
			values[i] = new(sql.NullBool)
		case user.FieldName, user.FieldSurname, user.FieldPhoneNumber, user.FieldEmail, user.FieldPassword, user.FieldHash, user.FieldPickupDay:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldArchivedAt, user.FieldPickupDayLastChanged:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // seat_group_user
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case user.ForeignKeys[1]: // user_language
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				u.TenantID = *value
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				u.Surname = value.String
			}
		case user.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				u.PhoneNumber = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				u.Hash = value.String
			}
		case user.FieldIsAccountOwner:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_account_owner", values[i])
			} else if value.Valid {
				u.IsAccountOwner = value.Bool
			}
		case user.FieldIsGlobalAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_global_admin", values[i])
			} else if value.Valid {
				u.IsGlobalAdmin = value.Bool
			}
		case user.FieldMarketingConsent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field marketing_consent", values[i])
			} else if value.Valid {
				u.MarketingConsent = value.Bool
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldArchivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[i])
			} else if value.Valid {
				u.ArchivedAt = new(time.Time)
				*u.ArchivedAt = value.Time
			}
		case user.FieldPickupDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pickup_day", values[i])
			} else if value.Valid {
				u.PickupDay = user.PickupDay(value.String)
			}
		case user.FieldPickupDayLastChanged:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pickup_day_last_changed", values[i])
			} else if value.Valid {
				u.PickupDayLastChanged = value.Time
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field seat_group_user", values[i])
			} else if value.Valid {
				u.seat_group_user = new(pulid.ID)
				*u.seat_group_user = *value.S.(*pulid.ID)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_language", values[i])
			} else if value.Valid {
				u.user_language = new(pulid.ID)
				*u.user_language = *value.S.(*pulid.ID)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the User entity.
func (u *User) QueryTenant() *TenantQuery {
	return NewUserClient(u.config).QueryTenant(u)
}

// QueryOtkRequests queries the "otk_requests" edge of the User entity.
func (u *User) QueryOtkRequests() *OTKRequestsQuery {
	return NewUserClient(u.config).QueryOtkRequests(u)
}

// QuerySignupOptions queries the "signup_options" edge of the User entity.
func (u *User) QuerySignupOptions() *SignupOptionsQuery {
	return NewUserClient(u.config).QuerySignupOptions(u)
}

// QueryLanguage queries the "language" edge of the User entity.
func (u *User) QueryLanguage() *LanguageQuery {
	return NewUserClient(u.config).QueryLanguage(u)
}

// QueryChangeHistory queries the "change_history" edge of the User entity.
func (u *User) QueryChangeHistory() *ChangeHistoryQuery {
	return NewUserClient(u.config).QueryChangeHistory(u)
}

// QueryPlanHistoryUser queries the "plan_history_user" edge of the User entity.
func (u *User) QueryPlanHistoryUser() *PlanHistoryQuery {
	return NewUserClient(u.config).QueryPlanHistoryUser(u)
}

// QueryAPIToken queries the "api_token" edge of the User entity.
func (u *User) QueryAPIToken() *APITokenQuery {
	return NewUserClient(u.config).QueryAPIToken(u)
}

// QuerySelectedWorkstation queries the "selected_workstation" edge of the User entity.
func (u *User) QuerySelectedWorkstation() *WorkstationQuery {
	return NewUserClient(u.config).QuerySelectedWorkstation(u)
}

// QuerySeatGroup queries the "seat_group" edge of the User entity.
func (u *User) QuerySeatGroup() *SeatGroupQuery {
	return NewUserClient(u.config).QuerySeatGroup(u)
}

// QueryWorkspaceRecentScan queries the "workspace_recent_scan" edge of the User entity.
func (u *User) QueryWorkspaceRecentScan() *WorkspaceRecentScanQuery {
	return NewUserClient(u.config).QueryWorkspaceRecentScan(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", u.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("surname=")
	builder.WriteString(u.Surname)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(u.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("hash=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("is_account_owner=")
	builder.WriteString(fmt.Sprintf("%v", u.IsAccountOwner))
	builder.WriteString(", ")
	builder.WriteString("is_global_admin=")
	builder.WriteString(fmt.Sprintf("%v", u.IsGlobalAdmin))
	builder.WriteString(", ")
	builder.WriteString("marketing_consent=")
	builder.WriteString(fmt.Sprintf("%v", u.MarketingConsent))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.ArchivedAt; v != nil {
		builder.WriteString("archived_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("pickup_day=")
	builder.WriteString(fmt.Sprintf("%v", u.PickupDay))
	builder.WriteString(", ")
	builder.WriteString("pickup_day_last_changed=")
	builder.WriteString(u.PickupDayLastChanged.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOtkRequests returns the OtkRequests named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedOtkRequests(name string) ([]*OTKRequests, error) {
	if u.Edges.namedOtkRequests == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedOtkRequests[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedOtkRequests(name string, edges ...*OTKRequests) {
	if u.Edges.namedOtkRequests == nil {
		u.Edges.namedOtkRequests = make(map[string][]*OTKRequests)
	}
	if len(edges) == 0 {
		u.Edges.namedOtkRequests[name] = []*OTKRequests{}
	} else {
		u.Edges.namedOtkRequests[name] = append(u.Edges.namedOtkRequests[name], edges...)
	}
}

// NamedChangeHistory returns the ChangeHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedChangeHistory(name string) ([]*ChangeHistory, error) {
	if u.Edges.namedChangeHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedChangeHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedChangeHistory(name string, edges ...*ChangeHistory) {
	if u.Edges.namedChangeHistory == nil {
		u.Edges.namedChangeHistory = make(map[string][]*ChangeHistory)
	}
	if len(edges) == 0 {
		u.Edges.namedChangeHistory[name] = []*ChangeHistory{}
	} else {
		u.Edges.namedChangeHistory[name] = append(u.Edges.namedChangeHistory[name], edges...)
	}
}

// NamedPlanHistoryUser returns the PlanHistoryUser named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedPlanHistoryUser(name string) ([]*PlanHistory, error) {
	if u.Edges.namedPlanHistoryUser == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedPlanHistoryUser[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedPlanHistoryUser(name string, edges ...*PlanHistory) {
	if u.Edges.namedPlanHistoryUser == nil {
		u.Edges.namedPlanHistoryUser = make(map[string][]*PlanHistory)
	}
	if len(edges) == 0 {
		u.Edges.namedPlanHistoryUser[name] = []*PlanHistory{}
	} else {
		u.Edges.namedPlanHistoryUser[name] = append(u.Edges.namedPlanHistoryUser[name], edges...)
	}
}

// NamedAPIToken returns the APIToken named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAPIToken(name string) ([]*APIToken, error) {
	if u.Edges.namedAPIToken == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAPIToken[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAPIToken(name string, edges ...*APIToken) {
	if u.Edges.namedAPIToken == nil {
		u.Edges.namedAPIToken = make(map[string][]*APIToken)
	}
	if len(edges) == 0 {
		u.Edges.namedAPIToken[name] = []*APIToken{}
	} else {
		u.Edges.namedAPIToken[name] = append(u.Edges.namedAPIToken[name], edges...)
	}
}

// NamedWorkspaceRecentScan returns the WorkspaceRecentScan named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedWorkspaceRecentScan(name string) ([]*WorkspaceRecentScan, error) {
	if u.Edges.namedWorkspaceRecentScan == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedWorkspaceRecentScan[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedWorkspaceRecentScan(name string, edges ...*WorkspaceRecentScan) {
	if u.Edges.namedWorkspaceRecentScan == nil {
		u.Edges.namedWorkspaceRecentScan = make(map[string][]*WorkspaceRecentScan)
	}
	if len(edges) == 0 {
		u.Edges.namedWorkspaceRecentScan[name] = []*WorkspaceRecentScan{}
	} else {
		u.Edges.namedWorkspaceRecentScan[name] = append(u.Edges.namedWorkspaceRecentScan[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
