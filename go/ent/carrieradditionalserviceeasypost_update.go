// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceEasyPostUpdate is the builder for updating CarrierAdditionalServiceEasyPost entities.
type CarrierAdditionalServiceEasyPostUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierAdditionalServiceEasyPostMutation
}

// Where appends a list predicates to the CarrierAdditionalServiceEasyPostUpdate builder.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) Where(ps ...predicate.CarrierAdditionalServiceEasyPost) *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.Where(ps...)
	return casepu
}

// SetLabel sets the "label" field.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) SetLabel(s string) *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.SetLabel(s)
	return casepu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) SetNillableLabel(s *string) *CarrierAdditionalServiceEasyPostUpdate {
	if s != nil {
		casepu.SetLabel(*s)
	}
	return casepu
}

// SetAPIKey sets the "api_key" field.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) SetAPIKey(s string) *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.SetAPIKey(s)
	return casepu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) SetNillableAPIKey(s *string) *CarrierAdditionalServiceEasyPostUpdate {
	if s != nil {
		casepu.SetAPIKey(*s)
	}
	return casepu
}

// SetAPIValue sets the "api_value" field.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) SetAPIValue(s string) *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.SetAPIValue(s)
	return casepu
}

// SetNillableAPIValue sets the "api_value" field if the given value is not nil.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) SetNillableAPIValue(s *string) *CarrierAdditionalServiceEasyPostUpdate {
	if s != nil {
		casepu.SetAPIValue(*s)
	}
	return casepu
}

// AddCarrierServiceEasyPostIDs adds the "carrier_service_easy_post" edge to the CarrierServiceEasyPost entity by IDs.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) AddCarrierServiceEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.AddCarrierServiceEasyPostIDs(ids...)
	return casepu
}

// AddCarrierServiceEasyPost adds the "carrier_service_easy_post" edges to the CarrierServiceEasyPost entity.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) AddCarrierServiceEasyPost(c ...*CarrierServiceEasyPost) *CarrierAdditionalServiceEasyPostUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casepu.AddCarrierServiceEasyPostIDs(ids...)
}

// AddDeliveryOptionEasyPostIDs adds the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by IDs.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) AddDeliveryOptionEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.AddDeliveryOptionEasyPostIDs(ids...)
	return casepu
}

// AddDeliveryOptionEasyPost adds the "delivery_option_easy_post" edges to the DeliveryOptionEasyPost entity.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) AddDeliveryOptionEasyPost(d ...*DeliveryOptionEasyPost) *CarrierAdditionalServiceEasyPostUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casepu.AddDeliveryOptionEasyPostIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceEasyPostMutation object of the builder.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) Mutation() *CarrierAdditionalServiceEasyPostMutation {
	return casepu.mutation
}

// ClearCarrierServiceEasyPost clears all "carrier_service_easy_post" edges to the CarrierServiceEasyPost entity.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) ClearCarrierServiceEasyPost() *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.ClearCarrierServiceEasyPost()
	return casepu
}

// RemoveCarrierServiceEasyPostIDs removes the "carrier_service_easy_post" edge to CarrierServiceEasyPost entities by IDs.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) RemoveCarrierServiceEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.RemoveCarrierServiceEasyPostIDs(ids...)
	return casepu
}

// RemoveCarrierServiceEasyPost removes "carrier_service_easy_post" edges to CarrierServiceEasyPost entities.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) RemoveCarrierServiceEasyPost(c ...*CarrierServiceEasyPost) *CarrierAdditionalServiceEasyPostUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casepu.RemoveCarrierServiceEasyPostIDs(ids...)
}

// ClearDeliveryOptionEasyPost clears all "delivery_option_easy_post" edges to the DeliveryOptionEasyPost entity.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) ClearDeliveryOptionEasyPost() *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.ClearDeliveryOptionEasyPost()
	return casepu
}

// RemoveDeliveryOptionEasyPostIDs removes the "delivery_option_easy_post" edge to DeliveryOptionEasyPost entities by IDs.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) RemoveDeliveryOptionEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostUpdate {
	casepu.mutation.RemoveDeliveryOptionEasyPostIDs(ids...)
	return casepu
}

// RemoveDeliveryOptionEasyPost removes "delivery_option_easy_post" edges to DeliveryOptionEasyPost entities.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) RemoveDeliveryOptionEasyPost(d ...*DeliveryOptionEasyPost) *CarrierAdditionalServiceEasyPostUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casepu.RemoveDeliveryOptionEasyPostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, casepu.sqlSave, casepu.mutation, casepu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) SaveX(ctx context.Context) int {
	affected, err := casepu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) Exec(ctx context.Context) error {
	_, err := casepu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casepu *CarrierAdditionalServiceEasyPostUpdate) ExecX(ctx context.Context) {
	if err := casepu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casepu *CarrierAdditionalServiceEasyPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalserviceeasypost.Table, carrieradditionalserviceeasypost.Columns, sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString))
	if ps := casepu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casepu.mutation.Label(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldLabel, field.TypeString, value)
	}
	if value, ok := casepu.mutation.APIKey(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := casepu.mutation.APIValue(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldAPIValue, field.TypeString, value)
	}
	if casepu.mutation.CarrierServiceEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.CarrierServiceEasyPostTable,
			Columns: carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casepu.mutation.RemovedCarrierServiceEasyPostIDs(); len(nodes) > 0 && !casepu.mutation.CarrierServiceEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.CarrierServiceEasyPostTable,
			Columns: carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casepu.mutation.CarrierServiceEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.CarrierServiceEasyPostTable,
			Columns: carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casepu.mutation.DeliveryOptionEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable,
			Columns: carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casepu.mutation.RemovedDeliveryOptionEasyPostIDs(); len(nodes) > 0 && !casepu.mutation.DeliveryOptionEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable,
			Columns: carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casepu.mutation.DeliveryOptionEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable,
			Columns: carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, casepu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalserviceeasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	casepu.mutation.done = true
	return n, nil
}

// CarrierAdditionalServiceEasyPostUpdateOne is the builder for updating a single CarrierAdditionalServiceEasyPost entity.
type CarrierAdditionalServiceEasyPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierAdditionalServiceEasyPostMutation
}

// SetLabel sets the "label" field.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) SetLabel(s string) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.SetLabel(s)
	return casepuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) SetNillableLabel(s *string) *CarrierAdditionalServiceEasyPostUpdateOne {
	if s != nil {
		casepuo.SetLabel(*s)
	}
	return casepuo
}

// SetAPIKey sets the "api_key" field.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) SetAPIKey(s string) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.SetAPIKey(s)
	return casepuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) SetNillableAPIKey(s *string) *CarrierAdditionalServiceEasyPostUpdateOne {
	if s != nil {
		casepuo.SetAPIKey(*s)
	}
	return casepuo
}

// SetAPIValue sets the "api_value" field.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) SetAPIValue(s string) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.SetAPIValue(s)
	return casepuo
}

// SetNillableAPIValue sets the "api_value" field if the given value is not nil.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) SetNillableAPIValue(s *string) *CarrierAdditionalServiceEasyPostUpdateOne {
	if s != nil {
		casepuo.SetAPIValue(*s)
	}
	return casepuo
}

// AddCarrierServiceEasyPostIDs adds the "carrier_service_easy_post" edge to the CarrierServiceEasyPost entity by IDs.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) AddCarrierServiceEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.AddCarrierServiceEasyPostIDs(ids...)
	return casepuo
}

// AddCarrierServiceEasyPost adds the "carrier_service_easy_post" edges to the CarrierServiceEasyPost entity.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) AddCarrierServiceEasyPost(c ...*CarrierServiceEasyPost) *CarrierAdditionalServiceEasyPostUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casepuo.AddCarrierServiceEasyPostIDs(ids...)
}

// AddDeliveryOptionEasyPostIDs adds the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by IDs.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) AddDeliveryOptionEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.AddDeliveryOptionEasyPostIDs(ids...)
	return casepuo
}

// AddDeliveryOptionEasyPost adds the "delivery_option_easy_post" edges to the DeliveryOptionEasyPost entity.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) AddDeliveryOptionEasyPost(d ...*DeliveryOptionEasyPost) *CarrierAdditionalServiceEasyPostUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casepuo.AddDeliveryOptionEasyPostIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceEasyPostMutation object of the builder.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) Mutation() *CarrierAdditionalServiceEasyPostMutation {
	return casepuo.mutation
}

// ClearCarrierServiceEasyPost clears all "carrier_service_easy_post" edges to the CarrierServiceEasyPost entity.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) ClearCarrierServiceEasyPost() *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.ClearCarrierServiceEasyPost()
	return casepuo
}

// RemoveCarrierServiceEasyPostIDs removes the "carrier_service_easy_post" edge to CarrierServiceEasyPost entities by IDs.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) RemoveCarrierServiceEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.RemoveCarrierServiceEasyPostIDs(ids...)
	return casepuo
}

// RemoveCarrierServiceEasyPost removes "carrier_service_easy_post" edges to CarrierServiceEasyPost entities.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) RemoveCarrierServiceEasyPost(c ...*CarrierServiceEasyPost) *CarrierAdditionalServiceEasyPostUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casepuo.RemoveCarrierServiceEasyPostIDs(ids...)
}

// ClearDeliveryOptionEasyPost clears all "delivery_option_easy_post" edges to the DeliveryOptionEasyPost entity.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) ClearDeliveryOptionEasyPost() *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.ClearDeliveryOptionEasyPost()
	return casepuo
}

// RemoveDeliveryOptionEasyPostIDs removes the "delivery_option_easy_post" edge to DeliveryOptionEasyPost entities by IDs.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) RemoveDeliveryOptionEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.RemoveDeliveryOptionEasyPostIDs(ids...)
	return casepuo
}

// RemoveDeliveryOptionEasyPost removes "delivery_option_easy_post" edges to DeliveryOptionEasyPost entities.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) RemoveDeliveryOptionEasyPost(d ...*DeliveryOptionEasyPost) *CarrierAdditionalServiceEasyPostUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casepuo.RemoveDeliveryOptionEasyPostIDs(ids...)
}

// Where appends a list predicates to the CarrierAdditionalServiceEasyPostUpdate builder.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) Where(ps ...predicate.CarrierAdditionalServiceEasyPost) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.mutation.Where(ps...)
	return casepuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) Select(field string, fields ...string) *CarrierAdditionalServiceEasyPostUpdateOne {
	casepuo.fields = append([]string{field}, fields...)
	return casepuo
}

// Save executes the query and returns the updated CarrierAdditionalServiceEasyPost entity.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) Save(ctx context.Context) (*CarrierAdditionalServiceEasyPost, error) {
	return withHooks(ctx, casepuo.sqlSave, casepuo.mutation, casepuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) SaveX(ctx context.Context) *CarrierAdditionalServiceEasyPost {
	node, err := casepuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) Exec(ctx context.Context) error {
	_, err := casepuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) ExecX(ctx context.Context) {
	if err := casepuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casepuo *CarrierAdditionalServiceEasyPostUpdateOne) sqlSave(ctx context.Context) (_node *CarrierAdditionalServiceEasyPost, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalserviceeasypost.Table, carrieradditionalserviceeasypost.Columns, sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString))
	id, ok := casepuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierAdditionalServiceEasyPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := casepuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalserviceeasypost.FieldID)
		for _, f := range fields {
			if !carrieradditionalserviceeasypost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrieradditionalserviceeasypost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := casepuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casepuo.mutation.Label(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldLabel, field.TypeString, value)
	}
	if value, ok := casepuo.mutation.APIKey(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := casepuo.mutation.APIValue(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldAPIValue, field.TypeString, value)
	}
	if casepuo.mutation.CarrierServiceEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.CarrierServiceEasyPostTable,
			Columns: carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casepuo.mutation.RemovedCarrierServiceEasyPostIDs(); len(nodes) > 0 && !casepuo.mutation.CarrierServiceEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.CarrierServiceEasyPostTable,
			Columns: carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casepuo.mutation.CarrierServiceEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.CarrierServiceEasyPostTable,
			Columns: carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casepuo.mutation.DeliveryOptionEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable,
			Columns: carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casepuo.mutation.RemovedDeliveryOptionEasyPostIDs(); len(nodes) > 0 && !casepuo.mutation.DeliveryOptionEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable,
			Columns: carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casepuo.mutation.DeliveryOptionEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable,
			Columns: carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierAdditionalServiceEasyPost{config: casepuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, casepuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalserviceeasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	casepuo.mutation.done = true
	return _node, nil
}
