// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectionQuery is the builder for querying Connection entities.
type ConnectionQuery struct {
	config
	ctx                       *QueryContext
	order                     []connection.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Connection
	withTenant                *TenantQuery
	withConnectionBrand       *ConnectionBrandQuery
	withConnectionShopify     *ConnectionShopifyQuery
	withOrders                *OrderQuery
	withSenderLocation        *LocationQuery
	withPickupLocation        *LocationQuery
	withReturnLocation        *LocationQuery
	withSellerLocation        *LocationQuery
	withDeliveryOption        *DeliveryOptionQuery
	withDefaultDeliveryOption *DeliveryOptionQuery
	withReturnPortal          *ReturnPortalQuery
	withHypothesisTest        *HypothesisTestQuery
	withNotifications         *NotificationQuery
	withCurrency              *CurrencyQuery
	withPackingSlipTemplate   *DocumentQuery
	withConnectionLookup      *ConnectionLookupQuery
	withFKs                   bool
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*Connection) error
	withNamedOrders           map[string]*OrderQuery
	withNamedDeliveryOption   map[string]*DeliveryOptionQuery
	withNamedHypothesisTest   map[string]*HypothesisTestQuery
	withNamedNotifications    map[string]*NotificationQuery
	withNamedConnectionLookup map[string]*ConnectionLookupQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ConnectionQuery builder.
func (cq *ConnectionQuery) Where(ps ...predicate.Connection) *ConnectionQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ConnectionQuery) Limit(limit int) *ConnectionQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ConnectionQuery) Offset(offset int) *ConnectionQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ConnectionQuery) Unique(unique bool) *ConnectionQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ConnectionQuery) Order(o ...connection.OrderOption) *ConnectionQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryTenant chains the current query on the "tenant" edge.
func (cq *ConnectionQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.TenantTable, connection.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnectionBrand chains the current query on the "connection_brand" edge.
func (cq *ConnectionQuery) QueryConnectionBrand() *ConnectionBrandQuery {
	query := (&ConnectionBrandClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(connectionbrand.Table, connectionbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.ConnectionBrandTable, connection.ConnectionBrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnectionShopify chains the current query on the "connection_shopify" edge.
func (cq *ConnectionQuery) QueryConnectionShopify() *ConnectionShopifyQuery {
	query := (&ConnectionShopifyClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(connectionshopify.Table, connectionshopify.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, connection.ConnectionShopifyTable, connection.ConnectionShopifyColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (cq *ConnectionQuery) QueryOrders() *OrderQuery {
	query := (&OrderClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connection.OrdersTable, connection.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySenderLocation chains the current query on the "sender_location" edge.
func (cq *ConnectionQuery) QuerySenderLocation() *LocationQuery {
	query := (&LocationClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.SenderLocationTable, connection.SenderLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPickupLocation chains the current query on the "pickup_location" edge.
func (cq *ConnectionQuery) QueryPickupLocation() *LocationQuery {
	query := (&LocationClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.PickupLocationTable, connection.PickupLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnLocation chains the current query on the "return_location" edge.
func (cq *ConnectionQuery) QueryReturnLocation() *LocationQuery {
	query := (&LocationClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.ReturnLocationTable, connection.ReturnLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySellerLocation chains the current query on the "seller_location" edge.
func (cq *ConnectionQuery) QuerySellerLocation() *LocationQuery {
	query := (&LocationClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.SellerLocationTable, connection.SellerLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (cq *ConnectionQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connection.DeliveryOptionTable, connection.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDefaultDeliveryOption chains the current query on the "default_delivery_option" edge.
func (cq *ConnectionQuery) QueryDefaultDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, connection.DefaultDeliveryOptionTable, connection.DefaultDeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnPortal chains the current query on the "return_portal" edge.
func (cq *ConnectionQuery) QueryReturnPortal() *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, connection.ReturnPortalTable, connection.ReturnPortalColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHypothesisTest chains the current query on the "hypothesis_test" edge.
func (cq *ConnectionQuery) QueryHypothesisTest() *HypothesisTestQuery {
	query := (&HypothesisTestClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(hypothesistest.Table, hypothesistest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, connection.HypothesisTestTable, connection.HypothesisTestColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifications chains the current query on the "notifications" edge.
func (cq *ConnectionQuery) QueryNotifications() *NotificationQuery {
	query := (&NotificationClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, connection.NotificationsTable, connection.NotificationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCurrency chains the current query on the "currency" edge.
func (cq *ConnectionQuery) QueryCurrency() *CurrencyQuery {
	query := (&CurrencyClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(currency.Table, currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.CurrencyTable, connection.CurrencyColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackingSlipTemplate chains the current query on the "packing_slip_template" edge.
func (cq *ConnectionQuery) QueryPackingSlipTemplate() *DocumentQuery {
	query := (&DocumentClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.PackingSlipTemplateTable, connection.PackingSlipTemplateColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnectionLookup chains the current query on the "connection_lookup" edge.
func (cq *ConnectionQuery) QueryConnectionLookup() *ConnectionLookupQuery {
	query := (&ConnectionLookupClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, selector),
			sqlgraph.To(connectionlookup.Table, connectionlookup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, connection.ConnectionLookupTable, connection.ConnectionLookupColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Connection entity from the query.
// Returns a *NotFoundError when no Connection was found.
func (cq *ConnectionQuery) First(ctx context.Context) (*Connection, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{connection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ConnectionQuery) FirstX(ctx context.Context) *Connection {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Connection ID from the query.
// Returns a *NotFoundError when no Connection ID was found.
func (cq *ConnectionQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{connection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ConnectionQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Connection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Connection entity is found.
// Returns a *NotFoundError when no Connection entities are found.
func (cq *ConnectionQuery) Only(ctx context.Context) (*Connection, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{connection.Label}
	default:
		return nil, &NotSingularError{connection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ConnectionQuery) OnlyX(ctx context.Context) *Connection {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Connection ID in the query.
// Returns a *NotSingularError when more than one Connection ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ConnectionQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{connection.Label}
	default:
		err = &NotSingularError{connection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ConnectionQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Connections.
func (cq *ConnectionQuery) All(ctx context.Context) ([]*Connection, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Connection, *ConnectionQuery]()
	return withInterceptors[[]*Connection](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ConnectionQuery) AllX(ctx context.Context) []*Connection {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Connection IDs.
func (cq *ConnectionQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(connection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ConnectionQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ConnectionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ConnectionQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ConnectionQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ConnectionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ConnectionQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ConnectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ConnectionQuery) Clone() *ConnectionQuery {
	if cq == nil {
		return nil
	}
	return &ConnectionQuery{
		config:                    cq.config,
		ctx:                       cq.ctx.Clone(),
		order:                     append([]connection.OrderOption{}, cq.order...),
		inters:                    append([]Interceptor{}, cq.inters...),
		predicates:                append([]predicate.Connection{}, cq.predicates...),
		withTenant:                cq.withTenant.Clone(),
		withConnectionBrand:       cq.withConnectionBrand.Clone(),
		withConnectionShopify:     cq.withConnectionShopify.Clone(),
		withOrders:                cq.withOrders.Clone(),
		withSenderLocation:        cq.withSenderLocation.Clone(),
		withPickupLocation:        cq.withPickupLocation.Clone(),
		withReturnLocation:        cq.withReturnLocation.Clone(),
		withSellerLocation:        cq.withSellerLocation.Clone(),
		withDeliveryOption:        cq.withDeliveryOption.Clone(),
		withDefaultDeliveryOption: cq.withDefaultDeliveryOption.Clone(),
		withReturnPortal:          cq.withReturnPortal.Clone(),
		withHypothesisTest:        cq.withHypothesisTest.Clone(),
		withNotifications:         cq.withNotifications.Clone(),
		withCurrency:              cq.withCurrency.Clone(),
		withPackingSlipTemplate:   cq.withPackingSlipTemplate.Clone(),
		withConnectionLookup:      cq.withConnectionLookup.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithTenant(opts ...func(*TenantQuery)) *ConnectionQuery {
	query := (&TenantClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTenant = query
	return cq
}

// WithConnectionBrand tells the query-builder to eager-load the nodes that are connected to
// the "connection_brand" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithConnectionBrand(opts ...func(*ConnectionBrandQuery)) *ConnectionQuery {
	query := (&ConnectionBrandClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withConnectionBrand = query
	return cq
}

// WithConnectionShopify tells the query-builder to eager-load the nodes that are connected to
// the "connection_shopify" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithConnectionShopify(opts ...func(*ConnectionShopifyQuery)) *ConnectionQuery {
	query := (&ConnectionShopifyClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withConnectionShopify = query
	return cq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithOrders(opts ...func(*OrderQuery)) *ConnectionQuery {
	query := (&OrderClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withOrders = query
	return cq
}

// WithSenderLocation tells the query-builder to eager-load the nodes that are connected to
// the "sender_location" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithSenderLocation(opts ...func(*LocationQuery)) *ConnectionQuery {
	query := (&LocationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withSenderLocation = query
	return cq
}

// WithPickupLocation tells the query-builder to eager-load the nodes that are connected to
// the "pickup_location" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithPickupLocation(opts ...func(*LocationQuery)) *ConnectionQuery {
	query := (&LocationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPickupLocation = query
	return cq
}

// WithReturnLocation tells the query-builder to eager-load the nodes that are connected to
// the "return_location" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithReturnLocation(opts ...func(*LocationQuery)) *ConnectionQuery {
	query := (&LocationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withReturnLocation = query
	return cq
}

// WithSellerLocation tells the query-builder to eager-load the nodes that are connected to
// the "seller_location" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithSellerLocation(opts ...func(*LocationQuery)) *ConnectionQuery {
	query := (&LocationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withSellerLocation = query
	return cq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *ConnectionQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDeliveryOption = query
	return cq
}

// WithDefaultDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "default_delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithDefaultDeliveryOption(opts ...func(*DeliveryOptionQuery)) *ConnectionQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDefaultDeliveryOption = query
	return cq
}

// WithReturnPortal tells the query-builder to eager-load the nodes that are connected to
// the "return_portal" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithReturnPortal(opts ...func(*ReturnPortalQuery)) *ConnectionQuery {
	query := (&ReturnPortalClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withReturnPortal = query
	return cq
}

// WithHypothesisTest tells the query-builder to eager-load the nodes that are connected to
// the "hypothesis_test" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithHypothesisTest(opts ...func(*HypothesisTestQuery)) *ConnectionQuery {
	query := (&HypothesisTestClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withHypothesisTest = query
	return cq
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithNotifications(opts ...func(*NotificationQuery)) *ConnectionQuery {
	query := (&NotificationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withNotifications = query
	return cq
}

// WithCurrency tells the query-builder to eager-load the nodes that are connected to
// the "currency" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithCurrency(opts ...func(*CurrencyQuery)) *ConnectionQuery {
	query := (&CurrencyClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCurrency = query
	return cq
}

// WithPackingSlipTemplate tells the query-builder to eager-load the nodes that are connected to
// the "packing_slip_template" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithPackingSlipTemplate(opts ...func(*DocumentQuery)) *ConnectionQuery {
	query := (&DocumentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPackingSlipTemplate = query
	return cq
}

// WithConnectionLookup tells the query-builder to eager-load the nodes that are connected to
// the "connection_lookup" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithConnectionLookup(opts ...func(*ConnectionLookupQuery)) *ConnectionQuery {
	query := (&ConnectionLookupClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withConnectionLookup = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Connection.Query().
//		GroupBy(connection.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *ConnectionQuery) GroupBy(field string, fields ...string) *ConnectionGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ConnectionGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = connection.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Connection.Query().
//		Select(connection.FieldTenantID).
//		Scan(ctx, &v)
func (cq *ConnectionQuery) Select(fields ...string) *ConnectionSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ConnectionSelect{ConnectionQuery: cq}
	sbuild.label = connection.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ConnectionSelect configured with the given aggregations.
func (cq *ConnectionQuery) Aggregate(fns ...AggregateFunc) *ConnectionSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ConnectionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !connection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	if connection.Policy == nil {
		return errors.New("ent: uninitialized connection.Policy (forgotten import ent/runtime?)")
	}
	if err := connection.Policy.EvalQuery(ctx, cq); err != nil {
		return err
	}
	return nil
}

func (cq *ConnectionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Connection, error) {
	var (
		nodes       = []*Connection{}
		withFKs     = cq.withFKs
		_spec       = cq.querySpec()
		loadedTypes = [16]bool{
			cq.withTenant != nil,
			cq.withConnectionBrand != nil,
			cq.withConnectionShopify != nil,
			cq.withOrders != nil,
			cq.withSenderLocation != nil,
			cq.withPickupLocation != nil,
			cq.withReturnLocation != nil,
			cq.withSellerLocation != nil,
			cq.withDeliveryOption != nil,
			cq.withDefaultDeliveryOption != nil,
			cq.withReturnPortal != nil,
			cq.withHypothesisTest != nil,
			cq.withNotifications != nil,
			cq.withCurrency != nil,
			cq.withPackingSlipTemplate != nil,
			cq.withConnectionLookup != nil,
		}
	)
	if cq.withConnectionBrand != nil || cq.withSenderLocation != nil || cq.withPickupLocation != nil || cq.withReturnLocation != nil || cq.withSellerLocation != nil || cq.withReturnPortal != nil || cq.withCurrency != nil || cq.withPackingSlipTemplate != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, connection.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Connection).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Connection{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withTenant; query != nil {
		if err := cq.loadTenant(ctx, query, nodes, nil,
			func(n *Connection, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withConnectionBrand; query != nil {
		if err := cq.loadConnectionBrand(ctx, query, nodes, nil,
			func(n *Connection, e *ConnectionBrand) { n.Edges.ConnectionBrand = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withConnectionShopify; query != nil {
		if err := cq.loadConnectionShopify(ctx, query, nodes, nil,
			func(n *Connection, e *ConnectionShopify) { n.Edges.ConnectionShopify = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withOrders; query != nil {
		if err := cq.loadOrders(ctx, query, nodes,
			func(n *Connection) { n.Edges.Orders = []*Order{} },
			func(n *Connection, e *Order) { n.Edges.Orders = append(n.Edges.Orders, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withSenderLocation; query != nil {
		if err := cq.loadSenderLocation(ctx, query, nodes, nil,
			func(n *Connection, e *Location) { n.Edges.SenderLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPickupLocation; query != nil {
		if err := cq.loadPickupLocation(ctx, query, nodes, nil,
			func(n *Connection, e *Location) { n.Edges.PickupLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withReturnLocation; query != nil {
		if err := cq.loadReturnLocation(ctx, query, nodes, nil,
			func(n *Connection, e *Location) { n.Edges.ReturnLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withSellerLocation; query != nil {
		if err := cq.loadSellerLocation(ctx, query, nodes, nil,
			func(n *Connection, e *Location) { n.Edges.SellerLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDeliveryOption; query != nil {
		if err := cq.loadDeliveryOption(ctx, query, nodes,
			func(n *Connection) { n.Edges.DeliveryOption = []*DeliveryOption{} },
			func(n *Connection, e *DeliveryOption) { n.Edges.DeliveryOption = append(n.Edges.DeliveryOption, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDefaultDeliveryOption; query != nil {
		if err := cq.loadDefaultDeliveryOption(ctx, query, nodes, nil,
			func(n *Connection, e *DeliveryOption) { n.Edges.DefaultDeliveryOption = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withReturnPortal; query != nil {
		if err := cq.loadReturnPortal(ctx, query, nodes, nil,
			func(n *Connection, e *ReturnPortal) { n.Edges.ReturnPortal = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withHypothesisTest; query != nil {
		if err := cq.loadHypothesisTest(ctx, query, nodes,
			func(n *Connection) { n.Edges.HypothesisTest = []*HypothesisTest{} },
			func(n *Connection, e *HypothesisTest) { n.Edges.HypothesisTest = append(n.Edges.HypothesisTest, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withNotifications; query != nil {
		if err := cq.loadNotifications(ctx, query, nodes,
			func(n *Connection) { n.Edges.Notifications = []*Notification{} },
			func(n *Connection, e *Notification) { n.Edges.Notifications = append(n.Edges.Notifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCurrency; query != nil {
		if err := cq.loadCurrency(ctx, query, nodes, nil,
			func(n *Connection, e *Currency) { n.Edges.Currency = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPackingSlipTemplate; query != nil {
		if err := cq.loadPackingSlipTemplate(ctx, query, nodes, nil,
			func(n *Connection, e *Document) { n.Edges.PackingSlipTemplate = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withConnectionLookup; query != nil {
		if err := cq.loadConnectionLookup(ctx, query, nodes,
			func(n *Connection) { n.Edges.ConnectionLookup = []*ConnectionLookup{} },
			func(n *Connection, e *ConnectionLookup) {
				n.Edges.ConnectionLookup = append(n.Edges.ConnectionLookup, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedOrders {
		if err := cq.loadOrders(ctx, query, nodes,
			func(n *Connection) { n.appendNamedOrders(name) },
			func(n *Connection, e *Order) { n.appendNamedOrders(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDeliveryOption {
		if err := cq.loadDeliveryOption(ctx, query, nodes,
			func(n *Connection) { n.appendNamedDeliveryOption(name) },
			func(n *Connection, e *DeliveryOption) { n.appendNamedDeliveryOption(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedHypothesisTest {
		if err := cq.loadHypothesisTest(ctx, query, nodes,
			func(n *Connection) { n.appendNamedHypothesisTest(name) },
			func(n *Connection, e *HypothesisTest) { n.appendNamedHypothesisTest(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedNotifications {
		if err := cq.loadNotifications(ctx, query, nodes,
			func(n *Connection) { n.appendNamedNotifications(name) },
			func(n *Connection, e *Notification) { n.appendNamedNotifications(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedConnectionLookup {
		if err := cq.loadConnectionLookup(ctx, query, nodes,
			func(n *Connection) { n.appendNamedConnectionLookup(name) },
			func(n *Connection, e *ConnectionLookup) { n.appendNamedConnectionLookup(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ConnectionQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadConnectionBrand(ctx context.Context, query *ConnectionBrandQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *ConnectionBrand)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		if nodes[i].connection_connection_brand == nil {
			continue
		}
		fk := *nodes[i].connection_connection_brand
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(connectionbrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_connection_brand" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadConnectionShopify(ctx context.Context, query *ConnectionShopifyQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *ConnectionShopify)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Connection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ConnectionShopify(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connection.ConnectionShopifyColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_connection_shopify
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_connection_shopify" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_connection_shopify" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConnectionQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Connection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connection.OrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_orders
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_orders" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_orders" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConnectionQuery) loadSenderLocation(ctx context.Context, query *LocationQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Location)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		if nodes[i].connection_sender_location == nil {
			continue
		}
		fk := *nodes[i].connection_sender_location
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_sender_location" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadPickupLocation(ctx context.Context, query *LocationQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Location)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		if nodes[i].connection_pickup_location == nil {
			continue
		}
		fk := *nodes[i].connection_pickup_location
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_pickup_location" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadReturnLocation(ctx context.Context, query *LocationQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Location)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		if nodes[i].connection_return_location == nil {
			continue
		}
		fk := *nodes[i].connection_return_location
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_return_location" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadSellerLocation(ctx context.Context, query *LocationQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Location)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		if nodes[i].connection_seller_location == nil {
			continue
		}
		fk := *nodes[i].connection_seller_location
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_seller_location" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *DeliveryOption)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Connection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DeliveryOption(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connection.DeliveryOptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_delivery_option
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_delivery_option" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_delivery_option" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConnectionQuery) loadDefaultDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *DeliveryOption)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Connection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.DeliveryOption(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connection.DefaultDeliveryOptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_default_delivery_option
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_default_delivery_option" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_default_delivery_option" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConnectionQuery) loadReturnPortal(ctx context.Context, query *ReturnPortalQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *ReturnPortal)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		if nodes[i].return_portal_connection == nil {
			continue
		}
		fk := *nodes[i].return_portal_connection
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(returnportal.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_portal_connection" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadHypothesisTest(ctx context.Context, query *HypothesisTestQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *HypothesisTest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Connection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HypothesisTest(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connection.HypothesisTestColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hypothesis_test_connection
		if fk == nil {
			return fmt.Errorf(`foreign-key "hypothesis_test_connection" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hypothesis_test_connection" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConnectionQuery) loadNotifications(ctx context.Context, query *NotificationQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Notification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Connection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connection.NotificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.notification_connection
		if fk == nil {
			return fmt.Errorf(`foreign-key "notification_connection" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "notification_connection" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConnectionQuery) loadCurrency(ctx context.Context, query *CurrencyQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Currency)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		if nodes[i].connection_currency == nil {
			continue
		}
		fk := *nodes[i].connection_currency
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(currency.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_currency" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadPackingSlipTemplate(ctx context.Context, query *DocumentQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *Document)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Connection)
	for i := range nodes {
		if nodes[i].connection_packing_slip_template == nil {
			continue
		}
		fk := *nodes[i].connection_packing_slip_template
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(document.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_packing_slip_template" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConnectionQuery) loadConnectionLookup(ctx context.Context, query *ConnectionLookupQuery, nodes []*Connection, init func(*Connection), assign func(*Connection, *ConnectionLookup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Connection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ConnectionLookup(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connection.ConnectionLookupColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_lookup_connections
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_lookup_connections" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_lookup_connections" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *ConnectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ConnectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connection.FieldID)
		for i := range fields {
			if fields[i] != connection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cq.withTenant != nil {
			_spec.Node.AddColumnOnce(connection.FieldTenantID)
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ConnectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(connection.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = connection.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedOrders tells the query-builder to eager-load the nodes that are connected to the "orders"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithNamedOrders(name string, opts ...func(*OrderQuery)) *ConnectionQuery {
	query := (&OrderClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedOrders == nil {
		cq.withNamedOrders = make(map[string]*OrderQuery)
	}
	cq.withNamedOrders[name] = query
	return cq
}

// WithNamedDeliveryOption tells the query-builder to eager-load the nodes that are connected to the "delivery_option"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithNamedDeliveryOption(name string, opts ...func(*DeliveryOptionQuery)) *ConnectionQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDeliveryOption == nil {
		cq.withNamedDeliveryOption = make(map[string]*DeliveryOptionQuery)
	}
	cq.withNamedDeliveryOption[name] = query
	return cq
}

// WithNamedHypothesisTest tells the query-builder to eager-load the nodes that are connected to the "hypothesis_test"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithNamedHypothesisTest(name string, opts ...func(*HypothesisTestQuery)) *ConnectionQuery {
	query := (&HypothesisTestClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedHypothesisTest == nil {
		cq.withNamedHypothesisTest = make(map[string]*HypothesisTestQuery)
	}
	cq.withNamedHypothesisTest[name] = query
	return cq
}

// WithNamedNotifications tells the query-builder to eager-load the nodes that are connected to the "notifications"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithNamedNotifications(name string, opts ...func(*NotificationQuery)) *ConnectionQuery {
	query := (&NotificationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedNotifications == nil {
		cq.withNamedNotifications = make(map[string]*NotificationQuery)
	}
	cq.withNamedNotifications[name] = query
	return cq
}

// WithNamedConnectionLookup tells the query-builder to eager-load the nodes that are connected to the "connection_lookup"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConnectionQuery) WithNamedConnectionLookup(name string, opts ...func(*ConnectionLookupQuery)) *ConnectionQuery {
	query := (&ConnectionLookupClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedConnectionLookup == nil {
		cq.withNamedConnectionLookup = make(map[string]*ConnectionLookupQuery)
	}
	cq.withNamedConnectionLookup[name] = query
	return cq
}

// ConnectionGroupBy is the group-by builder for Connection entities.
type ConnectionGroupBy struct {
	selector
	build *ConnectionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ConnectionGroupBy) Aggregate(fns ...AggregateFunc) *ConnectionGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ConnectionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConnectionQuery, *ConnectionGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ConnectionGroupBy) sqlScan(ctx context.Context, root *ConnectionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ConnectionSelect is the builder for selecting fields of Connection entities.
type ConnectionSelect struct {
	*ConnectionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ConnectionSelect) Aggregate(fns ...AggregateFunc) *ConnectionSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ConnectionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConnectionQuery, *ConnectionSelect](ctx, cs.ConnectionQuery, cs, cs.inters, v)
}

func (cs *ConnectionSelect) sqlScan(ctx context.Context, root *ConnectionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
