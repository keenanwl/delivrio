// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/ordersender"
	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/systemevents"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/userseat"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
)

// Noder wraps the basic Node method.
type Noder interface {
	IsNode()
}

var apitokenImplementors = []string{"APIToken", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*APIToken) IsNode() {}

var accessrightImplementors = []string{"AccessRight", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*AccessRight) IsNode() {}

var addressImplementors = []string{"Address", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Address) IsNode() {}

var addressglobalImplementors = []string{"AddressGlobal", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*AddressGlobal) IsNode() {}

var businesshoursperiodImplementors = []string{"BusinessHoursPeriod", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*BusinessHoursPeriod) IsNode() {}

var carrierImplementors = []string{"Carrier", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Carrier) IsNode() {}

var carrieradditionalservicebringImplementors = []string{"CarrierAdditionalServiceBring", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierAdditionalServiceBring) IsNode() {}

var carrieradditionalservicedaoImplementors = []string{"CarrierAdditionalServiceDAO", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierAdditionalServiceDAO) IsNode() {}

var carrieradditionalservicedfImplementors = []string{"CarrierAdditionalServiceDF", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierAdditionalServiceDF) IsNode() {}

var carrieradditionalservicedsvImplementors = []string{"CarrierAdditionalServiceDSV", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierAdditionalServiceDSV) IsNode() {}

var carrieradditionalserviceeasypostImplementors = []string{"CarrierAdditionalServiceEasyPost", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierAdditionalServiceEasyPost) IsNode() {}

var carrieradditionalserviceglsImplementors = []string{"CarrierAdditionalServiceGLS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierAdditionalServiceGLS) IsNode() {}

var carrieradditionalservicepostnordImplementors = []string{"CarrierAdditionalServicePostNord", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierAdditionalServicePostNord) IsNode() {}

var carrieradditionalserviceuspsImplementors = []string{"CarrierAdditionalServiceUSPS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierAdditionalServiceUSPS) IsNode() {}

var carrierbrandImplementors = []string{"CarrierBrand", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierBrand) IsNode() {}

var carrierbringImplementors = []string{"CarrierBring", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierBring) IsNode() {}

var carrierdaoImplementors = []string{"CarrierDAO", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierDAO) IsNode() {}

var carrierdfImplementors = []string{"CarrierDF", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierDF) IsNode() {}

var carrierdsvImplementors = []string{"CarrierDSV", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierDSV) IsNode() {}

var carriereasypostImplementors = []string{"CarrierEasyPost", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierEasyPost) IsNode() {}

var carrierglsImplementors = []string{"CarrierGLS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierGLS) IsNode() {}

var carrierpostnordImplementors = []string{"CarrierPostNord", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierPostNord) IsNode() {}

var carrierserviceImplementors = []string{"CarrierService", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierService) IsNode() {}

var carrierservicebringImplementors = []string{"CarrierServiceBring", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierServiceBring) IsNode() {}

var carrierservicedaoImplementors = []string{"CarrierServiceDAO", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierServiceDAO) IsNode() {}

var carrierservicedfImplementors = []string{"CarrierServiceDF", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierServiceDF) IsNode() {}

var carrierservicedsvImplementors = []string{"CarrierServiceDSV", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierServiceDSV) IsNode() {}

var carrierserviceeasypostImplementors = []string{"CarrierServiceEasyPost", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierServiceEasyPost) IsNode() {}

var carrierserviceglsImplementors = []string{"CarrierServiceGLS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierServiceGLS) IsNode() {}

var carrierservicepostnordImplementors = []string{"CarrierServicePostNord", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierServicePostNord) IsNode() {}

var carrierserviceuspsImplementors = []string{"CarrierServiceUSPS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierServiceUSPS) IsNode() {}

var carrieruspsImplementors = []string{"CarrierUSPS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CarrierUSPS) IsNode() {}

var changehistoryImplementors = []string{"ChangeHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ChangeHistory) IsNode() {}

var colliImplementors = []string{"Colli", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Colli) IsNode() {}

var connectoptioncarrierImplementors = []string{"ConnectOptionCarrier", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ConnectOptionCarrier) IsNode() {}

var connectoptionplatformImplementors = []string{"ConnectOptionPlatform", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ConnectOptionPlatform) IsNode() {}

var connectionImplementors = []string{"Connection", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Connection) IsNode() {}

var connectionbrandImplementors = []string{"ConnectionBrand", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ConnectionBrand) IsNode() {}

var connectionlookupImplementors = []string{"ConnectionLookup", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ConnectionLookup) IsNode() {}

var connectionshopifyImplementors = []string{"ConnectionShopify", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ConnectionShopify) IsNode() {}

var consolidationImplementors = []string{"Consolidation", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Consolidation) IsNode() {}

var contactImplementors = []string{"Contact", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Contact) IsNode() {}

var countryImplementors = []string{"Country", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Country) IsNode() {}

var countryharmonizedcodeImplementors = []string{"CountryHarmonizedCode", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*CountryHarmonizedCode) IsNode() {}

var currencyImplementors = []string{"Currency", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Currency) IsNode() {}

var deliveryoptionImplementors = []string{"DeliveryOption", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOption) IsNode() {}

var deliveryoptionbringImplementors = []string{"DeliveryOptionBring", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOptionBring) IsNode() {}

var deliveryoptiondaoImplementors = []string{"DeliveryOptionDAO", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOptionDAO) IsNode() {}

var deliveryoptiondfImplementors = []string{"DeliveryOptionDF", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOptionDF) IsNode() {}

var deliveryoptiondsvImplementors = []string{"DeliveryOptionDSV", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOptionDSV) IsNode() {}

var deliveryoptioneasypostImplementors = []string{"DeliveryOptionEasyPost", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOptionEasyPost) IsNode() {}

var deliveryoptionglsImplementors = []string{"DeliveryOptionGLS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOptionGLS) IsNode() {}

var deliveryoptionpostnordImplementors = []string{"DeliveryOptionPostNord", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOptionPostNord) IsNode() {}

var deliveryoptionuspsImplementors = []string{"DeliveryOptionUSPS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryOptionUSPS) IsNode() {}

var deliveryruleImplementors = []string{"DeliveryRule", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryRule) IsNode() {}

var deliveryruleconstraintImplementors = []string{"DeliveryRuleConstraint", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryRuleConstraint) IsNode() {}

var deliveryruleconstraintgroupImplementors = []string{"DeliveryRuleConstraintGroup", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DeliveryRuleConstraintGroup) IsNode() {}

var documentImplementors = []string{"Document", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Document) IsNode() {}

var documentfileImplementors = []string{"DocumentFile", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*DocumentFile) IsNode() {}

var emailtemplateImplementors = []string{"EmailTemplate", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*EmailTemplate) IsNode() {}

var hypothesistestImplementors = []string{"HypothesisTest", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*HypothesisTest) IsNode() {}

var hypothesistestdeliveryoptionImplementors = []string{"HypothesisTestDeliveryOption", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*HypothesisTestDeliveryOption) IsNode() {}

var hypothesistestdeliveryoptionlookupImplementors = []string{"HypothesisTestDeliveryOptionLookup", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*HypothesisTestDeliveryOptionLookup) IsNode() {}

var hypothesistestdeliveryoptionrequestImplementors = []string{"HypothesisTestDeliveryOptionRequest", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*HypothesisTestDeliveryOptionRequest) IsNode() {}

var inventoryitemImplementors = []string{"InventoryItem", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*InventoryItem) IsNode() {}

var languageImplementors = []string{"Language", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Language) IsNode() {}

var locationImplementors = []string{"Location", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Location) IsNode() {}

var locationtagImplementors = []string{"LocationTag", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*LocationTag) IsNode() {}

var notificationImplementors = []string{"Notification", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Notification) IsNode() {}

var otkrequestsImplementors = []string{"OTKRequests", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OTKRequests) IsNode() {}

var orderImplementors = []string{"Order", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Order) IsNode() {}

var orderhistoryImplementors = []string{"OrderHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OrderHistory) IsNode() {}

var orderlineImplementors = []string{"OrderLine", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OrderLine) IsNode() {}

var ordersenderImplementors = []string{"OrderSender", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*OrderSender) IsNode() {}

var packagingImplementors = []string{"Packaging", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Packaging) IsNode() {}

var packagingdfImplementors = []string{"PackagingDF", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PackagingDF) IsNode() {}

var packaginguspsImplementors = []string{"PackagingUSPS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PackagingUSPS) IsNode() {}

var packaginguspsprocessingcategoryImplementors = []string{"PackagingUSPSProcessingCategory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PackagingUSPSProcessingCategory) IsNode() {}

var packaginguspsrateindicatorImplementors = []string{"PackagingUSPSRateIndicator", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PackagingUSPSRateIndicator) IsNode() {}

var palletImplementors = []string{"Pallet", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Pallet) IsNode() {}

var parcelshopImplementors = []string{"ParcelShop", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ParcelShop) IsNode() {}

var parcelshopbringImplementors = []string{"ParcelShopBring", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ParcelShopBring) IsNode() {}

var parcelshopdaoImplementors = []string{"ParcelShopDAO", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ParcelShopDAO) IsNode() {}

var parcelshopglsImplementors = []string{"ParcelShopGLS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ParcelShopGLS) IsNode() {}

var parcelshoppostnordImplementors = []string{"ParcelShopPostNord", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ParcelShopPostNord) IsNode() {}

var planImplementors = []string{"Plan", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Plan) IsNode() {}

var planhistoryImplementors = []string{"PlanHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PlanHistory) IsNode() {}

var printjobImplementors = []string{"PrintJob", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PrintJob) IsNode() {}

var printerImplementors = []string{"Printer", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Printer) IsNode() {}

var productImplementors = []string{"Product", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Product) IsNode() {}

var productimageImplementors = []string{"ProductImage", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ProductImage) IsNode() {}

var producttagImplementors = []string{"ProductTag", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ProductTag) IsNode() {}

var productvariantImplementors = []string{"ProductVariant", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ProductVariant) IsNode() {}

var returncolliImplementors = []string{"ReturnColli", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ReturnColli) IsNode() {}

var returncollihistoryImplementors = []string{"ReturnColliHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ReturnColliHistory) IsNode() {}

var returnorderlineImplementors = []string{"ReturnOrderLine", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ReturnOrderLine) IsNode() {}

var returnportalImplementors = []string{"ReturnPortal", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ReturnPortal) IsNode() {}

var returnportalclaimImplementors = []string{"ReturnPortalClaim", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ReturnPortalClaim) IsNode() {}

var seatgroupImplementors = []string{"SeatGroup", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*SeatGroup) IsNode() {}

var seatgroupaccessrightImplementors = []string{"SeatGroupAccessRight", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*SeatGroupAccessRight) IsNode() {}

var shipmentImplementors = []string{"Shipment", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Shipment) IsNode() {}

var shipmentbringImplementors = []string{"ShipmentBring", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentBring) IsNode() {}

var shipmentdaoImplementors = []string{"ShipmentDAO", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentDAO) IsNode() {}

var shipmentdfImplementors = []string{"ShipmentDF", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentDF) IsNode() {}

var shipmentdsvImplementors = []string{"ShipmentDSV", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentDSV) IsNode() {}

var shipmenteasypostImplementors = []string{"ShipmentEasyPost", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentEasyPost) IsNode() {}

var shipmentglsImplementors = []string{"ShipmentGLS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentGLS) IsNode() {}

var shipmenthistoryImplementors = []string{"ShipmentHistory", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentHistory) IsNode() {}

var shipmentpalletImplementors = []string{"ShipmentPallet", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentPallet) IsNode() {}

var shipmentparcelImplementors = []string{"ShipmentParcel", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentParcel) IsNode() {}

var shipmentpostnordImplementors = []string{"ShipmentPostNord", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentPostNord) IsNode() {}

var shipmentuspsImplementors = []string{"ShipmentUSPS", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*ShipmentUSPS) IsNode() {}

var signupoptionsImplementors = []string{"SignupOptions", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*SignupOptions) IsNode() {}

var systemeventsImplementors = []string{"SystemEvents", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*SystemEvents) IsNode() {}

var tenantImplementors = []string{"Tenant", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Tenant) IsNode() {}

var userImplementors = []string{"User", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*User) IsNode() {}

var userseatImplementors = []string{"UserSeat", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*UserSeat) IsNode() {}

var workspacerecentscanImplementors = []string{"WorkspaceRecentScan", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*WorkspaceRecentScan) IsNode() {}

var workstationImplementors = []string{"Workstation", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Workstation) IsNode() {}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, pulid.ID) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, pulid.ID) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, pulid.ID) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id pulid.ID) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id pulid.ID, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id pulid.ID) (Noder, error) {
	switch table {
	case apitoken.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.APIToken.Query().
			Where(apitoken.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, apitokenImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case accessright.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.AccessRight.Query().
			Where(accessright.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, accessrightImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case address.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Address.Query().
			Where(address.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, addressImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case addressglobal.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.AddressGlobal.Query().
			Where(addressglobal.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, addressglobalImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case businesshoursperiod.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.BusinessHoursPeriod.Query().
			Where(businesshoursperiod.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, businesshoursperiodImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrier.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Carrier.Query().
			Where(carrier.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrieradditionalservicebring.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierAdditionalServiceBring.Query().
			Where(carrieradditionalservicebring.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieradditionalservicebringImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrieradditionalservicedao.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierAdditionalServiceDAO.Query().
			Where(carrieradditionalservicedao.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieradditionalservicedaoImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrieradditionalservicedf.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierAdditionalServiceDF.Query().
			Where(carrieradditionalservicedf.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieradditionalservicedfImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrieradditionalservicedsv.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierAdditionalServiceDSV.Query().
			Where(carrieradditionalservicedsv.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieradditionalservicedsvImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrieradditionalserviceeasypost.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierAdditionalServiceEasyPost.Query().
			Where(carrieradditionalserviceeasypost.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieradditionalserviceeasypostImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrieradditionalservicegls.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierAdditionalServiceGLS.Query().
			Where(carrieradditionalservicegls.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieradditionalserviceglsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrieradditionalservicepostnord.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierAdditionalServicePostNord.Query().
			Where(carrieradditionalservicepostnord.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieradditionalservicepostnordImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrieradditionalserviceusps.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierAdditionalServiceUSPS.Query().
			Where(carrieradditionalserviceusps.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieradditionalserviceuspsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierbrand.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierBrand.Query().
			Where(carrierbrand.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierbrandImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierbring.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierBring.Query().
			Where(carrierbring.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierbringImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierdao.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierDAO.Query().
			Where(carrierdao.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierdaoImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierdf.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierDF.Query().
			Where(carrierdf.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierdfImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierdsv.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierDSV.Query().
			Where(carrierdsv.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierdsvImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carriereasypost.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierEasyPost.Query().
			Where(carriereasypost.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carriereasypostImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carriergls.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierGLS.Query().
			Where(carriergls.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierglsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierpostnord.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierPostNord.Query().
			Where(carrierpostnord.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierpostnordImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierservice.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierService.Query().
			Where(carrierservice.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierserviceImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierservicebring.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierServiceBring.Query().
			Where(carrierservicebring.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierservicebringImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierservicedao.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierServiceDAO.Query().
			Where(carrierservicedao.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierservicedaoImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierservicedf.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierServiceDF.Query().
			Where(carrierservicedf.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierservicedfImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierservicedsv.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierServiceDSV.Query().
			Where(carrierservicedsv.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierservicedsvImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierserviceeasypost.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierServiceEasyPost.Query().
			Where(carrierserviceeasypost.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierserviceeasypostImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierservicegls.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierServiceGLS.Query().
			Where(carrierservicegls.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierserviceglsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierservicepostnord.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierServicePostNord.Query().
			Where(carrierservicepostnord.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierservicepostnordImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierserviceusps.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierServiceUSPS.Query().
			Where(carrierserviceusps.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrierserviceuspsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case carrierusps.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CarrierUSPS.Query().
			Where(carrierusps.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, carrieruspsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case changehistory.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ChangeHistory.Query().
			Where(changehistory.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, changehistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case colli.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Colli.Query().
			Where(colli.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, colliImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case connectoptioncarrier.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ConnectOptionCarrier.Query().
			Where(connectoptioncarrier.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, connectoptioncarrierImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case connectoptionplatform.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ConnectOptionPlatform.Query().
			Where(connectoptionplatform.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, connectoptionplatformImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case connection.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Connection.Query().
			Where(connection.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, connectionImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case connectionbrand.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ConnectionBrand.Query().
			Where(connectionbrand.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, connectionbrandImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case connectionlookup.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ConnectionLookup.Query().
			Where(connectionlookup.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, connectionlookupImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case connectionshopify.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ConnectionShopify.Query().
			Where(connectionshopify.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, connectionshopifyImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case consolidation.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Consolidation.Query().
			Where(consolidation.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, consolidationImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case contact.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Contact.Query().
			Where(contact.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, contactImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case country.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Country.Query().
			Where(country.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, countryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case countryharmonizedcode.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.CountryHarmonizedCode.Query().
			Where(countryharmonizedcode.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, countryharmonizedcodeImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case currency.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Currency.Query().
			Where(currency.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, currencyImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoption.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOption.Query().
			Where(deliveryoption.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptionImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoptionbring.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOptionBring.Query().
			Where(deliveryoptionbring.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptionbringImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoptiondao.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOptionDAO.Query().
			Where(deliveryoptiondao.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptiondaoImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoptiondf.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOptionDF.Query().
			Where(deliveryoptiondf.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptiondfImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoptiondsv.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOptionDSV.Query().
			Where(deliveryoptiondsv.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptiondsvImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoptioneasypost.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOptionEasyPost.Query().
			Where(deliveryoptioneasypost.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptioneasypostImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoptiongls.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOptionGLS.Query().
			Where(deliveryoptiongls.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptionglsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoptionpostnord.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOptionPostNord.Query().
			Where(deliveryoptionpostnord.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptionpostnordImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryoptionusps.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryOptionUSPS.Query().
			Where(deliveryoptionusps.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryoptionuspsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryrule.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryRule.Query().
			Where(deliveryrule.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryruleImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryruleconstraint.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryRuleConstraint.Query().
			Where(deliveryruleconstraint.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryruleconstraintImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case deliveryruleconstraintgroup.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DeliveryRuleConstraintGroup.Query().
			Where(deliveryruleconstraintgroup.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, deliveryruleconstraintgroupImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case document.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Document.Query().
			Where(document.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, documentImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case documentfile.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DocumentFile.Query().
			Where(documentfile.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, documentfileImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case emailtemplate.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.EmailTemplate.Query().
			Where(emailtemplate.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, emailtemplateImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case hypothesistest.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.HypothesisTest.Query().
			Where(hypothesistest.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, hypothesistestImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case hypothesistestdeliveryoption.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.HypothesisTestDeliveryOption.Query().
			Where(hypothesistestdeliveryoption.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, hypothesistestdeliveryoptionImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case hypothesistestdeliveryoptionlookup.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.HypothesisTestDeliveryOptionLookup.Query().
			Where(hypothesistestdeliveryoptionlookup.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, hypothesistestdeliveryoptionlookupImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case hypothesistestdeliveryoptionrequest.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.HypothesisTestDeliveryOptionRequest.Query().
			Where(hypothesistestdeliveryoptionrequest.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, hypothesistestdeliveryoptionrequestImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case inventoryitem.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.InventoryItem.Query().
			Where(inventoryitem.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, inventoryitemImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case language.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Language.Query().
			Where(language.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, languageImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case location.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Location.Query().
			Where(location.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, locationImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case locationtag.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.LocationTag.Query().
			Where(locationtag.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, locationtagImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case notification.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Notification.Query().
			Where(notification.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, notificationImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case otkrequests.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.OTKRequests.Query().
			Where(otkrequests.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, otkrequestsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case order.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Order.Query().
			Where(order.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, orderImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case orderhistory.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.OrderHistory.Query().
			Where(orderhistory.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, orderhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case orderline.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.OrderLine.Query().
			Where(orderline.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, orderlineImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case ordersender.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.OrderSender.Query().
			Where(ordersender.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, ordersenderImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case packaging.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Packaging.Query().
			Where(packaging.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, packagingImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case packagingdf.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.PackagingDF.Query().
			Where(packagingdf.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, packagingdfImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case packagingusps.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.PackagingUSPS.Query().
			Where(packagingusps.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, packaginguspsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case packaginguspsprocessingcategory.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.PackagingUSPSProcessingCategory.Query().
			Where(packaginguspsprocessingcategory.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, packaginguspsprocessingcategoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case packaginguspsrateindicator.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.PackagingUSPSRateIndicator.Query().
			Where(packaginguspsrateindicator.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, packaginguspsrateindicatorImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case pallet.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Pallet.Query().
			Where(pallet.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, palletImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case parcelshop.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ParcelShop.Query().
			Where(parcelshop.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, parcelshopImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case parcelshopbring.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ParcelShopBring.Query().
			Where(parcelshopbring.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, parcelshopbringImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case parcelshopdao.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ParcelShopDAO.Query().
			Where(parcelshopdao.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, parcelshopdaoImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case parcelshopgls.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ParcelShopGLS.Query().
			Where(parcelshopgls.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, parcelshopglsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case parcelshoppostnord.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ParcelShopPostNord.Query().
			Where(parcelshoppostnord.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, parcelshoppostnordImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case plan.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Plan.Query().
			Where(plan.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, planImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case planhistory.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.PlanHistory.Query().
			Where(planhistory.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, planhistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case printjob.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.PrintJob.Query().
			Where(printjob.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, printjobImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case printer.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Printer.Query().
			Where(printer.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, printerImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case product.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Product.Query().
			Where(product.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, productImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case productimage.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ProductImage.Query().
			Where(productimage.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, productimageImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case producttag.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ProductTag.Query().
			Where(producttag.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, producttagImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case productvariant.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ProductVariant.Query().
			Where(productvariant.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, productvariantImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case returncolli.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ReturnColli.Query().
			Where(returncolli.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, returncolliImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case returncollihistory.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ReturnColliHistory.Query().
			Where(returncollihistory.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, returncollihistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case returnorderline.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ReturnOrderLine.Query().
			Where(returnorderline.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, returnorderlineImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case returnportal.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ReturnPortal.Query().
			Where(returnportal.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, returnportalImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case returnportalclaim.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ReturnPortalClaim.Query().
			Where(returnportalclaim.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, returnportalclaimImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case seatgroup.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.SeatGroup.Query().
			Where(seatgroup.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, seatgroupImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case seatgroupaccessright.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.SeatGroupAccessRight.Query().
			Where(seatgroupaccessright.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, seatgroupaccessrightImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipment.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Shipment.Query().
			Where(shipment.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentbring.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentBring.Query().
			Where(shipmentbring.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentbringImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentdao.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentDAO.Query().
			Where(shipmentdao.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentdaoImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentdf.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentDF.Query().
			Where(shipmentdf.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentdfImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentdsv.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentDSV.Query().
			Where(shipmentdsv.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentdsvImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmenteasypost.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentEasyPost.Query().
			Where(shipmenteasypost.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmenteasypostImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentgls.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentGLS.Query().
			Where(shipmentgls.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentglsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmenthistory.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentHistory.Query().
			Where(shipmenthistory.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmenthistoryImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentpallet.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentPallet.Query().
			Where(shipmentpallet.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentpalletImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentparcel.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentParcel.Query().
			Where(shipmentparcel.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentparcelImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentpostnord.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentPostNord.Query().
			Where(shipmentpostnord.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentpostnordImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case shipmentusps.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.ShipmentUSPS.Query().
			Where(shipmentusps.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, shipmentuspsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case signupoptions.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.SignupOptions.Query().
			Where(signupoptions.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, signupoptionsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case systemevents.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.SystemEvents.Query().
			Where(systemevents.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, systemeventsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case tenant.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Tenant.Query().
			Where(tenant.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, tenantImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case user.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.User.Query().
			Where(user.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, userImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case userseat.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.UserSeat.Query().
			Where(userseat.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, userseatImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case workspacerecentscan.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.WorkspaceRecentScan.Query().
			Where(workspacerecentscan.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, workspacerecentscanImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case workstation.Table:
		var uid pulid.ID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Workstation.Query().
			Where(workstation.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, workstationImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []pulid.ID, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]pulid.ID)
	id2idx := make(map[pulid.ID][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []pulid.ID) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[pulid.ID][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case apitoken.Table:
		query := c.APIToken.Query().
			Where(apitoken.IDIn(ids...))
		query, err := query.CollectFields(ctx, apitokenImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case accessright.Table:
		query := c.AccessRight.Query().
			Where(accessright.IDIn(ids...))
		query, err := query.CollectFields(ctx, accessrightImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case address.Table:
		query := c.Address.Query().
			Where(address.IDIn(ids...))
		query, err := query.CollectFields(ctx, addressImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case addressglobal.Table:
		query := c.AddressGlobal.Query().
			Where(addressglobal.IDIn(ids...))
		query, err := query.CollectFields(ctx, addressglobalImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case businesshoursperiod.Table:
		query := c.BusinessHoursPeriod.Query().
			Where(businesshoursperiod.IDIn(ids...))
		query, err := query.CollectFields(ctx, businesshoursperiodImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrier.Table:
		query := c.Carrier.Query().
			Where(carrier.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrieradditionalservicebring.Table:
		query := c.CarrierAdditionalServiceBring.Query().
			Where(carrieradditionalservicebring.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieradditionalservicebringImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrieradditionalservicedao.Table:
		query := c.CarrierAdditionalServiceDAO.Query().
			Where(carrieradditionalservicedao.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieradditionalservicedaoImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrieradditionalservicedf.Table:
		query := c.CarrierAdditionalServiceDF.Query().
			Where(carrieradditionalservicedf.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieradditionalservicedfImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrieradditionalservicedsv.Table:
		query := c.CarrierAdditionalServiceDSV.Query().
			Where(carrieradditionalservicedsv.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieradditionalservicedsvImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrieradditionalserviceeasypost.Table:
		query := c.CarrierAdditionalServiceEasyPost.Query().
			Where(carrieradditionalserviceeasypost.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieradditionalserviceeasypostImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrieradditionalservicegls.Table:
		query := c.CarrierAdditionalServiceGLS.Query().
			Where(carrieradditionalservicegls.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieradditionalserviceglsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrieradditionalservicepostnord.Table:
		query := c.CarrierAdditionalServicePostNord.Query().
			Where(carrieradditionalservicepostnord.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieradditionalservicepostnordImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrieradditionalserviceusps.Table:
		query := c.CarrierAdditionalServiceUSPS.Query().
			Where(carrieradditionalserviceusps.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieradditionalserviceuspsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierbrand.Table:
		query := c.CarrierBrand.Query().
			Where(carrierbrand.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierbrandImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierbring.Table:
		query := c.CarrierBring.Query().
			Where(carrierbring.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierbringImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierdao.Table:
		query := c.CarrierDAO.Query().
			Where(carrierdao.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierdaoImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierdf.Table:
		query := c.CarrierDF.Query().
			Where(carrierdf.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierdfImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierdsv.Table:
		query := c.CarrierDSV.Query().
			Where(carrierdsv.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierdsvImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carriereasypost.Table:
		query := c.CarrierEasyPost.Query().
			Where(carriereasypost.IDIn(ids...))
		query, err := query.CollectFields(ctx, carriereasypostImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carriergls.Table:
		query := c.CarrierGLS.Query().
			Where(carriergls.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierglsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierpostnord.Table:
		query := c.CarrierPostNord.Query().
			Where(carrierpostnord.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierpostnordImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierservice.Table:
		query := c.CarrierService.Query().
			Where(carrierservice.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierserviceImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierservicebring.Table:
		query := c.CarrierServiceBring.Query().
			Where(carrierservicebring.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierservicebringImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierservicedao.Table:
		query := c.CarrierServiceDAO.Query().
			Where(carrierservicedao.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierservicedaoImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierservicedf.Table:
		query := c.CarrierServiceDF.Query().
			Where(carrierservicedf.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierservicedfImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierservicedsv.Table:
		query := c.CarrierServiceDSV.Query().
			Where(carrierservicedsv.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierservicedsvImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierserviceeasypost.Table:
		query := c.CarrierServiceEasyPost.Query().
			Where(carrierserviceeasypost.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierserviceeasypostImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierservicegls.Table:
		query := c.CarrierServiceGLS.Query().
			Where(carrierservicegls.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierserviceglsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierservicepostnord.Table:
		query := c.CarrierServicePostNord.Query().
			Where(carrierservicepostnord.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierservicepostnordImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierserviceusps.Table:
		query := c.CarrierServiceUSPS.Query().
			Where(carrierserviceusps.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrierserviceuspsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case carrierusps.Table:
		query := c.CarrierUSPS.Query().
			Where(carrierusps.IDIn(ids...))
		query, err := query.CollectFields(ctx, carrieruspsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case changehistory.Table:
		query := c.ChangeHistory.Query().
			Where(changehistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, changehistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case colli.Table:
		query := c.Colli.Query().
			Where(colli.IDIn(ids...))
		query, err := query.CollectFields(ctx, colliImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case connectoptioncarrier.Table:
		query := c.ConnectOptionCarrier.Query().
			Where(connectoptioncarrier.IDIn(ids...))
		query, err := query.CollectFields(ctx, connectoptioncarrierImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case connectoptionplatform.Table:
		query := c.ConnectOptionPlatform.Query().
			Where(connectoptionplatform.IDIn(ids...))
		query, err := query.CollectFields(ctx, connectoptionplatformImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case connection.Table:
		query := c.Connection.Query().
			Where(connection.IDIn(ids...))
		query, err := query.CollectFields(ctx, connectionImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case connectionbrand.Table:
		query := c.ConnectionBrand.Query().
			Where(connectionbrand.IDIn(ids...))
		query, err := query.CollectFields(ctx, connectionbrandImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case connectionlookup.Table:
		query := c.ConnectionLookup.Query().
			Where(connectionlookup.IDIn(ids...))
		query, err := query.CollectFields(ctx, connectionlookupImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case connectionshopify.Table:
		query := c.ConnectionShopify.Query().
			Where(connectionshopify.IDIn(ids...))
		query, err := query.CollectFields(ctx, connectionshopifyImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case consolidation.Table:
		query := c.Consolidation.Query().
			Where(consolidation.IDIn(ids...))
		query, err := query.CollectFields(ctx, consolidationImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case contact.Table:
		query := c.Contact.Query().
			Where(contact.IDIn(ids...))
		query, err := query.CollectFields(ctx, contactImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case country.Table:
		query := c.Country.Query().
			Where(country.IDIn(ids...))
		query, err := query.CollectFields(ctx, countryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case countryharmonizedcode.Table:
		query := c.CountryHarmonizedCode.Query().
			Where(countryharmonizedcode.IDIn(ids...))
		query, err := query.CollectFields(ctx, countryharmonizedcodeImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case currency.Table:
		query := c.Currency.Query().
			Where(currency.IDIn(ids...))
		query, err := query.CollectFields(ctx, currencyImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoption.Table:
		query := c.DeliveryOption.Query().
			Where(deliveryoption.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptionImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoptionbring.Table:
		query := c.DeliveryOptionBring.Query().
			Where(deliveryoptionbring.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptionbringImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoptiondao.Table:
		query := c.DeliveryOptionDAO.Query().
			Where(deliveryoptiondao.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptiondaoImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoptiondf.Table:
		query := c.DeliveryOptionDF.Query().
			Where(deliveryoptiondf.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptiondfImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoptiondsv.Table:
		query := c.DeliveryOptionDSV.Query().
			Where(deliveryoptiondsv.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptiondsvImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoptioneasypost.Table:
		query := c.DeliveryOptionEasyPost.Query().
			Where(deliveryoptioneasypost.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptioneasypostImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoptiongls.Table:
		query := c.DeliveryOptionGLS.Query().
			Where(deliveryoptiongls.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptionglsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoptionpostnord.Table:
		query := c.DeliveryOptionPostNord.Query().
			Where(deliveryoptionpostnord.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptionpostnordImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryoptionusps.Table:
		query := c.DeliveryOptionUSPS.Query().
			Where(deliveryoptionusps.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryoptionuspsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryrule.Table:
		query := c.DeliveryRule.Query().
			Where(deliveryrule.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryruleImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryruleconstraint.Table:
		query := c.DeliveryRuleConstraint.Query().
			Where(deliveryruleconstraint.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryruleconstraintImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deliveryruleconstraintgroup.Table:
		query := c.DeliveryRuleConstraintGroup.Query().
			Where(deliveryruleconstraintgroup.IDIn(ids...))
		query, err := query.CollectFields(ctx, deliveryruleconstraintgroupImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case document.Table:
		query := c.Document.Query().
			Where(document.IDIn(ids...))
		query, err := query.CollectFields(ctx, documentImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case documentfile.Table:
		query := c.DocumentFile.Query().
			Where(documentfile.IDIn(ids...))
		query, err := query.CollectFields(ctx, documentfileImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case emailtemplate.Table:
		query := c.EmailTemplate.Query().
			Where(emailtemplate.IDIn(ids...))
		query, err := query.CollectFields(ctx, emailtemplateImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hypothesistest.Table:
		query := c.HypothesisTest.Query().
			Where(hypothesistest.IDIn(ids...))
		query, err := query.CollectFields(ctx, hypothesistestImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hypothesistestdeliveryoption.Table:
		query := c.HypothesisTestDeliveryOption.Query().
			Where(hypothesistestdeliveryoption.IDIn(ids...))
		query, err := query.CollectFields(ctx, hypothesistestdeliveryoptionImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hypothesistestdeliveryoptionlookup.Table:
		query := c.HypothesisTestDeliveryOptionLookup.Query().
			Where(hypothesistestdeliveryoptionlookup.IDIn(ids...))
		query, err := query.CollectFields(ctx, hypothesistestdeliveryoptionlookupImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hypothesistestdeliveryoptionrequest.Table:
		query := c.HypothesisTestDeliveryOptionRequest.Query().
			Where(hypothesistestdeliveryoptionrequest.IDIn(ids...))
		query, err := query.CollectFields(ctx, hypothesistestdeliveryoptionrequestImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case inventoryitem.Table:
		query := c.InventoryItem.Query().
			Where(inventoryitem.IDIn(ids...))
		query, err := query.CollectFields(ctx, inventoryitemImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case language.Table:
		query := c.Language.Query().
			Where(language.IDIn(ids...))
		query, err := query.CollectFields(ctx, languageImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case location.Table:
		query := c.Location.Query().
			Where(location.IDIn(ids...))
		query, err := query.CollectFields(ctx, locationImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case locationtag.Table:
		query := c.LocationTag.Query().
			Where(locationtag.IDIn(ids...))
		query, err := query.CollectFields(ctx, locationtagImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case notification.Table:
		query := c.Notification.Query().
			Where(notification.IDIn(ids...))
		query, err := query.CollectFields(ctx, notificationImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case otkrequests.Table:
		query := c.OTKRequests.Query().
			Where(otkrequests.IDIn(ids...))
		query, err := query.CollectFields(ctx, otkrequestsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case order.Table:
		query := c.Order.Query().
			Where(order.IDIn(ids...))
		query, err := query.CollectFields(ctx, orderImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case orderhistory.Table:
		query := c.OrderHistory.Query().
			Where(orderhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, orderhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case orderline.Table:
		query := c.OrderLine.Query().
			Where(orderline.IDIn(ids...))
		query, err := query.CollectFields(ctx, orderlineImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case ordersender.Table:
		query := c.OrderSender.Query().
			Where(ordersender.IDIn(ids...))
		query, err := query.CollectFields(ctx, ordersenderImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packaging.Table:
		query := c.Packaging.Query().
			Where(packaging.IDIn(ids...))
		query, err := query.CollectFields(ctx, packagingImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packagingdf.Table:
		query := c.PackagingDF.Query().
			Where(packagingdf.IDIn(ids...))
		query, err := query.CollectFields(ctx, packagingdfImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packagingusps.Table:
		query := c.PackagingUSPS.Query().
			Where(packagingusps.IDIn(ids...))
		query, err := query.CollectFields(ctx, packaginguspsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packaginguspsprocessingcategory.Table:
		query := c.PackagingUSPSProcessingCategory.Query().
			Where(packaginguspsprocessingcategory.IDIn(ids...))
		query, err := query.CollectFields(ctx, packaginguspsprocessingcategoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case packaginguspsrateindicator.Table:
		query := c.PackagingUSPSRateIndicator.Query().
			Where(packaginguspsrateindicator.IDIn(ids...))
		query, err := query.CollectFields(ctx, packaginguspsrateindicatorImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case pallet.Table:
		query := c.Pallet.Query().
			Where(pallet.IDIn(ids...))
		query, err := query.CollectFields(ctx, palletImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case parcelshop.Table:
		query := c.ParcelShop.Query().
			Where(parcelshop.IDIn(ids...))
		query, err := query.CollectFields(ctx, parcelshopImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case parcelshopbring.Table:
		query := c.ParcelShopBring.Query().
			Where(parcelshopbring.IDIn(ids...))
		query, err := query.CollectFields(ctx, parcelshopbringImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case parcelshopdao.Table:
		query := c.ParcelShopDAO.Query().
			Where(parcelshopdao.IDIn(ids...))
		query, err := query.CollectFields(ctx, parcelshopdaoImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case parcelshopgls.Table:
		query := c.ParcelShopGLS.Query().
			Where(parcelshopgls.IDIn(ids...))
		query, err := query.CollectFields(ctx, parcelshopglsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case parcelshoppostnord.Table:
		query := c.ParcelShopPostNord.Query().
			Where(parcelshoppostnord.IDIn(ids...))
		query, err := query.CollectFields(ctx, parcelshoppostnordImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case plan.Table:
		query := c.Plan.Query().
			Where(plan.IDIn(ids...))
		query, err := query.CollectFields(ctx, planImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case planhistory.Table:
		query := c.PlanHistory.Query().
			Where(planhistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, planhistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case printjob.Table:
		query := c.PrintJob.Query().
			Where(printjob.IDIn(ids...))
		query, err := query.CollectFields(ctx, printjobImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case printer.Table:
		query := c.Printer.Query().
			Where(printer.IDIn(ids...))
		query, err := query.CollectFields(ctx, printerImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case product.Table:
		query := c.Product.Query().
			Where(product.IDIn(ids...))
		query, err := query.CollectFields(ctx, productImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case productimage.Table:
		query := c.ProductImage.Query().
			Where(productimage.IDIn(ids...))
		query, err := query.CollectFields(ctx, productimageImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case producttag.Table:
		query := c.ProductTag.Query().
			Where(producttag.IDIn(ids...))
		query, err := query.CollectFields(ctx, producttagImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case productvariant.Table:
		query := c.ProductVariant.Query().
			Where(productvariant.IDIn(ids...))
		query, err := query.CollectFields(ctx, productvariantImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case returncolli.Table:
		query := c.ReturnColli.Query().
			Where(returncolli.IDIn(ids...))
		query, err := query.CollectFields(ctx, returncolliImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case returncollihistory.Table:
		query := c.ReturnColliHistory.Query().
			Where(returncollihistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, returncollihistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case returnorderline.Table:
		query := c.ReturnOrderLine.Query().
			Where(returnorderline.IDIn(ids...))
		query, err := query.CollectFields(ctx, returnorderlineImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case returnportal.Table:
		query := c.ReturnPortal.Query().
			Where(returnportal.IDIn(ids...))
		query, err := query.CollectFields(ctx, returnportalImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case returnportalclaim.Table:
		query := c.ReturnPortalClaim.Query().
			Where(returnportalclaim.IDIn(ids...))
		query, err := query.CollectFields(ctx, returnportalclaimImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case seatgroup.Table:
		query := c.SeatGroup.Query().
			Where(seatgroup.IDIn(ids...))
		query, err := query.CollectFields(ctx, seatgroupImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case seatgroupaccessright.Table:
		query := c.SeatGroupAccessRight.Query().
			Where(seatgroupaccessright.IDIn(ids...))
		query, err := query.CollectFields(ctx, seatgroupaccessrightImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipment.Table:
		query := c.Shipment.Query().
			Where(shipment.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentbring.Table:
		query := c.ShipmentBring.Query().
			Where(shipmentbring.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentbringImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentdao.Table:
		query := c.ShipmentDAO.Query().
			Where(shipmentdao.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentdaoImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentdf.Table:
		query := c.ShipmentDF.Query().
			Where(shipmentdf.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentdfImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentdsv.Table:
		query := c.ShipmentDSV.Query().
			Where(shipmentdsv.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentdsvImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmenteasypost.Table:
		query := c.ShipmentEasyPost.Query().
			Where(shipmenteasypost.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmenteasypostImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentgls.Table:
		query := c.ShipmentGLS.Query().
			Where(shipmentgls.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentglsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmenthistory.Table:
		query := c.ShipmentHistory.Query().
			Where(shipmenthistory.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmenthistoryImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentpallet.Table:
		query := c.ShipmentPallet.Query().
			Where(shipmentpallet.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentpalletImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentparcel.Table:
		query := c.ShipmentParcel.Query().
			Where(shipmentparcel.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentparcelImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentpostnord.Table:
		query := c.ShipmentPostNord.Query().
			Where(shipmentpostnord.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentpostnordImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipmentusps.Table:
		query := c.ShipmentUSPS.Query().
			Where(shipmentusps.IDIn(ids...))
		query, err := query.CollectFields(ctx, shipmentuspsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case signupoptions.Table:
		query := c.SignupOptions.Query().
			Where(signupoptions.IDIn(ids...))
		query, err := query.CollectFields(ctx, signupoptionsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case systemevents.Table:
		query := c.SystemEvents.Query().
			Where(systemevents.IDIn(ids...))
		query, err := query.CollectFields(ctx, systemeventsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case tenant.Table:
		query := c.Tenant.Query().
			Where(tenant.IDIn(ids...))
		query, err := query.CollectFields(ctx, tenantImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		query := c.User.Query().
			Where(user.IDIn(ids...))
		query, err := query.CollectFields(ctx, userImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case userseat.Table:
		query := c.UserSeat.Query().
			Where(userseat.IDIn(ids...))
		query, err := query.CollectFields(ctx, userseatImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case workspacerecentscan.Table:
		query := c.WorkspaceRecentScan.Query().
			Where(workspacerecentscan.IDIn(ids...))
		query, err := query.CollectFields(ctx, workspacerecentscanImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case workstation.Table:
		query := c.Workstation.Query().
			Where(workstation.IDIn(ids...))
		query, err := query.CollectFields(ctx, workstationImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
