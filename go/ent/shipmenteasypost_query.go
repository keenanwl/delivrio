// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentEasyPostQuery is the builder for querying ShipmentEasyPost entities.
type ShipmentEasyPostQuery struct {
	config
	ctx          *QueryContext
	order        []shipmenteasypost.OrderOption
	inters       []Interceptor
	predicates   []predicate.ShipmentEasyPost
	withTenant   *TenantQuery
	withShipment *ShipmentQuery
	withFKs      bool
	modifiers    []func(*sql.Selector)
	loadTotal    []func(context.Context, []*ShipmentEasyPost) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShipmentEasyPostQuery builder.
func (sepq *ShipmentEasyPostQuery) Where(ps ...predicate.ShipmentEasyPost) *ShipmentEasyPostQuery {
	sepq.predicates = append(sepq.predicates, ps...)
	return sepq
}

// Limit the number of records to be returned by this query.
func (sepq *ShipmentEasyPostQuery) Limit(limit int) *ShipmentEasyPostQuery {
	sepq.ctx.Limit = &limit
	return sepq
}

// Offset to start from.
func (sepq *ShipmentEasyPostQuery) Offset(offset int) *ShipmentEasyPostQuery {
	sepq.ctx.Offset = &offset
	return sepq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sepq *ShipmentEasyPostQuery) Unique(unique bool) *ShipmentEasyPostQuery {
	sepq.ctx.Unique = &unique
	return sepq
}

// Order specifies how the records should be ordered.
func (sepq *ShipmentEasyPostQuery) Order(o ...shipmenteasypost.OrderOption) *ShipmentEasyPostQuery {
	sepq.order = append(sepq.order, o...)
	return sepq
}

// QueryTenant chains the current query on the "tenant" edge.
func (sepq *ShipmentEasyPostQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: sepq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenteasypost.Table, shipmenteasypost.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenteasypost.TenantTable, shipmenteasypost.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(sepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipment chains the current query on the "shipment" edge.
func (sepq *ShipmentEasyPostQuery) QueryShipment() *ShipmentQuery {
	query := (&ShipmentClient{config: sepq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenteasypost.Table, shipmenteasypost.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmenteasypost.ShipmentTable, shipmenteasypost.ShipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(sepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ShipmentEasyPost entity from the query.
// Returns a *NotFoundError when no ShipmentEasyPost was found.
func (sepq *ShipmentEasyPostQuery) First(ctx context.Context) (*ShipmentEasyPost, error) {
	nodes, err := sepq.Limit(1).All(setContextOp(ctx, sepq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shipmenteasypost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sepq *ShipmentEasyPostQuery) FirstX(ctx context.Context) *ShipmentEasyPost {
	node, err := sepq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShipmentEasyPost ID from the query.
// Returns a *NotFoundError when no ShipmentEasyPost ID was found.
func (sepq *ShipmentEasyPostQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sepq.Limit(1).IDs(setContextOp(ctx, sepq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shipmenteasypost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sepq *ShipmentEasyPostQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := sepq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ShipmentEasyPost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ShipmentEasyPost entity is found.
// Returns a *NotFoundError when no ShipmentEasyPost entities are found.
func (sepq *ShipmentEasyPostQuery) Only(ctx context.Context) (*ShipmentEasyPost, error) {
	nodes, err := sepq.Limit(2).All(setContextOp(ctx, sepq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shipmenteasypost.Label}
	default:
		return nil, &NotSingularError{shipmenteasypost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sepq *ShipmentEasyPostQuery) OnlyX(ctx context.Context) *ShipmentEasyPost {
	node, err := sepq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ShipmentEasyPost ID in the query.
// Returns a *NotSingularError when more than one ShipmentEasyPost ID is found.
// Returns a *NotFoundError when no entities are found.
func (sepq *ShipmentEasyPostQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sepq.Limit(2).IDs(setContextOp(ctx, sepq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shipmenteasypost.Label}
	default:
		err = &NotSingularError{shipmenteasypost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sepq *ShipmentEasyPostQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := sepq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShipmentEasyPosts.
func (sepq *ShipmentEasyPostQuery) All(ctx context.Context) ([]*ShipmentEasyPost, error) {
	ctx = setContextOp(ctx, sepq.ctx, ent.OpQueryAll)
	if err := sepq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ShipmentEasyPost, *ShipmentEasyPostQuery]()
	return withInterceptors[[]*ShipmentEasyPost](ctx, sepq, qr, sepq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sepq *ShipmentEasyPostQuery) AllX(ctx context.Context) []*ShipmentEasyPost {
	nodes, err := sepq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShipmentEasyPost IDs.
func (sepq *ShipmentEasyPostQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if sepq.ctx.Unique == nil && sepq.path != nil {
		sepq.Unique(true)
	}
	ctx = setContextOp(ctx, sepq.ctx, ent.OpQueryIDs)
	if err = sepq.Select(shipmenteasypost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sepq *ShipmentEasyPostQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := sepq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sepq *ShipmentEasyPostQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sepq.ctx, ent.OpQueryCount)
	if err := sepq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sepq, querierCount[*ShipmentEasyPostQuery](), sepq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sepq *ShipmentEasyPostQuery) CountX(ctx context.Context) int {
	count, err := sepq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sepq *ShipmentEasyPostQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sepq.ctx, ent.OpQueryExist)
	switch _, err := sepq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sepq *ShipmentEasyPostQuery) ExistX(ctx context.Context) bool {
	exist, err := sepq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShipmentEasyPostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sepq *ShipmentEasyPostQuery) Clone() *ShipmentEasyPostQuery {
	if sepq == nil {
		return nil
	}
	return &ShipmentEasyPostQuery{
		config:       sepq.config,
		ctx:          sepq.ctx.Clone(),
		order:        append([]shipmenteasypost.OrderOption{}, sepq.order...),
		inters:       append([]Interceptor{}, sepq.inters...),
		predicates:   append([]predicate.ShipmentEasyPost{}, sepq.predicates...),
		withTenant:   sepq.withTenant.Clone(),
		withShipment: sepq.withShipment.Clone(),
		// clone intermediate query.
		sql:  sepq.sql.Clone(),
		path: sepq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (sepq *ShipmentEasyPostQuery) WithTenant(opts ...func(*TenantQuery)) *ShipmentEasyPostQuery {
	query := (&TenantClient{config: sepq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sepq.withTenant = query
	return sepq
}

// WithShipment tells the query-builder to eager-load the nodes that are connected to
// the "shipment" edge. The optional arguments are used to configure the query builder of the edge.
func (sepq *ShipmentEasyPostQuery) WithShipment(opts ...func(*ShipmentQuery)) *ShipmentEasyPostQuery {
	query := (&ShipmentClient{config: sepq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sepq.withShipment = query
	return sepq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ShipmentEasyPost.Query().
//		GroupBy(shipmenteasypost.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sepq *ShipmentEasyPostQuery) GroupBy(field string, fields ...string) *ShipmentEasyPostGroupBy {
	sepq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ShipmentEasyPostGroupBy{build: sepq}
	grbuild.flds = &sepq.ctx.Fields
	grbuild.label = shipmenteasypost.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ShipmentEasyPost.Query().
//		Select(shipmenteasypost.FieldTenantID).
//		Scan(ctx, &v)
func (sepq *ShipmentEasyPostQuery) Select(fields ...string) *ShipmentEasyPostSelect {
	sepq.ctx.Fields = append(sepq.ctx.Fields, fields...)
	sbuild := &ShipmentEasyPostSelect{ShipmentEasyPostQuery: sepq}
	sbuild.label = shipmenteasypost.Label
	sbuild.flds, sbuild.scan = &sepq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ShipmentEasyPostSelect configured with the given aggregations.
func (sepq *ShipmentEasyPostQuery) Aggregate(fns ...AggregateFunc) *ShipmentEasyPostSelect {
	return sepq.Select().Aggregate(fns...)
}

func (sepq *ShipmentEasyPostQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sepq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sepq); err != nil {
				return err
			}
		}
	}
	for _, f := range sepq.ctx.Fields {
		if !shipmenteasypost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sepq.path != nil {
		prev, err := sepq.path(ctx)
		if err != nil {
			return err
		}
		sepq.sql = prev
	}
	if shipmenteasypost.Policy == nil {
		return errors.New("ent: uninitialized shipmenteasypost.Policy (forgotten import ent/runtime?)")
	}
	if err := shipmenteasypost.Policy.EvalQuery(ctx, sepq); err != nil {
		return err
	}
	return nil
}

func (sepq *ShipmentEasyPostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ShipmentEasyPost, error) {
	var (
		nodes       = []*ShipmentEasyPost{}
		withFKs     = sepq.withFKs
		_spec       = sepq.querySpec()
		loadedTypes = [2]bool{
			sepq.withTenant != nil,
			sepq.withShipment != nil,
		}
	)
	if sepq.withShipment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, shipmenteasypost.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ShipmentEasyPost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ShipmentEasyPost{config: sepq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sepq.modifiers) > 0 {
		_spec.Modifiers = sepq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sepq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sepq.withTenant; query != nil {
		if err := sepq.loadTenant(ctx, query, nodes, nil,
			func(n *ShipmentEasyPost, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := sepq.withShipment; query != nil {
		if err := sepq.loadShipment(ctx, query, nodes, nil,
			func(n *ShipmentEasyPost, e *Shipment) { n.Edges.Shipment = e }); err != nil {
			return nil, err
		}
	}
	for i := range sepq.loadTotal {
		if err := sepq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sepq *ShipmentEasyPostQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ShipmentEasyPost, init func(*ShipmentEasyPost), assign func(*ShipmentEasyPost, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentEasyPost)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sepq *ShipmentEasyPostQuery) loadShipment(ctx context.Context, query *ShipmentQuery, nodes []*ShipmentEasyPost, init func(*ShipmentEasyPost), assign func(*ShipmentEasyPost, *Shipment)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentEasyPost)
	for i := range nodes {
		if nodes[i].shipment_shipment_easy_post == nil {
			continue
		}
		fk := *nodes[i].shipment_shipment_easy_post
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_shipment_easy_post" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sepq *ShipmentEasyPostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sepq.querySpec()
	if len(sepq.modifiers) > 0 {
		_spec.Modifiers = sepq.modifiers
	}
	_spec.Node.Columns = sepq.ctx.Fields
	if len(sepq.ctx.Fields) > 0 {
		_spec.Unique = sepq.ctx.Unique != nil && *sepq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sepq.driver, _spec)
}

func (sepq *ShipmentEasyPostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(shipmenteasypost.Table, shipmenteasypost.Columns, sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString))
	_spec.From = sepq.sql
	if unique := sepq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sepq.path != nil {
		_spec.Unique = true
	}
	if fields := sepq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmenteasypost.FieldID)
		for i := range fields {
			if fields[i] != shipmenteasypost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sepq.withTenant != nil {
			_spec.Node.AddColumnOnce(shipmenteasypost.FieldTenantID)
		}
	}
	if ps := sepq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sepq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sepq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sepq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sepq *ShipmentEasyPostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sepq.driver.Dialect())
	t1 := builder.Table(shipmenteasypost.Table)
	columns := sepq.ctx.Fields
	if len(columns) == 0 {
		columns = shipmenteasypost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sepq.sql != nil {
		selector = sepq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sepq.ctx.Unique != nil && *sepq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sepq.predicates {
		p(selector)
	}
	for _, p := range sepq.order {
		p(selector)
	}
	if offset := sepq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sepq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ShipmentEasyPostGroupBy is the group-by builder for ShipmentEasyPost entities.
type ShipmentEasyPostGroupBy struct {
	selector
	build *ShipmentEasyPostQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sepgb *ShipmentEasyPostGroupBy) Aggregate(fns ...AggregateFunc) *ShipmentEasyPostGroupBy {
	sepgb.fns = append(sepgb.fns, fns...)
	return sepgb
}

// Scan applies the selector query and scans the result into the given value.
func (sepgb *ShipmentEasyPostGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sepgb.build.ctx, ent.OpQueryGroupBy)
	if err := sepgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentEasyPostQuery, *ShipmentEasyPostGroupBy](ctx, sepgb.build, sepgb, sepgb.build.inters, v)
}

func (sepgb *ShipmentEasyPostGroupBy) sqlScan(ctx context.Context, root *ShipmentEasyPostQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sepgb.fns))
	for _, fn := range sepgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sepgb.flds)+len(sepgb.fns))
		for _, f := range *sepgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sepgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sepgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ShipmentEasyPostSelect is the builder for selecting fields of ShipmentEasyPost entities.
type ShipmentEasyPostSelect struct {
	*ShipmentEasyPostQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (seps *ShipmentEasyPostSelect) Aggregate(fns ...AggregateFunc) *ShipmentEasyPostSelect {
	seps.fns = append(seps.fns, fns...)
	return seps
}

// Scan applies the selector query and scans the result into the given value.
func (seps *ShipmentEasyPostSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, seps.ctx, ent.OpQuerySelect)
	if err := seps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentEasyPostQuery, *ShipmentEasyPostSelect](ctx, seps.ShipmentEasyPostQuery, seps, seps.inters, v)
}

func (seps *ShipmentEasyPostSelect) sqlScan(ctx context.Context, root *ShipmentEasyPostQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(seps.fns))
	for _, fn := range seps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*seps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := seps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
