// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/userseat"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSeatCreate is the builder for creating a UserSeat entity.
type UserSeatCreate struct {
	config
	mutation *UserSeatMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (usc *UserSeatCreate) SetTenantID(pu pulid.ID) *UserSeatCreate {
	usc.mutation.SetTenantID(pu)
	return usc
}

// SetName sets the "name" field.
func (usc *UserSeatCreate) SetName(s string) *UserSeatCreate {
	usc.mutation.SetName(s)
	return usc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (usc *UserSeatCreate) SetNillableName(s *string) *UserSeatCreate {
	if s != nil {
		usc.SetName(*s)
	}
	return usc
}

// SetSurname sets the "surname" field.
func (usc *UserSeatCreate) SetSurname(s string) *UserSeatCreate {
	usc.mutation.SetSurname(s)
	return usc
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (usc *UserSeatCreate) SetNillableSurname(s *string) *UserSeatCreate {
	if s != nil {
		usc.SetSurname(*s)
	}
	return usc
}

// SetEmail sets the "email" field.
func (usc *UserSeatCreate) SetEmail(s string) *UserSeatCreate {
	usc.mutation.SetEmail(s)
	return usc
}

// SetPassword sets the "password" field.
func (usc *UserSeatCreate) SetPassword(s string) *UserSeatCreate {
	usc.mutation.SetPassword(s)
	return usc
}

// SetHash sets the "hash" field.
func (usc *UserSeatCreate) SetHash(s string) *UserSeatCreate {
	usc.mutation.SetHash(s)
	return usc
}

// SetCreatedAt sets the "created_at" field.
func (usc *UserSeatCreate) SetCreatedAt(t time.Time) *UserSeatCreate {
	usc.mutation.SetCreatedAt(t)
	return usc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usc *UserSeatCreate) SetNillableCreatedAt(t *time.Time) *UserSeatCreate {
	if t != nil {
		usc.SetCreatedAt(*t)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *UserSeatCreate) SetID(pu pulid.ID) *UserSeatCreate {
	usc.mutation.SetID(pu)
	return usc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (usc *UserSeatCreate) SetNillableID(pu *pulid.ID) *UserSeatCreate {
	if pu != nil {
		usc.SetID(*pu)
	}
	return usc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (usc *UserSeatCreate) SetTenant(t *Tenant) *UserSeatCreate {
	return usc.SetTenantID(t.ID)
}

// Mutation returns the UserSeatMutation object of the builder.
func (usc *UserSeatCreate) Mutation() *UserSeatMutation {
	return usc.mutation
}

// Save creates the UserSeat in the database.
func (usc *UserSeatCreate) Save(ctx context.Context) (*UserSeat, error) {
	if err := usc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSeatCreate) SaveX(ctx context.Context) *UserSeat {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSeatCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSeatCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSeatCreate) defaults() error {
	if _, ok := usc.mutation.CreatedAt(); !ok {
		if userseat.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized userseat.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := userseat.DefaultCreatedAt()
		usc.mutation.SetCreatedAt(v)
	}
	if _, ok := usc.mutation.ID(); !ok {
		if userseat.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized userseat.DefaultID (forgotten import ent/runtime?)")
		}
		v := userseat.DefaultID()
		usc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSeatCreate) check() error {
	if _, ok := usc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "UserSeat.tenant_id"`)}
	}
	if _, ok := usc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "UserSeat.email"`)}
	}
	if v, ok := usc.mutation.Email(); ok {
		if err := userseat.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "UserSeat.email": %w`, err)}
		}
	}
	if _, ok := usc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "UserSeat.password"`)}
	}
	if _, ok := usc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "UserSeat.hash"`)}
	}
	if _, ok := usc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserSeat.created_at"`)}
	}
	if len(usc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "UserSeat.tenant"`)}
	}
	return nil
}

func (usc *UserSeatCreate) sqlSave(ctx context.Context) (*UserSeat, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSeatCreate) createSpec() (*UserSeat, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSeat{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(userseat.Table, sqlgraph.NewFieldSpec(userseat.FieldID, field.TypeString))
	)
	_spec.OnConflict = usc.conflict
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := usc.mutation.Name(); ok {
		_spec.SetField(userseat.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := usc.mutation.Surname(); ok {
		_spec.SetField(userseat.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := usc.mutation.Email(); ok {
		_spec.SetField(userseat.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := usc.mutation.Password(); ok {
		_spec.SetField(userseat.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := usc.mutation.Hash(); ok {
		_spec.SetField(userseat.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := usc.mutation.CreatedAt(); ok {
		_spec.SetField(userseat.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := usc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userseat.TenantTable,
			Columns: []string{userseat.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSeat.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSeatUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (usc *UserSeatCreate) OnConflict(opts ...sql.ConflictOption) *UserSeatUpsertOne {
	usc.conflict = opts
	return &UserSeatUpsertOne{
		create: usc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSeat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (usc *UserSeatCreate) OnConflictColumns(columns ...string) *UserSeatUpsertOne {
	usc.conflict = append(usc.conflict, sql.ConflictColumns(columns...))
	return &UserSeatUpsertOne{
		create: usc,
	}
}

type (
	// UserSeatUpsertOne is the builder for "upsert"-ing
	//  one UserSeat node.
	UserSeatUpsertOne struct {
		create *UserSeatCreate
	}

	// UserSeatUpsert is the "OnConflict" setter.
	UserSeatUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *UserSeatUpsert) SetTenantID(v pulid.ID) *UserSeatUpsert {
	u.Set(userseat.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserSeatUpsert) UpdateTenantID() *UserSeatUpsert {
	u.SetExcluded(userseat.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *UserSeatUpsert) SetName(v string) *UserSeatUpsert {
	u.Set(userseat.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserSeatUpsert) UpdateName() *UserSeatUpsert {
	u.SetExcluded(userseat.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *UserSeatUpsert) ClearName() *UserSeatUpsert {
	u.SetNull(userseat.FieldName)
	return u
}

// SetSurname sets the "surname" field.
func (u *UserSeatUpsert) SetSurname(v string) *UserSeatUpsert {
	u.Set(userseat.FieldSurname, v)
	return u
}

// UpdateSurname sets the "surname" field to the value that was provided on create.
func (u *UserSeatUpsert) UpdateSurname() *UserSeatUpsert {
	u.SetExcluded(userseat.FieldSurname)
	return u
}

// ClearSurname clears the value of the "surname" field.
func (u *UserSeatUpsert) ClearSurname() *UserSeatUpsert {
	u.SetNull(userseat.FieldSurname)
	return u
}

// SetEmail sets the "email" field.
func (u *UserSeatUpsert) SetEmail(v string) *UserSeatUpsert {
	u.Set(userseat.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserSeatUpsert) UpdateEmail() *UserSeatUpsert {
	u.SetExcluded(userseat.FieldEmail)
	return u
}

// SetPassword sets the "password" field.
func (u *UserSeatUpsert) SetPassword(v string) *UserSeatUpsert {
	u.Set(userseat.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserSeatUpsert) UpdatePassword() *UserSeatUpsert {
	u.SetExcluded(userseat.FieldPassword)
	return u
}

// SetHash sets the "hash" field.
func (u *UserSeatUpsert) SetHash(v string) *UserSeatUpsert {
	u.Set(userseat.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *UserSeatUpsert) UpdateHash() *UserSeatUpsert {
	u.SetExcluded(userseat.FieldHash)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserSeat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userseat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSeatUpsertOne) UpdateNewValues() *UserSeatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userseat.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userseat.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSeat.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserSeatUpsertOne) Ignore() *UserSeatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSeatUpsertOne) DoNothing() *UserSeatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSeatCreate.OnConflict
// documentation for more info.
func (u *UserSeatUpsertOne) Update(set func(*UserSeatUpsert)) *UserSeatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSeatUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *UserSeatUpsertOne) SetTenantID(v pulid.ID) *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserSeatUpsertOne) UpdateTenantID() *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *UserSeatUpsertOne) SetName(v string) *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserSeatUpsertOne) UpdateName() *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserSeatUpsertOne) ClearName() *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.ClearName()
	})
}

// SetSurname sets the "surname" field.
func (u *UserSeatUpsertOne) SetSurname(v string) *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetSurname(v)
	})
}

// UpdateSurname sets the "surname" field to the value that was provided on create.
func (u *UserSeatUpsertOne) UpdateSurname() *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateSurname()
	})
}

// ClearSurname clears the value of the "surname" field.
func (u *UserSeatUpsertOne) ClearSurname() *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.ClearSurname()
	})
}

// SetEmail sets the "email" field.
func (u *UserSeatUpsertOne) SetEmail(v string) *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserSeatUpsertOne) UpdateEmail() *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateEmail()
	})
}

// SetPassword sets the "password" field.
func (u *UserSeatUpsertOne) SetPassword(v string) *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserSeatUpsertOne) UpdatePassword() *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdatePassword()
	})
}

// SetHash sets the "hash" field.
func (u *UserSeatUpsertOne) SetHash(v string) *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *UserSeatUpsertOne) UpdateHash() *UserSeatUpsertOne {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateHash()
	})
}

// Exec executes the query.
func (u *UserSeatUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserSeatCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSeatUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserSeatUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserSeatUpsertOne.ID is not supported by MySQL driver. Use UserSeatUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserSeatUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserSeatCreateBulk is the builder for creating many UserSeat entities in bulk.
type UserSeatCreateBulk struct {
	config
	err      error
	builders []*UserSeatCreate
	conflict []sql.ConflictOption
}

// Save creates the UserSeat entities in the database.
func (uscb *UserSeatCreateBulk) Save(ctx context.Context) ([]*UserSeat, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSeat, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSeatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSeatCreateBulk) SaveX(ctx context.Context) []*UserSeat {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSeatCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSeatCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSeat.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSeatUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (uscb *UserSeatCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserSeatUpsertBulk {
	uscb.conflict = opts
	return &UserSeatUpsertBulk{
		create: uscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSeat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uscb *UserSeatCreateBulk) OnConflictColumns(columns ...string) *UserSeatUpsertBulk {
	uscb.conflict = append(uscb.conflict, sql.ConflictColumns(columns...))
	return &UserSeatUpsertBulk{
		create: uscb,
	}
}

// UserSeatUpsertBulk is the builder for "upsert"-ing
// a bulk of UserSeat nodes.
type UserSeatUpsertBulk struct {
	create *UserSeatCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserSeat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userseat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserSeatUpsertBulk) UpdateNewValues() *UserSeatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userseat.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userseat.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSeat.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserSeatUpsertBulk) Ignore() *UserSeatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSeatUpsertBulk) DoNothing() *UserSeatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSeatCreateBulk.OnConflict
// documentation for more info.
func (u *UserSeatUpsertBulk) Update(set func(*UserSeatUpsert)) *UserSeatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSeatUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *UserSeatUpsertBulk) SetTenantID(v pulid.ID) *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserSeatUpsertBulk) UpdateTenantID() *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *UserSeatUpsertBulk) SetName(v string) *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserSeatUpsertBulk) UpdateName() *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserSeatUpsertBulk) ClearName() *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.ClearName()
	})
}

// SetSurname sets the "surname" field.
func (u *UserSeatUpsertBulk) SetSurname(v string) *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetSurname(v)
	})
}

// UpdateSurname sets the "surname" field to the value that was provided on create.
func (u *UserSeatUpsertBulk) UpdateSurname() *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateSurname()
	})
}

// ClearSurname clears the value of the "surname" field.
func (u *UserSeatUpsertBulk) ClearSurname() *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.ClearSurname()
	})
}

// SetEmail sets the "email" field.
func (u *UserSeatUpsertBulk) SetEmail(v string) *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserSeatUpsertBulk) UpdateEmail() *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateEmail()
	})
}

// SetPassword sets the "password" field.
func (u *UserSeatUpsertBulk) SetPassword(v string) *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserSeatUpsertBulk) UpdatePassword() *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdatePassword()
	})
}

// SetHash sets the "hash" field.
func (u *UserSeatUpsertBulk) SetHash(v string) *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *UserSeatUpsertBulk) UpdateHash() *UserSeatUpsertBulk {
	return u.Update(func(s *UserSeatUpsert) {
		s.UpdateHash()
	})
}

// Exec executes the query.
func (u *UserSeatUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserSeatCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserSeatCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSeatUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
