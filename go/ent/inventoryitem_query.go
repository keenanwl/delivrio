// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryItemQuery is the builder for querying InventoryItem entities.
type InventoryItemQuery struct {
	config
	ctx                            *QueryContext
	order                          []inventoryitem.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.InventoryItem
	withTenant                     *TenantQuery
	withCountryHarmonizedCode      *CountryHarmonizedCodeQuery
	withCountryOfOrigin            *CountryQuery
	withProductVariant             *ProductVariantQuery
	withFKs                        bool
	modifiers                      []func(*sql.Selector)
	loadTotal                      []func(context.Context, []*InventoryItem) error
	withNamedCountryHarmonizedCode map[string]*CountryHarmonizedCodeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InventoryItemQuery builder.
func (iiq *InventoryItemQuery) Where(ps ...predicate.InventoryItem) *InventoryItemQuery {
	iiq.predicates = append(iiq.predicates, ps...)
	return iiq
}

// Limit the number of records to be returned by this query.
func (iiq *InventoryItemQuery) Limit(limit int) *InventoryItemQuery {
	iiq.ctx.Limit = &limit
	return iiq
}

// Offset to start from.
func (iiq *InventoryItemQuery) Offset(offset int) *InventoryItemQuery {
	iiq.ctx.Offset = &offset
	return iiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iiq *InventoryItemQuery) Unique(unique bool) *InventoryItemQuery {
	iiq.ctx.Unique = &unique
	return iiq
}

// Order specifies how the records should be ordered.
func (iiq *InventoryItemQuery) Order(o ...inventoryitem.OrderOption) *InventoryItemQuery {
	iiq.order = append(iiq.order, o...)
	return iiq
}

// QueryTenant chains the current query on the "tenant" edge.
func (iiq *InventoryItemQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: iiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inventoryitem.TenantTable, inventoryitem.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(iiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountryHarmonizedCode chains the current query on the "country_harmonized_code" edge.
func (iiq *InventoryItemQuery) QueryCountryHarmonizedCode() *CountryHarmonizedCodeQuery {
	query := (&CountryHarmonizedCodeClient{config: iiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, selector),
			sqlgraph.To(countryharmonizedcode.Table, countryharmonizedcode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inventoryitem.CountryHarmonizedCodeTable, inventoryitem.CountryHarmonizedCodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(iiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountryOfOrigin chains the current query on the "country_of_origin" edge.
func (iiq *InventoryItemQuery) QueryCountryOfOrigin() *CountryQuery {
	query := (&CountryClient{config: iiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inventoryitem.CountryOfOriginTable, inventoryitem.CountryOfOriginColumn),
		)
		fromU = sqlgraph.SetNeighbors(iiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductVariant chains the current query on the "product_variant" edge.
func (iiq *InventoryItemQuery) QueryProductVariant() *ProductVariantQuery {
	query := (&ProductVariantClient{config: iiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, selector),
			sqlgraph.To(productvariant.Table, productvariant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, inventoryitem.ProductVariantTable, inventoryitem.ProductVariantColumn),
		)
		fromU = sqlgraph.SetNeighbors(iiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InventoryItem entity from the query.
// Returns a *NotFoundError when no InventoryItem was found.
func (iiq *InventoryItemQuery) First(ctx context.Context) (*InventoryItem, error) {
	nodes, err := iiq.Limit(1).All(setContextOp(ctx, iiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{inventoryitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iiq *InventoryItemQuery) FirstX(ctx context.Context) *InventoryItem {
	node, err := iiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InventoryItem ID from the query.
// Returns a *NotFoundError when no InventoryItem ID was found.
func (iiq *InventoryItemQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = iiq.Limit(1).IDs(setContextOp(ctx, iiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{inventoryitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iiq *InventoryItemQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := iiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InventoryItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InventoryItem entity is found.
// Returns a *NotFoundError when no InventoryItem entities are found.
func (iiq *InventoryItemQuery) Only(ctx context.Context) (*InventoryItem, error) {
	nodes, err := iiq.Limit(2).All(setContextOp(ctx, iiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{inventoryitem.Label}
	default:
		return nil, &NotSingularError{inventoryitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iiq *InventoryItemQuery) OnlyX(ctx context.Context) *InventoryItem {
	node, err := iiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InventoryItem ID in the query.
// Returns a *NotSingularError when more than one InventoryItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (iiq *InventoryItemQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = iiq.Limit(2).IDs(setContextOp(ctx, iiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{inventoryitem.Label}
	default:
		err = &NotSingularError{inventoryitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iiq *InventoryItemQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := iiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InventoryItems.
func (iiq *InventoryItemQuery) All(ctx context.Context) ([]*InventoryItem, error) {
	ctx = setContextOp(ctx, iiq.ctx, ent.OpQueryAll)
	if err := iiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InventoryItem, *InventoryItemQuery]()
	return withInterceptors[[]*InventoryItem](ctx, iiq, qr, iiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iiq *InventoryItemQuery) AllX(ctx context.Context) []*InventoryItem {
	nodes, err := iiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InventoryItem IDs.
func (iiq *InventoryItemQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if iiq.ctx.Unique == nil && iiq.path != nil {
		iiq.Unique(true)
	}
	ctx = setContextOp(ctx, iiq.ctx, ent.OpQueryIDs)
	if err = iiq.Select(inventoryitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iiq *InventoryItemQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := iiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iiq *InventoryItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iiq.ctx, ent.OpQueryCount)
	if err := iiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iiq, querierCount[*InventoryItemQuery](), iiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iiq *InventoryItemQuery) CountX(ctx context.Context) int {
	count, err := iiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iiq *InventoryItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iiq.ctx, ent.OpQueryExist)
	switch _, err := iiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iiq *InventoryItemQuery) ExistX(ctx context.Context) bool {
	exist, err := iiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InventoryItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iiq *InventoryItemQuery) Clone() *InventoryItemQuery {
	if iiq == nil {
		return nil
	}
	return &InventoryItemQuery{
		config:                    iiq.config,
		ctx:                       iiq.ctx.Clone(),
		order:                     append([]inventoryitem.OrderOption{}, iiq.order...),
		inters:                    append([]Interceptor{}, iiq.inters...),
		predicates:                append([]predicate.InventoryItem{}, iiq.predicates...),
		withTenant:                iiq.withTenant.Clone(),
		withCountryHarmonizedCode: iiq.withCountryHarmonizedCode.Clone(),
		withCountryOfOrigin:       iiq.withCountryOfOrigin.Clone(),
		withProductVariant:        iiq.withProductVariant.Clone(),
		// clone intermediate query.
		sql:  iiq.sql.Clone(),
		path: iiq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (iiq *InventoryItemQuery) WithTenant(opts ...func(*TenantQuery)) *InventoryItemQuery {
	query := (&TenantClient{config: iiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iiq.withTenant = query
	return iiq
}

// WithCountryHarmonizedCode tells the query-builder to eager-load the nodes that are connected to
// the "country_harmonized_code" edge. The optional arguments are used to configure the query builder of the edge.
func (iiq *InventoryItemQuery) WithCountryHarmonizedCode(opts ...func(*CountryHarmonizedCodeQuery)) *InventoryItemQuery {
	query := (&CountryHarmonizedCodeClient{config: iiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iiq.withCountryHarmonizedCode = query
	return iiq
}

// WithCountryOfOrigin tells the query-builder to eager-load the nodes that are connected to
// the "country_of_origin" edge. The optional arguments are used to configure the query builder of the edge.
func (iiq *InventoryItemQuery) WithCountryOfOrigin(opts ...func(*CountryQuery)) *InventoryItemQuery {
	query := (&CountryClient{config: iiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iiq.withCountryOfOrigin = query
	return iiq
}

// WithProductVariant tells the query-builder to eager-load the nodes that are connected to
// the "product_variant" edge. The optional arguments are used to configure the query builder of the edge.
func (iiq *InventoryItemQuery) WithProductVariant(opts ...func(*ProductVariantQuery)) *InventoryItemQuery {
	query := (&ProductVariantClient{config: iiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iiq.withProductVariant = query
	return iiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InventoryItem.Query().
//		GroupBy(inventoryitem.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iiq *InventoryItemQuery) GroupBy(field string, fields ...string) *InventoryItemGroupBy {
	iiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InventoryItemGroupBy{build: iiq}
	grbuild.flds = &iiq.ctx.Fields
	grbuild.label = inventoryitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.InventoryItem.Query().
//		Select(inventoryitem.FieldTenantID).
//		Scan(ctx, &v)
func (iiq *InventoryItemQuery) Select(fields ...string) *InventoryItemSelect {
	iiq.ctx.Fields = append(iiq.ctx.Fields, fields...)
	sbuild := &InventoryItemSelect{InventoryItemQuery: iiq}
	sbuild.label = inventoryitem.Label
	sbuild.flds, sbuild.scan = &iiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InventoryItemSelect configured with the given aggregations.
func (iiq *InventoryItemQuery) Aggregate(fns ...AggregateFunc) *InventoryItemSelect {
	return iiq.Select().Aggregate(fns...)
}

func (iiq *InventoryItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iiq); err != nil {
				return err
			}
		}
	}
	for _, f := range iiq.ctx.Fields {
		if !inventoryitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iiq.path != nil {
		prev, err := iiq.path(ctx)
		if err != nil {
			return err
		}
		iiq.sql = prev
	}
	if inventoryitem.Policy == nil {
		return errors.New("ent: uninitialized inventoryitem.Policy (forgotten import ent/runtime?)")
	}
	if err := inventoryitem.Policy.EvalQuery(ctx, iiq); err != nil {
		return err
	}
	return nil
}

func (iiq *InventoryItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InventoryItem, error) {
	var (
		nodes       = []*InventoryItem{}
		withFKs     = iiq.withFKs
		_spec       = iiq.querySpec()
		loadedTypes = [4]bool{
			iiq.withTenant != nil,
			iiq.withCountryHarmonizedCode != nil,
			iiq.withCountryOfOrigin != nil,
			iiq.withProductVariant != nil,
		}
	)
	if iiq.withCountryOfOrigin != nil || iiq.withProductVariant != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, inventoryitem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InventoryItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InventoryItem{config: iiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iiq.modifiers) > 0 {
		_spec.Modifiers = iiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iiq.withTenant; query != nil {
		if err := iiq.loadTenant(ctx, query, nodes, nil,
			func(n *InventoryItem, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := iiq.withCountryHarmonizedCode; query != nil {
		if err := iiq.loadCountryHarmonizedCode(ctx, query, nodes,
			func(n *InventoryItem) { n.Edges.CountryHarmonizedCode = []*CountryHarmonizedCode{} },
			func(n *InventoryItem, e *CountryHarmonizedCode) {
				n.Edges.CountryHarmonizedCode = append(n.Edges.CountryHarmonizedCode, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := iiq.withCountryOfOrigin; query != nil {
		if err := iiq.loadCountryOfOrigin(ctx, query, nodes, nil,
			func(n *InventoryItem, e *Country) { n.Edges.CountryOfOrigin = e }); err != nil {
			return nil, err
		}
	}
	if query := iiq.withProductVariant; query != nil {
		if err := iiq.loadProductVariant(ctx, query, nodes, nil,
			func(n *InventoryItem, e *ProductVariant) { n.Edges.ProductVariant = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range iiq.withNamedCountryHarmonizedCode {
		if err := iiq.loadCountryHarmonizedCode(ctx, query, nodes,
			func(n *InventoryItem) { n.appendNamedCountryHarmonizedCode(name) },
			func(n *InventoryItem, e *CountryHarmonizedCode) { n.appendNamedCountryHarmonizedCode(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range iiq.loadTotal {
		if err := iiq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iiq *InventoryItemQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*InventoryItem, init func(*InventoryItem), assign func(*InventoryItem, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*InventoryItem)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iiq *InventoryItemQuery) loadCountryHarmonizedCode(ctx context.Context, query *CountryHarmonizedCodeQuery, nodes []*InventoryItem, init func(*InventoryItem), assign func(*InventoryItem, *CountryHarmonizedCode)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*InventoryItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CountryHarmonizedCode(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(inventoryitem.CountryHarmonizedCodeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.inventory_item_country_harmonized_code
		if fk == nil {
			return fmt.Errorf(`foreign-key "inventory_item_country_harmonized_code" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "inventory_item_country_harmonized_code" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iiq *InventoryItemQuery) loadCountryOfOrigin(ctx context.Context, query *CountryQuery, nodes []*InventoryItem, init func(*InventoryItem), assign func(*InventoryItem, *Country)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*InventoryItem)
	for i := range nodes {
		if nodes[i].inventory_item_country_of_origin == nil {
			continue
		}
		fk := *nodes[i].inventory_item_country_of_origin
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(country.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "inventory_item_country_of_origin" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iiq *InventoryItemQuery) loadProductVariant(ctx context.Context, query *ProductVariantQuery, nodes []*InventoryItem, init func(*InventoryItem), assign func(*InventoryItem, *ProductVariant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*InventoryItem)
	for i := range nodes {
		if nodes[i].product_variant_inventory_item == nil {
			continue
		}
		fk := *nodes[i].product_variant_inventory_item
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(productvariant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_variant_inventory_item" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iiq *InventoryItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iiq.querySpec()
	if len(iiq.modifiers) > 0 {
		_spec.Modifiers = iiq.modifiers
	}
	_spec.Node.Columns = iiq.ctx.Fields
	if len(iiq.ctx.Fields) > 0 {
		_spec.Unique = iiq.ctx.Unique != nil && *iiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iiq.driver, _spec)
}

func (iiq *InventoryItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(inventoryitem.Table, inventoryitem.Columns, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString))
	_spec.From = iiq.sql
	if unique := iiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iiq.path != nil {
		_spec.Unique = true
	}
	if fields := iiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventoryitem.FieldID)
		for i := range fields {
			if fields[i] != inventoryitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if iiq.withTenant != nil {
			_spec.Node.AddColumnOnce(inventoryitem.FieldTenantID)
		}
	}
	if ps := iiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iiq *InventoryItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iiq.driver.Dialect())
	t1 := builder.Table(inventoryitem.Table)
	columns := iiq.ctx.Fields
	if len(columns) == 0 {
		columns = inventoryitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iiq.sql != nil {
		selector = iiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iiq.ctx.Unique != nil && *iiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range iiq.predicates {
		p(selector)
	}
	for _, p := range iiq.order {
		p(selector)
	}
	if offset := iiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCountryHarmonizedCode tells the query-builder to eager-load the nodes that are connected to the "country_harmonized_code"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iiq *InventoryItemQuery) WithNamedCountryHarmonizedCode(name string, opts ...func(*CountryHarmonizedCodeQuery)) *InventoryItemQuery {
	query := (&CountryHarmonizedCodeClient{config: iiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iiq.withNamedCountryHarmonizedCode == nil {
		iiq.withNamedCountryHarmonizedCode = make(map[string]*CountryHarmonizedCodeQuery)
	}
	iiq.withNamedCountryHarmonizedCode[name] = query
	return iiq
}

// InventoryItemGroupBy is the group-by builder for InventoryItem entities.
type InventoryItemGroupBy struct {
	selector
	build *InventoryItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iigb *InventoryItemGroupBy) Aggregate(fns ...AggregateFunc) *InventoryItemGroupBy {
	iigb.fns = append(iigb.fns, fns...)
	return iigb
}

// Scan applies the selector query and scans the result into the given value.
func (iigb *InventoryItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iigb.build.ctx, ent.OpQueryGroupBy)
	if err := iigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InventoryItemQuery, *InventoryItemGroupBy](ctx, iigb.build, iigb, iigb.build.inters, v)
}

func (iigb *InventoryItemGroupBy) sqlScan(ctx context.Context, root *InventoryItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iigb.fns))
	for _, fn := range iigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iigb.flds)+len(iigb.fns))
		for _, f := range *iigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InventoryItemSelect is the builder for selecting fields of InventoryItem entities.
type InventoryItemSelect struct {
	*InventoryItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (iis *InventoryItemSelect) Aggregate(fns ...AggregateFunc) *InventoryItemSelect {
	iis.fns = append(iis.fns, fns...)
	return iis
}

// Scan applies the selector query and scans the result into the given value.
func (iis *InventoryItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iis.ctx, ent.OpQuerySelect)
	if err := iis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InventoryItemQuery, *InventoryItemSelect](ctx, iis.InventoryItemQuery, iis, iis.inters, v)
}

func (iis *InventoryItemSelect) sqlScan(ctx context.Context, root *InventoryItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(iis.fns))
	for _, fn := range iis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*iis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
