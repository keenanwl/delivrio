// Code generated by ent, DO NOT EDIT.

package parcelshop

import (
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the parcelshop type in the database.
	Label = "parcel_shop"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgeParcelShopDAO holds the string denoting the parcel_shop_dao edge name in mutations.
	EdgeParcelShopDAO = "parcel_shop_dao"
	// EdgeParcelShopPostNord holds the string denoting the parcel_shop_post_nord edge name in mutations.
	EdgeParcelShopPostNord = "parcel_shop_post_nord"
	// EdgeParcelShopGLS holds the string denoting the parcel_shop_gls edge name in mutations.
	EdgeParcelShopGLS = "parcel_shop_gls"
	// EdgeParcelShopBring holds the string denoting the parcel_shop_bring edge name in mutations.
	EdgeParcelShopBring = "parcel_shop_bring"
	// EdgeCarrierBrand holds the string denoting the carrier_brand edge name in mutations.
	EdgeCarrierBrand = "carrier_brand"
	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "address"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// EdgeBusinessHoursPeriod holds the string denoting the business_hours_period edge name in mutations.
	EdgeBusinessHoursPeriod = "business_hours_period"
	// Table holds the table name of the parcelshop in the database.
	Table = "parcel_shops"
	// ParcelShopDAOTable is the table that holds the parcel_shop_dao relation/edge.
	ParcelShopDAOTable = "parcel_shop_da_os"
	// ParcelShopDAOInverseTable is the table name for the ParcelShopDAO entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshopdao" package.
	ParcelShopDAOInverseTable = "parcel_shop_da_os"
	// ParcelShopDAOColumn is the table column denoting the parcel_shop_dao relation/edge.
	ParcelShopDAOColumn = "parcel_shop_parcel_shop_dao"
	// ParcelShopPostNordTable is the table that holds the parcel_shop_post_nord relation/edge.
	ParcelShopPostNordTable = "parcel_shop_post_nords"
	// ParcelShopPostNordInverseTable is the table name for the ParcelShopPostNord entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshoppostnord" package.
	ParcelShopPostNordInverseTable = "parcel_shop_post_nords"
	// ParcelShopPostNordColumn is the table column denoting the parcel_shop_post_nord relation/edge.
	ParcelShopPostNordColumn = "parcel_shop_parcel_shop_post_nord"
	// ParcelShopGLSTable is the table that holds the parcel_shop_gls relation/edge.
	ParcelShopGLSTable = "parcel_shop_gl_ss"
	// ParcelShopGLSInverseTable is the table name for the ParcelShopGLS entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshopgls" package.
	ParcelShopGLSInverseTable = "parcel_shop_gl_ss"
	// ParcelShopGLSColumn is the table column denoting the parcel_shop_gls relation/edge.
	ParcelShopGLSColumn = "parcel_shop_parcel_shop_gls"
	// ParcelShopBringTable is the table that holds the parcel_shop_bring relation/edge.
	ParcelShopBringTable = "parcel_shop_brings"
	// ParcelShopBringInverseTable is the table name for the ParcelShopBring entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshopbring" package.
	ParcelShopBringInverseTable = "parcel_shop_brings"
	// ParcelShopBringColumn is the table column denoting the parcel_shop_bring relation/edge.
	ParcelShopBringColumn = "parcel_shop_parcel_shop_bring"
	// CarrierBrandTable is the table that holds the carrier_brand relation/edge.
	CarrierBrandTable = "parcel_shops"
	// CarrierBrandInverseTable is the table name for the CarrierBrand entity.
	// It exists in this package in order to avoid circular dependency with the "carrierbrand" package.
	CarrierBrandInverseTable = "carrier_brands"
	// CarrierBrandColumn is the table column denoting the carrier_brand relation/edge.
	CarrierBrandColumn = "parcel_shop_carrier_brand"
	// AddressTable is the table that holds the address relation/edge.
	AddressTable = "address_globals"
	// AddressInverseTable is the table name for the AddressGlobal entity.
	// It exists in this package in order to avoid circular dependency with the "addressglobal" package.
	AddressInverseTable = "address_globals"
	// AddressColumn is the table column denoting the address relation/edge.
	AddressColumn = "parcel_shop_address"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "collis"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "colli_parcel_shop"
	// BusinessHoursPeriodTable is the table that holds the business_hours_period relation/edge.
	BusinessHoursPeriodTable = "business_hours_periods"
	// BusinessHoursPeriodInverseTable is the table name for the BusinessHoursPeriod entity.
	// It exists in this package in order to avoid circular dependency with the "businesshoursperiod" package.
	BusinessHoursPeriodInverseTable = "business_hours_periods"
	// BusinessHoursPeriodColumn is the table column denoting the business_hours_period relation/edge.
	BusinessHoursPeriodColumn = "parcel_shop_business_hours_period"
)

// Columns holds all SQL columns for parcelshop fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "parcel_shops"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"parcel_shop_carrier_brand",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ParcelShop queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLastUpdated orders the results by the last_updated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByParcelShopDAOField orders the results by parcel_shop_dao field.
func ByParcelShopDAOField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopDAOStep(), sql.OrderByField(field, opts...))
	}
}

// ByParcelShopPostNordField orders the results by parcel_shop_post_nord field.
func ByParcelShopPostNordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopPostNordStep(), sql.OrderByField(field, opts...))
	}
}

// ByParcelShopGLSField orders the results by parcel_shop_gls field.
func ByParcelShopGLSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopGLSStep(), sql.OrderByField(field, opts...))
	}
}

// ByParcelShopBringField orders the results by parcel_shop_bring field.
func ByParcelShopBringField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopBringStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierBrandField orders the results by carrier_brand field.
func ByCarrierBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressField orders the results by address field.
func ByAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressStep(), sql.OrderByField(field, opts...))
	}
}

// ByColliCount orders the results by colli count.
func ByColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newColliStep(), opts...)
	}
}

// ByColli orders the results by colli terms.
func ByColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBusinessHoursPeriodCount orders the results by business_hours_period count.
func ByBusinessHoursPeriodCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBusinessHoursPeriodStep(), opts...)
	}
}

// ByBusinessHoursPeriod orders the results by business_hours_period terms.
func ByBusinessHoursPeriod(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessHoursPeriodStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newParcelShopDAOStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopDAOInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ParcelShopDAOTable, ParcelShopDAOColumn),
	)
}
func newParcelShopPostNordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopPostNordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ParcelShopPostNordTable, ParcelShopPostNordColumn),
	)
}
func newParcelShopGLSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopGLSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ParcelShopGLSTable, ParcelShopGLSColumn),
	)
}
func newParcelShopBringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopBringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ParcelShopBringTable, ParcelShopBringColumn),
	)
}
func newCarrierBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierBrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CarrierBrandTable, CarrierBrandColumn),
	)
}
func newAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AddressTable, AddressColumn),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ColliTable, ColliColumn),
	)
}
func newBusinessHoursPeriodStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessHoursPeriodInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BusinessHoursPeriodTable, BusinessHoursPeriodColumn),
	)
}
