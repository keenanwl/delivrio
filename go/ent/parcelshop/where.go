// Code generated by ent, DO NOT EDIT.

package parcelshop

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldEQ(FieldName, v))
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldEQ(FieldLastUpdated, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldContainsFold(FieldName, v))
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.ParcelShop {
	return predicate.ParcelShop(sql.FieldLTE(FieldLastUpdated, v))
}

// HasParcelShopDAO applies the HasEdge predicate on the "parcel_shop_dao" edge.
func HasParcelShopDAO() predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ParcelShopDAOTable, ParcelShopDAOColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopDAOWith applies the HasEdge predicate on the "parcel_shop_dao" edge with a given conditions (other predicates).
func HasParcelShopDAOWith(preds ...predicate.ParcelShopDAO) predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := newParcelShopDAOStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcelShopPostNord applies the HasEdge predicate on the "parcel_shop_post_nord" edge.
func HasParcelShopPostNord() predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ParcelShopPostNordTable, ParcelShopPostNordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopPostNordWith applies the HasEdge predicate on the "parcel_shop_post_nord" edge with a given conditions (other predicates).
func HasParcelShopPostNordWith(preds ...predicate.ParcelShopPostNord) predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := newParcelShopPostNordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcelShopGLS applies the HasEdge predicate on the "parcel_shop_gls" edge.
func HasParcelShopGLS() predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ParcelShopGLSTable, ParcelShopGLSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopGLSWith applies the HasEdge predicate on the "parcel_shop_gls" edge with a given conditions (other predicates).
func HasParcelShopGLSWith(preds ...predicate.ParcelShopGLS) predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := newParcelShopGLSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcelShopBring applies the HasEdge predicate on the "parcel_shop_bring" edge.
func HasParcelShopBring() predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ParcelShopBringTable, ParcelShopBringColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopBringWith applies the HasEdge predicate on the "parcel_shop_bring" edge with a given conditions (other predicates).
func HasParcelShopBringWith(preds ...predicate.ParcelShopBring) predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := newParcelShopBringStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierBrand applies the HasEdge predicate on the "carrier_brand" edge.
func HasCarrierBrand() predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CarrierBrandTable, CarrierBrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierBrandWith applies the HasEdge predicate on the "carrier_brand" edge with a given conditions (other predicates).
func HasCarrierBrandWith(preds ...predicate.CarrierBrand) predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := newCarrierBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddress applies the HasEdge predicate on the "address" edge.
func HasAddress() predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AddressTable, AddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressWith applies the HasEdge predicate on the "address" edge with a given conditions (other predicates).
func HasAddressWith(preds ...predicate.AddressGlobal) predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := newAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasColli applies the HasEdge predicate on the "colli" edge.
func HasColli() predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ColliTable, ColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColliWith applies the HasEdge predicate on the "colli" edge with a given conditions (other predicates).
func HasColliWith(preds ...predicate.Colli) predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := newColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessHoursPeriod applies the HasEdge predicate on the "business_hours_period" edge.
func HasBusinessHoursPeriod() predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BusinessHoursPeriodTable, BusinessHoursPeriodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessHoursPeriodWith applies the HasEdge predicate on the "business_hours_period" edge with a given conditions (other predicates).
func HasBusinessHoursPeriodWith(preds ...predicate.BusinessHoursPeriod) predicate.ParcelShop {
	return predicate.ParcelShop(func(s *sql.Selector) {
		step := newBusinessHoursPeriodStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ParcelShop) predicate.ParcelShop {
	return predicate.ParcelShop(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ParcelShop) predicate.ParcelShop {
	return predicate.ParcelShop(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ParcelShop) predicate.ParcelShop {
	return predicate.ParcelShop(sql.NotPredicates(p))
}
