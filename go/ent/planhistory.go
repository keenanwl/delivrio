// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PlanHistory is the model entity for the PlanHistory schema.
type PlanHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanHistoryQuery when eager-loading is set.
	Edges                       PlanHistoryEdges `json:"edges"`
	change_history_plan_history *pulid.ID
	plan_plan_history_plan      *pulid.ID
	user_plan_history_user      *pulid.ID
	selectValues                sql.SelectValues
}

// PlanHistoryEdges holds the relations/edges for other nodes in the graph.
type PlanHistoryEdges struct {
	// ChangeHistory holds the value of the change_history edge.
	ChangeHistory *ChangeHistory `json:"change_history,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ChangedBy holds the value of the changed_by edge.
	ChangedBy *User `json:"changed_by,omitempty"`
	// ChangedFrom holds the value of the changed_from edge.
	ChangedFrom *Plan `json:"changed_from,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// ChangeHistoryOrErr returns the ChangeHistory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanHistoryEdges) ChangeHistoryOrErr() (*ChangeHistory, error) {
	if e.ChangeHistory != nil {
		return e.ChangeHistory, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: changehistory.Label}
	}
	return nil, &NotLoadedError{edge: "change_history"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanHistoryEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ChangedByOrErr returns the ChangedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanHistoryEdges) ChangedByOrErr() (*User, error) {
	if e.ChangedBy != nil {
		return e.ChangedBy, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "changed_by"}
}

// ChangedFromOrErr returns the ChangedFrom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanHistoryEdges) ChangedFromOrErr() (*Plan, error) {
	if e.ChangedFrom != nil {
		return e.ChangedFrom, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: plan.Label}
	}
	return nil, &NotLoadedError{edge: "changed_from"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlanHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case planhistory.FieldID, planhistory.FieldTenantID:
			values[i] = new(pulid.ID)
		case planhistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case planhistory.ForeignKeys[0]: // change_history_plan_history
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case planhistory.ForeignKeys[1]: // plan_plan_history_plan
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case planhistory.ForeignKeys[2]: // user_plan_history_user
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlanHistory fields.
func (ph *PlanHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case planhistory.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ph.ID = *value
			}
		case planhistory.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				ph.TenantID = *value
			}
		case planhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ph.CreatedAt = value.Time
			}
		case planhistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field change_history_plan_history", values[i])
			} else if value.Valid {
				ph.change_history_plan_history = new(pulid.ID)
				*ph.change_history_plan_history = *value.S.(*pulid.ID)
			}
		case planhistory.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plan_plan_history_plan", values[i])
			} else if value.Valid {
				ph.plan_plan_history_plan = new(pulid.ID)
				*ph.plan_plan_history_plan = *value.S.(*pulid.ID)
			}
		case planhistory.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_plan_history_user", values[i])
			} else if value.Valid {
				ph.user_plan_history_user = new(pulid.ID)
				*ph.user_plan_history_user = *value.S.(*pulid.ID)
			}
		default:
			ph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlanHistory.
// This includes values selected through modifiers, order, etc.
func (ph *PlanHistory) Value(name string) (ent.Value, error) {
	return ph.selectValues.Get(name)
}

// QueryChangeHistory queries the "change_history" edge of the PlanHistory entity.
func (ph *PlanHistory) QueryChangeHistory() *ChangeHistoryQuery {
	return NewPlanHistoryClient(ph.config).QueryChangeHistory(ph)
}

// QueryTenant queries the "tenant" edge of the PlanHistory entity.
func (ph *PlanHistory) QueryTenant() *TenantQuery {
	return NewPlanHistoryClient(ph.config).QueryTenant(ph)
}

// QueryChangedBy queries the "changed_by" edge of the PlanHistory entity.
func (ph *PlanHistory) QueryChangedBy() *UserQuery {
	return NewPlanHistoryClient(ph.config).QueryChangedBy(ph)
}

// QueryChangedFrom queries the "changed_from" edge of the PlanHistory entity.
func (ph *PlanHistory) QueryChangedFrom() *PlanQuery {
	return NewPlanHistoryClient(ph.config).QueryChangedFrom(ph)
}

// Update returns a builder for updating this PlanHistory.
// Note that you need to call PlanHistory.Unwrap() before calling this method if this PlanHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *PlanHistory) Update() *PlanHistoryUpdateOne {
	return NewPlanHistoryClient(ph.config).UpdateOne(ph)
}

// Unwrap unwraps the PlanHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ph *PlanHistory) Unwrap() *PlanHistory {
	_tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlanHistory is not a transactional entity")
	}
	ph.config.driver = _tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *PlanHistory) String() string {
	var builder strings.Builder
	builder.WriteString("PlanHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ph.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ph.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ph.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PlanHistories is a parsable slice of PlanHistory.
type PlanHistories []*PlanHistory
