// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderLineCreate is the builder for creating a OrderLine entity.
type OrderLineCreate struct {
	config
	mutation *OrderLineMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (olc *OrderLineCreate) SetTenantID(pu pulid.ID) *OrderLineCreate {
	olc.mutation.SetTenantID(pu)
	return olc
}

// SetUnitPrice sets the "unit_price" field.
func (olc *OrderLineCreate) SetUnitPrice(f float64) *OrderLineCreate {
	olc.mutation.SetUnitPrice(f)
	return olc
}

// SetDiscountAllocationAmount sets the "discount_allocation_amount" field.
func (olc *OrderLineCreate) SetDiscountAllocationAmount(f float64) *OrderLineCreate {
	olc.mutation.SetDiscountAllocationAmount(f)
	return olc
}

// SetExternalID sets the "external_id" field.
func (olc *OrderLineCreate) SetExternalID(s string) *OrderLineCreate {
	olc.mutation.SetExternalID(s)
	return olc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (olc *OrderLineCreate) SetNillableExternalID(s *string) *OrderLineCreate {
	if s != nil {
		olc.SetExternalID(*s)
	}
	return olc
}

// SetUnits sets the "units" field.
func (olc *OrderLineCreate) SetUnits(i int) *OrderLineCreate {
	olc.mutation.SetUnits(i)
	return olc
}

// SetCreatedAt sets the "created_at" field.
func (olc *OrderLineCreate) SetCreatedAt(t time.Time) *OrderLineCreate {
	olc.mutation.SetCreatedAt(t)
	return olc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (olc *OrderLineCreate) SetNillableCreatedAt(t *time.Time) *OrderLineCreate {
	if t != nil {
		olc.SetCreatedAt(*t)
	}
	return olc
}

// SetUpdatedAt sets the "updated_at" field.
func (olc *OrderLineCreate) SetUpdatedAt(t time.Time) *OrderLineCreate {
	olc.mutation.SetUpdatedAt(t)
	return olc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (olc *OrderLineCreate) SetNillableUpdatedAt(t *time.Time) *OrderLineCreate {
	if t != nil {
		olc.SetUpdatedAt(*t)
	}
	return olc
}

// SetProductVariantID sets the "product_variant_id" field.
func (olc *OrderLineCreate) SetProductVariantID(pu pulid.ID) *OrderLineCreate {
	olc.mutation.SetProductVariantID(pu)
	return olc
}

// SetColliID sets the "colli_id" field.
func (olc *OrderLineCreate) SetColliID(pu pulid.ID) *OrderLineCreate {
	olc.mutation.SetColliID(pu)
	return olc
}

// SetID sets the "id" field.
func (olc *OrderLineCreate) SetID(pu pulid.ID) *OrderLineCreate {
	olc.mutation.SetID(pu)
	return olc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (olc *OrderLineCreate) SetNillableID(pu *pulid.ID) *OrderLineCreate {
	if pu != nil {
		olc.SetID(*pu)
	}
	return olc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (olc *OrderLineCreate) SetTenant(t *Tenant) *OrderLineCreate {
	return olc.SetTenantID(t.ID)
}

// SetProductVariant sets the "product_variant" edge to the ProductVariant entity.
func (olc *OrderLineCreate) SetProductVariant(p *ProductVariant) *OrderLineCreate {
	return olc.SetProductVariantID(p.ID)
}

// SetColli sets the "colli" edge to the Colli entity.
func (olc *OrderLineCreate) SetColli(c *Colli) *OrderLineCreate {
	return olc.SetColliID(c.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (olc *OrderLineCreate) AddReturnOrderLineIDs(ids ...pulid.ID) *OrderLineCreate {
	olc.mutation.AddReturnOrderLineIDs(ids...)
	return olc
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (olc *OrderLineCreate) AddReturnOrderLine(r ...*ReturnOrderLine) *OrderLineCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return olc.AddReturnOrderLineIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (olc *OrderLineCreate) SetCurrencyID(id pulid.ID) *OrderLineCreate {
	olc.mutation.SetCurrencyID(id)
	return olc
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (olc *OrderLineCreate) SetCurrency(c *Currency) *OrderLineCreate {
	return olc.SetCurrencyID(c.ID)
}

// Mutation returns the OrderLineMutation object of the builder.
func (olc *OrderLineCreate) Mutation() *OrderLineMutation {
	return olc.mutation
}

// Save creates the OrderLine in the database.
func (olc *OrderLineCreate) Save(ctx context.Context) (*OrderLine, error) {
	if err := olc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, olc.sqlSave, olc.mutation, olc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (olc *OrderLineCreate) SaveX(ctx context.Context) *OrderLine {
	v, err := olc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olc *OrderLineCreate) Exec(ctx context.Context) error {
	_, err := olc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olc *OrderLineCreate) ExecX(ctx context.Context) {
	if err := olc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olc *OrderLineCreate) defaults() error {
	if _, ok := olc.mutation.CreatedAt(); !ok {
		if orderline.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderline.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderline.DefaultCreatedAt()
		olc.mutation.SetCreatedAt(v)
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		if orderline.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderline.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderline.DefaultUpdatedAt()
		olc.mutation.SetUpdatedAt(v)
	}
	if _, ok := olc.mutation.ID(); !ok {
		if orderline.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized orderline.DefaultID (forgotten import ent/runtime?)")
		}
		v := orderline.DefaultID()
		olc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (olc *OrderLineCreate) check() error {
	if _, ok := olc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OrderLine.tenant_id"`)}
	}
	if _, ok := olc.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`ent: missing required field "OrderLine.unit_price"`)}
	}
	if _, ok := olc.mutation.DiscountAllocationAmount(); !ok {
		return &ValidationError{Name: "discount_allocation_amount", err: errors.New(`ent: missing required field "OrderLine.discount_allocation_amount"`)}
	}
	if _, ok := olc.mutation.Units(); !ok {
		return &ValidationError{Name: "units", err: errors.New(`ent: missing required field "OrderLine.units"`)}
	}
	if v, ok := olc.mutation.Units(); ok {
		if err := orderline.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "OrderLine.units": %w`, err)}
		}
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderLine.updated_at"`)}
	}
	if _, ok := olc.mutation.ProductVariantID(); !ok {
		return &ValidationError{Name: "product_variant_id", err: errors.New(`ent: missing required field "OrderLine.product_variant_id"`)}
	}
	if _, ok := olc.mutation.ColliID(); !ok {
		return &ValidationError{Name: "colli_id", err: errors.New(`ent: missing required field "OrderLine.colli_id"`)}
	}
	if len(olc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "OrderLine.tenant"`)}
	}
	if len(olc.mutation.ProductVariantIDs()) == 0 {
		return &ValidationError{Name: "product_variant", err: errors.New(`ent: missing required edge "OrderLine.product_variant"`)}
	}
	if len(olc.mutation.ColliIDs()) == 0 {
		return &ValidationError{Name: "colli", err: errors.New(`ent: missing required edge "OrderLine.colli"`)}
	}
	if len(olc.mutation.CurrencyIDs()) == 0 {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required edge "OrderLine.currency"`)}
	}
	return nil
}

func (olc *OrderLineCreate) sqlSave(ctx context.Context) (*OrderLine, error) {
	if err := olc.check(); err != nil {
		return nil, err
	}
	_node, _spec := olc.createSpec()
	if err := sqlgraph.CreateNode(ctx, olc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	olc.mutation.id = &_node.ID
	olc.mutation.done = true
	return _node, nil
}

func (olc *OrderLineCreate) createSpec() (*OrderLine, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderLine{config: olc.config}
		_spec = sqlgraph.NewCreateSpec(orderline.Table, sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString))
	)
	_spec.OnConflict = olc.conflict
	if id, ok := olc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := olc.mutation.UnitPrice(); ok {
		_spec.SetField(orderline.FieldUnitPrice, field.TypeFloat64, value)
		_node.UnitPrice = value
	}
	if value, ok := olc.mutation.DiscountAllocationAmount(); ok {
		_spec.SetField(orderline.FieldDiscountAllocationAmount, field.TypeFloat64, value)
		_node.DiscountAllocationAmount = value
	}
	if value, ok := olc.mutation.ExternalID(); ok {
		_spec.SetField(orderline.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := olc.mutation.Units(); ok {
		_spec.SetField(orderline.FieldUnits, field.TypeInt, value)
		_node.Units = value
	}
	if value, ok := olc.mutation.CreatedAt(); ok {
		_spec.SetField(orderline.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := olc.mutation.UpdatedAt(); ok {
		_spec.SetField(orderline.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := olc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.TenantTable,
			Columns: []string{orderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := olc.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.ProductVariantTable,
			Columns: []string{orderline.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductVariantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := olc.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderline.ColliTable,
			Columns: []string{orderline.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ColliID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := olc.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orderline.ReturnOrderLineTable,
			Columns: []string{orderline.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := olc.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.CurrencyTable,
			Columns: []string{orderline.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_line_currency = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderLine.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderLineUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (olc *OrderLineCreate) OnConflict(opts ...sql.ConflictOption) *OrderLineUpsertOne {
	olc.conflict = opts
	return &OrderLineUpsertOne{
		create: olc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (olc *OrderLineCreate) OnConflictColumns(columns ...string) *OrderLineUpsertOne {
	olc.conflict = append(olc.conflict, sql.ConflictColumns(columns...))
	return &OrderLineUpsertOne{
		create: olc,
	}
}

type (
	// OrderLineUpsertOne is the builder for "upsert"-ing
	//  one OrderLine node.
	OrderLineUpsertOne struct {
		create *OrderLineCreate
	}

	// OrderLineUpsert is the "OnConflict" setter.
	OrderLineUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *OrderLineUpsert) SetTenantID(v pulid.ID) *OrderLineUpsert {
	u.Set(orderline.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderLineUpsert) UpdateTenantID() *OrderLineUpsert {
	u.SetExcluded(orderline.FieldTenantID)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderLineUpsert) SetUnitPrice(v float64) *OrderLineUpsert {
	u.Set(orderline.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderLineUpsert) UpdateUnitPrice() *OrderLineUpsert {
	u.SetExcluded(orderline.FieldUnitPrice)
	return u
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderLineUpsert) AddUnitPrice(v float64) *OrderLineUpsert {
	u.Add(orderline.FieldUnitPrice, v)
	return u
}

// SetDiscountAllocationAmount sets the "discount_allocation_amount" field.
func (u *OrderLineUpsert) SetDiscountAllocationAmount(v float64) *OrderLineUpsert {
	u.Set(orderline.FieldDiscountAllocationAmount, v)
	return u
}

// UpdateDiscountAllocationAmount sets the "discount_allocation_amount" field to the value that was provided on create.
func (u *OrderLineUpsert) UpdateDiscountAllocationAmount() *OrderLineUpsert {
	u.SetExcluded(orderline.FieldDiscountAllocationAmount)
	return u
}

// AddDiscountAllocationAmount adds v to the "discount_allocation_amount" field.
func (u *OrderLineUpsert) AddDiscountAllocationAmount(v float64) *OrderLineUpsert {
	u.Add(orderline.FieldDiscountAllocationAmount, v)
	return u
}

// SetExternalID sets the "external_id" field.
func (u *OrderLineUpsert) SetExternalID(v string) *OrderLineUpsert {
	u.Set(orderline.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *OrderLineUpsert) UpdateExternalID() *OrderLineUpsert {
	u.SetExcluded(orderline.FieldExternalID)
	return u
}

// ClearExternalID clears the value of the "external_id" field.
func (u *OrderLineUpsert) ClearExternalID() *OrderLineUpsert {
	u.SetNull(orderline.FieldExternalID)
	return u
}

// SetUnits sets the "units" field.
func (u *OrderLineUpsert) SetUnits(v int) *OrderLineUpsert {
	u.Set(orderline.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderLineUpsert) UpdateUnits() *OrderLineUpsert {
	u.SetExcluded(orderline.FieldUnits)
	return u
}

// AddUnits adds v to the "units" field.
func (u *OrderLineUpsert) AddUnits(v int) *OrderLineUpsert {
	u.Add(orderline.FieldUnits, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderLineUpsert) SetUpdatedAt(v time.Time) *OrderLineUpsert {
	u.Set(orderline.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderLineUpsert) UpdateUpdatedAt() *OrderLineUpsert {
	u.SetExcluded(orderline.FieldUpdatedAt)
	return u
}

// SetProductVariantID sets the "product_variant_id" field.
func (u *OrderLineUpsert) SetProductVariantID(v pulid.ID) *OrderLineUpsert {
	u.Set(orderline.FieldProductVariantID, v)
	return u
}

// UpdateProductVariantID sets the "product_variant_id" field to the value that was provided on create.
func (u *OrderLineUpsert) UpdateProductVariantID() *OrderLineUpsert {
	u.SetExcluded(orderline.FieldProductVariantID)
	return u
}

// SetColliID sets the "colli_id" field.
func (u *OrderLineUpsert) SetColliID(v pulid.ID) *OrderLineUpsert {
	u.Set(orderline.FieldColliID, v)
	return u
}

// UpdateColliID sets the "colli_id" field to the value that was provided on create.
func (u *OrderLineUpsert) UpdateColliID() *OrderLineUpsert {
	u.SetExcluded(orderline.FieldColliID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderLineUpsertOne) UpdateNewValues() *OrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderline.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderline.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderLine.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderLineUpsertOne) Ignore() *OrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderLineUpsertOne) DoNothing() *OrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderLineCreate.OnConflict
// documentation for more info.
func (u *OrderLineUpsertOne) Update(set func(*OrderLineUpsert)) *OrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *OrderLineUpsertOne) SetTenantID(v pulid.ID) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderLineUpsertOne) UpdateTenantID() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateTenantID()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderLineUpsertOne) SetUnitPrice(v float64) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetUnitPrice(v)
	})
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderLineUpsertOne) AddUnitPrice(v float64) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.AddUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderLineUpsertOne) UpdateUnitPrice() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetDiscountAllocationAmount sets the "discount_allocation_amount" field.
func (u *OrderLineUpsertOne) SetDiscountAllocationAmount(v float64) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetDiscountAllocationAmount(v)
	})
}

// AddDiscountAllocationAmount adds v to the "discount_allocation_amount" field.
func (u *OrderLineUpsertOne) AddDiscountAllocationAmount(v float64) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.AddDiscountAllocationAmount(v)
	})
}

// UpdateDiscountAllocationAmount sets the "discount_allocation_amount" field to the value that was provided on create.
func (u *OrderLineUpsertOne) UpdateDiscountAllocationAmount() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateDiscountAllocationAmount()
	})
}

// SetExternalID sets the "external_id" field.
func (u *OrderLineUpsertOne) SetExternalID(v string) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *OrderLineUpsertOne) UpdateExternalID() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *OrderLineUpsertOne) ClearExternalID() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.ClearExternalID()
	})
}

// SetUnits sets the "units" field.
func (u *OrderLineUpsertOne) SetUnits(v int) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *OrderLineUpsertOne) AddUnits(v int) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderLineUpsertOne) UpdateUnits() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateUnits()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderLineUpsertOne) SetUpdatedAt(v time.Time) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderLineUpsertOne) UpdateUpdatedAt() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProductVariantID sets the "product_variant_id" field.
func (u *OrderLineUpsertOne) SetProductVariantID(v pulid.ID) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetProductVariantID(v)
	})
}

// UpdateProductVariantID sets the "product_variant_id" field to the value that was provided on create.
func (u *OrderLineUpsertOne) UpdateProductVariantID() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateProductVariantID()
	})
}

// SetColliID sets the "colli_id" field.
func (u *OrderLineUpsertOne) SetColliID(v pulid.ID) *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetColliID(v)
	})
}

// UpdateColliID sets the "colli_id" field to the value that was provided on create.
func (u *OrderLineUpsertOne) UpdateColliID() *OrderLineUpsertOne {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateColliID()
	})
}

// Exec executes the query.
func (u *OrderLineUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderLineCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderLineUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderLineUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrderLineUpsertOne.ID is not supported by MySQL driver. Use OrderLineUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderLineUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderLineCreateBulk is the builder for creating many OrderLine entities in bulk.
type OrderLineCreateBulk struct {
	config
	err      error
	builders []*OrderLineCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderLine entities in the database.
func (olcb *OrderLineCreateBulk) Save(ctx context.Context) ([]*OrderLine, error) {
	if olcb.err != nil {
		return nil, olcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(olcb.builders))
	nodes := make([]*OrderLine, len(olcb.builders))
	mutators := make([]Mutator, len(olcb.builders))
	for i := range olcb.builders {
		func(i int, root context.Context) {
			builder := olcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderLineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, olcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = olcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, olcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, olcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (olcb *OrderLineCreateBulk) SaveX(ctx context.Context) []*OrderLine {
	v, err := olcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olcb *OrderLineCreateBulk) Exec(ctx context.Context) error {
	_, err := olcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olcb *OrderLineCreateBulk) ExecX(ctx context.Context) {
	if err := olcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderLine.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderLineUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (olcb *OrderLineCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderLineUpsertBulk {
	olcb.conflict = opts
	return &OrderLineUpsertBulk{
		create: olcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (olcb *OrderLineCreateBulk) OnConflictColumns(columns ...string) *OrderLineUpsertBulk {
	olcb.conflict = append(olcb.conflict, sql.ConflictColumns(columns...))
	return &OrderLineUpsertBulk{
		create: olcb,
	}
}

// OrderLineUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderLine nodes.
type OrderLineUpsertBulk struct {
	create *OrderLineCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderLineUpsertBulk) UpdateNewValues() *OrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderline.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderline.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderLine.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderLineUpsertBulk) Ignore() *OrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderLineUpsertBulk) DoNothing() *OrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderLineCreateBulk.OnConflict
// documentation for more info.
func (u *OrderLineUpsertBulk) Update(set func(*OrderLineUpsert)) *OrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *OrderLineUpsertBulk) SetTenantID(v pulid.ID) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderLineUpsertBulk) UpdateTenantID() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateTenantID()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderLineUpsertBulk) SetUnitPrice(v float64) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetUnitPrice(v)
	})
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderLineUpsertBulk) AddUnitPrice(v float64) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.AddUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderLineUpsertBulk) UpdateUnitPrice() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetDiscountAllocationAmount sets the "discount_allocation_amount" field.
func (u *OrderLineUpsertBulk) SetDiscountAllocationAmount(v float64) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetDiscountAllocationAmount(v)
	})
}

// AddDiscountAllocationAmount adds v to the "discount_allocation_amount" field.
func (u *OrderLineUpsertBulk) AddDiscountAllocationAmount(v float64) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.AddDiscountAllocationAmount(v)
	})
}

// UpdateDiscountAllocationAmount sets the "discount_allocation_amount" field to the value that was provided on create.
func (u *OrderLineUpsertBulk) UpdateDiscountAllocationAmount() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateDiscountAllocationAmount()
	})
}

// SetExternalID sets the "external_id" field.
func (u *OrderLineUpsertBulk) SetExternalID(v string) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *OrderLineUpsertBulk) UpdateExternalID() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *OrderLineUpsertBulk) ClearExternalID() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.ClearExternalID()
	})
}

// SetUnits sets the "units" field.
func (u *OrderLineUpsertBulk) SetUnits(v int) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *OrderLineUpsertBulk) AddUnits(v int) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *OrderLineUpsertBulk) UpdateUnits() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateUnits()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderLineUpsertBulk) SetUpdatedAt(v time.Time) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderLineUpsertBulk) UpdateUpdatedAt() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProductVariantID sets the "product_variant_id" field.
func (u *OrderLineUpsertBulk) SetProductVariantID(v pulid.ID) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetProductVariantID(v)
	})
}

// UpdateProductVariantID sets the "product_variant_id" field to the value that was provided on create.
func (u *OrderLineUpsertBulk) UpdateProductVariantID() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateProductVariantID()
	})
}

// SetColliID sets the "colli_id" field.
func (u *OrderLineUpsertBulk) SetColliID(v pulid.ID) *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.SetColliID(v)
	})
}

// UpdateColliID sets the "colli_id" field to the value that was provided on create.
func (u *OrderLineUpsertBulk) UpdateColliID() *OrderLineUpsertBulk {
	return u.Update(func(s *OrderLineUpsert) {
		s.UpdateColliID()
	})
}

// Exec executes the query.
func (u *OrderLineUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderLineCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderLineCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderLineUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
