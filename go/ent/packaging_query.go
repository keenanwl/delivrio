// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingQuery is the builder for querying Packaging entities.
type PackagingQuery struct {
	config
	ctx                     *QueryContext
	order                   []packaging.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Packaging
	withTenant              *TenantQuery
	withShipmentParcel      *ShipmentParcelQuery
	withPallet              *PalletQuery
	withColli               *ColliQuery
	withReturnColli         *ReturnColliQuery
	withPackagingDF         *PackagingDFQuery
	withPackagingUSPS       *PackagingUSPSQuery
	withCarrierBrand        *CarrierBrandQuery
	withDeliveryOption      *DeliveryOptionQuery
	withFKs                 bool
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*Packaging) error
	withNamedShipmentParcel map[string]*ShipmentParcelQuery
	withNamedPallet         map[string]*PalletQuery
	withNamedColli          map[string]*ColliQuery
	withNamedReturnColli    map[string]*ReturnColliQuery
	withNamedDeliveryOption map[string]*DeliveryOptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PackagingQuery builder.
func (pq *PackagingQuery) Where(ps ...predicate.Packaging) *PackagingQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PackagingQuery) Limit(limit int) *PackagingQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PackagingQuery) Offset(offset int) *PackagingQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PackagingQuery) Unique(unique bool) *PackagingQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PackagingQuery) Order(o ...packaging.OrderOption) *PackagingQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryTenant chains the current query on the "tenant" edge.
func (pq *PackagingQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packaging.TenantTable, packaging.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentParcel chains the current query on the "shipment_parcel" edge.
func (pq *PackagingQuery) QueryShipmentParcel() *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.ShipmentParcelTable, packaging.ShipmentParcelColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPallet chains the current query on the "pallet" edge.
func (pq *PackagingQuery) QueryPallet() *PalletQuery {
	query := (&PalletClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.PalletTable, packaging.PalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryColli chains the current query on the "colli" edge.
func (pq *PackagingQuery) QueryColli() *ColliQuery {
	query := (&ColliClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.ColliTable, packaging.ColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnColli chains the current query on the "return_colli" edge.
func (pq *PackagingQuery) QueryReturnColli() *ReturnColliQuery {
	query := (&ReturnColliClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.ReturnColliTable, packaging.ReturnColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackagingDF chains the current query on the "packaging_df" edge.
func (pq *PackagingQuery) QueryPackagingDF() *PackagingDFQuery {
	query := (&PackagingDFClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(packagingdf.Table, packagingdf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, packaging.PackagingDFTable, packaging.PackagingDFColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackagingUSPS chains the current query on the "packaging_usps" edge.
func (pq *PackagingQuery) QueryPackagingUSPS() *PackagingUSPSQuery {
	query := (&PackagingUSPSClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(packagingusps.Table, packagingusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, packaging.PackagingUSPSTable, packaging.PackagingUSPSColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierBrand chains the current query on the "carrier_brand" edge.
func (pq *PackagingQuery) QueryCarrierBrand() *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packaging.CarrierBrandTable, packaging.CarrierBrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (pq *PackagingQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.DeliveryOptionTable, packaging.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Packaging entity from the query.
// Returns a *NotFoundError when no Packaging was found.
func (pq *PackagingQuery) First(ctx context.Context) (*Packaging, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{packaging.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PackagingQuery) FirstX(ctx context.Context) *Packaging {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Packaging ID from the query.
// Returns a *NotFoundError when no Packaging ID was found.
func (pq *PackagingQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{packaging.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PackagingQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Packaging entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Packaging entity is found.
// Returns a *NotFoundError when no Packaging entities are found.
func (pq *PackagingQuery) Only(ctx context.Context) (*Packaging, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{packaging.Label}
	default:
		return nil, &NotSingularError{packaging.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PackagingQuery) OnlyX(ctx context.Context) *Packaging {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Packaging ID in the query.
// Returns a *NotSingularError when more than one Packaging ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PackagingQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{packaging.Label}
	default:
		err = &NotSingularError{packaging.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PackagingQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Packagings.
func (pq *PackagingQuery) All(ctx context.Context) ([]*Packaging, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryAll)
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Packaging, *PackagingQuery]()
	return withInterceptors[[]*Packaging](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PackagingQuery) AllX(ctx context.Context) []*Packaging {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Packaging IDs.
func (pq *PackagingQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryIDs)
	if err = pq.Select(packaging.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PackagingQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PackagingQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryCount)
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PackagingQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PackagingQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PackagingQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryExist)
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PackagingQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PackagingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PackagingQuery) Clone() *PackagingQuery {
	if pq == nil {
		return nil
	}
	return &PackagingQuery{
		config:             pq.config,
		ctx:                pq.ctx.Clone(),
		order:              append([]packaging.OrderOption{}, pq.order...),
		inters:             append([]Interceptor{}, pq.inters...),
		predicates:         append([]predicate.Packaging{}, pq.predicates...),
		withTenant:         pq.withTenant.Clone(),
		withShipmentParcel: pq.withShipmentParcel.Clone(),
		withPallet:         pq.withPallet.Clone(),
		withColli:          pq.withColli.Clone(),
		withReturnColli:    pq.withReturnColli.Clone(),
		withPackagingDF:    pq.withPackagingDF.Clone(),
		withPackagingUSPS:  pq.withPackagingUSPS.Clone(),
		withCarrierBrand:   pq.withCarrierBrand.Clone(),
		withDeliveryOption: pq.withDeliveryOption.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithTenant(opts ...func(*TenantQuery)) *PackagingQuery {
	query := (&TenantClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTenant = query
	return pq
}

// WithShipmentParcel tells the query-builder to eager-load the nodes that are connected to
// the "shipment_parcel" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithShipmentParcel(opts ...func(*ShipmentParcelQuery)) *PackagingQuery {
	query := (&ShipmentParcelClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withShipmentParcel = query
	return pq
}

// WithPallet tells the query-builder to eager-load the nodes that are connected to
// the "pallet" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithPallet(opts ...func(*PalletQuery)) *PackagingQuery {
	query := (&PalletClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPallet = query
	return pq
}

// WithColli tells the query-builder to eager-load the nodes that are connected to
// the "colli" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithColli(opts ...func(*ColliQuery)) *PackagingQuery {
	query := (&ColliClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withColli = query
	return pq
}

// WithReturnColli tells the query-builder to eager-load the nodes that are connected to
// the "return_colli" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithReturnColli(opts ...func(*ReturnColliQuery)) *PackagingQuery {
	query := (&ReturnColliClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withReturnColli = query
	return pq
}

// WithPackagingDF tells the query-builder to eager-load the nodes that are connected to
// the "packaging_df" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithPackagingDF(opts ...func(*PackagingDFQuery)) *PackagingQuery {
	query := (&PackagingDFClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPackagingDF = query
	return pq
}

// WithPackagingUSPS tells the query-builder to eager-load the nodes that are connected to
// the "packaging_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithPackagingUSPS(opts ...func(*PackagingUSPSQuery)) *PackagingQuery {
	query := (&PackagingUSPSClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPackagingUSPS = query
	return pq
}

// WithCarrierBrand tells the query-builder to eager-load the nodes that are connected to
// the "carrier_brand" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithCarrierBrand(opts ...func(*CarrierBrandQuery)) *PackagingQuery {
	query := (&CarrierBrandClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCarrierBrand = query
	return pq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *PackagingQuery {
	query := (&DeliveryOptionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withDeliveryOption = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Packaging.Query().
//		GroupBy(packaging.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PackagingQuery) GroupBy(field string, fields ...string) *PackagingGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PackagingGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = packaging.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Packaging.Query().
//		Select(packaging.FieldTenantID).
//		Scan(ctx, &v)
func (pq *PackagingQuery) Select(fields ...string) *PackagingSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PackagingSelect{PackagingQuery: pq}
	sbuild.label = packaging.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PackagingSelect configured with the given aggregations.
func (pq *PackagingQuery) Aggregate(fns ...AggregateFunc) *PackagingSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PackagingQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !packaging.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	if packaging.Policy == nil {
		return errors.New("ent: uninitialized packaging.Policy (forgotten import ent/runtime?)")
	}
	if err := packaging.Policy.EvalQuery(ctx, pq); err != nil {
		return err
	}
	return nil
}

func (pq *PackagingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Packaging, error) {
	var (
		nodes       = []*Packaging{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [9]bool{
			pq.withTenant != nil,
			pq.withShipmentParcel != nil,
			pq.withPallet != nil,
			pq.withColli != nil,
			pq.withReturnColli != nil,
			pq.withPackagingDF != nil,
			pq.withPackagingUSPS != nil,
			pq.withCarrierBrand != nil,
			pq.withDeliveryOption != nil,
		}
	)
	if pq.withCarrierBrand != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, packaging.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Packaging).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Packaging{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withTenant; query != nil {
		if err := pq.loadTenant(ctx, query, nodes, nil,
			func(n *Packaging, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withShipmentParcel; query != nil {
		if err := pq.loadShipmentParcel(ctx, query, nodes,
			func(n *Packaging) { n.Edges.ShipmentParcel = []*ShipmentParcel{} },
			func(n *Packaging, e *ShipmentParcel) { n.Edges.ShipmentParcel = append(n.Edges.ShipmentParcel, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPallet; query != nil {
		if err := pq.loadPallet(ctx, query, nodes,
			func(n *Packaging) { n.Edges.Pallet = []*Pallet{} },
			func(n *Packaging, e *Pallet) { n.Edges.Pallet = append(n.Edges.Pallet, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withColli; query != nil {
		if err := pq.loadColli(ctx, query, nodes,
			func(n *Packaging) { n.Edges.Colli = []*Colli{} },
			func(n *Packaging, e *Colli) { n.Edges.Colli = append(n.Edges.Colli, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withReturnColli; query != nil {
		if err := pq.loadReturnColli(ctx, query, nodes,
			func(n *Packaging) { n.Edges.ReturnColli = []*ReturnColli{} },
			func(n *Packaging, e *ReturnColli) { n.Edges.ReturnColli = append(n.Edges.ReturnColli, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPackagingDF; query != nil {
		if err := pq.loadPackagingDF(ctx, query, nodes, nil,
			func(n *Packaging, e *PackagingDF) { n.Edges.PackagingDF = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPackagingUSPS; query != nil {
		if err := pq.loadPackagingUSPS(ctx, query, nodes, nil,
			func(n *Packaging, e *PackagingUSPS) { n.Edges.PackagingUSPS = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCarrierBrand; query != nil {
		if err := pq.loadCarrierBrand(ctx, query, nodes, nil,
			func(n *Packaging, e *CarrierBrand) { n.Edges.CarrierBrand = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withDeliveryOption; query != nil {
		if err := pq.loadDeliveryOption(ctx, query, nodes,
			func(n *Packaging) { n.Edges.DeliveryOption = []*DeliveryOption{} },
			func(n *Packaging, e *DeliveryOption) { n.Edges.DeliveryOption = append(n.Edges.DeliveryOption, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedShipmentParcel {
		if err := pq.loadShipmentParcel(ctx, query, nodes,
			func(n *Packaging) { n.appendNamedShipmentParcel(name) },
			func(n *Packaging, e *ShipmentParcel) { n.appendNamedShipmentParcel(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedPallet {
		if err := pq.loadPallet(ctx, query, nodes,
			func(n *Packaging) { n.appendNamedPallet(name) },
			func(n *Packaging, e *Pallet) { n.appendNamedPallet(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedColli {
		if err := pq.loadColli(ctx, query, nodes,
			func(n *Packaging) { n.appendNamedColli(name) },
			func(n *Packaging, e *Colli) { n.appendNamedColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedReturnColli {
		if err := pq.loadReturnColli(ctx, query, nodes,
			func(n *Packaging) { n.appendNamedReturnColli(name) },
			func(n *Packaging, e *ReturnColli) { n.appendNamedReturnColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedDeliveryOption {
		if err := pq.loadDeliveryOption(ctx, query, nodes,
			func(n *Packaging) { n.appendNamedDeliveryOption(name) },
			func(n *Packaging, e *DeliveryOption) { n.appendNamedDeliveryOption(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pq.loadTotal {
		if err := pq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PackagingQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Packaging)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PackagingQuery) loadShipmentParcel(ctx context.Context, query *ShipmentParcelQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *ShipmentParcel)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Packaging)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ShipmentParcel(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packaging.ShipmentParcelColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_parcel_packaging
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_parcel_packaging" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_parcel_packaging" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PackagingQuery) loadPallet(ctx context.Context, query *PalletQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *Pallet)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Packaging)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Pallet(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packaging.PalletColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.pallet_packaging
		if fk == nil {
			return fmt.Errorf(`foreign-key "pallet_packaging" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "pallet_packaging" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PackagingQuery) loadColli(ctx context.Context, query *ColliQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *Colli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Packaging)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Colli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packaging.ColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.colli_packaging
		if fk == nil {
			return fmt.Errorf(`foreign-key "colli_packaging" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "colli_packaging" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PackagingQuery) loadReturnColli(ctx context.Context, query *ReturnColliQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *ReturnColli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Packaging)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnColli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packaging.ReturnColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_colli_packaging
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_colli_packaging" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_colli_packaging" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PackagingQuery) loadPackagingDF(ctx context.Context, query *PackagingDFQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *PackagingDF)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Packaging)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PackagingDF(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packaging.PackagingDFColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.packaging_packaging_df
		if fk == nil {
			return fmt.Errorf(`foreign-key "packaging_packaging_df" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "packaging_packaging_df" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PackagingQuery) loadPackagingUSPS(ctx context.Context, query *PackagingUSPSQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *PackagingUSPS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Packaging)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PackagingUSPS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packaging.PackagingUSPSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.packaging_packaging_usps
		if fk == nil {
			return fmt.Errorf(`foreign-key "packaging_packaging_usps" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "packaging_packaging_usps" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PackagingQuery) loadCarrierBrand(ctx context.Context, query *CarrierBrandQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *CarrierBrand)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Packaging)
	for i := range nodes {
		if nodes[i].packaging_carrier_brand == nil {
			continue
		}
		fk := *nodes[i].packaging_carrier_brand
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierbrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "packaging_carrier_brand" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PackagingQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*Packaging, init func(*Packaging), assign func(*Packaging, *DeliveryOption)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Packaging)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DeliveryOption(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packaging.DeliveryOptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.delivery_option_default_packaging
		if fk == nil {
			return fmt.Errorf(`foreign-key "delivery_option_default_packaging" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "delivery_option_default_packaging" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *PackagingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PackagingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(packaging.Table, packaging.Columns, sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packaging.FieldID)
		for i := range fields {
			if fields[i] != packaging.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pq.withTenant != nil {
			_spec.Node.AddColumnOnce(packaging.FieldTenantID)
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PackagingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(packaging.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = packaging.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedShipmentParcel tells the query-builder to eager-load the nodes that are connected to the "shipment_parcel"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithNamedShipmentParcel(name string, opts ...func(*ShipmentParcelQuery)) *PackagingQuery {
	query := (&ShipmentParcelClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedShipmentParcel == nil {
		pq.withNamedShipmentParcel = make(map[string]*ShipmentParcelQuery)
	}
	pq.withNamedShipmentParcel[name] = query
	return pq
}

// WithNamedPallet tells the query-builder to eager-load the nodes that are connected to the "pallet"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithNamedPallet(name string, opts ...func(*PalletQuery)) *PackagingQuery {
	query := (&PalletClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedPallet == nil {
		pq.withNamedPallet = make(map[string]*PalletQuery)
	}
	pq.withNamedPallet[name] = query
	return pq
}

// WithNamedColli tells the query-builder to eager-load the nodes that are connected to the "colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithNamedColli(name string, opts ...func(*ColliQuery)) *PackagingQuery {
	query := (&ColliClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedColli == nil {
		pq.withNamedColli = make(map[string]*ColliQuery)
	}
	pq.withNamedColli[name] = query
	return pq
}

// WithNamedReturnColli tells the query-builder to eager-load the nodes that are connected to the "return_colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithNamedReturnColli(name string, opts ...func(*ReturnColliQuery)) *PackagingQuery {
	query := (&ReturnColliClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedReturnColli == nil {
		pq.withNamedReturnColli = make(map[string]*ReturnColliQuery)
	}
	pq.withNamedReturnColli[name] = query
	return pq
}

// WithNamedDeliveryOption tells the query-builder to eager-load the nodes that are connected to the "delivery_option"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *PackagingQuery) WithNamedDeliveryOption(name string, opts ...func(*DeliveryOptionQuery)) *PackagingQuery {
	query := (&DeliveryOptionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedDeliveryOption == nil {
		pq.withNamedDeliveryOption = make(map[string]*DeliveryOptionQuery)
	}
	pq.withNamedDeliveryOption[name] = query
	return pq
}

// PackagingGroupBy is the group-by builder for Packaging entities.
type PackagingGroupBy struct {
	selector
	build *PackagingQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PackagingGroupBy) Aggregate(fns ...AggregateFunc) *PackagingGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PackagingGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, ent.OpQueryGroupBy)
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackagingQuery, *PackagingGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PackagingGroupBy) sqlScan(ctx context.Context, root *PackagingQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PackagingSelect is the builder for selecting fields of Packaging entities.
type PackagingSelect struct {
	*PackagingQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PackagingSelect) Aggregate(fns ...AggregateFunc) *PackagingSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PackagingSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, ent.OpQuerySelect)
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackagingQuery, *PackagingSelect](ctx, ps.PackagingQuery, ps, ps.inters, v)
}

func (ps *PackagingSelect) sqlScan(ctx context.Context, root *PackagingQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
