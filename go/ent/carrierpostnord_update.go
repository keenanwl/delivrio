// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierPostNordUpdate is the builder for updating CarrierPostNord entities.
type CarrierPostNordUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierPostNordMutation
}

// Where appends a list predicates to the CarrierPostNordUpdate builder.
func (cpnu *CarrierPostNordUpdate) Where(ps ...predicate.CarrierPostNord) *CarrierPostNordUpdate {
	cpnu.mutation.Where(ps...)
	return cpnu
}

// SetTenantID sets the "tenant_id" field.
func (cpnu *CarrierPostNordUpdate) SetTenantID(pu pulid.ID) *CarrierPostNordUpdate {
	cpnu.mutation.SetTenantID(pu)
	return cpnu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cpnu *CarrierPostNordUpdate) SetNillableTenantID(pu *pulid.ID) *CarrierPostNordUpdate {
	if pu != nil {
		cpnu.SetTenantID(*pu)
	}
	return cpnu
}

// SetCustomerNumber sets the "customer_number" field.
func (cpnu *CarrierPostNordUpdate) SetCustomerNumber(s string) *CarrierPostNordUpdate {
	cpnu.mutation.SetCustomerNumber(s)
	return cpnu
}

// SetNillableCustomerNumber sets the "customer_number" field if the given value is not nil.
func (cpnu *CarrierPostNordUpdate) SetNillableCustomerNumber(s *string) *CarrierPostNordUpdate {
	if s != nil {
		cpnu.SetCustomerNumber(*s)
	}
	return cpnu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cpnu *CarrierPostNordUpdate) SetTenant(t *Tenant) *CarrierPostNordUpdate {
	return cpnu.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cpnu *CarrierPostNordUpdate) SetCarrierID(id pulid.ID) *CarrierPostNordUpdate {
	cpnu.mutation.SetCarrierID(id)
	return cpnu
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cpnu *CarrierPostNordUpdate) SetCarrier(c *Carrier) *CarrierPostNordUpdate {
	return cpnu.SetCarrierID(c.ID)
}

// Mutation returns the CarrierPostNordMutation object of the builder.
func (cpnu *CarrierPostNordUpdate) Mutation() *CarrierPostNordMutation {
	return cpnu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cpnu *CarrierPostNordUpdate) ClearTenant() *CarrierPostNordUpdate {
	cpnu.mutation.ClearTenant()
	return cpnu
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cpnu *CarrierPostNordUpdate) ClearCarrier() *CarrierPostNordUpdate {
	cpnu.mutation.ClearCarrier()
	return cpnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpnu *CarrierPostNordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpnu.sqlSave, cpnu.mutation, cpnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpnu *CarrierPostNordUpdate) SaveX(ctx context.Context) int {
	affected, err := cpnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpnu *CarrierPostNordUpdate) Exec(ctx context.Context) error {
	_, err := cpnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpnu *CarrierPostNordUpdate) ExecX(ctx context.Context) {
	if err := cpnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpnu *CarrierPostNordUpdate) check() error {
	if cpnu.mutation.TenantCleared() && len(cpnu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierPostNord.tenant"`)
	}
	if cpnu.mutation.CarrierCleared() && len(cpnu.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierPostNord.carrier"`)
	}
	return nil
}

func (cpnu *CarrierPostNordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierpostnord.Table, carrierpostnord.Columns, sqlgraph.NewFieldSpec(carrierpostnord.FieldID, field.TypeString))
	if ps := cpnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpnu.mutation.CustomerNumber(); ok {
		_spec.SetField(carrierpostnord.FieldCustomerNumber, field.TypeString, value)
	}
	if cpnu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierpostnord.TenantTable,
			Columns: []string{carrierpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpnu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierpostnord.TenantTable,
			Columns: []string{carrierpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpnu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierpostnord.CarrierTable,
			Columns: []string{carrierpostnord.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpnu.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierpostnord.CarrierTable,
			Columns: []string{carrierpostnord.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierpostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpnu.mutation.done = true
	return n, nil
}

// CarrierPostNordUpdateOne is the builder for updating a single CarrierPostNord entity.
type CarrierPostNordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierPostNordMutation
}

// SetTenantID sets the "tenant_id" field.
func (cpnuo *CarrierPostNordUpdateOne) SetTenantID(pu pulid.ID) *CarrierPostNordUpdateOne {
	cpnuo.mutation.SetTenantID(pu)
	return cpnuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cpnuo *CarrierPostNordUpdateOne) SetNillableTenantID(pu *pulid.ID) *CarrierPostNordUpdateOne {
	if pu != nil {
		cpnuo.SetTenantID(*pu)
	}
	return cpnuo
}

// SetCustomerNumber sets the "customer_number" field.
func (cpnuo *CarrierPostNordUpdateOne) SetCustomerNumber(s string) *CarrierPostNordUpdateOne {
	cpnuo.mutation.SetCustomerNumber(s)
	return cpnuo
}

// SetNillableCustomerNumber sets the "customer_number" field if the given value is not nil.
func (cpnuo *CarrierPostNordUpdateOne) SetNillableCustomerNumber(s *string) *CarrierPostNordUpdateOne {
	if s != nil {
		cpnuo.SetCustomerNumber(*s)
	}
	return cpnuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cpnuo *CarrierPostNordUpdateOne) SetTenant(t *Tenant) *CarrierPostNordUpdateOne {
	return cpnuo.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cpnuo *CarrierPostNordUpdateOne) SetCarrierID(id pulid.ID) *CarrierPostNordUpdateOne {
	cpnuo.mutation.SetCarrierID(id)
	return cpnuo
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cpnuo *CarrierPostNordUpdateOne) SetCarrier(c *Carrier) *CarrierPostNordUpdateOne {
	return cpnuo.SetCarrierID(c.ID)
}

// Mutation returns the CarrierPostNordMutation object of the builder.
func (cpnuo *CarrierPostNordUpdateOne) Mutation() *CarrierPostNordMutation {
	return cpnuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cpnuo *CarrierPostNordUpdateOne) ClearTenant() *CarrierPostNordUpdateOne {
	cpnuo.mutation.ClearTenant()
	return cpnuo
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cpnuo *CarrierPostNordUpdateOne) ClearCarrier() *CarrierPostNordUpdateOne {
	cpnuo.mutation.ClearCarrier()
	return cpnuo
}

// Where appends a list predicates to the CarrierPostNordUpdate builder.
func (cpnuo *CarrierPostNordUpdateOne) Where(ps ...predicate.CarrierPostNord) *CarrierPostNordUpdateOne {
	cpnuo.mutation.Where(ps...)
	return cpnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpnuo *CarrierPostNordUpdateOne) Select(field string, fields ...string) *CarrierPostNordUpdateOne {
	cpnuo.fields = append([]string{field}, fields...)
	return cpnuo
}

// Save executes the query and returns the updated CarrierPostNord entity.
func (cpnuo *CarrierPostNordUpdateOne) Save(ctx context.Context) (*CarrierPostNord, error) {
	return withHooks(ctx, cpnuo.sqlSave, cpnuo.mutation, cpnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpnuo *CarrierPostNordUpdateOne) SaveX(ctx context.Context) *CarrierPostNord {
	node, err := cpnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpnuo *CarrierPostNordUpdateOne) Exec(ctx context.Context) error {
	_, err := cpnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpnuo *CarrierPostNordUpdateOne) ExecX(ctx context.Context) {
	if err := cpnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpnuo *CarrierPostNordUpdateOne) check() error {
	if cpnuo.mutation.TenantCleared() && len(cpnuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierPostNord.tenant"`)
	}
	if cpnuo.mutation.CarrierCleared() && len(cpnuo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierPostNord.carrier"`)
	}
	return nil
}

func (cpnuo *CarrierPostNordUpdateOne) sqlSave(ctx context.Context) (_node *CarrierPostNord, err error) {
	if err := cpnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierpostnord.Table, carrierpostnord.Columns, sqlgraph.NewFieldSpec(carrierpostnord.FieldID, field.TypeString))
	id, ok := cpnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierPostNord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierpostnord.FieldID)
		for _, f := range fields {
			if !carrierpostnord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierpostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpnuo.mutation.CustomerNumber(); ok {
		_spec.SetField(carrierpostnord.FieldCustomerNumber, field.TypeString, value)
	}
	if cpnuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierpostnord.TenantTable,
			Columns: []string{carrierpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpnuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierpostnord.TenantTable,
			Columns: []string{carrierpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpnuo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierpostnord.CarrierTable,
			Columns: []string{carrierpostnord.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpnuo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierpostnord.CarrierTable,
			Columns: []string{carrierpostnord.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierPostNord{config: cpnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierpostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpnuo.mutation.done = true
	return _node, nil
}
