// Code generated by ent, DO NOT EDIT.

package addressglobal

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldID, id))
}

// UniquenessID applies equality check predicate on the "uniqueness_id" field. It's identical to UniquenessIDEQ.
func UniquenessID(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldUniquenessID, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldCompany, v))
}

// AddressOne applies equality check predicate on the "address_one" field. It's identical to AddressOneEQ.
func AddressOne(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldAddressOne, v))
}

// AddressTwo applies equality check predicate on the "address_two" field. It's identical to AddressTwoEQ.
func AddressTwo(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldAddressTwo, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldState, v))
}

// Zip applies equality check predicate on the "zip" field. It's identical to ZipEQ.
func Zip(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldZip, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldLongitude, v))
}

// UniquenessIDEQ applies the EQ predicate on the "uniqueness_id" field.
func UniquenessIDEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldUniquenessID, v))
}

// UniquenessIDNEQ applies the NEQ predicate on the "uniqueness_id" field.
func UniquenessIDNEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldUniquenessID, v))
}

// UniquenessIDIn applies the In predicate on the "uniqueness_id" field.
func UniquenessIDIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldUniquenessID, vs...))
}

// UniquenessIDNotIn applies the NotIn predicate on the "uniqueness_id" field.
func UniquenessIDNotIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldUniquenessID, vs...))
}

// UniquenessIDGT applies the GT predicate on the "uniqueness_id" field.
func UniquenessIDGT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldUniquenessID, v))
}

// UniquenessIDGTE applies the GTE predicate on the "uniqueness_id" field.
func UniquenessIDGTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldUniquenessID, v))
}

// UniquenessIDLT applies the LT predicate on the "uniqueness_id" field.
func UniquenessIDLT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldUniquenessID, v))
}

// UniquenessIDLTE applies the LTE predicate on the "uniqueness_id" field.
func UniquenessIDLTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldUniquenessID, v))
}

// UniquenessIDContains applies the Contains predicate on the "uniqueness_id" field.
func UniquenessIDContains(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContains(FieldUniquenessID, v))
}

// UniquenessIDHasPrefix applies the HasPrefix predicate on the "uniqueness_id" field.
func UniquenessIDHasPrefix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasPrefix(FieldUniquenessID, v))
}

// UniquenessIDHasSuffix applies the HasSuffix predicate on the "uniqueness_id" field.
func UniquenessIDHasSuffix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasSuffix(FieldUniquenessID, v))
}

// UniquenessIDIsNil applies the IsNil predicate on the "uniqueness_id" field.
func UniquenessIDIsNil() predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIsNull(FieldUniquenessID))
}

// UniquenessIDNotNil applies the NotNil predicate on the "uniqueness_id" field.
func UniquenessIDNotNil() predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotNull(FieldUniquenessID))
}

// UniquenessIDEqualFold applies the EqualFold predicate on the "uniqueness_id" field.
func UniquenessIDEqualFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEqualFold(FieldUniquenessID, v))
}

// UniquenessIDContainsFold applies the ContainsFold predicate on the "uniqueness_id" field.
func UniquenessIDContainsFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContainsFold(FieldUniquenessID, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyIsNil applies the IsNil predicate on the "company" field.
func CompanyIsNil() predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIsNull(FieldCompany))
}

// CompanyNotNil applies the NotNil predicate on the "company" field.
func CompanyNotNil() predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotNull(FieldCompany))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContainsFold(FieldCompany, v))
}

// AddressOneEQ applies the EQ predicate on the "address_one" field.
func AddressOneEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldAddressOne, v))
}

// AddressOneNEQ applies the NEQ predicate on the "address_one" field.
func AddressOneNEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldAddressOne, v))
}

// AddressOneIn applies the In predicate on the "address_one" field.
func AddressOneIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldAddressOne, vs...))
}

// AddressOneNotIn applies the NotIn predicate on the "address_one" field.
func AddressOneNotIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldAddressOne, vs...))
}

// AddressOneGT applies the GT predicate on the "address_one" field.
func AddressOneGT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldAddressOne, v))
}

// AddressOneGTE applies the GTE predicate on the "address_one" field.
func AddressOneGTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldAddressOne, v))
}

// AddressOneLT applies the LT predicate on the "address_one" field.
func AddressOneLT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldAddressOne, v))
}

// AddressOneLTE applies the LTE predicate on the "address_one" field.
func AddressOneLTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldAddressOne, v))
}

// AddressOneContains applies the Contains predicate on the "address_one" field.
func AddressOneContains(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContains(FieldAddressOne, v))
}

// AddressOneHasPrefix applies the HasPrefix predicate on the "address_one" field.
func AddressOneHasPrefix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasPrefix(FieldAddressOne, v))
}

// AddressOneHasSuffix applies the HasSuffix predicate on the "address_one" field.
func AddressOneHasSuffix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasSuffix(FieldAddressOne, v))
}

// AddressOneEqualFold applies the EqualFold predicate on the "address_one" field.
func AddressOneEqualFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEqualFold(FieldAddressOne, v))
}

// AddressOneContainsFold applies the ContainsFold predicate on the "address_one" field.
func AddressOneContainsFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContainsFold(FieldAddressOne, v))
}

// AddressTwoEQ applies the EQ predicate on the "address_two" field.
func AddressTwoEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldAddressTwo, v))
}

// AddressTwoNEQ applies the NEQ predicate on the "address_two" field.
func AddressTwoNEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldAddressTwo, v))
}

// AddressTwoIn applies the In predicate on the "address_two" field.
func AddressTwoIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldAddressTwo, vs...))
}

// AddressTwoNotIn applies the NotIn predicate on the "address_two" field.
func AddressTwoNotIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldAddressTwo, vs...))
}

// AddressTwoGT applies the GT predicate on the "address_two" field.
func AddressTwoGT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldAddressTwo, v))
}

// AddressTwoGTE applies the GTE predicate on the "address_two" field.
func AddressTwoGTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldAddressTwo, v))
}

// AddressTwoLT applies the LT predicate on the "address_two" field.
func AddressTwoLT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldAddressTwo, v))
}

// AddressTwoLTE applies the LTE predicate on the "address_two" field.
func AddressTwoLTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldAddressTwo, v))
}

// AddressTwoContains applies the Contains predicate on the "address_two" field.
func AddressTwoContains(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContains(FieldAddressTwo, v))
}

// AddressTwoHasPrefix applies the HasPrefix predicate on the "address_two" field.
func AddressTwoHasPrefix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasPrefix(FieldAddressTwo, v))
}

// AddressTwoHasSuffix applies the HasSuffix predicate on the "address_two" field.
func AddressTwoHasSuffix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasSuffix(FieldAddressTwo, v))
}

// AddressTwoIsNil applies the IsNil predicate on the "address_two" field.
func AddressTwoIsNil() predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIsNull(FieldAddressTwo))
}

// AddressTwoNotNil applies the NotNil predicate on the "address_two" field.
func AddressTwoNotNil() predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotNull(FieldAddressTwo))
}

// AddressTwoEqualFold applies the EqualFold predicate on the "address_two" field.
func AddressTwoEqualFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEqualFold(FieldAddressTwo, v))
}

// AddressTwoContainsFold applies the ContainsFold predicate on the "address_two" field.
func AddressTwoContainsFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContainsFold(FieldAddressTwo, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContainsFold(FieldState, v))
}

// ZipEQ applies the EQ predicate on the "zip" field.
func ZipEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldZip, v))
}

// ZipNEQ applies the NEQ predicate on the "zip" field.
func ZipNEQ(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldZip, v))
}

// ZipIn applies the In predicate on the "zip" field.
func ZipIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldZip, vs...))
}

// ZipNotIn applies the NotIn predicate on the "zip" field.
func ZipNotIn(vs ...string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldZip, vs...))
}

// ZipGT applies the GT predicate on the "zip" field.
func ZipGT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldZip, v))
}

// ZipGTE applies the GTE predicate on the "zip" field.
func ZipGTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldZip, v))
}

// ZipLT applies the LT predicate on the "zip" field.
func ZipLT(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldZip, v))
}

// ZipLTE applies the LTE predicate on the "zip" field.
func ZipLTE(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldZip, v))
}

// ZipContains applies the Contains predicate on the "zip" field.
func ZipContains(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContains(FieldZip, v))
}

// ZipHasPrefix applies the HasPrefix predicate on the "zip" field.
func ZipHasPrefix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasPrefix(FieldZip, v))
}

// ZipHasSuffix applies the HasSuffix predicate on the "zip" field.
func ZipHasSuffix(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldHasSuffix(FieldZip, v))
}

// ZipEqualFold applies the EqualFold predicate on the "zip" field.
func ZipEqualFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEqualFold(FieldZip, v))
}

// ZipContainsFold applies the ContainsFold predicate on the "zip" field.
func ZipContainsFold(v string) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldContainsFold(FieldZip, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldLatitude, v))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.FieldLTE(FieldLongitude, v))
}

// HasParcelShopPostNordDelivery applies the HasEdge predicate on the "parcel_shop_post_nord_delivery" edge.
func HasParcelShopPostNordDelivery() predicate.AddressGlobal {
	return predicate.AddressGlobal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopPostNordDeliveryTable, ParcelShopPostNordDeliveryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopPostNordDeliveryWith applies the HasEdge predicate on the "parcel_shop_post_nord_delivery" edge with a given conditions (other predicates).
func HasParcelShopPostNordDeliveryWith(preds ...predicate.ParcelShopPostNord) predicate.AddressGlobal {
	return predicate.AddressGlobal(func(s *sql.Selector) {
		step := newParcelShopPostNordDeliveryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcelShopBringDelivery applies the HasEdge predicate on the "parcel_shop_bring_delivery" edge.
func HasParcelShopBringDelivery() predicate.AddressGlobal {
	return predicate.AddressGlobal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopBringDeliveryTable, ParcelShopBringDeliveryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopBringDeliveryWith applies the HasEdge predicate on the "parcel_shop_bring_delivery" edge with a given conditions (other predicates).
func HasParcelShopBringDeliveryWith(preds ...predicate.ParcelShopBring) predicate.AddressGlobal {
	return predicate.AddressGlobal(func(s *sql.Selector) {
		step := newParcelShopBringDeliveryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcelShop applies the HasEdge predicate on the "parcel_shop" edge.
func HasParcelShop() predicate.AddressGlobal {
	return predicate.AddressGlobal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopWith applies the HasEdge predicate on the "parcel_shop" edge with a given conditions (other predicates).
func HasParcelShopWith(preds ...predicate.ParcelShop) predicate.AddressGlobal {
	return predicate.AddressGlobal(func(s *sql.Selector) {
		step := newParcelShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.AddressGlobal {
	return predicate.AddressGlobal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.AddressGlobal {
	return predicate.AddressGlobal(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AddressGlobal) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AddressGlobal) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AddressGlobal) predicate.AddressGlobal {
	return predicate.AddressGlobal(sql.NotPredicates(p))
}
