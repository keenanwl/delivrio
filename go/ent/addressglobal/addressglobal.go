// Code generated by ent, DO NOT EDIT.

package addressglobal

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the addressglobal type in the database.
	Label = "address_global"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUniquenessID holds the string denoting the uniqueness_id field in the database.
	FieldUniquenessID = "uniqueness_id"
	// FieldCompany holds the string denoting the company field in the database.
	FieldCompany = "company"
	// FieldAddressOne holds the string denoting the address_one field in the database.
	FieldAddressOne = "address_one"
	// FieldAddressTwo holds the string denoting the address_two field in the database.
	FieldAddressTwo = "address_two"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldZip holds the string denoting the zip field in the database.
	FieldZip = "zip"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// EdgeParcelShopPostNordDelivery holds the string denoting the parcel_shop_post_nord_delivery edge name in mutations.
	EdgeParcelShopPostNordDelivery = "parcel_shop_post_nord_delivery"
	// EdgeParcelShopBringDelivery holds the string denoting the parcel_shop_bring_delivery edge name in mutations.
	EdgeParcelShopBringDelivery = "parcel_shop_bring_delivery"
	// EdgeParcelShop holds the string denoting the parcel_shop edge name in mutations.
	EdgeParcelShop = "parcel_shop"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// Table holds the table name of the addressglobal in the database.
	Table = "address_globals"
	// ParcelShopPostNordDeliveryTable is the table that holds the parcel_shop_post_nord_delivery relation/edge.
	ParcelShopPostNordDeliveryTable = "address_globals"
	// ParcelShopPostNordDeliveryInverseTable is the table name for the ParcelShopPostNord entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshoppostnord" package.
	ParcelShopPostNordDeliveryInverseTable = "parcel_shop_post_nords"
	// ParcelShopPostNordDeliveryColumn is the table column denoting the parcel_shop_post_nord_delivery relation/edge.
	ParcelShopPostNordDeliveryColumn = "parcel_shop_post_nord_address_delivery"
	// ParcelShopBringDeliveryTable is the table that holds the parcel_shop_bring_delivery relation/edge.
	ParcelShopBringDeliveryTable = "address_globals"
	// ParcelShopBringDeliveryInverseTable is the table name for the ParcelShopBring entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshopbring" package.
	ParcelShopBringDeliveryInverseTable = "parcel_shop_brings"
	// ParcelShopBringDeliveryColumn is the table column denoting the parcel_shop_bring_delivery relation/edge.
	ParcelShopBringDeliveryColumn = "parcel_shop_bring_address_delivery"
	// ParcelShopTable is the table that holds the parcel_shop relation/edge.
	ParcelShopTable = "address_globals"
	// ParcelShopInverseTable is the table name for the ParcelShop entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshop" package.
	ParcelShopInverseTable = "parcel_shops"
	// ParcelShopColumn is the table column denoting the parcel_shop relation/edge.
	ParcelShopColumn = "parcel_shop_address"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "address_globals"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "address_global_country"
)

// Columns holds all SQL columns for addressglobal fields.
var Columns = []string{
	FieldID,
	FieldUniquenessID,
	FieldCompany,
	FieldAddressOne,
	FieldAddressTwo,
	FieldCity,
	FieldState,
	FieldZip,
	FieldLatitude,
	FieldLongitude,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "address_globals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"address_global_country",
	"parcel_shop_address",
	"parcel_shop_bring_address_delivery",
	"parcel_shop_post_nord_address_delivery",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultLatitude holds the default value on creation for the "latitude" field.
	DefaultLatitude float64
	// DefaultLongitude holds the default value on creation for the "longitude" field.
	DefaultLongitude float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the AddressGlobal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUniquenessID orders the results by the uniqueness_id field.
func ByUniquenessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniquenessID, opts...).ToFunc()
}

// ByCompany orders the results by the company field.
func ByCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompany, opts...).ToFunc()
}

// ByAddressOne orders the results by the address_one field.
func ByAddressOne(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressOne, opts...).ToFunc()
}

// ByAddressTwo orders the results by the address_two field.
func ByAddressTwo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressTwo, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByZip orders the results by the zip field.
func ByZip(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZip, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByParcelShopPostNordDeliveryField orders the results by parcel_shop_post_nord_delivery field.
func ByParcelShopPostNordDeliveryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopPostNordDeliveryStep(), sql.OrderByField(field, opts...))
	}
}

// ByParcelShopBringDeliveryField orders the results by parcel_shop_bring_delivery field.
func ByParcelShopBringDeliveryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopBringDeliveryStep(), sql.OrderByField(field, opts...))
	}
}

// ByParcelShopField orders the results by parcel_shop field.
func ByParcelShopField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopStep(), sql.OrderByField(field, opts...))
	}
}

// ByCountryField orders the results by country field.
func ByCountryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryStep(), sql.OrderByField(field, opts...))
	}
}
func newParcelShopPostNordDeliveryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopPostNordDeliveryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopPostNordDeliveryTable, ParcelShopPostNordDeliveryColumn),
	)
}
func newParcelShopBringDeliveryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopBringDeliveryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopBringDeliveryTable, ParcelShopBringDeliveryColumn),
	)
}
func newParcelShopStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
	)
}
func newCountryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CountryTable, CountryColumn),
	)
}
