// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SignupOptionsCreate is the builder for creating a SignupOptions entity.
type SignupOptionsCreate struct {
	config
	mutation *SignupOptionsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBetterDeliveryOptions sets the "better_delivery_options" field.
func (soc *SignupOptionsCreate) SetBetterDeliveryOptions(b bool) *SignupOptionsCreate {
	soc.mutation.SetBetterDeliveryOptions(b)
	return soc
}

// SetImprovePickPack sets the "improve_pick_pack" field.
func (soc *SignupOptionsCreate) SetImprovePickPack(b bool) *SignupOptionsCreate {
	soc.mutation.SetImprovePickPack(b)
	return soc
}

// SetShippingLabel sets the "shipping_label" field.
func (soc *SignupOptionsCreate) SetShippingLabel(b bool) *SignupOptionsCreate {
	soc.mutation.SetShippingLabel(b)
	return soc
}

// SetCustomDocs sets the "custom_docs" field.
func (soc *SignupOptionsCreate) SetCustomDocs(b bool) *SignupOptionsCreate {
	soc.mutation.SetCustomDocs(b)
	return soc
}

// SetReducedCosts sets the "reduced_costs" field.
func (soc *SignupOptionsCreate) SetReducedCosts(b bool) *SignupOptionsCreate {
	soc.mutation.SetReducedCosts(b)
	return soc
}

// SetEasyReturns sets the "easy_returns" field.
func (soc *SignupOptionsCreate) SetEasyReturns(b bool) *SignupOptionsCreate {
	soc.mutation.SetEasyReturns(b)
	return soc
}

// SetClickCollect sets the "click_collect" field.
func (soc *SignupOptionsCreate) SetClickCollect(b bool) *SignupOptionsCreate {
	soc.mutation.SetClickCollect(b)
	return soc
}

// SetNumShipments sets the "num_shipments" field.
func (soc *SignupOptionsCreate) SetNumShipments(i int) *SignupOptionsCreate {
	soc.mutation.SetNumShipments(i)
	return soc
}

// SetID sets the "id" field.
func (soc *SignupOptionsCreate) SetID(pu pulid.ID) *SignupOptionsCreate {
	soc.mutation.SetID(pu)
	return soc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (soc *SignupOptionsCreate) SetNillableID(pu *pulid.ID) *SignupOptionsCreate {
	if pu != nil {
		soc.SetID(*pu)
	}
	return soc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (soc *SignupOptionsCreate) SetUsersID(id pulid.ID) *SignupOptionsCreate {
	soc.mutation.SetUsersID(id)
	return soc
}

// SetUsers sets the "users" edge to the User entity.
func (soc *SignupOptionsCreate) SetUsers(u *User) *SignupOptionsCreate {
	return soc.SetUsersID(u.ID)
}

// Mutation returns the SignupOptionsMutation object of the builder.
func (soc *SignupOptionsCreate) Mutation() *SignupOptionsMutation {
	return soc.mutation
}

// Save creates the SignupOptions in the database.
func (soc *SignupOptionsCreate) Save(ctx context.Context) (*SignupOptions, error) {
	if err := soc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, soc.sqlSave, soc.mutation, soc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (soc *SignupOptionsCreate) SaveX(ctx context.Context) *SignupOptions {
	v, err := soc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (soc *SignupOptionsCreate) Exec(ctx context.Context) error {
	_, err := soc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (soc *SignupOptionsCreate) ExecX(ctx context.Context) {
	if err := soc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (soc *SignupOptionsCreate) defaults() error {
	if _, ok := soc.mutation.ID(); !ok {
		if signupoptions.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized signupoptions.DefaultID (forgotten import ent/runtime?)")
		}
		v := signupoptions.DefaultID()
		soc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (soc *SignupOptionsCreate) check() error {
	if _, ok := soc.mutation.BetterDeliveryOptions(); !ok {
		return &ValidationError{Name: "better_delivery_options", err: errors.New(`ent: missing required field "SignupOptions.better_delivery_options"`)}
	}
	if _, ok := soc.mutation.ImprovePickPack(); !ok {
		return &ValidationError{Name: "improve_pick_pack", err: errors.New(`ent: missing required field "SignupOptions.improve_pick_pack"`)}
	}
	if _, ok := soc.mutation.ShippingLabel(); !ok {
		return &ValidationError{Name: "shipping_label", err: errors.New(`ent: missing required field "SignupOptions.shipping_label"`)}
	}
	if _, ok := soc.mutation.CustomDocs(); !ok {
		return &ValidationError{Name: "custom_docs", err: errors.New(`ent: missing required field "SignupOptions.custom_docs"`)}
	}
	if _, ok := soc.mutation.ReducedCosts(); !ok {
		return &ValidationError{Name: "reduced_costs", err: errors.New(`ent: missing required field "SignupOptions.reduced_costs"`)}
	}
	if _, ok := soc.mutation.EasyReturns(); !ok {
		return &ValidationError{Name: "easy_returns", err: errors.New(`ent: missing required field "SignupOptions.easy_returns"`)}
	}
	if _, ok := soc.mutation.ClickCollect(); !ok {
		return &ValidationError{Name: "click_collect", err: errors.New(`ent: missing required field "SignupOptions.click_collect"`)}
	}
	if _, ok := soc.mutation.NumShipments(); !ok {
		return &ValidationError{Name: "num_shipments", err: errors.New(`ent: missing required field "SignupOptions.num_shipments"`)}
	}
	if len(soc.mutation.UsersIDs()) == 0 {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "SignupOptions.users"`)}
	}
	return nil
}

func (soc *SignupOptionsCreate) sqlSave(ctx context.Context) (*SignupOptions, error) {
	if err := soc.check(); err != nil {
		return nil, err
	}
	_node, _spec := soc.createSpec()
	if err := sqlgraph.CreateNode(ctx, soc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	soc.mutation.id = &_node.ID
	soc.mutation.done = true
	return _node, nil
}

func (soc *SignupOptionsCreate) createSpec() (*SignupOptions, *sqlgraph.CreateSpec) {
	var (
		_node = &SignupOptions{config: soc.config}
		_spec = sqlgraph.NewCreateSpec(signupoptions.Table, sqlgraph.NewFieldSpec(signupoptions.FieldID, field.TypeString))
	)
	_spec.OnConflict = soc.conflict
	if id, ok := soc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := soc.mutation.BetterDeliveryOptions(); ok {
		_spec.SetField(signupoptions.FieldBetterDeliveryOptions, field.TypeBool, value)
		_node.BetterDeliveryOptions = value
	}
	if value, ok := soc.mutation.ImprovePickPack(); ok {
		_spec.SetField(signupoptions.FieldImprovePickPack, field.TypeBool, value)
		_node.ImprovePickPack = value
	}
	if value, ok := soc.mutation.ShippingLabel(); ok {
		_spec.SetField(signupoptions.FieldShippingLabel, field.TypeBool, value)
		_node.ShippingLabel = value
	}
	if value, ok := soc.mutation.CustomDocs(); ok {
		_spec.SetField(signupoptions.FieldCustomDocs, field.TypeBool, value)
		_node.CustomDocs = value
	}
	if value, ok := soc.mutation.ReducedCosts(); ok {
		_spec.SetField(signupoptions.FieldReducedCosts, field.TypeBool, value)
		_node.ReducedCosts = value
	}
	if value, ok := soc.mutation.EasyReturns(); ok {
		_spec.SetField(signupoptions.FieldEasyReturns, field.TypeBool, value)
		_node.EasyReturns = value
	}
	if value, ok := soc.mutation.ClickCollect(); ok {
		_spec.SetField(signupoptions.FieldClickCollect, field.TypeBool, value)
		_node.ClickCollect = value
	}
	if value, ok := soc.mutation.NumShipments(); ok {
		_spec.SetField(signupoptions.FieldNumShipments, field.TypeInt, value)
		_node.NumShipments = value
	}
	if nodes := soc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signupoptions.UsersTable,
			Columns: []string{signupoptions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_signup_options = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SignupOptions.Create().
//		SetBetterDeliveryOptions(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SignupOptionsUpsert) {
//			SetBetterDeliveryOptions(v+v).
//		}).
//		Exec(ctx)
func (soc *SignupOptionsCreate) OnConflict(opts ...sql.ConflictOption) *SignupOptionsUpsertOne {
	soc.conflict = opts
	return &SignupOptionsUpsertOne{
		create: soc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SignupOptions.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (soc *SignupOptionsCreate) OnConflictColumns(columns ...string) *SignupOptionsUpsertOne {
	soc.conflict = append(soc.conflict, sql.ConflictColumns(columns...))
	return &SignupOptionsUpsertOne{
		create: soc,
	}
}

type (
	// SignupOptionsUpsertOne is the builder for "upsert"-ing
	//  one SignupOptions node.
	SignupOptionsUpsertOne struct {
		create *SignupOptionsCreate
	}

	// SignupOptionsUpsert is the "OnConflict" setter.
	SignupOptionsUpsert struct {
		*sql.UpdateSet
	}
)

// SetBetterDeliveryOptions sets the "better_delivery_options" field.
func (u *SignupOptionsUpsert) SetBetterDeliveryOptions(v bool) *SignupOptionsUpsert {
	u.Set(signupoptions.FieldBetterDeliveryOptions, v)
	return u
}

// UpdateBetterDeliveryOptions sets the "better_delivery_options" field to the value that was provided on create.
func (u *SignupOptionsUpsert) UpdateBetterDeliveryOptions() *SignupOptionsUpsert {
	u.SetExcluded(signupoptions.FieldBetterDeliveryOptions)
	return u
}

// SetImprovePickPack sets the "improve_pick_pack" field.
func (u *SignupOptionsUpsert) SetImprovePickPack(v bool) *SignupOptionsUpsert {
	u.Set(signupoptions.FieldImprovePickPack, v)
	return u
}

// UpdateImprovePickPack sets the "improve_pick_pack" field to the value that was provided on create.
func (u *SignupOptionsUpsert) UpdateImprovePickPack() *SignupOptionsUpsert {
	u.SetExcluded(signupoptions.FieldImprovePickPack)
	return u
}

// SetShippingLabel sets the "shipping_label" field.
func (u *SignupOptionsUpsert) SetShippingLabel(v bool) *SignupOptionsUpsert {
	u.Set(signupoptions.FieldShippingLabel, v)
	return u
}

// UpdateShippingLabel sets the "shipping_label" field to the value that was provided on create.
func (u *SignupOptionsUpsert) UpdateShippingLabel() *SignupOptionsUpsert {
	u.SetExcluded(signupoptions.FieldShippingLabel)
	return u
}

// SetCustomDocs sets the "custom_docs" field.
func (u *SignupOptionsUpsert) SetCustomDocs(v bool) *SignupOptionsUpsert {
	u.Set(signupoptions.FieldCustomDocs, v)
	return u
}

// UpdateCustomDocs sets the "custom_docs" field to the value that was provided on create.
func (u *SignupOptionsUpsert) UpdateCustomDocs() *SignupOptionsUpsert {
	u.SetExcluded(signupoptions.FieldCustomDocs)
	return u
}

// SetReducedCosts sets the "reduced_costs" field.
func (u *SignupOptionsUpsert) SetReducedCosts(v bool) *SignupOptionsUpsert {
	u.Set(signupoptions.FieldReducedCosts, v)
	return u
}

// UpdateReducedCosts sets the "reduced_costs" field to the value that was provided on create.
func (u *SignupOptionsUpsert) UpdateReducedCosts() *SignupOptionsUpsert {
	u.SetExcluded(signupoptions.FieldReducedCosts)
	return u
}

// SetEasyReturns sets the "easy_returns" field.
func (u *SignupOptionsUpsert) SetEasyReturns(v bool) *SignupOptionsUpsert {
	u.Set(signupoptions.FieldEasyReturns, v)
	return u
}

// UpdateEasyReturns sets the "easy_returns" field to the value that was provided on create.
func (u *SignupOptionsUpsert) UpdateEasyReturns() *SignupOptionsUpsert {
	u.SetExcluded(signupoptions.FieldEasyReturns)
	return u
}

// SetClickCollect sets the "click_collect" field.
func (u *SignupOptionsUpsert) SetClickCollect(v bool) *SignupOptionsUpsert {
	u.Set(signupoptions.FieldClickCollect, v)
	return u
}

// UpdateClickCollect sets the "click_collect" field to the value that was provided on create.
func (u *SignupOptionsUpsert) UpdateClickCollect() *SignupOptionsUpsert {
	u.SetExcluded(signupoptions.FieldClickCollect)
	return u
}

// SetNumShipments sets the "num_shipments" field.
func (u *SignupOptionsUpsert) SetNumShipments(v int) *SignupOptionsUpsert {
	u.Set(signupoptions.FieldNumShipments, v)
	return u
}

// UpdateNumShipments sets the "num_shipments" field to the value that was provided on create.
func (u *SignupOptionsUpsert) UpdateNumShipments() *SignupOptionsUpsert {
	u.SetExcluded(signupoptions.FieldNumShipments)
	return u
}

// AddNumShipments adds v to the "num_shipments" field.
func (u *SignupOptionsUpsert) AddNumShipments(v int) *SignupOptionsUpsert {
	u.Add(signupoptions.FieldNumShipments, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SignupOptions.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(signupoptions.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SignupOptionsUpsertOne) UpdateNewValues() *SignupOptionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(signupoptions.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SignupOptions.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SignupOptionsUpsertOne) Ignore() *SignupOptionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SignupOptionsUpsertOne) DoNothing() *SignupOptionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SignupOptionsCreate.OnConflict
// documentation for more info.
func (u *SignupOptionsUpsertOne) Update(set func(*SignupOptionsUpsert)) *SignupOptionsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SignupOptionsUpsert{UpdateSet: update})
	}))
	return u
}

// SetBetterDeliveryOptions sets the "better_delivery_options" field.
func (u *SignupOptionsUpsertOne) SetBetterDeliveryOptions(v bool) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetBetterDeliveryOptions(v)
	})
}

// UpdateBetterDeliveryOptions sets the "better_delivery_options" field to the value that was provided on create.
func (u *SignupOptionsUpsertOne) UpdateBetterDeliveryOptions() *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateBetterDeliveryOptions()
	})
}

// SetImprovePickPack sets the "improve_pick_pack" field.
func (u *SignupOptionsUpsertOne) SetImprovePickPack(v bool) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetImprovePickPack(v)
	})
}

// UpdateImprovePickPack sets the "improve_pick_pack" field to the value that was provided on create.
func (u *SignupOptionsUpsertOne) UpdateImprovePickPack() *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateImprovePickPack()
	})
}

// SetShippingLabel sets the "shipping_label" field.
func (u *SignupOptionsUpsertOne) SetShippingLabel(v bool) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetShippingLabel(v)
	})
}

// UpdateShippingLabel sets the "shipping_label" field to the value that was provided on create.
func (u *SignupOptionsUpsertOne) UpdateShippingLabel() *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateShippingLabel()
	})
}

// SetCustomDocs sets the "custom_docs" field.
func (u *SignupOptionsUpsertOne) SetCustomDocs(v bool) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetCustomDocs(v)
	})
}

// UpdateCustomDocs sets the "custom_docs" field to the value that was provided on create.
func (u *SignupOptionsUpsertOne) UpdateCustomDocs() *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateCustomDocs()
	})
}

// SetReducedCosts sets the "reduced_costs" field.
func (u *SignupOptionsUpsertOne) SetReducedCosts(v bool) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetReducedCosts(v)
	})
}

// UpdateReducedCosts sets the "reduced_costs" field to the value that was provided on create.
func (u *SignupOptionsUpsertOne) UpdateReducedCosts() *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateReducedCosts()
	})
}

// SetEasyReturns sets the "easy_returns" field.
func (u *SignupOptionsUpsertOne) SetEasyReturns(v bool) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetEasyReturns(v)
	})
}

// UpdateEasyReturns sets the "easy_returns" field to the value that was provided on create.
func (u *SignupOptionsUpsertOne) UpdateEasyReturns() *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateEasyReturns()
	})
}

// SetClickCollect sets the "click_collect" field.
func (u *SignupOptionsUpsertOne) SetClickCollect(v bool) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetClickCollect(v)
	})
}

// UpdateClickCollect sets the "click_collect" field to the value that was provided on create.
func (u *SignupOptionsUpsertOne) UpdateClickCollect() *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateClickCollect()
	})
}

// SetNumShipments sets the "num_shipments" field.
func (u *SignupOptionsUpsertOne) SetNumShipments(v int) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetNumShipments(v)
	})
}

// AddNumShipments adds v to the "num_shipments" field.
func (u *SignupOptionsUpsertOne) AddNumShipments(v int) *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.AddNumShipments(v)
	})
}

// UpdateNumShipments sets the "num_shipments" field to the value that was provided on create.
func (u *SignupOptionsUpsertOne) UpdateNumShipments() *SignupOptionsUpsertOne {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateNumShipments()
	})
}

// Exec executes the query.
func (u *SignupOptionsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SignupOptionsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SignupOptionsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SignupOptionsUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SignupOptionsUpsertOne.ID is not supported by MySQL driver. Use SignupOptionsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SignupOptionsUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SignupOptionsCreateBulk is the builder for creating many SignupOptions entities in bulk.
type SignupOptionsCreateBulk struct {
	config
	err      error
	builders []*SignupOptionsCreate
	conflict []sql.ConflictOption
}

// Save creates the SignupOptions entities in the database.
func (socb *SignupOptionsCreateBulk) Save(ctx context.Context) ([]*SignupOptions, error) {
	if socb.err != nil {
		return nil, socb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(socb.builders))
	nodes := make([]*SignupOptions, len(socb.builders))
	mutators := make([]Mutator, len(socb.builders))
	for i := range socb.builders {
		func(i int, root context.Context) {
			builder := socb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SignupOptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, socb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = socb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, socb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, socb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (socb *SignupOptionsCreateBulk) SaveX(ctx context.Context) []*SignupOptions {
	v, err := socb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (socb *SignupOptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := socb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (socb *SignupOptionsCreateBulk) ExecX(ctx context.Context) {
	if err := socb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SignupOptions.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SignupOptionsUpsert) {
//			SetBetterDeliveryOptions(v+v).
//		}).
//		Exec(ctx)
func (socb *SignupOptionsCreateBulk) OnConflict(opts ...sql.ConflictOption) *SignupOptionsUpsertBulk {
	socb.conflict = opts
	return &SignupOptionsUpsertBulk{
		create: socb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SignupOptions.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (socb *SignupOptionsCreateBulk) OnConflictColumns(columns ...string) *SignupOptionsUpsertBulk {
	socb.conflict = append(socb.conflict, sql.ConflictColumns(columns...))
	return &SignupOptionsUpsertBulk{
		create: socb,
	}
}

// SignupOptionsUpsertBulk is the builder for "upsert"-ing
// a bulk of SignupOptions nodes.
type SignupOptionsUpsertBulk struct {
	create *SignupOptionsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SignupOptions.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(signupoptions.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SignupOptionsUpsertBulk) UpdateNewValues() *SignupOptionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(signupoptions.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SignupOptions.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SignupOptionsUpsertBulk) Ignore() *SignupOptionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SignupOptionsUpsertBulk) DoNothing() *SignupOptionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SignupOptionsCreateBulk.OnConflict
// documentation for more info.
func (u *SignupOptionsUpsertBulk) Update(set func(*SignupOptionsUpsert)) *SignupOptionsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SignupOptionsUpsert{UpdateSet: update})
	}))
	return u
}

// SetBetterDeliveryOptions sets the "better_delivery_options" field.
func (u *SignupOptionsUpsertBulk) SetBetterDeliveryOptions(v bool) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetBetterDeliveryOptions(v)
	})
}

// UpdateBetterDeliveryOptions sets the "better_delivery_options" field to the value that was provided on create.
func (u *SignupOptionsUpsertBulk) UpdateBetterDeliveryOptions() *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateBetterDeliveryOptions()
	})
}

// SetImprovePickPack sets the "improve_pick_pack" field.
func (u *SignupOptionsUpsertBulk) SetImprovePickPack(v bool) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetImprovePickPack(v)
	})
}

// UpdateImprovePickPack sets the "improve_pick_pack" field to the value that was provided on create.
func (u *SignupOptionsUpsertBulk) UpdateImprovePickPack() *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateImprovePickPack()
	})
}

// SetShippingLabel sets the "shipping_label" field.
func (u *SignupOptionsUpsertBulk) SetShippingLabel(v bool) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetShippingLabel(v)
	})
}

// UpdateShippingLabel sets the "shipping_label" field to the value that was provided on create.
func (u *SignupOptionsUpsertBulk) UpdateShippingLabel() *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateShippingLabel()
	})
}

// SetCustomDocs sets the "custom_docs" field.
func (u *SignupOptionsUpsertBulk) SetCustomDocs(v bool) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetCustomDocs(v)
	})
}

// UpdateCustomDocs sets the "custom_docs" field to the value that was provided on create.
func (u *SignupOptionsUpsertBulk) UpdateCustomDocs() *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateCustomDocs()
	})
}

// SetReducedCosts sets the "reduced_costs" field.
func (u *SignupOptionsUpsertBulk) SetReducedCosts(v bool) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetReducedCosts(v)
	})
}

// UpdateReducedCosts sets the "reduced_costs" field to the value that was provided on create.
func (u *SignupOptionsUpsertBulk) UpdateReducedCosts() *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateReducedCosts()
	})
}

// SetEasyReturns sets the "easy_returns" field.
func (u *SignupOptionsUpsertBulk) SetEasyReturns(v bool) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetEasyReturns(v)
	})
}

// UpdateEasyReturns sets the "easy_returns" field to the value that was provided on create.
func (u *SignupOptionsUpsertBulk) UpdateEasyReturns() *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateEasyReturns()
	})
}

// SetClickCollect sets the "click_collect" field.
func (u *SignupOptionsUpsertBulk) SetClickCollect(v bool) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetClickCollect(v)
	})
}

// UpdateClickCollect sets the "click_collect" field to the value that was provided on create.
func (u *SignupOptionsUpsertBulk) UpdateClickCollect() *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateClickCollect()
	})
}

// SetNumShipments sets the "num_shipments" field.
func (u *SignupOptionsUpsertBulk) SetNumShipments(v int) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.SetNumShipments(v)
	})
}

// AddNumShipments adds v to the "num_shipments" field.
func (u *SignupOptionsUpsertBulk) AddNumShipments(v int) *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.AddNumShipments(v)
	})
}

// UpdateNumShipments sets the "num_shipments" field to the value that was provided on create.
func (u *SignupOptionsUpsertBulk) UpdateNumShipments() *SignupOptionsUpsertBulk {
	return u.Update(func(s *SignupOptionsUpsert) {
		s.UpdateNumShipments()
	})
}

// Exec executes the query.
func (u *SignupOptionsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SignupOptionsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SignupOptionsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SignupOptionsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
