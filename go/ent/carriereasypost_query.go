// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierEasyPostQuery is the builder for querying CarrierEasyPost entities.
type CarrierEasyPostQuery struct {
	config
	ctx         *QueryContext
	order       []carriereasypost.OrderOption
	inters      []Interceptor
	predicates  []predicate.CarrierEasyPost
	withTenant  *TenantQuery
	withCarrier *CarrierQuery
	withFKs     bool
	modifiers   []func(*sql.Selector)
	loadTotal   []func(context.Context, []*CarrierEasyPost) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierEasyPostQuery builder.
func (cepq *CarrierEasyPostQuery) Where(ps ...predicate.CarrierEasyPost) *CarrierEasyPostQuery {
	cepq.predicates = append(cepq.predicates, ps...)
	return cepq
}

// Limit the number of records to be returned by this query.
func (cepq *CarrierEasyPostQuery) Limit(limit int) *CarrierEasyPostQuery {
	cepq.ctx.Limit = &limit
	return cepq
}

// Offset to start from.
func (cepq *CarrierEasyPostQuery) Offset(offset int) *CarrierEasyPostQuery {
	cepq.ctx.Offset = &offset
	return cepq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cepq *CarrierEasyPostQuery) Unique(unique bool) *CarrierEasyPostQuery {
	cepq.ctx.Unique = &unique
	return cepq
}

// Order specifies how the records should be ordered.
func (cepq *CarrierEasyPostQuery) Order(o ...carriereasypost.OrderOption) *CarrierEasyPostQuery {
	cepq.order = append(cepq.order, o...)
	return cepq
}

// QueryTenant chains the current query on the "tenant" edge.
func (cepq *CarrierEasyPostQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: cepq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carriereasypost.Table, carriereasypost.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carriereasypost.TenantTable, carriereasypost.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(cepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrier chains the current query on the "carrier" edge.
func (cepq *CarrierEasyPostQuery) QueryCarrier() *CarrierQuery {
	query := (&CarrierClient{config: cepq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cepq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cepq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carriereasypost.Table, carriereasypost.FieldID, selector),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carriereasypost.CarrierTable, carriereasypost.CarrierColumn),
		)
		fromU = sqlgraph.SetNeighbors(cepq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierEasyPost entity from the query.
// Returns a *NotFoundError when no CarrierEasyPost was found.
func (cepq *CarrierEasyPostQuery) First(ctx context.Context) (*CarrierEasyPost, error) {
	nodes, err := cepq.Limit(1).All(setContextOp(ctx, cepq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carriereasypost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cepq *CarrierEasyPostQuery) FirstX(ctx context.Context) *CarrierEasyPost {
	node, err := cepq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierEasyPost ID from the query.
// Returns a *NotFoundError when no CarrierEasyPost ID was found.
func (cepq *CarrierEasyPostQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cepq.Limit(1).IDs(setContextOp(ctx, cepq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carriereasypost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cepq *CarrierEasyPostQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cepq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierEasyPost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierEasyPost entity is found.
// Returns a *NotFoundError when no CarrierEasyPost entities are found.
func (cepq *CarrierEasyPostQuery) Only(ctx context.Context) (*CarrierEasyPost, error) {
	nodes, err := cepq.Limit(2).All(setContextOp(ctx, cepq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carriereasypost.Label}
	default:
		return nil, &NotSingularError{carriereasypost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cepq *CarrierEasyPostQuery) OnlyX(ctx context.Context) *CarrierEasyPost {
	node, err := cepq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierEasyPost ID in the query.
// Returns a *NotSingularError when more than one CarrierEasyPost ID is found.
// Returns a *NotFoundError when no entities are found.
func (cepq *CarrierEasyPostQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cepq.Limit(2).IDs(setContextOp(ctx, cepq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carriereasypost.Label}
	default:
		err = &NotSingularError{carriereasypost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cepq *CarrierEasyPostQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cepq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierEasyPosts.
func (cepq *CarrierEasyPostQuery) All(ctx context.Context) ([]*CarrierEasyPost, error) {
	ctx = setContextOp(ctx, cepq.ctx, ent.OpQueryAll)
	if err := cepq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierEasyPost, *CarrierEasyPostQuery]()
	return withInterceptors[[]*CarrierEasyPost](ctx, cepq, qr, cepq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cepq *CarrierEasyPostQuery) AllX(ctx context.Context) []*CarrierEasyPost {
	nodes, err := cepq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierEasyPost IDs.
func (cepq *CarrierEasyPostQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cepq.ctx.Unique == nil && cepq.path != nil {
		cepq.Unique(true)
	}
	ctx = setContextOp(ctx, cepq.ctx, ent.OpQueryIDs)
	if err = cepq.Select(carriereasypost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cepq *CarrierEasyPostQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cepq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cepq *CarrierEasyPostQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cepq.ctx, ent.OpQueryCount)
	if err := cepq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cepq, querierCount[*CarrierEasyPostQuery](), cepq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cepq *CarrierEasyPostQuery) CountX(ctx context.Context) int {
	count, err := cepq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cepq *CarrierEasyPostQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cepq.ctx, ent.OpQueryExist)
	switch _, err := cepq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cepq *CarrierEasyPostQuery) ExistX(ctx context.Context) bool {
	exist, err := cepq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierEasyPostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cepq *CarrierEasyPostQuery) Clone() *CarrierEasyPostQuery {
	if cepq == nil {
		return nil
	}
	return &CarrierEasyPostQuery{
		config:      cepq.config,
		ctx:         cepq.ctx.Clone(),
		order:       append([]carriereasypost.OrderOption{}, cepq.order...),
		inters:      append([]Interceptor{}, cepq.inters...),
		predicates:  append([]predicate.CarrierEasyPost{}, cepq.predicates...),
		withTenant:  cepq.withTenant.Clone(),
		withCarrier: cepq.withCarrier.Clone(),
		// clone intermediate query.
		sql:  cepq.sql.Clone(),
		path: cepq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (cepq *CarrierEasyPostQuery) WithTenant(opts ...func(*TenantQuery)) *CarrierEasyPostQuery {
	query := (&TenantClient{config: cepq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cepq.withTenant = query
	return cepq
}

// WithCarrier tells the query-builder to eager-load the nodes that are connected to
// the "carrier" edge. The optional arguments are used to configure the query builder of the edge.
func (cepq *CarrierEasyPostQuery) WithCarrier(opts ...func(*CarrierQuery)) *CarrierEasyPostQuery {
	query := (&CarrierClient{config: cepq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cepq.withCarrier = query
	return cepq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierEasyPost.Query().
//		GroupBy(carriereasypost.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cepq *CarrierEasyPostQuery) GroupBy(field string, fields ...string) *CarrierEasyPostGroupBy {
	cepq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierEasyPostGroupBy{build: cepq}
	grbuild.flds = &cepq.ctx.Fields
	grbuild.label = carriereasypost.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.CarrierEasyPost.Query().
//		Select(carriereasypost.FieldTenantID).
//		Scan(ctx, &v)
func (cepq *CarrierEasyPostQuery) Select(fields ...string) *CarrierEasyPostSelect {
	cepq.ctx.Fields = append(cepq.ctx.Fields, fields...)
	sbuild := &CarrierEasyPostSelect{CarrierEasyPostQuery: cepq}
	sbuild.label = carriereasypost.Label
	sbuild.flds, sbuild.scan = &cepq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierEasyPostSelect configured with the given aggregations.
func (cepq *CarrierEasyPostQuery) Aggregate(fns ...AggregateFunc) *CarrierEasyPostSelect {
	return cepq.Select().Aggregate(fns...)
}

func (cepq *CarrierEasyPostQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cepq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cepq); err != nil {
				return err
			}
		}
	}
	for _, f := range cepq.ctx.Fields {
		if !carriereasypost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cepq.path != nil {
		prev, err := cepq.path(ctx)
		if err != nil {
			return err
		}
		cepq.sql = prev
	}
	if carriereasypost.Policy == nil {
		return errors.New("ent: uninitialized carriereasypost.Policy (forgotten import ent/runtime?)")
	}
	if err := carriereasypost.Policy.EvalQuery(ctx, cepq); err != nil {
		return err
	}
	return nil
}

func (cepq *CarrierEasyPostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierEasyPost, error) {
	var (
		nodes       = []*CarrierEasyPost{}
		withFKs     = cepq.withFKs
		_spec       = cepq.querySpec()
		loadedTypes = [2]bool{
			cepq.withTenant != nil,
			cepq.withCarrier != nil,
		}
	)
	if cepq.withCarrier != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carriereasypost.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierEasyPost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierEasyPost{config: cepq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cepq.modifiers) > 0 {
		_spec.Modifiers = cepq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cepq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cepq.withTenant; query != nil {
		if err := cepq.loadTenant(ctx, query, nodes, nil,
			func(n *CarrierEasyPost, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := cepq.withCarrier; query != nil {
		if err := cepq.loadCarrier(ctx, query, nodes, nil,
			func(n *CarrierEasyPost, e *Carrier) { n.Edges.Carrier = e }); err != nil {
			return nil, err
		}
	}
	for i := range cepq.loadTotal {
		if err := cepq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cepq *CarrierEasyPostQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*CarrierEasyPost, init func(*CarrierEasyPost), assign func(*CarrierEasyPost, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierEasyPost)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cepq *CarrierEasyPostQuery) loadCarrier(ctx context.Context, query *CarrierQuery, nodes []*CarrierEasyPost, init func(*CarrierEasyPost), assign func(*CarrierEasyPost, *Carrier)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierEasyPost)
	for i := range nodes {
		if nodes[i].carrier_carrier_easy_post == nil {
			continue
		}
		fk := *nodes[i].carrier_carrier_easy_post
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrier.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_carrier_easy_post" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cepq *CarrierEasyPostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cepq.querySpec()
	if len(cepq.modifiers) > 0 {
		_spec.Modifiers = cepq.modifiers
	}
	_spec.Node.Columns = cepq.ctx.Fields
	if len(cepq.ctx.Fields) > 0 {
		_spec.Unique = cepq.ctx.Unique != nil && *cepq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cepq.driver, _spec)
}

func (cepq *CarrierEasyPostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carriereasypost.Table, carriereasypost.Columns, sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString))
	_spec.From = cepq.sql
	if unique := cepq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cepq.path != nil {
		_spec.Unique = true
	}
	if fields := cepq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carriereasypost.FieldID)
		for i := range fields {
			if fields[i] != carriereasypost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cepq.withTenant != nil {
			_spec.Node.AddColumnOnce(carriereasypost.FieldTenantID)
		}
	}
	if ps := cepq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cepq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cepq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cepq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cepq *CarrierEasyPostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cepq.driver.Dialect())
	t1 := builder.Table(carriereasypost.Table)
	columns := cepq.ctx.Fields
	if len(columns) == 0 {
		columns = carriereasypost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cepq.sql != nil {
		selector = cepq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cepq.ctx.Unique != nil && *cepq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cepq.predicates {
		p(selector)
	}
	for _, p := range cepq.order {
		p(selector)
	}
	if offset := cepq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cepq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CarrierEasyPostGroupBy is the group-by builder for CarrierEasyPost entities.
type CarrierEasyPostGroupBy struct {
	selector
	build *CarrierEasyPostQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cepgb *CarrierEasyPostGroupBy) Aggregate(fns ...AggregateFunc) *CarrierEasyPostGroupBy {
	cepgb.fns = append(cepgb.fns, fns...)
	return cepgb
}

// Scan applies the selector query and scans the result into the given value.
func (cepgb *CarrierEasyPostGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cepgb.build.ctx, ent.OpQueryGroupBy)
	if err := cepgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierEasyPostQuery, *CarrierEasyPostGroupBy](ctx, cepgb.build, cepgb, cepgb.build.inters, v)
}

func (cepgb *CarrierEasyPostGroupBy) sqlScan(ctx context.Context, root *CarrierEasyPostQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cepgb.fns))
	for _, fn := range cepgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cepgb.flds)+len(cepgb.fns))
		for _, f := range *cepgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cepgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cepgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierEasyPostSelect is the builder for selecting fields of CarrierEasyPost entities.
type CarrierEasyPostSelect struct {
	*CarrierEasyPostQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ceps *CarrierEasyPostSelect) Aggregate(fns ...AggregateFunc) *CarrierEasyPostSelect {
	ceps.fns = append(ceps.fns, fns...)
	return ceps
}

// Scan applies the selector query and scans the result into the given value.
func (ceps *CarrierEasyPostSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ceps.ctx, ent.OpQuerySelect)
	if err := ceps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierEasyPostQuery, *CarrierEasyPostSelect](ctx, ceps.CarrierEasyPostQuery, ceps, ceps.inters, v)
}

func (ceps *CarrierEasyPostSelect) sqlScan(ctx context.Context, root *CarrierEasyPostQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ceps.fns))
	for _, fn := range ceps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ceps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ceps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
