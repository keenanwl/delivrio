// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceEasyPostCreate is the builder for creating a CarrierAdditionalServiceEasyPost entity.
type CarrierAdditionalServiceEasyPostCreate struct {
	config
	mutation *CarrierAdditionalServiceEasyPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (casepc *CarrierAdditionalServiceEasyPostCreate) SetLabel(s string) *CarrierAdditionalServiceEasyPostCreate {
	casepc.mutation.SetLabel(s)
	return casepc
}

// SetAPIKey sets the "api_key" field.
func (casepc *CarrierAdditionalServiceEasyPostCreate) SetAPIKey(s string) *CarrierAdditionalServiceEasyPostCreate {
	casepc.mutation.SetAPIKey(s)
	return casepc
}

// SetAPIValue sets the "api_value" field.
func (casepc *CarrierAdditionalServiceEasyPostCreate) SetAPIValue(s string) *CarrierAdditionalServiceEasyPostCreate {
	casepc.mutation.SetAPIValue(s)
	return casepc
}

// SetID sets the "id" field.
func (casepc *CarrierAdditionalServiceEasyPostCreate) SetID(pu pulid.ID) *CarrierAdditionalServiceEasyPostCreate {
	casepc.mutation.SetID(pu)
	return casepc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (casepc *CarrierAdditionalServiceEasyPostCreate) SetNillableID(pu *pulid.ID) *CarrierAdditionalServiceEasyPostCreate {
	if pu != nil {
		casepc.SetID(*pu)
	}
	return casepc
}

// AddCarrierServiceEasyPostIDs adds the "carrier_service_easy_post" edge to the CarrierServiceEasyPost entity by IDs.
func (casepc *CarrierAdditionalServiceEasyPostCreate) AddCarrierServiceEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostCreate {
	casepc.mutation.AddCarrierServiceEasyPostIDs(ids...)
	return casepc
}

// AddCarrierServiceEasyPost adds the "carrier_service_easy_post" edges to the CarrierServiceEasyPost entity.
func (casepc *CarrierAdditionalServiceEasyPostCreate) AddCarrierServiceEasyPost(c ...*CarrierServiceEasyPost) *CarrierAdditionalServiceEasyPostCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casepc.AddCarrierServiceEasyPostIDs(ids...)
}

// AddDeliveryOptionEasyPostIDs adds the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by IDs.
func (casepc *CarrierAdditionalServiceEasyPostCreate) AddDeliveryOptionEasyPostIDs(ids ...pulid.ID) *CarrierAdditionalServiceEasyPostCreate {
	casepc.mutation.AddDeliveryOptionEasyPostIDs(ids...)
	return casepc
}

// AddDeliveryOptionEasyPost adds the "delivery_option_easy_post" edges to the DeliveryOptionEasyPost entity.
func (casepc *CarrierAdditionalServiceEasyPostCreate) AddDeliveryOptionEasyPost(d ...*DeliveryOptionEasyPost) *CarrierAdditionalServiceEasyPostCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casepc.AddDeliveryOptionEasyPostIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceEasyPostMutation object of the builder.
func (casepc *CarrierAdditionalServiceEasyPostCreate) Mutation() *CarrierAdditionalServiceEasyPostMutation {
	return casepc.mutation
}

// Save creates the CarrierAdditionalServiceEasyPost in the database.
func (casepc *CarrierAdditionalServiceEasyPostCreate) Save(ctx context.Context) (*CarrierAdditionalServiceEasyPost, error) {
	if err := casepc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, casepc.sqlSave, casepc.mutation, casepc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (casepc *CarrierAdditionalServiceEasyPostCreate) SaveX(ctx context.Context) *CarrierAdditionalServiceEasyPost {
	v, err := casepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (casepc *CarrierAdditionalServiceEasyPostCreate) Exec(ctx context.Context) error {
	_, err := casepc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casepc *CarrierAdditionalServiceEasyPostCreate) ExecX(ctx context.Context) {
	if err := casepc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (casepc *CarrierAdditionalServiceEasyPostCreate) defaults() error {
	if _, ok := casepc.mutation.ID(); !ok {
		if carrieradditionalserviceeasypost.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrieradditionalserviceeasypost.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrieradditionalserviceeasypost.DefaultID()
		casepc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (casepc *CarrierAdditionalServiceEasyPostCreate) check() error {
	if _, ok := casepc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "CarrierAdditionalServiceEasyPost.label"`)}
	}
	if _, ok := casepc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`ent: missing required field "CarrierAdditionalServiceEasyPost.api_key"`)}
	}
	if _, ok := casepc.mutation.APIValue(); !ok {
		return &ValidationError{Name: "api_value", err: errors.New(`ent: missing required field "CarrierAdditionalServiceEasyPost.api_value"`)}
	}
	return nil
}

func (casepc *CarrierAdditionalServiceEasyPostCreate) sqlSave(ctx context.Context) (*CarrierAdditionalServiceEasyPost, error) {
	if err := casepc.check(); err != nil {
		return nil, err
	}
	_node, _spec := casepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, casepc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	casepc.mutation.id = &_node.ID
	casepc.mutation.done = true
	return _node, nil
}

func (casepc *CarrierAdditionalServiceEasyPostCreate) createSpec() (*CarrierAdditionalServiceEasyPost, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierAdditionalServiceEasyPost{config: casepc.config}
		_spec = sqlgraph.NewCreateSpec(carrieradditionalserviceeasypost.Table, sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString))
	)
	_spec.OnConflict = casepc.conflict
	if id, ok := casepc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := casepc.mutation.Label(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := casepc.mutation.APIKey(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := casepc.mutation.APIValue(); ok {
		_spec.SetField(carrieradditionalserviceeasypost.FieldAPIValue, field.TypeString, value)
		_node.APIValue = value
	}
	if nodes := casepc.mutation.CarrierServiceEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.CarrierServiceEasyPostTable,
			Columns: carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := casepc.mutation.DeliveryOptionEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable,
			Columns: carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierAdditionalServiceEasyPost.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierAdditionalServiceEasyPostUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (casepc *CarrierAdditionalServiceEasyPostCreate) OnConflict(opts ...sql.ConflictOption) *CarrierAdditionalServiceEasyPostUpsertOne {
	casepc.conflict = opts
	return &CarrierAdditionalServiceEasyPostUpsertOne{
		create: casepc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (casepc *CarrierAdditionalServiceEasyPostCreate) OnConflictColumns(columns ...string) *CarrierAdditionalServiceEasyPostUpsertOne {
	casepc.conflict = append(casepc.conflict, sql.ConflictColumns(columns...))
	return &CarrierAdditionalServiceEasyPostUpsertOne{
		create: casepc,
	}
}

type (
	// CarrierAdditionalServiceEasyPostUpsertOne is the builder for "upsert"-ing
	//  one CarrierAdditionalServiceEasyPost node.
	CarrierAdditionalServiceEasyPostUpsertOne struct {
		create *CarrierAdditionalServiceEasyPostCreate
	}

	// CarrierAdditionalServiceEasyPostUpsert is the "OnConflict" setter.
	CarrierAdditionalServiceEasyPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceEasyPostUpsert) SetLabel(v string) *CarrierAdditionalServiceEasyPostUpsert {
	u.Set(carrieradditionalserviceeasypost.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsert) UpdateLabel() *CarrierAdditionalServiceEasyPostUpsert {
	u.SetExcluded(carrieradditionalserviceeasypost.FieldLabel)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierAdditionalServiceEasyPostUpsert) SetAPIKey(v string) *CarrierAdditionalServiceEasyPostUpsert {
	u.Set(carrieradditionalserviceeasypost.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsert) UpdateAPIKey() *CarrierAdditionalServiceEasyPostUpsert {
	u.SetExcluded(carrieradditionalserviceeasypost.FieldAPIKey)
	return u
}

// SetAPIValue sets the "api_value" field.
func (u *CarrierAdditionalServiceEasyPostUpsert) SetAPIValue(v string) *CarrierAdditionalServiceEasyPostUpsert {
	u.Set(carrieradditionalserviceeasypost.FieldAPIValue, v)
	return u
}

// UpdateAPIValue sets the "api_value" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsert) UpdateAPIValue() *CarrierAdditionalServiceEasyPostUpsert {
	u.SetExcluded(carrieradditionalserviceeasypost.FieldAPIValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrieradditionalserviceeasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierAdditionalServiceEasyPostUpsertOne) UpdateNewValues() *CarrierAdditionalServiceEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrieradditionalserviceeasypost.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceEasyPost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierAdditionalServiceEasyPostUpsertOne) Ignore() *CarrierAdditionalServiceEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) DoNothing() *CarrierAdditionalServiceEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierAdditionalServiceEasyPostCreate.OnConflict
// documentation for more info.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) Update(set func(*CarrierAdditionalServiceEasyPostUpsert)) *CarrierAdditionalServiceEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierAdditionalServiceEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) SetLabel(v string) *CarrierAdditionalServiceEasyPostUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) UpdateLabel() *CarrierAdditionalServiceEasyPostUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.UpdateLabel()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) SetAPIKey(v string) *CarrierAdditionalServiceEasyPostUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) UpdateAPIKey() *CarrierAdditionalServiceEasyPostUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.UpdateAPIKey()
	})
}

// SetAPIValue sets the "api_value" field.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) SetAPIValue(v string) *CarrierAdditionalServiceEasyPostUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.SetAPIValue(v)
	})
}

// UpdateAPIValue sets the "api_value" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) UpdateAPIValue() *CarrierAdditionalServiceEasyPostUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.UpdateAPIValue()
	})
}

// Exec executes the query.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierAdditionalServiceEasyPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierAdditionalServiceEasyPostUpsertOne.ID is not supported by MySQL driver. Use CarrierAdditionalServiceEasyPostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierAdditionalServiceEasyPostUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierAdditionalServiceEasyPostCreateBulk is the builder for creating many CarrierAdditionalServiceEasyPost entities in bulk.
type CarrierAdditionalServiceEasyPostCreateBulk struct {
	config
	err      error
	builders []*CarrierAdditionalServiceEasyPostCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierAdditionalServiceEasyPost entities in the database.
func (casepcb *CarrierAdditionalServiceEasyPostCreateBulk) Save(ctx context.Context) ([]*CarrierAdditionalServiceEasyPost, error) {
	if casepcb.err != nil {
		return nil, casepcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(casepcb.builders))
	nodes := make([]*CarrierAdditionalServiceEasyPost, len(casepcb.builders))
	mutators := make([]Mutator, len(casepcb.builders))
	for i := range casepcb.builders {
		func(i int, root context.Context) {
			builder := casepcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierAdditionalServiceEasyPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, casepcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = casepcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, casepcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, casepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (casepcb *CarrierAdditionalServiceEasyPostCreateBulk) SaveX(ctx context.Context) []*CarrierAdditionalServiceEasyPost {
	v, err := casepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (casepcb *CarrierAdditionalServiceEasyPostCreateBulk) Exec(ctx context.Context) error {
	_, err := casepcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casepcb *CarrierAdditionalServiceEasyPostCreateBulk) ExecX(ctx context.Context) {
	if err := casepcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierAdditionalServiceEasyPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierAdditionalServiceEasyPostUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (casepcb *CarrierAdditionalServiceEasyPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierAdditionalServiceEasyPostUpsertBulk {
	casepcb.conflict = opts
	return &CarrierAdditionalServiceEasyPostUpsertBulk{
		create: casepcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (casepcb *CarrierAdditionalServiceEasyPostCreateBulk) OnConflictColumns(columns ...string) *CarrierAdditionalServiceEasyPostUpsertBulk {
	casepcb.conflict = append(casepcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierAdditionalServiceEasyPostUpsertBulk{
		create: casepcb,
	}
}

// CarrierAdditionalServiceEasyPostUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierAdditionalServiceEasyPost nodes.
type CarrierAdditionalServiceEasyPostUpsertBulk struct {
	create *CarrierAdditionalServiceEasyPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrieradditionalserviceeasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) UpdateNewValues() *CarrierAdditionalServiceEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrieradditionalserviceeasypost.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceEasyPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) Ignore() *CarrierAdditionalServiceEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) DoNothing() *CarrierAdditionalServiceEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierAdditionalServiceEasyPostCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) Update(set func(*CarrierAdditionalServiceEasyPostUpsert)) *CarrierAdditionalServiceEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierAdditionalServiceEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) SetLabel(v string) *CarrierAdditionalServiceEasyPostUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) UpdateLabel() *CarrierAdditionalServiceEasyPostUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.UpdateLabel()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) SetAPIKey(v string) *CarrierAdditionalServiceEasyPostUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) UpdateAPIKey() *CarrierAdditionalServiceEasyPostUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.UpdateAPIKey()
	})
}

// SetAPIValue sets the "api_value" field.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) SetAPIValue(v string) *CarrierAdditionalServiceEasyPostUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.SetAPIValue(v)
	})
}

// UpdateAPIValue sets the "api_value" field to the value that was provided on create.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) UpdateAPIValue() *CarrierAdditionalServiceEasyPostUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceEasyPostUpsert) {
		s.UpdateAPIValue()
	})
}

// Exec executes the query.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierAdditionalServiceEasyPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierAdditionalServiceEasyPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierAdditionalServiceEasyPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
