// Code generated by ent, DO NOT EDIT.

package apitoken

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldName, v))
}

// HashedToken applies equality check predicate on the "hashed_token" field. It's identical to HashedTokenEQ.
func HashedToken(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldHashedToken, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldCreatedAt, v))
}

// LastUsed applies equality check predicate on the "last_used" field. It's identical to LastUsedEQ.
func LastUsed(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldLastUsed, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.APIToken {
	return predicate.APIToken(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.APIToken {
	vc := string(v)
	return predicate.APIToken(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.APIToken {
	vc := string(v)
	return predicate.APIToken(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.APIToken {
	vc := string(v)
	return predicate.APIToken(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.APIToken {
	vc := string(v)
	return predicate.APIToken(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.APIToken {
	vc := string(v)
	return predicate.APIToken(sql.FieldContainsFold(FieldTenantID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.APIToken {
	return predicate.APIToken(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.APIToken {
	return predicate.APIToken(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldContainsFold(FieldName, v))
}

// HashedTokenEQ applies the EQ predicate on the "hashed_token" field.
func HashedTokenEQ(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldHashedToken, v))
}

// HashedTokenNEQ applies the NEQ predicate on the "hashed_token" field.
func HashedTokenNEQ(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldNEQ(FieldHashedToken, v))
}

// HashedTokenIn applies the In predicate on the "hashed_token" field.
func HashedTokenIn(vs ...string) predicate.APIToken {
	return predicate.APIToken(sql.FieldIn(FieldHashedToken, vs...))
}

// HashedTokenNotIn applies the NotIn predicate on the "hashed_token" field.
func HashedTokenNotIn(vs ...string) predicate.APIToken {
	return predicate.APIToken(sql.FieldNotIn(FieldHashedToken, vs...))
}

// HashedTokenGT applies the GT predicate on the "hashed_token" field.
func HashedTokenGT(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldGT(FieldHashedToken, v))
}

// HashedTokenGTE applies the GTE predicate on the "hashed_token" field.
func HashedTokenGTE(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldGTE(FieldHashedToken, v))
}

// HashedTokenLT applies the LT predicate on the "hashed_token" field.
func HashedTokenLT(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldLT(FieldHashedToken, v))
}

// HashedTokenLTE applies the LTE predicate on the "hashed_token" field.
func HashedTokenLTE(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldLTE(FieldHashedToken, v))
}

// HashedTokenContains applies the Contains predicate on the "hashed_token" field.
func HashedTokenContains(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldContains(FieldHashedToken, v))
}

// HashedTokenHasPrefix applies the HasPrefix predicate on the "hashed_token" field.
func HashedTokenHasPrefix(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldHasPrefix(FieldHashedToken, v))
}

// HashedTokenHasSuffix applies the HasSuffix predicate on the "hashed_token" field.
func HashedTokenHasSuffix(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldHasSuffix(FieldHashedToken, v))
}

// HashedTokenEqualFold applies the EqualFold predicate on the "hashed_token" field.
func HashedTokenEqualFold(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldEqualFold(FieldHashedToken, v))
}

// HashedTokenContainsFold applies the ContainsFold predicate on the "hashed_token" field.
func HashedTokenContainsFold(v string) predicate.APIToken {
	return predicate.APIToken(sql.FieldContainsFold(FieldHashedToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.APIToken {
	return predicate.APIToken(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.APIToken {
	return predicate.APIToken(sql.FieldNotNull(FieldCreatedAt))
}

// LastUsedEQ applies the EQ predicate on the "last_used" field.
func LastUsedEQ(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldEQ(FieldLastUsed, v))
}

// LastUsedNEQ applies the NEQ predicate on the "last_used" field.
func LastUsedNEQ(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldNEQ(FieldLastUsed, v))
}

// LastUsedIn applies the In predicate on the "last_used" field.
func LastUsedIn(vs ...time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldIn(FieldLastUsed, vs...))
}

// LastUsedNotIn applies the NotIn predicate on the "last_used" field.
func LastUsedNotIn(vs ...time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldNotIn(FieldLastUsed, vs...))
}

// LastUsedGT applies the GT predicate on the "last_used" field.
func LastUsedGT(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldGT(FieldLastUsed, v))
}

// LastUsedGTE applies the GTE predicate on the "last_used" field.
func LastUsedGTE(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldGTE(FieldLastUsed, v))
}

// LastUsedLT applies the LT predicate on the "last_used" field.
func LastUsedLT(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldLT(FieldLastUsed, v))
}

// LastUsedLTE applies the LTE predicate on the "last_used" field.
func LastUsedLTE(v time.Time) predicate.APIToken {
	return predicate.APIToken(sql.FieldLTE(FieldLastUsed, v))
}

// LastUsedIsNil applies the IsNil predicate on the "last_used" field.
func LastUsedIsNil() predicate.APIToken {
	return predicate.APIToken(sql.FieldIsNull(FieldLastUsed))
}

// LastUsedNotNil applies the NotNil predicate on the "last_used" field.
func LastUsedNotNil() predicate.APIToken {
	return predicate.APIToken(sql.FieldNotNull(FieldLastUsed))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.APIToken {
	return predicate.APIToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.APIToken {
	return predicate.APIToken(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.APIToken {
	return predicate.APIToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.APIToken {
	return predicate.APIToken(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.APIToken) predicate.APIToken {
	return predicate.APIToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.APIToken) predicate.APIToken {
	return predicate.APIToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.APIToken) predicate.APIToken {
	return predicate.APIToken(sql.NotPredicates(p))
}
