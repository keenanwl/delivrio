// Code generated by ent, DO NOT EDIT.

package carrieradditionalservicebring

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrieradditionalservicebring type in the database.
	Label = "carrier_additional_service_bring"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldAPICodeBooking holds the string denoting the api_code_booking field in the database.
	FieldAPICodeBooking = "api_code_booking"
	// EdgeCarrierServiceBring holds the string denoting the carrier_service_bring edge name in mutations.
	EdgeCarrierServiceBring = "carrier_service_bring"
	// EdgeDeliveryOptionBring holds the string denoting the delivery_option_bring edge name in mutations.
	EdgeDeliveryOptionBring = "delivery_option_bring"
	// Table holds the table name of the carrieradditionalservicebring in the database.
	Table = "carrier_additional_service_brings"
	// CarrierServiceBringTable is the table that holds the carrier_service_bring relation/edge.
	CarrierServiceBringTable = "carrier_additional_service_brings"
	// CarrierServiceBringInverseTable is the table name for the CarrierServiceBring entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicebring" package.
	CarrierServiceBringInverseTable = "carrier_service_brings"
	// CarrierServiceBringColumn is the table column denoting the carrier_service_bring relation/edge.
	CarrierServiceBringColumn = "carrier_service_bring_carrier_additional_service_bring"
	// DeliveryOptionBringTable is the table that holds the delivery_option_bring relation/edge. The primary key declared below.
	DeliveryOptionBringTable = "delivery_option_bring_carrier_additional_service_bring"
	// DeliveryOptionBringInverseTable is the table name for the DeliveryOptionBring entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptionbring" package.
	DeliveryOptionBringInverseTable = "delivery_option_brings"
)

// Columns holds all SQL columns for carrieradditionalservicebring fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldAPICodeBooking,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_additional_service_brings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_service_bring_carrier_additional_service_bring",
}

var (
	// DeliveryOptionBringPrimaryKey and DeliveryOptionBringColumn2 are the table columns denoting the
	// primary key for the delivery_option_bring relation (M2M).
	DeliveryOptionBringPrimaryKey = []string{"delivery_option_bring_id", "carrier_additional_service_bring_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierAdditionalServiceBring queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByAPICodeBooking orders the results by the api_code_booking field.
func ByAPICodeBooking(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPICodeBooking, opts...).ToFunc()
}

// ByCarrierServiceBringField orders the results by carrier_service_bring field.
func ByCarrierServiceBringField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceBringStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionBringCount orders the results by delivery_option_bring count.
func ByDeliveryOptionBringCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionBringStep(), opts...)
	}
}

// ByDeliveryOptionBring orders the results by delivery_option_bring terms.
func ByDeliveryOptionBring(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionBringStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceBringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceBringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarrierServiceBringTable, CarrierServiceBringColumn),
	)
}
func newDeliveryOptionBringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionBringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionBringTable, DeliveryOptionBringPrimaryKey...),
	)
}
