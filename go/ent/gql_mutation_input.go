// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"
)

// CreateAddressInput represents a mutation input for creating addresses.
type CreateAddressInput struct {
	FirstName                string
	LastName                 string
	Email                    string
	PhoneNumber              string
	PhoneNumber2             *string
	VatNumber                *string
	Company                  *string
	AddressOne               string
	AddressTwo               string
	City                     string
	State                    *string
	Zip                      string
	RecipientColliIDs        []pulid.ID
	RecipientConsolidationID *pulid.ID
	CompanyAddresIDs         []pulid.ID
	LocationIDs              []pulid.ID
	SenderColliIDs           []pulid.ID
	SenderConsolidationID    *pulid.ID
	ReturnSenderColliIDs     []pulid.ID
	ReturnRecipientColliIDs  []pulid.ID
	CountryID                pulid.ID
}

// Mutate applies the CreateAddressInput on the AddressMutation builder.
func (i *CreateAddressInput) Mutate(m *AddressMutation) {
	m.SetFirstName(i.FirstName)
	m.SetLastName(i.LastName)
	m.SetEmail(i.Email)
	m.SetPhoneNumber(i.PhoneNumber)
	if v := i.PhoneNumber2; v != nil {
		m.SetPhoneNumber2(*v)
	}
	if v := i.VatNumber; v != nil {
		m.SetVatNumber(*v)
	}
	if v := i.Company; v != nil {
		m.SetCompany(*v)
	}
	m.SetAddressOne(i.AddressOne)
	m.SetAddressTwo(i.AddressTwo)
	m.SetCity(i.City)
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	m.SetZip(i.Zip)
	if v := i.RecipientColliIDs; len(v) > 0 {
		m.AddRecipientColliIDs(v...)
	}
	if v := i.RecipientConsolidationID; v != nil {
		m.SetRecipientConsolidationID(*v)
	}
	if v := i.CompanyAddresIDs; len(v) > 0 {
		m.AddCompanyAddresIDs(v...)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.SenderColliIDs; len(v) > 0 {
		m.AddSenderColliIDs(v...)
	}
	if v := i.SenderConsolidationID; v != nil {
		m.SetSenderConsolidationID(*v)
	}
	if v := i.ReturnSenderColliIDs; len(v) > 0 {
		m.AddReturnSenderColliIDs(v...)
	}
	if v := i.ReturnRecipientColliIDs; len(v) > 0 {
		m.AddReturnRecipientColliIDs(v...)
	}
	m.SetCountryID(i.CountryID)
}

// SetInput applies the change-set in the CreateAddressInput on the AddressCreate builder.
func (c *AddressCreate) SetInput(i CreateAddressInput) *AddressCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAddressInput represents a mutation input for updating addresses.
type UpdateAddressInput struct {
	FirstName                     *string
	LastName                      *string
	Email                         *string
	PhoneNumber                   *string
	ClearPhoneNumber2             bool
	PhoneNumber2                  *string
	ClearVatNumber                bool
	VatNumber                     *string
	ClearCompany                  bool
	Company                       *string
	AddressOne                    *string
	AddressTwo                    *string
	City                          *string
	ClearState                    bool
	State                         *string
	Zip                           *string
	ClearRecipientColli           bool
	AddRecipientColliIDs          []pulid.ID
	RemoveRecipientColliIDs       []pulid.ID
	ClearRecipientConsolidation   bool
	RecipientConsolidationID      *pulid.ID
	ClearCompanyAddress           bool
	AddCompanyAddresIDs           []pulid.ID
	RemoveCompanyAddresIDs        []pulid.ID
	ClearLocation                 bool
	AddLocationIDs                []pulid.ID
	RemoveLocationIDs             []pulid.ID
	ClearSenderColli              bool
	AddSenderColliIDs             []pulid.ID
	RemoveSenderColliIDs          []pulid.ID
	ClearSenderConsolidation      bool
	SenderConsolidationID         *pulid.ID
	ClearReturnSenderColli        bool
	AddReturnSenderColliIDs       []pulid.ID
	RemoveReturnSenderColliIDs    []pulid.ID
	ClearReturnRecipientColli     bool
	AddReturnRecipientColliIDs    []pulid.ID
	RemoveReturnRecipientColliIDs []pulid.ID
	CountryID                     *pulid.ID
}

// Mutate applies the UpdateAddressInput on the AddressMutation builder.
func (i *UpdateAddressInput) Mutate(m *AddressMutation) {
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if i.ClearPhoneNumber2 {
		m.ClearPhoneNumber2()
	}
	if v := i.PhoneNumber2; v != nil {
		m.SetPhoneNumber2(*v)
	}
	if i.ClearVatNumber {
		m.ClearVatNumber()
	}
	if v := i.VatNumber; v != nil {
		m.SetVatNumber(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.Company; v != nil {
		m.SetCompany(*v)
	}
	if v := i.AddressOne; v != nil {
		m.SetAddressOne(*v)
	}
	if v := i.AddressTwo; v != nil {
		m.SetAddressTwo(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if i.ClearState {
		m.ClearState()
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if v := i.Zip; v != nil {
		m.SetZip(*v)
	}
	if i.ClearRecipientColli {
		m.ClearRecipientColli()
	}
	if v := i.AddRecipientColliIDs; len(v) > 0 {
		m.AddRecipientColliIDs(v...)
	}
	if v := i.RemoveRecipientColliIDs; len(v) > 0 {
		m.RemoveRecipientColliIDs(v...)
	}
	if i.ClearRecipientConsolidation {
		m.ClearRecipientConsolidation()
	}
	if v := i.RecipientConsolidationID; v != nil {
		m.SetRecipientConsolidationID(*v)
	}
	if i.ClearCompanyAddress {
		m.ClearCompanyAddress()
	}
	if v := i.AddCompanyAddresIDs; len(v) > 0 {
		m.AddCompanyAddresIDs(v...)
	}
	if v := i.RemoveCompanyAddresIDs; len(v) > 0 {
		m.RemoveCompanyAddresIDs(v...)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
	if i.ClearSenderColli {
		m.ClearSenderColli()
	}
	if v := i.AddSenderColliIDs; len(v) > 0 {
		m.AddSenderColliIDs(v...)
	}
	if v := i.RemoveSenderColliIDs; len(v) > 0 {
		m.RemoveSenderColliIDs(v...)
	}
	if i.ClearSenderConsolidation {
		m.ClearSenderConsolidation()
	}
	if v := i.SenderConsolidationID; v != nil {
		m.SetSenderConsolidationID(*v)
	}
	if i.ClearReturnSenderColli {
		m.ClearReturnSenderColli()
	}
	if v := i.AddReturnSenderColliIDs; len(v) > 0 {
		m.AddReturnSenderColliIDs(v...)
	}
	if v := i.RemoveReturnSenderColliIDs; len(v) > 0 {
		m.RemoveReturnSenderColliIDs(v...)
	}
	if i.ClearReturnRecipientColli {
		m.ClearReturnRecipientColli()
	}
	if v := i.AddReturnRecipientColliIDs; len(v) > 0 {
		m.AddReturnRecipientColliIDs(v...)
	}
	if v := i.RemoveReturnRecipientColliIDs; len(v) > 0 {
		m.RemoveReturnRecipientColliIDs(v...)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the UpdateAddressInput on the AddressUpdate builder.
func (c *AddressUpdate) SetInput(i UpdateAddressInput) *AddressUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAddressInput on the AddressUpdateOne builder.
func (c *AddressUpdateOne) SetInput(i UpdateAddressInput) *AddressUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateAddressGlobalInput represents a mutation input for creating addressglobals.
type CreateAddressGlobalInput struct {
	Company                      *string
	AddressOne                   string
	AddressTwo                   *string
	City                         string
	State                        *string
	Zip                          string
	Latitude                     *float64
	Longitude                    *float64
	ParcelShopPostNordDeliveryID *pulid.ID
	ParcelShopBringDeliveryID    *pulid.ID
	ParcelShopID                 *pulid.ID
	CountryID                    pulid.ID
}

// Mutate applies the CreateAddressGlobalInput on the AddressGlobalMutation builder.
func (i *CreateAddressGlobalInput) Mutate(m *AddressGlobalMutation) {
	if v := i.Company; v != nil {
		m.SetCompany(*v)
	}
	m.SetAddressOne(i.AddressOne)
	if v := i.AddressTwo; v != nil {
		m.SetAddressTwo(*v)
	}
	m.SetCity(i.City)
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	m.SetZip(i.Zip)
	if v := i.Latitude; v != nil {
		m.SetLatitude(*v)
	}
	if v := i.Longitude; v != nil {
		m.SetLongitude(*v)
	}
	if v := i.ParcelShopPostNordDeliveryID; v != nil {
		m.SetParcelShopPostNordDeliveryID(*v)
	}
	if v := i.ParcelShopBringDeliveryID; v != nil {
		m.SetParcelShopBringDeliveryID(*v)
	}
	if v := i.ParcelShopID; v != nil {
		m.SetParcelShopID(*v)
	}
	m.SetCountryID(i.CountryID)
}

// SetInput applies the change-set in the CreateAddressGlobalInput on the AddressGlobalCreate builder.
func (c *AddressGlobalCreate) SetInput(i CreateAddressGlobalInput) *AddressGlobalCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAddressGlobalInput represents a mutation input for updating addressglobals.
type UpdateAddressGlobalInput struct {
	ClearCompany                    bool
	Company                         *string
	AddressOne                      *string
	ClearAddressTwo                 bool
	AddressTwo                      *string
	City                            *string
	ClearState                      bool
	State                           *string
	Zip                             *string
	Latitude                        *float64
	Longitude                       *float64
	ClearParcelShopPostNordDelivery bool
	ParcelShopPostNordDeliveryID    *pulid.ID
	ClearParcelShopBringDelivery    bool
	ParcelShopBringDeliveryID       *pulid.ID
	ClearParcelShop                 bool
	ParcelShopID                    *pulid.ID
	CountryID                       *pulid.ID
}

// Mutate applies the UpdateAddressGlobalInput on the AddressGlobalMutation builder.
func (i *UpdateAddressGlobalInput) Mutate(m *AddressGlobalMutation) {
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.Company; v != nil {
		m.SetCompany(*v)
	}
	if v := i.AddressOne; v != nil {
		m.SetAddressOne(*v)
	}
	if i.ClearAddressTwo {
		m.ClearAddressTwo()
	}
	if v := i.AddressTwo; v != nil {
		m.SetAddressTwo(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if i.ClearState {
		m.ClearState()
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if v := i.Zip; v != nil {
		m.SetZip(*v)
	}
	if v := i.Latitude; v != nil {
		m.SetLatitude(*v)
	}
	if v := i.Longitude; v != nil {
		m.SetLongitude(*v)
	}
	if i.ClearParcelShopPostNordDelivery {
		m.ClearParcelShopPostNordDelivery()
	}
	if v := i.ParcelShopPostNordDeliveryID; v != nil {
		m.SetParcelShopPostNordDeliveryID(*v)
	}
	if i.ClearParcelShopBringDelivery {
		m.ClearParcelShopBringDelivery()
	}
	if v := i.ParcelShopBringDeliveryID; v != nil {
		m.SetParcelShopBringDeliveryID(*v)
	}
	if i.ClearParcelShop {
		m.ClearParcelShop()
	}
	if v := i.ParcelShopID; v != nil {
		m.SetParcelShopID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the UpdateAddressGlobalInput on the AddressGlobalUpdate builder.
func (c *AddressGlobalUpdate) SetInput(i UpdateAddressGlobalInput) *AddressGlobalUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAddressGlobalInput on the AddressGlobalUpdateOne builder.
func (c *AddressGlobalUpdateOne) SetInput(i UpdateAddressGlobalInput) *AddressGlobalUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierAdditionalServiceBringInput represents a mutation input for creating carrieradditionalservicebrings.
type CreateCarrierAdditionalServiceBringInput struct {
	Label                  string
	APICodeBooking         string
	CarrierServiceBringID  *pulid.ID
	DeliveryOptionBringIDs []pulid.ID
}

// Mutate applies the CreateCarrierAdditionalServiceBringInput on the CarrierAdditionalServiceBringMutation builder.
func (i *CreateCarrierAdditionalServiceBringInput) Mutate(m *CarrierAdditionalServiceBringMutation) {
	m.SetLabel(i.Label)
	m.SetAPICodeBooking(i.APICodeBooking)
	if v := i.CarrierServiceBringID; v != nil {
		m.SetCarrierServiceBringID(*v)
	}
	if v := i.DeliveryOptionBringIDs; len(v) > 0 {
		m.AddDeliveryOptionBringIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCarrierAdditionalServiceBringInput on the CarrierAdditionalServiceBringCreate builder.
func (c *CarrierAdditionalServiceBringCreate) SetInput(i CreateCarrierAdditionalServiceBringInput) *CarrierAdditionalServiceBringCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierAdditionalServiceBringInput represents a mutation input for updating carrieradditionalservicebrings.
type UpdateCarrierAdditionalServiceBringInput struct {
	Label                        *string
	APICodeBooking               *string
	ClearCarrierServiceBring     bool
	CarrierServiceBringID        *pulid.ID
	ClearDeliveryOptionBring     bool
	AddDeliveryOptionBringIDs    []pulid.ID
	RemoveDeliveryOptionBringIDs []pulid.ID
}

// Mutate applies the UpdateCarrierAdditionalServiceBringInput on the CarrierAdditionalServiceBringMutation builder.
func (i *UpdateCarrierAdditionalServiceBringInput) Mutate(m *CarrierAdditionalServiceBringMutation) {
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.APICodeBooking; v != nil {
		m.SetAPICodeBooking(*v)
	}
	if i.ClearCarrierServiceBring {
		m.ClearCarrierServiceBring()
	}
	if v := i.CarrierServiceBringID; v != nil {
		m.SetCarrierServiceBringID(*v)
	}
	if i.ClearDeliveryOptionBring {
		m.ClearDeliveryOptionBring()
	}
	if v := i.AddDeliveryOptionBringIDs; len(v) > 0 {
		m.AddDeliveryOptionBringIDs(v...)
	}
	if v := i.RemoveDeliveryOptionBringIDs; len(v) > 0 {
		m.RemoveDeliveryOptionBringIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCarrierAdditionalServiceBringInput on the CarrierAdditionalServiceBringUpdate builder.
func (c *CarrierAdditionalServiceBringUpdate) SetInput(i UpdateCarrierAdditionalServiceBringInput) *CarrierAdditionalServiceBringUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierAdditionalServiceBringInput on the CarrierAdditionalServiceBringUpdateOne builder.
func (c *CarrierAdditionalServiceBringUpdateOne) SetInput(i UpdateCarrierAdditionalServiceBringInput) *CarrierAdditionalServiceBringUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierAdditionalServiceDAOInput represents a mutation input for creating carrieradditionalservicedaos.
type CreateCarrierAdditionalServiceDAOInput struct {
	Label                string
	APICode              string
	CarrierServiceDAOIDs []pulid.ID
	DeliveryOptionDAOIDs []pulid.ID
}

// Mutate applies the CreateCarrierAdditionalServiceDAOInput on the CarrierAdditionalServiceDAOMutation builder.
func (i *CreateCarrierAdditionalServiceDAOInput) Mutate(m *CarrierAdditionalServiceDAOMutation) {
	m.SetLabel(i.Label)
	m.SetAPICode(i.APICode)
	if v := i.CarrierServiceDAOIDs; len(v) > 0 {
		m.AddCarrierServiceDAOIDs(v...)
	}
	if v := i.DeliveryOptionDAOIDs; len(v) > 0 {
		m.AddDeliveryOptionDAOIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCarrierAdditionalServiceDAOInput on the CarrierAdditionalServiceDAOCreate builder.
func (c *CarrierAdditionalServiceDAOCreate) SetInput(i CreateCarrierAdditionalServiceDAOInput) *CarrierAdditionalServiceDAOCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierAdditionalServiceDAOInput represents a mutation input for updating carrieradditionalservicedaos.
type UpdateCarrierAdditionalServiceDAOInput struct {
	Label                      *string
	APICode                    *string
	ClearCarrierServiceDAO     bool
	AddCarrierServiceDAOIDs    []pulid.ID
	RemoveCarrierServiceDAOIDs []pulid.ID
	ClearDeliveryOptionDAO     bool
	AddDeliveryOptionDAOIDs    []pulid.ID
	RemoveDeliveryOptionDAOIDs []pulid.ID
}

// Mutate applies the UpdateCarrierAdditionalServiceDAOInput on the CarrierAdditionalServiceDAOMutation builder.
func (i *UpdateCarrierAdditionalServiceDAOInput) Mutate(m *CarrierAdditionalServiceDAOMutation) {
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.APICode; v != nil {
		m.SetAPICode(*v)
	}
	if i.ClearCarrierServiceDAO {
		m.ClearCarrierServiceDAO()
	}
	if v := i.AddCarrierServiceDAOIDs; len(v) > 0 {
		m.AddCarrierServiceDAOIDs(v...)
	}
	if v := i.RemoveCarrierServiceDAOIDs; len(v) > 0 {
		m.RemoveCarrierServiceDAOIDs(v...)
	}
	if i.ClearDeliveryOptionDAO {
		m.ClearDeliveryOptionDAO()
	}
	if v := i.AddDeliveryOptionDAOIDs; len(v) > 0 {
		m.AddDeliveryOptionDAOIDs(v...)
	}
	if v := i.RemoveDeliveryOptionDAOIDs; len(v) > 0 {
		m.RemoveDeliveryOptionDAOIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCarrierAdditionalServiceDAOInput on the CarrierAdditionalServiceDAOUpdate builder.
func (c *CarrierAdditionalServiceDAOUpdate) SetInput(i UpdateCarrierAdditionalServiceDAOInput) *CarrierAdditionalServiceDAOUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierAdditionalServiceDAOInput on the CarrierAdditionalServiceDAOUpdateOne builder.
func (c *CarrierAdditionalServiceDAOUpdateOne) SetInput(i UpdateCarrierAdditionalServiceDAOInput) *CarrierAdditionalServiceDAOUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierAdditionalServiceDSVInput represents a mutation input for creating carrieradditionalservicedsvs.
type CreateCarrierAdditionalServiceDSVInput struct {
	Label                string
	APICode              string
	CarrierServiceDSVIDs []pulid.ID
	DeliveryOptionDSVIDs []pulid.ID
}

// Mutate applies the CreateCarrierAdditionalServiceDSVInput on the CarrierAdditionalServiceDSVMutation builder.
func (i *CreateCarrierAdditionalServiceDSVInput) Mutate(m *CarrierAdditionalServiceDSVMutation) {
	m.SetLabel(i.Label)
	m.SetAPICode(i.APICode)
	if v := i.CarrierServiceDSVIDs; len(v) > 0 {
		m.AddCarrierServiceDSVIDs(v...)
	}
	if v := i.DeliveryOptionDSVIDs; len(v) > 0 {
		m.AddDeliveryOptionDSVIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCarrierAdditionalServiceDSVInput on the CarrierAdditionalServiceDSVCreate builder.
func (c *CarrierAdditionalServiceDSVCreate) SetInput(i CreateCarrierAdditionalServiceDSVInput) *CarrierAdditionalServiceDSVCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierAdditionalServiceDSVInput represents a mutation input for updating carrieradditionalservicedsvs.
type UpdateCarrierAdditionalServiceDSVInput struct {
	Label                      *string
	APICode                    *string
	ClearCarrierServiceDSV     bool
	AddCarrierServiceDSVIDs    []pulid.ID
	RemoveCarrierServiceDSVIDs []pulid.ID
	ClearDeliveryOptionDSV     bool
	AddDeliveryOptionDSVIDs    []pulid.ID
	RemoveDeliveryOptionDSVIDs []pulid.ID
}

// Mutate applies the UpdateCarrierAdditionalServiceDSVInput on the CarrierAdditionalServiceDSVMutation builder.
func (i *UpdateCarrierAdditionalServiceDSVInput) Mutate(m *CarrierAdditionalServiceDSVMutation) {
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.APICode; v != nil {
		m.SetAPICode(*v)
	}
	if i.ClearCarrierServiceDSV {
		m.ClearCarrierServiceDSV()
	}
	if v := i.AddCarrierServiceDSVIDs; len(v) > 0 {
		m.AddCarrierServiceDSVIDs(v...)
	}
	if v := i.RemoveCarrierServiceDSVIDs; len(v) > 0 {
		m.RemoveCarrierServiceDSVIDs(v...)
	}
	if i.ClearDeliveryOptionDSV {
		m.ClearDeliveryOptionDSV()
	}
	if v := i.AddDeliveryOptionDSVIDs; len(v) > 0 {
		m.AddDeliveryOptionDSVIDs(v...)
	}
	if v := i.RemoveDeliveryOptionDSVIDs; len(v) > 0 {
		m.RemoveDeliveryOptionDSVIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCarrierAdditionalServiceDSVInput on the CarrierAdditionalServiceDSVUpdate builder.
func (c *CarrierAdditionalServiceDSVUpdate) SetInput(i UpdateCarrierAdditionalServiceDSVInput) *CarrierAdditionalServiceDSVUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierAdditionalServiceDSVInput on the CarrierAdditionalServiceDSVUpdateOne builder.
func (c *CarrierAdditionalServiceDSVUpdateOne) SetInput(i UpdateCarrierAdditionalServiceDSVInput) *CarrierAdditionalServiceDSVUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierAdditionalServiceGLSInput represents a mutation input for creating carrieradditionalserviceglss.
type CreateCarrierAdditionalServiceGLSInput struct {
	Label                 string
	Mandatory             bool
	AllCountriesConsignor *bool
	AllCountriesConsignee *bool
	InternalID            string
	CarrierServiceGLSID   *pulid.ID
	DeliveryOptionGlIDs   []pulid.ID
	CountriesConsigneeIDs []pulid.ID
	CountriesConsignorIDs []pulid.ID
}

// Mutate applies the CreateCarrierAdditionalServiceGLSInput on the CarrierAdditionalServiceGLSMutation builder.
func (i *CreateCarrierAdditionalServiceGLSInput) Mutate(m *CarrierAdditionalServiceGLSMutation) {
	m.SetLabel(i.Label)
	m.SetMandatory(i.Mandatory)
	if v := i.AllCountriesConsignor; v != nil {
		m.SetAllCountriesConsignor(*v)
	}
	if v := i.AllCountriesConsignee; v != nil {
		m.SetAllCountriesConsignee(*v)
	}
	m.SetInternalID(i.InternalID)
	if v := i.CarrierServiceGLSID; v != nil {
		m.SetCarrierServiceGLSID(*v)
	}
	if v := i.DeliveryOptionGlIDs; len(v) > 0 {
		m.AddDeliveryOptionGlIDs(v...)
	}
	if v := i.CountriesConsigneeIDs; len(v) > 0 {
		m.AddCountriesConsigneeIDs(v...)
	}
	if v := i.CountriesConsignorIDs; len(v) > 0 {
		m.AddCountriesConsignorIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCarrierAdditionalServiceGLSInput on the CarrierAdditionalServiceGLSCreate builder.
func (c *CarrierAdditionalServiceGLSCreate) SetInput(i CreateCarrierAdditionalServiceGLSInput) *CarrierAdditionalServiceGLSCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierAdditionalServiceGLSInput represents a mutation input for updating carrieradditionalserviceglss.
type UpdateCarrierAdditionalServiceGLSInput struct {
	Label                       *string
	Mandatory                   *bool
	AllCountriesConsignor       *bool
	AllCountriesConsignee       *bool
	InternalID                  *string
	ClearCarrierServiceGLS      bool
	CarrierServiceGLSID         *pulid.ID
	ClearDeliveryOptionGLS      bool
	AddDeliveryOptionGlIDs      []pulid.ID
	RemoveDeliveryOptionGlIDs   []pulid.ID
	ClearCountriesConsignee     bool
	AddCountriesConsigneeIDs    []pulid.ID
	RemoveCountriesConsigneeIDs []pulid.ID
	ClearCountriesConsignor     bool
	AddCountriesConsignorIDs    []pulid.ID
	RemoveCountriesConsignorIDs []pulid.ID
}

// Mutate applies the UpdateCarrierAdditionalServiceGLSInput on the CarrierAdditionalServiceGLSMutation builder.
func (i *UpdateCarrierAdditionalServiceGLSInput) Mutate(m *CarrierAdditionalServiceGLSMutation) {
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.Mandatory; v != nil {
		m.SetMandatory(*v)
	}
	if v := i.AllCountriesConsignor; v != nil {
		m.SetAllCountriesConsignor(*v)
	}
	if v := i.AllCountriesConsignee; v != nil {
		m.SetAllCountriesConsignee(*v)
	}
	if v := i.InternalID; v != nil {
		m.SetInternalID(*v)
	}
	if i.ClearCarrierServiceGLS {
		m.ClearCarrierServiceGLS()
	}
	if v := i.CarrierServiceGLSID; v != nil {
		m.SetCarrierServiceGLSID(*v)
	}
	if i.ClearDeliveryOptionGLS {
		m.ClearDeliveryOptionGLS()
	}
	if v := i.AddDeliveryOptionGlIDs; len(v) > 0 {
		m.AddDeliveryOptionGlIDs(v...)
	}
	if v := i.RemoveDeliveryOptionGlIDs; len(v) > 0 {
		m.RemoveDeliveryOptionGlIDs(v...)
	}
	if i.ClearCountriesConsignee {
		m.ClearCountriesConsignee()
	}
	if v := i.AddCountriesConsigneeIDs; len(v) > 0 {
		m.AddCountriesConsigneeIDs(v...)
	}
	if v := i.RemoveCountriesConsigneeIDs; len(v) > 0 {
		m.RemoveCountriesConsigneeIDs(v...)
	}
	if i.ClearCountriesConsignor {
		m.ClearCountriesConsignor()
	}
	if v := i.AddCountriesConsignorIDs; len(v) > 0 {
		m.AddCountriesConsignorIDs(v...)
	}
	if v := i.RemoveCountriesConsignorIDs; len(v) > 0 {
		m.RemoveCountriesConsignorIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCarrierAdditionalServiceGLSInput on the CarrierAdditionalServiceGLSUpdate builder.
func (c *CarrierAdditionalServiceGLSUpdate) SetInput(i UpdateCarrierAdditionalServiceGLSInput) *CarrierAdditionalServiceGLSUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierAdditionalServiceGLSInput on the CarrierAdditionalServiceGLSUpdateOne builder.
func (c *CarrierAdditionalServiceGLSUpdateOne) SetInput(i UpdateCarrierAdditionalServiceGLSInput) *CarrierAdditionalServiceGLSUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierBringInput represents a mutation input for creating carrierbrings.
type CreateCarrierBringInput struct {
	APIKey         *string
	CustomerNumber *string
	Test           *bool
	CarrierID      pulid.ID
}

// Mutate applies the CreateCarrierBringInput on the CarrierBringMutation builder.
func (i *CreateCarrierBringInput) Mutate(m *CarrierBringMutation) {
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if v := i.CustomerNumber; v != nil {
		m.SetCustomerNumber(*v)
	}
	if v := i.Test; v != nil {
		m.SetTest(*v)
	}
	m.SetCarrierID(i.CarrierID)
}

// SetInput applies the change-set in the CreateCarrierBringInput on the CarrierBringCreate builder.
func (c *CarrierBringCreate) SetInput(i CreateCarrierBringInput) *CarrierBringCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierBringInput represents a mutation input for updating carrierbrings.
type UpdateCarrierBringInput struct {
	ClearAPIKey         bool
	APIKey              *string
	ClearCustomerNumber bool
	CustomerNumber      *string
	Test                *bool
	CarrierID           *pulid.ID
}

// Mutate applies the UpdateCarrierBringInput on the CarrierBringMutation builder.
func (i *UpdateCarrierBringInput) Mutate(m *CarrierBringMutation) {
	if i.ClearAPIKey {
		m.ClearAPIKey()
	}
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if i.ClearCustomerNumber {
		m.ClearCustomerNumber()
	}
	if v := i.CustomerNumber; v != nil {
		m.SetCustomerNumber(*v)
	}
	if v := i.Test; v != nil {
		m.SetTest(*v)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarrierBringInput on the CarrierBringUpdate builder.
func (c *CarrierBringUpdate) SetInput(i UpdateCarrierBringInput) *CarrierBringUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierBringInput on the CarrierBringUpdateOne builder.
func (c *CarrierBringUpdateOne) SetInput(i UpdateCarrierBringInput) *CarrierBringUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierDAOInput represents a mutation input for creating carrierdaos.
type CreateCarrierDAOInput struct {
	CustomerID *string
	APIKey     *string
	Test       *bool
	CarrierID  pulid.ID
}

// Mutate applies the CreateCarrierDAOInput on the CarrierDAOMutation builder.
func (i *CreateCarrierDAOInput) Mutate(m *CarrierDAOMutation) {
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if v := i.Test; v != nil {
		m.SetTest(*v)
	}
	m.SetCarrierID(i.CarrierID)
}

// SetInput applies the change-set in the CreateCarrierDAOInput on the CarrierDAOCreate builder.
func (c *CarrierDAOCreate) SetInput(i CreateCarrierDAOInput) *CarrierDAOCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierDAOInput represents a mutation input for updating carrierdaos.
type UpdateCarrierDAOInput struct {
	ClearCustomerID bool
	CustomerID      *string
	ClearAPIKey     bool
	APIKey          *string
	Test            *bool
	CarrierID       *pulid.ID
}

// Mutate applies the UpdateCarrierDAOInput on the CarrierDAOMutation builder.
func (i *UpdateCarrierDAOInput) Mutate(m *CarrierDAOMutation) {
	if i.ClearCustomerID {
		m.ClearCustomerID()
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if i.ClearAPIKey {
		m.ClearAPIKey()
	}
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if v := i.Test; v != nil {
		m.SetTest(*v)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarrierDAOInput on the CarrierDAOUpdate builder.
func (c *CarrierDAOUpdate) SetInput(i UpdateCarrierDAOInput) *CarrierDAOUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierDAOInput on the CarrierDAOUpdateOne builder.
func (c *CarrierDAOUpdateOne) SetInput(i UpdateCarrierDAOInput) *CarrierDAOUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierDFInput represents a mutation input for creating carrierdfs.
type CreateCarrierDFInput struct {
	CustomerID      string
	AgreementNumber string
	WhoPays         *carrierdf.WhoPays
	Test            *bool
	CarrierID       pulid.ID
}

// Mutate applies the CreateCarrierDFInput on the CarrierDFMutation builder.
func (i *CreateCarrierDFInput) Mutate(m *CarrierDFMutation) {
	m.SetCustomerID(i.CustomerID)
	m.SetAgreementNumber(i.AgreementNumber)
	if v := i.WhoPays; v != nil {
		m.SetWhoPays(*v)
	}
	if v := i.Test; v != nil {
		m.SetTest(*v)
	}
	m.SetCarrierID(i.CarrierID)
}

// SetInput applies the change-set in the CreateCarrierDFInput on the CarrierDFCreate builder.
func (c *CarrierDFCreate) SetInput(i CreateCarrierDFInput) *CarrierDFCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierDFInput represents a mutation input for updating carrierdfs.
type UpdateCarrierDFInput struct {
	CustomerID      *string
	AgreementNumber *string
	WhoPays         *carrierdf.WhoPays
	Test            *bool
	CarrierID       *pulid.ID
}

// Mutate applies the UpdateCarrierDFInput on the CarrierDFMutation builder.
func (i *UpdateCarrierDFInput) Mutate(m *CarrierDFMutation) {
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if v := i.AgreementNumber; v != nil {
		m.SetAgreementNumber(*v)
	}
	if v := i.WhoPays; v != nil {
		m.SetWhoPays(*v)
	}
	if v := i.Test; v != nil {
		m.SetTest(*v)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarrierDFInput on the CarrierDFUpdate builder.
func (c *CarrierDFUpdate) SetInput(i UpdateCarrierDFInput) *CarrierDFUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierDFInput on the CarrierDFUpdateOne builder.
func (c *CarrierDFUpdateOne) SetInput(i UpdateCarrierDFInput) *CarrierDFUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierDSVInput represents a mutation input for creating carrierdsvs.
type CreateCarrierDSVInput struct {
	CarrierID pulid.ID
}

// Mutate applies the CreateCarrierDSVInput on the CarrierDSVMutation builder.
func (i *CreateCarrierDSVInput) Mutate(m *CarrierDSVMutation) {
	m.SetCarrierID(i.CarrierID)
}

// SetInput applies the change-set in the CreateCarrierDSVInput on the CarrierDSVCreate builder.
func (c *CarrierDSVCreate) SetInput(i CreateCarrierDSVInput) *CarrierDSVCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierDSVInput represents a mutation input for updating carrierdsvs.
type UpdateCarrierDSVInput struct {
	CarrierID *pulid.ID
}

// Mutate applies the UpdateCarrierDSVInput on the CarrierDSVMutation builder.
func (i *UpdateCarrierDSVInput) Mutate(m *CarrierDSVMutation) {
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarrierDSVInput on the CarrierDSVUpdate builder.
func (c *CarrierDSVUpdate) SetInput(i UpdateCarrierDSVInput) *CarrierDSVUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierDSVInput on the CarrierDSVUpdateOne builder.
func (c *CarrierDSVUpdateOne) SetInput(i UpdateCarrierDSVInput) *CarrierDSVUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierEasyPostInput represents a mutation input for creating carriereasyposts.
type CreateCarrierEasyPostInput struct {
	APIKey          string
	Test            *bool
	CarrierAccounts []string
	CarrierID       pulid.ID
}

// Mutate applies the CreateCarrierEasyPostInput on the CarrierEasyPostMutation builder.
func (i *CreateCarrierEasyPostInput) Mutate(m *CarrierEasyPostMutation) {
	m.SetAPIKey(i.APIKey)
	if v := i.Test; v != nil {
		m.SetTest(*v)
	}
	if v := i.CarrierAccounts; v != nil {
		m.SetCarrierAccounts(v)
	}
	m.SetCarrierID(i.CarrierID)
}

// SetInput applies the change-set in the CreateCarrierEasyPostInput on the CarrierEasyPostCreate builder.
func (c *CarrierEasyPostCreate) SetInput(i CreateCarrierEasyPostInput) *CarrierEasyPostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierEasyPostInput represents a mutation input for updating carriereasyposts.
type UpdateCarrierEasyPostInput struct {
	APIKey                *string
	Test                  *bool
	CarrierAccounts       []string
	AppendCarrierAccounts []string
	CarrierID             *pulid.ID
}

// Mutate applies the UpdateCarrierEasyPostInput on the CarrierEasyPostMutation builder.
func (i *UpdateCarrierEasyPostInput) Mutate(m *CarrierEasyPostMutation) {
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if v := i.Test; v != nil {
		m.SetTest(*v)
	}
	if v := i.CarrierAccounts; v != nil {
		m.SetCarrierAccounts(v)
	}
	if i.AppendCarrierAccounts != nil {
		m.AppendCarrierAccounts(i.CarrierAccounts)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarrierEasyPostInput on the CarrierEasyPostUpdate builder.
func (c *CarrierEasyPostUpdate) SetInput(i UpdateCarrierEasyPostInput) *CarrierEasyPostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierEasyPostInput on the CarrierEasyPostUpdateOne builder.
func (c *CarrierEasyPostUpdateOne) SetInput(i UpdateCarrierEasyPostInput) *CarrierEasyPostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierGLSInput represents a mutation input for creating carrierglss.
type CreateCarrierGLSInput struct {
	ContactID                *string
	GLSUsername              *string
	GLSPassword              *string
	CustomerID               *string
	GLSCountryCode           *string
	SyncShipmentCancellation *bool
	PrintErrorOnLabel        *bool
	CarrierID                pulid.ID
}

// Mutate applies the CreateCarrierGLSInput on the CarrierGLSMutation builder.
func (i *CreateCarrierGLSInput) Mutate(m *CarrierGLSMutation) {
	if v := i.ContactID; v != nil {
		m.SetContactID(*v)
	}
	if v := i.GLSUsername; v != nil {
		m.SetGLSUsername(*v)
	}
	if v := i.GLSPassword; v != nil {
		m.SetGLSPassword(*v)
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if v := i.GLSCountryCode; v != nil {
		m.SetGLSCountryCode(*v)
	}
	if v := i.SyncShipmentCancellation; v != nil {
		m.SetSyncShipmentCancellation(*v)
	}
	if v := i.PrintErrorOnLabel; v != nil {
		m.SetPrintErrorOnLabel(*v)
	}
	m.SetCarrierID(i.CarrierID)
}

// SetInput applies the change-set in the CreateCarrierGLSInput on the CarrierGLSCreate builder.
func (c *CarrierGLSCreate) SetInput(i CreateCarrierGLSInput) *CarrierGLSCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierGLSInput represents a mutation input for updating carrierglss.
type UpdateCarrierGLSInput struct {
	ClearContactID                bool
	ContactID                     *string
	ClearGLSUsername              bool
	GLSUsername                   *string
	ClearGLSPassword              bool
	GLSPassword                   *string
	ClearCustomerID               bool
	CustomerID                    *string
	ClearGLSCountryCode           bool
	GLSCountryCode                *string
	ClearSyncShipmentCancellation bool
	SyncShipmentCancellation      *bool
	ClearPrintErrorOnLabel        bool
	PrintErrorOnLabel             *bool
	CarrierID                     *pulid.ID
}

// Mutate applies the UpdateCarrierGLSInput on the CarrierGLSMutation builder.
func (i *UpdateCarrierGLSInput) Mutate(m *CarrierGLSMutation) {
	if i.ClearContactID {
		m.ClearContactID()
	}
	if v := i.ContactID; v != nil {
		m.SetContactID(*v)
	}
	if i.ClearGLSUsername {
		m.ClearGLSUsername()
	}
	if v := i.GLSUsername; v != nil {
		m.SetGLSUsername(*v)
	}
	if i.ClearGLSPassword {
		m.ClearGLSPassword()
	}
	if v := i.GLSPassword; v != nil {
		m.SetGLSPassword(*v)
	}
	if i.ClearCustomerID {
		m.ClearCustomerID()
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if i.ClearGLSCountryCode {
		m.ClearGLSCountryCode()
	}
	if v := i.GLSCountryCode; v != nil {
		m.SetGLSCountryCode(*v)
	}
	if i.ClearSyncShipmentCancellation {
		m.ClearSyncShipmentCancellation()
	}
	if v := i.SyncShipmentCancellation; v != nil {
		m.SetSyncShipmentCancellation(*v)
	}
	if i.ClearPrintErrorOnLabel {
		m.ClearPrintErrorOnLabel()
	}
	if v := i.PrintErrorOnLabel; v != nil {
		m.SetPrintErrorOnLabel(*v)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarrierGLSInput on the CarrierGLSUpdate builder.
func (c *CarrierGLSUpdate) SetInput(i UpdateCarrierGLSInput) *CarrierGLSUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierGLSInput on the CarrierGLSUpdateOne builder.
func (c *CarrierGLSUpdateOne) SetInput(i UpdateCarrierGLSInput) *CarrierGLSUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierPostNordInput represents a mutation input for creating carrierpostnords.
type CreateCarrierPostNordInput struct {
	CustomerNumber *string
	CarrierID      pulid.ID
}

// Mutate applies the CreateCarrierPostNordInput on the CarrierPostNordMutation builder.
func (i *CreateCarrierPostNordInput) Mutate(m *CarrierPostNordMutation) {
	if v := i.CustomerNumber; v != nil {
		m.SetCustomerNumber(*v)
	}
	m.SetCarrierID(i.CarrierID)
}

// SetInput applies the change-set in the CreateCarrierPostNordInput on the CarrierPostNordCreate builder.
func (c *CarrierPostNordCreate) SetInput(i CreateCarrierPostNordInput) *CarrierPostNordCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierPostNordInput represents a mutation input for updating carrierpostnords.
type UpdateCarrierPostNordInput struct {
	CustomerNumber *string
	CarrierID      *pulid.ID
}

// Mutate applies the UpdateCarrierPostNordInput on the CarrierPostNordMutation builder.
func (i *UpdateCarrierPostNordInput) Mutate(m *CarrierPostNordMutation) {
	if v := i.CustomerNumber; v != nil {
		m.SetCustomerNumber(*v)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarrierPostNordInput on the CarrierPostNordUpdate builder.
func (c *CarrierPostNordUpdate) SetInput(i UpdateCarrierPostNordInput) *CarrierPostNordUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierPostNordInput on the CarrierPostNordUpdateOne builder.
func (c *CarrierPostNordUpdateOne) SetInput(i UpdateCarrierPostNordInput) *CarrierPostNordUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarrierUSPSInput represents a mutation input for creating carrieruspss.
type CreateCarrierUSPSInput struct {
	IsTestAPI        *bool
	ConsumerKey      *string
	ConsumerSecret   *string
	Mid              *string
	ManifestMid      *string
	Crid             *string
	EpsAccountNumber *string
	CarrierID        pulid.ID
}

// Mutate applies the CreateCarrierUSPSInput on the CarrierUSPSMutation builder.
func (i *CreateCarrierUSPSInput) Mutate(m *CarrierUSPSMutation) {
	if v := i.IsTestAPI; v != nil {
		m.SetIsTestAPI(*v)
	}
	if v := i.ConsumerKey; v != nil {
		m.SetConsumerKey(*v)
	}
	if v := i.ConsumerSecret; v != nil {
		m.SetConsumerSecret(*v)
	}
	if v := i.Mid; v != nil {
		m.SetMid(*v)
	}
	if v := i.ManifestMid; v != nil {
		m.SetManifestMid(*v)
	}
	if v := i.Crid; v != nil {
		m.SetCrid(*v)
	}
	if v := i.EpsAccountNumber; v != nil {
		m.SetEpsAccountNumber(*v)
	}
	m.SetCarrierID(i.CarrierID)
}

// SetInput applies the change-set in the CreateCarrierUSPSInput on the CarrierUSPSCreate builder.
func (c *CarrierUSPSCreate) SetInput(i CreateCarrierUSPSInput) *CarrierUSPSCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarrierUSPSInput represents a mutation input for updating carrieruspss.
type UpdateCarrierUSPSInput struct {
	IsTestAPI             *bool
	ClearConsumerKey      bool
	ConsumerKey           *string
	ClearConsumerSecret   bool
	ConsumerSecret        *string
	ClearMid              bool
	Mid                   *string
	ClearManifestMid      bool
	ManifestMid           *string
	ClearCrid             bool
	Crid                  *string
	ClearEpsAccountNumber bool
	EpsAccountNumber      *string
	CarrierID             *pulid.ID
}

// Mutate applies the UpdateCarrierUSPSInput on the CarrierUSPSMutation builder.
func (i *UpdateCarrierUSPSInput) Mutate(m *CarrierUSPSMutation) {
	if v := i.IsTestAPI; v != nil {
		m.SetIsTestAPI(*v)
	}
	if i.ClearConsumerKey {
		m.ClearConsumerKey()
	}
	if v := i.ConsumerKey; v != nil {
		m.SetConsumerKey(*v)
	}
	if i.ClearConsumerSecret {
		m.ClearConsumerSecret()
	}
	if v := i.ConsumerSecret; v != nil {
		m.SetConsumerSecret(*v)
	}
	if i.ClearMid {
		m.ClearMid()
	}
	if v := i.Mid; v != nil {
		m.SetMid(*v)
	}
	if i.ClearManifestMid {
		m.ClearManifestMid()
	}
	if v := i.ManifestMid; v != nil {
		m.SetManifestMid(*v)
	}
	if i.ClearCrid {
		m.ClearCrid()
	}
	if v := i.Crid; v != nil {
		m.SetCrid(*v)
	}
	if i.ClearEpsAccountNumber {
		m.ClearEpsAccountNumber()
	}
	if v := i.EpsAccountNumber; v != nil {
		m.SetEpsAccountNumber(*v)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
}

// SetInput applies the change-set in the UpdateCarrierUSPSInput on the CarrierUSPSUpdate builder.
func (c *CarrierUSPSUpdate) SetInput(i UpdateCarrierUSPSInput) *CarrierUSPSUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarrierUSPSInput on the CarrierUSPSUpdateOne builder.
func (c *CarrierUSPSUpdateOne) SetInput(i UpdateCarrierUSPSInput) *CarrierUSPSUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateColliInput represents a mutation input for creating collis.
type CreateColliInput struct {
	InternalBarcode            *int64
	SlipPrintStatus            *colli.SlipPrintStatus
	DeliveryOptionID           *pulid.ID
	DocumentFileIDs            []pulid.ID
	ShipmentParcelID           *pulid.ID
	CancelledShipmentParcelIDs []pulid.ID
	OrderID                    pulid.ID
	PackagingID                *pulid.ID
	PrintJobIDs                []pulid.ID
}

// Mutate applies the CreateColliInput on the ColliMutation builder.
func (i *CreateColliInput) Mutate(m *ColliMutation) {
	if v := i.InternalBarcode; v != nil {
		m.SetInternalBarcode(*v)
	}
	if v := i.SlipPrintStatus; v != nil {
		m.SetSlipPrintStatus(*v)
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if v := i.DocumentFileIDs; len(v) > 0 {
		m.AddDocumentFileIDs(v...)
	}
	if v := i.ShipmentParcelID; v != nil {
		m.SetShipmentParcelID(*v)
	}
	if v := i.CancelledShipmentParcelIDs; len(v) > 0 {
		m.AddCancelledShipmentParcelIDs(v...)
	}
	m.SetOrderID(i.OrderID)
	if v := i.PackagingID; v != nil {
		m.SetPackagingID(*v)
	}
	if v := i.PrintJobIDs; len(v) > 0 {
		m.AddPrintJobIDs(v...)
	}
}

// SetInput applies the change-set in the CreateColliInput on the ColliCreate builder.
func (c *ColliCreate) SetInput(i CreateColliInput) *ColliCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateColliInput represents a mutation input for updating collis.
type UpdateColliInput struct {
	ClearInternalBarcode             bool
	InternalBarcode                  *int64
	SlipPrintStatus                  *colli.SlipPrintStatus
	ClearDeliveryOption              bool
	DeliveryOptionID                 *pulid.ID
	ClearDocumentFile                bool
	AddDocumentFileIDs               []pulid.ID
	RemoveDocumentFileIDs            []pulid.ID
	ClearShipmentParcel              bool
	ShipmentParcelID                 *pulid.ID
	ClearCancelledShipmentParcel     bool
	AddCancelledShipmentParcelIDs    []pulid.ID
	RemoveCancelledShipmentParcelIDs []pulid.ID
	OrderID                          *pulid.ID
	ClearPackaging                   bool
	PackagingID                      *pulid.ID
	ClearPrintJob                    bool
	AddPrintJobIDs                   []pulid.ID
	RemovePrintJobIDs                []pulid.ID
}

// Mutate applies the UpdateColliInput on the ColliMutation builder.
func (i *UpdateColliInput) Mutate(m *ColliMutation) {
	if i.ClearInternalBarcode {
		m.ClearInternalBarcode()
	}
	if v := i.InternalBarcode; v != nil {
		m.SetInternalBarcode(*v)
	}
	if v := i.SlipPrintStatus; v != nil {
		m.SetSlipPrintStatus(*v)
	}
	if i.ClearDeliveryOption {
		m.ClearDeliveryOption()
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if i.ClearDocumentFile {
		m.ClearDocumentFile()
	}
	if v := i.AddDocumentFileIDs; len(v) > 0 {
		m.AddDocumentFileIDs(v...)
	}
	if v := i.RemoveDocumentFileIDs; len(v) > 0 {
		m.RemoveDocumentFileIDs(v...)
	}
	if i.ClearShipmentParcel {
		m.ClearShipmentParcel()
	}
	if v := i.ShipmentParcelID; v != nil {
		m.SetShipmentParcelID(*v)
	}
	if i.ClearCancelledShipmentParcel {
		m.ClearCancelledShipmentParcel()
	}
	if v := i.AddCancelledShipmentParcelIDs; len(v) > 0 {
		m.AddCancelledShipmentParcelIDs(v...)
	}
	if v := i.RemoveCancelledShipmentParcelIDs; len(v) > 0 {
		m.RemoveCancelledShipmentParcelIDs(v...)
	}
	if v := i.OrderID; v != nil {
		m.SetOrderID(*v)
	}
	if i.ClearPackaging {
		m.ClearPackaging()
	}
	if v := i.PackagingID; v != nil {
		m.SetPackagingID(*v)
	}
	if i.ClearPrintJob {
		m.ClearPrintJob()
	}
	if v := i.AddPrintJobIDs; len(v) > 0 {
		m.AddPrintJobIDs(v...)
	}
	if v := i.RemovePrintJobIDs; len(v) > 0 {
		m.RemovePrintJobIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateColliInput on the ColliUpdate builder.
func (c *ColliUpdate) SetInput(i UpdateColliInput) *ColliUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateColliInput on the ColliUpdateOne builder.
func (c *ColliUpdateOne) SetInput(i UpdateColliInput) *ColliUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateConnectOptionCarrierInput represents a mutation input for creating connectoptioncarriers.
type CreateConnectOptionCarrierInput struct {
	Name      string
	TenantIDs []pulid.ID
}

// Mutate applies the CreateConnectOptionCarrierInput on the ConnectOptionCarrierMutation builder.
func (i *CreateConnectOptionCarrierInput) Mutate(m *ConnectOptionCarrierMutation) {
	m.SetName(i.Name)
	if v := i.TenantIDs; len(v) > 0 {
		m.AddTenantIDs(v...)
	}
}

// SetInput applies the change-set in the CreateConnectOptionCarrierInput on the ConnectOptionCarrierCreate builder.
func (c *ConnectOptionCarrierCreate) SetInput(i CreateConnectOptionCarrierInput) *ConnectOptionCarrierCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateConnectOptionCarrierInput represents a mutation input for updating connectoptioncarriers.
type UpdateConnectOptionCarrierInput struct {
	Name            *string
	ClearTenant     bool
	AddTenantIDs    []pulid.ID
	RemoveTenantIDs []pulid.ID
}

// Mutate applies the UpdateConnectOptionCarrierInput on the ConnectOptionCarrierMutation builder.
func (i *UpdateConnectOptionCarrierInput) Mutate(m *ConnectOptionCarrierMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearTenant {
		m.ClearTenant()
	}
	if v := i.AddTenantIDs; len(v) > 0 {
		m.AddTenantIDs(v...)
	}
	if v := i.RemoveTenantIDs; len(v) > 0 {
		m.RemoveTenantIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateConnectOptionCarrierInput on the ConnectOptionCarrierUpdate builder.
func (c *ConnectOptionCarrierUpdate) SetInput(i UpdateConnectOptionCarrierInput) *ConnectOptionCarrierUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateConnectOptionCarrierInput on the ConnectOptionCarrierUpdateOne builder.
func (c *ConnectOptionCarrierUpdateOne) SetInput(i UpdateConnectOptionCarrierInput) *ConnectOptionCarrierUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateConnectOptionPlatformInput represents a mutation input for creating connectoptionplatforms.
type CreateConnectOptionPlatformInput struct {
	Name      string
	TenantIDs []pulid.ID
}

// Mutate applies the CreateConnectOptionPlatformInput on the ConnectOptionPlatformMutation builder.
func (i *CreateConnectOptionPlatformInput) Mutate(m *ConnectOptionPlatformMutation) {
	m.SetName(i.Name)
	if v := i.TenantIDs; len(v) > 0 {
		m.AddTenantIDs(v...)
	}
}

// SetInput applies the change-set in the CreateConnectOptionPlatformInput on the ConnectOptionPlatformCreate builder.
func (c *ConnectOptionPlatformCreate) SetInput(i CreateConnectOptionPlatformInput) *ConnectOptionPlatformCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateConnectOptionPlatformInput represents a mutation input for updating connectoptionplatforms.
type UpdateConnectOptionPlatformInput struct {
	Name            *string
	ClearTenant     bool
	AddTenantIDs    []pulid.ID
	RemoveTenantIDs []pulid.ID
}

// Mutate applies the UpdateConnectOptionPlatformInput on the ConnectOptionPlatformMutation builder.
func (i *UpdateConnectOptionPlatformInput) Mutate(m *ConnectOptionPlatformMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearTenant {
		m.ClearTenant()
	}
	if v := i.AddTenantIDs; len(v) > 0 {
		m.AddTenantIDs(v...)
	}
	if v := i.RemoveTenantIDs; len(v) > 0 {
		m.RemoveTenantIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateConnectOptionPlatformInput on the ConnectOptionPlatformUpdate builder.
func (c *ConnectOptionPlatformUpdate) SetInput(i UpdateConnectOptionPlatformInput) *ConnectOptionPlatformUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateConnectOptionPlatformInput on the ConnectOptionPlatformUpdateOne builder.
func (c *ConnectOptionPlatformUpdateOne) SetInput(i UpdateConnectOptionPlatformInput) *ConnectOptionPlatformUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateConnectionInput represents a mutation input for creating connections.
type CreateConnectionInput struct {
	Name                    string
	SyncOrders              *bool
	SyncProducts            *bool
	FulfillAutomatically    *bool
	DispatchAutomatically   *bool
	ConvertCurrency         *bool
	AutoPrintParcelSlip     *bool
	ConnectionShopifyID     *pulid.ID
	OrderIDs                []pulid.ID
	SenderLocationID        pulid.ID
	PickupLocationID        pulid.ID
	ReturnLocationID        pulid.ID
	SellerLocationID        pulid.ID
	DeliveryOptionIDs       []pulid.ID
	DefaultDeliveryOptionID *pulid.ID
	ReturnPortalID          *pulid.ID
	HypothesisTestIDs       []pulid.ID
	NotificationIDs         []pulid.ID
	CurrencyID              pulid.ID
	PackingSlipTemplateID   *pulid.ID
	ConnectionLookupIDs     []pulid.ID
}

// Mutate applies the CreateConnectionInput on the ConnectionMutation builder.
func (i *CreateConnectionInput) Mutate(m *ConnectionMutation) {
	m.SetName(i.Name)
	if v := i.SyncOrders; v != nil {
		m.SetSyncOrders(*v)
	}
	if v := i.SyncProducts; v != nil {
		m.SetSyncProducts(*v)
	}
	if v := i.FulfillAutomatically; v != nil {
		m.SetFulfillAutomatically(*v)
	}
	if v := i.DispatchAutomatically; v != nil {
		m.SetDispatchAutomatically(*v)
	}
	if v := i.ConvertCurrency; v != nil {
		m.SetConvertCurrency(*v)
	}
	if v := i.AutoPrintParcelSlip; v != nil {
		m.SetAutoPrintParcelSlip(*v)
	}
	if v := i.ConnectionShopifyID; v != nil {
		m.SetConnectionShopifyID(*v)
	}
	if v := i.OrderIDs; len(v) > 0 {
		m.AddOrderIDs(v...)
	}
	m.SetSenderLocationID(i.SenderLocationID)
	m.SetPickupLocationID(i.PickupLocationID)
	m.SetReturnLocationID(i.ReturnLocationID)
	m.SetSellerLocationID(i.SellerLocationID)
	if v := i.DeliveryOptionIDs; len(v) > 0 {
		m.AddDeliveryOptionIDs(v...)
	}
	if v := i.DefaultDeliveryOptionID; v != nil {
		m.SetDefaultDeliveryOptionID(*v)
	}
	if v := i.ReturnPortalID; v != nil {
		m.SetReturnPortalID(*v)
	}
	if v := i.HypothesisTestIDs; len(v) > 0 {
		m.AddHypothesisTestIDs(v...)
	}
	if v := i.NotificationIDs; len(v) > 0 {
		m.AddNotificationIDs(v...)
	}
	m.SetCurrencyID(i.CurrencyID)
	if v := i.PackingSlipTemplateID; v != nil {
		m.SetPackingSlipTemplateID(*v)
	}
	if v := i.ConnectionLookupIDs; len(v) > 0 {
		m.AddConnectionLookupIDs(v...)
	}
}

// SetInput applies the change-set in the CreateConnectionInput on the ConnectionCreate builder.
func (c *ConnectionCreate) SetInput(i CreateConnectionInput) *ConnectionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateConnectionInput represents a mutation input for updating connections.
type UpdateConnectionInput struct {
	Name                       *string
	SyncOrders                 *bool
	SyncProducts               *bool
	FulfillAutomatically       *bool
	DispatchAutomatically      *bool
	ConvertCurrency            *bool
	AutoPrintParcelSlip        *bool
	ClearConnectionShopify     bool
	ConnectionShopifyID        *pulid.ID
	ClearOrders                bool
	AddOrderIDs                []pulid.ID
	RemoveOrderIDs             []pulid.ID
	SenderLocationID           *pulid.ID
	PickupLocationID           *pulid.ID
	ReturnLocationID           *pulid.ID
	SellerLocationID           *pulid.ID
	ClearDeliveryOption        bool
	AddDeliveryOptionIDs       []pulid.ID
	RemoveDeliveryOptionIDs    []pulid.ID
	ClearDefaultDeliveryOption bool
	DefaultDeliveryOptionID    *pulid.ID
	ClearReturnPortal          bool
	ReturnPortalID             *pulid.ID
	ClearHypothesisTest        bool
	AddHypothesisTestIDs       []pulid.ID
	RemoveHypothesisTestIDs    []pulid.ID
	ClearNotifications         bool
	AddNotificationIDs         []pulid.ID
	RemoveNotificationIDs      []pulid.ID
	CurrencyID                 *pulid.ID
	ClearPackingSlipTemplate   bool
	PackingSlipTemplateID      *pulid.ID
	ClearConnectionLookup      bool
	AddConnectionLookupIDs     []pulid.ID
	RemoveConnectionLookupIDs  []pulid.ID
}

// Mutate applies the UpdateConnectionInput on the ConnectionMutation builder.
func (i *UpdateConnectionInput) Mutate(m *ConnectionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.SyncOrders; v != nil {
		m.SetSyncOrders(*v)
	}
	if v := i.SyncProducts; v != nil {
		m.SetSyncProducts(*v)
	}
	if v := i.FulfillAutomatically; v != nil {
		m.SetFulfillAutomatically(*v)
	}
	if v := i.DispatchAutomatically; v != nil {
		m.SetDispatchAutomatically(*v)
	}
	if v := i.ConvertCurrency; v != nil {
		m.SetConvertCurrency(*v)
	}
	if v := i.AutoPrintParcelSlip; v != nil {
		m.SetAutoPrintParcelSlip(*v)
	}
	if i.ClearConnectionShopify {
		m.ClearConnectionShopify()
	}
	if v := i.ConnectionShopifyID; v != nil {
		m.SetConnectionShopifyID(*v)
	}
	if i.ClearOrders {
		m.ClearOrders()
	}
	if v := i.AddOrderIDs; len(v) > 0 {
		m.AddOrderIDs(v...)
	}
	if v := i.RemoveOrderIDs; len(v) > 0 {
		m.RemoveOrderIDs(v...)
	}
	if v := i.SenderLocationID; v != nil {
		m.SetSenderLocationID(*v)
	}
	if v := i.PickupLocationID; v != nil {
		m.SetPickupLocationID(*v)
	}
	if v := i.ReturnLocationID; v != nil {
		m.SetReturnLocationID(*v)
	}
	if v := i.SellerLocationID; v != nil {
		m.SetSellerLocationID(*v)
	}
	if i.ClearDeliveryOption {
		m.ClearDeliveryOption()
	}
	if v := i.AddDeliveryOptionIDs; len(v) > 0 {
		m.AddDeliveryOptionIDs(v...)
	}
	if v := i.RemoveDeliveryOptionIDs; len(v) > 0 {
		m.RemoveDeliveryOptionIDs(v...)
	}
	if i.ClearDefaultDeliveryOption {
		m.ClearDefaultDeliveryOption()
	}
	if v := i.DefaultDeliveryOptionID; v != nil {
		m.SetDefaultDeliveryOptionID(*v)
	}
	if i.ClearReturnPortal {
		m.ClearReturnPortal()
	}
	if v := i.ReturnPortalID; v != nil {
		m.SetReturnPortalID(*v)
	}
	if i.ClearHypothesisTest {
		m.ClearHypothesisTest()
	}
	if v := i.AddHypothesisTestIDs; len(v) > 0 {
		m.AddHypothesisTestIDs(v...)
	}
	if v := i.RemoveHypothesisTestIDs; len(v) > 0 {
		m.RemoveHypothesisTestIDs(v...)
	}
	if i.ClearNotifications {
		m.ClearNotifications()
	}
	if v := i.AddNotificationIDs; len(v) > 0 {
		m.AddNotificationIDs(v...)
	}
	if v := i.RemoveNotificationIDs; len(v) > 0 {
		m.RemoveNotificationIDs(v...)
	}
	if v := i.CurrencyID; v != nil {
		m.SetCurrencyID(*v)
	}
	if i.ClearPackingSlipTemplate {
		m.ClearPackingSlipTemplate()
	}
	if v := i.PackingSlipTemplateID; v != nil {
		m.SetPackingSlipTemplateID(*v)
	}
	if i.ClearConnectionLookup {
		m.ClearConnectionLookup()
	}
	if v := i.AddConnectionLookupIDs; len(v) > 0 {
		m.AddConnectionLookupIDs(v...)
	}
	if v := i.RemoveConnectionLookupIDs; len(v) > 0 {
		m.RemoveConnectionLookupIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateConnectionInput on the ConnectionUpdate builder.
func (c *ConnectionUpdate) SetInput(i UpdateConnectionInput) *ConnectionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateConnectionInput on the ConnectionUpdateOne builder.
func (c *ConnectionUpdateOne) SetInput(i UpdateConnectionInput) *ConnectionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateConnectionShopifyInput represents a mutation input for creating connectionshopifies.
type CreateConnectionShopifyInput struct {
	RateIntegration *bool
	StoreURL        *string
	APIKey          *string
	SyncFrom        *time.Time
	FilterTags      []string
}

// Mutate applies the CreateConnectionShopifyInput on the ConnectionShopifyMutation builder.
func (i *CreateConnectionShopifyInput) Mutate(m *ConnectionShopifyMutation) {
	if v := i.RateIntegration; v != nil {
		m.SetRateIntegration(*v)
	}
	if v := i.StoreURL; v != nil {
		m.SetStoreURL(*v)
	}
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if v := i.SyncFrom; v != nil {
		m.SetSyncFrom(*v)
	}
	if v := i.FilterTags; v != nil {
		m.SetFilterTags(v)
	}
}

// SetInput applies the change-set in the CreateConnectionShopifyInput on the ConnectionShopifyCreate builder.
func (c *ConnectionShopifyCreate) SetInput(i CreateConnectionShopifyInput) *ConnectionShopifyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateConnectionShopifyInput represents a mutation input for updating connectionshopifies.
type UpdateConnectionShopifyInput struct {
	RateIntegration  *bool
	ClearStoreURL    bool
	StoreURL         *string
	ClearAPIKey      bool
	APIKey           *string
	ClearSyncFrom    bool
	SyncFrom         *time.Time
	ClearFilterTags  bool
	FilterTags       []string
	AppendFilterTags []string
}

// Mutate applies the UpdateConnectionShopifyInput on the ConnectionShopifyMutation builder.
func (i *UpdateConnectionShopifyInput) Mutate(m *ConnectionShopifyMutation) {
	if v := i.RateIntegration; v != nil {
		m.SetRateIntegration(*v)
	}
	if i.ClearStoreURL {
		m.ClearStoreURL()
	}
	if v := i.StoreURL; v != nil {
		m.SetStoreURL(*v)
	}
	if i.ClearAPIKey {
		m.ClearAPIKey()
	}
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if i.ClearSyncFrom {
		m.ClearSyncFrom()
	}
	if v := i.SyncFrom; v != nil {
		m.SetSyncFrom(*v)
	}
	if i.ClearFilterTags {
		m.ClearFilterTags()
	}
	if v := i.FilterTags; v != nil {
		m.SetFilterTags(v)
	}
	if i.AppendFilterTags != nil {
		m.AppendFilterTags(i.FilterTags)
	}
}

// SetInput applies the change-set in the UpdateConnectionShopifyInput on the ConnectionShopifyUpdate builder.
func (c *ConnectionShopifyUpdate) SetInput(i UpdateConnectionShopifyInput) *ConnectionShopifyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateConnectionShopifyInput on the ConnectionShopifyUpdateOne builder.
func (c *ConnectionShopifyUpdateOne) SetInput(i UpdateConnectionShopifyInput) *ConnectionShopifyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateConsolidationInput represents a mutation input for creating consolidations.
type CreateConsolidationInput struct {
	PublicID             string
	Description          *string
	Status               *consolidation.Status
	PalletIDs            []pulid.ID
	OrderIDs             []pulid.ID
	DeliveryOptionID     *pulid.ID
	ShipmentID           *pulid.ID
	CancelledShipmentIDs []pulid.ID
}

// Mutate applies the CreateConsolidationInput on the ConsolidationMutation builder.
func (i *CreateConsolidationInput) Mutate(m *ConsolidationMutation) {
	m.SetPublicID(i.PublicID)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PalletIDs; len(v) > 0 {
		m.AddPalletIDs(v...)
	}
	if v := i.OrderIDs; len(v) > 0 {
		m.AddOrderIDs(v...)
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if v := i.ShipmentID; v != nil {
		m.SetShipmentID(*v)
	}
	if v := i.CancelledShipmentIDs; len(v) > 0 {
		m.AddCancelledShipmentIDs(v...)
	}
}

// SetInput applies the change-set in the CreateConsolidationInput on the ConsolidationCreate builder.
func (c *ConsolidationCreate) SetInput(i CreateConsolidationInput) *ConsolidationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateConsolidationInput represents a mutation input for updating consolidations.
type UpdateConsolidationInput struct {
	PublicID                   *string
	ClearDescription           bool
	Description                *string
	Status                     *consolidation.Status
	ClearPallets               bool
	AddPalletIDs               []pulid.ID
	RemovePalletIDs            []pulid.ID
	ClearOrders                bool
	AddOrderIDs                []pulid.ID
	RemoveOrderIDs             []pulid.ID
	ClearDeliveryOption        bool
	DeliveryOptionID           *pulid.ID
	ClearShipment              bool
	ShipmentID                 *pulid.ID
	ClearCancelledShipments    bool
	AddCancelledShipmentIDs    []pulid.ID
	RemoveCancelledShipmentIDs []pulid.ID
}

// Mutate applies the UpdateConsolidationInput on the ConsolidationMutation builder.
func (i *UpdateConsolidationInput) Mutate(m *ConsolidationMutation) {
	if v := i.PublicID; v != nil {
		m.SetPublicID(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPallets {
		m.ClearPallets()
	}
	if v := i.AddPalletIDs; len(v) > 0 {
		m.AddPalletIDs(v...)
	}
	if v := i.RemovePalletIDs; len(v) > 0 {
		m.RemovePalletIDs(v...)
	}
	if i.ClearOrders {
		m.ClearOrders()
	}
	if v := i.AddOrderIDs; len(v) > 0 {
		m.AddOrderIDs(v...)
	}
	if v := i.RemoveOrderIDs; len(v) > 0 {
		m.RemoveOrderIDs(v...)
	}
	if i.ClearDeliveryOption {
		m.ClearDeliveryOption()
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if i.ClearShipment {
		m.ClearShipment()
	}
	if v := i.ShipmentID; v != nil {
		m.SetShipmentID(*v)
	}
	if i.ClearCancelledShipments {
		m.ClearCancelledShipments()
	}
	if v := i.AddCancelledShipmentIDs; len(v) > 0 {
		m.AddCancelledShipmentIDs(v...)
	}
	if v := i.RemoveCancelledShipmentIDs; len(v) > 0 {
		m.RemoveCancelledShipmentIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateConsolidationInput on the ConsolidationUpdate builder.
func (c *ConsolidationUpdate) SetInput(i UpdateConsolidationInput) *ConsolidationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateConsolidationInput on the ConsolidationUpdateOne builder.
func (c *ConsolidationUpdateOne) SetInput(i UpdateConsolidationInput) *ConsolidationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateContactInput represents a mutation input for creating contacts.
type CreateContactInput struct {
	Name              string
	Surname           string
	Email             string
	PhoneNumber       string
	BillingContactIDs []pulid.ID
	AdminContactIDs   []pulid.ID
}

// Mutate applies the CreateContactInput on the ContactMutation builder.
func (i *CreateContactInput) Mutate(m *ContactMutation) {
	m.SetName(i.Name)
	m.SetSurname(i.Surname)
	m.SetEmail(i.Email)
	m.SetPhoneNumber(i.PhoneNumber)
	if v := i.BillingContactIDs; len(v) > 0 {
		m.AddBillingContactIDs(v...)
	}
	if v := i.AdminContactIDs; len(v) > 0 {
		m.AddAdminContactIDs(v...)
	}
}

// SetInput applies the change-set in the CreateContactInput on the ContactCreate builder.
func (c *ContactCreate) SetInput(i CreateContactInput) *ContactCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateContactInput represents a mutation input for updating contacts.
type UpdateContactInput struct {
	Name                    *string
	Surname                 *string
	Email                   *string
	PhoneNumber             *string
	ClearBillingContact     bool
	AddBillingContactIDs    []pulid.ID
	RemoveBillingContactIDs []pulid.ID
	ClearAdminContact       bool
	AddAdminContactIDs      []pulid.ID
	RemoveAdminContactIDs   []pulid.ID
}

// Mutate applies the UpdateContactInput on the ContactMutation builder.
func (i *UpdateContactInput) Mutate(m *ContactMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Surname; v != nil {
		m.SetSurname(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if i.ClearBillingContact {
		m.ClearBillingContact()
	}
	if v := i.AddBillingContactIDs; len(v) > 0 {
		m.AddBillingContactIDs(v...)
	}
	if v := i.RemoveBillingContactIDs; len(v) > 0 {
		m.RemoveBillingContactIDs(v...)
	}
	if i.ClearAdminContact {
		m.ClearAdminContact()
	}
	if v := i.AddAdminContactIDs; len(v) > 0 {
		m.AddAdminContactIDs(v...)
	}
	if v := i.RemoveAdminContactIDs; len(v) > 0 {
		m.RemoveAdminContactIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateContactInput on the ContactUpdate builder.
func (c *ContactUpdate) SetInput(i UpdateContactInput) *ContactUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateContactInput on the ContactUpdateOne builder.
func (c *ContactUpdateOne) SetInput(i UpdateContactInput) *ContactUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCountryHarmonizedCodeInput represents a mutation input for creating countryharmonizedcodes.
type CreateCountryHarmonizedCodeInput struct {
	Code            string
	InventoryItemID pulid.ID
	CountryID       pulid.ID
}

// Mutate applies the CreateCountryHarmonizedCodeInput on the CountryHarmonizedCodeMutation builder.
func (i *CreateCountryHarmonizedCodeInput) Mutate(m *CountryHarmonizedCodeMutation) {
	m.SetCode(i.Code)
	m.SetInventoryItemID(i.InventoryItemID)
	m.SetCountryID(i.CountryID)
}

// SetInput applies the change-set in the CreateCountryHarmonizedCodeInput on the CountryHarmonizedCodeCreate builder.
func (c *CountryHarmonizedCodeCreate) SetInput(i CreateCountryHarmonizedCodeInput) *CountryHarmonizedCodeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCountryHarmonizedCodeInput represents a mutation input for updating countryharmonizedcodes.
type UpdateCountryHarmonizedCodeInput struct {
	Code            *string
	InventoryItemID *pulid.ID
	CountryID       *pulid.ID
}

// Mutate applies the UpdateCountryHarmonizedCodeInput on the CountryHarmonizedCodeMutation builder.
func (i *UpdateCountryHarmonizedCodeInput) Mutate(m *CountryHarmonizedCodeMutation) {
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.InventoryItemID; v != nil {
		m.SetInventoryItemID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the UpdateCountryHarmonizedCodeInput on the CountryHarmonizedCodeUpdate builder.
func (c *CountryHarmonizedCodeUpdate) SetInput(i UpdateCountryHarmonizedCodeInput) *CountryHarmonizedCodeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCountryHarmonizedCodeInput on the CountryHarmonizedCodeUpdateOne builder.
func (c *CountryHarmonizedCodeUpdateOne) SetInput(i UpdateCountryHarmonizedCodeInput) *CountryHarmonizedCodeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDeliveryOptionInput represents a mutation input for creating deliveryoptions.
type CreateDeliveryOptionInput struct {
	ArchivedAt                              *time.Time
	Name                                    string
	SortOrder                               int
	ClickOptionDisplayCount                 *int
	Description                             *string
	ClickCollect                            *bool
	OverrideSenderAddress                   *bool
	OverrideReturnAddress                   *bool
	HideDeliveryOption                      *bool
	DeliveryEstimateFrom                    *int
	DeliveryEstimateTo                      *int
	WebshipperIntegration                   *bool
	WebshipperID                            *int
	ShipmondoIntegration                    *bool
	ShipmondoDeliveryOption                 *string
	CustomsEnabled                          *bool
	CustomsSigner                           *string
	HideIfCompanyEmpty                      *bool
	CarrierID                               pulid.ID
	DeliveryRuleIDs                         []pulid.ID
	DeliveryOptionDAOID                     *pulid.ID
	DeliveryOptionDFID                      *pulid.ID
	DeliveryOptionDSVID                     *pulid.ID
	DeliveryOptionEasyPostID                *pulid.ID
	DeliveryOptionGLSID                     *pulid.ID
	DeliveryOptionPostNordID                *pulid.ID
	DeliveryOptionUSPSID                    *pulid.ID
	DeliveryOptionBringID                   *pulid.ID
	ReturnPortalIDs                         []pulid.ID
	ColliIDs                                []pulid.ID
	ReturnColliIDs                          []pulid.ID
	CarrierServiceID                        pulid.ID
	ConnectionID                            pulid.ID
	ConnectionDefaultID                     *pulid.ID
	HypothesisTestDeliveryOptionGroupOneIDs []pulid.ID
	HypothesisTestDeliveryOptionGroupTwoIDs []pulid.ID
	HypothesisTestDeliveryOptionLookupIDs   []pulid.ID
	ClickCollectLocationIDs                 []pulid.ID
	EmailClickCollectAtStoreID              *pulid.ID
	ConsolidationIDs                        []pulid.ID
	DefaultPackagingID                      *pulid.ID
}

// Mutate applies the CreateDeliveryOptionInput on the DeliveryOptionMutation builder.
func (i *CreateDeliveryOptionInput) Mutate(m *DeliveryOptionMutation) {
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	m.SetName(i.Name)
	m.SetSortOrder(i.SortOrder)
	if v := i.ClickOptionDisplayCount; v != nil {
		m.SetClickOptionDisplayCount(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ClickCollect; v != nil {
		m.SetClickCollect(*v)
	}
	if v := i.OverrideSenderAddress; v != nil {
		m.SetOverrideSenderAddress(*v)
	}
	if v := i.OverrideReturnAddress; v != nil {
		m.SetOverrideReturnAddress(*v)
	}
	if v := i.HideDeliveryOption; v != nil {
		m.SetHideDeliveryOption(*v)
	}
	if v := i.DeliveryEstimateFrom; v != nil {
		m.SetDeliveryEstimateFrom(*v)
	}
	if v := i.DeliveryEstimateTo; v != nil {
		m.SetDeliveryEstimateTo(*v)
	}
	if v := i.WebshipperIntegration; v != nil {
		m.SetWebshipperIntegration(*v)
	}
	if v := i.WebshipperID; v != nil {
		m.SetWebshipperID(*v)
	}
	if v := i.ShipmondoIntegration; v != nil {
		m.SetShipmondoIntegration(*v)
	}
	if v := i.ShipmondoDeliveryOption; v != nil {
		m.SetShipmondoDeliveryOption(*v)
	}
	if v := i.CustomsEnabled; v != nil {
		m.SetCustomsEnabled(*v)
	}
	if v := i.CustomsSigner; v != nil {
		m.SetCustomsSigner(*v)
	}
	if v := i.HideIfCompanyEmpty; v != nil {
		m.SetHideIfCompanyEmpty(*v)
	}
	m.SetCarrierID(i.CarrierID)
	if v := i.DeliveryRuleIDs; len(v) > 0 {
		m.AddDeliveryRuleIDs(v...)
	}
	if v := i.DeliveryOptionDAOID; v != nil {
		m.SetDeliveryOptionDAOID(*v)
	}
	if v := i.DeliveryOptionDFID; v != nil {
		m.SetDeliveryOptionDFID(*v)
	}
	if v := i.DeliveryOptionDSVID; v != nil {
		m.SetDeliveryOptionDSVID(*v)
	}
	if v := i.DeliveryOptionEasyPostID; v != nil {
		m.SetDeliveryOptionEasyPostID(*v)
	}
	if v := i.DeliveryOptionGLSID; v != nil {
		m.SetDeliveryOptionGLSID(*v)
	}
	if v := i.DeliveryOptionPostNordID; v != nil {
		m.SetDeliveryOptionPostNordID(*v)
	}
	if v := i.DeliveryOptionUSPSID; v != nil {
		m.SetDeliveryOptionUSPSID(*v)
	}
	if v := i.DeliveryOptionBringID; v != nil {
		m.SetDeliveryOptionBringID(*v)
	}
	if v := i.ReturnPortalIDs; len(v) > 0 {
		m.AddReturnPortalIDs(v...)
	}
	if v := i.ColliIDs; len(v) > 0 {
		m.AddColliIDs(v...)
	}
	if v := i.ReturnColliIDs; len(v) > 0 {
		m.AddReturnColliIDs(v...)
	}
	m.SetCarrierServiceID(i.CarrierServiceID)
	m.SetConnectionID(i.ConnectionID)
	if v := i.ConnectionDefaultID; v != nil {
		m.SetConnectionDefaultID(*v)
	}
	if v := i.HypothesisTestDeliveryOptionGroupOneIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionGroupOneIDs(v...)
	}
	if v := i.HypothesisTestDeliveryOptionGroupTwoIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionGroupTwoIDs(v...)
	}
	if v := i.HypothesisTestDeliveryOptionLookupIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionLookupIDs(v...)
	}
	if v := i.ClickCollectLocationIDs; len(v) > 0 {
		m.AddClickCollectLocationIDs(v...)
	}
	if v := i.EmailClickCollectAtStoreID; v != nil {
		m.SetEmailClickCollectAtStoreID(*v)
	}
	if v := i.ConsolidationIDs; len(v) > 0 {
		m.AddConsolidationIDs(v...)
	}
	if v := i.DefaultPackagingID; v != nil {
		m.SetDefaultPackagingID(*v)
	}
}

// SetInput applies the change-set in the CreateDeliveryOptionInput on the DeliveryOptionCreate builder.
func (c *DeliveryOptionCreate) SetInput(i CreateDeliveryOptionInput) *DeliveryOptionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDeliveryOptionInput represents a mutation input for updating deliveryoptions.
type UpdateDeliveryOptionInput struct {
	ClearArchivedAt                               bool
	ArchivedAt                                    *time.Time
	Name                                          *string
	SortOrder                                     *int
	ClearClickOptionDisplayCount                  bool
	ClickOptionDisplayCount                       *int
	ClearDescription                              bool
	Description                                   *string
	ClearClickCollect                             bool
	ClickCollect                                  *bool
	ClearOverrideSenderAddress                    bool
	OverrideSenderAddress                         *bool
	ClearOverrideReturnAddress                    bool
	OverrideReturnAddress                         *bool
	ClearHideDeliveryOption                       bool
	HideDeliveryOption                            *bool
	ClearDeliveryEstimateFrom                     bool
	DeliveryEstimateFrom                          *int
	ClearDeliveryEstimateTo                       bool
	DeliveryEstimateTo                            *int
	WebshipperIntegration                         *bool
	ClearWebshipperID                             bool
	WebshipperID                                  *int
	ShipmondoIntegration                          *bool
	ClearShipmondoDeliveryOption                  bool
	ShipmondoDeliveryOption                       *string
	CustomsEnabled                                *bool
	ClearCustomsSigner                            bool
	CustomsSigner                                 *string
	HideIfCompanyEmpty                            *bool
	CarrierID                                     *pulid.ID
	ClearDeliveryRule                             bool
	AddDeliveryRuleIDs                            []pulid.ID
	RemoveDeliveryRuleIDs                         []pulid.ID
	ClearDeliveryOptionDAO                        bool
	DeliveryOptionDAOID                           *pulid.ID
	ClearDeliveryOptionDF                         bool
	DeliveryOptionDFID                            *pulid.ID
	ClearDeliveryOptionDSV                        bool
	DeliveryOptionDSVID                           *pulid.ID
	ClearDeliveryOptionEasyPost                   bool
	DeliveryOptionEasyPostID                      *pulid.ID
	ClearDeliveryOptionGLS                        bool
	DeliveryOptionGLSID                           *pulid.ID
	ClearDeliveryOptionPostNord                   bool
	DeliveryOptionPostNordID                      *pulid.ID
	ClearDeliveryOptionUSPS                       bool
	DeliveryOptionUSPSID                          *pulid.ID
	ClearDeliveryOptionBring                      bool
	DeliveryOptionBringID                         *pulid.ID
	ClearReturnPortals                            bool
	AddReturnPortalIDs                            []pulid.ID
	RemoveReturnPortalIDs                         []pulid.ID
	ClearColli                                    bool
	AddColliIDs                                   []pulid.ID
	RemoveColliIDs                                []pulid.ID
	ClearReturnColli                              bool
	AddReturnColliIDs                             []pulid.ID
	RemoveReturnColliIDs                          []pulid.ID
	CarrierServiceID                              *pulid.ID
	ConnectionID                                  *pulid.ID
	ClearConnectionDefault                        bool
	ConnectionDefaultID                           *pulid.ID
	ClearHypothesisTestDeliveryOptionGroupOne     bool
	AddHypothesisTestDeliveryOptionGroupOneIDs    []pulid.ID
	RemoveHypothesisTestDeliveryOptionGroupOneIDs []pulid.ID
	ClearHypothesisTestDeliveryOptionGroupTwo     bool
	AddHypothesisTestDeliveryOptionGroupTwoIDs    []pulid.ID
	RemoveHypothesisTestDeliveryOptionGroupTwoIDs []pulid.ID
	ClearHypothesisTestDeliveryOptionLookup       bool
	AddHypothesisTestDeliveryOptionLookupIDs      []pulid.ID
	RemoveHypothesisTestDeliveryOptionLookupIDs   []pulid.ID
	ClearClickCollectLocation                     bool
	AddClickCollectLocationIDs                    []pulid.ID
	RemoveClickCollectLocationIDs                 []pulid.ID
	ClearEmailClickCollectAtStore                 bool
	EmailClickCollectAtStoreID                    *pulid.ID
	ClearConsolidation                            bool
	AddConsolidationIDs                           []pulid.ID
	RemoveConsolidationIDs                        []pulid.ID
	ClearDefaultPackaging                         bool
	DefaultPackagingID                            *pulid.ID
}

// Mutate applies the UpdateDeliveryOptionInput on the DeliveryOptionMutation builder.
func (i *UpdateDeliveryOptionInput) Mutate(m *DeliveryOptionMutation) {
	if i.ClearArchivedAt {
		m.ClearArchivedAt()
	}
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.SortOrder; v != nil {
		m.SetSortOrder(*v)
	}
	if i.ClearClickOptionDisplayCount {
		m.ClearClickOptionDisplayCount()
	}
	if v := i.ClickOptionDisplayCount; v != nil {
		m.SetClickOptionDisplayCount(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearClickCollect {
		m.ClearClickCollect()
	}
	if v := i.ClickCollect; v != nil {
		m.SetClickCollect(*v)
	}
	if i.ClearOverrideSenderAddress {
		m.ClearOverrideSenderAddress()
	}
	if v := i.OverrideSenderAddress; v != nil {
		m.SetOverrideSenderAddress(*v)
	}
	if i.ClearOverrideReturnAddress {
		m.ClearOverrideReturnAddress()
	}
	if v := i.OverrideReturnAddress; v != nil {
		m.SetOverrideReturnAddress(*v)
	}
	if i.ClearHideDeliveryOption {
		m.ClearHideDeliveryOption()
	}
	if v := i.HideDeliveryOption; v != nil {
		m.SetHideDeliveryOption(*v)
	}
	if i.ClearDeliveryEstimateFrom {
		m.ClearDeliveryEstimateFrom()
	}
	if v := i.DeliveryEstimateFrom; v != nil {
		m.SetDeliveryEstimateFrom(*v)
	}
	if i.ClearDeliveryEstimateTo {
		m.ClearDeliveryEstimateTo()
	}
	if v := i.DeliveryEstimateTo; v != nil {
		m.SetDeliveryEstimateTo(*v)
	}
	if v := i.WebshipperIntegration; v != nil {
		m.SetWebshipperIntegration(*v)
	}
	if i.ClearWebshipperID {
		m.ClearWebshipperID()
	}
	if v := i.WebshipperID; v != nil {
		m.SetWebshipperID(*v)
	}
	if v := i.ShipmondoIntegration; v != nil {
		m.SetShipmondoIntegration(*v)
	}
	if i.ClearShipmondoDeliveryOption {
		m.ClearShipmondoDeliveryOption()
	}
	if v := i.ShipmondoDeliveryOption; v != nil {
		m.SetShipmondoDeliveryOption(*v)
	}
	if v := i.CustomsEnabled; v != nil {
		m.SetCustomsEnabled(*v)
	}
	if i.ClearCustomsSigner {
		m.ClearCustomsSigner()
	}
	if v := i.CustomsSigner; v != nil {
		m.SetCustomsSigner(*v)
	}
	if v := i.HideIfCompanyEmpty; v != nil {
		m.SetHideIfCompanyEmpty(*v)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
	if i.ClearDeliveryRule {
		m.ClearDeliveryRule()
	}
	if v := i.AddDeliveryRuleIDs; len(v) > 0 {
		m.AddDeliveryRuleIDs(v...)
	}
	if v := i.RemoveDeliveryRuleIDs; len(v) > 0 {
		m.RemoveDeliveryRuleIDs(v...)
	}
	if i.ClearDeliveryOptionDAO {
		m.ClearDeliveryOptionDAO()
	}
	if v := i.DeliveryOptionDAOID; v != nil {
		m.SetDeliveryOptionDAOID(*v)
	}
	if i.ClearDeliveryOptionDF {
		m.ClearDeliveryOptionDF()
	}
	if v := i.DeliveryOptionDFID; v != nil {
		m.SetDeliveryOptionDFID(*v)
	}
	if i.ClearDeliveryOptionDSV {
		m.ClearDeliveryOptionDSV()
	}
	if v := i.DeliveryOptionDSVID; v != nil {
		m.SetDeliveryOptionDSVID(*v)
	}
	if i.ClearDeliveryOptionEasyPost {
		m.ClearDeliveryOptionEasyPost()
	}
	if v := i.DeliveryOptionEasyPostID; v != nil {
		m.SetDeliveryOptionEasyPostID(*v)
	}
	if i.ClearDeliveryOptionGLS {
		m.ClearDeliveryOptionGLS()
	}
	if v := i.DeliveryOptionGLSID; v != nil {
		m.SetDeliveryOptionGLSID(*v)
	}
	if i.ClearDeliveryOptionPostNord {
		m.ClearDeliveryOptionPostNord()
	}
	if v := i.DeliveryOptionPostNordID; v != nil {
		m.SetDeliveryOptionPostNordID(*v)
	}
	if i.ClearDeliveryOptionUSPS {
		m.ClearDeliveryOptionUSPS()
	}
	if v := i.DeliveryOptionUSPSID; v != nil {
		m.SetDeliveryOptionUSPSID(*v)
	}
	if i.ClearDeliveryOptionBring {
		m.ClearDeliveryOptionBring()
	}
	if v := i.DeliveryOptionBringID; v != nil {
		m.SetDeliveryOptionBringID(*v)
	}
	if i.ClearReturnPortals {
		m.ClearReturnPortals()
	}
	if v := i.AddReturnPortalIDs; len(v) > 0 {
		m.AddReturnPortalIDs(v...)
	}
	if v := i.RemoveReturnPortalIDs; len(v) > 0 {
		m.RemoveReturnPortalIDs(v...)
	}
	if i.ClearColli {
		m.ClearColli()
	}
	if v := i.AddColliIDs; len(v) > 0 {
		m.AddColliIDs(v...)
	}
	if v := i.RemoveColliIDs; len(v) > 0 {
		m.RemoveColliIDs(v...)
	}
	if i.ClearReturnColli {
		m.ClearReturnColli()
	}
	if v := i.AddReturnColliIDs; len(v) > 0 {
		m.AddReturnColliIDs(v...)
	}
	if v := i.RemoveReturnColliIDs; len(v) > 0 {
		m.RemoveReturnColliIDs(v...)
	}
	if v := i.CarrierServiceID; v != nil {
		m.SetCarrierServiceID(*v)
	}
	if v := i.ConnectionID; v != nil {
		m.SetConnectionID(*v)
	}
	if i.ClearConnectionDefault {
		m.ClearConnectionDefault()
	}
	if v := i.ConnectionDefaultID; v != nil {
		m.SetConnectionDefaultID(*v)
	}
	if i.ClearHypothesisTestDeliveryOptionGroupOne {
		m.ClearHypothesisTestDeliveryOptionGroupOne()
	}
	if v := i.AddHypothesisTestDeliveryOptionGroupOneIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionGroupOneIDs(v...)
	}
	if v := i.RemoveHypothesisTestDeliveryOptionGroupOneIDs; len(v) > 0 {
		m.RemoveHypothesisTestDeliveryOptionGroupOneIDs(v...)
	}
	if i.ClearHypothesisTestDeliveryOptionGroupTwo {
		m.ClearHypothesisTestDeliveryOptionGroupTwo()
	}
	if v := i.AddHypothesisTestDeliveryOptionGroupTwoIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionGroupTwoIDs(v...)
	}
	if v := i.RemoveHypothesisTestDeliveryOptionGroupTwoIDs; len(v) > 0 {
		m.RemoveHypothesisTestDeliveryOptionGroupTwoIDs(v...)
	}
	if i.ClearHypothesisTestDeliveryOptionLookup {
		m.ClearHypothesisTestDeliveryOptionLookup()
	}
	if v := i.AddHypothesisTestDeliveryOptionLookupIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionLookupIDs(v...)
	}
	if v := i.RemoveHypothesisTestDeliveryOptionLookupIDs; len(v) > 0 {
		m.RemoveHypothesisTestDeliveryOptionLookupIDs(v...)
	}
	if i.ClearClickCollectLocation {
		m.ClearClickCollectLocation()
	}
	if v := i.AddClickCollectLocationIDs; len(v) > 0 {
		m.AddClickCollectLocationIDs(v...)
	}
	if v := i.RemoveClickCollectLocationIDs; len(v) > 0 {
		m.RemoveClickCollectLocationIDs(v...)
	}
	if i.ClearEmailClickCollectAtStore {
		m.ClearEmailClickCollectAtStore()
	}
	if v := i.EmailClickCollectAtStoreID; v != nil {
		m.SetEmailClickCollectAtStoreID(*v)
	}
	if i.ClearConsolidation {
		m.ClearConsolidation()
	}
	if v := i.AddConsolidationIDs; len(v) > 0 {
		m.AddConsolidationIDs(v...)
	}
	if v := i.RemoveConsolidationIDs; len(v) > 0 {
		m.RemoveConsolidationIDs(v...)
	}
	if i.ClearDefaultPackaging {
		m.ClearDefaultPackaging()
	}
	if v := i.DefaultPackagingID; v != nil {
		m.SetDefaultPackagingID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeliveryOptionInput on the DeliveryOptionUpdate builder.
func (c *DeliveryOptionUpdate) SetInput(i UpdateDeliveryOptionInput) *DeliveryOptionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDeliveryOptionInput on the DeliveryOptionUpdateOne builder.
func (c *DeliveryOptionUpdateOne) SetInput(i UpdateDeliveryOptionInput) *DeliveryOptionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDeliveryOptionBringInput represents a mutation input for creating deliveryoptionbrings.
type CreateDeliveryOptionBringInput struct {
	ElectronicCustoms *bool
}

// Mutate applies the CreateDeliveryOptionBringInput on the DeliveryOptionBringMutation builder.
func (i *CreateDeliveryOptionBringInput) Mutate(m *DeliveryOptionBringMutation) {
	if v := i.ElectronicCustoms; v != nil {
		m.SetElectronicCustoms(*v)
	}
}

// SetInput applies the change-set in the CreateDeliveryOptionBringInput on the DeliveryOptionBringCreate builder.
func (c *DeliveryOptionBringCreate) SetInput(i CreateDeliveryOptionBringInput) *DeliveryOptionBringCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDeliveryOptionBringInput represents a mutation input for updating deliveryoptionbrings.
type UpdateDeliveryOptionBringInput struct {
	ElectronicCustoms *bool
	DeliveryOptionID  *pulid.ID
}

// Mutate applies the UpdateDeliveryOptionBringInput on the DeliveryOptionBringMutation builder.
func (i *UpdateDeliveryOptionBringInput) Mutate(m *DeliveryOptionBringMutation) {
	if v := i.ElectronicCustoms; v != nil {
		m.SetElectronicCustoms(*v)
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeliveryOptionBringInput on the DeliveryOptionBringUpdate builder.
func (c *DeliveryOptionBringUpdate) SetInput(i UpdateDeliveryOptionBringInput) *DeliveryOptionBringUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDeliveryOptionBringInput on the DeliveryOptionBringUpdateOne builder.
func (c *DeliveryOptionBringUpdateOne) SetInput(i UpdateDeliveryOptionBringInput) *DeliveryOptionBringUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDeliveryOptionEasyPostInput represents a mutation input for creating deliveryoptioneasyposts.
type CreateDeliveryOptionEasyPostInput struct {
	DeliveryOptionID          pulid.ID
	CarrierAddServEasyPostIDs []pulid.ID
}

// Mutate applies the CreateDeliveryOptionEasyPostInput on the DeliveryOptionEasyPostMutation builder.
func (i *CreateDeliveryOptionEasyPostInput) Mutate(m *DeliveryOptionEasyPostMutation) {
	m.SetDeliveryOptionID(i.DeliveryOptionID)
	if v := i.CarrierAddServEasyPostIDs; len(v) > 0 {
		m.AddCarrierAddServEasyPostIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDeliveryOptionEasyPostInput on the DeliveryOptionEasyPostCreate builder.
func (c *DeliveryOptionEasyPostCreate) SetInput(i CreateDeliveryOptionEasyPostInput) *DeliveryOptionEasyPostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDeliveryOptionEasyPostInput represents a mutation input for updating deliveryoptioneasyposts.
type UpdateDeliveryOptionEasyPostInput struct {
	DeliveryOptionID                *pulid.ID
	ClearCarrierAddServEasyPost     bool
	AddCarrierAddServEasyPostIDs    []pulid.ID
	RemoveCarrierAddServEasyPostIDs []pulid.ID
}

// Mutate applies the UpdateDeliveryOptionEasyPostInput on the DeliveryOptionEasyPostMutation builder.
func (i *UpdateDeliveryOptionEasyPostInput) Mutate(m *DeliveryOptionEasyPostMutation) {
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if i.ClearCarrierAddServEasyPost {
		m.ClearCarrierAddServEasyPost()
	}
	if v := i.AddCarrierAddServEasyPostIDs; len(v) > 0 {
		m.AddCarrierAddServEasyPostIDs(v...)
	}
	if v := i.RemoveCarrierAddServEasyPostIDs; len(v) > 0 {
		m.RemoveCarrierAddServEasyPostIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDeliveryOptionEasyPostInput on the DeliveryOptionEasyPostUpdate builder.
func (c *DeliveryOptionEasyPostUpdate) SetInput(i UpdateDeliveryOptionEasyPostInput) *DeliveryOptionEasyPostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDeliveryOptionEasyPostInput on the DeliveryOptionEasyPostUpdateOne builder.
func (c *DeliveryOptionEasyPostUpdateOne) SetInput(i UpdateDeliveryOptionEasyPostInput) *DeliveryOptionEasyPostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDeliveryOptionPostNordInput represents a mutation input for creating deliveryoptionpostnords.
type CreateDeliveryOptionPostNordInput struct {
	FormatZpl        *bool
	DeliveryOptionID pulid.ID
}

// Mutate applies the CreateDeliveryOptionPostNordInput on the DeliveryOptionPostNordMutation builder.
func (i *CreateDeliveryOptionPostNordInput) Mutate(m *DeliveryOptionPostNordMutation) {
	if v := i.FormatZpl; v != nil {
		m.SetFormatZpl(*v)
	}
	m.SetDeliveryOptionID(i.DeliveryOptionID)
}

// SetInput applies the change-set in the CreateDeliveryOptionPostNordInput on the DeliveryOptionPostNordCreate builder.
func (c *DeliveryOptionPostNordCreate) SetInput(i CreateDeliveryOptionPostNordInput) *DeliveryOptionPostNordCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDeliveryOptionPostNordInput represents a mutation input for updating deliveryoptionpostnords.
type UpdateDeliveryOptionPostNordInput struct {
	FormatZpl        *bool
	DeliveryOptionID *pulid.ID
}

// Mutate applies the UpdateDeliveryOptionPostNordInput on the DeliveryOptionPostNordMutation builder.
func (i *UpdateDeliveryOptionPostNordInput) Mutate(m *DeliveryOptionPostNordMutation) {
	if v := i.FormatZpl; v != nil {
		m.SetFormatZpl(*v)
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeliveryOptionPostNordInput on the DeliveryOptionPostNordUpdate builder.
func (c *DeliveryOptionPostNordUpdate) SetInput(i UpdateDeliveryOptionPostNordInput) *DeliveryOptionPostNordUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDeliveryOptionPostNordInput on the DeliveryOptionPostNordUpdateOne builder.
func (c *DeliveryOptionPostNordUpdateOne) SetInput(i UpdateDeliveryOptionPostNordInput) *DeliveryOptionPostNordUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDeliveryOptionUSPSInput represents a mutation input for creating deliveryoptionuspss.
type CreateDeliveryOptionUSPSInput struct {
	FormatZpl *bool
}

// Mutate applies the CreateDeliveryOptionUSPSInput on the DeliveryOptionUSPSMutation builder.
func (i *CreateDeliveryOptionUSPSInput) Mutate(m *DeliveryOptionUSPSMutation) {
	if v := i.FormatZpl; v != nil {
		m.SetFormatZpl(*v)
	}
}

// SetInput applies the change-set in the CreateDeliveryOptionUSPSInput on the DeliveryOptionUSPSCreate builder.
func (c *DeliveryOptionUSPSCreate) SetInput(i CreateDeliveryOptionUSPSInput) *DeliveryOptionUSPSCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDeliveryOptionUSPSInput represents a mutation input for updating deliveryoptionuspss.
type UpdateDeliveryOptionUSPSInput struct {
	FormatZpl        *bool
	DeliveryOptionID *pulid.ID
}

// Mutate applies the UpdateDeliveryOptionUSPSInput on the DeliveryOptionUSPSMutation builder.
func (i *UpdateDeliveryOptionUSPSInput) Mutate(m *DeliveryOptionUSPSMutation) {
	if v := i.FormatZpl; v != nil {
		m.SetFormatZpl(*v)
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeliveryOptionUSPSInput on the DeliveryOptionUSPSUpdate builder.
func (c *DeliveryOptionUSPSUpdate) SetInput(i UpdateDeliveryOptionUSPSInput) *DeliveryOptionUSPSUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDeliveryOptionUSPSInput on the DeliveryOptionUSPSUpdateOne builder.
func (c *DeliveryOptionUSPSUpdateOne) SetInput(i UpdateDeliveryOptionUSPSInput) *DeliveryOptionUSPSUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDeliveryRuleInput represents a mutation input for creating deliveryrules.
type CreateDeliveryRuleInput struct {
	Name                           string
	Price                          *float64
	DeliveryRuleConstraintGroupIDs []pulid.ID
	DeliveryOptionID               *pulid.ID
	CountryIDs                     []pulid.ID
	CurrencyID                     *pulid.ID
}

// Mutate applies the CreateDeliveryRuleInput on the DeliveryRuleMutation builder.
func (i *CreateDeliveryRuleInput) Mutate(m *DeliveryRuleMutation) {
	m.SetName(i.Name)
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	if v := i.DeliveryRuleConstraintGroupIDs; len(v) > 0 {
		m.AddDeliveryRuleConstraintGroupIDs(v...)
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if v := i.CountryIDs; len(v) > 0 {
		m.AddCountryIDs(v...)
	}
	if v := i.CurrencyID; v != nil {
		m.SetCurrencyID(*v)
	}
}

// SetInput applies the change-set in the CreateDeliveryRuleInput on the DeliveryRuleCreate builder.
func (c *DeliveryRuleCreate) SetInput(i CreateDeliveryRuleInput) *DeliveryRuleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDeliveryRuleInput represents a mutation input for updating deliveryrules.
type UpdateDeliveryRuleInput struct {
	Name                                 *string
	Price                                *float64
	ClearDeliveryRuleConstraintGroup     bool
	AddDeliveryRuleConstraintGroupIDs    []pulid.ID
	RemoveDeliveryRuleConstraintGroupIDs []pulid.ID
	ClearDeliveryOption                  bool
	DeliveryOptionID                     *pulid.ID
	ClearCountry                         bool
	AddCountryIDs                        []pulid.ID
	RemoveCountryIDs                     []pulid.ID
	ClearCurrency                        bool
	CurrencyID                           *pulid.ID
}

// Mutate applies the UpdateDeliveryRuleInput on the DeliveryRuleMutation builder.
func (i *UpdateDeliveryRuleInput) Mutate(m *DeliveryRuleMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	if i.ClearDeliveryRuleConstraintGroup {
		m.ClearDeliveryRuleConstraintGroup()
	}
	if v := i.AddDeliveryRuleConstraintGroupIDs; len(v) > 0 {
		m.AddDeliveryRuleConstraintGroupIDs(v...)
	}
	if v := i.RemoveDeliveryRuleConstraintGroupIDs; len(v) > 0 {
		m.RemoveDeliveryRuleConstraintGroupIDs(v...)
	}
	if i.ClearDeliveryOption {
		m.ClearDeliveryOption()
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.AddCountryIDs; len(v) > 0 {
		m.AddCountryIDs(v...)
	}
	if v := i.RemoveCountryIDs; len(v) > 0 {
		m.RemoveCountryIDs(v...)
	}
	if i.ClearCurrency {
		m.ClearCurrency()
	}
	if v := i.CurrencyID; v != nil {
		m.SetCurrencyID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeliveryRuleInput on the DeliveryRuleUpdate builder.
func (c *DeliveryRuleUpdate) SetInput(i UpdateDeliveryRuleInput) *DeliveryRuleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDeliveryRuleInput on the DeliveryRuleUpdateOne builder.
func (c *DeliveryRuleUpdateOne) SetInput(i UpdateDeliveryRuleInput) *DeliveryRuleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDeliveryRuleConstraintInput represents a mutation input for creating deliveryruleconstraints.
type CreateDeliveryRuleConstraintInput struct {
	PropertyType  deliveryruleconstraint.PropertyType
	Comparison    deliveryruleconstraint.Comparison
	SelectedValue *fieldjson.DeliveryRuleConstraintSelectedValue
}

// Mutate applies the CreateDeliveryRuleConstraintInput on the DeliveryRuleConstraintMutation builder.
func (i *CreateDeliveryRuleConstraintInput) Mutate(m *DeliveryRuleConstraintMutation) {
	m.SetPropertyType(i.PropertyType)
	m.SetComparison(i.Comparison)
	if v := i.SelectedValue; v != nil {
		m.SetSelectedValue(v)
	}
}

// SetInput applies the change-set in the CreateDeliveryRuleConstraintInput on the DeliveryRuleConstraintCreate builder.
func (c *DeliveryRuleConstraintCreate) SetInput(i CreateDeliveryRuleConstraintInput) *DeliveryRuleConstraintCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDeliveryRuleConstraintInput represents a mutation input for updating deliveryruleconstraints.
type UpdateDeliveryRuleConstraintInput struct {
	PropertyType  *deliveryruleconstraint.PropertyType
	Comparison    *deliveryruleconstraint.Comparison
	SelectedValue *fieldjson.DeliveryRuleConstraintSelectedValue
}

// Mutate applies the UpdateDeliveryRuleConstraintInput on the DeliveryRuleConstraintMutation builder.
func (i *UpdateDeliveryRuleConstraintInput) Mutate(m *DeliveryRuleConstraintMutation) {
	if v := i.PropertyType; v != nil {
		m.SetPropertyType(*v)
	}
	if v := i.Comparison; v != nil {
		m.SetComparison(*v)
	}
	if v := i.SelectedValue; v != nil {
		m.SetSelectedValue(v)
	}
}

// SetInput applies the change-set in the UpdateDeliveryRuleConstraintInput on the DeliveryRuleConstraintUpdate builder.
func (c *DeliveryRuleConstraintUpdate) SetInput(i UpdateDeliveryRuleConstraintInput) *DeliveryRuleConstraintUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDeliveryRuleConstraintInput on the DeliveryRuleConstraintUpdateOne builder.
func (c *DeliveryRuleConstraintUpdateOne) SetInput(i UpdateDeliveryRuleConstraintInput) *DeliveryRuleConstraintUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDeliveryRuleConstraintGroupInput represents a mutation input for creating deliveryruleconstraintgroups.
type CreateDeliveryRuleConstraintGroupInput struct {
	ConstraintLogic           *deliveryruleconstraintgroup.ConstraintLogic
	DeliveryRuleConstraintIDs []pulid.ID
	DeliveryRuleID            pulid.ID
}

// Mutate applies the CreateDeliveryRuleConstraintGroupInput on the DeliveryRuleConstraintGroupMutation builder.
func (i *CreateDeliveryRuleConstraintGroupInput) Mutate(m *DeliveryRuleConstraintGroupMutation) {
	if v := i.ConstraintLogic; v != nil {
		m.SetConstraintLogic(*v)
	}
	if v := i.DeliveryRuleConstraintIDs; len(v) > 0 {
		m.AddDeliveryRuleConstraintIDs(v...)
	}
	m.SetDeliveryRuleID(i.DeliveryRuleID)
}

// SetInput applies the change-set in the CreateDeliveryRuleConstraintGroupInput on the DeliveryRuleConstraintGroupCreate builder.
func (c *DeliveryRuleConstraintGroupCreate) SetInput(i CreateDeliveryRuleConstraintGroupInput) *DeliveryRuleConstraintGroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDeliveryRuleConstraintGroupInput represents a mutation input for updating deliveryruleconstraintgroups.
type UpdateDeliveryRuleConstraintGroupInput struct {
	ConstraintLogic                 *deliveryruleconstraintgroup.ConstraintLogic
	ClearDeliveryRuleConstraints    bool
	AddDeliveryRuleConstraintIDs    []pulid.ID
	RemoveDeliveryRuleConstraintIDs []pulid.ID
	DeliveryRuleID                  *pulid.ID
}

// Mutate applies the UpdateDeliveryRuleConstraintGroupInput on the DeliveryRuleConstraintGroupMutation builder.
func (i *UpdateDeliveryRuleConstraintGroupInput) Mutate(m *DeliveryRuleConstraintGroupMutation) {
	if v := i.ConstraintLogic; v != nil {
		m.SetConstraintLogic(*v)
	}
	if i.ClearDeliveryRuleConstraints {
		m.ClearDeliveryRuleConstraints()
	}
	if v := i.AddDeliveryRuleConstraintIDs; len(v) > 0 {
		m.AddDeliveryRuleConstraintIDs(v...)
	}
	if v := i.RemoveDeliveryRuleConstraintIDs; len(v) > 0 {
		m.RemoveDeliveryRuleConstraintIDs(v...)
	}
	if v := i.DeliveryRuleID; v != nil {
		m.SetDeliveryRuleID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeliveryRuleConstraintGroupInput on the DeliveryRuleConstraintGroupUpdate builder.
func (c *DeliveryRuleConstraintGroupUpdate) SetInput(i UpdateDeliveryRuleConstraintGroupInput) *DeliveryRuleConstraintGroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDeliveryRuleConstraintGroupInput on the DeliveryRuleConstraintGroupUpdateOne builder.
func (c *DeliveryRuleConstraintGroupUpdateOne) SetInput(i UpdateDeliveryRuleConstraintGroupInput) *DeliveryRuleConstraintGroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDocumentInput represents a mutation input for creating documents.
type CreateDocumentInput struct {
	Name                     string
	HTMLTemplate             *string
	HTMLHeader               *string
	HTMLFooter               *string
	LastBase64Pdf            *string
	MergeType                *document.MergeType
	PaperSize                *document.PaperSize
	StartAt                  *time.Time
	EndAt                    *time.Time
	CarrierBrandID           *pulid.ID
	ConnectionPackingSlipIDs []pulid.ID
}

// Mutate applies the CreateDocumentInput on the DocumentMutation builder.
func (i *CreateDocumentInput) Mutate(m *DocumentMutation) {
	m.SetName(i.Name)
	if v := i.HTMLTemplate; v != nil {
		m.SetHTMLTemplate(*v)
	}
	if v := i.HTMLHeader; v != nil {
		m.SetHTMLHeader(*v)
	}
	if v := i.HTMLFooter; v != nil {
		m.SetHTMLFooter(*v)
	}
	if v := i.LastBase64Pdf; v != nil {
		m.SetLastBase64Pdf(*v)
	}
	if v := i.MergeType; v != nil {
		m.SetMergeType(*v)
	}
	if v := i.PaperSize; v != nil {
		m.SetPaperSize(*v)
	}
	if v := i.StartAt; v != nil {
		m.SetStartAt(*v)
	}
	if v := i.EndAt; v != nil {
		m.SetEndAt(*v)
	}
	if v := i.CarrierBrandID; v != nil {
		m.SetCarrierBrandID(*v)
	}
	if v := i.ConnectionPackingSlipIDs; len(v) > 0 {
		m.AddConnectionPackingSlipIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDocumentInput on the DocumentCreate builder.
func (c *DocumentCreate) SetInput(i CreateDocumentInput) *DocumentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDocumentInput represents a mutation input for updating documents.
type UpdateDocumentInput struct {
	Name                           *string
	ClearHTMLTemplate              bool
	HTMLTemplate                   *string
	ClearHTMLHeader                bool
	HTMLHeader                     *string
	ClearHTMLFooter                bool
	HTMLFooter                     *string
	ClearLastBase64Pdf             bool
	LastBase64Pdf                  *string
	MergeType                      *document.MergeType
	PaperSize                      *document.PaperSize
	StartAt                        *time.Time
	EndAt                          *time.Time
	ClearCarrierBrand              bool
	CarrierBrandID                 *pulid.ID
	ClearConnectionPackingSlip     bool
	AddConnectionPackingSlipIDs    []pulid.ID
	RemoveConnectionPackingSlipIDs []pulid.ID
}

// Mutate applies the UpdateDocumentInput on the DocumentMutation builder.
func (i *UpdateDocumentInput) Mutate(m *DocumentMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearHTMLTemplate {
		m.ClearHTMLTemplate()
	}
	if v := i.HTMLTemplate; v != nil {
		m.SetHTMLTemplate(*v)
	}
	if i.ClearHTMLHeader {
		m.ClearHTMLHeader()
	}
	if v := i.HTMLHeader; v != nil {
		m.SetHTMLHeader(*v)
	}
	if i.ClearHTMLFooter {
		m.ClearHTMLFooter()
	}
	if v := i.HTMLFooter; v != nil {
		m.SetHTMLFooter(*v)
	}
	if i.ClearLastBase64Pdf {
		m.ClearLastBase64Pdf()
	}
	if v := i.LastBase64Pdf; v != nil {
		m.SetLastBase64Pdf(*v)
	}
	if v := i.MergeType; v != nil {
		m.SetMergeType(*v)
	}
	if v := i.PaperSize; v != nil {
		m.SetPaperSize(*v)
	}
	if v := i.StartAt; v != nil {
		m.SetStartAt(*v)
	}
	if v := i.EndAt; v != nil {
		m.SetEndAt(*v)
	}
	if i.ClearCarrierBrand {
		m.ClearCarrierBrand()
	}
	if v := i.CarrierBrandID; v != nil {
		m.SetCarrierBrandID(*v)
	}
	if i.ClearConnectionPackingSlip {
		m.ClearConnectionPackingSlip()
	}
	if v := i.AddConnectionPackingSlipIDs; len(v) > 0 {
		m.AddConnectionPackingSlipIDs(v...)
	}
	if v := i.RemoveConnectionPackingSlipIDs; len(v) > 0 {
		m.RemoveConnectionPackingSlipIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDocumentInput on the DocumentUpdate builder.
func (c *DocumentUpdate) SetInput(i UpdateDocumentInput) *DocumentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDocumentInput on the DocumentUpdateOne builder.
func (c *DocumentUpdateOne) SetInput(i UpdateDocumentInput) *DocumentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEmailTemplateInput represents a mutation input for creating emailtemplates.
type CreateEmailTemplateInput struct {
	Name                                 string
	Subject                              *string
	HTMLTemplate                         *string
	MergeType                            *emailtemplate.MergeType
	ReturnPortalConfirmationLabelIDs     []pulid.ID
	ReturnPortalConfirmationQrCodeIDs    []pulid.ID
	ReturnPortalReceivedIDs              []pulid.ID
	ReturnPortalAcceptedIDs              []pulid.ID
	DeliveryOptionClickCollectAtStoreIDs []pulid.ID
	NotificationIDs                      []pulid.ID
}

// Mutate applies the CreateEmailTemplateInput on the EmailTemplateMutation builder.
func (i *CreateEmailTemplateInput) Mutate(m *EmailTemplateMutation) {
	m.SetName(i.Name)
	if v := i.Subject; v != nil {
		m.SetSubject(*v)
	}
	if v := i.HTMLTemplate; v != nil {
		m.SetHTMLTemplate(*v)
	}
	if v := i.MergeType; v != nil {
		m.SetMergeType(*v)
	}
	if v := i.ReturnPortalConfirmationLabelIDs; len(v) > 0 {
		m.AddReturnPortalConfirmationLabelIDs(v...)
	}
	if v := i.ReturnPortalConfirmationQrCodeIDs; len(v) > 0 {
		m.AddReturnPortalConfirmationQrCodeIDs(v...)
	}
	if v := i.ReturnPortalReceivedIDs; len(v) > 0 {
		m.AddReturnPortalReceivedIDs(v...)
	}
	if v := i.ReturnPortalAcceptedIDs; len(v) > 0 {
		m.AddReturnPortalAcceptedIDs(v...)
	}
	if v := i.DeliveryOptionClickCollectAtStoreIDs; len(v) > 0 {
		m.AddDeliveryOptionClickCollectAtStoreIDs(v...)
	}
	if v := i.NotificationIDs; len(v) > 0 {
		m.AddNotificationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEmailTemplateInput on the EmailTemplateCreate builder.
func (c *EmailTemplateCreate) SetInput(i CreateEmailTemplateInput) *EmailTemplateCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEmailTemplateInput represents a mutation input for updating emailtemplates.
type UpdateEmailTemplateInput struct {
	Name                                       *string
	Subject                                    *string
	HTMLTemplate                               *string
	MergeType                                  *emailtemplate.MergeType
	ClearReturnPortalConfirmationLabel         bool
	AddReturnPortalConfirmationLabelIDs        []pulid.ID
	RemoveReturnPortalConfirmationLabelIDs     []pulid.ID
	ClearReturnPortalConfirmationQrCode        bool
	AddReturnPortalConfirmationQrCodeIDs       []pulid.ID
	RemoveReturnPortalConfirmationQrCodeIDs    []pulid.ID
	ClearReturnPortalReceived                  bool
	AddReturnPortalReceivedIDs                 []pulid.ID
	RemoveReturnPortalReceivedIDs              []pulid.ID
	ClearReturnPortalAccepted                  bool
	AddReturnPortalAcceptedIDs                 []pulid.ID
	RemoveReturnPortalAcceptedIDs              []pulid.ID
	ClearDeliveryOptionClickCollectAtStore     bool
	AddDeliveryOptionClickCollectAtStoreIDs    []pulid.ID
	RemoveDeliveryOptionClickCollectAtStoreIDs []pulid.ID
	ClearNotifications                         bool
	AddNotificationIDs                         []pulid.ID
	RemoveNotificationIDs                      []pulid.ID
}

// Mutate applies the UpdateEmailTemplateInput on the EmailTemplateMutation builder.
func (i *UpdateEmailTemplateInput) Mutate(m *EmailTemplateMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Subject; v != nil {
		m.SetSubject(*v)
	}
	if v := i.HTMLTemplate; v != nil {
		m.SetHTMLTemplate(*v)
	}
	if v := i.MergeType; v != nil {
		m.SetMergeType(*v)
	}
	if i.ClearReturnPortalConfirmationLabel {
		m.ClearReturnPortalConfirmationLabel()
	}
	if v := i.AddReturnPortalConfirmationLabelIDs; len(v) > 0 {
		m.AddReturnPortalConfirmationLabelIDs(v...)
	}
	if v := i.RemoveReturnPortalConfirmationLabelIDs; len(v) > 0 {
		m.RemoveReturnPortalConfirmationLabelIDs(v...)
	}
	if i.ClearReturnPortalConfirmationQrCode {
		m.ClearReturnPortalConfirmationQrCode()
	}
	if v := i.AddReturnPortalConfirmationQrCodeIDs; len(v) > 0 {
		m.AddReturnPortalConfirmationQrCodeIDs(v...)
	}
	if v := i.RemoveReturnPortalConfirmationQrCodeIDs; len(v) > 0 {
		m.RemoveReturnPortalConfirmationQrCodeIDs(v...)
	}
	if i.ClearReturnPortalReceived {
		m.ClearReturnPortalReceived()
	}
	if v := i.AddReturnPortalReceivedIDs; len(v) > 0 {
		m.AddReturnPortalReceivedIDs(v...)
	}
	if v := i.RemoveReturnPortalReceivedIDs; len(v) > 0 {
		m.RemoveReturnPortalReceivedIDs(v...)
	}
	if i.ClearReturnPortalAccepted {
		m.ClearReturnPortalAccepted()
	}
	if v := i.AddReturnPortalAcceptedIDs; len(v) > 0 {
		m.AddReturnPortalAcceptedIDs(v...)
	}
	if v := i.RemoveReturnPortalAcceptedIDs; len(v) > 0 {
		m.RemoveReturnPortalAcceptedIDs(v...)
	}
	if i.ClearDeliveryOptionClickCollectAtStore {
		m.ClearDeliveryOptionClickCollectAtStore()
	}
	if v := i.AddDeliveryOptionClickCollectAtStoreIDs; len(v) > 0 {
		m.AddDeliveryOptionClickCollectAtStoreIDs(v...)
	}
	if v := i.RemoveDeliveryOptionClickCollectAtStoreIDs; len(v) > 0 {
		m.RemoveDeliveryOptionClickCollectAtStoreIDs(v...)
	}
	if i.ClearNotifications {
		m.ClearNotifications()
	}
	if v := i.AddNotificationIDs; len(v) > 0 {
		m.AddNotificationIDs(v...)
	}
	if v := i.RemoveNotificationIDs; len(v) > 0 {
		m.RemoveNotificationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEmailTemplateInput on the EmailTemplateUpdate builder.
func (c *EmailTemplateUpdate) SetInput(i UpdateEmailTemplateInput) *EmailTemplateUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEmailTemplateInput on the EmailTemplateUpdateOne builder.
func (c *EmailTemplateUpdateOne) SetInput(i UpdateEmailTemplateInput) *EmailTemplateUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateHypothesisTestInput represents a mutation input for creating hypothesistests.
type CreateHypothesisTestInput struct {
	Name                           string
	Active                         *bool
	HypothesisTestDeliveryOptionID *pulid.ID
	ConnectionID                   pulid.ID
}

// Mutate applies the CreateHypothesisTestInput on the HypothesisTestMutation builder.
func (i *CreateHypothesisTestInput) Mutate(m *HypothesisTestMutation) {
	m.SetName(i.Name)
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if v := i.HypothesisTestDeliveryOptionID; v != nil {
		m.SetHypothesisTestDeliveryOptionID(*v)
	}
	m.SetConnectionID(i.ConnectionID)
}

// SetInput applies the change-set in the CreateHypothesisTestInput on the HypothesisTestCreate builder.
func (c *HypothesisTestCreate) SetInput(i CreateHypothesisTestInput) *HypothesisTestCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHypothesisTestInput represents a mutation input for updating hypothesistests.
type UpdateHypothesisTestInput struct {
	Name                              *string
	Active                            *bool
	ClearHypothesisTestDeliveryOption bool
	HypothesisTestDeliveryOptionID    *pulid.ID
	ConnectionID                      *pulid.ID
}

// Mutate applies the UpdateHypothesisTestInput on the HypothesisTestMutation builder.
func (i *UpdateHypothesisTestInput) Mutate(m *HypothesisTestMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if i.ClearHypothesisTestDeliveryOption {
		m.ClearHypothesisTestDeliveryOption()
	}
	if v := i.HypothesisTestDeliveryOptionID; v != nil {
		m.SetHypothesisTestDeliveryOptionID(*v)
	}
	if v := i.ConnectionID; v != nil {
		m.SetConnectionID(*v)
	}
}

// SetInput applies the change-set in the UpdateHypothesisTestInput on the HypothesisTestUpdate builder.
func (c *HypothesisTestUpdate) SetInput(i UpdateHypothesisTestInput) *HypothesisTestUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHypothesisTestInput on the HypothesisTestUpdateOne builder.
func (c *HypothesisTestUpdateOne) SetInput(i UpdateHypothesisTestInput) *HypothesisTestUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateHypothesisTestDeliveryOptionInput represents a mutation input for creating hypothesistestdeliveryoptions.
type CreateHypothesisTestDeliveryOptionInput struct {
	RandomizeWithinGroupSort               *bool
	ByIntervalRotation                     *bool
	RotationIntervalHours                  *int
	ByOrder                                *bool
	HypothesisTestID                       pulid.ID
	HypothesisTestDeliveryOptionRequestIDs []pulid.ID
	DeliveryOptionGroupOneIDs              []pulid.ID
	DeliveryOptionGroupTwoIDs              []pulid.ID
}

// Mutate applies the CreateHypothesisTestDeliveryOptionInput on the HypothesisTestDeliveryOptionMutation builder.
func (i *CreateHypothesisTestDeliveryOptionInput) Mutate(m *HypothesisTestDeliveryOptionMutation) {
	if v := i.RandomizeWithinGroupSort; v != nil {
		m.SetRandomizeWithinGroupSort(*v)
	}
	if v := i.ByIntervalRotation; v != nil {
		m.SetByIntervalRotation(*v)
	}
	if v := i.RotationIntervalHours; v != nil {
		m.SetRotationIntervalHours(*v)
	}
	if v := i.ByOrder; v != nil {
		m.SetByOrder(*v)
	}
	m.SetHypothesisTestID(i.HypothesisTestID)
	if v := i.HypothesisTestDeliveryOptionRequestIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionRequestIDs(v...)
	}
	if v := i.DeliveryOptionGroupOneIDs; len(v) > 0 {
		m.AddDeliveryOptionGroupOneIDs(v...)
	}
	if v := i.DeliveryOptionGroupTwoIDs; len(v) > 0 {
		m.AddDeliveryOptionGroupTwoIDs(v...)
	}
}

// SetInput applies the change-set in the CreateHypothesisTestDeliveryOptionInput on the HypothesisTestDeliveryOptionCreate builder.
func (c *HypothesisTestDeliveryOptionCreate) SetInput(i CreateHypothesisTestDeliveryOptionInput) *HypothesisTestDeliveryOptionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHypothesisTestDeliveryOptionInput represents a mutation input for updating hypothesistestdeliveryoptions.
type UpdateHypothesisTestDeliveryOptionInput struct {
	RandomizeWithinGroupSort                     *bool
	ByIntervalRotation                           *bool
	RotationIntervalHours                        *int
	ByOrder                                      *bool
	HypothesisTestID                             *pulid.ID
	ClearHypothesisTestDeliveryOptionRequest     bool
	AddHypothesisTestDeliveryOptionRequestIDs    []pulid.ID
	RemoveHypothesisTestDeliveryOptionRequestIDs []pulid.ID
	ClearDeliveryOptionGroupOne                  bool
	AddDeliveryOptionGroupOneIDs                 []pulid.ID
	RemoveDeliveryOptionGroupOneIDs              []pulid.ID
	ClearDeliveryOptionGroupTwo                  bool
	AddDeliveryOptionGroupTwoIDs                 []pulid.ID
	RemoveDeliveryOptionGroupTwoIDs              []pulid.ID
}

// Mutate applies the UpdateHypothesisTestDeliveryOptionInput on the HypothesisTestDeliveryOptionMutation builder.
func (i *UpdateHypothesisTestDeliveryOptionInput) Mutate(m *HypothesisTestDeliveryOptionMutation) {
	if v := i.RandomizeWithinGroupSort; v != nil {
		m.SetRandomizeWithinGroupSort(*v)
	}
	if v := i.ByIntervalRotation; v != nil {
		m.SetByIntervalRotation(*v)
	}
	if v := i.RotationIntervalHours; v != nil {
		m.SetRotationIntervalHours(*v)
	}
	if v := i.ByOrder; v != nil {
		m.SetByOrder(*v)
	}
	if v := i.HypothesisTestID; v != nil {
		m.SetHypothesisTestID(*v)
	}
	if i.ClearHypothesisTestDeliveryOptionRequest {
		m.ClearHypothesisTestDeliveryOptionRequest()
	}
	if v := i.AddHypothesisTestDeliveryOptionRequestIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionRequestIDs(v...)
	}
	if v := i.RemoveHypothesisTestDeliveryOptionRequestIDs; len(v) > 0 {
		m.RemoveHypothesisTestDeliveryOptionRequestIDs(v...)
	}
	if i.ClearDeliveryOptionGroupOne {
		m.ClearDeliveryOptionGroupOne()
	}
	if v := i.AddDeliveryOptionGroupOneIDs; len(v) > 0 {
		m.AddDeliveryOptionGroupOneIDs(v...)
	}
	if v := i.RemoveDeliveryOptionGroupOneIDs; len(v) > 0 {
		m.RemoveDeliveryOptionGroupOneIDs(v...)
	}
	if i.ClearDeliveryOptionGroupTwo {
		m.ClearDeliveryOptionGroupTwo()
	}
	if v := i.AddDeliveryOptionGroupTwoIDs; len(v) > 0 {
		m.AddDeliveryOptionGroupTwoIDs(v...)
	}
	if v := i.RemoveDeliveryOptionGroupTwoIDs; len(v) > 0 {
		m.RemoveDeliveryOptionGroupTwoIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateHypothesisTestDeliveryOptionInput on the HypothesisTestDeliveryOptionUpdate builder.
func (c *HypothesisTestDeliveryOptionUpdate) SetInput(i UpdateHypothesisTestDeliveryOptionInput) *HypothesisTestDeliveryOptionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHypothesisTestDeliveryOptionInput on the HypothesisTestDeliveryOptionUpdateOne builder.
func (c *HypothesisTestDeliveryOptionUpdateOne) SetInput(i UpdateHypothesisTestDeliveryOptionInput) *HypothesisTestDeliveryOptionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateHypothesisTestDeliveryOptionLookupInput represents a mutation input for creating hypothesistestdeliveryoptionlookups.
type CreateHypothesisTestDeliveryOptionLookupInput struct {
	DeliveryOptionID                      pulid.ID
	HypothesisTestDeliveryOptionRequestID pulid.ID
}

// Mutate applies the CreateHypothesisTestDeliveryOptionLookupInput on the HypothesisTestDeliveryOptionLookupMutation builder.
func (i *CreateHypothesisTestDeliveryOptionLookupInput) Mutate(m *HypothesisTestDeliveryOptionLookupMutation) {
	m.SetDeliveryOptionID(i.DeliveryOptionID)
	m.SetHypothesisTestDeliveryOptionRequestID(i.HypothesisTestDeliveryOptionRequestID)
}

// SetInput applies the change-set in the CreateHypothesisTestDeliveryOptionLookupInput on the HypothesisTestDeliveryOptionLookupCreate builder.
func (c *HypothesisTestDeliveryOptionLookupCreate) SetInput(i CreateHypothesisTestDeliveryOptionLookupInput) *HypothesisTestDeliveryOptionLookupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHypothesisTestDeliveryOptionLookupInput represents a mutation input for updating hypothesistestdeliveryoptionlookups.
type UpdateHypothesisTestDeliveryOptionLookupInput struct {
	DeliveryOptionID                      *pulid.ID
	HypothesisTestDeliveryOptionRequestID *pulid.ID
}

// Mutate applies the UpdateHypothesisTestDeliveryOptionLookupInput on the HypothesisTestDeliveryOptionLookupMutation builder.
func (i *UpdateHypothesisTestDeliveryOptionLookupInput) Mutate(m *HypothesisTestDeliveryOptionLookupMutation) {
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if v := i.HypothesisTestDeliveryOptionRequestID; v != nil {
		m.SetHypothesisTestDeliveryOptionRequestID(*v)
	}
}

// SetInput applies the change-set in the UpdateHypothesisTestDeliveryOptionLookupInput on the HypothesisTestDeliveryOptionLookupUpdate builder.
func (c *HypothesisTestDeliveryOptionLookupUpdate) SetInput(i UpdateHypothesisTestDeliveryOptionLookupInput) *HypothesisTestDeliveryOptionLookupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHypothesisTestDeliveryOptionLookupInput on the HypothesisTestDeliveryOptionLookupUpdateOne builder.
func (c *HypothesisTestDeliveryOptionLookupUpdateOne) SetInput(i UpdateHypothesisTestDeliveryOptionLookupInput) *HypothesisTestDeliveryOptionLookupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateHypothesisTestDeliveryOptionRequestInput represents a mutation input for creating hypothesistestdeliveryoptionrequests.
type CreateHypothesisTestDeliveryOptionRequestInput struct {
	OrderHash                             string
	ShippingAddressHash                   string
	IsControlGroup                        bool
	RequestCount                          uint
	HypothesisTestDeliveryOptionID        pulid.ID
	OrderID                               *pulid.ID
	HypothesisTestDeliveryOptionLookupIDs []pulid.ID
}

// Mutate applies the CreateHypothesisTestDeliveryOptionRequestInput on the HypothesisTestDeliveryOptionRequestMutation builder.
func (i *CreateHypothesisTestDeliveryOptionRequestInput) Mutate(m *HypothesisTestDeliveryOptionRequestMutation) {
	m.SetOrderHash(i.OrderHash)
	m.SetShippingAddressHash(i.ShippingAddressHash)
	m.SetIsControlGroup(i.IsControlGroup)
	m.SetRequestCount(i.RequestCount)
	m.SetHypothesisTestDeliveryOptionID(i.HypothesisTestDeliveryOptionID)
	if v := i.OrderID; v != nil {
		m.SetOrderID(*v)
	}
	if v := i.HypothesisTestDeliveryOptionLookupIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionLookupIDs(v...)
	}
}

// SetInput applies the change-set in the CreateHypothesisTestDeliveryOptionRequestInput on the HypothesisTestDeliveryOptionRequestCreate builder.
func (c *HypothesisTestDeliveryOptionRequestCreate) SetInput(i CreateHypothesisTestDeliveryOptionRequestInput) *HypothesisTestDeliveryOptionRequestCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHypothesisTestDeliveryOptionRequestInput represents a mutation input for updating hypothesistestdeliveryoptionrequests.
type UpdateHypothesisTestDeliveryOptionRequestInput struct {
	OrderHash                                   *string
	ShippingAddressHash                         *string
	IsControlGroup                              *bool
	RequestCount                                *uint
	HypothesisTestDeliveryOptionID              *pulid.ID
	ClearOrder                                  bool
	OrderID                                     *pulid.ID
	ClearHypothesisTestDeliveryOptionLookup     bool
	AddHypothesisTestDeliveryOptionLookupIDs    []pulid.ID
	RemoveHypothesisTestDeliveryOptionLookupIDs []pulid.ID
}

// Mutate applies the UpdateHypothesisTestDeliveryOptionRequestInput on the HypothesisTestDeliveryOptionRequestMutation builder.
func (i *UpdateHypothesisTestDeliveryOptionRequestInput) Mutate(m *HypothesisTestDeliveryOptionRequestMutation) {
	if v := i.OrderHash; v != nil {
		m.SetOrderHash(*v)
	}
	if v := i.ShippingAddressHash; v != nil {
		m.SetShippingAddressHash(*v)
	}
	if v := i.IsControlGroup; v != nil {
		m.SetIsControlGroup(*v)
	}
	if v := i.RequestCount; v != nil {
		m.SetRequestCount(*v)
	}
	if v := i.HypothesisTestDeliveryOptionID; v != nil {
		m.SetHypothesisTestDeliveryOptionID(*v)
	}
	if i.ClearOrder {
		m.ClearOrder()
	}
	if v := i.OrderID; v != nil {
		m.SetOrderID(*v)
	}
	if i.ClearHypothesisTestDeliveryOptionLookup {
		m.ClearHypothesisTestDeliveryOptionLookup()
	}
	if v := i.AddHypothesisTestDeliveryOptionLookupIDs; len(v) > 0 {
		m.AddHypothesisTestDeliveryOptionLookupIDs(v...)
	}
	if v := i.RemoveHypothesisTestDeliveryOptionLookupIDs; len(v) > 0 {
		m.RemoveHypothesisTestDeliveryOptionLookupIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateHypothesisTestDeliveryOptionRequestInput on the HypothesisTestDeliveryOptionRequestUpdate builder.
func (c *HypothesisTestDeliveryOptionRequestUpdate) SetInput(i UpdateHypothesisTestDeliveryOptionRequestInput) *HypothesisTestDeliveryOptionRequestUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHypothesisTestDeliveryOptionRequestInput on the HypothesisTestDeliveryOptionRequestUpdateOne builder.
func (c *HypothesisTestDeliveryOptionRequestUpdateOne) SetInput(i UpdateHypothesisTestDeliveryOptionRequestInput) *HypothesisTestDeliveryOptionRequestUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateInventoryItemInput represents a mutation input for creating inventoryitems.
type CreateInventoryItemInput struct {
	Code                     *string
	Sku                      *string
	CountryHarmonizedCodeIDs []pulid.ID
	CountryOfOriginID        *pulid.ID
	ProductVariantID         pulid.ID
}

// Mutate applies the CreateInventoryItemInput on the InventoryItemMutation builder.
func (i *CreateInventoryItemInput) Mutate(m *InventoryItemMutation) {
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.Sku; v != nil {
		m.SetSku(*v)
	}
	if v := i.CountryHarmonizedCodeIDs; len(v) > 0 {
		m.AddCountryHarmonizedCodeIDs(v...)
	}
	if v := i.CountryOfOriginID; v != nil {
		m.SetCountryOfOriginID(*v)
	}
	m.SetProductVariantID(i.ProductVariantID)
}

// SetInput applies the change-set in the CreateInventoryItemInput on the InventoryItemCreate builder.
func (c *InventoryItemCreate) SetInput(i CreateInventoryItemInput) *InventoryItemCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInventoryItemInput represents a mutation input for updating inventoryitems.
type UpdateInventoryItemInput struct {
	ClearCode                      bool
	Code                           *string
	ClearSku                       bool
	Sku                            *string
	ClearCountryHarmonizedCode     bool
	AddCountryHarmonizedCodeIDs    []pulid.ID
	RemoveCountryHarmonizedCodeIDs []pulid.ID
	ClearCountryOfOrigin           bool
	CountryOfOriginID              *pulid.ID
	ProductVariantID               *pulid.ID
}

// Mutate applies the UpdateInventoryItemInput on the InventoryItemMutation builder.
func (i *UpdateInventoryItemInput) Mutate(m *InventoryItemMutation) {
	if i.ClearCode {
		m.ClearCode()
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearSku {
		m.ClearSku()
	}
	if v := i.Sku; v != nil {
		m.SetSku(*v)
	}
	if i.ClearCountryHarmonizedCode {
		m.ClearCountryHarmonizedCode()
	}
	if v := i.AddCountryHarmonizedCodeIDs; len(v) > 0 {
		m.AddCountryHarmonizedCodeIDs(v...)
	}
	if v := i.RemoveCountryHarmonizedCodeIDs; len(v) > 0 {
		m.RemoveCountryHarmonizedCodeIDs(v...)
	}
	if i.ClearCountryOfOrigin {
		m.ClearCountryOfOrigin()
	}
	if v := i.CountryOfOriginID; v != nil {
		m.SetCountryOfOriginID(*v)
	}
	if v := i.ProductVariantID; v != nil {
		m.SetProductVariantID(*v)
	}
}

// SetInput applies the change-set in the UpdateInventoryItemInput on the InventoryItemUpdate builder.
func (c *InventoryItemUpdate) SetInput(i UpdateInventoryItemInput) *InventoryItemUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInventoryItemInput on the InventoryItemUpdateOne builder.
func (c *InventoryItemUpdateOne) SetInput(i UpdateInventoryItemInput) *InventoryItemUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLocationInput represents a mutation input for creating locations.
type CreateLocationInput struct {
	Name                string
	LocationTagIDs      []pulid.ID
	SenderConnectionIDs []pulid.ID
	PickupConnectionIDs []pulid.ID
	ReturnConnectionIDs []pulid.ID
	SellerConnectionIDs []pulid.ID
	ReturnPortalIDs     []pulid.ID
	DeliveryOptionIDs   []pulid.ID
	ColliIDs            []pulid.ID
}

// Mutate applies the CreateLocationInput on the LocationMutation builder.
func (i *CreateLocationInput) Mutate(m *LocationMutation) {
	m.SetName(i.Name)
	if v := i.LocationTagIDs; len(v) > 0 {
		m.AddLocationTagIDs(v...)
	}
	if v := i.SenderConnectionIDs; len(v) > 0 {
		m.AddSenderConnectionIDs(v...)
	}
	if v := i.PickupConnectionIDs; len(v) > 0 {
		m.AddPickupConnectionIDs(v...)
	}
	if v := i.ReturnConnectionIDs; len(v) > 0 {
		m.AddReturnConnectionIDs(v...)
	}
	if v := i.SellerConnectionIDs; len(v) > 0 {
		m.AddSellerConnectionIDs(v...)
	}
	if v := i.ReturnPortalIDs; len(v) > 0 {
		m.AddReturnPortalIDs(v...)
	}
	if v := i.DeliveryOptionIDs; len(v) > 0 {
		m.AddDeliveryOptionIDs(v...)
	}
	if v := i.ColliIDs; len(v) > 0 {
		m.AddColliIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLocationInput on the LocationCreate builder.
func (c *LocationCreate) SetInput(i CreateLocationInput) *LocationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLocationInput represents a mutation input for updating locations.
type UpdateLocationInput struct {
	Name                      *string
	AddressID                 *pulid.ID
	AddLocationTagIDs         []pulid.ID
	RemoveLocationTagIDs      []pulid.ID
	ClearSenderConnection     bool
	AddSenderConnectionIDs    []pulid.ID
	RemoveSenderConnectionIDs []pulid.ID
	ClearPickupConnection     bool
	AddPickupConnectionIDs    []pulid.ID
	RemovePickupConnectionIDs []pulid.ID
	ClearReturnConnection     bool
	AddReturnConnectionIDs    []pulid.ID
	RemoveReturnConnectionIDs []pulid.ID
	ClearSellerConnection     bool
	AddSellerConnectionIDs    []pulid.ID
	RemoveSellerConnectionIDs []pulid.ID
	ClearReturnPortal         bool
	AddReturnPortalIDs        []pulid.ID
	RemoveReturnPortalIDs     []pulid.ID
	ClearDeliveryOption       bool
	AddDeliveryOptionIDs      []pulid.ID
	RemoveDeliveryOptionIDs   []pulid.ID
	ClearColli                bool
	AddColliIDs               []pulid.ID
	RemoveColliIDs            []pulid.ID
}

// Mutate applies the UpdateLocationInput on the LocationMutation builder.
func (i *UpdateLocationInput) Mutate(m *LocationMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AddressID; v != nil {
		m.SetAddressID(*v)
	}
	if v := i.AddLocationTagIDs; len(v) > 0 {
		m.AddLocationTagIDs(v...)
	}
	if v := i.RemoveLocationTagIDs; len(v) > 0 {
		m.RemoveLocationTagIDs(v...)
	}
	if i.ClearSenderConnection {
		m.ClearSenderConnection()
	}
	if v := i.AddSenderConnectionIDs; len(v) > 0 {
		m.AddSenderConnectionIDs(v...)
	}
	if v := i.RemoveSenderConnectionIDs; len(v) > 0 {
		m.RemoveSenderConnectionIDs(v...)
	}
	if i.ClearPickupConnection {
		m.ClearPickupConnection()
	}
	if v := i.AddPickupConnectionIDs; len(v) > 0 {
		m.AddPickupConnectionIDs(v...)
	}
	if v := i.RemovePickupConnectionIDs; len(v) > 0 {
		m.RemovePickupConnectionIDs(v...)
	}
	if i.ClearReturnConnection {
		m.ClearReturnConnection()
	}
	if v := i.AddReturnConnectionIDs; len(v) > 0 {
		m.AddReturnConnectionIDs(v...)
	}
	if v := i.RemoveReturnConnectionIDs; len(v) > 0 {
		m.RemoveReturnConnectionIDs(v...)
	}
	if i.ClearSellerConnection {
		m.ClearSellerConnection()
	}
	if v := i.AddSellerConnectionIDs; len(v) > 0 {
		m.AddSellerConnectionIDs(v...)
	}
	if v := i.RemoveSellerConnectionIDs; len(v) > 0 {
		m.RemoveSellerConnectionIDs(v...)
	}
	if i.ClearReturnPortal {
		m.ClearReturnPortal()
	}
	if v := i.AddReturnPortalIDs; len(v) > 0 {
		m.AddReturnPortalIDs(v...)
	}
	if v := i.RemoveReturnPortalIDs; len(v) > 0 {
		m.RemoveReturnPortalIDs(v...)
	}
	if i.ClearDeliveryOption {
		m.ClearDeliveryOption()
	}
	if v := i.AddDeliveryOptionIDs; len(v) > 0 {
		m.AddDeliveryOptionIDs(v...)
	}
	if v := i.RemoveDeliveryOptionIDs; len(v) > 0 {
		m.RemoveDeliveryOptionIDs(v...)
	}
	if i.ClearColli {
		m.ClearColli()
	}
	if v := i.AddColliIDs; len(v) > 0 {
		m.AddColliIDs(v...)
	}
	if v := i.RemoveColliIDs; len(v) > 0 {
		m.RemoveColliIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdate builder.
func (c *LocationUpdate) SetInput(i UpdateLocationInput) *LocationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdateOne builder.
func (c *LocationUpdateOne) SetInput(i UpdateLocationInput) *LocationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateNotificationInput represents a mutation input for creating notifications.
type CreateNotificationInput struct {
	Name            string
	Active          *bool
	ConnectionID    pulid.ID
	EmailTemplateID pulid.ID
}

// Mutate applies the CreateNotificationInput on the NotificationMutation builder.
func (i *CreateNotificationInput) Mutate(m *NotificationMutation) {
	m.SetName(i.Name)
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	m.SetConnectionID(i.ConnectionID)
	m.SetEmailTemplateID(i.EmailTemplateID)
}

// SetInput applies the change-set in the CreateNotificationInput on the NotificationCreate builder.
func (c *NotificationCreate) SetInput(i CreateNotificationInput) *NotificationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateNotificationInput represents a mutation input for updating notifications.
type UpdateNotificationInput struct {
	Name            *string
	Active          *bool
	ConnectionID    *pulid.ID
	EmailTemplateID *pulid.ID
}

// Mutate applies the UpdateNotificationInput on the NotificationMutation builder.
func (i *UpdateNotificationInput) Mutate(m *NotificationMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if v := i.ConnectionID; v != nil {
		m.SetConnectionID(*v)
	}
	if v := i.EmailTemplateID; v != nil {
		m.SetEmailTemplateID(*v)
	}
}

// SetInput applies the change-set in the UpdateNotificationInput on the NotificationUpdate builder.
func (c *NotificationUpdate) SetInput(i UpdateNotificationInput) *NotificationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateNotificationInput on the NotificationUpdateOne builder.
func (c *NotificationUpdateOne) SetInput(i UpdateNotificationInput) *NotificationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrderInput represents a mutation input for creating orders.
type CreateOrderInput struct {
	OrderPublicID                         string
	CommentInternal                       *string
	CommentExternal                       *string
	ConnectionID                          pulid.ID
	ReturnColliIDs                        []pulid.ID
	HypothesisTestDeliveryOptionRequestID *pulid.ID
	PalletID                              *pulid.ID
	ConsolidationID                       *pulid.ID
}

// Mutate applies the CreateOrderInput on the OrderMutation builder.
func (i *CreateOrderInput) Mutate(m *OrderMutation) {
	m.SetOrderPublicID(i.OrderPublicID)
	if v := i.CommentInternal; v != nil {
		m.SetCommentInternal(*v)
	}
	if v := i.CommentExternal; v != nil {
		m.SetCommentExternal(*v)
	}
	m.SetConnectionID(i.ConnectionID)
	if v := i.ReturnColliIDs; len(v) > 0 {
		m.AddReturnColliIDs(v...)
	}
	if v := i.HypothesisTestDeliveryOptionRequestID; v != nil {
		m.SetHypothesisTestDeliveryOptionRequestID(*v)
	}
	if v := i.PalletID; v != nil {
		m.SetPalletID(*v)
	}
	if v := i.ConsolidationID; v != nil {
		m.SetConsolidationID(*v)
	}
}

// SetInput applies the change-set in the CreateOrderInput on the OrderCreate builder.
func (c *OrderCreate) SetInput(i CreateOrderInput) *OrderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrderInput represents a mutation input for updating orders.
type UpdateOrderInput struct {
	OrderPublicID                            *string
	ClearCommentInternal                     bool
	CommentInternal                          *string
	ClearCommentExternal                     bool
	CommentExternal                          *string
	ConnectionID                             *pulid.ID
	ClearReturnColli                         bool
	AddReturnColliIDs                        []pulid.ID
	RemoveReturnColliIDs                     []pulid.ID
	ClearHypothesisTestDeliveryOptionRequest bool
	HypothesisTestDeliveryOptionRequestID    *pulid.ID
	ClearPallet                              bool
	PalletID                                 *pulid.ID
	ClearConsolidation                       bool
	ConsolidationID                          *pulid.ID
}

// Mutate applies the UpdateOrderInput on the OrderMutation builder.
func (i *UpdateOrderInput) Mutate(m *OrderMutation) {
	if v := i.OrderPublicID; v != nil {
		m.SetOrderPublicID(*v)
	}
	if i.ClearCommentInternal {
		m.ClearCommentInternal()
	}
	if v := i.CommentInternal; v != nil {
		m.SetCommentInternal(*v)
	}
	if i.ClearCommentExternal {
		m.ClearCommentExternal()
	}
	if v := i.CommentExternal; v != nil {
		m.SetCommentExternal(*v)
	}
	if v := i.ConnectionID; v != nil {
		m.SetConnectionID(*v)
	}
	if i.ClearReturnColli {
		m.ClearReturnColli()
	}
	if v := i.AddReturnColliIDs; len(v) > 0 {
		m.AddReturnColliIDs(v...)
	}
	if v := i.RemoveReturnColliIDs; len(v) > 0 {
		m.RemoveReturnColliIDs(v...)
	}
	if i.ClearHypothesisTestDeliveryOptionRequest {
		m.ClearHypothesisTestDeliveryOptionRequest()
	}
	if v := i.HypothesisTestDeliveryOptionRequestID; v != nil {
		m.SetHypothesisTestDeliveryOptionRequestID(*v)
	}
	if i.ClearPallet {
		m.ClearPallet()
	}
	if v := i.PalletID; v != nil {
		m.SetPalletID(*v)
	}
	if i.ClearConsolidation {
		m.ClearConsolidation()
	}
	if v := i.ConsolidationID; v != nil {
		m.SetConsolidationID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdate builder.
func (c *OrderUpdate) SetInput(i UpdateOrderInput) *OrderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdateOne builder.
func (c *OrderUpdateOne) SetInput(i UpdateOrderInput) *OrderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrderSenderInput represents a mutation input for creating ordersenders.
type CreateOrderSenderInput struct {
	FirstName   string
	LastName    string
	Email       string
	PhoneNumber string
	VatNumber   string
}

// Mutate applies the CreateOrderSenderInput on the OrderSenderMutation builder.
func (i *CreateOrderSenderInput) Mutate(m *OrderSenderMutation) {
	m.SetFirstName(i.FirstName)
	m.SetLastName(i.LastName)
	m.SetEmail(i.Email)
	m.SetPhoneNumber(i.PhoneNumber)
	m.SetVatNumber(i.VatNumber)
}

// SetInput applies the change-set in the CreateOrderSenderInput on the OrderSenderCreate builder.
func (c *OrderSenderCreate) SetInput(i CreateOrderSenderInput) *OrderSenderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrderSenderInput represents a mutation input for updating ordersenders.
type UpdateOrderSenderInput struct {
	FirstName   *string
	LastName    *string
	Email       *string
	PhoneNumber *string
	VatNumber   *string
}

// Mutate applies the UpdateOrderSenderInput on the OrderSenderMutation builder.
func (i *UpdateOrderSenderInput) Mutate(m *OrderSenderMutation) {
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.VatNumber; v != nil {
		m.SetVatNumber(*v)
	}
}

// SetInput applies the change-set in the UpdateOrderSenderInput on the OrderSenderUpdate builder.
func (c *OrderSenderUpdate) SetInput(i UpdateOrderSenderInput) *OrderSenderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrderSenderInput on the OrderSenderUpdateOne builder.
func (c *OrderSenderUpdateOne) SetInput(i UpdateOrderSenderInput) *OrderSenderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePackagingInput represents a mutation input for creating packagings.
type CreatePackagingInput struct {
	ArchivedAt        *time.Time
	Name              string
	HeightCm          int
	WidthCm           int
	LengthCm          int
	ShipmentParcelIDs []pulid.ID
	PalletIDs         []pulid.ID
	ColliIDs          []pulid.ID
	ReturnColliIDs    []pulid.ID
	PackagingDFID     *pulid.ID
	PackagingUSPSID   *pulid.ID
	CarrierBrandID    *pulid.ID
	DeliveryOptionIDs []pulid.ID
}

// Mutate applies the CreatePackagingInput on the PackagingMutation builder.
func (i *CreatePackagingInput) Mutate(m *PackagingMutation) {
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	m.SetName(i.Name)
	m.SetHeightCm(i.HeightCm)
	m.SetWidthCm(i.WidthCm)
	m.SetLengthCm(i.LengthCm)
	if v := i.ShipmentParcelIDs; len(v) > 0 {
		m.AddShipmentParcelIDs(v...)
	}
	if v := i.PalletIDs; len(v) > 0 {
		m.AddPalletIDs(v...)
	}
	if v := i.ColliIDs; len(v) > 0 {
		m.AddColliIDs(v...)
	}
	if v := i.ReturnColliIDs; len(v) > 0 {
		m.AddReturnColliIDs(v...)
	}
	if v := i.PackagingDFID; v != nil {
		m.SetPackagingDFID(*v)
	}
	if v := i.PackagingUSPSID; v != nil {
		m.SetPackagingUSPSID(*v)
	}
	if v := i.CarrierBrandID; v != nil {
		m.SetCarrierBrandID(*v)
	}
	if v := i.DeliveryOptionIDs; len(v) > 0 {
		m.AddDeliveryOptionIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePackagingInput on the PackagingCreate builder.
func (c *PackagingCreate) SetInput(i CreatePackagingInput) *PackagingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePackagingInput represents a mutation input for updating packagings.
type UpdatePackagingInput struct {
	ClearArchivedAt         bool
	ArchivedAt              *time.Time
	Name                    *string
	HeightCm                *int
	WidthCm                 *int
	LengthCm                *int
	ClearShipmentParcel     bool
	AddShipmentParcelIDs    []pulid.ID
	RemoveShipmentParcelIDs []pulid.ID
	ClearPallet             bool
	AddPalletIDs            []pulid.ID
	RemovePalletIDs         []pulid.ID
	ClearColli              bool
	AddColliIDs             []pulid.ID
	RemoveColliIDs          []pulid.ID
	ClearReturnColli        bool
	AddReturnColliIDs       []pulid.ID
	RemoveReturnColliIDs    []pulid.ID
	ClearPackagingDF        bool
	PackagingDFID           *pulid.ID
	ClearPackagingUSPS      bool
	PackagingUSPSID         *pulid.ID
	ClearCarrierBrand       bool
	CarrierBrandID          *pulid.ID
	ClearDeliveryOption     bool
	AddDeliveryOptionIDs    []pulid.ID
	RemoveDeliveryOptionIDs []pulid.ID
}

// Mutate applies the UpdatePackagingInput on the PackagingMutation builder.
func (i *UpdatePackagingInput) Mutate(m *PackagingMutation) {
	if i.ClearArchivedAt {
		m.ClearArchivedAt()
	}
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.HeightCm; v != nil {
		m.SetHeightCm(*v)
	}
	if v := i.WidthCm; v != nil {
		m.SetWidthCm(*v)
	}
	if v := i.LengthCm; v != nil {
		m.SetLengthCm(*v)
	}
	if i.ClearShipmentParcel {
		m.ClearShipmentParcel()
	}
	if v := i.AddShipmentParcelIDs; len(v) > 0 {
		m.AddShipmentParcelIDs(v...)
	}
	if v := i.RemoveShipmentParcelIDs; len(v) > 0 {
		m.RemoveShipmentParcelIDs(v...)
	}
	if i.ClearPallet {
		m.ClearPallet()
	}
	if v := i.AddPalletIDs; len(v) > 0 {
		m.AddPalletIDs(v...)
	}
	if v := i.RemovePalletIDs; len(v) > 0 {
		m.RemovePalletIDs(v...)
	}
	if i.ClearColli {
		m.ClearColli()
	}
	if v := i.AddColliIDs; len(v) > 0 {
		m.AddColliIDs(v...)
	}
	if v := i.RemoveColliIDs; len(v) > 0 {
		m.RemoveColliIDs(v...)
	}
	if i.ClearReturnColli {
		m.ClearReturnColli()
	}
	if v := i.AddReturnColliIDs; len(v) > 0 {
		m.AddReturnColliIDs(v...)
	}
	if v := i.RemoveReturnColliIDs; len(v) > 0 {
		m.RemoveReturnColliIDs(v...)
	}
	if i.ClearPackagingDF {
		m.ClearPackagingDF()
	}
	if v := i.PackagingDFID; v != nil {
		m.SetPackagingDFID(*v)
	}
	if i.ClearPackagingUSPS {
		m.ClearPackagingUSPS()
	}
	if v := i.PackagingUSPSID; v != nil {
		m.SetPackagingUSPSID(*v)
	}
	if i.ClearCarrierBrand {
		m.ClearCarrierBrand()
	}
	if v := i.CarrierBrandID; v != nil {
		m.SetCarrierBrandID(*v)
	}
	if i.ClearDeliveryOption {
		m.ClearDeliveryOption()
	}
	if v := i.AddDeliveryOptionIDs; len(v) > 0 {
		m.AddDeliveryOptionIDs(v...)
	}
	if v := i.RemoveDeliveryOptionIDs; len(v) > 0 {
		m.RemoveDeliveryOptionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePackagingInput on the PackagingUpdate builder.
func (c *PackagingUpdate) SetInput(i UpdatePackagingInput) *PackagingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePackagingInput on the PackagingUpdateOne builder.
func (c *PackagingUpdateOne) SetInput(i UpdatePackagingInput) *PackagingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePackagingDFInput represents a mutation input for creating packagingdfs.
type CreatePackagingDFInput struct {
	APIType   packagingdf.APIType
	MaxWeight *float64
	MinWeight *float64
	Stackable *bool
}

// Mutate applies the CreatePackagingDFInput on the PackagingDFMutation builder.
func (i *CreatePackagingDFInput) Mutate(m *PackagingDFMutation) {
	m.SetAPIType(i.APIType)
	if v := i.MaxWeight; v != nil {
		m.SetMaxWeight(*v)
	}
	if v := i.MinWeight; v != nil {
		m.SetMinWeight(*v)
	}
	if v := i.Stackable; v != nil {
		m.SetStackable(*v)
	}
}

// SetInput applies the change-set in the CreatePackagingDFInput on the PackagingDFCreate builder.
func (c *PackagingDFCreate) SetInput(i CreatePackagingDFInput) *PackagingDFCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePackagingDFInput represents a mutation input for updating packagingdfs.
type UpdatePackagingDFInput struct {
	APIType        *packagingdf.APIType
	ClearMaxWeight bool
	MaxWeight      *float64
	ClearMinWeight bool
	MinWeight      *float64
	Stackable      *bool
}

// Mutate applies the UpdatePackagingDFInput on the PackagingDFMutation builder.
func (i *UpdatePackagingDFInput) Mutate(m *PackagingDFMutation) {
	if v := i.APIType; v != nil {
		m.SetAPIType(*v)
	}
	if i.ClearMaxWeight {
		m.ClearMaxWeight()
	}
	if v := i.MaxWeight; v != nil {
		m.SetMaxWeight(*v)
	}
	if i.ClearMinWeight {
		m.ClearMinWeight()
	}
	if v := i.MinWeight; v != nil {
		m.SetMinWeight(*v)
	}
	if v := i.Stackable; v != nil {
		m.SetStackable(*v)
	}
}

// SetInput applies the change-set in the UpdatePackagingDFInput on the PackagingDFUpdate builder.
func (c *PackagingDFUpdate) SetInput(i UpdatePackagingDFInput) *PackagingDFUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePackagingDFInput on the PackagingDFUpdateOne builder.
func (c *PackagingDFUpdateOne) SetInput(i UpdatePackagingDFInput) *PackagingDFUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePackagingUSPSInput represents a mutation input for creating packaginguspss.
type CreatePackagingUSPSInput struct {
	PackagingUSPSRateIndicatorID      pulid.ID
	PackagingUSPSProcessingCategoryID pulid.ID
}

// Mutate applies the CreatePackagingUSPSInput on the PackagingUSPSMutation builder.
func (i *CreatePackagingUSPSInput) Mutate(m *PackagingUSPSMutation) {
	m.SetPackagingUSPSRateIndicatorID(i.PackagingUSPSRateIndicatorID)
	m.SetPackagingUSPSProcessingCategoryID(i.PackagingUSPSProcessingCategoryID)
}

// SetInput applies the change-set in the CreatePackagingUSPSInput on the PackagingUSPSCreate builder.
func (c *PackagingUSPSCreate) SetInput(i CreatePackagingUSPSInput) *PackagingUSPSCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePackagingUSPSInput represents a mutation input for updating packaginguspss.
type UpdatePackagingUSPSInput struct {
	PackagingUSPSRateIndicatorID      *pulid.ID
	PackagingUSPSProcessingCategoryID *pulid.ID
}

// Mutate applies the UpdatePackagingUSPSInput on the PackagingUSPSMutation builder.
func (i *UpdatePackagingUSPSInput) Mutate(m *PackagingUSPSMutation) {
	if v := i.PackagingUSPSRateIndicatorID; v != nil {
		m.SetPackagingUSPSRateIndicatorID(*v)
	}
	if v := i.PackagingUSPSProcessingCategoryID; v != nil {
		m.SetPackagingUSPSProcessingCategoryID(*v)
	}
}

// SetInput applies the change-set in the UpdatePackagingUSPSInput on the PackagingUSPSUpdate builder.
func (c *PackagingUSPSUpdate) SetInput(i UpdatePackagingUSPSInput) *PackagingUSPSUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePackagingUSPSInput on the PackagingUSPSUpdateOne builder.
func (c *PackagingUSPSUpdateOne) SetInput(i UpdatePackagingUSPSInput) *PackagingUSPSUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePackagingUSPSProcessingCategoryInput represents a mutation input for creating packaginguspsprocessingcategories.
type CreatePackagingUSPSProcessingCategoryInput struct {
	Name               string
	ProcessingCategory packaginguspsprocessingcategory.ProcessingCategory
}

// Mutate applies the CreatePackagingUSPSProcessingCategoryInput on the PackagingUSPSProcessingCategoryMutation builder.
func (i *CreatePackagingUSPSProcessingCategoryInput) Mutate(m *PackagingUSPSProcessingCategoryMutation) {
	m.SetName(i.Name)
	m.SetProcessingCategory(i.ProcessingCategory)
}

// SetInput applies the change-set in the CreatePackagingUSPSProcessingCategoryInput on the PackagingUSPSProcessingCategoryCreate builder.
func (c *PackagingUSPSProcessingCategoryCreate) SetInput(i CreatePackagingUSPSProcessingCategoryInput) *PackagingUSPSProcessingCategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePackagingUSPSProcessingCategoryInput represents a mutation input for updating packaginguspsprocessingcategories.
type UpdatePackagingUSPSProcessingCategoryInput struct {
	Name               *string
	ProcessingCategory *packaginguspsprocessingcategory.ProcessingCategory
}

// Mutate applies the UpdatePackagingUSPSProcessingCategoryInput on the PackagingUSPSProcessingCategoryMutation builder.
func (i *UpdatePackagingUSPSProcessingCategoryInput) Mutate(m *PackagingUSPSProcessingCategoryMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ProcessingCategory; v != nil {
		m.SetProcessingCategory(*v)
	}
}

// SetInput applies the change-set in the UpdatePackagingUSPSProcessingCategoryInput on the PackagingUSPSProcessingCategoryUpdate builder.
func (c *PackagingUSPSProcessingCategoryUpdate) SetInput(i UpdatePackagingUSPSProcessingCategoryInput) *PackagingUSPSProcessingCategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePackagingUSPSProcessingCategoryInput on the PackagingUSPSProcessingCategoryUpdateOne builder.
func (c *PackagingUSPSProcessingCategoryUpdateOne) SetInput(i UpdatePackagingUSPSProcessingCategoryInput) *PackagingUSPSProcessingCategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePalletInput represents a mutation input for creating pallets.
type CreatePalletInput struct {
	PublicID                   string
	Description                string
	OrderIDs                   []pulid.ID
	PackagingID                *pulid.ID
	ConsolidationID            pulid.ID
	ShipmentPalletID           *pulid.ID
	CancelledShipmentPalletIDs []pulid.ID
}

// Mutate applies the CreatePalletInput on the PalletMutation builder.
func (i *CreatePalletInput) Mutate(m *PalletMutation) {
	m.SetPublicID(i.PublicID)
	m.SetDescription(i.Description)
	if v := i.OrderIDs; len(v) > 0 {
		m.AddOrderIDs(v...)
	}
	if v := i.PackagingID; v != nil {
		m.SetPackagingID(*v)
	}
	m.SetConsolidationID(i.ConsolidationID)
	if v := i.ShipmentPalletID; v != nil {
		m.SetShipmentPalletID(*v)
	}
	if v := i.CancelledShipmentPalletIDs; len(v) > 0 {
		m.AddCancelledShipmentPalletIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePalletInput on the PalletCreate builder.
func (c *PalletCreate) SetInput(i CreatePalletInput) *PalletCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePalletInput represents a mutation input for updating pallets.
type UpdatePalletInput struct {
	PublicID                         *string
	Description                      *string
	ClearOrders                      bool
	AddOrderIDs                      []pulid.ID
	RemoveOrderIDs                   []pulid.ID
	ClearPackaging                   bool
	PackagingID                      *pulid.ID
	ConsolidationID                  *pulid.ID
	ClearShipmentPallet              bool
	ShipmentPalletID                 *pulid.ID
	ClearCancelledShipmentPallet     bool
	AddCancelledShipmentPalletIDs    []pulid.ID
	RemoveCancelledShipmentPalletIDs []pulid.ID
}

// Mutate applies the UpdatePalletInput on the PalletMutation builder.
func (i *UpdatePalletInput) Mutate(m *PalletMutation) {
	if v := i.PublicID; v != nil {
		m.SetPublicID(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearOrders {
		m.ClearOrders()
	}
	if v := i.AddOrderIDs; len(v) > 0 {
		m.AddOrderIDs(v...)
	}
	if v := i.RemoveOrderIDs; len(v) > 0 {
		m.RemoveOrderIDs(v...)
	}
	if i.ClearPackaging {
		m.ClearPackaging()
	}
	if v := i.PackagingID; v != nil {
		m.SetPackagingID(*v)
	}
	if v := i.ConsolidationID; v != nil {
		m.SetConsolidationID(*v)
	}
	if i.ClearShipmentPallet {
		m.ClearShipmentPallet()
	}
	if v := i.ShipmentPalletID; v != nil {
		m.SetShipmentPalletID(*v)
	}
	if i.ClearCancelledShipmentPallet {
		m.ClearCancelledShipmentPallet()
	}
	if v := i.AddCancelledShipmentPalletIDs; len(v) > 0 {
		m.AddCancelledShipmentPalletIDs(v...)
	}
	if v := i.RemoveCancelledShipmentPalletIDs; len(v) > 0 {
		m.RemoveCancelledShipmentPalletIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePalletInput on the PalletUpdate builder.
func (c *PalletUpdate) SetInput(i UpdatePalletInput) *PalletUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePalletInput on the PalletUpdateOne builder.
func (c *PalletUpdateOne) SetInput(i UpdatePalletInput) *PalletUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateParcelShopInput represents a mutation input for creating parcelshops.
type CreateParcelShopInput struct {
	Name                   string
	ParcelShopDAOID        *pulid.ID
	ParcelShopPostNordID   *pulid.ID
	ParcelShopGLSID        *pulid.ID
	ParcelShopBringID      *pulid.ID
	CarrierBrandID         pulid.ID
	AddressID              pulid.ID
	ColliIDs               []pulid.ID
	BusinessHoursPeriodIDs []pulid.ID
}

// Mutate applies the CreateParcelShopInput on the ParcelShopMutation builder.
func (i *CreateParcelShopInput) Mutate(m *ParcelShopMutation) {
	m.SetName(i.Name)
	if v := i.ParcelShopDAOID; v != nil {
		m.SetParcelShopDAOID(*v)
	}
	if v := i.ParcelShopPostNordID; v != nil {
		m.SetParcelShopPostNordID(*v)
	}
	if v := i.ParcelShopGLSID; v != nil {
		m.SetParcelShopGLSID(*v)
	}
	if v := i.ParcelShopBringID; v != nil {
		m.SetParcelShopBringID(*v)
	}
	m.SetCarrierBrandID(i.CarrierBrandID)
	m.SetAddressID(i.AddressID)
	if v := i.ColliIDs; len(v) > 0 {
		m.AddColliIDs(v...)
	}
	if v := i.BusinessHoursPeriodIDs; len(v) > 0 {
		m.AddBusinessHoursPeriodIDs(v...)
	}
}

// SetInput applies the change-set in the CreateParcelShopInput on the ParcelShopCreate builder.
func (c *ParcelShopCreate) SetInput(i CreateParcelShopInput) *ParcelShopCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateParcelShopInput represents a mutation input for updating parcelshops.
type UpdateParcelShopInput struct {
	Name                         *string
	ClearParcelShopDAO           bool
	ParcelShopDAOID              *pulid.ID
	ClearParcelShopPostNord      bool
	ParcelShopPostNordID         *pulid.ID
	ClearParcelShopGLS           bool
	ParcelShopGLSID              *pulid.ID
	ClearParcelShopBring         bool
	ParcelShopBringID            *pulid.ID
	CarrierBrandID               *pulid.ID
	AddressID                    *pulid.ID
	ClearColli                   bool
	AddColliIDs                  []pulid.ID
	RemoveColliIDs               []pulid.ID
	ClearBusinessHoursPeriod     bool
	AddBusinessHoursPeriodIDs    []pulid.ID
	RemoveBusinessHoursPeriodIDs []pulid.ID
}

// Mutate applies the UpdateParcelShopInput on the ParcelShopMutation builder.
func (i *UpdateParcelShopInput) Mutate(m *ParcelShopMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearParcelShopDAO {
		m.ClearParcelShopDAO()
	}
	if v := i.ParcelShopDAOID; v != nil {
		m.SetParcelShopDAOID(*v)
	}
	if i.ClearParcelShopPostNord {
		m.ClearParcelShopPostNord()
	}
	if v := i.ParcelShopPostNordID; v != nil {
		m.SetParcelShopPostNordID(*v)
	}
	if i.ClearParcelShopGLS {
		m.ClearParcelShopGLS()
	}
	if v := i.ParcelShopGLSID; v != nil {
		m.SetParcelShopGLSID(*v)
	}
	if i.ClearParcelShopBring {
		m.ClearParcelShopBring()
	}
	if v := i.ParcelShopBringID; v != nil {
		m.SetParcelShopBringID(*v)
	}
	if v := i.CarrierBrandID; v != nil {
		m.SetCarrierBrandID(*v)
	}
	if v := i.AddressID; v != nil {
		m.SetAddressID(*v)
	}
	if i.ClearColli {
		m.ClearColli()
	}
	if v := i.AddColliIDs; len(v) > 0 {
		m.AddColliIDs(v...)
	}
	if v := i.RemoveColliIDs; len(v) > 0 {
		m.RemoveColliIDs(v...)
	}
	if i.ClearBusinessHoursPeriod {
		m.ClearBusinessHoursPeriod()
	}
	if v := i.AddBusinessHoursPeriodIDs; len(v) > 0 {
		m.AddBusinessHoursPeriodIDs(v...)
	}
	if v := i.RemoveBusinessHoursPeriodIDs; len(v) > 0 {
		m.RemoveBusinessHoursPeriodIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateParcelShopInput on the ParcelShopUpdate builder.
func (c *ParcelShopUpdate) SetInput(i UpdateParcelShopInput) *ParcelShopUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateParcelShopInput on the ParcelShopUpdateOne builder.
func (c *ParcelShopUpdateOne) SetInput(i UpdateParcelShopInput) *ParcelShopUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateParcelShopBringInput represents a mutation input for creating parcelshopbrings.
type CreateParcelShopBringInput struct {
	PointType         parcelshopbring.PointType
	BringID           string
	ParcelShopID      pulid.ID
	AddressDeliveryID pulid.ID
}

// Mutate applies the CreateParcelShopBringInput on the ParcelShopBringMutation builder.
func (i *CreateParcelShopBringInput) Mutate(m *ParcelShopBringMutation) {
	m.SetPointType(i.PointType)
	m.SetBringID(i.BringID)
	m.SetParcelShopID(i.ParcelShopID)
	m.SetAddressDeliveryID(i.AddressDeliveryID)
}

// SetInput applies the change-set in the CreateParcelShopBringInput on the ParcelShopBringCreate builder.
func (c *ParcelShopBringCreate) SetInput(i CreateParcelShopBringInput) *ParcelShopBringCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateParcelShopBringInput represents a mutation input for updating parcelshopbrings.
type UpdateParcelShopBringInput struct {
	PointType         *parcelshopbring.PointType
	BringID           *string
	ParcelShopID      *pulid.ID
	AddressDeliveryID *pulid.ID
}

// Mutate applies the UpdateParcelShopBringInput on the ParcelShopBringMutation builder.
func (i *UpdateParcelShopBringInput) Mutate(m *ParcelShopBringMutation) {
	if v := i.PointType; v != nil {
		m.SetPointType(*v)
	}
	if v := i.BringID; v != nil {
		m.SetBringID(*v)
	}
	if v := i.ParcelShopID; v != nil {
		m.SetParcelShopID(*v)
	}
	if v := i.AddressDeliveryID; v != nil {
		m.SetAddressDeliveryID(*v)
	}
}

// SetInput applies the change-set in the UpdateParcelShopBringInput on the ParcelShopBringUpdate builder.
func (c *ParcelShopBringUpdate) SetInput(i UpdateParcelShopBringInput) *ParcelShopBringUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateParcelShopBringInput on the ParcelShopBringUpdateOne builder.
func (c *ParcelShopBringUpdateOne) SetInput(i UpdateParcelShopBringInput) *ParcelShopBringUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateParcelShopDAOInput represents a mutation input for creating parcelshopdaos.
type CreateParcelShopDAOInput struct {
	ShopID       string
	ParcelShopID pulid.ID
}

// Mutate applies the CreateParcelShopDAOInput on the ParcelShopDAOMutation builder.
func (i *CreateParcelShopDAOInput) Mutate(m *ParcelShopDAOMutation) {
	m.SetShopID(i.ShopID)
	m.SetParcelShopID(i.ParcelShopID)
}

// SetInput applies the change-set in the CreateParcelShopDAOInput on the ParcelShopDAOCreate builder.
func (c *ParcelShopDAOCreate) SetInput(i CreateParcelShopDAOInput) *ParcelShopDAOCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateParcelShopDAOInput represents a mutation input for updating parcelshopdaos.
type UpdateParcelShopDAOInput struct {
	ShopID       *string
	ParcelShopID *pulid.ID
}

// Mutate applies the UpdateParcelShopDAOInput on the ParcelShopDAOMutation builder.
func (i *UpdateParcelShopDAOInput) Mutate(m *ParcelShopDAOMutation) {
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	if v := i.ParcelShopID; v != nil {
		m.SetParcelShopID(*v)
	}
}

// SetInput applies the change-set in the UpdateParcelShopDAOInput on the ParcelShopDAOUpdate builder.
func (c *ParcelShopDAOUpdate) SetInput(i UpdateParcelShopDAOInput) *ParcelShopDAOUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateParcelShopDAOInput on the ParcelShopDAOUpdateOne builder.
func (c *ParcelShopDAOUpdateOne) SetInput(i UpdateParcelShopDAOInput) *ParcelShopDAOUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateParcelShopGLSInput represents a mutation input for creating parcelshopglss.
type CreateParcelShopGLSInput struct {
	GLSParcelShopID string
	PartnerID       *string
	Type            *string
	ParcelShopID    pulid.ID
}

// Mutate applies the CreateParcelShopGLSInput on the ParcelShopGLSMutation builder.
func (i *CreateParcelShopGLSInput) Mutate(m *ParcelShopGLSMutation) {
	m.SetGLSParcelShopID(i.GLSParcelShopID)
	if v := i.PartnerID; v != nil {
		m.SetPartnerID(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	m.SetParcelShopID(i.ParcelShopID)
}

// SetInput applies the change-set in the CreateParcelShopGLSInput on the ParcelShopGLSCreate builder.
func (c *ParcelShopGLSCreate) SetInput(i CreateParcelShopGLSInput) *ParcelShopGLSCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateParcelShopGLSInput represents a mutation input for updating parcelshopglss.
type UpdateParcelShopGLSInput struct {
	GLSParcelShopID *string
	ClearPartnerID  bool
	PartnerID       *string
	ClearType       bool
	Type            *string
	ParcelShopID    *pulid.ID
}

// Mutate applies the UpdateParcelShopGLSInput on the ParcelShopGLSMutation builder.
func (i *UpdateParcelShopGLSInput) Mutate(m *ParcelShopGLSMutation) {
	if v := i.GLSParcelShopID; v != nil {
		m.SetGLSParcelShopID(*v)
	}
	if i.ClearPartnerID {
		m.ClearPartnerID()
	}
	if v := i.PartnerID; v != nil {
		m.SetPartnerID(*v)
	}
	if i.ClearType {
		m.ClearType()
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.ParcelShopID; v != nil {
		m.SetParcelShopID(*v)
	}
}

// SetInput applies the change-set in the UpdateParcelShopGLSInput on the ParcelShopGLSUpdate builder.
func (c *ParcelShopGLSUpdate) SetInput(i UpdateParcelShopGLSInput) *ParcelShopGLSUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateParcelShopGLSInput on the ParcelShopGLSUpdateOne builder.
func (c *ParcelShopGLSUpdateOne) SetInput(i UpdateParcelShopGLSInput) *ParcelShopGLSUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateParcelShopPostNordInput represents a mutation input for creating parcelshoppostnords.
type CreateParcelShopPostNordInput struct {
	ServicePointID    string
	Pudoid            string
	TypeID            string
	ParcelShopID      pulid.ID
	AddressDeliveryID pulid.ID
}

// Mutate applies the CreateParcelShopPostNordInput on the ParcelShopPostNordMutation builder.
func (i *CreateParcelShopPostNordInput) Mutate(m *ParcelShopPostNordMutation) {
	m.SetServicePointID(i.ServicePointID)
	m.SetPudoid(i.Pudoid)
	m.SetTypeID(i.TypeID)
	m.SetParcelShopID(i.ParcelShopID)
	m.SetAddressDeliveryID(i.AddressDeliveryID)
}

// SetInput applies the change-set in the CreateParcelShopPostNordInput on the ParcelShopPostNordCreate builder.
func (c *ParcelShopPostNordCreate) SetInput(i CreateParcelShopPostNordInput) *ParcelShopPostNordCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateParcelShopPostNordInput represents a mutation input for updating parcelshoppostnords.
type UpdateParcelShopPostNordInput struct {
	ServicePointID    *string
	Pudoid            *string
	TypeID            *string
	ParcelShopID      *pulid.ID
	AddressDeliveryID *pulid.ID
}

// Mutate applies the UpdateParcelShopPostNordInput on the ParcelShopPostNordMutation builder.
func (i *UpdateParcelShopPostNordInput) Mutate(m *ParcelShopPostNordMutation) {
	if v := i.ServicePointID; v != nil {
		m.SetServicePointID(*v)
	}
	if v := i.Pudoid; v != nil {
		m.SetPudoid(*v)
	}
	if v := i.TypeID; v != nil {
		m.SetTypeID(*v)
	}
	if v := i.ParcelShopID; v != nil {
		m.SetParcelShopID(*v)
	}
	if v := i.AddressDeliveryID; v != nil {
		m.SetAddressDeliveryID(*v)
	}
}

// SetInput applies the change-set in the UpdateParcelShopPostNordInput on the ParcelShopPostNordUpdate builder.
func (c *ParcelShopPostNordUpdate) SetInput(i UpdateParcelShopPostNordInput) *ParcelShopPostNordUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateParcelShopPostNordInput on the ParcelShopPostNordUpdateOne builder.
func (c *ParcelShopPostNordUpdateOne) SetInput(i UpdateParcelShopPostNordInput) *ParcelShopPostNordUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePrinterInput represents a mutation input for creating printers.
type CreatePrinterInput struct {
	Name          string
	LabelZpl      *bool
	LabelPdf      *bool
	LabelPng      *bool
	Document      *bool
	Rotate180     *bool
	UseShell      *bool
	PrintSize     *printer.PrintSize
	WorkstationID pulid.ID
	PrintJobIDs   []pulid.ID
}

// Mutate applies the CreatePrinterInput on the PrinterMutation builder.
func (i *CreatePrinterInput) Mutate(m *PrinterMutation) {
	m.SetName(i.Name)
	if v := i.LabelZpl; v != nil {
		m.SetLabelZpl(*v)
	}
	if v := i.LabelPdf; v != nil {
		m.SetLabelPdf(*v)
	}
	if v := i.LabelPng; v != nil {
		m.SetLabelPng(*v)
	}
	if v := i.Document; v != nil {
		m.SetDocument(*v)
	}
	if v := i.Rotate180; v != nil {
		m.SetRotate180(*v)
	}
	if v := i.UseShell; v != nil {
		m.SetUseShell(*v)
	}
	if v := i.PrintSize; v != nil {
		m.SetPrintSize(*v)
	}
	m.SetWorkstationID(i.WorkstationID)
	if v := i.PrintJobIDs; len(v) > 0 {
		m.AddPrintJobIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePrinterInput on the PrinterCreate builder.
func (c *PrinterCreate) SetInput(i CreatePrinterInput) *PrinterCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePrinterInput represents a mutation input for updating printers.
type UpdatePrinterInput struct {
	Name              *string
	LabelZpl          *bool
	LabelPdf          *bool
	LabelPng          *bool
	Document          *bool
	Rotate180         *bool
	UseShell          *bool
	PrintSize         *printer.PrintSize
	WorkstationID     *pulid.ID
	ClearPrintJobs    bool
	AddPrintJobIDs    []pulid.ID
	RemovePrintJobIDs []pulid.ID
}

// Mutate applies the UpdatePrinterInput on the PrinterMutation builder.
func (i *UpdatePrinterInput) Mutate(m *PrinterMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.LabelZpl; v != nil {
		m.SetLabelZpl(*v)
	}
	if v := i.LabelPdf; v != nil {
		m.SetLabelPdf(*v)
	}
	if v := i.LabelPng; v != nil {
		m.SetLabelPng(*v)
	}
	if v := i.Document; v != nil {
		m.SetDocument(*v)
	}
	if v := i.Rotate180; v != nil {
		m.SetRotate180(*v)
	}
	if v := i.UseShell; v != nil {
		m.SetUseShell(*v)
	}
	if v := i.PrintSize; v != nil {
		m.SetPrintSize(*v)
	}
	if v := i.WorkstationID; v != nil {
		m.SetWorkstationID(*v)
	}
	if i.ClearPrintJobs {
		m.ClearPrintJobs()
	}
	if v := i.AddPrintJobIDs; len(v) > 0 {
		m.AddPrintJobIDs(v...)
	}
	if v := i.RemovePrintJobIDs; len(v) > 0 {
		m.RemovePrintJobIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePrinterInput on the PrinterUpdate builder.
func (c *PrinterUpdate) SetInput(i UpdatePrinterInput) *PrinterUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePrinterInput on the PrinterUpdateOne builder.
func (c *PrinterUpdateOne) SetInput(i UpdatePrinterInput) *PrinterUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProductInput represents a mutation input for creating products.
type CreateProductInput struct {
	Title             string
	BodyHTML          *string
	Status            *product.Status
	ProductTagIDs     []pulid.ID
	ProductVariantIDs []pulid.ID
	ProductImageIDs   []pulid.ID
}

// Mutate applies the CreateProductInput on the ProductMutation builder.
func (i *CreateProductInput) Mutate(m *ProductMutation) {
	m.SetTitle(i.Title)
	if v := i.BodyHTML; v != nil {
		m.SetBodyHTML(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.ProductTagIDs; len(v) > 0 {
		m.AddProductTagIDs(v...)
	}
	if v := i.ProductVariantIDs; len(v) > 0 {
		m.AddProductVariantIDs(v...)
	}
	if v := i.ProductImageIDs; len(v) > 0 {
		m.AddProductImageIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProductInput on the ProductCreate builder.
func (c *ProductCreate) SetInput(i CreateProductInput) *ProductCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProductInput represents a mutation input for updating products.
type UpdateProductInput struct {
	Title                   *string
	ClearBodyHTML           bool
	BodyHTML                *string
	Status                  *product.Status
	ClearProductTags        bool
	AddProductTagIDs        []pulid.ID
	RemoveProductTagIDs     []pulid.ID
	ClearProductVariant     bool
	AddProductVariantIDs    []pulid.ID
	RemoveProductVariantIDs []pulid.ID
	ClearProductImage       bool
	AddProductImageIDs      []pulid.ID
	RemoveProductImageIDs   []pulid.ID
}

// Mutate applies the UpdateProductInput on the ProductMutation builder.
func (i *UpdateProductInput) Mutate(m *ProductMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearBodyHTML {
		m.ClearBodyHTML()
	}
	if v := i.BodyHTML; v != nil {
		m.SetBodyHTML(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearProductTags {
		m.ClearProductTags()
	}
	if v := i.AddProductTagIDs; len(v) > 0 {
		m.AddProductTagIDs(v...)
	}
	if v := i.RemoveProductTagIDs; len(v) > 0 {
		m.RemoveProductTagIDs(v...)
	}
	if i.ClearProductVariant {
		m.ClearProductVariant()
	}
	if v := i.AddProductVariantIDs; len(v) > 0 {
		m.AddProductVariantIDs(v...)
	}
	if v := i.RemoveProductVariantIDs; len(v) > 0 {
		m.RemoveProductVariantIDs(v...)
	}
	if i.ClearProductImage {
		m.ClearProductImage()
	}
	if v := i.AddProductImageIDs; len(v) > 0 {
		m.AddProductImageIDs(v...)
	}
	if v := i.RemoveProductImageIDs; len(v) > 0 {
		m.RemoveProductImageIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdate builder.
func (c *ProductUpdate) SetInput(i UpdateProductInput) *ProductUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdateOne builder.
func (c *ProductUpdateOne) SetInput(i UpdateProductInput) *ProductUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProductTagInput represents a mutation input for creating producttags.
type CreateProductTagInput struct {
	Name       string
	CreatedAt  *time.Time
	ProductIDs []pulid.ID
}

// Mutate applies the CreateProductTagInput on the ProductTagMutation builder.
func (i *CreateProductTagInput) Mutate(m *ProductTagMutation) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.ProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProductTagInput on the ProductTagCreate builder.
func (c *ProductTagCreate) SetInput(i CreateProductTagInput) *ProductTagCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProductTagInput represents a mutation input for updating producttags.
type UpdateProductTagInput struct {
	Name             *string
	ClearProducts    bool
	AddProductIDs    []pulid.ID
	RemoveProductIDs []pulid.ID
}

// Mutate applies the UpdateProductTagInput on the ProductTagMutation builder.
func (i *UpdateProductTagInput) Mutate(m *ProductTagMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearProducts {
		m.ClearProducts()
	}
	if v := i.AddProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
	if v := i.RemoveProductIDs; len(v) > 0 {
		m.RemoveProductIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProductTagInput on the ProductTagUpdate builder.
func (c *ProductTagUpdate) SetInput(i UpdateProductTagInput) *ProductTagUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProductTagInput on the ProductTagUpdateOne builder.
func (c *ProductTagUpdateOne) SetInput(i UpdateProductTagInput) *ProductTagUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProductVariantInput represents a mutation input for creating productvariants.
type CreateProductVariantInput struct {
	Archived        *bool
	Description     *string
	EanNumber       *string
	WeightG         *int
	DimensionLength *int
	DimensionWidth  *int
	DimensionHeight *int
	OrderLineIDs    []pulid.ID
	ProductImageIDs []pulid.ID
	InventoryItemID *pulid.ID
}

// Mutate applies the CreateProductVariantInput on the ProductVariantMutation builder.
func (i *CreateProductVariantInput) Mutate(m *ProductVariantMutation) {
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.EanNumber; v != nil {
		m.SetEanNumber(*v)
	}
	if v := i.WeightG; v != nil {
		m.SetWeightG(*v)
	}
	if v := i.DimensionLength; v != nil {
		m.SetDimensionLength(*v)
	}
	if v := i.DimensionWidth; v != nil {
		m.SetDimensionWidth(*v)
	}
	if v := i.DimensionHeight; v != nil {
		m.SetDimensionHeight(*v)
	}
	if v := i.OrderLineIDs; len(v) > 0 {
		m.AddOrderLineIDs(v...)
	}
	if v := i.ProductImageIDs; len(v) > 0 {
		m.AddProductImageIDs(v...)
	}
	if v := i.InventoryItemID; v != nil {
		m.SetInventoryItemID(*v)
	}
}

// SetInput applies the change-set in the CreateProductVariantInput on the ProductVariantCreate builder.
func (c *ProductVariantCreate) SetInput(i CreateProductVariantInput) *ProductVariantCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProductVariantInput represents a mutation input for updating productvariants.
type UpdateProductVariantInput struct {
	Archived              *bool
	ClearDescription      bool
	Description           *string
	ClearEanNumber        bool
	EanNumber             *string
	ClearWeightG          bool
	WeightG               *int
	ClearDimensionLength  bool
	DimensionLength       *int
	ClearDimensionWidth   bool
	DimensionWidth        *int
	ClearDimensionHeight  bool
	DimensionHeight       *int
	ClearOrderLines       bool
	AddOrderLineIDs       []pulid.ID
	RemoveOrderLineIDs    []pulid.ID
	ClearProductImage     bool
	AddProductImageIDs    []pulid.ID
	RemoveProductImageIDs []pulid.ID
	ClearInventoryItem    bool
	InventoryItemID       *pulid.ID
}

// Mutate applies the UpdateProductVariantInput on the ProductVariantMutation builder.
func (i *UpdateProductVariantInput) Mutate(m *ProductVariantMutation) {
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearEanNumber {
		m.ClearEanNumber()
	}
	if v := i.EanNumber; v != nil {
		m.SetEanNumber(*v)
	}
	if i.ClearWeightG {
		m.ClearWeightG()
	}
	if v := i.WeightG; v != nil {
		m.SetWeightG(*v)
	}
	if i.ClearDimensionLength {
		m.ClearDimensionLength()
	}
	if v := i.DimensionLength; v != nil {
		m.SetDimensionLength(*v)
	}
	if i.ClearDimensionWidth {
		m.ClearDimensionWidth()
	}
	if v := i.DimensionWidth; v != nil {
		m.SetDimensionWidth(*v)
	}
	if i.ClearDimensionHeight {
		m.ClearDimensionHeight()
	}
	if v := i.DimensionHeight; v != nil {
		m.SetDimensionHeight(*v)
	}
	if i.ClearOrderLines {
		m.ClearOrderLines()
	}
	if v := i.AddOrderLineIDs; len(v) > 0 {
		m.AddOrderLineIDs(v...)
	}
	if v := i.RemoveOrderLineIDs; len(v) > 0 {
		m.RemoveOrderLineIDs(v...)
	}
	if i.ClearProductImage {
		m.ClearProductImage()
	}
	if v := i.AddProductImageIDs; len(v) > 0 {
		m.AddProductImageIDs(v...)
	}
	if v := i.RemoveProductImageIDs; len(v) > 0 {
		m.RemoveProductImageIDs(v...)
	}
	if i.ClearInventoryItem {
		m.ClearInventoryItem()
	}
	if v := i.InventoryItemID; v != nil {
		m.SetInventoryItemID(*v)
	}
}

// SetInput applies the change-set in the UpdateProductVariantInput on the ProductVariantUpdate builder.
func (c *ProductVariantUpdate) SetInput(i UpdateProductVariantInput) *ProductVariantUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProductVariantInput on the ProductVariantUpdateOne builder.
func (c *ProductVariantUpdateOne) SetInput(i UpdateProductVariantInput) *ProductVariantUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateReturnColliInput represents a mutation input for creating returncollis.
type CreateReturnColliInput struct {
	ExpectedAt              *time.Time
	LabelPdf                *string
	LabelPng                *string
	QrCodePng               *string
	Comment                 *string
	Status                  *returncolli.Status
	EmailReceived           *time.Time
	EmailAccepted           *time.Time
	EmailConfirmationLabel  *time.Time
	EmailConfirmationQrCode *time.Time
	OrderID                 pulid.ID
	DeliveryOptionID        *pulid.ID
	ReturnPortalID          pulid.ID
	PackagingID             *pulid.ID
	ReturnOrderLineIDs      []pulid.ID
}

// Mutate applies the CreateReturnColliInput on the ReturnColliMutation builder.
func (i *CreateReturnColliInput) Mutate(m *ReturnColliMutation) {
	if v := i.ExpectedAt; v != nil {
		m.SetExpectedAt(*v)
	}
	if v := i.LabelPdf; v != nil {
		m.SetLabelPdf(*v)
	}
	if v := i.LabelPng; v != nil {
		m.SetLabelPng(*v)
	}
	if v := i.QrCodePng; v != nil {
		m.SetQrCodePng(*v)
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.EmailReceived; v != nil {
		m.SetEmailReceived(*v)
	}
	if v := i.EmailAccepted; v != nil {
		m.SetEmailAccepted(*v)
	}
	if v := i.EmailConfirmationLabel; v != nil {
		m.SetEmailConfirmationLabel(*v)
	}
	if v := i.EmailConfirmationQrCode; v != nil {
		m.SetEmailConfirmationQrCode(*v)
	}
	m.SetOrderID(i.OrderID)
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	m.SetReturnPortalID(i.ReturnPortalID)
	if v := i.PackagingID; v != nil {
		m.SetPackagingID(*v)
	}
	if v := i.ReturnOrderLineIDs; len(v) > 0 {
		m.AddReturnOrderLineIDs(v...)
	}
}

// SetInput applies the change-set in the CreateReturnColliInput on the ReturnColliCreate builder.
func (c *ReturnColliCreate) SetInput(i CreateReturnColliInput) *ReturnColliCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateReturnColliInput represents a mutation input for updating returncollis.
type UpdateReturnColliInput struct {
	ClearExpectedAt              bool
	ExpectedAt                   *time.Time
	ClearLabelPdf                bool
	LabelPdf                     *string
	ClearLabelPng                bool
	LabelPng                     *string
	ClearQrCodePng               bool
	QrCodePng                    *string
	ClearComment                 bool
	Comment                      *string
	Status                       *returncolli.Status
	ClearEmailReceived           bool
	EmailReceived                *time.Time
	ClearEmailAccepted           bool
	EmailAccepted                *time.Time
	ClearEmailConfirmationLabel  bool
	EmailConfirmationLabel       *time.Time
	ClearEmailConfirmationQrCode bool
	EmailConfirmationQrCode      *time.Time
	OrderID                      *pulid.ID
	ClearDeliveryOption          bool
	DeliveryOptionID             *pulid.ID
	ReturnPortalID               *pulid.ID
	ClearPackaging               bool
	PackagingID                  *pulid.ID
	ClearReturnOrderLine         bool
	AddReturnOrderLineIDs        []pulid.ID
	RemoveReturnOrderLineIDs     []pulid.ID
}

// Mutate applies the UpdateReturnColliInput on the ReturnColliMutation builder.
func (i *UpdateReturnColliInput) Mutate(m *ReturnColliMutation) {
	if i.ClearExpectedAt {
		m.ClearExpectedAt()
	}
	if v := i.ExpectedAt; v != nil {
		m.SetExpectedAt(*v)
	}
	if i.ClearLabelPdf {
		m.ClearLabelPdf()
	}
	if v := i.LabelPdf; v != nil {
		m.SetLabelPdf(*v)
	}
	if i.ClearLabelPng {
		m.ClearLabelPng()
	}
	if v := i.LabelPng; v != nil {
		m.SetLabelPng(*v)
	}
	if i.ClearQrCodePng {
		m.ClearQrCodePng()
	}
	if v := i.QrCodePng; v != nil {
		m.SetQrCodePng(*v)
	}
	if i.ClearComment {
		m.ClearComment()
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearEmailReceived {
		m.ClearEmailReceived()
	}
	if v := i.EmailReceived; v != nil {
		m.SetEmailReceived(*v)
	}
	if i.ClearEmailAccepted {
		m.ClearEmailAccepted()
	}
	if v := i.EmailAccepted; v != nil {
		m.SetEmailAccepted(*v)
	}
	if i.ClearEmailConfirmationLabel {
		m.ClearEmailConfirmationLabel()
	}
	if v := i.EmailConfirmationLabel; v != nil {
		m.SetEmailConfirmationLabel(*v)
	}
	if i.ClearEmailConfirmationQrCode {
		m.ClearEmailConfirmationQrCode()
	}
	if v := i.EmailConfirmationQrCode; v != nil {
		m.SetEmailConfirmationQrCode(*v)
	}
	if v := i.OrderID; v != nil {
		m.SetOrderID(*v)
	}
	if i.ClearDeliveryOption {
		m.ClearDeliveryOption()
	}
	if v := i.DeliveryOptionID; v != nil {
		m.SetDeliveryOptionID(*v)
	}
	if v := i.ReturnPortalID; v != nil {
		m.SetReturnPortalID(*v)
	}
	if i.ClearPackaging {
		m.ClearPackaging()
	}
	if v := i.PackagingID; v != nil {
		m.SetPackagingID(*v)
	}
	if i.ClearReturnOrderLine {
		m.ClearReturnOrderLine()
	}
	if v := i.AddReturnOrderLineIDs; len(v) > 0 {
		m.AddReturnOrderLineIDs(v...)
	}
	if v := i.RemoveReturnOrderLineIDs; len(v) > 0 {
		m.RemoveReturnOrderLineIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateReturnColliInput on the ReturnColliUpdate builder.
func (c *ReturnColliUpdate) SetInput(i UpdateReturnColliInput) *ReturnColliUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateReturnColliInput on the ReturnColliUpdateOne builder.
func (c *ReturnColliUpdateOne) SetInput(i UpdateReturnColliInput) *ReturnColliUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateReturnOrderLineInput represents a mutation input for creating returnorderlines.
type CreateReturnOrderLineInput struct {
	Units               int
	ReturnColliID       pulid.ID
	OrderLineID         pulid.ID
	ReturnPortalClaimID pulid.ID
}

// Mutate applies the CreateReturnOrderLineInput on the ReturnOrderLineMutation builder.
func (i *CreateReturnOrderLineInput) Mutate(m *ReturnOrderLineMutation) {
	m.SetUnits(i.Units)
	m.SetReturnColliID(i.ReturnColliID)
	m.SetOrderLineID(i.OrderLineID)
	m.SetReturnPortalClaimID(i.ReturnPortalClaimID)
}

// SetInput applies the change-set in the CreateReturnOrderLineInput on the ReturnOrderLineCreate builder.
func (c *ReturnOrderLineCreate) SetInput(i CreateReturnOrderLineInput) *ReturnOrderLineCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateReturnOrderLineInput represents a mutation input for updating returnorderlines.
type UpdateReturnOrderLineInput struct {
	Units               *int
	ReturnColliID       *pulid.ID
	OrderLineID         *pulid.ID
	ReturnPortalClaimID *pulid.ID
}

// Mutate applies the UpdateReturnOrderLineInput on the ReturnOrderLineMutation builder.
func (i *UpdateReturnOrderLineInput) Mutate(m *ReturnOrderLineMutation) {
	if v := i.Units; v != nil {
		m.SetUnits(*v)
	}
	if v := i.ReturnColliID; v != nil {
		m.SetReturnColliID(*v)
	}
	if v := i.OrderLineID; v != nil {
		m.SetOrderLineID(*v)
	}
	if v := i.ReturnPortalClaimID; v != nil {
		m.SetReturnPortalClaimID(*v)
	}
}

// SetInput applies the change-set in the UpdateReturnOrderLineInput on the ReturnOrderLineUpdate builder.
func (c *ReturnOrderLineUpdate) SetInput(i UpdateReturnOrderLineInput) *ReturnOrderLineUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateReturnOrderLineInput on the ReturnOrderLineUpdateOne builder.
func (c *ReturnOrderLineUpdateOne) SetInput(i UpdateReturnOrderLineInput) *ReturnOrderLineUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateReturnPortalInput represents a mutation input for creating returnportals.
type CreateReturnPortalInput struct {
	Name                      string
	ReturnOpenHours           *int
	AutomaticallyAccept       *bool
	ReturnPortalClaimIDs      []pulid.ID
	ReturnLocationIDs         []pulid.ID
	DeliveryOptionIDs         []pulid.ID
	ConnectionID              *pulid.ID
	EmailConfirmationLabelID  *pulid.ID
	EmailConfirmationQrCodeID *pulid.ID
	EmailReceivedID           *pulid.ID
	EmailAcceptedID           *pulid.ID
	ReturnColliIDs            []pulid.ID
}

// Mutate applies the CreateReturnPortalInput on the ReturnPortalMutation builder.
func (i *CreateReturnPortalInput) Mutate(m *ReturnPortalMutation) {
	m.SetName(i.Name)
	if v := i.ReturnOpenHours; v != nil {
		m.SetReturnOpenHours(*v)
	}
	if v := i.AutomaticallyAccept; v != nil {
		m.SetAutomaticallyAccept(*v)
	}
	if v := i.ReturnPortalClaimIDs; len(v) > 0 {
		m.AddReturnPortalClaimIDs(v...)
	}
	if v := i.ReturnLocationIDs; len(v) > 0 {
		m.AddReturnLocationIDs(v...)
	}
	if v := i.DeliveryOptionIDs; len(v) > 0 {
		m.AddDeliveryOptionIDs(v...)
	}
	if v := i.ConnectionID; v != nil {
		m.SetConnectionID(*v)
	}
	if v := i.EmailConfirmationLabelID; v != nil {
		m.SetEmailConfirmationLabelID(*v)
	}
	if v := i.EmailConfirmationQrCodeID; v != nil {
		m.SetEmailConfirmationQrCodeID(*v)
	}
	if v := i.EmailReceivedID; v != nil {
		m.SetEmailReceivedID(*v)
	}
	if v := i.EmailAcceptedID; v != nil {
		m.SetEmailAcceptedID(*v)
	}
	if v := i.ReturnColliIDs; len(v) > 0 {
		m.AddReturnColliIDs(v...)
	}
}

// SetInput applies the change-set in the CreateReturnPortalInput on the ReturnPortalCreate builder.
func (c *ReturnPortalCreate) SetInput(i CreateReturnPortalInput) *ReturnPortalCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateReturnPortalInput represents a mutation input for updating returnportals.
type UpdateReturnPortalInput struct {
	Name                         *string
	ReturnOpenHours              *int
	AutomaticallyAccept          *bool
	ClearReturnPortalClaim       bool
	AddReturnPortalClaimIDs      []pulid.ID
	RemoveReturnPortalClaimIDs   []pulid.ID
	ClearReturnLocation          bool
	AddReturnLocationIDs         []pulid.ID
	RemoveReturnLocationIDs      []pulid.ID
	ClearDeliveryOptions         bool
	AddDeliveryOptionIDs         []pulid.ID
	RemoveDeliveryOptionIDs      []pulid.ID
	ClearConnection              bool
	ConnectionID                 *pulid.ID
	ClearEmailConfirmationLabel  bool
	EmailConfirmationLabelID     *pulid.ID
	ClearEmailConfirmationQrCode bool
	EmailConfirmationQrCodeID    *pulid.ID
	ClearEmailReceived           bool
	EmailReceivedID              *pulid.ID
	ClearEmailAccepted           bool
	EmailAcceptedID              *pulid.ID
	ClearReturnColli             bool
	AddReturnColliIDs            []pulid.ID
	RemoveReturnColliIDs         []pulid.ID
}

// Mutate applies the UpdateReturnPortalInput on the ReturnPortalMutation builder.
func (i *UpdateReturnPortalInput) Mutate(m *ReturnPortalMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ReturnOpenHours; v != nil {
		m.SetReturnOpenHours(*v)
	}
	if v := i.AutomaticallyAccept; v != nil {
		m.SetAutomaticallyAccept(*v)
	}
	if i.ClearReturnPortalClaim {
		m.ClearReturnPortalClaim()
	}
	if v := i.AddReturnPortalClaimIDs; len(v) > 0 {
		m.AddReturnPortalClaimIDs(v...)
	}
	if v := i.RemoveReturnPortalClaimIDs; len(v) > 0 {
		m.RemoveReturnPortalClaimIDs(v...)
	}
	if i.ClearReturnLocation {
		m.ClearReturnLocation()
	}
	if v := i.AddReturnLocationIDs; len(v) > 0 {
		m.AddReturnLocationIDs(v...)
	}
	if v := i.RemoveReturnLocationIDs; len(v) > 0 {
		m.RemoveReturnLocationIDs(v...)
	}
	if i.ClearDeliveryOptions {
		m.ClearDeliveryOptions()
	}
	if v := i.AddDeliveryOptionIDs; len(v) > 0 {
		m.AddDeliveryOptionIDs(v...)
	}
	if v := i.RemoveDeliveryOptionIDs; len(v) > 0 {
		m.RemoveDeliveryOptionIDs(v...)
	}
	if i.ClearConnection {
		m.ClearConnection()
	}
	if v := i.ConnectionID; v != nil {
		m.SetConnectionID(*v)
	}
	if i.ClearEmailConfirmationLabel {
		m.ClearEmailConfirmationLabel()
	}
	if v := i.EmailConfirmationLabelID; v != nil {
		m.SetEmailConfirmationLabelID(*v)
	}
	if i.ClearEmailConfirmationQrCode {
		m.ClearEmailConfirmationQrCode()
	}
	if v := i.EmailConfirmationQrCodeID; v != nil {
		m.SetEmailConfirmationQrCodeID(*v)
	}
	if i.ClearEmailReceived {
		m.ClearEmailReceived()
	}
	if v := i.EmailReceivedID; v != nil {
		m.SetEmailReceivedID(*v)
	}
	if i.ClearEmailAccepted {
		m.ClearEmailAccepted()
	}
	if v := i.EmailAcceptedID; v != nil {
		m.SetEmailAcceptedID(*v)
	}
	if i.ClearReturnColli {
		m.ClearReturnColli()
	}
	if v := i.AddReturnColliIDs; len(v) > 0 {
		m.AddReturnColliIDs(v...)
	}
	if v := i.RemoveReturnColliIDs; len(v) > 0 {
		m.RemoveReturnColliIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateReturnPortalInput on the ReturnPortalUpdate builder.
func (c *ReturnPortalUpdate) SetInput(i UpdateReturnPortalInput) *ReturnPortalUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateReturnPortalInput on the ReturnPortalUpdateOne builder.
func (c *ReturnPortalUpdateOne) SetInput(i UpdateReturnPortalInput) *ReturnPortalUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateReturnPortalClaimInput represents a mutation input for creating returnportalclaims.
type CreateReturnPortalClaimInput struct {
	Name               string
	Description        string
	Restockable        bool
	ReturnPortalID     pulid.ID
	ReturnLocationID   *pulid.ID
	ReturnOrderLineIDs []pulid.ID
}

// Mutate applies the CreateReturnPortalClaimInput on the ReturnPortalClaimMutation builder.
func (i *CreateReturnPortalClaimInput) Mutate(m *ReturnPortalClaimMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetRestockable(i.Restockable)
	m.SetReturnPortalID(i.ReturnPortalID)
	if v := i.ReturnLocationID; v != nil {
		m.SetReturnLocationID(*v)
	}
	if v := i.ReturnOrderLineIDs; len(v) > 0 {
		m.AddReturnOrderLineIDs(v...)
	}
}

// SetInput applies the change-set in the CreateReturnPortalClaimInput on the ReturnPortalClaimCreate builder.
func (c *ReturnPortalClaimCreate) SetInput(i CreateReturnPortalClaimInput) *ReturnPortalClaimCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateReturnPortalClaimInput represents a mutation input for updating returnportalclaims.
type UpdateReturnPortalClaimInput struct {
	Name                     *string
	Description              *string
	Restockable              *bool
	ReturnPortalID           *pulid.ID
	ClearReturnLocation      bool
	ReturnLocationID         *pulid.ID
	ClearReturnOrderLine     bool
	AddReturnOrderLineIDs    []pulid.ID
	RemoveReturnOrderLineIDs []pulid.ID
}

// Mutate applies the UpdateReturnPortalClaimInput on the ReturnPortalClaimMutation builder.
func (i *UpdateReturnPortalClaimInput) Mutate(m *ReturnPortalClaimMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Restockable; v != nil {
		m.SetRestockable(*v)
	}
	if v := i.ReturnPortalID; v != nil {
		m.SetReturnPortalID(*v)
	}
	if i.ClearReturnLocation {
		m.ClearReturnLocation()
	}
	if v := i.ReturnLocationID; v != nil {
		m.SetReturnLocationID(*v)
	}
	if i.ClearReturnOrderLine {
		m.ClearReturnOrderLine()
	}
	if v := i.AddReturnOrderLineIDs; len(v) > 0 {
		m.AddReturnOrderLineIDs(v...)
	}
	if v := i.RemoveReturnOrderLineIDs; len(v) > 0 {
		m.RemoveReturnOrderLineIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateReturnPortalClaimInput on the ReturnPortalClaimUpdate builder.
func (c *ReturnPortalClaimUpdate) SetInput(i UpdateReturnPortalClaimInput) *ReturnPortalClaimUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateReturnPortalClaimInput on the ReturnPortalClaimUpdateOne builder.
func (c *ReturnPortalClaimUpdateOne) SetInput(i UpdateReturnPortalClaimInput) *ReturnPortalClaimUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSeatGroupInput represents a mutation input for creating seatgroups.
type CreateSeatGroupInput struct {
	Name                   string
	CreatedAt              *time.Time
	UserIDs                []pulid.ID
	AssignedAccessRightIDs []pulid.ID
}

// Mutate applies the CreateSeatGroupInput on the SeatGroupMutation builder.
func (i *CreateSeatGroupInput) Mutate(m *SeatGroupMutation) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.AssignedAccessRightIDs; len(v) > 0 {
		m.AddAssignedAccessRightIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSeatGroupInput on the SeatGroupCreate builder.
func (c *SeatGroupCreate) SetInput(i CreateSeatGroupInput) *SeatGroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSeatGroupInput represents a mutation input for updating seatgroups.
type UpdateSeatGroupInput struct {
	Name                         *string
	ClearUser                    bool
	AddUserIDs                   []pulid.ID
	RemoveUserIDs                []pulid.ID
	ClearAssignedAccessRight     bool
	AddAssignedAccessRightIDs    []pulid.ID
	RemoveAssignedAccessRightIDs []pulid.ID
}

// Mutate applies the UpdateSeatGroupInput on the SeatGroupMutation builder.
func (i *UpdateSeatGroupInput) Mutate(m *SeatGroupMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearAssignedAccessRight {
		m.ClearAssignedAccessRight()
	}
	if v := i.AddAssignedAccessRightIDs; len(v) > 0 {
		m.AddAssignedAccessRightIDs(v...)
	}
	if v := i.RemoveAssignedAccessRightIDs; len(v) > 0 {
		m.RemoveAssignedAccessRightIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSeatGroupInput on the SeatGroupUpdate builder.
func (c *SeatGroupUpdate) SetInput(i UpdateSeatGroupInput) *SeatGroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSeatGroupInput on the SeatGroupUpdateOne builder.
func (c *SeatGroupUpdateOne) SetInput(i UpdateSeatGroupInput) *SeatGroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSeatGroupAccessRightInput represents a mutation input for creating seatgroupaccessrights.
type CreateSeatGroupAccessRightInput struct {
	Level         *seatgroupaccessright.Level
	AccessRightID pulid.ID
	SeatGroupID   pulid.ID
}

// Mutate applies the CreateSeatGroupAccessRightInput on the SeatGroupAccessRightMutation builder.
func (i *CreateSeatGroupAccessRightInput) Mutate(m *SeatGroupAccessRightMutation) {
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	m.SetAccessRightID(i.AccessRightID)
	m.SetSeatGroupID(i.SeatGroupID)
}

// SetInput applies the change-set in the CreateSeatGroupAccessRightInput on the SeatGroupAccessRightCreate builder.
func (c *SeatGroupAccessRightCreate) SetInput(i CreateSeatGroupAccessRightInput) *SeatGroupAccessRightCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSeatGroupAccessRightInput represents a mutation input for updating seatgroupaccessrights.
type UpdateSeatGroupAccessRightInput struct {
	Level         *seatgroupaccessright.Level
	AccessRightID *pulid.ID
	SeatGroupID   *pulid.ID
}

// Mutate applies the UpdateSeatGroupAccessRightInput on the SeatGroupAccessRightMutation builder.
func (i *UpdateSeatGroupAccessRightInput) Mutate(m *SeatGroupAccessRightMutation) {
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.AccessRightID; v != nil {
		m.SetAccessRightID(*v)
	}
	if v := i.SeatGroupID; v != nil {
		m.SetSeatGroupID(*v)
	}
}

// SetInput applies the change-set in the UpdateSeatGroupAccessRightInput on the SeatGroupAccessRightUpdate builder.
func (c *SeatGroupAccessRightUpdate) SetInput(i UpdateSeatGroupAccessRightInput) *SeatGroupAccessRightUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSeatGroupAccessRightInput on the SeatGroupAccessRightUpdateOne builder.
func (c *SeatGroupAccessRightUpdateOne) SetInput(i UpdateSeatGroupAccessRightInput) *SeatGroupAccessRightUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateShipmentInput represents a mutation input for creating shipments.
type CreateShipmentInput struct {
	ShipmentPublicID    string
	Status              shipment.Status
	CarrierID           pulid.ID
	ShipmentHistoryIDs  []pulid.ID
	ShipmentBringID     *pulid.ID
	ShipmentDAOID       *pulid.ID
	ShipmentDFID        *pulid.ID
	ShipmentDSVID       *pulid.ID
	ShipmentEasyPostID  *pulid.ID
	ShipmentPostNordID  *pulid.ID
	ShipmentGLSID       *pulid.ID
	ShipmentUSPSID      *pulid.ID
	ConsolidationID     *pulid.ID
	OldConsolidationIDs []pulid.ID
	ShipmentParcelIDs   []pulid.ID
	ShipmentPalletIDs   []pulid.ID
}

// Mutate applies the CreateShipmentInput on the ShipmentMutation builder.
func (i *CreateShipmentInput) Mutate(m *ShipmentMutation) {
	m.SetShipmentPublicID(i.ShipmentPublicID)
	m.SetStatus(i.Status)
	m.SetCarrierID(i.CarrierID)
	if v := i.ShipmentHistoryIDs; len(v) > 0 {
		m.AddShipmentHistoryIDs(v...)
	}
	if v := i.ShipmentBringID; v != nil {
		m.SetShipmentBringID(*v)
	}
	if v := i.ShipmentDAOID; v != nil {
		m.SetShipmentDAOID(*v)
	}
	if v := i.ShipmentDFID; v != nil {
		m.SetShipmentDFID(*v)
	}
	if v := i.ShipmentDSVID; v != nil {
		m.SetShipmentDSVID(*v)
	}
	if v := i.ShipmentEasyPostID; v != nil {
		m.SetShipmentEasyPostID(*v)
	}
	if v := i.ShipmentPostNordID; v != nil {
		m.SetShipmentPostNordID(*v)
	}
	if v := i.ShipmentGLSID; v != nil {
		m.SetShipmentGLSID(*v)
	}
	if v := i.ShipmentUSPSID; v != nil {
		m.SetShipmentUSPSID(*v)
	}
	if v := i.ConsolidationID; v != nil {
		m.SetConsolidationID(*v)
	}
	if v := i.OldConsolidationIDs; len(v) > 0 {
		m.AddOldConsolidationIDs(v...)
	}
	if v := i.ShipmentParcelIDs; len(v) > 0 {
		m.AddShipmentParcelIDs(v...)
	}
	if v := i.ShipmentPalletIDs; len(v) > 0 {
		m.AddShipmentPalletIDs(v...)
	}
}

// SetInput applies the change-set in the CreateShipmentInput on the ShipmentCreate builder.
func (c *ShipmentCreate) SetInput(i CreateShipmentInput) *ShipmentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShipmentInput represents a mutation input for updating shipments.
type UpdateShipmentInput struct {
	ShipmentPublicID          *string
	Status                    *shipment.Status
	ClearShipmentHistory      bool
	AddShipmentHistoryIDs     []pulid.ID
	RemoveShipmentHistoryIDs  []pulid.ID
	ClearShipmentBring        bool
	ShipmentBringID           *pulid.ID
	ClearShipmentDAO          bool
	ShipmentDAOID             *pulid.ID
	ClearShipmentDF           bool
	ShipmentDFID              *pulid.ID
	ClearShipmentDSV          bool
	ShipmentDSVID             *pulid.ID
	ClearShipmentEasyPost     bool
	ShipmentEasyPostID        *pulid.ID
	ClearShipmentPostNord     bool
	ShipmentPostNordID        *pulid.ID
	ClearShipmentGLS          bool
	ShipmentGLSID             *pulid.ID
	ClearShipmentUSPS         bool
	ShipmentUSPSID            *pulid.ID
	ClearConsolidation        bool
	ConsolidationID           *pulid.ID
	ClearOldConsolidation     bool
	AddOldConsolidationIDs    []pulid.ID
	RemoveOldConsolidationIDs []pulid.ID
	ClearShipmentParcel       bool
	AddShipmentParcelIDs      []pulid.ID
	RemoveShipmentParcelIDs   []pulid.ID
	ClearShipmentPallet       bool
	AddShipmentPalletIDs      []pulid.ID
	RemoveShipmentPalletIDs   []pulid.ID
}

// Mutate applies the UpdateShipmentInput on the ShipmentMutation builder.
func (i *UpdateShipmentInput) Mutate(m *ShipmentMutation) {
	if v := i.ShipmentPublicID; v != nil {
		m.SetShipmentPublicID(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearShipmentHistory {
		m.ClearShipmentHistory()
	}
	if v := i.AddShipmentHistoryIDs; len(v) > 0 {
		m.AddShipmentHistoryIDs(v...)
	}
	if v := i.RemoveShipmentHistoryIDs; len(v) > 0 {
		m.RemoveShipmentHistoryIDs(v...)
	}
	if i.ClearShipmentBring {
		m.ClearShipmentBring()
	}
	if v := i.ShipmentBringID; v != nil {
		m.SetShipmentBringID(*v)
	}
	if i.ClearShipmentDAO {
		m.ClearShipmentDAO()
	}
	if v := i.ShipmentDAOID; v != nil {
		m.SetShipmentDAOID(*v)
	}
	if i.ClearShipmentDF {
		m.ClearShipmentDF()
	}
	if v := i.ShipmentDFID; v != nil {
		m.SetShipmentDFID(*v)
	}
	if i.ClearShipmentDSV {
		m.ClearShipmentDSV()
	}
	if v := i.ShipmentDSVID; v != nil {
		m.SetShipmentDSVID(*v)
	}
	if i.ClearShipmentEasyPost {
		m.ClearShipmentEasyPost()
	}
	if v := i.ShipmentEasyPostID; v != nil {
		m.SetShipmentEasyPostID(*v)
	}
	if i.ClearShipmentPostNord {
		m.ClearShipmentPostNord()
	}
	if v := i.ShipmentPostNordID; v != nil {
		m.SetShipmentPostNordID(*v)
	}
	if i.ClearShipmentGLS {
		m.ClearShipmentGLS()
	}
	if v := i.ShipmentGLSID; v != nil {
		m.SetShipmentGLSID(*v)
	}
	if i.ClearShipmentUSPS {
		m.ClearShipmentUSPS()
	}
	if v := i.ShipmentUSPSID; v != nil {
		m.SetShipmentUSPSID(*v)
	}
	if i.ClearConsolidation {
		m.ClearConsolidation()
	}
	if v := i.ConsolidationID; v != nil {
		m.SetConsolidationID(*v)
	}
	if i.ClearOldConsolidation {
		m.ClearOldConsolidation()
	}
	if v := i.AddOldConsolidationIDs; len(v) > 0 {
		m.AddOldConsolidationIDs(v...)
	}
	if v := i.RemoveOldConsolidationIDs; len(v) > 0 {
		m.RemoveOldConsolidationIDs(v...)
	}
	if i.ClearShipmentParcel {
		m.ClearShipmentParcel()
	}
	if v := i.AddShipmentParcelIDs; len(v) > 0 {
		m.AddShipmentParcelIDs(v...)
	}
	if v := i.RemoveShipmentParcelIDs; len(v) > 0 {
		m.RemoveShipmentParcelIDs(v...)
	}
	if i.ClearShipmentPallet {
		m.ClearShipmentPallet()
	}
	if v := i.AddShipmentPalletIDs; len(v) > 0 {
		m.AddShipmentPalletIDs(v...)
	}
	if v := i.RemoveShipmentPalletIDs; len(v) > 0 {
		m.RemoveShipmentPalletIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateShipmentInput on the ShipmentUpdate builder.
func (c *ShipmentUpdate) SetInput(i UpdateShipmentInput) *ShipmentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShipmentInput on the ShipmentUpdateOne builder.
func (c *ShipmentUpdateOne) SetInput(i UpdateShipmentInput) *ShipmentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateShipmentBringInput represents a mutation input for creating shipmentbrings.
type CreateShipmentBringInput struct {
	ConsignmentNumber string
	ShipmentID        pulid.ID
}

// Mutate applies the CreateShipmentBringInput on the ShipmentBringMutation builder.
func (i *CreateShipmentBringInput) Mutate(m *ShipmentBringMutation) {
	m.SetConsignmentNumber(i.ConsignmentNumber)
	m.SetShipmentID(i.ShipmentID)
}

// SetInput applies the change-set in the CreateShipmentBringInput on the ShipmentBringCreate builder.
func (c *ShipmentBringCreate) SetInput(i CreateShipmentBringInput) *ShipmentBringCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShipmentBringInput represents a mutation input for updating shipmentbrings.
type UpdateShipmentBringInput struct {
	ConsignmentNumber *string
	ShipmentID        *pulid.ID
}

// Mutate applies the UpdateShipmentBringInput on the ShipmentBringMutation builder.
func (i *UpdateShipmentBringInput) Mutate(m *ShipmentBringMutation) {
	if v := i.ConsignmentNumber; v != nil {
		m.SetConsignmentNumber(*v)
	}
	if v := i.ShipmentID; v != nil {
		m.SetShipmentID(*v)
	}
}

// SetInput applies the change-set in the UpdateShipmentBringInput on the ShipmentBringUpdate builder.
func (c *ShipmentBringUpdate) SetInput(i UpdateShipmentBringInput) *ShipmentBringUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShipmentBringInput on the ShipmentBringUpdateOne builder.
func (c *ShipmentBringUpdateOne) SetInput(i UpdateShipmentBringInput) *ShipmentBringUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateShipmentDAOInput represents a mutation input for creating shipmentdaos.
type CreateShipmentDAOInput struct {
	BarcodeID  string
	ShipmentID pulid.ID
}

// Mutate applies the CreateShipmentDAOInput on the ShipmentDAOMutation builder.
func (i *CreateShipmentDAOInput) Mutate(m *ShipmentDAOMutation) {
	m.SetBarcodeID(i.BarcodeID)
	m.SetShipmentID(i.ShipmentID)
}

// SetInput applies the change-set in the CreateShipmentDAOInput on the ShipmentDAOCreate builder.
func (c *ShipmentDAOCreate) SetInput(i CreateShipmentDAOInput) *ShipmentDAOCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShipmentDAOInput represents a mutation input for updating shipmentdaos.
type UpdateShipmentDAOInput struct {
	BarcodeID  *string
	ShipmentID *pulid.ID
}

// Mutate applies the UpdateShipmentDAOInput on the ShipmentDAOMutation builder.
func (i *UpdateShipmentDAOInput) Mutate(m *ShipmentDAOMutation) {
	if v := i.BarcodeID; v != nil {
		m.SetBarcodeID(*v)
	}
	if v := i.ShipmentID; v != nil {
		m.SetShipmentID(*v)
	}
}

// SetInput applies the change-set in the UpdateShipmentDAOInput on the ShipmentDAOUpdate builder.
func (c *ShipmentDAOUpdate) SetInput(i UpdateShipmentDAOInput) *ShipmentDAOUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShipmentDAOInput on the ShipmentDAOUpdateOne builder.
func (c *ShipmentDAOUpdateOne) SetInput(i UpdateShipmentDAOInput) *ShipmentDAOUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateShipmentDSVInput represents a mutation input for creating shipmentdsvs.
type CreateShipmentDSVInput struct {
	BarcodeID  string
	ShipmentID pulid.ID
}

// Mutate applies the CreateShipmentDSVInput on the ShipmentDSVMutation builder.
func (i *CreateShipmentDSVInput) Mutate(m *ShipmentDSVMutation) {
	m.SetBarcodeID(i.BarcodeID)
	m.SetShipmentID(i.ShipmentID)
}

// SetInput applies the change-set in the CreateShipmentDSVInput on the ShipmentDSVCreate builder.
func (c *ShipmentDSVCreate) SetInput(i CreateShipmentDSVInput) *ShipmentDSVCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShipmentDSVInput represents a mutation input for updating shipmentdsvs.
type UpdateShipmentDSVInput struct {
	BarcodeID  *string
	ShipmentID *pulid.ID
}

// Mutate applies the UpdateShipmentDSVInput on the ShipmentDSVMutation builder.
func (i *UpdateShipmentDSVInput) Mutate(m *ShipmentDSVMutation) {
	if v := i.BarcodeID; v != nil {
		m.SetBarcodeID(*v)
	}
	if v := i.ShipmentID; v != nil {
		m.SetShipmentID(*v)
	}
}

// SetInput applies the change-set in the UpdateShipmentDSVInput on the ShipmentDSVUpdate builder.
func (c *ShipmentDSVUpdate) SetInput(i UpdateShipmentDSVInput) *ShipmentDSVUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShipmentDSVInput on the ShipmentDSVUpdateOne builder.
func (c *ShipmentDSVUpdateOne) SetInput(i UpdateShipmentDSVInput) *ShipmentDSVUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateShipmentPalletInput represents a mutation input for creating shipmentpallets.
type CreateShipmentPalletInput struct {
	Barcode      string
	ColliNumber  string
	CarrierID    string
	LabelPdf     *string
	LabelZpl     *string
	Status       *shipmentpallet.Status
	PalletID     *pulid.ID
	OldPalletIDs []pulid.ID
	ShipmentID   pulid.ID
}

// Mutate applies the CreateShipmentPalletInput on the ShipmentPalletMutation builder.
func (i *CreateShipmentPalletInput) Mutate(m *ShipmentPalletMutation) {
	m.SetBarcode(i.Barcode)
	m.SetColliNumber(i.ColliNumber)
	m.SetCarrierID(i.CarrierID)
	if v := i.LabelPdf; v != nil {
		m.SetLabelPdf(*v)
	}
	if v := i.LabelZpl; v != nil {
		m.SetLabelZpl(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PalletID; v != nil {
		m.SetPalletID(*v)
	}
	if v := i.OldPalletIDs; len(v) > 0 {
		m.AddOldPalletIDs(v...)
	}
	m.SetShipmentID(i.ShipmentID)
}

// SetInput applies the change-set in the CreateShipmentPalletInput on the ShipmentPalletCreate builder.
func (c *ShipmentPalletCreate) SetInput(i CreateShipmentPalletInput) *ShipmentPalletCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShipmentPalletInput represents a mutation input for updating shipmentpallets.
type UpdateShipmentPalletInput struct {
	Barcode            *string
	ColliNumber        *string
	CarrierID          *string
	ClearLabelPdf      bool
	LabelPdf           *string
	ClearLabelZpl      bool
	LabelZpl           *string
	Status             *shipmentpallet.Status
	ClearPallet        bool
	PalletID           *pulid.ID
	ClearOldPallet     bool
	AddOldPalletIDs    []pulid.ID
	RemoveOldPalletIDs []pulid.ID
}

// Mutate applies the UpdateShipmentPalletInput on the ShipmentPalletMutation builder.
func (i *UpdateShipmentPalletInput) Mutate(m *ShipmentPalletMutation) {
	if v := i.Barcode; v != nil {
		m.SetBarcode(*v)
	}
	if v := i.ColliNumber; v != nil {
		m.SetColliNumber(*v)
	}
	if v := i.CarrierID; v != nil {
		m.SetCarrierID(*v)
	}
	if i.ClearLabelPdf {
		m.ClearLabelPdf()
	}
	if v := i.LabelPdf; v != nil {
		m.SetLabelPdf(*v)
	}
	if i.ClearLabelZpl {
		m.ClearLabelZpl()
	}
	if v := i.LabelZpl; v != nil {
		m.SetLabelZpl(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPallet {
		m.ClearPallet()
	}
	if v := i.PalletID; v != nil {
		m.SetPalletID(*v)
	}
	if i.ClearOldPallet {
		m.ClearOldPallet()
	}
	if v := i.AddOldPalletIDs; len(v) > 0 {
		m.AddOldPalletIDs(v...)
	}
	if v := i.RemoveOldPalletIDs; len(v) > 0 {
		m.RemoveOldPalletIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateShipmentPalletInput on the ShipmentPalletUpdate builder.
func (c *ShipmentPalletUpdate) SetInput(i UpdateShipmentPalletInput) *ShipmentPalletUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShipmentPalletInput on the ShipmentPalletUpdateOne builder.
func (c *ShipmentPalletUpdateOne) SetInput(i UpdateShipmentPalletInput) *ShipmentPalletUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateShipmentParcelInput represents a mutation input for creating shipmentparcels.
type CreateShipmentParcelInput struct {
	ItemID                 *string
	Status                 *shipmentparcel.Status
	CcPickupSignatureUrls  []string
	ShipmentID             pulid.ID
	ColliID                *pulid.ID
	OldColliIDs            []pulid.ID
	WorkspaceRecentScanIDs []pulid.ID
	PackagingID            *pulid.ID
	PrintJobIDs            []pulid.ID
	DocumentFileID         *pulid.ID
}

// Mutate applies the CreateShipmentParcelInput on the ShipmentParcelMutation builder.
func (i *CreateShipmentParcelInput) Mutate(m *ShipmentParcelMutation) {
	if v := i.ItemID; v != nil {
		m.SetItemID(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.CcPickupSignatureUrls; v != nil {
		m.SetCcPickupSignatureUrls(v)
	}
	m.SetShipmentID(i.ShipmentID)
	if v := i.ColliID; v != nil {
		m.SetColliID(*v)
	}
	if v := i.OldColliIDs; len(v) > 0 {
		m.AddOldColliIDs(v...)
	}
	if v := i.WorkspaceRecentScanIDs; len(v) > 0 {
		m.AddWorkspaceRecentScanIDs(v...)
	}
	if v := i.PackagingID; v != nil {
		m.SetPackagingID(*v)
	}
	if v := i.PrintJobIDs; len(v) > 0 {
		m.AddPrintJobIDs(v...)
	}
	if v := i.DocumentFileID; v != nil {
		m.SetDocumentFileID(*v)
	}
}

// SetInput applies the change-set in the CreateShipmentParcelInput on the ShipmentParcelCreate builder.
func (c *ShipmentParcelCreate) SetInput(i CreateShipmentParcelInput) *ShipmentParcelCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShipmentParcelInput represents a mutation input for updating shipmentparcels.
type UpdateShipmentParcelInput struct {
	ClearItemID                  bool
	ItemID                       *string
	Status                       *shipmentparcel.Status
	ClearCcPickupSignatureUrls   bool
	CcPickupSignatureUrls        []string
	AppendCcPickupSignatureUrls  []string
	ClearColli                   bool
	ColliID                      *pulid.ID
	ClearOldColli                bool
	AddOldColliIDs               []pulid.ID
	RemoveOldColliIDs            []pulid.ID
	ClearWorkspaceRecentScan     bool
	AddWorkspaceRecentScanIDs    []pulid.ID
	RemoveWorkspaceRecentScanIDs []pulid.ID
	ClearPackaging               bool
	PackagingID                  *pulid.ID
	ClearPrintJob                bool
	AddPrintJobIDs               []pulid.ID
	RemovePrintJobIDs            []pulid.ID
	ClearDocumentFile            bool
	DocumentFileID               *pulid.ID
}

// Mutate applies the UpdateShipmentParcelInput on the ShipmentParcelMutation builder.
func (i *UpdateShipmentParcelInput) Mutate(m *ShipmentParcelMutation) {
	if i.ClearItemID {
		m.ClearItemID()
	}
	if v := i.ItemID; v != nil {
		m.SetItemID(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearCcPickupSignatureUrls {
		m.ClearCcPickupSignatureUrls()
	}
	if v := i.CcPickupSignatureUrls; v != nil {
		m.SetCcPickupSignatureUrls(v)
	}
	if i.AppendCcPickupSignatureUrls != nil {
		m.AppendCcPickupSignatureUrls(i.CcPickupSignatureUrls)
	}
	if i.ClearColli {
		m.ClearColli()
	}
	if v := i.ColliID; v != nil {
		m.SetColliID(*v)
	}
	if i.ClearOldColli {
		m.ClearOldColli()
	}
	if v := i.AddOldColliIDs; len(v) > 0 {
		m.AddOldColliIDs(v...)
	}
	if v := i.RemoveOldColliIDs; len(v) > 0 {
		m.RemoveOldColliIDs(v...)
	}
	if i.ClearWorkspaceRecentScan {
		m.ClearWorkspaceRecentScan()
	}
	if v := i.AddWorkspaceRecentScanIDs; len(v) > 0 {
		m.AddWorkspaceRecentScanIDs(v...)
	}
	if v := i.RemoveWorkspaceRecentScanIDs; len(v) > 0 {
		m.RemoveWorkspaceRecentScanIDs(v...)
	}
	if i.ClearPackaging {
		m.ClearPackaging()
	}
	if v := i.PackagingID; v != nil {
		m.SetPackagingID(*v)
	}
	if i.ClearPrintJob {
		m.ClearPrintJob()
	}
	if v := i.AddPrintJobIDs; len(v) > 0 {
		m.AddPrintJobIDs(v...)
	}
	if v := i.RemovePrintJobIDs; len(v) > 0 {
		m.RemovePrintJobIDs(v...)
	}
	if i.ClearDocumentFile {
		m.ClearDocumentFile()
	}
	if v := i.DocumentFileID; v != nil {
		m.SetDocumentFileID(*v)
	}
}

// SetInput applies the change-set in the UpdateShipmentParcelInput on the ShipmentParcelUpdate builder.
func (c *ShipmentParcelUpdate) SetInput(i UpdateShipmentParcelInput) *ShipmentParcelUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShipmentParcelInput on the ShipmentParcelUpdateOne builder.
func (c *ShipmentParcelUpdateOne) SetInput(i UpdateShipmentParcelInput) *ShipmentParcelUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateShipmentPostNordInput represents a mutation input for creating shipmentpostnords.
type CreateShipmentPostNordInput struct {
	BookingID           string
	ItemID              string
	ShipmentReferenceNo string
	ShipmentID          pulid.ID
}

// Mutate applies the CreateShipmentPostNordInput on the ShipmentPostNordMutation builder.
func (i *CreateShipmentPostNordInput) Mutate(m *ShipmentPostNordMutation) {
	m.SetBookingID(i.BookingID)
	m.SetItemID(i.ItemID)
	m.SetShipmentReferenceNo(i.ShipmentReferenceNo)
	m.SetShipmentID(i.ShipmentID)
}

// SetInput applies the change-set in the CreateShipmentPostNordInput on the ShipmentPostNordCreate builder.
func (c *ShipmentPostNordCreate) SetInput(i CreateShipmentPostNordInput) *ShipmentPostNordCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShipmentPostNordInput represents a mutation input for updating shipmentpostnords.
type UpdateShipmentPostNordInput struct {
	BookingID           *string
	ItemID              *string
	ShipmentReferenceNo *string
	ShipmentID          *pulid.ID
}

// Mutate applies the UpdateShipmentPostNordInput on the ShipmentPostNordMutation builder.
func (i *UpdateShipmentPostNordInput) Mutate(m *ShipmentPostNordMutation) {
	if v := i.BookingID; v != nil {
		m.SetBookingID(*v)
	}
	if v := i.ItemID; v != nil {
		m.SetItemID(*v)
	}
	if v := i.ShipmentReferenceNo; v != nil {
		m.SetShipmentReferenceNo(*v)
	}
	if v := i.ShipmentID; v != nil {
		m.SetShipmentID(*v)
	}
}

// SetInput applies the change-set in the UpdateShipmentPostNordInput on the ShipmentPostNordUpdate builder.
func (c *ShipmentPostNordUpdate) SetInput(i UpdateShipmentPostNordInput) *ShipmentPostNordUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShipmentPostNordInput on the ShipmentPostNordUpdateOne builder.
func (c *ShipmentPostNordUpdateOne) SetInput(i UpdateShipmentPostNordInput) *ShipmentPostNordUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateShipmentUSPSInput represents a mutation input for creating shipmentuspss.
type CreateShipmentUSPSInput struct {
	TrackingNumber        *string
	Postage               *float64
	ScheduledDeliveryDate *time.Time
	ShipmentID            pulid.ID
}

// Mutate applies the CreateShipmentUSPSInput on the ShipmentUSPSMutation builder.
func (i *CreateShipmentUSPSInput) Mutate(m *ShipmentUSPSMutation) {
	if v := i.TrackingNumber; v != nil {
		m.SetTrackingNumber(*v)
	}
	if v := i.Postage; v != nil {
		m.SetPostage(*v)
	}
	if v := i.ScheduledDeliveryDate; v != nil {
		m.SetScheduledDeliveryDate(*v)
	}
	m.SetShipmentID(i.ShipmentID)
}

// SetInput applies the change-set in the CreateShipmentUSPSInput on the ShipmentUSPSCreate builder.
func (c *ShipmentUSPSCreate) SetInput(i CreateShipmentUSPSInput) *ShipmentUSPSCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShipmentUSPSInput represents a mutation input for updating shipmentuspss.
type UpdateShipmentUSPSInput struct {
	ClearTrackingNumber        bool
	TrackingNumber             *string
	ClearPostage               bool
	Postage                    *float64
	ClearScheduledDeliveryDate bool
	ScheduledDeliveryDate      *time.Time
	ShipmentID                 *pulid.ID
}

// Mutate applies the UpdateShipmentUSPSInput on the ShipmentUSPSMutation builder.
func (i *UpdateShipmentUSPSInput) Mutate(m *ShipmentUSPSMutation) {
	if i.ClearTrackingNumber {
		m.ClearTrackingNumber()
	}
	if v := i.TrackingNumber; v != nil {
		m.SetTrackingNumber(*v)
	}
	if i.ClearPostage {
		m.ClearPostage()
	}
	if v := i.Postage; v != nil {
		m.SetPostage(*v)
	}
	if i.ClearScheduledDeliveryDate {
		m.ClearScheduledDeliveryDate()
	}
	if v := i.ScheduledDeliveryDate; v != nil {
		m.SetScheduledDeliveryDate(*v)
	}
	if v := i.ShipmentID; v != nil {
		m.SetShipmentID(*v)
	}
}

// SetInput applies the change-set in the UpdateShipmentUSPSInput on the ShipmentUSPSUpdate builder.
func (c *ShipmentUSPSUpdate) SetInput(i UpdateShipmentUSPSInput) *ShipmentUSPSUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShipmentUSPSInput on the ShipmentUSPSUpdateOne builder.
func (c *ShipmentUSPSUpdateOne) SetInput(i UpdateShipmentUSPSInput) *ShipmentUSPSUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSignupOptionsInput represents a mutation input for creating signupoptionsslice.
type CreateSignupOptionsInput struct {
	BetterDeliveryOptions bool
	ImprovePickPack       bool
	ShippingLabel         bool
	CustomDocs            bool
	ReducedCosts          bool
	EasyReturns           bool
	ClickCollect          bool
	NumShipments          int
	UsersID               pulid.ID
}

// Mutate applies the CreateSignupOptionsInput on the SignupOptionsMutation builder.
func (i *CreateSignupOptionsInput) Mutate(m *SignupOptionsMutation) {
	m.SetBetterDeliveryOptions(i.BetterDeliveryOptions)
	m.SetImprovePickPack(i.ImprovePickPack)
	m.SetShippingLabel(i.ShippingLabel)
	m.SetCustomDocs(i.CustomDocs)
	m.SetReducedCosts(i.ReducedCosts)
	m.SetEasyReturns(i.EasyReturns)
	m.SetClickCollect(i.ClickCollect)
	m.SetNumShipments(i.NumShipments)
	m.SetUsersID(i.UsersID)
}

// SetInput applies the change-set in the CreateSignupOptionsInput on the SignupOptionsCreate builder.
func (c *SignupOptionsCreate) SetInput(i CreateSignupOptionsInput) *SignupOptionsCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSignupOptionsInput represents a mutation input for updating signupoptionsslice.
type UpdateSignupOptionsInput struct {
	BetterDeliveryOptions *bool
	ImprovePickPack       *bool
	ShippingLabel         *bool
	CustomDocs            *bool
	ReducedCosts          *bool
	EasyReturns           *bool
	ClickCollect          *bool
	NumShipments          *int
	UsersID               *pulid.ID
}

// Mutate applies the UpdateSignupOptionsInput on the SignupOptionsMutation builder.
func (i *UpdateSignupOptionsInput) Mutate(m *SignupOptionsMutation) {
	if v := i.BetterDeliveryOptions; v != nil {
		m.SetBetterDeliveryOptions(*v)
	}
	if v := i.ImprovePickPack; v != nil {
		m.SetImprovePickPack(*v)
	}
	if v := i.ShippingLabel; v != nil {
		m.SetShippingLabel(*v)
	}
	if v := i.CustomDocs; v != nil {
		m.SetCustomDocs(*v)
	}
	if v := i.ReducedCosts; v != nil {
		m.SetReducedCosts(*v)
	}
	if v := i.EasyReturns; v != nil {
		m.SetEasyReturns(*v)
	}
	if v := i.ClickCollect; v != nil {
		m.SetClickCollect(*v)
	}
	if v := i.NumShipments; v != nil {
		m.SetNumShipments(*v)
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the UpdateSignupOptionsInput on the SignupOptionsUpdate builder.
func (c *SignupOptionsUpdate) SetInput(i UpdateSignupOptionsInput) *SignupOptionsUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSignupOptionsInput on the SignupOptionsUpdateOne builder.
func (c *SignupOptionsUpdateOne) SetInput(i UpdateSignupOptionsInput) *SignupOptionsUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTenantInput represents a mutation input for creating tenants.
type CreateTenantInput struct {
	Name                     string
	VatNumber                *string
	InvoiceReference         *string
	ConnectOptionCarrierIDs  []pulid.ID
	ConnectOptionPlatformIDs []pulid.ID
	CompanyAddressID         *pulid.ID
	BillingContactID         *pulid.ID
	AdminContactID           *pulid.ID
}

// Mutate applies the CreateTenantInput on the TenantMutation builder.
func (i *CreateTenantInput) Mutate(m *TenantMutation) {
	m.SetName(i.Name)
	if v := i.VatNumber; v != nil {
		m.SetVatNumber(*v)
	}
	if v := i.InvoiceReference; v != nil {
		m.SetInvoiceReference(*v)
	}
	if v := i.ConnectOptionCarrierIDs; len(v) > 0 {
		m.AddConnectOptionCarrierIDs(v...)
	}
	if v := i.ConnectOptionPlatformIDs; len(v) > 0 {
		m.AddConnectOptionPlatformIDs(v...)
	}
	if v := i.CompanyAddressID; v != nil {
		m.SetCompanyAddressID(*v)
	}
	if v := i.BillingContactID; v != nil {
		m.SetBillingContactID(*v)
	}
	if v := i.AdminContactID; v != nil {
		m.SetAdminContactID(*v)
	}
}

// SetInput applies the change-set in the CreateTenantInput on the TenantCreate builder.
func (c *TenantCreate) SetInput(i CreateTenantInput) *TenantCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTenantInput represents a mutation input for updating tenants.
type UpdateTenantInput struct {
	Name                           *string
	ClearVatNumber                 bool
	VatNumber                      *string
	ClearInvoiceReference          bool
	InvoiceReference               *string
	ClearConnectOptionCarriers     bool
	AddConnectOptionCarrierIDs     []pulid.ID
	RemoveConnectOptionCarrierIDs  []pulid.ID
	ClearConnectOptionPlatforms    bool
	AddConnectOptionPlatformIDs    []pulid.ID
	RemoveConnectOptionPlatformIDs []pulid.ID
	PlanID                         *pulid.ID
	ClearCompanyAddress            bool
	CompanyAddressID               *pulid.ID
	DefaultLanguageID              *pulid.ID
	ClearBillingContact            bool
	BillingContactID               *pulid.ID
	ClearAdminContact              bool
	AdminContactID                 *pulid.ID
}

// Mutate applies the UpdateTenantInput on the TenantMutation builder.
func (i *UpdateTenantInput) Mutate(m *TenantMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearVatNumber {
		m.ClearVatNumber()
	}
	if v := i.VatNumber; v != nil {
		m.SetVatNumber(*v)
	}
	if i.ClearInvoiceReference {
		m.ClearInvoiceReference()
	}
	if v := i.InvoiceReference; v != nil {
		m.SetInvoiceReference(*v)
	}
	if i.ClearConnectOptionCarriers {
		m.ClearConnectOptionCarriers()
	}
	if v := i.AddConnectOptionCarrierIDs; len(v) > 0 {
		m.AddConnectOptionCarrierIDs(v...)
	}
	if v := i.RemoveConnectOptionCarrierIDs; len(v) > 0 {
		m.RemoveConnectOptionCarrierIDs(v...)
	}
	if i.ClearConnectOptionPlatforms {
		m.ClearConnectOptionPlatforms()
	}
	if v := i.AddConnectOptionPlatformIDs; len(v) > 0 {
		m.AddConnectOptionPlatformIDs(v...)
	}
	if v := i.RemoveConnectOptionPlatformIDs; len(v) > 0 {
		m.RemoveConnectOptionPlatformIDs(v...)
	}
	if v := i.PlanID; v != nil {
		m.SetPlanID(*v)
	}
	if i.ClearCompanyAddress {
		m.ClearCompanyAddress()
	}
	if v := i.CompanyAddressID; v != nil {
		m.SetCompanyAddressID(*v)
	}
	if v := i.DefaultLanguageID; v != nil {
		m.SetDefaultLanguageID(*v)
	}
	if i.ClearBillingContact {
		m.ClearBillingContact()
	}
	if v := i.BillingContactID; v != nil {
		m.SetBillingContactID(*v)
	}
	if i.ClearAdminContact {
		m.ClearAdminContact()
	}
	if v := i.AdminContactID; v != nil {
		m.SetAdminContactID(*v)
	}
}

// SetInput applies the change-set in the UpdateTenantInput on the TenantUpdate builder.
func (c *TenantUpdate) SetInput(i UpdateTenantInput) *TenantUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTenantInput on the TenantUpdateOne builder.
func (c *TenantUpdateOne) SetInput(i UpdateTenantInput) *TenantUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name                   *string
	Surname                *string
	PhoneNumber            *string
	Email                  string
	Password               *string
	MarketingConsent       *bool
	CreatedAt              *time.Time
	ArchivedAt             *time.Time
	PickupDay              *user.PickupDay
	PickupDayLastChanged   *time.Time
	OtkRequestIDs          []pulid.ID
	SignupOptionsID        *pulid.ID
	LanguageID             *pulid.ID
	ChangeHistoryIDs       []pulid.ID
	PlanHistoryUserIDs     []pulid.ID
	APITokenIDs            []pulid.ID
	SelectedWorkstationID  *pulid.ID
	SeatGroupID            *pulid.ID
	WorkspaceRecentScanIDs []pulid.ID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Surname; v != nil {
		m.SetSurname(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	m.SetEmail(i.Email)
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.MarketingConsent; v != nil {
		m.SetMarketingConsent(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	if v := i.PickupDay; v != nil {
		m.SetPickupDay(*v)
	}
	if v := i.PickupDayLastChanged; v != nil {
		m.SetPickupDayLastChanged(*v)
	}
	if v := i.OtkRequestIDs; len(v) > 0 {
		m.AddOtkRequestIDs(v...)
	}
	if v := i.SignupOptionsID; v != nil {
		m.SetSignupOptionsID(*v)
	}
	if v := i.LanguageID; v != nil {
		m.SetLanguageID(*v)
	}
	if v := i.ChangeHistoryIDs; len(v) > 0 {
		m.AddChangeHistoryIDs(v...)
	}
	if v := i.PlanHistoryUserIDs; len(v) > 0 {
		m.AddPlanHistoryUserIDs(v...)
	}
	if v := i.APITokenIDs; len(v) > 0 {
		m.AddAPITokenIDs(v...)
	}
	if v := i.SelectedWorkstationID; v != nil {
		m.SetSelectedWorkstationID(*v)
	}
	if v := i.SeatGroupID; v != nil {
		m.SetSeatGroupID(*v)
	}
	if v := i.WorkspaceRecentScanIDs; len(v) > 0 {
		m.AddWorkspaceRecentScanIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ClearName                    bool
	Name                         *string
	ClearSurname                 bool
	Surname                      *string
	ClearPhoneNumber             bool
	PhoneNumber                  *string
	Email                        *string
	ClearPassword                bool
	Password                     *string
	ClearMarketingConsent        bool
	MarketingConsent             *bool
	ClearArchivedAt              bool
	ArchivedAt                   *time.Time
	PickupDay                    *user.PickupDay
	ClearPickupDayLastChanged    bool
	PickupDayLastChanged         *time.Time
	ClearOtkRequests             bool
	AddOtkRequestIDs             []pulid.ID
	RemoveOtkRequestIDs          []pulid.ID
	ClearSignupOptions           bool
	SignupOptionsID              *pulid.ID
	ClearLanguage                bool
	LanguageID                   *pulid.ID
	ClearChangeHistory           bool
	AddChangeHistoryIDs          []pulid.ID
	RemoveChangeHistoryIDs       []pulid.ID
	ClearPlanHistoryUser         bool
	AddPlanHistoryUserIDs        []pulid.ID
	RemovePlanHistoryUserIDs     []pulid.ID
	ClearAPIToken                bool
	AddAPITokenIDs               []pulid.ID
	RemoveAPITokenIDs            []pulid.ID
	ClearSelectedWorkstation     bool
	SelectedWorkstationID        *pulid.ID
	ClearSeatGroup               bool
	SeatGroupID                  *pulid.ID
	ClearWorkspaceRecentScan     bool
	AddWorkspaceRecentScanIDs    []pulid.ID
	RemoveWorkspaceRecentScanIDs []pulid.ID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSurname {
		m.ClearSurname()
	}
	if v := i.Surname; v != nil {
		m.SetSurname(*v)
	}
	if i.ClearPhoneNumber {
		m.ClearPhoneNumber()
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if i.ClearMarketingConsent {
		m.ClearMarketingConsent()
	}
	if v := i.MarketingConsent; v != nil {
		m.SetMarketingConsent(*v)
	}
	if i.ClearArchivedAt {
		m.ClearArchivedAt()
	}
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	if v := i.PickupDay; v != nil {
		m.SetPickupDay(*v)
	}
	if i.ClearPickupDayLastChanged {
		m.ClearPickupDayLastChanged()
	}
	if v := i.PickupDayLastChanged; v != nil {
		m.SetPickupDayLastChanged(*v)
	}
	if i.ClearOtkRequests {
		m.ClearOtkRequests()
	}
	if v := i.AddOtkRequestIDs; len(v) > 0 {
		m.AddOtkRequestIDs(v...)
	}
	if v := i.RemoveOtkRequestIDs; len(v) > 0 {
		m.RemoveOtkRequestIDs(v...)
	}
	if i.ClearSignupOptions {
		m.ClearSignupOptions()
	}
	if v := i.SignupOptionsID; v != nil {
		m.SetSignupOptionsID(*v)
	}
	if i.ClearLanguage {
		m.ClearLanguage()
	}
	if v := i.LanguageID; v != nil {
		m.SetLanguageID(*v)
	}
	if i.ClearChangeHistory {
		m.ClearChangeHistory()
	}
	if v := i.AddChangeHistoryIDs; len(v) > 0 {
		m.AddChangeHistoryIDs(v...)
	}
	if v := i.RemoveChangeHistoryIDs; len(v) > 0 {
		m.RemoveChangeHistoryIDs(v...)
	}
	if i.ClearPlanHistoryUser {
		m.ClearPlanHistoryUser()
	}
	if v := i.AddPlanHistoryUserIDs; len(v) > 0 {
		m.AddPlanHistoryUserIDs(v...)
	}
	if v := i.RemovePlanHistoryUserIDs; len(v) > 0 {
		m.RemovePlanHistoryUserIDs(v...)
	}
	if i.ClearAPIToken {
		m.ClearAPIToken()
	}
	if v := i.AddAPITokenIDs; len(v) > 0 {
		m.AddAPITokenIDs(v...)
	}
	if v := i.RemoveAPITokenIDs; len(v) > 0 {
		m.RemoveAPITokenIDs(v...)
	}
	if i.ClearSelectedWorkstation {
		m.ClearSelectedWorkstation()
	}
	if v := i.SelectedWorkstationID; v != nil {
		m.SetSelectedWorkstationID(*v)
	}
	if i.ClearSeatGroup {
		m.ClearSeatGroup()
	}
	if v := i.SeatGroupID; v != nil {
		m.SetSeatGroupID(*v)
	}
	if i.ClearWorkspaceRecentScan {
		m.ClearWorkspaceRecentScan()
	}
	if v := i.AddWorkspaceRecentScanIDs; len(v) > 0 {
		m.AddWorkspaceRecentScanIDs(v...)
	}
	if v := i.RemoveWorkspaceRecentScanIDs; len(v) > 0 {
		m.RemoveWorkspaceRecentScanIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserSeatInput represents a mutation input for creating userseats.
type CreateUserSeatInput struct {
	Name      *string
	Surname   *string
	Email     string
	CreatedAt *time.Time
}

// Mutate applies the CreateUserSeatInput on the UserSeatMutation builder.
func (i *CreateUserSeatInput) Mutate(m *UserSeatMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Surname; v != nil {
		m.SetSurname(*v)
	}
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateUserSeatInput on the UserSeatCreate builder.
func (c *UserSeatCreate) SetInput(i CreateUserSeatInput) *UserSeatCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserSeatInput represents a mutation input for updating userseats.
type UpdateUserSeatInput struct {
	ClearName    bool
	Name         *string
	ClearSurname bool
	Surname      *string
	Email        *string
}

// Mutate applies the UpdateUserSeatInput on the UserSeatMutation builder.
func (i *UpdateUserSeatInput) Mutate(m *UserSeatMutation) {
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSurname {
		m.ClearSurname()
	}
	if v := i.Surname; v != nil {
		m.SetSurname(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
}

// SetInput applies the change-set in the UpdateUserSeatInput on the UserSeatUpdate builder.
func (c *UserSeatUpdate) SetInput(i UpdateUserSeatInput) *UserSeatUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserSeatInput on the UserSeatUpdateOne builder.
func (c *UserSeatUpdateOne) SetInput(i UpdateUserSeatInput) *UserSeatUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkstationInput represents a mutation input for creating workstations.
type CreateWorkstationInput struct {
	ArchivedAt        *time.Time
	Name              string
	DeviceType        *workstation.DeviceType
	Status            *workstation.Status
	AutoPrintReceiver *bool
	PrinterIDs        []pulid.ID
	UserID            *pulid.ID
	SelectedUserID    *pulid.ID
}

// Mutate applies the CreateWorkstationInput on the WorkstationMutation builder.
func (i *CreateWorkstationInput) Mutate(m *WorkstationMutation) {
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	m.SetName(i.Name)
	if v := i.DeviceType; v != nil {
		m.SetDeviceType(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.AutoPrintReceiver; v != nil {
		m.SetAutoPrintReceiver(*v)
	}
	if v := i.PrinterIDs; len(v) > 0 {
		m.AddPrinterIDs(v...)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.SelectedUserID; v != nil {
		m.SetSelectedUserID(*v)
	}
}

// SetInput applies the change-set in the CreateWorkstationInput on the WorkstationCreate builder.
func (c *WorkstationCreate) SetInput(i CreateWorkstationInput) *WorkstationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkstationInput represents a mutation input for updating workstations.
type UpdateWorkstationInput struct {
	ClearArchivedAt   bool
	ArchivedAt        *time.Time
	Name              *string
	DeviceType        *workstation.DeviceType
	Status            *workstation.Status
	AutoPrintReceiver *bool
	ClearPrinter      bool
	AddPrinterIDs     []pulid.ID
	RemovePrinterIDs  []pulid.ID
	ClearSelectedUser bool
	SelectedUserID    *pulid.ID
}

// Mutate applies the UpdateWorkstationInput on the WorkstationMutation builder.
func (i *UpdateWorkstationInput) Mutate(m *WorkstationMutation) {
	if i.ClearArchivedAt {
		m.ClearArchivedAt()
	}
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.DeviceType; v != nil {
		m.SetDeviceType(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.AutoPrintReceiver; v != nil {
		m.SetAutoPrintReceiver(*v)
	}
	if i.ClearPrinter {
		m.ClearPrinter()
	}
	if v := i.AddPrinterIDs; len(v) > 0 {
		m.AddPrinterIDs(v...)
	}
	if v := i.RemovePrinterIDs; len(v) > 0 {
		m.RemovePrinterIDs(v...)
	}
	if i.ClearSelectedUser {
		m.ClearSelectedUser()
	}
	if v := i.SelectedUserID; v != nil {
		m.SetSelectedUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkstationInput on the WorkstationUpdate builder.
func (c *WorkstationUpdate) SetInput(i UpdateWorkstationInput) *WorkstationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkstationInput on the WorkstationUpdateOne builder.
func (c *WorkstationUpdateOne) SetInput(i UpdateWorkstationInput) *WorkstationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
