// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipmentpostnord"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentPostNordDelete is the builder for deleting a ShipmentPostNord entity.
type ShipmentPostNordDelete struct {
	config
	hooks    []Hook
	mutation *ShipmentPostNordMutation
}

// Where appends a list predicates to the ShipmentPostNordDelete builder.
func (spnd *ShipmentPostNordDelete) Where(ps ...predicate.ShipmentPostNord) *ShipmentPostNordDelete {
	spnd.mutation.Where(ps...)
	return spnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (spnd *ShipmentPostNordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, spnd.sqlExec, spnd.mutation, spnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (spnd *ShipmentPostNordDelete) ExecX(ctx context.Context) int {
	n, err := spnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (spnd *ShipmentPostNordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(shipmentpostnord.Table, sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString))
	if ps := spnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, spnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	spnd.mutation.done = true
	return affected, err
}

// ShipmentPostNordDeleteOne is the builder for deleting a single ShipmentPostNord entity.
type ShipmentPostNordDeleteOne struct {
	spnd *ShipmentPostNordDelete
}

// Where appends a list predicates to the ShipmentPostNordDelete builder.
func (spndo *ShipmentPostNordDeleteOne) Where(ps ...predicate.ShipmentPostNord) *ShipmentPostNordDeleteOne {
	spndo.spnd.mutation.Where(ps...)
	return spndo
}

// Exec executes the deletion query.
func (spndo *ShipmentPostNordDeleteOne) Exec(ctx context.Context) error {
	n, err := spndo.spnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{shipmentpostnord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (spndo *ShipmentPostNordDeleteOne) ExecX(ctx context.Context) {
	if err := spndo.Exec(ctx); err != nil {
		panic(err)
	}
}
