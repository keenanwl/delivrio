// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceEasyPostCreate is the builder for creating a CarrierServiceEasyPost entity.
type CarrierServiceEasyPostCreate struct {
	config
	mutation *CarrierServiceEasyPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAPIKey sets the "api_key" field.
func (csepc *CarrierServiceEasyPostCreate) SetAPIKey(ck carrierserviceeasypost.APIKey) *CarrierServiceEasyPostCreate {
	csepc.mutation.SetAPIKey(ck)
	return csepc
}

// SetID sets the "id" field.
func (csepc *CarrierServiceEasyPostCreate) SetID(pu pulid.ID) *CarrierServiceEasyPostCreate {
	csepc.mutation.SetID(pu)
	return csepc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csepc *CarrierServiceEasyPostCreate) SetNillableID(pu *pulid.ID) *CarrierServiceEasyPostCreate {
	if pu != nil {
		csepc.SetID(*pu)
	}
	return csepc
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csepc *CarrierServiceEasyPostCreate) SetCarrierServiceID(id pulid.ID) *CarrierServiceEasyPostCreate {
	csepc.mutation.SetCarrierServiceID(id)
	return csepc
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csepc *CarrierServiceEasyPostCreate) SetCarrierService(c *CarrierService) *CarrierServiceEasyPostCreate {
	return csepc.SetCarrierServiceID(c.ID)
}

// AddCarrierAddServEasyPostIDs adds the "carrier_add_serv_easy_post" edge to the CarrierAdditionalServiceEasyPost entity by IDs.
func (csepc *CarrierServiceEasyPostCreate) AddCarrierAddServEasyPostIDs(ids ...pulid.ID) *CarrierServiceEasyPostCreate {
	csepc.mutation.AddCarrierAddServEasyPostIDs(ids...)
	return csepc
}

// AddCarrierAddServEasyPost adds the "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (csepc *CarrierServiceEasyPostCreate) AddCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *CarrierServiceEasyPostCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csepc.AddCarrierAddServEasyPostIDs(ids...)
}

// Mutation returns the CarrierServiceEasyPostMutation object of the builder.
func (csepc *CarrierServiceEasyPostCreate) Mutation() *CarrierServiceEasyPostMutation {
	return csepc.mutation
}

// Save creates the CarrierServiceEasyPost in the database.
func (csepc *CarrierServiceEasyPostCreate) Save(ctx context.Context) (*CarrierServiceEasyPost, error) {
	if err := csepc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csepc.sqlSave, csepc.mutation, csepc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csepc *CarrierServiceEasyPostCreate) SaveX(ctx context.Context) *CarrierServiceEasyPost {
	v, err := csepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csepc *CarrierServiceEasyPostCreate) Exec(ctx context.Context) error {
	_, err := csepc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csepc *CarrierServiceEasyPostCreate) ExecX(ctx context.Context) {
	if err := csepc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csepc *CarrierServiceEasyPostCreate) defaults() error {
	if _, ok := csepc.mutation.ID(); !ok {
		if carrierserviceeasypost.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierserviceeasypost.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierserviceeasypost.DefaultID()
		csepc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csepc *CarrierServiceEasyPostCreate) check() error {
	if _, ok := csepc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`ent: missing required field "CarrierServiceEasyPost.api_key"`)}
	}
	if v, ok := csepc.mutation.APIKey(); ok {
		if err := carrierserviceeasypost.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "CarrierServiceEasyPost.api_key": %w`, err)}
		}
	}
	if len(csepc.mutation.CarrierServiceIDs()) == 0 {
		return &ValidationError{Name: "carrier_service", err: errors.New(`ent: missing required edge "CarrierServiceEasyPost.carrier_service"`)}
	}
	return nil
}

func (csepc *CarrierServiceEasyPostCreate) sqlSave(ctx context.Context) (*CarrierServiceEasyPost, error) {
	if err := csepc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csepc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csepc.mutation.id = &_node.ID
	csepc.mutation.done = true
	return _node, nil
}

func (csepc *CarrierServiceEasyPostCreate) createSpec() (*CarrierServiceEasyPost, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierServiceEasyPost{config: csepc.config}
		_spec = sqlgraph.NewCreateSpec(carrierserviceeasypost.Table, sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString))
	)
	_spec.OnConflict = csepc.conflict
	if id, ok := csepc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csepc.mutation.APIKey(); ok {
		_spec.SetField(carrierserviceeasypost.FieldAPIKey, field.TypeEnum, value)
		_node.APIKey = value
	}
	if nodes := csepc.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceeasypost.CarrierServiceTable,
			Columns: []string{carrierserviceeasypost.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_service_carrier_serv_easy_post = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csepc.mutation.CarrierAddServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierserviceeasypost.CarrierAddServEasyPostTable,
			Columns: carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierServiceEasyPost.Create().
//		SetAPIKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierServiceEasyPostUpsert) {
//			SetAPIKey(v+v).
//		}).
//		Exec(ctx)
func (csepc *CarrierServiceEasyPostCreate) OnConflict(opts ...sql.ConflictOption) *CarrierServiceEasyPostUpsertOne {
	csepc.conflict = opts
	return &CarrierServiceEasyPostUpsertOne{
		create: csepc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierServiceEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csepc *CarrierServiceEasyPostCreate) OnConflictColumns(columns ...string) *CarrierServiceEasyPostUpsertOne {
	csepc.conflict = append(csepc.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceEasyPostUpsertOne{
		create: csepc,
	}
}

type (
	// CarrierServiceEasyPostUpsertOne is the builder for "upsert"-ing
	//  one CarrierServiceEasyPost node.
	CarrierServiceEasyPostUpsertOne struct {
		create *CarrierServiceEasyPostCreate
	}

	// CarrierServiceEasyPostUpsert is the "OnConflict" setter.
	CarrierServiceEasyPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetAPIKey sets the "api_key" field.
func (u *CarrierServiceEasyPostUpsert) SetAPIKey(v carrierserviceeasypost.APIKey) *CarrierServiceEasyPostUpsert {
	u.Set(carrierserviceeasypost.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierServiceEasyPostUpsert) UpdateAPIKey() *CarrierServiceEasyPostUpsert {
	u.SetExcluded(carrierserviceeasypost.FieldAPIKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierServiceEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierserviceeasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceEasyPostUpsertOne) UpdateNewValues() *CarrierServiceEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierserviceeasypost.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierServiceEasyPost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierServiceEasyPostUpsertOne) Ignore() *CarrierServiceEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceEasyPostUpsertOne) DoNothing() *CarrierServiceEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceEasyPostCreate.OnConflict
// documentation for more info.
func (u *CarrierServiceEasyPostUpsertOne) Update(set func(*CarrierServiceEasyPostUpsert)) *CarrierServiceEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierServiceEasyPostUpsertOne) SetAPIKey(v carrierserviceeasypost.APIKey) *CarrierServiceEasyPostUpsertOne {
	return u.Update(func(s *CarrierServiceEasyPostUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierServiceEasyPostUpsertOne) UpdateAPIKey() *CarrierServiceEasyPostUpsertOne {
	return u.Update(func(s *CarrierServiceEasyPostUpsert) {
		s.UpdateAPIKey()
	})
}

// Exec executes the query.
func (u *CarrierServiceEasyPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceEasyPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceEasyPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierServiceEasyPostUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierServiceEasyPostUpsertOne.ID is not supported by MySQL driver. Use CarrierServiceEasyPostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierServiceEasyPostUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierServiceEasyPostCreateBulk is the builder for creating many CarrierServiceEasyPost entities in bulk.
type CarrierServiceEasyPostCreateBulk struct {
	config
	err      error
	builders []*CarrierServiceEasyPostCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierServiceEasyPost entities in the database.
func (csepcb *CarrierServiceEasyPostCreateBulk) Save(ctx context.Context) ([]*CarrierServiceEasyPost, error) {
	if csepcb.err != nil {
		return nil, csepcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(csepcb.builders))
	nodes := make([]*CarrierServiceEasyPost, len(csepcb.builders))
	mutators := make([]Mutator, len(csepcb.builders))
	for i := range csepcb.builders {
		func(i int, root context.Context) {
			builder := csepcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierServiceEasyPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csepcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = csepcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csepcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csepcb *CarrierServiceEasyPostCreateBulk) SaveX(ctx context.Context) []*CarrierServiceEasyPost {
	v, err := csepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csepcb *CarrierServiceEasyPostCreateBulk) Exec(ctx context.Context) error {
	_, err := csepcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csepcb *CarrierServiceEasyPostCreateBulk) ExecX(ctx context.Context) {
	if err := csepcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierServiceEasyPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierServiceEasyPostUpsert) {
//			SetAPIKey(v+v).
//		}).
//		Exec(ctx)
func (csepcb *CarrierServiceEasyPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierServiceEasyPostUpsertBulk {
	csepcb.conflict = opts
	return &CarrierServiceEasyPostUpsertBulk{
		create: csepcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierServiceEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csepcb *CarrierServiceEasyPostCreateBulk) OnConflictColumns(columns ...string) *CarrierServiceEasyPostUpsertBulk {
	csepcb.conflict = append(csepcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceEasyPostUpsertBulk{
		create: csepcb,
	}
}

// CarrierServiceEasyPostUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierServiceEasyPost nodes.
type CarrierServiceEasyPostUpsertBulk struct {
	create *CarrierServiceEasyPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierServiceEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierserviceeasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceEasyPostUpsertBulk) UpdateNewValues() *CarrierServiceEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierserviceeasypost.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierServiceEasyPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierServiceEasyPostUpsertBulk) Ignore() *CarrierServiceEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceEasyPostUpsertBulk) DoNothing() *CarrierServiceEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceEasyPostCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierServiceEasyPostUpsertBulk) Update(set func(*CarrierServiceEasyPostUpsert)) *CarrierServiceEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierServiceEasyPostUpsertBulk) SetAPIKey(v carrierserviceeasypost.APIKey) *CarrierServiceEasyPostUpsertBulk {
	return u.Update(func(s *CarrierServiceEasyPostUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierServiceEasyPostUpsertBulk) UpdateAPIKey() *CarrierServiceEasyPostUpsertBulk {
	return u.Update(func(s *CarrierServiceEasyPostUpsert) {
		s.UpdateAPIKey()
	})
}

// Exec executes the query.
func (u *CarrierServiceEasyPostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierServiceEasyPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceEasyPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceEasyPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
