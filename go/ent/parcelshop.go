// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ParcelShop is the model entity for the ParcelShop schema.
type ParcelShop struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParcelShopQuery when eager-loading is set.
	Edges                     ParcelShopEdges `json:"edges"`
	parcel_shop_carrier_brand *pulid.ID
	selectValues              sql.SelectValues
}

// ParcelShopEdges holds the relations/edges for other nodes in the graph.
type ParcelShopEdges struct {
	// ParcelShopDAO holds the value of the parcel_shop_dao edge.
	ParcelShopDAO *ParcelShopDAO `json:"parcel_shop_dao,omitempty"`
	// ParcelShopPostNord holds the value of the parcel_shop_post_nord edge.
	ParcelShopPostNord *ParcelShopPostNord `json:"parcel_shop_post_nord,omitempty"`
	// ParcelShopGLS holds the value of the parcel_shop_gls edge.
	ParcelShopGLS *ParcelShopGLS `json:"parcel_shop_gls,omitempty"`
	// ParcelShopBring holds the value of the parcel_shop_bring edge.
	ParcelShopBring *ParcelShopBring `json:"parcel_shop_bring,omitempty"`
	// CarrierBrand holds the value of the carrier_brand edge.
	CarrierBrand *CarrierBrand `json:"carrier_brand,omitempty"`
	// Address holds the value of the address edge.
	Address *AddressGlobal `json:"address,omitempty"`
	// Colli holds the value of the colli edge.
	Colli []*Colli `json:"colli,omitempty"`
	// BusinessHoursPeriod holds the value of the business_hours_period edge.
	BusinessHoursPeriod []*BusinessHoursPeriod `json:"business_hours_period,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [8]map[string]int

	namedColli               map[string][]*Colli
	namedBusinessHoursPeriod map[string][]*BusinessHoursPeriod
}

// ParcelShopDAOOrErr returns the ParcelShopDAO value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopEdges) ParcelShopDAOOrErr() (*ParcelShopDAO, error) {
	if e.ParcelShopDAO != nil {
		return e.ParcelShopDAO, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: parcelshopdao.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop_dao"}
}

// ParcelShopPostNordOrErr returns the ParcelShopPostNord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopEdges) ParcelShopPostNordOrErr() (*ParcelShopPostNord, error) {
	if e.ParcelShopPostNord != nil {
		return e.ParcelShopPostNord, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: parcelshoppostnord.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop_post_nord"}
}

// ParcelShopGLSOrErr returns the ParcelShopGLS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopEdges) ParcelShopGLSOrErr() (*ParcelShopGLS, error) {
	if e.ParcelShopGLS != nil {
		return e.ParcelShopGLS, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: parcelshopgls.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop_gls"}
}

// ParcelShopBringOrErr returns the ParcelShopBring value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopEdges) ParcelShopBringOrErr() (*ParcelShopBring, error) {
	if e.ParcelShopBring != nil {
		return e.ParcelShopBring, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: parcelshopbring.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop_bring"}
}

// CarrierBrandOrErr returns the CarrierBrand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopEdges) CarrierBrandOrErr() (*CarrierBrand, error) {
	if e.CarrierBrand != nil {
		return e.CarrierBrand, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: carrierbrand.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_brand"}
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopEdges) AddressOrErr() (*AddressGlobal, error) {
	if e.Address != nil {
		return e.Address, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: addressglobal.Label}
	}
	return nil, &NotLoadedError{edge: "address"}
}

// ColliOrErr returns the Colli value or an error if the edge
// was not loaded in eager-loading.
func (e ParcelShopEdges) ColliOrErr() ([]*Colli, error) {
	if e.loadedTypes[6] {
		return e.Colli, nil
	}
	return nil, &NotLoadedError{edge: "colli"}
}

// BusinessHoursPeriodOrErr returns the BusinessHoursPeriod value or an error if the edge
// was not loaded in eager-loading.
func (e ParcelShopEdges) BusinessHoursPeriodOrErr() ([]*BusinessHoursPeriod, error) {
	if e.loadedTypes[7] {
		return e.BusinessHoursPeriod, nil
	}
	return nil, &NotLoadedError{edge: "business_hours_period"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ParcelShop) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parcelshop.FieldID:
			values[i] = new(pulid.ID)
		case parcelshop.FieldName:
			values[i] = new(sql.NullString)
		case parcelshop.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case parcelshop.ForeignKeys[0]: // parcel_shop_carrier_brand
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ParcelShop fields.
func (ps *ParcelShop) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parcelshop.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ps.ID = *value
			}
		case parcelshop.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ps.Name = value.String
			}
		case parcelshop.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				ps.LastUpdated = value.Time
			}
		case parcelshop.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parcel_shop_carrier_brand", values[i])
			} else if value.Valid {
				ps.parcel_shop_carrier_brand = new(pulid.ID)
				*ps.parcel_shop_carrier_brand = *value.S.(*pulid.ID)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ParcelShop.
// This includes values selected through modifiers, order, etc.
func (ps *ParcelShop) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryParcelShopDAO queries the "parcel_shop_dao" edge of the ParcelShop entity.
func (ps *ParcelShop) QueryParcelShopDAO() *ParcelShopDAOQuery {
	return NewParcelShopClient(ps.config).QueryParcelShopDAO(ps)
}

// QueryParcelShopPostNord queries the "parcel_shop_post_nord" edge of the ParcelShop entity.
func (ps *ParcelShop) QueryParcelShopPostNord() *ParcelShopPostNordQuery {
	return NewParcelShopClient(ps.config).QueryParcelShopPostNord(ps)
}

// QueryParcelShopGLS queries the "parcel_shop_gls" edge of the ParcelShop entity.
func (ps *ParcelShop) QueryParcelShopGLS() *ParcelShopGLSQuery {
	return NewParcelShopClient(ps.config).QueryParcelShopGLS(ps)
}

// QueryParcelShopBring queries the "parcel_shop_bring" edge of the ParcelShop entity.
func (ps *ParcelShop) QueryParcelShopBring() *ParcelShopBringQuery {
	return NewParcelShopClient(ps.config).QueryParcelShopBring(ps)
}

// QueryCarrierBrand queries the "carrier_brand" edge of the ParcelShop entity.
func (ps *ParcelShop) QueryCarrierBrand() *CarrierBrandQuery {
	return NewParcelShopClient(ps.config).QueryCarrierBrand(ps)
}

// QueryAddress queries the "address" edge of the ParcelShop entity.
func (ps *ParcelShop) QueryAddress() *AddressGlobalQuery {
	return NewParcelShopClient(ps.config).QueryAddress(ps)
}

// QueryColli queries the "colli" edge of the ParcelShop entity.
func (ps *ParcelShop) QueryColli() *ColliQuery {
	return NewParcelShopClient(ps.config).QueryColli(ps)
}

// QueryBusinessHoursPeriod queries the "business_hours_period" edge of the ParcelShop entity.
func (ps *ParcelShop) QueryBusinessHoursPeriod() *BusinessHoursPeriodQuery {
	return NewParcelShopClient(ps.config).QueryBusinessHoursPeriod(ps)
}

// Update returns a builder for updating this ParcelShop.
// Note that you need to call ParcelShop.Unwrap() before calling this method if this ParcelShop
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ParcelShop) Update() *ParcelShopUpdateOne {
	return NewParcelShopClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the ParcelShop entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ParcelShop) Unwrap() *ParcelShop {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ParcelShop is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ParcelShop) String() string {
	var builder strings.Builder
	builder.WriteString("ParcelShop(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("name=")
	builder.WriteString(ps.Name)
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(ps.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedColli returns the Colli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ps *ParcelShop) NamedColli(name string) ([]*Colli, error) {
	if ps.Edges.namedColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ps.Edges.namedColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ps *ParcelShop) appendNamedColli(name string, edges ...*Colli) {
	if ps.Edges.namedColli == nil {
		ps.Edges.namedColli = make(map[string][]*Colli)
	}
	if len(edges) == 0 {
		ps.Edges.namedColli[name] = []*Colli{}
	} else {
		ps.Edges.namedColli[name] = append(ps.Edges.namedColli[name], edges...)
	}
}

// NamedBusinessHoursPeriod returns the BusinessHoursPeriod named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ps *ParcelShop) NamedBusinessHoursPeriod(name string) ([]*BusinessHoursPeriod, error) {
	if ps.Edges.namedBusinessHoursPeriod == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ps.Edges.namedBusinessHoursPeriod[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ps *ParcelShop) appendNamedBusinessHoursPeriod(name string, edges ...*BusinessHoursPeriod) {
	if ps.Edges.namedBusinessHoursPeriod == nil {
		ps.Edges.namedBusinessHoursPeriod = make(map[string][]*BusinessHoursPeriod)
	}
	if len(edges) == 0 {
		ps.Edges.namedBusinessHoursPeriod[name] = []*BusinessHoursPeriod{}
	} else {
		ps.Edges.namedBusinessHoursPeriod[name] = append(ps.Edges.namedBusinessHoursPeriod[name], edges...)
	}
}

// ParcelShops is a parsable slice of ParcelShop.
type ParcelShops []*ParcelShop
