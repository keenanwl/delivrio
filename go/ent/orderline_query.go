// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderLineQuery is the builder for querying OrderLine entities.
type OrderLineQuery struct {
	config
	ctx                      *QueryContext
	order                    []orderline.OrderOption
	inters                   []Interceptor
	predicates               []predicate.OrderLine
	withTenant               *TenantQuery
	withProductVariant       *ProductVariantQuery
	withColli                *ColliQuery
	withReturnOrderLine      *ReturnOrderLineQuery
	withCurrency             *CurrencyQuery
	withFKs                  bool
	modifiers                []func(*sql.Selector)
	loadTotal                []func(context.Context, []*OrderLine) error
	withNamedReturnOrderLine map[string]*ReturnOrderLineQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderLineQuery builder.
func (olq *OrderLineQuery) Where(ps ...predicate.OrderLine) *OrderLineQuery {
	olq.predicates = append(olq.predicates, ps...)
	return olq
}

// Limit the number of records to be returned by this query.
func (olq *OrderLineQuery) Limit(limit int) *OrderLineQuery {
	olq.ctx.Limit = &limit
	return olq
}

// Offset to start from.
func (olq *OrderLineQuery) Offset(offset int) *OrderLineQuery {
	olq.ctx.Offset = &offset
	return olq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (olq *OrderLineQuery) Unique(unique bool) *OrderLineQuery {
	olq.ctx.Unique = &unique
	return olq
}

// Order specifies how the records should be ordered.
func (olq *OrderLineQuery) Order(o ...orderline.OrderOption) *OrderLineQuery {
	olq.order = append(olq.order, o...)
	return olq
}

// QueryTenant chains the current query on the "tenant" edge.
func (olq *OrderLineQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: olq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := olq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := olq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderline.TenantTable, orderline.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(olq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductVariant chains the current query on the "product_variant" edge.
func (olq *OrderLineQuery) QueryProductVariant() *ProductVariantQuery {
	query := (&ProductVariantClient{config: olq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := olq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := olq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, selector),
			sqlgraph.To(productvariant.Table, productvariant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderline.ProductVariantTable, orderline.ProductVariantColumn),
		)
		fromU = sqlgraph.SetNeighbors(olq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryColli chains the current query on the "colli" edge.
func (olq *OrderLineQuery) QueryColli() *ColliQuery {
	query := (&ColliClient{config: olq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := olq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := olq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderline.ColliTable, orderline.ColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(olq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnOrderLine chains the current query on the "return_order_line" edge.
func (olq *OrderLineQuery) QueryReturnOrderLine() *ReturnOrderLineQuery {
	query := (&ReturnOrderLineClient{config: olq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := olq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := olq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, selector),
			sqlgraph.To(returnorderline.Table, returnorderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, orderline.ReturnOrderLineTable, orderline.ReturnOrderLineColumn),
		)
		fromU = sqlgraph.SetNeighbors(olq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCurrency chains the current query on the "currency" edge.
func (olq *OrderLineQuery) QueryCurrency() *CurrencyQuery {
	query := (&CurrencyClient{config: olq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := olq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := olq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, selector),
			sqlgraph.To(currency.Table, currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderline.CurrencyTable, orderline.CurrencyColumn),
		)
		fromU = sqlgraph.SetNeighbors(olq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderLine entity from the query.
// Returns a *NotFoundError when no OrderLine was found.
func (olq *OrderLineQuery) First(ctx context.Context) (*OrderLine, error) {
	nodes, err := olq.Limit(1).All(setContextOp(ctx, olq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderline.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (olq *OrderLineQuery) FirstX(ctx context.Context) *OrderLine {
	node, err := olq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderLine ID from the query.
// Returns a *NotFoundError when no OrderLine ID was found.
func (olq *OrderLineQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = olq.Limit(1).IDs(setContextOp(ctx, olq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderline.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (olq *OrderLineQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := olq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderLine entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderLine entity is found.
// Returns a *NotFoundError when no OrderLine entities are found.
func (olq *OrderLineQuery) Only(ctx context.Context) (*OrderLine, error) {
	nodes, err := olq.Limit(2).All(setContextOp(ctx, olq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderline.Label}
	default:
		return nil, &NotSingularError{orderline.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (olq *OrderLineQuery) OnlyX(ctx context.Context) *OrderLine {
	node, err := olq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderLine ID in the query.
// Returns a *NotSingularError when more than one OrderLine ID is found.
// Returns a *NotFoundError when no entities are found.
func (olq *OrderLineQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = olq.Limit(2).IDs(setContextOp(ctx, olq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderline.Label}
	default:
		err = &NotSingularError{orderline.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (olq *OrderLineQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := olq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderLines.
func (olq *OrderLineQuery) All(ctx context.Context) ([]*OrderLine, error) {
	ctx = setContextOp(ctx, olq.ctx, ent.OpQueryAll)
	if err := olq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrderLine, *OrderLineQuery]()
	return withInterceptors[[]*OrderLine](ctx, olq, qr, olq.inters)
}

// AllX is like All, but panics if an error occurs.
func (olq *OrderLineQuery) AllX(ctx context.Context) []*OrderLine {
	nodes, err := olq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderLine IDs.
func (olq *OrderLineQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if olq.ctx.Unique == nil && olq.path != nil {
		olq.Unique(true)
	}
	ctx = setContextOp(ctx, olq.ctx, ent.OpQueryIDs)
	if err = olq.Select(orderline.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (olq *OrderLineQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := olq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (olq *OrderLineQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, olq.ctx, ent.OpQueryCount)
	if err := olq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, olq, querierCount[*OrderLineQuery](), olq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (olq *OrderLineQuery) CountX(ctx context.Context) int {
	count, err := olq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (olq *OrderLineQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, olq.ctx, ent.OpQueryExist)
	switch _, err := olq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (olq *OrderLineQuery) ExistX(ctx context.Context) bool {
	exist, err := olq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderLineQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (olq *OrderLineQuery) Clone() *OrderLineQuery {
	if olq == nil {
		return nil
	}
	return &OrderLineQuery{
		config:              olq.config,
		ctx:                 olq.ctx.Clone(),
		order:               append([]orderline.OrderOption{}, olq.order...),
		inters:              append([]Interceptor{}, olq.inters...),
		predicates:          append([]predicate.OrderLine{}, olq.predicates...),
		withTenant:          olq.withTenant.Clone(),
		withProductVariant:  olq.withProductVariant.Clone(),
		withColli:           olq.withColli.Clone(),
		withReturnOrderLine: olq.withReturnOrderLine.Clone(),
		withCurrency:        olq.withCurrency.Clone(),
		// clone intermediate query.
		sql:  olq.sql.Clone(),
		path: olq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (olq *OrderLineQuery) WithTenant(opts ...func(*TenantQuery)) *OrderLineQuery {
	query := (&TenantClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	olq.withTenant = query
	return olq
}

// WithProductVariant tells the query-builder to eager-load the nodes that are connected to
// the "product_variant" edge. The optional arguments are used to configure the query builder of the edge.
func (olq *OrderLineQuery) WithProductVariant(opts ...func(*ProductVariantQuery)) *OrderLineQuery {
	query := (&ProductVariantClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	olq.withProductVariant = query
	return olq
}

// WithColli tells the query-builder to eager-load the nodes that are connected to
// the "colli" edge. The optional arguments are used to configure the query builder of the edge.
func (olq *OrderLineQuery) WithColli(opts ...func(*ColliQuery)) *OrderLineQuery {
	query := (&ColliClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	olq.withColli = query
	return olq
}

// WithReturnOrderLine tells the query-builder to eager-load the nodes that are connected to
// the "return_order_line" edge. The optional arguments are used to configure the query builder of the edge.
func (olq *OrderLineQuery) WithReturnOrderLine(opts ...func(*ReturnOrderLineQuery)) *OrderLineQuery {
	query := (&ReturnOrderLineClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	olq.withReturnOrderLine = query
	return olq
}

// WithCurrency tells the query-builder to eager-load the nodes that are connected to
// the "currency" edge. The optional arguments are used to configure the query builder of the edge.
func (olq *OrderLineQuery) WithCurrency(opts ...func(*CurrencyQuery)) *OrderLineQuery {
	query := (&CurrencyClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	olq.withCurrency = query
	return olq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderLine.Query().
//		GroupBy(orderline.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (olq *OrderLineQuery) GroupBy(field string, fields ...string) *OrderLineGroupBy {
	olq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrderLineGroupBy{build: olq}
	grbuild.flds = &olq.ctx.Fields
	grbuild.label = orderline.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.OrderLine.Query().
//		Select(orderline.FieldTenantID).
//		Scan(ctx, &v)
func (olq *OrderLineQuery) Select(fields ...string) *OrderLineSelect {
	olq.ctx.Fields = append(olq.ctx.Fields, fields...)
	sbuild := &OrderLineSelect{OrderLineQuery: olq}
	sbuild.label = orderline.Label
	sbuild.flds, sbuild.scan = &olq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrderLineSelect configured with the given aggregations.
func (olq *OrderLineQuery) Aggregate(fns ...AggregateFunc) *OrderLineSelect {
	return olq.Select().Aggregate(fns...)
}

func (olq *OrderLineQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range olq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, olq); err != nil {
				return err
			}
		}
	}
	for _, f := range olq.ctx.Fields {
		if !orderline.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if olq.path != nil {
		prev, err := olq.path(ctx)
		if err != nil {
			return err
		}
		olq.sql = prev
	}
	if orderline.Policy == nil {
		return errors.New("ent: uninitialized orderline.Policy (forgotten import ent/runtime?)")
	}
	if err := orderline.Policy.EvalQuery(ctx, olq); err != nil {
		return err
	}
	return nil
}

func (olq *OrderLineQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrderLine, error) {
	var (
		nodes       = []*OrderLine{}
		withFKs     = olq.withFKs
		_spec       = olq.querySpec()
		loadedTypes = [5]bool{
			olq.withTenant != nil,
			olq.withProductVariant != nil,
			olq.withColli != nil,
			olq.withReturnOrderLine != nil,
			olq.withCurrency != nil,
		}
	)
	if olq.withCurrency != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, orderline.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrderLine).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrderLine{config: olq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(olq.modifiers) > 0 {
		_spec.Modifiers = olq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, olq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := olq.withTenant; query != nil {
		if err := olq.loadTenant(ctx, query, nodes, nil,
			func(n *OrderLine, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := olq.withProductVariant; query != nil {
		if err := olq.loadProductVariant(ctx, query, nodes, nil,
			func(n *OrderLine, e *ProductVariant) { n.Edges.ProductVariant = e }); err != nil {
			return nil, err
		}
	}
	if query := olq.withColli; query != nil {
		if err := olq.loadColli(ctx, query, nodes, nil,
			func(n *OrderLine, e *Colli) { n.Edges.Colli = e }); err != nil {
			return nil, err
		}
	}
	if query := olq.withReturnOrderLine; query != nil {
		if err := olq.loadReturnOrderLine(ctx, query, nodes,
			func(n *OrderLine) { n.Edges.ReturnOrderLine = []*ReturnOrderLine{} },
			func(n *OrderLine, e *ReturnOrderLine) { n.Edges.ReturnOrderLine = append(n.Edges.ReturnOrderLine, e) }); err != nil {
			return nil, err
		}
	}
	if query := olq.withCurrency; query != nil {
		if err := olq.loadCurrency(ctx, query, nodes, nil,
			func(n *OrderLine, e *Currency) { n.Edges.Currency = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range olq.withNamedReturnOrderLine {
		if err := olq.loadReturnOrderLine(ctx, query, nodes,
			func(n *OrderLine) { n.appendNamedReturnOrderLine(name) },
			func(n *OrderLine, e *ReturnOrderLine) { n.appendNamedReturnOrderLine(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range olq.loadTotal {
		if err := olq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (olq *OrderLineQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*OrderLine, init func(*OrderLine), assign func(*OrderLine, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*OrderLine)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (olq *OrderLineQuery) loadProductVariant(ctx context.Context, query *ProductVariantQuery, nodes []*OrderLine, init func(*OrderLine), assign func(*OrderLine, *ProductVariant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*OrderLine)
	for i := range nodes {
		fk := nodes[i].ProductVariantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(productvariant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_variant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (olq *OrderLineQuery) loadColli(ctx context.Context, query *ColliQuery, nodes []*OrderLine, init func(*OrderLine), assign func(*OrderLine, *Colli)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*OrderLine)
	for i := range nodes {
		fk := nodes[i].ColliID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(colli.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (olq *OrderLineQuery) loadReturnOrderLine(ctx context.Context, query *ReturnOrderLineQuery, nodes []*OrderLine, init func(*OrderLine), assign func(*OrderLine, *ReturnOrderLine)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*OrderLine)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnOrderLine(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(orderline.ReturnOrderLineColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_order_line_order_line
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_order_line_order_line" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_order_line_order_line" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (olq *OrderLineQuery) loadCurrency(ctx context.Context, query *CurrencyQuery, nodes []*OrderLine, init func(*OrderLine), assign func(*OrderLine, *Currency)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*OrderLine)
	for i := range nodes {
		if nodes[i].order_line_currency == nil {
			continue
		}
		fk := *nodes[i].order_line_currency
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(currency.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_line_currency" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (olq *OrderLineQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := olq.querySpec()
	if len(olq.modifiers) > 0 {
		_spec.Modifiers = olq.modifiers
	}
	_spec.Node.Columns = olq.ctx.Fields
	if len(olq.ctx.Fields) > 0 {
		_spec.Unique = olq.ctx.Unique != nil && *olq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, olq.driver, _spec)
}

func (olq *OrderLineQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(orderline.Table, orderline.Columns, sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString))
	_spec.From = olq.sql
	if unique := olq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if olq.path != nil {
		_spec.Unique = true
	}
	if fields := olq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderline.FieldID)
		for i := range fields {
			if fields[i] != orderline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if olq.withTenant != nil {
			_spec.Node.AddColumnOnce(orderline.FieldTenantID)
		}
		if olq.withProductVariant != nil {
			_spec.Node.AddColumnOnce(orderline.FieldProductVariantID)
		}
		if olq.withColli != nil {
			_spec.Node.AddColumnOnce(orderline.FieldColliID)
		}
	}
	if ps := olq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := olq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := olq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := olq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (olq *OrderLineQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(olq.driver.Dialect())
	t1 := builder.Table(orderline.Table)
	columns := olq.ctx.Fields
	if len(columns) == 0 {
		columns = orderline.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if olq.sql != nil {
		selector = olq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if olq.ctx.Unique != nil && *olq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range olq.predicates {
		p(selector)
	}
	for _, p := range olq.order {
		p(selector)
	}
	if offset := olq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := olq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedReturnOrderLine tells the query-builder to eager-load the nodes that are connected to the "return_order_line"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (olq *OrderLineQuery) WithNamedReturnOrderLine(name string, opts ...func(*ReturnOrderLineQuery)) *OrderLineQuery {
	query := (&ReturnOrderLineClient{config: olq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if olq.withNamedReturnOrderLine == nil {
		olq.withNamedReturnOrderLine = make(map[string]*ReturnOrderLineQuery)
	}
	olq.withNamedReturnOrderLine[name] = query
	return olq
}

// OrderLineGroupBy is the group-by builder for OrderLine entities.
type OrderLineGroupBy struct {
	selector
	build *OrderLineQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (olgb *OrderLineGroupBy) Aggregate(fns ...AggregateFunc) *OrderLineGroupBy {
	olgb.fns = append(olgb.fns, fns...)
	return olgb
}

// Scan applies the selector query and scans the result into the given value.
func (olgb *OrderLineGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, olgb.build.ctx, ent.OpQueryGroupBy)
	if err := olgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderLineQuery, *OrderLineGroupBy](ctx, olgb.build, olgb, olgb.build.inters, v)
}

func (olgb *OrderLineGroupBy) sqlScan(ctx context.Context, root *OrderLineQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(olgb.fns))
	for _, fn := range olgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*olgb.flds)+len(olgb.fns))
		for _, f := range *olgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*olgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := olgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrderLineSelect is the builder for selecting fields of OrderLine entities.
type OrderLineSelect struct {
	*OrderLineQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ols *OrderLineSelect) Aggregate(fns ...AggregateFunc) *OrderLineSelect {
	ols.fns = append(ols.fns, fns...)
	return ols
}

// Scan applies the selector query and scans the result into the given value.
func (ols *OrderLineSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ols.ctx, ent.OpQuerySelect)
	if err := ols.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderLineQuery, *OrderLineSelect](ctx, ols.OrderLineQuery, ols, ols.inters, v)
}

func (ols *OrderLineSelect) sqlScan(ctx context.Context, root *OrderLineQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ols.fns))
	for _, fn := range ols.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ols.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ols.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
