// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionGLSUpdate is the builder for updating DeliveryOptionGLS entities.
type DeliveryOptionGLSUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryOptionGLSMutation
}

// Where appends a list predicates to the DeliveryOptionGLSUpdate builder.
func (dogu *DeliveryOptionGLSUpdate) Where(ps ...predicate.DeliveryOptionGLS) *DeliveryOptionGLSUpdate {
	dogu.mutation.Where(ps...)
	return dogu
}

// SetTenantID sets the "tenant_id" field.
func (dogu *DeliveryOptionGLSUpdate) SetTenantID(pu pulid.ID) *DeliveryOptionGLSUpdate {
	dogu.mutation.SetTenantID(pu)
	return dogu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dogu *DeliveryOptionGLSUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionGLSUpdate {
	if pu != nil {
		dogu.SetTenantID(*pu)
	}
	return dogu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dogu *DeliveryOptionGLSUpdate) SetTenant(t *Tenant) *DeliveryOptionGLSUpdate {
	return dogu.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dogu *DeliveryOptionGLSUpdate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionGLSUpdate {
	dogu.mutation.SetDeliveryOptionID(id)
	return dogu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dogu *DeliveryOptionGLSUpdate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionGLSUpdate {
	return dogu.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceGlIDs adds the "carrier_additional_service_gls" edge to the CarrierAdditionalServiceGLS entity by IDs.
func (dogu *DeliveryOptionGLSUpdate) AddCarrierAdditionalServiceGlIDs(ids ...pulid.ID) *DeliveryOptionGLSUpdate {
	dogu.mutation.AddCarrierAdditionalServiceGlIDs(ids...)
	return dogu
}

// AddCarrierAdditionalServiceGLS adds the "carrier_additional_service_gls" edges to the CarrierAdditionalServiceGLS entity.
func (dogu *DeliveryOptionGLSUpdate) AddCarrierAdditionalServiceGLS(c ...*CarrierAdditionalServiceGLS) *DeliveryOptionGLSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dogu.AddCarrierAdditionalServiceGlIDs(ids...)
}

// Mutation returns the DeliveryOptionGLSMutation object of the builder.
func (dogu *DeliveryOptionGLSUpdate) Mutation() *DeliveryOptionGLSMutation {
	return dogu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dogu *DeliveryOptionGLSUpdate) ClearTenant() *DeliveryOptionGLSUpdate {
	dogu.mutation.ClearTenant()
	return dogu
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (dogu *DeliveryOptionGLSUpdate) ClearDeliveryOption() *DeliveryOptionGLSUpdate {
	dogu.mutation.ClearDeliveryOption()
	return dogu
}

// ClearCarrierAdditionalServiceGLS clears all "carrier_additional_service_gls" edges to the CarrierAdditionalServiceGLS entity.
func (dogu *DeliveryOptionGLSUpdate) ClearCarrierAdditionalServiceGLS() *DeliveryOptionGLSUpdate {
	dogu.mutation.ClearCarrierAdditionalServiceGLS()
	return dogu
}

// RemoveCarrierAdditionalServiceGlIDs removes the "carrier_additional_service_gls" edge to CarrierAdditionalServiceGLS entities by IDs.
func (dogu *DeliveryOptionGLSUpdate) RemoveCarrierAdditionalServiceGlIDs(ids ...pulid.ID) *DeliveryOptionGLSUpdate {
	dogu.mutation.RemoveCarrierAdditionalServiceGlIDs(ids...)
	return dogu
}

// RemoveCarrierAdditionalServiceGLS removes "carrier_additional_service_gls" edges to CarrierAdditionalServiceGLS entities.
func (dogu *DeliveryOptionGLSUpdate) RemoveCarrierAdditionalServiceGLS(c ...*CarrierAdditionalServiceGLS) *DeliveryOptionGLSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dogu.RemoveCarrierAdditionalServiceGlIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dogu *DeliveryOptionGLSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dogu.sqlSave, dogu.mutation, dogu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dogu *DeliveryOptionGLSUpdate) SaveX(ctx context.Context) int {
	affected, err := dogu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dogu *DeliveryOptionGLSUpdate) Exec(ctx context.Context) error {
	_, err := dogu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dogu *DeliveryOptionGLSUpdate) ExecX(ctx context.Context) {
	if err := dogu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dogu *DeliveryOptionGLSUpdate) check() error {
	if dogu.mutation.TenantCleared() && len(dogu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionGLS.tenant"`)
	}
	if dogu.mutation.DeliveryOptionCleared() && len(dogu.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionGLS.delivery_option"`)
	}
	return nil
}

func (dogu *DeliveryOptionGLSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dogu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptiongls.Table, deliveryoptiongls.Columns, sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString))
	if ps := dogu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dogu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiongls.TenantTable,
			Columns: []string{deliveryoptiongls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dogu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiongls.TenantTable,
			Columns: []string{deliveryoptiongls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dogu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiongls.DeliveryOptionTable,
			Columns: []string{deliveryoptiongls.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dogu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiongls.DeliveryOptionTable,
			Columns: []string{deliveryoptiongls.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dogu.mutation.CarrierAdditionalServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiongls.CarrierAdditionalServiceGLSTable,
			Columns: deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dogu.mutation.RemovedCarrierAdditionalServiceGLSIDs(); len(nodes) > 0 && !dogu.mutation.CarrierAdditionalServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiongls.CarrierAdditionalServiceGLSTable,
			Columns: deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dogu.mutation.CarrierAdditionalServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiongls.CarrierAdditionalServiceGLSTable,
			Columns: deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dogu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptiongls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dogu.mutation.done = true
	return n, nil
}

// DeliveryOptionGLSUpdateOne is the builder for updating a single DeliveryOptionGLS entity.
type DeliveryOptionGLSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryOptionGLSMutation
}

// SetTenantID sets the "tenant_id" field.
func (doguo *DeliveryOptionGLSUpdateOne) SetTenantID(pu pulid.ID) *DeliveryOptionGLSUpdateOne {
	doguo.mutation.SetTenantID(pu)
	return doguo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (doguo *DeliveryOptionGLSUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionGLSUpdateOne {
	if pu != nil {
		doguo.SetTenantID(*pu)
	}
	return doguo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (doguo *DeliveryOptionGLSUpdateOne) SetTenant(t *Tenant) *DeliveryOptionGLSUpdateOne {
	return doguo.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (doguo *DeliveryOptionGLSUpdateOne) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionGLSUpdateOne {
	doguo.mutation.SetDeliveryOptionID(id)
	return doguo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (doguo *DeliveryOptionGLSUpdateOne) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionGLSUpdateOne {
	return doguo.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceGlIDs adds the "carrier_additional_service_gls" edge to the CarrierAdditionalServiceGLS entity by IDs.
func (doguo *DeliveryOptionGLSUpdateOne) AddCarrierAdditionalServiceGlIDs(ids ...pulid.ID) *DeliveryOptionGLSUpdateOne {
	doguo.mutation.AddCarrierAdditionalServiceGlIDs(ids...)
	return doguo
}

// AddCarrierAdditionalServiceGLS adds the "carrier_additional_service_gls" edges to the CarrierAdditionalServiceGLS entity.
func (doguo *DeliveryOptionGLSUpdateOne) AddCarrierAdditionalServiceGLS(c ...*CarrierAdditionalServiceGLS) *DeliveryOptionGLSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doguo.AddCarrierAdditionalServiceGlIDs(ids...)
}

// Mutation returns the DeliveryOptionGLSMutation object of the builder.
func (doguo *DeliveryOptionGLSUpdateOne) Mutation() *DeliveryOptionGLSMutation {
	return doguo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (doguo *DeliveryOptionGLSUpdateOne) ClearTenant() *DeliveryOptionGLSUpdateOne {
	doguo.mutation.ClearTenant()
	return doguo
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (doguo *DeliveryOptionGLSUpdateOne) ClearDeliveryOption() *DeliveryOptionGLSUpdateOne {
	doguo.mutation.ClearDeliveryOption()
	return doguo
}

// ClearCarrierAdditionalServiceGLS clears all "carrier_additional_service_gls" edges to the CarrierAdditionalServiceGLS entity.
func (doguo *DeliveryOptionGLSUpdateOne) ClearCarrierAdditionalServiceGLS() *DeliveryOptionGLSUpdateOne {
	doguo.mutation.ClearCarrierAdditionalServiceGLS()
	return doguo
}

// RemoveCarrierAdditionalServiceGlIDs removes the "carrier_additional_service_gls" edge to CarrierAdditionalServiceGLS entities by IDs.
func (doguo *DeliveryOptionGLSUpdateOne) RemoveCarrierAdditionalServiceGlIDs(ids ...pulid.ID) *DeliveryOptionGLSUpdateOne {
	doguo.mutation.RemoveCarrierAdditionalServiceGlIDs(ids...)
	return doguo
}

// RemoveCarrierAdditionalServiceGLS removes "carrier_additional_service_gls" edges to CarrierAdditionalServiceGLS entities.
func (doguo *DeliveryOptionGLSUpdateOne) RemoveCarrierAdditionalServiceGLS(c ...*CarrierAdditionalServiceGLS) *DeliveryOptionGLSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doguo.RemoveCarrierAdditionalServiceGlIDs(ids...)
}

// Where appends a list predicates to the DeliveryOptionGLSUpdate builder.
func (doguo *DeliveryOptionGLSUpdateOne) Where(ps ...predicate.DeliveryOptionGLS) *DeliveryOptionGLSUpdateOne {
	doguo.mutation.Where(ps...)
	return doguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (doguo *DeliveryOptionGLSUpdateOne) Select(field string, fields ...string) *DeliveryOptionGLSUpdateOne {
	doguo.fields = append([]string{field}, fields...)
	return doguo
}

// Save executes the query and returns the updated DeliveryOptionGLS entity.
func (doguo *DeliveryOptionGLSUpdateOne) Save(ctx context.Context) (*DeliveryOptionGLS, error) {
	return withHooks(ctx, doguo.sqlSave, doguo.mutation, doguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (doguo *DeliveryOptionGLSUpdateOne) SaveX(ctx context.Context) *DeliveryOptionGLS {
	node, err := doguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (doguo *DeliveryOptionGLSUpdateOne) Exec(ctx context.Context) error {
	_, err := doguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doguo *DeliveryOptionGLSUpdateOne) ExecX(ctx context.Context) {
	if err := doguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (doguo *DeliveryOptionGLSUpdateOne) check() error {
	if doguo.mutation.TenantCleared() && len(doguo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionGLS.tenant"`)
	}
	if doguo.mutation.DeliveryOptionCleared() && len(doguo.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionGLS.delivery_option"`)
	}
	return nil
}

func (doguo *DeliveryOptionGLSUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryOptionGLS, err error) {
	if err := doguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptiongls.Table, deliveryoptiongls.Columns, sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString))
	id, ok := doguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryOptionGLS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := doguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptiongls.FieldID)
		for _, f := range fields {
			if !deliveryoptiongls.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryoptiongls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := doguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if doguo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiongls.TenantTable,
			Columns: []string{deliveryoptiongls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doguo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiongls.TenantTable,
			Columns: []string{deliveryoptiongls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if doguo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiongls.DeliveryOptionTable,
			Columns: []string{deliveryoptiongls.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doguo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiongls.DeliveryOptionTable,
			Columns: []string{deliveryoptiongls.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if doguo.mutation.CarrierAdditionalServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiongls.CarrierAdditionalServiceGLSTable,
			Columns: deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doguo.mutation.RemovedCarrierAdditionalServiceGLSIDs(); len(nodes) > 0 && !doguo.mutation.CarrierAdditionalServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiongls.CarrierAdditionalServiceGLSTable,
			Columns: deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doguo.mutation.CarrierAdditionalServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiongls.CarrierAdditionalServiceGLSTable,
			Columns: deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryOptionGLS{config: doguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, doguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptiongls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	doguo.mutation.done = true
	return _node, nil
}
