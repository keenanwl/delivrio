// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierUSPSCreate is the builder for creating a CarrierUSPS entity.
type CarrierUSPSCreate struct {
	config
	mutation *CarrierUSPSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cuc *CarrierUSPSCreate) SetTenantID(pu pulid.ID) *CarrierUSPSCreate {
	cuc.mutation.SetTenantID(pu)
	return cuc
}

// SetIsTestAPI sets the "is_test_api" field.
func (cuc *CarrierUSPSCreate) SetIsTestAPI(b bool) *CarrierUSPSCreate {
	cuc.mutation.SetIsTestAPI(b)
	return cuc
}

// SetNillableIsTestAPI sets the "is_test_api" field if the given value is not nil.
func (cuc *CarrierUSPSCreate) SetNillableIsTestAPI(b *bool) *CarrierUSPSCreate {
	if b != nil {
		cuc.SetIsTestAPI(*b)
	}
	return cuc
}

// SetConsumerKey sets the "consumer_key" field.
func (cuc *CarrierUSPSCreate) SetConsumerKey(s string) *CarrierUSPSCreate {
	cuc.mutation.SetConsumerKey(s)
	return cuc
}

// SetNillableConsumerKey sets the "consumer_key" field if the given value is not nil.
func (cuc *CarrierUSPSCreate) SetNillableConsumerKey(s *string) *CarrierUSPSCreate {
	if s != nil {
		cuc.SetConsumerKey(*s)
	}
	return cuc
}

// SetConsumerSecret sets the "consumer_secret" field.
func (cuc *CarrierUSPSCreate) SetConsumerSecret(s string) *CarrierUSPSCreate {
	cuc.mutation.SetConsumerSecret(s)
	return cuc
}

// SetNillableConsumerSecret sets the "consumer_secret" field if the given value is not nil.
func (cuc *CarrierUSPSCreate) SetNillableConsumerSecret(s *string) *CarrierUSPSCreate {
	if s != nil {
		cuc.SetConsumerSecret(*s)
	}
	return cuc
}

// SetMid sets the "mid" field.
func (cuc *CarrierUSPSCreate) SetMid(s string) *CarrierUSPSCreate {
	cuc.mutation.SetMid(s)
	return cuc
}

// SetNillableMid sets the "mid" field if the given value is not nil.
func (cuc *CarrierUSPSCreate) SetNillableMid(s *string) *CarrierUSPSCreate {
	if s != nil {
		cuc.SetMid(*s)
	}
	return cuc
}

// SetManifestMid sets the "manifest_mid" field.
func (cuc *CarrierUSPSCreate) SetManifestMid(s string) *CarrierUSPSCreate {
	cuc.mutation.SetManifestMid(s)
	return cuc
}

// SetNillableManifestMid sets the "manifest_mid" field if the given value is not nil.
func (cuc *CarrierUSPSCreate) SetNillableManifestMid(s *string) *CarrierUSPSCreate {
	if s != nil {
		cuc.SetManifestMid(*s)
	}
	return cuc
}

// SetCrid sets the "crid" field.
func (cuc *CarrierUSPSCreate) SetCrid(s string) *CarrierUSPSCreate {
	cuc.mutation.SetCrid(s)
	return cuc
}

// SetNillableCrid sets the "crid" field if the given value is not nil.
func (cuc *CarrierUSPSCreate) SetNillableCrid(s *string) *CarrierUSPSCreate {
	if s != nil {
		cuc.SetCrid(*s)
	}
	return cuc
}

// SetEpsAccountNumber sets the "eps_account_number" field.
func (cuc *CarrierUSPSCreate) SetEpsAccountNumber(s string) *CarrierUSPSCreate {
	cuc.mutation.SetEpsAccountNumber(s)
	return cuc
}

// SetNillableEpsAccountNumber sets the "eps_account_number" field if the given value is not nil.
func (cuc *CarrierUSPSCreate) SetNillableEpsAccountNumber(s *string) *CarrierUSPSCreate {
	if s != nil {
		cuc.SetEpsAccountNumber(*s)
	}
	return cuc
}

// SetID sets the "id" field.
func (cuc *CarrierUSPSCreate) SetID(pu pulid.ID) *CarrierUSPSCreate {
	cuc.mutation.SetID(pu)
	return cuc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cuc *CarrierUSPSCreate) SetNillableID(pu *pulid.ID) *CarrierUSPSCreate {
	if pu != nil {
		cuc.SetID(*pu)
	}
	return cuc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cuc *CarrierUSPSCreate) SetTenant(t *Tenant) *CarrierUSPSCreate {
	return cuc.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cuc *CarrierUSPSCreate) SetCarrierID(id pulid.ID) *CarrierUSPSCreate {
	cuc.mutation.SetCarrierID(id)
	return cuc
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cuc *CarrierUSPSCreate) SetCarrier(c *Carrier) *CarrierUSPSCreate {
	return cuc.SetCarrierID(c.ID)
}

// Mutation returns the CarrierUSPSMutation object of the builder.
func (cuc *CarrierUSPSCreate) Mutation() *CarrierUSPSMutation {
	return cuc.mutation
}

// Save creates the CarrierUSPS in the database.
func (cuc *CarrierUSPSCreate) Save(ctx context.Context) (*CarrierUSPS, error) {
	if err := cuc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuc.sqlSave, cuc.mutation, cuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cuc *CarrierUSPSCreate) SaveX(ctx context.Context) *CarrierUSPS {
	v, err := cuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cuc *CarrierUSPSCreate) Exec(ctx context.Context) error {
	_, err := cuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuc *CarrierUSPSCreate) ExecX(ctx context.Context) {
	if err := cuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuc *CarrierUSPSCreate) defaults() error {
	if _, ok := cuc.mutation.IsTestAPI(); !ok {
		v := carrierusps.DefaultIsTestAPI
		cuc.mutation.SetIsTestAPI(v)
	}
	if _, ok := cuc.mutation.ID(); !ok {
		if carrierusps.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierusps.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierusps.DefaultID()
		cuc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuc *CarrierUSPSCreate) check() error {
	if _, ok := cuc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CarrierUSPS.tenant_id"`)}
	}
	if _, ok := cuc.mutation.IsTestAPI(); !ok {
		return &ValidationError{Name: "is_test_api", err: errors.New(`ent: missing required field "CarrierUSPS.is_test_api"`)}
	}
	if len(cuc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CarrierUSPS.tenant"`)}
	}
	if len(cuc.mutation.CarrierIDs()) == 0 {
		return &ValidationError{Name: "carrier", err: errors.New(`ent: missing required edge "CarrierUSPS.carrier"`)}
	}
	return nil
}

func (cuc *CarrierUSPSCreate) sqlSave(ctx context.Context) (*CarrierUSPS, error) {
	if err := cuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cuc.mutation.id = &_node.ID
	cuc.mutation.done = true
	return _node, nil
}

func (cuc *CarrierUSPSCreate) createSpec() (*CarrierUSPS, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierUSPS{config: cuc.config}
		_spec = sqlgraph.NewCreateSpec(carrierusps.Table, sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString))
	)
	_spec.OnConflict = cuc.conflict
	if id, ok := cuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cuc.mutation.IsTestAPI(); ok {
		_spec.SetField(carrierusps.FieldIsTestAPI, field.TypeBool, value)
		_node.IsTestAPI = value
	}
	if value, ok := cuc.mutation.ConsumerKey(); ok {
		_spec.SetField(carrierusps.FieldConsumerKey, field.TypeString, value)
		_node.ConsumerKey = value
	}
	if value, ok := cuc.mutation.ConsumerSecret(); ok {
		_spec.SetField(carrierusps.FieldConsumerSecret, field.TypeString, value)
		_node.ConsumerSecret = value
	}
	if value, ok := cuc.mutation.Mid(); ok {
		_spec.SetField(carrierusps.FieldMid, field.TypeString, value)
		_node.Mid = value
	}
	if value, ok := cuc.mutation.ManifestMid(); ok {
		_spec.SetField(carrierusps.FieldManifestMid, field.TypeString, value)
		_node.ManifestMid = value
	}
	if value, ok := cuc.mutation.Crid(); ok {
		_spec.SetField(carrierusps.FieldCrid, field.TypeString, value)
		_node.Crid = value
	}
	if value, ok := cuc.mutation.EpsAccountNumber(); ok {
		_spec.SetField(carrierusps.FieldEpsAccountNumber, field.TypeString, value)
		_node.EpsAccountNumber = value
	}
	if nodes := cuc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierusps.TenantTable,
			Columns: []string{carrierusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cuc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierusps.CarrierTable,
			Columns: []string{carrierusps.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_carrier_usps = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierUSPS.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierUSPSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cuc *CarrierUSPSCreate) OnConflict(opts ...sql.ConflictOption) *CarrierUSPSUpsertOne {
	cuc.conflict = opts
	return &CarrierUSPSUpsertOne{
		create: cuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cuc *CarrierUSPSCreate) OnConflictColumns(columns ...string) *CarrierUSPSUpsertOne {
	cuc.conflict = append(cuc.conflict, sql.ConflictColumns(columns...))
	return &CarrierUSPSUpsertOne{
		create: cuc,
	}
}

type (
	// CarrierUSPSUpsertOne is the builder for "upsert"-ing
	//  one CarrierUSPS node.
	CarrierUSPSUpsertOne struct {
		create *CarrierUSPSCreate
	}

	// CarrierUSPSUpsert is the "OnConflict" setter.
	CarrierUSPSUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *CarrierUSPSUpsert) SetTenantID(v pulid.ID) *CarrierUSPSUpsert {
	u.Set(carrierusps.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierUSPSUpsert) UpdateTenantID() *CarrierUSPSUpsert {
	u.SetExcluded(carrierusps.FieldTenantID)
	return u
}

// SetIsTestAPI sets the "is_test_api" field.
func (u *CarrierUSPSUpsert) SetIsTestAPI(v bool) *CarrierUSPSUpsert {
	u.Set(carrierusps.FieldIsTestAPI, v)
	return u
}

// UpdateIsTestAPI sets the "is_test_api" field to the value that was provided on create.
func (u *CarrierUSPSUpsert) UpdateIsTestAPI() *CarrierUSPSUpsert {
	u.SetExcluded(carrierusps.FieldIsTestAPI)
	return u
}

// SetConsumerKey sets the "consumer_key" field.
func (u *CarrierUSPSUpsert) SetConsumerKey(v string) *CarrierUSPSUpsert {
	u.Set(carrierusps.FieldConsumerKey, v)
	return u
}

// UpdateConsumerKey sets the "consumer_key" field to the value that was provided on create.
func (u *CarrierUSPSUpsert) UpdateConsumerKey() *CarrierUSPSUpsert {
	u.SetExcluded(carrierusps.FieldConsumerKey)
	return u
}

// ClearConsumerKey clears the value of the "consumer_key" field.
func (u *CarrierUSPSUpsert) ClearConsumerKey() *CarrierUSPSUpsert {
	u.SetNull(carrierusps.FieldConsumerKey)
	return u
}

// SetConsumerSecret sets the "consumer_secret" field.
func (u *CarrierUSPSUpsert) SetConsumerSecret(v string) *CarrierUSPSUpsert {
	u.Set(carrierusps.FieldConsumerSecret, v)
	return u
}

// UpdateConsumerSecret sets the "consumer_secret" field to the value that was provided on create.
func (u *CarrierUSPSUpsert) UpdateConsumerSecret() *CarrierUSPSUpsert {
	u.SetExcluded(carrierusps.FieldConsumerSecret)
	return u
}

// ClearConsumerSecret clears the value of the "consumer_secret" field.
func (u *CarrierUSPSUpsert) ClearConsumerSecret() *CarrierUSPSUpsert {
	u.SetNull(carrierusps.FieldConsumerSecret)
	return u
}

// SetMid sets the "mid" field.
func (u *CarrierUSPSUpsert) SetMid(v string) *CarrierUSPSUpsert {
	u.Set(carrierusps.FieldMid, v)
	return u
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *CarrierUSPSUpsert) UpdateMid() *CarrierUSPSUpsert {
	u.SetExcluded(carrierusps.FieldMid)
	return u
}

// ClearMid clears the value of the "mid" field.
func (u *CarrierUSPSUpsert) ClearMid() *CarrierUSPSUpsert {
	u.SetNull(carrierusps.FieldMid)
	return u
}

// SetManifestMid sets the "manifest_mid" field.
func (u *CarrierUSPSUpsert) SetManifestMid(v string) *CarrierUSPSUpsert {
	u.Set(carrierusps.FieldManifestMid, v)
	return u
}

// UpdateManifestMid sets the "manifest_mid" field to the value that was provided on create.
func (u *CarrierUSPSUpsert) UpdateManifestMid() *CarrierUSPSUpsert {
	u.SetExcluded(carrierusps.FieldManifestMid)
	return u
}

// ClearManifestMid clears the value of the "manifest_mid" field.
func (u *CarrierUSPSUpsert) ClearManifestMid() *CarrierUSPSUpsert {
	u.SetNull(carrierusps.FieldManifestMid)
	return u
}

// SetCrid sets the "crid" field.
func (u *CarrierUSPSUpsert) SetCrid(v string) *CarrierUSPSUpsert {
	u.Set(carrierusps.FieldCrid, v)
	return u
}

// UpdateCrid sets the "crid" field to the value that was provided on create.
func (u *CarrierUSPSUpsert) UpdateCrid() *CarrierUSPSUpsert {
	u.SetExcluded(carrierusps.FieldCrid)
	return u
}

// ClearCrid clears the value of the "crid" field.
func (u *CarrierUSPSUpsert) ClearCrid() *CarrierUSPSUpsert {
	u.SetNull(carrierusps.FieldCrid)
	return u
}

// SetEpsAccountNumber sets the "eps_account_number" field.
func (u *CarrierUSPSUpsert) SetEpsAccountNumber(v string) *CarrierUSPSUpsert {
	u.Set(carrierusps.FieldEpsAccountNumber, v)
	return u
}

// UpdateEpsAccountNumber sets the "eps_account_number" field to the value that was provided on create.
func (u *CarrierUSPSUpsert) UpdateEpsAccountNumber() *CarrierUSPSUpsert {
	u.SetExcluded(carrierusps.FieldEpsAccountNumber)
	return u
}

// ClearEpsAccountNumber clears the value of the "eps_account_number" field.
func (u *CarrierUSPSUpsert) ClearEpsAccountNumber() *CarrierUSPSUpsert {
	u.SetNull(carrierusps.FieldEpsAccountNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierUSPSUpsertOne) UpdateNewValues() *CarrierUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierusps.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierUSPS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierUSPSUpsertOne) Ignore() *CarrierUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierUSPSUpsertOne) DoNothing() *CarrierUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierUSPSCreate.OnConflict
// documentation for more info.
func (u *CarrierUSPSUpsertOne) Update(set func(*CarrierUSPSUpsert)) *CarrierUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierUSPSUpsertOne) SetTenantID(v pulid.ID) *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierUSPSUpsertOne) UpdateTenantID() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateTenantID()
	})
}

// SetIsTestAPI sets the "is_test_api" field.
func (u *CarrierUSPSUpsertOne) SetIsTestAPI(v bool) *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetIsTestAPI(v)
	})
}

// UpdateIsTestAPI sets the "is_test_api" field to the value that was provided on create.
func (u *CarrierUSPSUpsertOne) UpdateIsTestAPI() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateIsTestAPI()
	})
}

// SetConsumerKey sets the "consumer_key" field.
func (u *CarrierUSPSUpsertOne) SetConsumerKey(v string) *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetConsumerKey(v)
	})
}

// UpdateConsumerKey sets the "consumer_key" field to the value that was provided on create.
func (u *CarrierUSPSUpsertOne) UpdateConsumerKey() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateConsumerKey()
	})
}

// ClearConsumerKey clears the value of the "consumer_key" field.
func (u *CarrierUSPSUpsertOne) ClearConsumerKey() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearConsumerKey()
	})
}

// SetConsumerSecret sets the "consumer_secret" field.
func (u *CarrierUSPSUpsertOne) SetConsumerSecret(v string) *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetConsumerSecret(v)
	})
}

// UpdateConsumerSecret sets the "consumer_secret" field to the value that was provided on create.
func (u *CarrierUSPSUpsertOne) UpdateConsumerSecret() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateConsumerSecret()
	})
}

// ClearConsumerSecret clears the value of the "consumer_secret" field.
func (u *CarrierUSPSUpsertOne) ClearConsumerSecret() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearConsumerSecret()
	})
}

// SetMid sets the "mid" field.
func (u *CarrierUSPSUpsertOne) SetMid(v string) *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetMid(v)
	})
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *CarrierUSPSUpsertOne) UpdateMid() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateMid()
	})
}

// ClearMid clears the value of the "mid" field.
func (u *CarrierUSPSUpsertOne) ClearMid() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearMid()
	})
}

// SetManifestMid sets the "manifest_mid" field.
func (u *CarrierUSPSUpsertOne) SetManifestMid(v string) *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetManifestMid(v)
	})
}

// UpdateManifestMid sets the "manifest_mid" field to the value that was provided on create.
func (u *CarrierUSPSUpsertOne) UpdateManifestMid() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateManifestMid()
	})
}

// ClearManifestMid clears the value of the "manifest_mid" field.
func (u *CarrierUSPSUpsertOne) ClearManifestMid() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearManifestMid()
	})
}

// SetCrid sets the "crid" field.
func (u *CarrierUSPSUpsertOne) SetCrid(v string) *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetCrid(v)
	})
}

// UpdateCrid sets the "crid" field to the value that was provided on create.
func (u *CarrierUSPSUpsertOne) UpdateCrid() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateCrid()
	})
}

// ClearCrid clears the value of the "crid" field.
func (u *CarrierUSPSUpsertOne) ClearCrid() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearCrid()
	})
}

// SetEpsAccountNumber sets the "eps_account_number" field.
func (u *CarrierUSPSUpsertOne) SetEpsAccountNumber(v string) *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetEpsAccountNumber(v)
	})
}

// UpdateEpsAccountNumber sets the "eps_account_number" field to the value that was provided on create.
func (u *CarrierUSPSUpsertOne) UpdateEpsAccountNumber() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateEpsAccountNumber()
	})
}

// ClearEpsAccountNumber clears the value of the "eps_account_number" field.
func (u *CarrierUSPSUpsertOne) ClearEpsAccountNumber() *CarrierUSPSUpsertOne {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearEpsAccountNumber()
	})
}

// Exec executes the query.
func (u *CarrierUSPSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierUSPSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierUSPSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierUSPSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierUSPSUpsertOne.ID is not supported by MySQL driver. Use CarrierUSPSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierUSPSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierUSPSCreateBulk is the builder for creating many CarrierUSPS entities in bulk.
type CarrierUSPSCreateBulk struct {
	config
	err      error
	builders []*CarrierUSPSCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierUSPS entities in the database.
func (cucb *CarrierUSPSCreateBulk) Save(ctx context.Context) ([]*CarrierUSPS, error) {
	if cucb.err != nil {
		return nil, cucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cucb.builders))
	nodes := make([]*CarrierUSPS, len(cucb.builders))
	mutators := make([]Mutator, len(cucb.builders))
	for i := range cucb.builders {
		func(i int, root context.Context) {
			builder := cucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierUSPSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cucb *CarrierUSPSCreateBulk) SaveX(ctx context.Context) []*CarrierUSPS {
	v, err := cucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cucb *CarrierUSPSCreateBulk) Exec(ctx context.Context) error {
	_, err := cucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cucb *CarrierUSPSCreateBulk) ExecX(ctx context.Context) {
	if err := cucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierUSPS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierUSPSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cucb *CarrierUSPSCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierUSPSUpsertBulk {
	cucb.conflict = opts
	return &CarrierUSPSUpsertBulk{
		create: cucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cucb *CarrierUSPSCreateBulk) OnConflictColumns(columns ...string) *CarrierUSPSUpsertBulk {
	cucb.conflict = append(cucb.conflict, sql.ConflictColumns(columns...))
	return &CarrierUSPSUpsertBulk{
		create: cucb,
	}
}

// CarrierUSPSUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierUSPS nodes.
type CarrierUSPSUpsertBulk struct {
	create *CarrierUSPSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierUSPSUpsertBulk) UpdateNewValues() *CarrierUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierusps.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierUSPS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierUSPSUpsertBulk) Ignore() *CarrierUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierUSPSUpsertBulk) DoNothing() *CarrierUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierUSPSCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierUSPSUpsertBulk) Update(set func(*CarrierUSPSUpsert)) *CarrierUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierUSPSUpsertBulk) SetTenantID(v pulid.ID) *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierUSPSUpsertBulk) UpdateTenantID() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateTenantID()
	})
}

// SetIsTestAPI sets the "is_test_api" field.
func (u *CarrierUSPSUpsertBulk) SetIsTestAPI(v bool) *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetIsTestAPI(v)
	})
}

// UpdateIsTestAPI sets the "is_test_api" field to the value that was provided on create.
func (u *CarrierUSPSUpsertBulk) UpdateIsTestAPI() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateIsTestAPI()
	})
}

// SetConsumerKey sets the "consumer_key" field.
func (u *CarrierUSPSUpsertBulk) SetConsumerKey(v string) *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetConsumerKey(v)
	})
}

// UpdateConsumerKey sets the "consumer_key" field to the value that was provided on create.
func (u *CarrierUSPSUpsertBulk) UpdateConsumerKey() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateConsumerKey()
	})
}

// ClearConsumerKey clears the value of the "consumer_key" field.
func (u *CarrierUSPSUpsertBulk) ClearConsumerKey() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearConsumerKey()
	})
}

// SetConsumerSecret sets the "consumer_secret" field.
func (u *CarrierUSPSUpsertBulk) SetConsumerSecret(v string) *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetConsumerSecret(v)
	})
}

// UpdateConsumerSecret sets the "consumer_secret" field to the value that was provided on create.
func (u *CarrierUSPSUpsertBulk) UpdateConsumerSecret() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateConsumerSecret()
	})
}

// ClearConsumerSecret clears the value of the "consumer_secret" field.
func (u *CarrierUSPSUpsertBulk) ClearConsumerSecret() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearConsumerSecret()
	})
}

// SetMid sets the "mid" field.
func (u *CarrierUSPSUpsertBulk) SetMid(v string) *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetMid(v)
	})
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *CarrierUSPSUpsertBulk) UpdateMid() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateMid()
	})
}

// ClearMid clears the value of the "mid" field.
func (u *CarrierUSPSUpsertBulk) ClearMid() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearMid()
	})
}

// SetManifestMid sets the "manifest_mid" field.
func (u *CarrierUSPSUpsertBulk) SetManifestMid(v string) *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetManifestMid(v)
	})
}

// UpdateManifestMid sets the "manifest_mid" field to the value that was provided on create.
func (u *CarrierUSPSUpsertBulk) UpdateManifestMid() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateManifestMid()
	})
}

// ClearManifestMid clears the value of the "manifest_mid" field.
func (u *CarrierUSPSUpsertBulk) ClearManifestMid() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearManifestMid()
	})
}

// SetCrid sets the "crid" field.
func (u *CarrierUSPSUpsertBulk) SetCrid(v string) *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetCrid(v)
	})
}

// UpdateCrid sets the "crid" field to the value that was provided on create.
func (u *CarrierUSPSUpsertBulk) UpdateCrid() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateCrid()
	})
}

// ClearCrid clears the value of the "crid" field.
func (u *CarrierUSPSUpsertBulk) ClearCrid() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearCrid()
	})
}

// SetEpsAccountNumber sets the "eps_account_number" field.
func (u *CarrierUSPSUpsertBulk) SetEpsAccountNumber(v string) *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.SetEpsAccountNumber(v)
	})
}

// UpdateEpsAccountNumber sets the "eps_account_number" field to the value that was provided on create.
func (u *CarrierUSPSUpsertBulk) UpdateEpsAccountNumber() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.UpdateEpsAccountNumber()
	})
}

// ClearEpsAccountNumber clears the value of the "eps_account_number" field.
func (u *CarrierUSPSUpsertBulk) ClearEpsAccountNumber() *CarrierUSPSUpsertBulk {
	return u.Update(func(s *CarrierUSPSUpsert) {
		s.ClearEpsAccountNumber()
	})
}

// Exec executes the query.
func (u *CarrierUSPSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierUSPSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierUSPSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierUSPSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
