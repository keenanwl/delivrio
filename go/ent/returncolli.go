// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReturnColli is the model entity for the ReturnColli schema.
type ReturnColli struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ExpectedAt holds the value of the "expected_at" field.
	ExpectedAt *time.Time `json:"expected_at,omitempty"`
	// LabelPdf holds the value of the "label_pdf" field.
	LabelPdf string `json:"label_pdf,omitempty"`
	// LabelPng holds the value of the "label_png" field.
	LabelPng string `json:"label_png,omitempty"`
	// QrCodePng holds the value of the "qr_code_png" field.
	QrCodePng string `json:"qr_code_png,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Status holds the value of the "status" field.
	Status returncolli.Status `json:"status,omitempty"`
	// Timestamp of email successfully sent after status changed to received
	EmailReceived *time.Time `json:"email_received,omitempty"`
	// Timestamp of email successfully sent after status changed to accepted
	EmailAccepted *time.Time `json:"email_accepted,omitempty"`
	// Timestamp of email successfully sent after status changed to pending
	EmailConfirmationLabel *time.Time `json:"email_confirmation_label,omitempty"`
	// Timestamp of email successfully sent after status changed to pending
	EmailConfirmationQrCode *time.Time `json:"email_confirmation_qr_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReturnColliQuery when eager-loading is set.
	Edges                        ReturnColliEdges `json:"edges"`
	order_return_colli           *pulid.ID
	return_colli_recipient       *pulid.ID
	return_colli_sender          *pulid.ID
	return_colli_delivery_option *pulid.ID
	return_colli_return_portal   *pulid.ID
	return_colli_packaging       *pulid.ID
	selectValues                 sql.SelectValues
}

// ReturnColliEdges holds the relations/edges for other nodes in the graph.
type ReturnColliEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Recipient holds the value of the recipient edge.
	Recipient *Address `json:"recipient,omitempty"`
	// Sender holds the value of the sender edge.
	Sender *Address `json:"sender,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption *DeliveryOption `json:"delivery_option,omitempty"`
	// ReturnPortal holds the value of the return_portal edge.
	ReturnPortal *ReturnPortal `json:"return_portal,omitempty"`
	// Allows packaging to be predefined for this colli and will be used for the return shipment parcel
	Packaging *Packaging `json:"packaging,omitempty"`
	// ReturnOrderLine holds the value of the return_order_line edge.
	ReturnOrderLine []*ReturnOrderLine `json:"return_order_line,omitempty"`
	// ReturnColliHistory holds the value of the return_colli_history edge.
	ReturnColliHistory []*ReturnColliHistory `json:"return_colli_history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedReturnOrderLine    map[string][]*ReturnOrderLine
	namedReturnColliHistory map[string][]*ReturnColliHistory
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RecipientOrErr returns the Recipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliEdges) RecipientOrErr() (*Address, error) {
	if e.Recipient != nil {
		return e.Recipient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "recipient"}
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliEdges) SenderOrErr() (*Address, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliEdges) DeliveryOptionOrErr() (*DeliveryOption, error) {
	if e.DeliveryOption != nil {
		return e.DeliveryOption, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: deliveryoption.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// ReturnPortalOrErr returns the ReturnPortal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliEdges) ReturnPortalOrErr() (*ReturnPortal, error) {
	if e.ReturnPortal != nil {
		return e.ReturnPortal, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: returnportal.Label}
	}
	return nil, &NotLoadedError{edge: "return_portal"}
}

// PackagingOrErr returns the Packaging value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliEdges) PackagingOrErr() (*Packaging, error) {
	if e.Packaging != nil {
		return e.Packaging, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: packaging.Label}
	}
	return nil, &NotLoadedError{edge: "packaging"}
}

// ReturnOrderLineOrErr returns the ReturnOrderLine value or an error if the edge
// was not loaded in eager-loading.
func (e ReturnColliEdges) ReturnOrderLineOrErr() ([]*ReturnOrderLine, error) {
	if e.loadedTypes[7] {
		return e.ReturnOrderLine, nil
	}
	return nil, &NotLoadedError{edge: "return_order_line"}
}

// ReturnColliHistoryOrErr returns the ReturnColliHistory value or an error if the edge
// was not loaded in eager-loading.
func (e ReturnColliEdges) ReturnColliHistoryOrErr() ([]*ReturnColliHistory, error) {
	if e.loadedTypes[8] {
		return e.ReturnColliHistory, nil
	}
	return nil, &NotLoadedError{edge: "return_colli_history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReturnColli) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case returncolli.FieldID, returncolli.FieldTenantID:
			values[i] = new(pulid.ID)
		case returncolli.FieldLabelPdf, returncolli.FieldLabelPng, returncolli.FieldQrCodePng, returncolli.FieldComment, returncolli.FieldStatus:
			values[i] = new(sql.NullString)
		case returncolli.FieldExpectedAt, returncolli.FieldCreatedAt, returncolli.FieldEmailReceived, returncolli.FieldEmailAccepted, returncolli.FieldEmailConfirmationLabel, returncolli.FieldEmailConfirmationQrCode:
			values[i] = new(sql.NullTime)
		case returncolli.ForeignKeys[0]: // order_return_colli
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returncolli.ForeignKeys[1]: // return_colli_recipient
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returncolli.ForeignKeys[2]: // return_colli_sender
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returncolli.ForeignKeys[3]: // return_colli_delivery_option
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returncolli.ForeignKeys[4]: // return_colli_return_portal
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returncolli.ForeignKeys[5]: // return_colli_packaging
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReturnColli fields.
func (rc *ReturnColli) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case returncolli.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rc.ID = *value
			}
		case returncolli.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				rc.TenantID = *value
			}
		case returncolli.FieldExpectedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expected_at", values[i])
			} else if value.Valid {
				rc.ExpectedAt = new(time.Time)
				*rc.ExpectedAt = value.Time
			}
		case returncolli.FieldLabelPdf:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_pdf", values[i])
			} else if value.Valid {
				rc.LabelPdf = value.String
			}
		case returncolli.FieldLabelPng:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_png", values[i])
			} else if value.Valid {
				rc.LabelPng = value.String
			}
		case returncolli.FieldQrCodePng:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qr_code_png", values[i])
			} else if value.Valid {
				rc.QrCodePng = value.String
			}
		case returncolli.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				rc.Comment = value.String
			}
		case returncolli.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rc.CreatedAt = value.Time
			}
		case returncolli.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rc.Status = returncolli.Status(value.String)
			}
		case returncolli.FieldEmailReceived:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field email_received", values[i])
			} else if value.Valid {
				rc.EmailReceived = new(time.Time)
				*rc.EmailReceived = value.Time
			}
		case returncolli.FieldEmailAccepted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field email_accepted", values[i])
			} else if value.Valid {
				rc.EmailAccepted = new(time.Time)
				*rc.EmailAccepted = value.Time
			}
		case returncolli.FieldEmailConfirmationLabel:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field email_confirmation_label", values[i])
			} else if value.Valid {
				rc.EmailConfirmationLabel = new(time.Time)
				*rc.EmailConfirmationLabel = value.Time
			}
		case returncolli.FieldEmailConfirmationQrCode:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field email_confirmation_qr_code", values[i])
			} else if value.Valid {
				rc.EmailConfirmationQrCode = new(time.Time)
				*rc.EmailConfirmationQrCode = value.Time
			}
		case returncolli.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field order_return_colli", values[i])
			} else if value.Valid {
				rc.order_return_colli = new(pulid.ID)
				*rc.order_return_colli = *value.S.(*pulid.ID)
			}
		case returncolli.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_colli_recipient", values[i])
			} else if value.Valid {
				rc.return_colli_recipient = new(pulid.ID)
				*rc.return_colli_recipient = *value.S.(*pulid.ID)
			}
		case returncolli.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_colli_sender", values[i])
			} else if value.Valid {
				rc.return_colli_sender = new(pulid.ID)
				*rc.return_colli_sender = *value.S.(*pulid.ID)
			}
		case returncolli.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_colli_delivery_option", values[i])
			} else if value.Valid {
				rc.return_colli_delivery_option = new(pulid.ID)
				*rc.return_colli_delivery_option = *value.S.(*pulid.ID)
			}
		case returncolli.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_colli_return_portal", values[i])
			} else if value.Valid {
				rc.return_colli_return_portal = new(pulid.ID)
				*rc.return_colli_return_portal = *value.S.(*pulid.ID)
			}
		case returncolli.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_colli_packaging", values[i])
			} else if value.Valid {
				rc.return_colli_packaging = new(pulid.ID)
				*rc.return_colli_packaging = *value.S.(*pulid.ID)
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReturnColli.
// This includes values selected through modifiers, order, etc.
func (rc *ReturnColli) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ReturnColli entity.
func (rc *ReturnColli) QueryTenant() *TenantQuery {
	return NewReturnColliClient(rc.config).QueryTenant(rc)
}

// QueryRecipient queries the "recipient" edge of the ReturnColli entity.
func (rc *ReturnColli) QueryRecipient() *AddressQuery {
	return NewReturnColliClient(rc.config).QueryRecipient(rc)
}

// QuerySender queries the "sender" edge of the ReturnColli entity.
func (rc *ReturnColli) QuerySender() *AddressQuery {
	return NewReturnColliClient(rc.config).QuerySender(rc)
}

// QueryOrder queries the "order" edge of the ReturnColli entity.
func (rc *ReturnColli) QueryOrder() *OrderQuery {
	return NewReturnColliClient(rc.config).QueryOrder(rc)
}

// QueryDeliveryOption queries the "delivery_option" edge of the ReturnColli entity.
func (rc *ReturnColli) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewReturnColliClient(rc.config).QueryDeliveryOption(rc)
}

// QueryReturnPortal queries the "return_portal" edge of the ReturnColli entity.
func (rc *ReturnColli) QueryReturnPortal() *ReturnPortalQuery {
	return NewReturnColliClient(rc.config).QueryReturnPortal(rc)
}

// QueryPackaging queries the "packaging" edge of the ReturnColli entity.
func (rc *ReturnColli) QueryPackaging() *PackagingQuery {
	return NewReturnColliClient(rc.config).QueryPackaging(rc)
}

// QueryReturnOrderLine queries the "return_order_line" edge of the ReturnColli entity.
func (rc *ReturnColli) QueryReturnOrderLine() *ReturnOrderLineQuery {
	return NewReturnColliClient(rc.config).QueryReturnOrderLine(rc)
}

// QueryReturnColliHistory queries the "return_colli_history" edge of the ReturnColli entity.
func (rc *ReturnColli) QueryReturnColliHistory() *ReturnColliHistoryQuery {
	return NewReturnColliClient(rc.config).QueryReturnColliHistory(rc)
}

// Update returns a builder for updating this ReturnColli.
// Note that you need to call ReturnColli.Unwrap() before calling this method if this ReturnColli
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *ReturnColli) Update() *ReturnColliUpdateOne {
	return NewReturnColliClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the ReturnColli entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *ReturnColli) Unwrap() *ReturnColli {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReturnColli is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *ReturnColli) String() string {
	var builder strings.Builder
	builder.WriteString("ReturnColli(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", rc.TenantID))
	builder.WriteString(", ")
	if v := rc.ExpectedAt; v != nil {
		builder.WriteString("expected_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("label_pdf=")
	builder.WriteString(rc.LabelPdf)
	builder.WriteString(", ")
	builder.WriteString("label_png=")
	builder.WriteString(rc.LabelPng)
	builder.WriteString(", ")
	builder.WriteString("qr_code_png=")
	builder.WriteString(rc.QrCodePng)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(rc.Comment)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rc.Status))
	builder.WriteString(", ")
	if v := rc.EmailReceived; v != nil {
		builder.WriteString("email_received=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := rc.EmailAccepted; v != nil {
		builder.WriteString("email_accepted=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := rc.EmailConfirmationLabel; v != nil {
		builder.WriteString("email_confirmation_label=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := rc.EmailConfirmationQrCode; v != nil {
		builder.WriteString("email_confirmation_qr_code=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedReturnOrderLine returns the ReturnOrderLine named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rc *ReturnColli) NamedReturnOrderLine(name string) ([]*ReturnOrderLine, error) {
	if rc.Edges.namedReturnOrderLine == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rc.Edges.namedReturnOrderLine[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rc *ReturnColli) appendNamedReturnOrderLine(name string, edges ...*ReturnOrderLine) {
	if rc.Edges.namedReturnOrderLine == nil {
		rc.Edges.namedReturnOrderLine = make(map[string][]*ReturnOrderLine)
	}
	if len(edges) == 0 {
		rc.Edges.namedReturnOrderLine[name] = []*ReturnOrderLine{}
	} else {
		rc.Edges.namedReturnOrderLine[name] = append(rc.Edges.namedReturnOrderLine[name], edges...)
	}
}

// NamedReturnColliHistory returns the ReturnColliHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rc *ReturnColli) NamedReturnColliHistory(name string) ([]*ReturnColliHistory, error) {
	if rc.Edges.namedReturnColliHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rc.Edges.namedReturnColliHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rc *ReturnColli) appendNamedReturnColliHistory(name string, edges ...*ReturnColliHistory) {
	if rc.Edges.namedReturnColliHistory == nil {
		rc.Edges.namedReturnColliHistory = make(map[string][]*ReturnColliHistory)
	}
	if len(edges) == 0 {
		rc.Edges.namedReturnColliHistory[name] = []*ReturnColliHistory{}
	} else {
		rc.Edges.namedReturnColliHistory[name] = append(rc.Edges.namedReturnColliHistory[name], edges...)
	}
}

// ReturnCollis is a parsable slice of ReturnColli.
type ReturnCollis []*ReturnColli
