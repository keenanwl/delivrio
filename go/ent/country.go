// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/country"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Country is the model entity for the Country schema.
type Country struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Alpha2 holds the value of the "alpha_2" field.
	Alpha2 string `json:"alpha_2,omitempty"`
	// Alpha3 holds the value of the "alpha_3" field.
	Alpha3 string `json:"alpha_3,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Region holds the value of the "region" field.
	Region country.Region `json:"region,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CountryQuery when eager-loading is set.
	Edges        CountryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CountryEdges holds the relations/edges for other nodes in the graph.
type CountryEdges struct {
	// DeliveryRule holds the value of the delivery_rule edge.
	DeliveryRule []*DeliveryRule `json:"delivery_rule,omitempty"`
	// Address holds the value of the address edge.
	Address []*Address `json:"address,omitempty"`
	// AddressGlobal holds the value of the address_global edge.
	AddressGlobal []*AddressGlobal `json:"address_global,omitempty"`
	// CarrierAdditionalServicePostNordConsignee holds the value of the carrier_additional_service_post_nord_consignee edge.
	CarrierAdditionalServicePostNordConsignee []*CarrierAdditionalServicePostNord `json:"carrier_additional_service_post_nord_consignee,omitempty"`
	// CarrierAdditionalServicePostNordConsignor holds the value of the carrier_additional_service_post_nord_consignor edge.
	CarrierAdditionalServicePostNordConsignor []*CarrierAdditionalServicePostNord `json:"carrier_additional_service_post_nord_consignor,omitempty"`
	// CarrierAdditionalServiceGLSConsignee holds the value of the carrier_additional_service_gls_consignee edge.
	CarrierAdditionalServiceGLSConsignee []*CarrierAdditionalServiceGLS `json:"carrier_additional_service_gls_consignee,omitempty"`
	// CarrierAdditionalServiceGLSConsignor holds the value of the carrier_additional_service_gls_consignor edge.
	CarrierAdditionalServiceGLSConsignor []*CarrierAdditionalServiceGLS `json:"carrier_additional_service_gls_consignor,omitempty"`
	// CountryHarmonizedCode holds the value of the country_harmonized_code edge.
	CountryHarmonizedCode []*CountryHarmonizedCode `json:"country_harmonized_code,omitempty"`
	// InventoryItem holds the value of the inventory_item edge.
	InventoryItem []*InventoryItem `json:"inventory_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedDeliveryRule                              map[string][]*DeliveryRule
	namedAddress                                   map[string][]*Address
	namedAddressGlobal                             map[string][]*AddressGlobal
	namedCarrierAdditionalServicePostNordConsignee map[string][]*CarrierAdditionalServicePostNord
	namedCarrierAdditionalServicePostNordConsignor map[string][]*CarrierAdditionalServicePostNord
	namedCarrierAdditionalServiceGLSConsignee      map[string][]*CarrierAdditionalServiceGLS
	namedCarrierAdditionalServiceGLSConsignor      map[string][]*CarrierAdditionalServiceGLS
	namedCountryHarmonizedCode                     map[string][]*CountryHarmonizedCode
	namedInventoryItem                             map[string][]*InventoryItem
}

// DeliveryRuleOrErr returns the DeliveryRule value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) DeliveryRuleOrErr() ([]*DeliveryRule, error) {
	if e.loadedTypes[0] {
		return e.DeliveryRule, nil
	}
	return nil, &NotLoadedError{edge: "delivery_rule"}
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) AddressOrErr() ([]*Address, error) {
	if e.loadedTypes[1] {
		return e.Address, nil
	}
	return nil, &NotLoadedError{edge: "address"}
}

// AddressGlobalOrErr returns the AddressGlobal value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) AddressGlobalOrErr() ([]*AddressGlobal, error) {
	if e.loadedTypes[2] {
		return e.AddressGlobal, nil
	}
	return nil, &NotLoadedError{edge: "address_global"}
}

// CarrierAdditionalServicePostNordConsigneeOrErr returns the CarrierAdditionalServicePostNordConsignee value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) CarrierAdditionalServicePostNordConsigneeOrErr() ([]*CarrierAdditionalServicePostNord, error) {
	if e.loadedTypes[3] {
		return e.CarrierAdditionalServicePostNordConsignee, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_post_nord_consignee"}
}

// CarrierAdditionalServicePostNordConsignorOrErr returns the CarrierAdditionalServicePostNordConsignor value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) CarrierAdditionalServicePostNordConsignorOrErr() ([]*CarrierAdditionalServicePostNord, error) {
	if e.loadedTypes[4] {
		return e.CarrierAdditionalServicePostNordConsignor, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_post_nord_consignor"}
}

// CarrierAdditionalServiceGLSConsigneeOrErr returns the CarrierAdditionalServiceGLSConsignee value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) CarrierAdditionalServiceGLSConsigneeOrErr() ([]*CarrierAdditionalServiceGLS, error) {
	if e.loadedTypes[5] {
		return e.CarrierAdditionalServiceGLSConsignee, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_gls_consignee"}
}

// CarrierAdditionalServiceGLSConsignorOrErr returns the CarrierAdditionalServiceGLSConsignor value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) CarrierAdditionalServiceGLSConsignorOrErr() ([]*CarrierAdditionalServiceGLS, error) {
	if e.loadedTypes[6] {
		return e.CarrierAdditionalServiceGLSConsignor, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_gls_consignor"}
}

// CountryHarmonizedCodeOrErr returns the CountryHarmonizedCode value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) CountryHarmonizedCodeOrErr() ([]*CountryHarmonizedCode, error) {
	if e.loadedTypes[7] {
		return e.CountryHarmonizedCode, nil
	}
	return nil, &NotLoadedError{edge: "country_harmonized_code"}
}

// InventoryItemOrErr returns the InventoryItem value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) InventoryItemOrErr() ([]*InventoryItem, error) {
	if e.loadedTypes[8] {
		return e.InventoryItem, nil
	}
	return nil, &NotLoadedError{edge: "inventory_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Country) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case country.FieldID:
			values[i] = new(pulid.ID)
		case country.FieldLabel, country.FieldAlpha2, country.FieldAlpha3, country.FieldCode, country.FieldRegion:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Country fields.
func (c *Country) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case country.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case country.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				c.Label = value.String
			}
		case country.FieldAlpha2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alpha_2", values[i])
			} else if value.Valid {
				c.Alpha2 = value.String
			}
		case country.FieldAlpha3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alpha_3", values[i])
			} else if value.Valid {
				c.Alpha3 = value.String
			}
		case country.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case country.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				c.Region = country.Region(value.String)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Country.
// This includes values selected through modifiers, order, etc.
func (c *Country) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryDeliveryRule queries the "delivery_rule" edge of the Country entity.
func (c *Country) QueryDeliveryRule() *DeliveryRuleQuery {
	return NewCountryClient(c.config).QueryDeliveryRule(c)
}

// QueryAddress queries the "address" edge of the Country entity.
func (c *Country) QueryAddress() *AddressQuery {
	return NewCountryClient(c.config).QueryAddress(c)
}

// QueryAddressGlobal queries the "address_global" edge of the Country entity.
func (c *Country) QueryAddressGlobal() *AddressGlobalQuery {
	return NewCountryClient(c.config).QueryAddressGlobal(c)
}

// QueryCarrierAdditionalServicePostNordConsignee queries the "carrier_additional_service_post_nord_consignee" edge of the Country entity.
func (c *Country) QueryCarrierAdditionalServicePostNordConsignee() *CarrierAdditionalServicePostNordQuery {
	return NewCountryClient(c.config).QueryCarrierAdditionalServicePostNordConsignee(c)
}

// QueryCarrierAdditionalServicePostNordConsignor queries the "carrier_additional_service_post_nord_consignor" edge of the Country entity.
func (c *Country) QueryCarrierAdditionalServicePostNordConsignor() *CarrierAdditionalServicePostNordQuery {
	return NewCountryClient(c.config).QueryCarrierAdditionalServicePostNordConsignor(c)
}

// QueryCarrierAdditionalServiceGLSConsignee queries the "carrier_additional_service_gls_consignee" edge of the Country entity.
func (c *Country) QueryCarrierAdditionalServiceGLSConsignee() *CarrierAdditionalServiceGLSQuery {
	return NewCountryClient(c.config).QueryCarrierAdditionalServiceGLSConsignee(c)
}

// QueryCarrierAdditionalServiceGLSConsignor queries the "carrier_additional_service_gls_consignor" edge of the Country entity.
func (c *Country) QueryCarrierAdditionalServiceGLSConsignor() *CarrierAdditionalServiceGLSQuery {
	return NewCountryClient(c.config).QueryCarrierAdditionalServiceGLSConsignor(c)
}

// QueryCountryHarmonizedCode queries the "country_harmonized_code" edge of the Country entity.
func (c *Country) QueryCountryHarmonizedCode() *CountryHarmonizedCodeQuery {
	return NewCountryClient(c.config).QueryCountryHarmonizedCode(c)
}

// QueryInventoryItem queries the "inventory_item" edge of the Country entity.
func (c *Country) QueryInventoryItem() *InventoryItemQuery {
	return NewCountryClient(c.config).QueryInventoryItem(c)
}

// Update returns a builder for updating this Country.
// Note that you need to call Country.Unwrap() before calling this method if this Country
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Country) Update() *CountryUpdateOne {
	return NewCountryClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Country entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Country) Unwrap() *Country {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Country is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Country) String() string {
	var builder strings.Builder
	builder.WriteString("Country(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("label=")
	builder.WriteString(c.Label)
	builder.WriteString(", ")
	builder.WriteString("alpha_2=")
	builder.WriteString(c.Alpha2)
	builder.WriteString(", ")
	builder.WriteString("alpha_3=")
	builder.WriteString(c.Alpha3)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(c.Code)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(fmt.Sprintf("%v", c.Region))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryRule returns the DeliveryRule named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedDeliveryRule(name string) ([]*DeliveryRule, error) {
	if c.Edges.namedDeliveryRule == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDeliveryRule[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedDeliveryRule(name string, edges ...*DeliveryRule) {
	if c.Edges.namedDeliveryRule == nil {
		c.Edges.namedDeliveryRule = make(map[string][]*DeliveryRule)
	}
	if len(edges) == 0 {
		c.Edges.namedDeliveryRule[name] = []*DeliveryRule{}
	} else {
		c.Edges.namedDeliveryRule[name] = append(c.Edges.namedDeliveryRule[name], edges...)
	}
}

// NamedAddress returns the Address named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedAddress(name string) ([]*Address, error) {
	if c.Edges.namedAddress == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedAddress[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedAddress(name string, edges ...*Address) {
	if c.Edges.namedAddress == nil {
		c.Edges.namedAddress = make(map[string][]*Address)
	}
	if len(edges) == 0 {
		c.Edges.namedAddress[name] = []*Address{}
	} else {
		c.Edges.namedAddress[name] = append(c.Edges.namedAddress[name], edges...)
	}
}

// NamedAddressGlobal returns the AddressGlobal named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedAddressGlobal(name string) ([]*AddressGlobal, error) {
	if c.Edges.namedAddressGlobal == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedAddressGlobal[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedAddressGlobal(name string, edges ...*AddressGlobal) {
	if c.Edges.namedAddressGlobal == nil {
		c.Edges.namedAddressGlobal = make(map[string][]*AddressGlobal)
	}
	if len(edges) == 0 {
		c.Edges.namedAddressGlobal[name] = []*AddressGlobal{}
	} else {
		c.Edges.namedAddressGlobal[name] = append(c.Edges.namedAddressGlobal[name], edges...)
	}
}

// NamedCarrierAdditionalServicePostNordConsignee returns the CarrierAdditionalServicePostNordConsignee named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedCarrierAdditionalServicePostNordConsignee(name string) ([]*CarrierAdditionalServicePostNord, error) {
	if c.Edges.namedCarrierAdditionalServicePostNordConsignee == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCarrierAdditionalServicePostNordConsignee[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedCarrierAdditionalServicePostNordConsignee(name string, edges ...*CarrierAdditionalServicePostNord) {
	if c.Edges.namedCarrierAdditionalServicePostNordConsignee == nil {
		c.Edges.namedCarrierAdditionalServicePostNordConsignee = make(map[string][]*CarrierAdditionalServicePostNord)
	}
	if len(edges) == 0 {
		c.Edges.namedCarrierAdditionalServicePostNordConsignee[name] = []*CarrierAdditionalServicePostNord{}
	} else {
		c.Edges.namedCarrierAdditionalServicePostNordConsignee[name] = append(c.Edges.namedCarrierAdditionalServicePostNordConsignee[name], edges...)
	}
}

// NamedCarrierAdditionalServicePostNordConsignor returns the CarrierAdditionalServicePostNordConsignor named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedCarrierAdditionalServicePostNordConsignor(name string) ([]*CarrierAdditionalServicePostNord, error) {
	if c.Edges.namedCarrierAdditionalServicePostNordConsignor == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCarrierAdditionalServicePostNordConsignor[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedCarrierAdditionalServicePostNordConsignor(name string, edges ...*CarrierAdditionalServicePostNord) {
	if c.Edges.namedCarrierAdditionalServicePostNordConsignor == nil {
		c.Edges.namedCarrierAdditionalServicePostNordConsignor = make(map[string][]*CarrierAdditionalServicePostNord)
	}
	if len(edges) == 0 {
		c.Edges.namedCarrierAdditionalServicePostNordConsignor[name] = []*CarrierAdditionalServicePostNord{}
	} else {
		c.Edges.namedCarrierAdditionalServicePostNordConsignor[name] = append(c.Edges.namedCarrierAdditionalServicePostNordConsignor[name], edges...)
	}
}

// NamedCarrierAdditionalServiceGLSConsignee returns the CarrierAdditionalServiceGLSConsignee named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedCarrierAdditionalServiceGLSConsignee(name string) ([]*CarrierAdditionalServiceGLS, error) {
	if c.Edges.namedCarrierAdditionalServiceGLSConsignee == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCarrierAdditionalServiceGLSConsignee[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedCarrierAdditionalServiceGLSConsignee(name string, edges ...*CarrierAdditionalServiceGLS) {
	if c.Edges.namedCarrierAdditionalServiceGLSConsignee == nil {
		c.Edges.namedCarrierAdditionalServiceGLSConsignee = make(map[string][]*CarrierAdditionalServiceGLS)
	}
	if len(edges) == 0 {
		c.Edges.namedCarrierAdditionalServiceGLSConsignee[name] = []*CarrierAdditionalServiceGLS{}
	} else {
		c.Edges.namedCarrierAdditionalServiceGLSConsignee[name] = append(c.Edges.namedCarrierAdditionalServiceGLSConsignee[name], edges...)
	}
}

// NamedCarrierAdditionalServiceGLSConsignor returns the CarrierAdditionalServiceGLSConsignor named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedCarrierAdditionalServiceGLSConsignor(name string) ([]*CarrierAdditionalServiceGLS, error) {
	if c.Edges.namedCarrierAdditionalServiceGLSConsignor == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCarrierAdditionalServiceGLSConsignor[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedCarrierAdditionalServiceGLSConsignor(name string, edges ...*CarrierAdditionalServiceGLS) {
	if c.Edges.namedCarrierAdditionalServiceGLSConsignor == nil {
		c.Edges.namedCarrierAdditionalServiceGLSConsignor = make(map[string][]*CarrierAdditionalServiceGLS)
	}
	if len(edges) == 0 {
		c.Edges.namedCarrierAdditionalServiceGLSConsignor[name] = []*CarrierAdditionalServiceGLS{}
	} else {
		c.Edges.namedCarrierAdditionalServiceGLSConsignor[name] = append(c.Edges.namedCarrierAdditionalServiceGLSConsignor[name], edges...)
	}
}

// NamedCountryHarmonizedCode returns the CountryHarmonizedCode named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedCountryHarmonizedCode(name string) ([]*CountryHarmonizedCode, error) {
	if c.Edges.namedCountryHarmonizedCode == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCountryHarmonizedCode[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedCountryHarmonizedCode(name string, edges ...*CountryHarmonizedCode) {
	if c.Edges.namedCountryHarmonizedCode == nil {
		c.Edges.namedCountryHarmonizedCode = make(map[string][]*CountryHarmonizedCode)
	}
	if len(edges) == 0 {
		c.Edges.namedCountryHarmonizedCode[name] = []*CountryHarmonizedCode{}
	} else {
		c.Edges.namedCountryHarmonizedCode[name] = append(c.Edges.namedCountryHarmonizedCode[name], edges...)
	}
}

// NamedInventoryItem returns the InventoryItem named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedInventoryItem(name string) ([]*InventoryItem, error) {
	if c.Edges.namedInventoryItem == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedInventoryItem[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedInventoryItem(name string, edges ...*InventoryItem) {
	if c.Edges.namedInventoryItem == nil {
		c.Edges.namedInventoryItem = make(map[string][]*InventoryItem)
	}
	if len(edges) == 0 {
		c.Edges.namedInventoryItem[name] = []*InventoryItem{}
	} else {
		c.Edges.namedInventoryItem[name] = append(c.Edges.namedInventoryItem[name], edges...)
	}
}

// Countries is a parsable slice of Country.
type Countries []*Country
