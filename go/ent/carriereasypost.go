// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierEasyPost is the model entity for the CarrierEasyPost schema.
type CarrierEasyPost struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// Test holds the value of the "test" field.
	Test bool `json:"test,omitempty"`
	// When > 1, then we use rate, then buy. =1 one-call buy. Former not implemented in first round.
	CarrierAccounts []string `json:"carrier_accounts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierEasyPostQuery when eager-loading is set.
	Edges                     CarrierEasyPostEdges `json:"edges"`
	carrier_carrier_easy_post *pulid.ID
	selectValues              sql.SelectValues
}

// CarrierEasyPostEdges holds the relations/edges for other nodes in the graph.
type CarrierEasyPostEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Carrier holds the value of the carrier edge.
	Carrier *Carrier `json:"carrier,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEasyPostEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarrierOrErr returns the Carrier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEasyPostEdges) CarrierOrErr() (*Carrier, error) {
	if e.Carrier != nil {
		return e.Carrier, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrier.Label}
	}
	return nil, &NotLoadedError{edge: "carrier"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierEasyPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carriereasypost.FieldCarrierAccounts:
			values[i] = new([]byte)
		case carriereasypost.FieldID, carriereasypost.FieldTenantID:
			values[i] = new(pulid.ID)
		case carriereasypost.FieldTest:
			values[i] = new(sql.NullBool)
		case carriereasypost.FieldAPIKey:
			values[i] = new(sql.NullString)
		case carriereasypost.ForeignKeys[0]: // carrier_carrier_easy_post
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierEasyPost fields.
func (cep *CarrierEasyPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carriereasypost.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cep.ID = *value
			}
		case carriereasypost.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				cep.TenantID = *value
			}
		case carriereasypost.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				cep.APIKey = value.String
			}
		case carriereasypost.FieldTest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field test", values[i])
			} else if value.Valid {
				cep.Test = value.Bool
			}
		case carriereasypost.FieldCarrierAccounts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_accounts", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cep.CarrierAccounts); err != nil {
					return fmt.Errorf("unmarshal field carrier_accounts: %w", err)
				}
			}
		case carriereasypost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_carrier_easy_post", values[i])
			} else if value.Valid {
				cep.carrier_carrier_easy_post = new(pulid.ID)
				*cep.carrier_carrier_easy_post = *value.S.(*pulid.ID)
			}
		default:
			cep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierEasyPost.
// This includes values selected through modifiers, order, etc.
func (cep *CarrierEasyPost) Value(name string) (ent.Value, error) {
	return cep.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the CarrierEasyPost entity.
func (cep *CarrierEasyPost) QueryTenant() *TenantQuery {
	return NewCarrierEasyPostClient(cep.config).QueryTenant(cep)
}

// QueryCarrier queries the "carrier" edge of the CarrierEasyPost entity.
func (cep *CarrierEasyPost) QueryCarrier() *CarrierQuery {
	return NewCarrierEasyPostClient(cep.config).QueryCarrier(cep)
}

// Update returns a builder for updating this CarrierEasyPost.
// Note that you need to call CarrierEasyPost.Unwrap() before calling this method if this CarrierEasyPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (cep *CarrierEasyPost) Update() *CarrierEasyPostUpdateOne {
	return NewCarrierEasyPostClient(cep.config).UpdateOne(cep)
}

// Unwrap unwraps the CarrierEasyPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cep *CarrierEasyPost) Unwrap() *CarrierEasyPost {
	_tx, ok := cep.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierEasyPost is not a transactional entity")
	}
	cep.config.driver = _tx.drv
	return cep
}

// String implements the fmt.Stringer.
func (cep *CarrierEasyPost) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierEasyPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cep.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cep.TenantID))
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(cep.APIKey)
	builder.WriteString(", ")
	builder.WriteString("test=")
	builder.WriteString(fmt.Sprintf("%v", cep.Test))
	builder.WriteString(", ")
	builder.WriteString("carrier_accounts=")
	builder.WriteString(fmt.Sprintf("%v", cep.CarrierAccounts))
	builder.WriteByte(')')
	return builder.String()
}

// CarrierEasyPosts is a parsable slice of CarrierEasyPost.
type CarrierEasyPosts []*CarrierEasyPost
