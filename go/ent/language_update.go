// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LanguageUpdate is the builder for updating Language entities.
type LanguageUpdate struct {
	config
	hooks    []Hook
	mutation *LanguageMutation
}

// Where appends a list predicates to the LanguageUpdate builder.
func (lu *LanguageUpdate) Where(ps ...predicate.Language) *LanguageUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetLabel sets the "label" field.
func (lu *LanguageUpdate) SetLabel(s string) *LanguageUpdate {
	lu.mutation.SetLabel(s)
	return lu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (lu *LanguageUpdate) SetNillableLabel(s *string) *LanguageUpdate {
	if s != nil {
		lu.SetLabel(*s)
	}
	return lu
}

// SetInternalID sets the "internal_id" field.
func (lu *LanguageUpdate) SetInternalID(li language.InternalID) *LanguageUpdate {
	lu.mutation.SetInternalID(li)
	return lu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (lu *LanguageUpdate) SetNillableInternalID(li *language.InternalID) *LanguageUpdate {
	if li != nil {
		lu.SetInternalID(*li)
	}
	return lu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (lu *LanguageUpdate) AddUserIDs(ids ...pulid.ID) *LanguageUpdate {
	lu.mutation.AddUserIDs(ids...)
	return lu
}

// AddUsers adds the "users" edges to the User entity.
func (lu *LanguageUpdate) AddUsers(u ...*User) *LanguageUpdate {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lu.AddUserIDs(ids...)
}

// AddLanguageIDs adds the "language" edge to the Tenant entity by IDs.
func (lu *LanguageUpdate) AddLanguageIDs(ids ...pulid.ID) *LanguageUpdate {
	lu.mutation.AddLanguageIDs(ids...)
	return lu
}

// AddLanguage adds the "language" edges to the Tenant entity.
func (lu *LanguageUpdate) AddLanguage(t ...*Tenant) *LanguageUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lu.AddLanguageIDs(ids...)
}

// Mutation returns the LanguageMutation object of the builder.
func (lu *LanguageUpdate) Mutation() *LanguageMutation {
	return lu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (lu *LanguageUpdate) ClearUsers() *LanguageUpdate {
	lu.mutation.ClearUsers()
	return lu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (lu *LanguageUpdate) RemoveUserIDs(ids ...pulid.ID) *LanguageUpdate {
	lu.mutation.RemoveUserIDs(ids...)
	return lu
}

// RemoveUsers removes "users" edges to User entities.
func (lu *LanguageUpdate) RemoveUsers(u ...*User) *LanguageUpdate {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return lu.RemoveUserIDs(ids...)
}

// ClearLanguage clears all "language" edges to the Tenant entity.
func (lu *LanguageUpdate) ClearLanguage() *LanguageUpdate {
	lu.mutation.ClearLanguage()
	return lu
}

// RemoveLanguageIDs removes the "language" edge to Tenant entities by IDs.
func (lu *LanguageUpdate) RemoveLanguageIDs(ids ...pulid.ID) *LanguageUpdate {
	lu.mutation.RemoveLanguageIDs(ids...)
	return lu
}

// RemoveLanguage removes "language" edges to Tenant entities.
func (lu *LanguageUpdate) RemoveLanguage(t ...*Tenant) *LanguageUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lu.RemoveLanguageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LanguageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LanguageUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LanguageUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LanguageUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LanguageUpdate) check() error {
	if v, ok := lu.mutation.Label(); ok {
		if err := language.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Language.label": %w`, err)}
		}
	}
	if v, ok := lu.mutation.InternalID(); ok {
		if err := language.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "Language.internal_id": %w`, err)}
		}
	}
	return nil
}

func (lu *LanguageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(language.Table, language.Columns, sqlgraph.NewFieldSpec(language.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Label(); ok {
		_spec.SetField(language.FieldLabel, field.TypeString, value)
	}
	if value, ok := lu.mutation.InternalID(); ok {
		_spec.SetField(language.FieldInternalID, field.TypeEnum, value)
	}
	if lu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.UsersTable,
			Columns: []string{language.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !lu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.UsersTable,
			Columns: []string{language.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.UsersTable,
			Columns: []string{language.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.LanguageTable,
			Columns: []string{language.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLanguageIDs(); len(nodes) > 0 && !lu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.LanguageTable,
			Columns: []string{language.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.LanguageTable,
			Columns: []string{language.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{language.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LanguageUpdateOne is the builder for updating a single Language entity.
type LanguageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LanguageMutation
}

// SetLabel sets the "label" field.
func (luo *LanguageUpdateOne) SetLabel(s string) *LanguageUpdateOne {
	luo.mutation.SetLabel(s)
	return luo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (luo *LanguageUpdateOne) SetNillableLabel(s *string) *LanguageUpdateOne {
	if s != nil {
		luo.SetLabel(*s)
	}
	return luo
}

// SetInternalID sets the "internal_id" field.
func (luo *LanguageUpdateOne) SetInternalID(li language.InternalID) *LanguageUpdateOne {
	luo.mutation.SetInternalID(li)
	return luo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (luo *LanguageUpdateOne) SetNillableInternalID(li *language.InternalID) *LanguageUpdateOne {
	if li != nil {
		luo.SetInternalID(*li)
	}
	return luo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (luo *LanguageUpdateOne) AddUserIDs(ids ...pulid.ID) *LanguageUpdateOne {
	luo.mutation.AddUserIDs(ids...)
	return luo
}

// AddUsers adds the "users" edges to the User entity.
func (luo *LanguageUpdateOne) AddUsers(u ...*User) *LanguageUpdateOne {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return luo.AddUserIDs(ids...)
}

// AddLanguageIDs adds the "language" edge to the Tenant entity by IDs.
func (luo *LanguageUpdateOne) AddLanguageIDs(ids ...pulid.ID) *LanguageUpdateOne {
	luo.mutation.AddLanguageIDs(ids...)
	return luo
}

// AddLanguage adds the "language" edges to the Tenant entity.
func (luo *LanguageUpdateOne) AddLanguage(t ...*Tenant) *LanguageUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luo.AddLanguageIDs(ids...)
}

// Mutation returns the LanguageMutation object of the builder.
func (luo *LanguageUpdateOne) Mutation() *LanguageMutation {
	return luo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (luo *LanguageUpdateOne) ClearUsers() *LanguageUpdateOne {
	luo.mutation.ClearUsers()
	return luo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (luo *LanguageUpdateOne) RemoveUserIDs(ids ...pulid.ID) *LanguageUpdateOne {
	luo.mutation.RemoveUserIDs(ids...)
	return luo
}

// RemoveUsers removes "users" edges to User entities.
func (luo *LanguageUpdateOne) RemoveUsers(u ...*User) *LanguageUpdateOne {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return luo.RemoveUserIDs(ids...)
}

// ClearLanguage clears all "language" edges to the Tenant entity.
func (luo *LanguageUpdateOne) ClearLanguage() *LanguageUpdateOne {
	luo.mutation.ClearLanguage()
	return luo
}

// RemoveLanguageIDs removes the "language" edge to Tenant entities by IDs.
func (luo *LanguageUpdateOne) RemoveLanguageIDs(ids ...pulid.ID) *LanguageUpdateOne {
	luo.mutation.RemoveLanguageIDs(ids...)
	return luo
}

// RemoveLanguage removes "language" edges to Tenant entities.
func (luo *LanguageUpdateOne) RemoveLanguage(t ...*Tenant) *LanguageUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luo.RemoveLanguageIDs(ids...)
}

// Where appends a list predicates to the LanguageUpdate builder.
func (luo *LanguageUpdateOne) Where(ps ...predicate.Language) *LanguageUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LanguageUpdateOne) Select(field string, fields ...string) *LanguageUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Language entity.
func (luo *LanguageUpdateOne) Save(ctx context.Context) (*Language, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LanguageUpdateOne) SaveX(ctx context.Context) *Language {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LanguageUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LanguageUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LanguageUpdateOne) check() error {
	if v, ok := luo.mutation.Label(); ok {
		if err := language.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Language.label": %w`, err)}
		}
	}
	if v, ok := luo.mutation.InternalID(); ok {
		if err := language.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "Language.internal_id": %w`, err)}
		}
	}
	return nil
}

func (luo *LanguageUpdateOne) sqlSave(ctx context.Context) (_node *Language, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(language.Table, language.Columns, sqlgraph.NewFieldSpec(language.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Language.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, language.FieldID)
		for _, f := range fields {
			if !language.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != language.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Label(); ok {
		_spec.SetField(language.FieldLabel, field.TypeString, value)
	}
	if value, ok := luo.mutation.InternalID(); ok {
		_spec.SetField(language.FieldInternalID, field.TypeEnum, value)
	}
	if luo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.UsersTable,
			Columns: []string{language.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !luo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.UsersTable,
			Columns: []string{language.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.UsersTable,
			Columns: []string{language.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.LanguageTable,
			Columns: []string{language.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLanguageIDs(); len(nodes) > 0 && !luo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.LanguageTable,
			Columns: []string{language.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.LanguageTable,
			Columns: []string{language.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Language{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{language.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
