// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks    []Hook
	mutation *PlanMutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetLabel sets the "label" field.
func (pu *PlanUpdate) SetLabel(s string) *PlanUpdate {
	pu.mutation.SetLabel(s)
	return pu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableLabel(s *string) *PlanUpdate {
	if s != nil {
		pu.SetLabel(*s)
	}
	return pu
}

// SetRank sets the "rank" field.
func (pu *PlanUpdate) SetRank(i int) *PlanUpdate {
	pu.mutation.ResetRank()
	pu.mutation.SetRank(i)
	return pu
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableRank(i *int) *PlanUpdate {
	if i != nil {
		pu.SetRank(*i)
	}
	return pu
}

// AddRank adds i to the "rank" field.
func (pu *PlanUpdate) AddRank(i int) *PlanUpdate {
	pu.mutation.AddRank(i)
	return pu
}

// SetPriceDkk sets the "price_dkk" field.
func (pu *PlanUpdate) SetPriceDkk(i int) *PlanUpdate {
	pu.mutation.ResetPriceDkk()
	pu.mutation.SetPriceDkk(i)
	return pu
}

// SetNillablePriceDkk sets the "price_dkk" field if the given value is not nil.
func (pu *PlanUpdate) SetNillablePriceDkk(i *int) *PlanUpdate {
	if i != nil {
		pu.SetPriceDkk(*i)
	}
	return pu
}

// AddPriceDkk adds i to the "price_dkk" field.
func (pu *PlanUpdate) AddPriceDkk(i int) *PlanUpdate {
	pu.mutation.AddPriceDkk(i)
	return pu
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (pu *PlanUpdate) AddTenantIDs(ids ...pulid.ID) *PlanUpdate {
	pu.mutation.AddTenantIDs(ids...)
	return pu
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (pu *PlanUpdate) AddTenant(t ...*Tenant) *PlanUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTenantIDs(ids...)
}

// AddPlanHistoryPlanIDs adds the "plan_history_plan" edge to the PlanHistory entity by IDs.
func (pu *PlanUpdate) AddPlanHistoryPlanIDs(ids ...pulid.ID) *PlanUpdate {
	pu.mutation.AddPlanHistoryPlanIDs(ids...)
	return pu
}

// AddPlanHistoryPlan adds the "plan_history_plan" edges to the PlanHistory entity.
func (pu *PlanUpdate) AddPlanHistoryPlan(p ...*PlanHistory) *PlanUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlanHistoryPlanIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// ClearTenant clears all "tenant" edges to the Tenant entity.
func (pu *PlanUpdate) ClearTenant() *PlanUpdate {
	pu.mutation.ClearTenant()
	return pu
}

// RemoveTenantIDs removes the "tenant" edge to Tenant entities by IDs.
func (pu *PlanUpdate) RemoveTenantIDs(ids ...pulid.ID) *PlanUpdate {
	pu.mutation.RemoveTenantIDs(ids...)
	return pu
}

// RemoveTenant removes "tenant" edges to Tenant entities.
func (pu *PlanUpdate) RemoveTenant(t ...*Tenant) *PlanUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTenantIDs(ids...)
}

// ClearPlanHistoryPlan clears all "plan_history_plan" edges to the PlanHistory entity.
func (pu *PlanUpdate) ClearPlanHistoryPlan() *PlanUpdate {
	pu.mutation.ClearPlanHistoryPlan()
	return pu
}

// RemovePlanHistoryPlanIDs removes the "plan_history_plan" edge to PlanHistory entities by IDs.
func (pu *PlanUpdate) RemovePlanHistoryPlanIDs(ids ...pulid.ID) *PlanUpdate {
	pu.mutation.RemovePlanHistoryPlanIDs(ids...)
	return pu
}

// RemovePlanHistoryPlan removes "plan_history_plan" edges to PlanHistory entities.
func (pu *PlanUpdate) RemovePlanHistoryPlan(p ...*PlanHistory) *PlanUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlanHistoryPlanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Label(); ok {
		_spec.SetField(plan.FieldLabel, field.TypeString, value)
	}
	if value, ok := pu.mutation.Rank(); ok {
		_spec.SetField(plan.FieldRank, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedRank(); ok {
		_spec.AddField(plan.FieldRank, field.TypeInt, value)
	}
	if value, ok := pu.mutation.PriceDkk(); ok {
		_spec.SetField(plan.FieldPriceDkk, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPriceDkk(); ok {
		_spec.AddField(plan.FieldPriceDkk, field.TypeInt, value)
	}
	if pu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.TenantTable,
			Columns: []string{plan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTenantIDs(); len(nodes) > 0 && !pu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.TenantTable,
			Columns: []string{plan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.TenantTable,
			Columns: []string{plan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlanHistoryPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PlanHistoryPlanTable,
			Columns: []string{plan.PlanHistoryPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlanHistoryPlanIDs(); len(nodes) > 0 && !pu.mutation.PlanHistoryPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PlanHistoryPlanTable,
			Columns: []string{plan.PlanHistoryPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlanHistoryPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PlanHistoryPlanTable,
			Columns: []string{plan.PlanHistoryPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanMutation
}

// SetLabel sets the "label" field.
func (puo *PlanUpdateOne) SetLabel(s string) *PlanUpdateOne {
	puo.mutation.SetLabel(s)
	return puo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableLabel(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetLabel(*s)
	}
	return puo
}

// SetRank sets the "rank" field.
func (puo *PlanUpdateOne) SetRank(i int) *PlanUpdateOne {
	puo.mutation.ResetRank()
	puo.mutation.SetRank(i)
	return puo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableRank(i *int) *PlanUpdateOne {
	if i != nil {
		puo.SetRank(*i)
	}
	return puo
}

// AddRank adds i to the "rank" field.
func (puo *PlanUpdateOne) AddRank(i int) *PlanUpdateOne {
	puo.mutation.AddRank(i)
	return puo
}

// SetPriceDkk sets the "price_dkk" field.
func (puo *PlanUpdateOne) SetPriceDkk(i int) *PlanUpdateOne {
	puo.mutation.ResetPriceDkk()
	puo.mutation.SetPriceDkk(i)
	return puo
}

// SetNillablePriceDkk sets the "price_dkk" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillablePriceDkk(i *int) *PlanUpdateOne {
	if i != nil {
		puo.SetPriceDkk(*i)
	}
	return puo
}

// AddPriceDkk adds i to the "price_dkk" field.
func (puo *PlanUpdateOne) AddPriceDkk(i int) *PlanUpdateOne {
	puo.mutation.AddPriceDkk(i)
	return puo
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (puo *PlanUpdateOne) AddTenantIDs(ids ...pulid.ID) *PlanUpdateOne {
	puo.mutation.AddTenantIDs(ids...)
	return puo
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (puo *PlanUpdateOne) AddTenant(t ...*Tenant) *PlanUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTenantIDs(ids...)
}

// AddPlanHistoryPlanIDs adds the "plan_history_plan" edge to the PlanHistory entity by IDs.
func (puo *PlanUpdateOne) AddPlanHistoryPlanIDs(ids ...pulid.ID) *PlanUpdateOne {
	puo.mutation.AddPlanHistoryPlanIDs(ids...)
	return puo
}

// AddPlanHistoryPlan adds the "plan_history_plan" edges to the PlanHistory entity.
func (puo *PlanUpdateOne) AddPlanHistoryPlan(p ...*PlanHistory) *PlanUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlanHistoryPlanIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// ClearTenant clears all "tenant" edges to the Tenant entity.
func (puo *PlanUpdateOne) ClearTenant() *PlanUpdateOne {
	puo.mutation.ClearTenant()
	return puo
}

// RemoveTenantIDs removes the "tenant" edge to Tenant entities by IDs.
func (puo *PlanUpdateOne) RemoveTenantIDs(ids ...pulid.ID) *PlanUpdateOne {
	puo.mutation.RemoveTenantIDs(ids...)
	return puo
}

// RemoveTenant removes "tenant" edges to Tenant entities.
func (puo *PlanUpdateOne) RemoveTenant(t ...*Tenant) *PlanUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTenantIDs(ids...)
}

// ClearPlanHistoryPlan clears all "plan_history_plan" edges to the PlanHistory entity.
func (puo *PlanUpdateOne) ClearPlanHistoryPlan() *PlanUpdateOne {
	puo.mutation.ClearPlanHistoryPlan()
	return puo
}

// RemovePlanHistoryPlanIDs removes the "plan_history_plan" edge to PlanHistory entities by IDs.
func (puo *PlanUpdateOne) RemovePlanHistoryPlanIDs(ids ...pulid.ID) *PlanUpdateOne {
	puo.mutation.RemovePlanHistoryPlanIDs(ids...)
	return puo
}

// RemovePlanHistoryPlan removes "plan_history_plan" edges to PlanHistory entities.
func (puo *PlanUpdateOne) RemovePlanHistoryPlan(p ...*PlanHistory) *PlanUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlanHistoryPlanIDs(ids...)
}

// Where appends a list predicates to the PlanUpdate builder.
func (puo *PlanUpdateOne) Where(ps ...predicate.Plan) *PlanUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Label(); ok {
		_spec.SetField(plan.FieldLabel, field.TypeString, value)
	}
	if value, ok := puo.mutation.Rank(); ok {
		_spec.SetField(plan.FieldRank, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedRank(); ok {
		_spec.AddField(plan.FieldRank, field.TypeInt, value)
	}
	if value, ok := puo.mutation.PriceDkk(); ok {
		_spec.SetField(plan.FieldPriceDkk, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPriceDkk(); ok {
		_spec.AddField(plan.FieldPriceDkk, field.TypeInt, value)
	}
	if puo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.TenantTable,
			Columns: []string{plan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTenantIDs(); len(nodes) > 0 && !puo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.TenantTable,
			Columns: []string{plan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.TenantTable,
			Columns: []string{plan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlanHistoryPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PlanHistoryPlanTable,
			Columns: []string{plan.PlanHistoryPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlanHistoryPlanIDs(); len(nodes) > 0 && !puo.mutation.PlanHistoryPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PlanHistoryPlanTable,
			Columns: []string{plan.PlanHistoryPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlanHistoryPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PlanHistoryPlanTable,
			Columns: []string{plan.PlanHistoryPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
