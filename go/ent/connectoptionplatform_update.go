// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectOptionPlatformUpdate is the builder for updating ConnectOptionPlatform entities.
type ConnectOptionPlatformUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectOptionPlatformMutation
}

// Where appends a list predicates to the ConnectOptionPlatformUpdate builder.
func (copu *ConnectOptionPlatformUpdate) Where(ps ...predicate.ConnectOptionPlatform) *ConnectOptionPlatformUpdate {
	copu.mutation.Where(ps...)
	return copu
}

// SetName sets the "name" field.
func (copu *ConnectOptionPlatformUpdate) SetName(s string) *ConnectOptionPlatformUpdate {
	copu.mutation.SetName(s)
	return copu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (copu *ConnectOptionPlatformUpdate) SetNillableName(s *string) *ConnectOptionPlatformUpdate {
	if s != nil {
		copu.SetName(*s)
	}
	return copu
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (copu *ConnectOptionPlatformUpdate) AddTenantIDs(ids ...pulid.ID) *ConnectOptionPlatformUpdate {
	copu.mutation.AddTenantIDs(ids...)
	return copu
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (copu *ConnectOptionPlatformUpdate) AddTenant(t ...*Tenant) *ConnectOptionPlatformUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return copu.AddTenantIDs(ids...)
}

// Mutation returns the ConnectOptionPlatformMutation object of the builder.
func (copu *ConnectOptionPlatformUpdate) Mutation() *ConnectOptionPlatformMutation {
	return copu.mutation
}

// ClearTenant clears all "tenant" edges to the Tenant entity.
func (copu *ConnectOptionPlatformUpdate) ClearTenant() *ConnectOptionPlatformUpdate {
	copu.mutation.ClearTenant()
	return copu
}

// RemoveTenantIDs removes the "tenant" edge to Tenant entities by IDs.
func (copu *ConnectOptionPlatformUpdate) RemoveTenantIDs(ids ...pulid.ID) *ConnectOptionPlatformUpdate {
	copu.mutation.RemoveTenantIDs(ids...)
	return copu
}

// RemoveTenant removes "tenant" edges to Tenant entities.
func (copu *ConnectOptionPlatformUpdate) RemoveTenant(t ...*Tenant) *ConnectOptionPlatformUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return copu.RemoveTenantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (copu *ConnectOptionPlatformUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, copu.sqlSave, copu.mutation, copu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (copu *ConnectOptionPlatformUpdate) SaveX(ctx context.Context) int {
	affected, err := copu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (copu *ConnectOptionPlatformUpdate) Exec(ctx context.Context) error {
	_, err := copu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (copu *ConnectOptionPlatformUpdate) ExecX(ctx context.Context) {
	if err := copu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (copu *ConnectOptionPlatformUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(connectoptionplatform.Table, connectoptionplatform.Columns, sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString))
	if ps := copu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := copu.mutation.Name(); ok {
		_spec.SetField(connectoptionplatform.FieldName, field.TypeString, value)
	}
	if copu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptionplatform.TenantTable,
			Columns: connectoptionplatform.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := copu.mutation.RemovedTenantIDs(); len(nodes) > 0 && !copu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptionplatform.TenantTable,
			Columns: connectoptionplatform.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := copu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptionplatform.TenantTable,
			Columns: connectoptionplatform.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, copu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectoptionplatform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	copu.mutation.done = true
	return n, nil
}

// ConnectOptionPlatformUpdateOne is the builder for updating a single ConnectOptionPlatform entity.
type ConnectOptionPlatformUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectOptionPlatformMutation
}

// SetName sets the "name" field.
func (copuo *ConnectOptionPlatformUpdateOne) SetName(s string) *ConnectOptionPlatformUpdateOne {
	copuo.mutation.SetName(s)
	return copuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (copuo *ConnectOptionPlatformUpdateOne) SetNillableName(s *string) *ConnectOptionPlatformUpdateOne {
	if s != nil {
		copuo.SetName(*s)
	}
	return copuo
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (copuo *ConnectOptionPlatformUpdateOne) AddTenantIDs(ids ...pulid.ID) *ConnectOptionPlatformUpdateOne {
	copuo.mutation.AddTenantIDs(ids...)
	return copuo
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (copuo *ConnectOptionPlatformUpdateOne) AddTenant(t ...*Tenant) *ConnectOptionPlatformUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return copuo.AddTenantIDs(ids...)
}

// Mutation returns the ConnectOptionPlatformMutation object of the builder.
func (copuo *ConnectOptionPlatformUpdateOne) Mutation() *ConnectOptionPlatformMutation {
	return copuo.mutation
}

// ClearTenant clears all "tenant" edges to the Tenant entity.
func (copuo *ConnectOptionPlatformUpdateOne) ClearTenant() *ConnectOptionPlatformUpdateOne {
	copuo.mutation.ClearTenant()
	return copuo
}

// RemoveTenantIDs removes the "tenant" edge to Tenant entities by IDs.
func (copuo *ConnectOptionPlatformUpdateOne) RemoveTenantIDs(ids ...pulid.ID) *ConnectOptionPlatformUpdateOne {
	copuo.mutation.RemoveTenantIDs(ids...)
	return copuo
}

// RemoveTenant removes "tenant" edges to Tenant entities.
func (copuo *ConnectOptionPlatformUpdateOne) RemoveTenant(t ...*Tenant) *ConnectOptionPlatformUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return copuo.RemoveTenantIDs(ids...)
}

// Where appends a list predicates to the ConnectOptionPlatformUpdate builder.
func (copuo *ConnectOptionPlatformUpdateOne) Where(ps ...predicate.ConnectOptionPlatform) *ConnectOptionPlatformUpdateOne {
	copuo.mutation.Where(ps...)
	return copuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (copuo *ConnectOptionPlatformUpdateOne) Select(field string, fields ...string) *ConnectOptionPlatformUpdateOne {
	copuo.fields = append([]string{field}, fields...)
	return copuo
}

// Save executes the query and returns the updated ConnectOptionPlatform entity.
func (copuo *ConnectOptionPlatformUpdateOne) Save(ctx context.Context) (*ConnectOptionPlatform, error) {
	return withHooks(ctx, copuo.sqlSave, copuo.mutation, copuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (copuo *ConnectOptionPlatformUpdateOne) SaveX(ctx context.Context) *ConnectOptionPlatform {
	node, err := copuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (copuo *ConnectOptionPlatformUpdateOne) Exec(ctx context.Context) error {
	_, err := copuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (copuo *ConnectOptionPlatformUpdateOne) ExecX(ctx context.Context) {
	if err := copuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (copuo *ConnectOptionPlatformUpdateOne) sqlSave(ctx context.Context) (_node *ConnectOptionPlatform, err error) {
	_spec := sqlgraph.NewUpdateSpec(connectoptionplatform.Table, connectoptionplatform.Columns, sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString))
	id, ok := copuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectOptionPlatform.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := copuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectoptionplatform.FieldID)
		for _, f := range fields {
			if !connectoptionplatform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectoptionplatform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := copuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := copuo.mutation.Name(); ok {
		_spec.SetField(connectoptionplatform.FieldName, field.TypeString, value)
	}
	if copuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptionplatform.TenantTable,
			Columns: connectoptionplatform.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := copuo.mutation.RemovedTenantIDs(); len(nodes) > 0 && !copuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptionplatform.TenantTable,
			Columns: connectoptionplatform.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := copuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptionplatform.TenantTable,
			Columns: connectoptionplatform.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConnectOptionPlatform{config: copuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, copuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectoptionplatform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	copuo.mutation.done = true
	return _node, nil
}
