// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CarrierEasyPostUpdate is the builder for updating CarrierEasyPost entities.
type CarrierEasyPostUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierEasyPostMutation
}

// Where appends a list predicates to the CarrierEasyPostUpdate builder.
func (cepu *CarrierEasyPostUpdate) Where(ps ...predicate.CarrierEasyPost) *CarrierEasyPostUpdate {
	cepu.mutation.Where(ps...)
	return cepu
}

// SetTenantID sets the "tenant_id" field.
func (cepu *CarrierEasyPostUpdate) SetTenantID(pu pulid.ID) *CarrierEasyPostUpdate {
	cepu.mutation.SetTenantID(pu)
	return cepu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cepu *CarrierEasyPostUpdate) SetNillableTenantID(pu *pulid.ID) *CarrierEasyPostUpdate {
	if pu != nil {
		cepu.SetTenantID(*pu)
	}
	return cepu
}

// SetAPIKey sets the "api_key" field.
func (cepu *CarrierEasyPostUpdate) SetAPIKey(s string) *CarrierEasyPostUpdate {
	cepu.mutation.SetAPIKey(s)
	return cepu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cepu *CarrierEasyPostUpdate) SetNillableAPIKey(s *string) *CarrierEasyPostUpdate {
	if s != nil {
		cepu.SetAPIKey(*s)
	}
	return cepu
}

// SetTest sets the "test" field.
func (cepu *CarrierEasyPostUpdate) SetTest(b bool) *CarrierEasyPostUpdate {
	cepu.mutation.SetTest(b)
	return cepu
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cepu *CarrierEasyPostUpdate) SetNillableTest(b *bool) *CarrierEasyPostUpdate {
	if b != nil {
		cepu.SetTest(*b)
	}
	return cepu
}

// SetCarrierAccounts sets the "carrier_accounts" field.
func (cepu *CarrierEasyPostUpdate) SetCarrierAccounts(s []string) *CarrierEasyPostUpdate {
	cepu.mutation.SetCarrierAccounts(s)
	return cepu
}

// AppendCarrierAccounts appends s to the "carrier_accounts" field.
func (cepu *CarrierEasyPostUpdate) AppendCarrierAccounts(s []string) *CarrierEasyPostUpdate {
	cepu.mutation.AppendCarrierAccounts(s)
	return cepu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cepu *CarrierEasyPostUpdate) SetTenant(t *Tenant) *CarrierEasyPostUpdate {
	return cepu.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cepu *CarrierEasyPostUpdate) SetCarrierID(id pulid.ID) *CarrierEasyPostUpdate {
	cepu.mutation.SetCarrierID(id)
	return cepu
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cepu *CarrierEasyPostUpdate) SetCarrier(c *Carrier) *CarrierEasyPostUpdate {
	return cepu.SetCarrierID(c.ID)
}

// Mutation returns the CarrierEasyPostMutation object of the builder.
func (cepu *CarrierEasyPostUpdate) Mutation() *CarrierEasyPostMutation {
	return cepu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cepu *CarrierEasyPostUpdate) ClearTenant() *CarrierEasyPostUpdate {
	cepu.mutation.ClearTenant()
	return cepu
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cepu *CarrierEasyPostUpdate) ClearCarrier() *CarrierEasyPostUpdate {
	cepu.mutation.ClearCarrier()
	return cepu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cepu *CarrierEasyPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cepu.sqlSave, cepu.mutation, cepu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cepu *CarrierEasyPostUpdate) SaveX(ctx context.Context) int {
	affected, err := cepu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cepu *CarrierEasyPostUpdate) Exec(ctx context.Context) error {
	_, err := cepu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cepu *CarrierEasyPostUpdate) ExecX(ctx context.Context) {
	if err := cepu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cepu *CarrierEasyPostUpdate) check() error {
	if cepu.mutation.TenantCleared() && len(cepu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierEasyPost.tenant"`)
	}
	if cepu.mutation.CarrierCleared() && len(cepu.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierEasyPost.carrier"`)
	}
	return nil
}

func (cepu *CarrierEasyPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cepu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carriereasypost.Table, carriereasypost.Columns, sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString))
	if ps := cepu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cepu.mutation.APIKey(); ok {
		_spec.SetField(carriereasypost.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := cepu.mutation.Test(); ok {
		_spec.SetField(carriereasypost.FieldTest, field.TypeBool, value)
	}
	if value, ok := cepu.mutation.CarrierAccounts(); ok {
		_spec.SetField(carriereasypost.FieldCarrierAccounts, field.TypeJSON, value)
	}
	if value, ok := cepu.mutation.AppendedCarrierAccounts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carriereasypost.FieldCarrierAccounts, value)
		})
	}
	if cepu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriereasypost.TenantTable,
			Columns: []string{carriereasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cepu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriereasypost.TenantTable,
			Columns: []string{carriereasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cepu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriereasypost.CarrierTable,
			Columns: []string{carriereasypost.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cepu.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriereasypost.CarrierTable,
			Columns: []string{carriereasypost.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cepu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carriereasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cepu.mutation.done = true
	return n, nil
}

// CarrierEasyPostUpdateOne is the builder for updating a single CarrierEasyPost entity.
type CarrierEasyPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierEasyPostMutation
}

// SetTenantID sets the "tenant_id" field.
func (cepuo *CarrierEasyPostUpdateOne) SetTenantID(pu pulid.ID) *CarrierEasyPostUpdateOne {
	cepuo.mutation.SetTenantID(pu)
	return cepuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cepuo *CarrierEasyPostUpdateOne) SetNillableTenantID(pu *pulid.ID) *CarrierEasyPostUpdateOne {
	if pu != nil {
		cepuo.SetTenantID(*pu)
	}
	return cepuo
}

// SetAPIKey sets the "api_key" field.
func (cepuo *CarrierEasyPostUpdateOne) SetAPIKey(s string) *CarrierEasyPostUpdateOne {
	cepuo.mutation.SetAPIKey(s)
	return cepuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cepuo *CarrierEasyPostUpdateOne) SetNillableAPIKey(s *string) *CarrierEasyPostUpdateOne {
	if s != nil {
		cepuo.SetAPIKey(*s)
	}
	return cepuo
}

// SetTest sets the "test" field.
func (cepuo *CarrierEasyPostUpdateOne) SetTest(b bool) *CarrierEasyPostUpdateOne {
	cepuo.mutation.SetTest(b)
	return cepuo
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cepuo *CarrierEasyPostUpdateOne) SetNillableTest(b *bool) *CarrierEasyPostUpdateOne {
	if b != nil {
		cepuo.SetTest(*b)
	}
	return cepuo
}

// SetCarrierAccounts sets the "carrier_accounts" field.
func (cepuo *CarrierEasyPostUpdateOne) SetCarrierAccounts(s []string) *CarrierEasyPostUpdateOne {
	cepuo.mutation.SetCarrierAccounts(s)
	return cepuo
}

// AppendCarrierAccounts appends s to the "carrier_accounts" field.
func (cepuo *CarrierEasyPostUpdateOne) AppendCarrierAccounts(s []string) *CarrierEasyPostUpdateOne {
	cepuo.mutation.AppendCarrierAccounts(s)
	return cepuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cepuo *CarrierEasyPostUpdateOne) SetTenant(t *Tenant) *CarrierEasyPostUpdateOne {
	return cepuo.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cepuo *CarrierEasyPostUpdateOne) SetCarrierID(id pulid.ID) *CarrierEasyPostUpdateOne {
	cepuo.mutation.SetCarrierID(id)
	return cepuo
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cepuo *CarrierEasyPostUpdateOne) SetCarrier(c *Carrier) *CarrierEasyPostUpdateOne {
	return cepuo.SetCarrierID(c.ID)
}

// Mutation returns the CarrierEasyPostMutation object of the builder.
func (cepuo *CarrierEasyPostUpdateOne) Mutation() *CarrierEasyPostMutation {
	return cepuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cepuo *CarrierEasyPostUpdateOne) ClearTenant() *CarrierEasyPostUpdateOne {
	cepuo.mutation.ClearTenant()
	return cepuo
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cepuo *CarrierEasyPostUpdateOne) ClearCarrier() *CarrierEasyPostUpdateOne {
	cepuo.mutation.ClearCarrier()
	return cepuo
}

// Where appends a list predicates to the CarrierEasyPostUpdate builder.
func (cepuo *CarrierEasyPostUpdateOne) Where(ps ...predicate.CarrierEasyPost) *CarrierEasyPostUpdateOne {
	cepuo.mutation.Where(ps...)
	return cepuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cepuo *CarrierEasyPostUpdateOne) Select(field string, fields ...string) *CarrierEasyPostUpdateOne {
	cepuo.fields = append([]string{field}, fields...)
	return cepuo
}

// Save executes the query and returns the updated CarrierEasyPost entity.
func (cepuo *CarrierEasyPostUpdateOne) Save(ctx context.Context) (*CarrierEasyPost, error) {
	return withHooks(ctx, cepuo.sqlSave, cepuo.mutation, cepuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cepuo *CarrierEasyPostUpdateOne) SaveX(ctx context.Context) *CarrierEasyPost {
	node, err := cepuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cepuo *CarrierEasyPostUpdateOne) Exec(ctx context.Context) error {
	_, err := cepuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cepuo *CarrierEasyPostUpdateOne) ExecX(ctx context.Context) {
	if err := cepuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cepuo *CarrierEasyPostUpdateOne) check() error {
	if cepuo.mutation.TenantCleared() && len(cepuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierEasyPost.tenant"`)
	}
	if cepuo.mutation.CarrierCleared() && len(cepuo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierEasyPost.carrier"`)
	}
	return nil
}

func (cepuo *CarrierEasyPostUpdateOne) sqlSave(ctx context.Context) (_node *CarrierEasyPost, err error) {
	if err := cepuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carriereasypost.Table, carriereasypost.Columns, sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString))
	id, ok := cepuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierEasyPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cepuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carriereasypost.FieldID)
		for _, f := range fields {
			if !carriereasypost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carriereasypost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cepuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cepuo.mutation.APIKey(); ok {
		_spec.SetField(carriereasypost.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := cepuo.mutation.Test(); ok {
		_spec.SetField(carriereasypost.FieldTest, field.TypeBool, value)
	}
	if value, ok := cepuo.mutation.CarrierAccounts(); ok {
		_spec.SetField(carriereasypost.FieldCarrierAccounts, field.TypeJSON, value)
	}
	if value, ok := cepuo.mutation.AppendedCarrierAccounts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carriereasypost.FieldCarrierAccounts, value)
		})
	}
	if cepuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriereasypost.TenantTable,
			Columns: []string{carriereasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cepuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriereasypost.TenantTable,
			Columns: []string{carriereasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cepuo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriereasypost.CarrierTable,
			Columns: []string{carriereasypost.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cepuo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriereasypost.CarrierTable,
			Columns: []string{carriereasypost.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierEasyPost{config: cepuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cepuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carriereasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cepuo.mutation.done = true
	return _node, nil
}
