// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ParcelShopGLS is the model entity for the ParcelShopGLS schema.
type ParcelShopGLS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// GLSParcelShopID holds the value of the "gls_parcel_shop_id" field.
	GLSParcelShopID string `json:"gls_parcel_shop_id,omitempty"`
	// Only available in Group API
	PartnerID string `json:"partner_id,omitempty"`
	// Only available in Group API
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParcelShopGLSQuery when eager-loading is set.
	Edges                       ParcelShopGLSEdges `json:"edges"`
	parcel_shop_parcel_shop_gls *pulid.ID
	selectValues                sql.SelectValues
}

// ParcelShopGLSEdges holds the relations/edges for other nodes in the graph.
type ParcelShopGLSEdges struct {
	// ParcelShop holds the value of the parcel_shop edge.
	ParcelShop *ParcelShop `json:"parcel_shop,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ParcelShopOrErr returns the ParcelShop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopGLSEdges) ParcelShopOrErr() (*ParcelShop, error) {
	if e.ParcelShop != nil {
		return e.ParcelShop, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: parcelshop.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ParcelShopGLS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parcelshopgls.FieldID:
			values[i] = new(pulid.ID)
		case parcelshopgls.FieldGLSParcelShopID, parcelshopgls.FieldPartnerID, parcelshopgls.FieldType:
			values[i] = new(sql.NullString)
		case parcelshopgls.ForeignKeys[0]: // parcel_shop_parcel_shop_gls
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ParcelShopGLS fields.
func (psg *ParcelShopGLS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parcelshopgls.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				psg.ID = *value
			}
		case parcelshopgls.FieldGLSParcelShopID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gls_parcel_shop_id", values[i])
			} else if value.Valid {
				psg.GLSParcelShopID = value.String
			}
		case parcelshopgls.FieldPartnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partner_id", values[i])
			} else if value.Valid {
				psg.PartnerID = value.String
			}
		case parcelshopgls.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				psg.Type = value.String
			}
		case parcelshopgls.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parcel_shop_parcel_shop_gls", values[i])
			} else if value.Valid {
				psg.parcel_shop_parcel_shop_gls = new(pulid.ID)
				*psg.parcel_shop_parcel_shop_gls = *value.S.(*pulid.ID)
			}
		default:
			psg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ParcelShopGLS.
// This includes values selected through modifiers, order, etc.
func (psg *ParcelShopGLS) Value(name string) (ent.Value, error) {
	return psg.selectValues.Get(name)
}

// QueryParcelShop queries the "parcel_shop" edge of the ParcelShopGLS entity.
func (psg *ParcelShopGLS) QueryParcelShop() *ParcelShopQuery {
	return NewParcelShopGLSClient(psg.config).QueryParcelShop(psg)
}

// Update returns a builder for updating this ParcelShopGLS.
// Note that you need to call ParcelShopGLS.Unwrap() before calling this method if this ParcelShopGLS
// was returned from a transaction, and the transaction was committed or rolled back.
func (psg *ParcelShopGLS) Update() *ParcelShopGLSUpdateOne {
	return NewParcelShopGLSClient(psg.config).UpdateOne(psg)
}

// Unwrap unwraps the ParcelShopGLS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psg *ParcelShopGLS) Unwrap() *ParcelShopGLS {
	_tx, ok := psg.config.driver.(*txDriver)
	if !ok {
		panic("ent: ParcelShopGLS is not a transactional entity")
	}
	psg.config.driver = _tx.drv
	return psg
}

// String implements the fmt.Stringer.
func (psg *ParcelShopGLS) String() string {
	var builder strings.Builder
	builder.WriteString("ParcelShopGLS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", psg.ID))
	builder.WriteString("gls_parcel_shop_id=")
	builder.WriteString(psg.GLSParcelShopID)
	builder.WriteString(", ")
	builder.WriteString("partner_id=")
	builder.WriteString(psg.PartnerID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(psg.Type)
	builder.WriteByte(')')
	return builder.String()
}

// ParcelShopGLSs is a parsable slice of ParcelShopGLS.
type ParcelShopGLSs []*ParcelShopGLS
