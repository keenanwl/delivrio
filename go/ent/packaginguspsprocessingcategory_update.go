// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSProcessingCategoryUpdate is the builder for updating PackagingUSPSProcessingCategory entities.
type PackagingUSPSProcessingCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *PackagingUSPSProcessingCategoryMutation
}

// Where appends a list predicates to the PackagingUSPSProcessingCategoryUpdate builder.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) Where(ps ...predicate.PackagingUSPSProcessingCategory) *PackagingUSPSProcessingCategoryUpdate {
	pupcu.mutation.Where(ps...)
	return pupcu
}

// SetName sets the "name" field.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) SetName(s string) *PackagingUSPSProcessingCategoryUpdate {
	pupcu.mutation.SetName(s)
	return pupcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) SetNillableName(s *string) *PackagingUSPSProcessingCategoryUpdate {
	if s != nil {
		pupcu.SetName(*s)
	}
	return pupcu
}

// SetProcessingCategory sets the "processing_category" field.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) SetProcessingCategory(pc packaginguspsprocessingcategory.ProcessingCategory) *PackagingUSPSProcessingCategoryUpdate {
	pupcu.mutation.SetProcessingCategory(pc)
	return pupcu
}

// SetNillableProcessingCategory sets the "processing_category" field if the given value is not nil.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) SetNillableProcessingCategory(pc *packaginguspsprocessingcategory.ProcessingCategory) *PackagingUSPSProcessingCategoryUpdate {
	if pc != nil {
		pupcu.SetProcessingCategory(*pc)
	}
	return pupcu
}

// Mutation returns the PackagingUSPSProcessingCategoryMutation object of the builder.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) Mutation() *PackagingUSPSProcessingCategoryMutation {
	return pupcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pupcu.sqlSave, pupcu.mutation, pupcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pupcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pupcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) ExecX(ctx context.Context) {
	if err := pupcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pupcu *PackagingUSPSProcessingCategoryUpdate) check() error {
	if v, ok := pupcu.mutation.ProcessingCategory(); ok {
		if err := packaginguspsprocessingcategory.ProcessingCategoryValidator(v); err != nil {
			return &ValidationError{Name: "processing_category", err: fmt.Errorf(`ent: validator failed for field "PackagingUSPSProcessingCategory.processing_category": %w`, err)}
		}
	}
	return nil
}

func (pupcu *PackagingUSPSProcessingCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pupcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(packaginguspsprocessingcategory.Table, packaginguspsprocessingcategory.Columns, sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString))
	if ps := pupcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pupcu.mutation.Name(); ok {
		_spec.SetField(packaginguspsprocessingcategory.FieldName, field.TypeString, value)
	}
	if value, ok := pupcu.mutation.ProcessingCategory(); ok {
		_spec.SetField(packaginguspsprocessingcategory.FieldProcessingCategory, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pupcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packaginguspsprocessingcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pupcu.mutation.done = true
	return n, nil
}

// PackagingUSPSProcessingCategoryUpdateOne is the builder for updating a single PackagingUSPSProcessingCategory entity.
type PackagingUSPSProcessingCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackagingUSPSProcessingCategoryMutation
}

// SetName sets the "name" field.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) SetName(s string) *PackagingUSPSProcessingCategoryUpdateOne {
	pupcuo.mutation.SetName(s)
	return pupcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) SetNillableName(s *string) *PackagingUSPSProcessingCategoryUpdateOne {
	if s != nil {
		pupcuo.SetName(*s)
	}
	return pupcuo
}

// SetProcessingCategory sets the "processing_category" field.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) SetProcessingCategory(pc packaginguspsprocessingcategory.ProcessingCategory) *PackagingUSPSProcessingCategoryUpdateOne {
	pupcuo.mutation.SetProcessingCategory(pc)
	return pupcuo
}

// SetNillableProcessingCategory sets the "processing_category" field if the given value is not nil.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) SetNillableProcessingCategory(pc *packaginguspsprocessingcategory.ProcessingCategory) *PackagingUSPSProcessingCategoryUpdateOne {
	if pc != nil {
		pupcuo.SetProcessingCategory(*pc)
	}
	return pupcuo
}

// Mutation returns the PackagingUSPSProcessingCategoryMutation object of the builder.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) Mutation() *PackagingUSPSProcessingCategoryMutation {
	return pupcuo.mutation
}

// Where appends a list predicates to the PackagingUSPSProcessingCategoryUpdate builder.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) Where(ps ...predicate.PackagingUSPSProcessingCategory) *PackagingUSPSProcessingCategoryUpdateOne {
	pupcuo.mutation.Where(ps...)
	return pupcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) Select(field string, fields ...string) *PackagingUSPSProcessingCategoryUpdateOne {
	pupcuo.fields = append([]string{field}, fields...)
	return pupcuo
}

// Save executes the query and returns the updated PackagingUSPSProcessingCategory entity.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) Save(ctx context.Context) (*PackagingUSPSProcessingCategory, error) {
	return withHooks(ctx, pupcuo.sqlSave, pupcuo.mutation, pupcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) SaveX(ctx context.Context) *PackagingUSPSProcessingCategory {
	node, err := pupcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pupcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pupcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) check() error {
	if v, ok := pupcuo.mutation.ProcessingCategory(); ok {
		if err := packaginguspsprocessingcategory.ProcessingCategoryValidator(v); err != nil {
			return &ValidationError{Name: "processing_category", err: fmt.Errorf(`ent: validator failed for field "PackagingUSPSProcessingCategory.processing_category": %w`, err)}
		}
	}
	return nil
}

func (pupcuo *PackagingUSPSProcessingCategoryUpdateOne) sqlSave(ctx context.Context) (_node *PackagingUSPSProcessingCategory, err error) {
	if err := pupcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(packaginguspsprocessingcategory.Table, packaginguspsprocessingcategory.Columns, sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString))
	id, ok := pupcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackagingUSPSProcessingCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pupcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packaginguspsprocessingcategory.FieldID)
		for _, f := range fields {
			if !packaginguspsprocessingcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packaginguspsprocessingcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pupcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pupcuo.mutation.Name(); ok {
		_spec.SetField(packaginguspsprocessingcategory.FieldName, field.TypeString, value)
	}
	if value, ok := pupcuo.mutation.ProcessingCategory(); ok {
		_spec.SetField(packaginguspsprocessingcategory.FieldProcessingCategory, field.TypeEnum, value)
	}
	_node = &PackagingUSPSProcessingCategory{config: pupcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pupcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packaginguspsprocessingcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pupcuo.mutation.done = true
	return _node, nil
}
