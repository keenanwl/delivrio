// Code generated by ent, DO NOT EDIT.

package deliveryoption

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldTenantID, v))
}

// ArchivedAt applies equality check predicate on the "archived_at" field. It's identical to ArchivedAtEQ.
func ArchivedAt(v time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldArchivedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldName, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldSortOrder, v))
}

// ClickOptionDisplayCount applies equality check predicate on the "click_option_display_count" field. It's identical to ClickOptionDisplayCountEQ.
func ClickOptionDisplayCount(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldClickOptionDisplayCount, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldDescription, v))
}

// ClickCollect applies equality check predicate on the "click_collect" field. It's identical to ClickCollectEQ.
func ClickCollect(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldClickCollect, v))
}

// OverrideSenderAddress applies equality check predicate on the "override_sender_address" field. It's identical to OverrideSenderAddressEQ.
func OverrideSenderAddress(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldOverrideSenderAddress, v))
}

// OverrideReturnAddress applies equality check predicate on the "override_return_address" field. It's identical to OverrideReturnAddressEQ.
func OverrideReturnAddress(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldOverrideReturnAddress, v))
}

// HideDeliveryOption applies equality check predicate on the "hide_delivery_option" field. It's identical to HideDeliveryOptionEQ.
func HideDeliveryOption(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldHideDeliveryOption, v))
}

// DeliveryEstimateFrom applies equality check predicate on the "delivery_estimate_from" field. It's identical to DeliveryEstimateFromEQ.
func DeliveryEstimateFrom(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldDeliveryEstimateFrom, v))
}

// DeliveryEstimateTo applies equality check predicate on the "delivery_estimate_to" field. It's identical to DeliveryEstimateToEQ.
func DeliveryEstimateTo(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldDeliveryEstimateTo, v))
}

// WebshipperIntegration applies equality check predicate on the "webshipper_integration" field. It's identical to WebshipperIntegrationEQ.
func WebshipperIntegration(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldWebshipperIntegration, v))
}

// WebshipperID applies equality check predicate on the "webshipper_id" field. It's identical to WebshipperIDEQ.
func WebshipperID(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldWebshipperID, v))
}

// ShipmondoIntegration applies equality check predicate on the "shipmondo_integration" field. It's identical to ShipmondoIntegrationEQ.
func ShipmondoIntegration(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldShipmondoIntegration, v))
}

// ShipmondoDeliveryOption applies equality check predicate on the "shipmondo_delivery_option" field. It's identical to ShipmondoDeliveryOptionEQ.
func ShipmondoDeliveryOption(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldShipmondoDeliveryOption, v))
}

// CustomsEnabled applies equality check predicate on the "customs_enabled" field. It's identical to CustomsEnabledEQ.
func CustomsEnabled(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldCustomsEnabled, v))
}

// CustomsSigner applies equality check predicate on the "customs_signer" field. It's identical to CustomsSignerEQ.
func CustomsSigner(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldCustomsSigner, v))
}

// HideIfCompanyEmpty applies equality check predicate on the "hide_if_company_empty" field. It's identical to HideIfCompanyEmptyEQ.
func HideIfCompanyEmpty(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldHideIfCompanyEmpty, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.DeliveryOption {
	vc := string(v)
	return predicate.DeliveryOption(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.DeliveryOption {
	vc := string(v)
	return predicate.DeliveryOption(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.DeliveryOption {
	vc := string(v)
	return predicate.DeliveryOption(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.DeliveryOption {
	vc := string(v)
	return predicate.DeliveryOption(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.DeliveryOption {
	vc := string(v)
	return predicate.DeliveryOption(sql.FieldContainsFold(FieldTenantID, vc))
}

// ArchivedAtEQ applies the EQ predicate on the "archived_at" field.
func ArchivedAtEQ(v time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldArchivedAt, v))
}

// ArchivedAtNEQ applies the NEQ predicate on the "archived_at" field.
func ArchivedAtNEQ(v time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldArchivedAt, v))
}

// ArchivedAtIn applies the In predicate on the "archived_at" field.
func ArchivedAtIn(vs ...time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldArchivedAt, vs...))
}

// ArchivedAtNotIn applies the NotIn predicate on the "archived_at" field.
func ArchivedAtNotIn(vs ...time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldArchivedAt, vs...))
}

// ArchivedAtGT applies the GT predicate on the "archived_at" field.
func ArchivedAtGT(v time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldArchivedAt, v))
}

// ArchivedAtGTE applies the GTE predicate on the "archived_at" field.
func ArchivedAtGTE(v time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldArchivedAt, v))
}

// ArchivedAtLT applies the LT predicate on the "archived_at" field.
func ArchivedAtLT(v time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldArchivedAt, v))
}

// ArchivedAtLTE applies the LTE predicate on the "archived_at" field.
func ArchivedAtLTE(v time.Time) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldArchivedAt, v))
}

// ArchivedAtIsNil applies the IsNil predicate on the "archived_at" field.
func ArchivedAtIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldArchivedAt))
}

// ArchivedAtNotNil applies the NotNil predicate on the "archived_at" field.
func ArchivedAtNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldArchivedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldContainsFold(FieldName, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldSortOrder, v))
}

// ClickOptionDisplayCountEQ applies the EQ predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldClickOptionDisplayCount, v))
}

// ClickOptionDisplayCountNEQ applies the NEQ predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountNEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldClickOptionDisplayCount, v))
}

// ClickOptionDisplayCountIn applies the In predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldClickOptionDisplayCount, vs...))
}

// ClickOptionDisplayCountNotIn applies the NotIn predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountNotIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldClickOptionDisplayCount, vs...))
}

// ClickOptionDisplayCountGT applies the GT predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountGT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldClickOptionDisplayCount, v))
}

// ClickOptionDisplayCountGTE applies the GTE predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountGTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldClickOptionDisplayCount, v))
}

// ClickOptionDisplayCountLT applies the LT predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountLT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldClickOptionDisplayCount, v))
}

// ClickOptionDisplayCountLTE applies the LTE predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountLTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldClickOptionDisplayCount, v))
}

// ClickOptionDisplayCountIsNil applies the IsNil predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldClickOptionDisplayCount))
}

// ClickOptionDisplayCountNotNil applies the NotNil predicate on the "click_option_display_count" field.
func ClickOptionDisplayCountNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldClickOptionDisplayCount))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldContainsFold(FieldDescription, v))
}

// ClickCollectEQ applies the EQ predicate on the "click_collect" field.
func ClickCollectEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldClickCollect, v))
}

// ClickCollectNEQ applies the NEQ predicate on the "click_collect" field.
func ClickCollectNEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldClickCollect, v))
}

// ClickCollectIsNil applies the IsNil predicate on the "click_collect" field.
func ClickCollectIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldClickCollect))
}

// ClickCollectNotNil applies the NotNil predicate on the "click_collect" field.
func ClickCollectNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldClickCollect))
}

// OverrideSenderAddressEQ applies the EQ predicate on the "override_sender_address" field.
func OverrideSenderAddressEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldOverrideSenderAddress, v))
}

// OverrideSenderAddressNEQ applies the NEQ predicate on the "override_sender_address" field.
func OverrideSenderAddressNEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldOverrideSenderAddress, v))
}

// OverrideSenderAddressIsNil applies the IsNil predicate on the "override_sender_address" field.
func OverrideSenderAddressIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldOverrideSenderAddress))
}

// OverrideSenderAddressNotNil applies the NotNil predicate on the "override_sender_address" field.
func OverrideSenderAddressNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldOverrideSenderAddress))
}

// OverrideReturnAddressEQ applies the EQ predicate on the "override_return_address" field.
func OverrideReturnAddressEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldOverrideReturnAddress, v))
}

// OverrideReturnAddressNEQ applies the NEQ predicate on the "override_return_address" field.
func OverrideReturnAddressNEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldOverrideReturnAddress, v))
}

// OverrideReturnAddressIsNil applies the IsNil predicate on the "override_return_address" field.
func OverrideReturnAddressIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldOverrideReturnAddress))
}

// OverrideReturnAddressNotNil applies the NotNil predicate on the "override_return_address" field.
func OverrideReturnAddressNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldOverrideReturnAddress))
}

// HideDeliveryOptionEQ applies the EQ predicate on the "hide_delivery_option" field.
func HideDeliveryOptionEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldHideDeliveryOption, v))
}

// HideDeliveryOptionNEQ applies the NEQ predicate on the "hide_delivery_option" field.
func HideDeliveryOptionNEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldHideDeliveryOption, v))
}

// HideDeliveryOptionIsNil applies the IsNil predicate on the "hide_delivery_option" field.
func HideDeliveryOptionIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldHideDeliveryOption))
}

// HideDeliveryOptionNotNil applies the NotNil predicate on the "hide_delivery_option" field.
func HideDeliveryOptionNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldHideDeliveryOption))
}

// DeliveryEstimateFromEQ applies the EQ predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldDeliveryEstimateFrom, v))
}

// DeliveryEstimateFromNEQ applies the NEQ predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromNEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldDeliveryEstimateFrom, v))
}

// DeliveryEstimateFromIn applies the In predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldDeliveryEstimateFrom, vs...))
}

// DeliveryEstimateFromNotIn applies the NotIn predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromNotIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldDeliveryEstimateFrom, vs...))
}

// DeliveryEstimateFromGT applies the GT predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromGT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldDeliveryEstimateFrom, v))
}

// DeliveryEstimateFromGTE applies the GTE predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromGTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldDeliveryEstimateFrom, v))
}

// DeliveryEstimateFromLT applies the LT predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromLT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldDeliveryEstimateFrom, v))
}

// DeliveryEstimateFromLTE applies the LTE predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromLTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldDeliveryEstimateFrom, v))
}

// DeliveryEstimateFromIsNil applies the IsNil predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldDeliveryEstimateFrom))
}

// DeliveryEstimateFromNotNil applies the NotNil predicate on the "delivery_estimate_from" field.
func DeliveryEstimateFromNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldDeliveryEstimateFrom))
}

// DeliveryEstimateToEQ applies the EQ predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldDeliveryEstimateTo, v))
}

// DeliveryEstimateToNEQ applies the NEQ predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToNEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldDeliveryEstimateTo, v))
}

// DeliveryEstimateToIn applies the In predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldDeliveryEstimateTo, vs...))
}

// DeliveryEstimateToNotIn applies the NotIn predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToNotIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldDeliveryEstimateTo, vs...))
}

// DeliveryEstimateToGT applies the GT predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToGT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldDeliveryEstimateTo, v))
}

// DeliveryEstimateToGTE applies the GTE predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToGTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldDeliveryEstimateTo, v))
}

// DeliveryEstimateToLT applies the LT predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToLT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldDeliveryEstimateTo, v))
}

// DeliveryEstimateToLTE applies the LTE predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToLTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldDeliveryEstimateTo, v))
}

// DeliveryEstimateToIsNil applies the IsNil predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldDeliveryEstimateTo))
}

// DeliveryEstimateToNotNil applies the NotNil predicate on the "delivery_estimate_to" field.
func DeliveryEstimateToNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldDeliveryEstimateTo))
}

// WebshipperIntegrationEQ applies the EQ predicate on the "webshipper_integration" field.
func WebshipperIntegrationEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldWebshipperIntegration, v))
}

// WebshipperIntegrationNEQ applies the NEQ predicate on the "webshipper_integration" field.
func WebshipperIntegrationNEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldWebshipperIntegration, v))
}

// WebshipperIDEQ applies the EQ predicate on the "webshipper_id" field.
func WebshipperIDEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldWebshipperID, v))
}

// WebshipperIDNEQ applies the NEQ predicate on the "webshipper_id" field.
func WebshipperIDNEQ(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldWebshipperID, v))
}

// WebshipperIDIn applies the In predicate on the "webshipper_id" field.
func WebshipperIDIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldWebshipperID, vs...))
}

// WebshipperIDNotIn applies the NotIn predicate on the "webshipper_id" field.
func WebshipperIDNotIn(vs ...int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldWebshipperID, vs...))
}

// WebshipperIDGT applies the GT predicate on the "webshipper_id" field.
func WebshipperIDGT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldWebshipperID, v))
}

// WebshipperIDGTE applies the GTE predicate on the "webshipper_id" field.
func WebshipperIDGTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldWebshipperID, v))
}

// WebshipperIDLT applies the LT predicate on the "webshipper_id" field.
func WebshipperIDLT(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldWebshipperID, v))
}

// WebshipperIDLTE applies the LTE predicate on the "webshipper_id" field.
func WebshipperIDLTE(v int) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldWebshipperID, v))
}

// WebshipperIDIsNil applies the IsNil predicate on the "webshipper_id" field.
func WebshipperIDIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldWebshipperID))
}

// WebshipperIDNotNil applies the NotNil predicate on the "webshipper_id" field.
func WebshipperIDNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldWebshipperID))
}

// ShipmondoIntegrationEQ applies the EQ predicate on the "shipmondo_integration" field.
func ShipmondoIntegrationEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldShipmondoIntegration, v))
}

// ShipmondoIntegrationNEQ applies the NEQ predicate on the "shipmondo_integration" field.
func ShipmondoIntegrationNEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldShipmondoIntegration, v))
}

// ShipmondoDeliveryOptionEQ applies the EQ predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionEQ(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionNEQ applies the NEQ predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionNEQ(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionIn applies the In predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionIn(vs ...string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldShipmondoDeliveryOption, vs...))
}

// ShipmondoDeliveryOptionNotIn applies the NotIn predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionNotIn(vs ...string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldShipmondoDeliveryOption, vs...))
}

// ShipmondoDeliveryOptionGT applies the GT predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionGT(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionGTE applies the GTE predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionGTE(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionLT applies the LT predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionLT(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionLTE applies the LTE predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionLTE(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionContains applies the Contains predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionContains(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldContains(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionHasPrefix applies the HasPrefix predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionHasPrefix(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldHasPrefix(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionHasSuffix applies the HasSuffix predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionHasSuffix(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldHasSuffix(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionIsNil applies the IsNil predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldShipmondoDeliveryOption))
}

// ShipmondoDeliveryOptionNotNil applies the NotNil predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldShipmondoDeliveryOption))
}

// ShipmondoDeliveryOptionEqualFold applies the EqualFold predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionEqualFold(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEqualFold(FieldShipmondoDeliveryOption, v))
}

// ShipmondoDeliveryOptionContainsFold applies the ContainsFold predicate on the "shipmondo_delivery_option" field.
func ShipmondoDeliveryOptionContainsFold(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldContainsFold(FieldShipmondoDeliveryOption, v))
}

// CustomsEnabledEQ applies the EQ predicate on the "customs_enabled" field.
func CustomsEnabledEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldCustomsEnabled, v))
}

// CustomsEnabledNEQ applies the NEQ predicate on the "customs_enabled" field.
func CustomsEnabledNEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldCustomsEnabled, v))
}

// CustomsSignerEQ applies the EQ predicate on the "customs_signer" field.
func CustomsSignerEQ(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldCustomsSigner, v))
}

// CustomsSignerNEQ applies the NEQ predicate on the "customs_signer" field.
func CustomsSignerNEQ(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldCustomsSigner, v))
}

// CustomsSignerIn applies the In predicate on the "customs_signer" field.
func CustomsSignerIn(vs ...string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIn(FieldCustomsSigner, vs...))
}

// CustomsSignerNotIn applies the NotIn predicate on the "customs_signer" field.
func CustomsSignerNotIn(vs ...string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotIn(FieldCustomsSigner, vs...))
}

// CustomsSignerGT applies the GT predicate on the "customs_signer" field.
func CustomsSignerGT(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGT(FieldCustomsSigner, v))
}

// CustomsSignerGTE applies the GTE predicate on the "customs_signer" field.
func CustomsSignerGTE(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldGTE(FieldCustomsSigner, v))
}

// CustomsSignerLT applies the LT predicate on the "customs_signer" field.
func CustomsSignerLT(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLT(FieldCustomsSigner, v))
}

// CustomsSignerLTE applies the LTE predicate on the "customs_signer" field.
func CustomsSignerLTE(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldLTE(FieldCustomsSigner, v))
}

// CustomsSignerContains applies the Contains predicate on the "customs_signer" field.
func CustomsSignerContains(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldContains(FieldCustomsSigner, v))
}

// CustomsSignerHasPrefix applies the HasPrefix predicate on the "customs_signer" field.
func CustomsSignerHasPrefix(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldHasPrefix(FieldCustomsSigner, v))
}

// CustomsSignerHasSuffix applies the HasSuffix predicate on the "customs_signer" field.
func CustomsSignerHasSuffix(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldHasSuffix(FieldCustomsSigner, v))
}

// CustomsSignerIsNil applies the IsNil predicate on the "customs_signer" field.
func CustomsSignerIsNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldIsNull(FieldCustomsSigner))
}

// CustomsSignerNotNil applies the NotNil predicate on the "customs_signer" field.
func CustomsSignerNotNil() predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNotNull(FieldCustomsSigner))
}

// CustomsSignerEqualFold applies the EqualFold predicate on the "customs_signer" field.
func CustomsSignerEqualFold(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEqualFold(FieldCustomsSigner, v))
}

// CustomsSignerContainsFold applies the ContainsFold predicate on the "customs_signer" field.
func CustomsSignerContainsFold(v string) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldContainsFold(FieldCustomsSigner, v))
}

// HideIfCompanyEmptyEQ applies the EQ predicate on the "hide_if_company_empty" field.
func HideIfCompanyEmptyEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldEQ(FieldHideIfCompanyEmpty, v))
}

// HideIfCompanyEmptyNEQ applies the NEQ predicate on the "hide_if_company_empty" field.
func HideIfCompanyEmptyNEQ(v bool) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.FieldNEQ(FieldHideIfCompanyEmpty, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrier applies the HasEdge predicate on the "carrier" edge.
func HasCarrier() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CarrierTable, CarrierColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierWith applies the HasEdge predicate on the "carrier" edge with a given conditions (other predicates).
func HasCarrierWith(preds ...predicate.Carrier) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newCarrierStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryRule applies the HasEdge predicate on the "delivery_rule" edge.
func HasDeliveryRule() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeliveryRuleTable, DeliveryRuleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryRuleWith applies the HasEdge predicate on the "delivery_rule" edge with a given conditions (other predicates).
func HasDeliveryRuleWith(preds ...predicate.DeliveryRule) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryRuleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionDAO applies the HasEdge predicate on the "delivery_option_dao" edge.
func HasDeliveryOptionDAO() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionDAOTable, DeliveryOptionDAOColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionDAOWith applies the HasEdge predicate on the "delivery_option_dao" edge with a given conditions (other predicates).
func HasDeliveryOptionDAOWith(preds ...predicate.DeliveryOptionDAO) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionDAOStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionDF applies the HasEdge predicate on the "delivery_option_df" edge.
func HasDeliveryOptionDF() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionDFTable, DeliveryOptionDFColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionDFWith applies the HasEdge predicate on the "delivery_option_df" edge with a given conditions (other predicates).
func HasDeliveryOptionDFWith(preds ...predicate.DeliveryOptionDF) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionDFStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionDSV applies the HasEdge predicate on the "delivery_option_dsv" edge.
func HasDeliveryOptionDSV() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionDSVTable, DeliveryOptionDSVColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionDSVWith applies the HasEdge predicate on the "delivery_option_dsv" edge with a given conditions (other predicates).
func HasDeliveryOptionDSVWith(preds ...predicate.DeliveryOptionDSV) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionDSVStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionEasyPost applies the HasEdge predicate on the "delivery_option_easy_post" edge.
func HasDeliveryOptionEasyPost() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionEasyPostTable, DeliveryOptionEasyPostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionEasyPostWith applies the HasEdge predicate on the "delivery_option_easy_post" edge with a given conditions (other predicates).
func HasDeliveryOptionEasyPostWith(preds ...predicate.DeliveryOptionEasyPost) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionEasyPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionGLS applies the HasEdge predicate on the "delivery_option_gls" edge.
func HasDeliveryOptionGLS() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionGLSTable, DeliveryOptionGLSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionGLSWith applies the HasEdge predicate on the "delivery_option_gls" edge with a given conditions (other predicates).
func HasDeliveryOptionGLSWith(preds ...predicate.DeliveryOptionGLS) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionGLSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionPostNord applies the HasEdge predicate on the "delivery_option_post_nord" edge.
func HasDeliveryOptionPostNord() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionPostNordTable, DeliveryOptionPostNordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionPostNordWith applies the HasEdge predicate on the "delivery_option_post_nord" edge with a given conditions (other predicates).
func HasDeliveryOptionPostNordWith(preds ...predicate.DeliveryOptionPostNord) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionPostNordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionUSPS applies the HasEdge predicate on the "delivery_option_usps" edge.
func HasDeliveryOptionUSPS() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionUSPSTable, DeliveryOptionUSPSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionUSPSWith applies the HasEdge predicate on the "delivery_option_usps" edge with a given conditions (other predicates).
func HasDeliveryOptionUSPSWith(preds ...predicate.DeliveryOptionUSPS) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionUSPSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionBring applies the HasEdge predicate on the "delivery_option_bring" edge.
func HasDeliveryOptionBring() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionBringTable, DeliveryOptionBringColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionBringWith applies the HasEdge predicate on the "delivery_option_bring" edge with a given conditions (other predicates).
func HasDeliveryOptionBringWith(preds ...predicate.DeliveryOptionBring) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionBringStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortals applies the HasEdge predicate on the "return_portals" edge.
func HasReturnPortals() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ReturnPortalsTable, ReturnPortalsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalsWith applies the HasEdge predicate on the "return_portals" edge with a given conditions (other predicates).
func HasReturnPortalsWith(preds ...predicate.ReturnPortal) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newReturnPortalsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasColli applies the HasEdge predicate on the "colli" edge.
func HasColli() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ColliTable, ColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColliWith applies the HasEdge predicate on the "colli" edge with a given conditions (other predicates).
func HasColliWith(preds ...predicate.Colli) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnColli applies the HasEdge predicate on the "return_colli" edge.
func HasReturnColli() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnColliTable, ReturnColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnColliWith applies the HasEdge predicate on the "return_colli" edge with a given conditions (other predicates).
func HasReturnColliWith(preds ...predicate.ReturnColli) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newReturnColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierService applies the HasEdge predicate on the "carrier_service" edge.
func HasCarrierService() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CarrierServiceTable, CarrierServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceWith applies the HasEdge predicate on the "carrier_service" edge with a given conditions (other predicates).
func HasCarrierServiceWith(preds ...predicate.CarrierService) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newCarrierServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnection applies the HasEdge predicate on the "connection" edge.
func HasConnection() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConnectionTable, ConnectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionWith applies the HasEdge predicate on the "connection" edge with a given conditions (other predicates).
func HasConnectionWith(preds ...predicate.Connection) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newConnectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnectionDefault applies the HasEdge predicate on the "connection_default" edge.
func HasConnectionDefault() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ConnectionDefaultTable, ConnectionDefaultColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionDefaultWith applies the HasEdge predicate on the "connection_default" edge with a given conditions (other predicates).
func HasConnectionDefaultWith(preds ...predicate.Connection) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newConnectionDefaultStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHypothesisTestDeliveryOptionGroupOne applies the HasEdge predicate on the "hypothesis_test_delivery_option_group_one" edge.
func HasHypothesisTestDeliveryOptionGroupOne() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, HypothesisTestDeliveryOptionGroupOneTable, HypothesisTestDeliveryOptionGroupOnePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHypothesisTestDeliveryOptionGroupOneWith applies the HasEdge predicate on the "hypothesis_test_delivery_option_group_one" edge with a given conditions (other predicates).
func HasHypothesisTestDeliveryOptionGroupOneWith(preds ...predicate.HypothesisTestDeliveryOption) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newHypothesisTestDeliveryOptionGroupOneStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHypothesisTestDeliveryOptionGroupTwo applies the HasEdge predicate on the "hypothesis_test_delivery_option_group_two" edge.
func HasHypothesisTestDeliveryOptionGroupTwo() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, HypothesisTestDeliveryOptionGroupTwoTable, HypothesisTestDeliveryOptionGroupTwoPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHypothesisTestDeliveryOptionGroupTwoWith applies the HasEdge predicate on the "hypothesis_test_delivery_option_group_two" edge with a given conditions (other predicates).
func HasHypothesisTestDeliveryOptionGroupTwoWith(preds ...predicate.HypothesisTestDeliveryOption) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newHypothesisTestDeliveryOptionGroupTwoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHypothesisTestDeliveryOptionLookup applies the HasEdge predicate on the "hypothesis_test_delivery_option_lookup" edge.
func HasHypothesisTestDeliveryOptionLookup() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HypothesisTestDeliveryOptionLookupTable, HypothesisTestDeliveryOptionLookupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHypothesisTestDeliveryOptionLookupWith applies the HasEdge predicate on the "hypothesis_test_delivery_option_lookup" edge with a given conditions (other predicates).
func HasHypothesisTestDeliveryOptionLookupWith(preds ...predicate.HypothesisTestDeliveryOptionLookup) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newHypothesisTestDeliveryOptionLookupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClickCollectLocation applies the HasEdge predicate on the "click_collect_location" edge.
func HasClickCollectLocation() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ClickCollectLocationTable, ClickCollectLocationPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClickCollectLocationWith applies the HasEdge predicate on the "click_collect_location" edge with a given conditions (other predicates).
func HasClickCollectLocationWith(preds ...predicate.Location) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newClickCollectLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmailClickCollectAtStore applies the HasEdge predicate on the "email_click_collect_at_store" edge.
func HasEmailClickCollectAtStore() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmailClickCollectAtStoreTable, EmailClickCollectAtStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailClickCollectAtStoreWith applies the HasEdge predicate on the "email_click_collect_at_store" edge with a given conditions (other predicates).
func HasEmailClickCollectAtStoreWith(preds ...predicate.EmailTemplate) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newEmailClickCollectAtStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConsolidation applies the HasEdge predicate on the "consolidation" edge.
func HasConsolidation() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ConsolidationTable, ConsolidationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsolidationWith applies the HasEdge predicate on the "consolidation" edge with a given conditions (other predicates).
func HasConsolidationWith(preds ...predicate.Consolidation) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newConsolidationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultPackaging applies the HasEdge predicate on the "default_packaging" edge.
func HasDefaultPackaging() predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DefaultPackagingTable, DefaultPackagingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultPackagingWith applies the HasEdge predicate on the "default_packaging" edge with a given conditions (other predicates).
func HasDefaultPackagingWith(preds ...predicate.Packaging) predicate.DeliveryOption {
	return predicate.DeliveryOption(func(s *sql.Selector) {
		step := newDefaultPackagingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeliveryOption) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeliveryOption) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeliveryOption) predicate.DeliveryOption {
	return predicate.DeliveryOption(sql.NotPredicates(p))
}
