// Code generated by ent, DO NOT EDIT.

package deliveryoption

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deliveryoption type in the database.
	Label = "delivery_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldArchivedAt holds the string denoting the archived_at field in the database.
	FieldArchivedAt = "archived_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldClickOptionDisplayCount holds the string denoting the click_option_display_count field in the database.
	FieldClickOptionDisplayCount = "click_option_display_count"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldClickCollect holds the string denoting the click_collect field in the database.
	FieldClickCollect = "click_collect"
	// FieldOverrideSenderAddress holds the string denoting the override_sender_address field in the database.
	FieldOverrideSenderAddress = "override_sender_address"
	// FieldOverrideReturnAddress holds the string denoting the override_return_address field in the database.
	FieldOverrideReturnAddress = "override_return_address"
	// FieldHideDeliveryOption holds the string denoting the hide_delivery_option field in the database.
	FieldHideDeliveryOption = "hide_delivery_option"
	// FieldDeliveryEstimateFrom holds the string denoting the delivery_estimate_from field in the database.
	FieldDeliveryEstimateFrom = "delivery_estimate_from"
	// FieldDeliveryEstimateTo holds the string denoting the delivery_estimate_to field in the database.
	FieldDeliveryEstimateTo = "delivery_estimate_to"
	// FieldWebshipperIntegration holds the string denoting the webshipper_integration field in the database.
	FieldWebshipperIntegration = "webshipper_integration"
	// FieldWebshipperID holds the string denoting the webshipper_id field in the database.
	FieldWebshipperID = "webshipper_id"
	// FieldShipmondoIntegration holds the string denoting the shipmondo_integration field in the database.
	FieldShipmondoIntegration = "shipmondo_integration"
	// FieldShipmondoDeliveryOption holds the string denoting the shipmondo_delivery_option field in the database.
	FieldShipmondoDeliveryOption = "shipmondo_delivery_option"
	// FieldCustomsEnabled holds the string denoting the customs_enabled field in the database.
	FieldCustomsEnabled = "customs_enabled"
	// FieldCustomsSigner holds the string denoting the customs_signer field in the database.
	FieldCustomsSigner = "customs_signer"
	// FieldHideIfCompanyEmpty holds the string denoting the hide_if_company_empty field in the database.
	FieldHideIfCompanyEmpty = "hide_if_company_empty"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCarrier holds the string denoting the carrier edge name in mutations.
	EdgeCarrier = "carrier"
	// EdgeDeliveryRule holds the string denoting the delivery_rule edge name in mutations.
	EdgeDeliveryRule = "delivery_rule"
	// EdgeDeliveryOptionDAO holds the string denoting the delivery_option_dao edge name in mutations.
	EdgeDeliveryOptionDAO = "delivery_option_dao"
	// EdgeDeliveryOptionDF holds the string denoting the delivery_option_df edge name in mutations.
	EdgeDeliveryOptionDF = "delivery_option_df"
	// EdgeDeliveryOptionDSV holds the string denoting the delivery_option_dsv edge name in mutations.
	EdgeDeliveryOptionDSV = "delivery_option_dsv"
	// EdgeDeliveryOptionEasyPost holds the string denoting the delivery_option_easy_post edge name in mutations.
	EdgeDeliveryOptionEasyPost = "delivery_option_easy_post"
	// EdgeDeliveryOptionGLS holds the string denoting the delivery_option_gls edge name in mutations.
	EdgeDeliveryOptionGLS = "delivery_option_gls"
	// EdgeDeliveryOptionPostNord holds the string denoting the delivery_option_post_nord edge name in mutations.
	EdgeDeliveryOptionPostNord = "delivery_option_post_nord"
	// EdgeDeliveryOptionUSPS holds the string denoting the delivery_option_usps edge name in mutations.
	EdgeDeliveryOptionUSPS = "delivery_option_usps"
	// EdgeDeliveryOptionBring holds the string denoting the delivery_option_bring edge name in mutations.
	EdgeDeliveryOptionBring = "delivery_option_bring"
	// EdgeReturnPortals holds the string denoting the return_portals edge name in mutations.
	EdgeReturnPortals = "return_portals"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// EdgeReturnColli holds the string denoting the return_colli edge name in mutations.
	EdgeReturnColli = "return_colli"
	// EdgeCarrierService holds the string denoting the carrier_service edge name in mutations.
	EdgeCarrierService = "carrier_service"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// EdgeConnectionDefault holds the string denoting the connection_default edge name in mutations.
	EdgeConnectionDefault = "connection_default"
	// EdgeHypothesisTestDeliveryOptionGroupOne holds the string denoting the hypothesis_test_delivery_option_group_one edge name in mutations.
	EdgeHypothesisTestDeliveryOptionGroupOne = "hypothesis_test_delivery_option_group_one"
	// EdgeHypothesisTestDeliveryOptionGroupTwo holds the string denoting the hypothesis_test_delivery_option_group_two edge name in mutations.
	EdgeHypothesisTestDeliveryOptionGroupTwo = "hypothesis_test_delivery_option_group_two"
	// EdgeHypothesisTestDeliveryOptionLookup holds the string denoting the hypothesis_test_delivery_option_lookup edge name in mutations.
	EdgeHypothesisTestDeliveryOptionLookup = "hypothesis_test_delivery_option_lookup"
	// EdgeClickCollectLocation holds the string denoting the click_collect_location edge name in mutations.
	EdgeClickCollectLocation = "click_collect_location"
	// EdgeEmailClickCollectAtStore holds the string denoting the email_click_collect_at_store edge name in mutations.
	EdgeEmailClickCollectAtStore = "email_click_collect_at_store"
	// EdgeConsolidation holds the string denoting the consolidation edge name in mutations.
	EdgeConsolidation = "consolidation"
	// EdgeDefaultPackaging holds the string denoting the default_packaging edge name in mutations.
	EdgeDefaultPackaging = "default_packaging"
	// Table holds the table name of the deliveryoption in the database.
	Table = "delivery_options"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "delivery_options"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CarrierTable is the table that holds the carrier relation/edge.
	CarrierTable = "delivery_options"
	// CarrierInverseTable is the table name for the Carrier entity.
	// It exists in this package in order to avoid circular dependency with the "carrier" package.
	CarrierInverseTable = "carriers"
	// CarrierColumn is the table column denoting the carrier relation/edge.
	CarrierColumn = "delivery_option_carrier"
	// DeliveryRuleTable is the table that holds the delivery_rule relation/edge.
	DeliveryRuleTable = "delivery_rules"
	// DeliveryRuleInverseTable is the table name for the DeliveryRule entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryrule" package.
	DeliveryRuleInverseTable = "delivery_rules"
	// DeliveryRuleColumn is the table column denoting the delivery_rule relation/edge.
	DeliveryRuleColumn = "delivery_option_delivery_rule"
	// DeliveryOptionDAOTable is the table that holds the delivery_option_dao relation/edge.
	DeliveryOptionDAOTable = "delivery_option_da_os"
	// DeliveryOptionDAOInverseTable is the table name for the DeliveryOptionDAO entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptiondao" package.
	DeliveryOptionDAOInverseTable = "delivery_option_da_os"
	// DeliveryOptionDAOColumn is the table column denoting the delivery_option_dao relation/edge.
	DeliveryOptionDAOColumn = "delivery_option_delivery_option_dao"
	// DeliveryOptionDFTable is the table that holds the delivery_option_df relation/edge.
	DeliveryOptionDFTable = "delivery_option_dfs"
	// DeliveryOptionDFInverseTable is the table name for the DeliveryOptionDF entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptiondf" package.
	DeliveryOptionDFInverseTable = "delivery_option_dfs"
	// DeliveryOptionDFColumn is the table column denoting the delivery_option_df relation/edge.
	DeliveryOptionDFColumn = "delivery_option_delivery_option_df"
	// DeliveryOptionDSVTable is the table that holds the delivery_option_dsv relation/edge.
	DeliveryOptionDSVTable = "delivery_option_ds_vs"
	// DeliveryOptionDSVInverseTable is the table name for the DeliveryOptionDSV entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptiondsv" package.
	DeliveryOptionDSVInverseTable = "delivery_option_ds_vs"
	// DeliveryOptionDSVColumn is the table column denoting the delivery_option_dsv relation/edge.
	DeliveryOptionDSVColumn = "delivery_option_delivery_option_dsv"
	// DeliveryOptionEasyPostTable is the table that holds the delivery_option_easy_post relation/edge.
	DeliveryOptionEasyPostTable = "delivery_option_easy_posts"
	// DeliveryOptionEasyPostInverseTable is the table name for the DeliveryOptionEasyPost entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptioneasypost" package.
	DeliveryOptionEasyPostInverseTable = "delivery_option_easy_posts"
	// DeliveryOptionEasyPostColumn is the table column denoting the delivery_option_easy_post relation/edge.
	DeliveryOptionEasyPostColumn = "delivery_option_delivery_option_easy_post"
	// DeliveryOptionGLSTable is the table that holds the delivery_option_gls relation/edge.
	DeliveryOptionGLSTable = "delivery_option_gl_ss"
	// DeliveryOptionGLSInverseTable is the table name for the DeliveryOptionGLS entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptiongls" package.
	DeliveryOptionGLSInverseTable = "delivery_option_gl_ss"
	// DeliveryOptionGLSColumn is the table column denoting the delivery_option_gls relation/edge.
	DeliveryOptionGLSColumn = "delivery_option_delivery_option_gls"
	// DeliveryOptionPostNordTable is the table that holds the delivery_option_post_nord relation/edge.
	DeliveryOptionPostNordTable = "delivery_option_post_nords"
	// DeliveryOptionPostNordInverseTable is the table name for the DeliveryOptionPostNord entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptionpostnord" package.
	DeliveryOptionPostNordInverseTable = "delivery_option_post_nords"
	// DeliveryOptionPostNordColumn is the table column denoting the delivery_option_post_nord relation/edge.
	DeliveryOptionPostNordColumn = "delivery_option_delivery_option_post_nord"
	// DeliveryOptionUSPSTable is the table that holds the delivery_option_usps relation/edge.
	DeliveryOptionUSPSTable = "delivery_option_usp_ss"
	// DeliveryOptionUSPSInverseTable is the table name for the DeliveryOptionUSPS entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptionusps" package.
	DeliveryOptionUSPSInverseTable = "delivery_option_usp_ss"
	// DeliveryOptionUSPSColumn is the table column denoting the delivery_option_usps relation/edge.
	DeliveryOptionUSPSColumn = "delivery_option_delivery_option_usps"
	// DeliveryOptionBringTable is the table that holds the delivery_option_bring relation/edge.
	DeliveryOptionBringTable = "delivery_option_brings"
	// DeliveryOptionBringInverseTable is the table name for the DeliveryOptionBring entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptionbring" package.
	DeliveryOptionBringInverseTable = "delivery_option_brings"
	// DeliveryOptionBringColumn is the table column denoting the delivery_option_bring relation/edge.
	DeliveryOptionBringColumn = "delivery_option_delivery_option_bring"
	// ReturnPortalsTable is the table that holds the return_portals relation/edge. The primary key declared below.
	ReturnPortalsTable = "return_portal_delivery_options"
	// ReturnPortalsInverseTable is the table name for the ReturnPortal entity.
	// It exists in this package in order to avoid circular dependency with the "returnportal" package.
	ReturnPortalsInverseTable = "return_portals"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "collis"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "colli_delivery_option"
	// ReturnColliTable is the table that holds the return_colli relation/edge.
	ReturnColliTable = "return_collis"
	// ReturnColliInverseTable is the table name for the ReturnColli entity.
	// It exists in this package in order to avoid circular dependency with the "returncolli" package.
	ReturnColliInverseTable = "return_collis"
	// ReturnColliColumn is the table column denoting the return_colli relation/edge.
	ReturnColliColumn = "return_colli_delivery_option"
	// CarrierServiceTable is the table that holds the carrier_service relation/edge.
	CarrierServiceTable = "delivery_options"
	// CarrierServiceInverseTable is the table name for the CarrierService entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservice" package.
	CarrierServiceInverseTable = "carrier_services"
	// CarrierServiceColumn is the table column denoting the carrier_service relation/edge.
	CarrierServiceColumn = "delivery_option_carrier_service"
	// ConnectionTable is the table that holds the connection relation/edge.
	ConnectionTable = "delivery_options"
	// ConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionInverseTable = "connections"
	// ConnectionColumn is the table column denoting the connection relation/edge.
	ConnectionColumn = "connection_delivery_option"
	// ConnectionDefaultTable is the table that holds the connection_default relation/edge.
	ConnectionDefaultTable = "delivery_options"
	// ConnectionDefaultInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionDefaultInverseTable = "connections"
	// ConnectionDefaultColumn is the table column denoting the connection_default relation/edge.
	ConnectionDefaultColumn = "connection_default_delivery_option"
	// HypothesisTestDeliveryOptionGroupOneTable is the table that holds the hypothesis_test_delivery_option_group_one relation/edge. The primary key declared below.
	HypothesisTestDeliveryOptionGroupOneTable = "hypothesis_test_delivery_option_delivery_option_group_one"
	// HypothesisTestDeliveryOptionGroupOneInverseTable is the table name for the HypothesisTestDeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistestdeliveryoption" package.
	HypothesisTestDeliveryOptionGroupOneInverseTable = "hypothesis_test_delivery_options"
	// HypothesisTestDeliveryOptionGroupTwoTable is the table that holds the hypothesis_test_delivery_option_group_two relation/edge. The primary key declared below.
	HypothesisTestDeliveryOptionGroupTwoTable = "hypothesis_test_delivery_option_delivery_option_group_two"
	// HypothesisTestDeliveryOptionGroupTwoInverseTable is the table name for the HypothesisTestDeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistestdeliveryoption" package.
	HypothesisTestDeliveryOptionGroupTwoInverseTable = "hypothesis_test_delivery_options"
	// HypothesisTestDeliveryOptionLookupTable is the table that holds the hypothesis_test_delivery_option_lookup relation/edge.
	HypothesisTestDeliveryOptionLookupTable = "hypothesis_test_delivery_option_lookups"
	// HypothesisTestDeliveryOptionLookupInverseTable is the table name for the HypothesisTestDeliveryOptionLookup entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistestdeliveryoptionlookup" package.
	HypothesisTestDeliveryOptionLookupInverseTable = "hypothesis_test_delivery_option_lookups"
	// HypothesisTestDeliveryOptionLookupColumn is the table column denoting the hypothesis_test_delivery_option_lookup relation/edge.
	HypothesisTestDeliveryOptionLookupColumn = "hypothesis_test_delivery_option_lookup_delivery_option"
	// ClickCollectLocationTable is the table that holds the click_collect_location relation/edge. The primary key declared below.
	ClickCollectLocationTable = "delivery_option_click_collect_location"
	// ClickCollectLocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	ClickCollectLocationInverseTable = "locations"
	// EmailClickCollectAtStoreTable is the table that holds the email_click_collect_at_store relation/edge.
	EmailClickCollectAtStoreTable = "delivery_options"
	// EmailClickCollectAtStoreInverseTable is the table name for the EmailTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "emailtemplate" package.
	EmailClickCollectAtStoreInverseTable = "email_templates"
	// EmailClickCollectAtStoreColumn is the table column denoting the email_click_collect_at_store relation/edge.
	EmailClickCollectAtStoreColumn = "delivery_option_email_click_collect_at_store"
	// ConsolidationTable is the table that holds the consolidation relation/edge.
	ConsolidationTable = "consolidations"
	// ConsolidationInverseTable is the table name for the Consolidation entity.
	// It exists in this package in order to avoid circular dependency with the "consolidation" package.
	ConsolidationInverseTable = "consolidations"
	// ConsolidationColumn is the table column denoting the consolidation relation/edge.
	ConsolidationColumn = "consolidation_delivery_option"
	// DefaultPackagingTable is the table that holds the default_packaging relation/edge.
	DefaultPackagingTable = "delivery_options"
	// DefaultPackagingInverseTable is the table name for the Packaging entity.
	// It exists in this package in order to avoid circular dependency with the "packaging" package.
	DefaultPackagingInverseTable = "packagings"
	// DefaultPackagingColumn is the table column denoting the default_packaging relation/edge.
	DefaultPackagingColumn = "delivery_option_default_packaging"
)

// Columns holds all SQL columns for deliveryoption fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldArchivedAt,
	FieldName,
	FieldSortOrder,
	FieldClickOptionDisplayCount,
	FieldDescription,
	FieldClickCollect,
	FieldOverrideSenderAddress,
	FieldOverrideReturnAddress,
	FieldHideDeliveryOption,
	FieldDeliveryEstimateFrom,
	FieldDeliveryEstimateTo,
	FieldWebshipperIntegration,
	FieldWebshipperID,
	FieldShipmondoIntegration,
	FieldShipmondoDeliveryOption,
	FieldCustomsEnabled,
	FieldCustomsSigner,
	FieldHideIfCompanyEmpty,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "delivery_options"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"connection_delivery_option",
	"connection_default_delivery_option",
	"delivery_option_carrier",
	"delivery_option_carrier_service",
	"delivery_option_email_click_collect_at_store",
	"delivery_option_default_packaging",
}

var (
	// ReturnPortalsPrimaryKey and ReturnPortalsColumn2 are the table columns denoting the
	// primary key for the return_portals relation (M2M).
	ReturnPortalsPrimaryKey = []string{"return_portal_id", "delivery_option_id"}
	// HypothesisTestDeliveryOptionGroupOnePrimaryKey and HypothesisTestDeliveryOptionGroupOneColumn2 are the table columns denoting the
	// primary key for the hypothesis_test_delivery_option_group_one relation (M2M).
	HypothesisTestDeliveryOptionGroupOnePrimaryKey = []string{"hypothesis_test_delivery_option_id", "delivery_option_id"}
	// HypothesisTestDeliveryOptionGroupTwoPrimaryKey and HypothesisTestDeliveryOptionGroupTwoColumn2 are the table columns denoting the
	// primary key for the hypothesis_test_delivery_option_group_two relation (M2M).
	HypothesisTestDeliveryOptionGroupTwoPrimaryKey = []string{"hypothesis_test_delivery_option_id", "delivery_option_id"}
	// ClickCollectLocationPrimaryKey and ClickCollectLocationColumn2 are the table columns denoting the
	// primary key for the click_collect_location relation (M2M).
	ClickCollectLocationPrimaryKey = []string{"delivery_option_id", "location_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultClickOptionDisplayCount holds the default value on creation for the "click_option_display_count" field.
	DefaultClickOptionDisplayCount int
	// ClickOptionDisplayCountValidator is a validator for the "click_option_display_count" field. It is called by the builders before save.
	ClickOptionDisplayCountValidator func(int) error
	// DefaultClickCollect holds the default value on creation for the "click_collect" field.
	DefaultClickCollect bool
	// DefaultOverrideSenderAddress holds the default value on creation for the "override_sender_address" field.
	DefaultOverrideSenderAddress bool
	// DefaultOverrideReturnAddress holds the default value on creation for the "override_return_address" field.
	DefaultOverrideReturnAddress bool
	// DefaultHideDeliveryOption holds the default value on creation for the "hide_delivery_option" field.
	DefaultHideDeliveryOption bool
	// DefaultWebshipperIntegration holds the default value on creation for the "webshipper_integration" field.
	DefaultWebshipperIntegration bool
	// DefaultWebshipperID holds the default value on creation for the "webshipper_id" field.
	DefaultWebshipperID int
	// WebshipperIDValidator is a validator for the "webshipper_id" field. It is called by the builders before save.
	WebshipperIDValidator func(int) error
	// DefaultShipmondoIntegration holds the default value on creation for the "shipmondo_integration" field.
	DefaultShipmondoIntegration bool
	// DefaultCustomsEnabled holds the default value on creation for the "customs_enabled" field.
	DefaultCustomsEnabled bool
	// DefaultHideIfCompanyEmpty holds the default value on creation for the "hide_if_company_empty" field.
	DefaultHideIfCompanyEmpty bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the DeliveryOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByArchivedAt orders the results by the archived_at field.
func ByArchivedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchivedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByClickOptionDisplayCount orders the results by the click_option_display_count field.
func ByClickOptionDisplayCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClickOptionDisplayCount, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByClickCollect orders the results by the click_collect field.
func ByClickCollect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClickCollect, opts...).ToFunc()
}

// ByOverrideSenderAddress orders the results by the override_sender_address field.
func ByOverrideSenderAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverrideSenderAddress, opts...).ToFunc()
}

// ByOverrideReturnAddress orders the results by the override_return_address field.
func ByOverrideReturnAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverrideReturnAddress, opts...).ToFunc()
}

// ByHideDeliveryOption orders the results by the hide_delivery_option field.
func ByHideDeliveryOption(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideDeliveryOption, opts...).ToFunc()
}

// ByDeliveryEstimateFrom orders the results by the delivery_estimate_from field.
func ByDeliveryEstimateFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryEstimateFrom, opts...).ToFunc()
}

// ByDeliveryEstimateTo orders the results by the delivery_estimate_to field.
func ByDeliveryEstimateTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryEstimateTo, opts...).ToFunc()
}

// ByWebshipperIntegration orders the results by the webshipper_integration field.
func ByWebshipperIntegration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebshipperIntegration, opts...).ToFunc()
}

// ByWebshipperID orders the results by the webshipper_id field.
func ByWebshipperID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebshipperID, opts...).ToFunc()
}

// ByShipmondoIntegration orders the results by the shipmondo_integration field.
func ByShipmondoIntegration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmondoIntegration, opts...).ToFunc()
}

// ByShipmondoDeliveryOption orders the results by the shipmondo_delivery_option field.
func ByShipmondoDeliveryOption(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmondoDeliveryOption, opts...).ToFunc()
}

// ByCustomsEnabled orders the results by the customs_enabled field.
func ByCustomsEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomsEnabled, opts...).ToFunc()
}

// ByCustomsSigner orders the results by the customs_signer field.
func ByCustomsSigner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomsSigner, opts...).ToFunc()
}

// ByHideIfCompanyEmpty orders the results by the hide_if_company_empty field.
func ByHideIfCompanyEmpty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideIfCompanyEmpty, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierField orders the results by carrier field.
func ByCarrierField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryRuleCount orders the results by delivery_rule count.
func ByDeliveryRuleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryRuleStep(), opts...)
	}
}

// ByDeliveryRule orders the results by delivery_rule terms.
func ByDeliveryRule(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryRuleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionDAOField orders the results by delivery_option_dao field.
func ByDeliveryOptionDAOField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionDAOStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionDFField orders the results by delivery_option_df field.
func ByDeliveryOptionDFField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionDFStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionDSVField orders the results by delivery_option_dsv field.
func ByDeliveryOptionDSVField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionDSVStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionEasyPostField orders the results by delivery_option_easy_post field.
func ByDeliveryOptionEasyPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionEasyPostStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionGLSField orders the results by delivery_option_gls field.
func ByDeliveryOptionGLSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionGLSStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionPostNordField orders the results by delivery_option_post_nord field.
func ByDeliveryOptionPostNordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionPostNordStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionUSPSField orders the results by delivery_option_usps field.
func ByDeliveryOptionUSPSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionUSPSStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionBringField orders the results by delivery_option_bring field.
func ByDeliveryOptionBringField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionBringStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnPortalsCount orders the results by return_portals count.
func ByReturnPortalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnPortalsStep(), opts...)
	}
}

// ByReturnPortals orders the results by return_portals terms.
func ByReturnPortals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByColliCount orders the results by colli count.
func ByColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newColliStep(), opts...)
	}
}

// ByColli orders the results by colli terms.
func ByColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnColliCount orders the results by return_colli count.
func ByReturnColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnColliStep(), opts...)
	}
}

// ByReturnColli orders the results by return_colli terms.
func ByReturnColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarrierServiceField orders the results by carrier_service field.
func ByCarrierServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByConnectionField orders the results by connection field.
func ByConnectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionStep(), sql.OrderByField(field, opts...))
	}
}

// ByConnectionDefaultField orders the results by connection_default field.
func ByConnectionDefaultField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionDefaultStep(), sql.OrderByField(field, opts...))
	}
}

// ByHypothesisTestDeliveryOptionGroupOneCount orders the results by hypothesis_test_delivery_option_group_one count.
func ByHypothesisTestDeliveryOptionGroupOneCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHypothesisTestDeliveryOptionGroupOneStep(), opts...)
	}
}

// ByHypothesisTestDeliveryOptionGroupOne orders the results by hypothesis_test_delivery_option_group_one terms.
func ByHypothesisTestDeliveryOptionGroupOne(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestDeliveryOptionGroupOneStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHypothesisTestDeliveryOptionGroupTwoCount orders the results by hypothesis_test_delivery_option_group_two count.
func ByHypothesisTestDeliveryOptionGroupTwoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHypothesisTestDeliveryOptionGroupTwoStep(), opts...)
	}
}

// ByHypothesisTestDeliveryOptionGroupTwo orders the results by hypothesis_test_delivery_option_group_two terms.
func ByHypothesisTestDeliveryOptionGroupTwo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestDeliveryOptionGroupTwoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHypothesisTestDeliveryOptionLookupCount orders the results by hypothesis_test_delivery_option_lookup count.
func ByHypothesisTestDeliveryOptionLookupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHypothesisTestDeliveryOptionLookupStep(), opts...)
	}
}

// ByHypothesisTestDeliveryOptionLookup orders the results by hypothesis_test_delivery_option_lookup terms.
func ByHypothesisTestDeliveryOptionLookup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestDeliveryOptionLookupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClickCollectLocationCount orders the results by click_collect_location count.
func ByClickCollectLocationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClickCollectLocationStep(), opts...)
	}
}

// ByClickCollectLocation orders the results by click_collect_location terms.
func ByClickCollectLocation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClickCollectLocationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmailClickCollectAtStoreField orders the results by email_click_collect_at_store field.
func ByEmailClickCollectAtStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailClickCollectAtStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByConsolidationCount orders the results by consolidation count.
func ByConsolidationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConsolidationStep(), opts...)
	}
}

// ByConsolidation orders the results by consolidation terms.
func ByConsolidation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsolidationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDefaultPackagingField orders the results by default_packaging field.
func ByDefaultPackagingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDefaultPackagingStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newCarrierStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CarrierTable, CarrierColumn),
	)
}
func newDeliveryRuleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryRuleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeliveryRuleTable, DeliveryRuleColumn),
	)
}
func newDeliveryOptionDAOStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionDAOInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionDAOTable, DeliveryOptionDAOColumn),
	)
}
func newDeliveryOptionDFStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionDFInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionDFTable, DeliveryOptionDFColumn),
	)
}
func newDeliveryOptionDSVStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionDSVInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionDSVTable, DeliveryOptionDSVColumn),
	)
}
func newDeliveryOptionEasyPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionEasyPostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionEasyPostTable, DeliveryOptionEasyPostColumn),
	)
}
func newDeliveryOptionGLSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionGLSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionGLSTable, DeliveryOptionGLSColumn),
	)
}
func newDeliveryOptionPostNordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionPostNordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionPostNordTable, DeliveryOptionPostNordColumn),
	)
}
func newDeliveryOptionUSPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionUSPSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionUSPSTable, DeliveryOptionUSPSColumn),
	)
}
func newDeliveryOptionBringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionBringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DeliveryOptionBringTable, DeliveryOptionBringColumn),
	)
}
func newReturnPortalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReturnPortalsTable, ReturnPortalsPrimaryKey...),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ColliTable, ColliColumn),
	)
}
func newReturnColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnColliTable, ReturnColliColumn),
	)
}
func newCarrierServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CarrierServiceTable, CarrierServiceColumn),
	)
}
func newConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConnectionTable, ConnectionColumn),
	)
}
func newConnectionDefaultStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionDefaultInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ConnectionDefaultTable, ConnectionDefaultColumn),
	)
}
func newHypothesisTestDeliveryOptionGroupOneStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestDeliveryOptionGroupOneInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, HypothesisTestDeliveryOptionGroupOneTable, HypothesisTestDeliveryOptionGroupOnePrimaryKey...),
	)
}
func newHypothesisTestDeliveryOptionGroupTwoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestDeliveryOptionGroupTwoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, HypothesisTestDeliveryOptionGroupTwoTable, HypothesisTestDeliveryOptionGroupTwoPrimaryKey...),
	)
}
func newHypothesisTestDeliveryOptionLookupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestDeliveryOptionLookupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HypothesisTestDeliveryOptionLookupTable, HypothesisTestDeliveryOptionLookupColumn),
	)
}
func newClickCollectLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClickCollectLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ClickCollectLocationTable, ClickCollectLocationPrimaryKey...),
	)
}
func newEmailClickCollectAtStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailClickCollectAtStoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmailClickCollectAtStoreTable, EmailClickCollectAtStoreColumn),
	)
}
func newConsolidationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsolidationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ConsolidationTable, ConsolidationColumn),
	)
}
func newDefaultPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DefaultPackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DefaultPackagingTable, DefaultPackagingColumn),
	)
}
