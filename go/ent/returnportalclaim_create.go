// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnPortalClaimCreate is the builder for creating a ReturnPortalClaim entity.
type ReturnPortalClaimCreate struct {
	config
	mutation *ReturnPortalClaimMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (rpcc *ReturnPortalClaimCreate) SetTenantID(pu pulid.ID) *ReturnPortalClaimCreate {
	rpcc.mutation.SetTenantID(pu)
	return rpcc
}

// SetName sets the "name" field.
func (rpcc *ReturnPortalClaimCreate) SetName(s string) *ReturnPortalClaimCreate {
	rpcc.mutation.SetName(s)
	return rpcc
}

// SetDescription sets the "description" field.
func (rpcc *ReturnPortalClaimCreate) SetDescription(s string) *ReturnPortalClaimCreate {
	rpcc.mutation.SetDescription(s)
	return rpcc
}

// SetRestockable sets the "restockable" field.
func (rpcc *ReturnPortalClaimCreate) SetRestockable(b bool) *ReturnPortalClaimCreate {
	rpcc.mutation.SetRestockable(b)
	return rpcc
}

// SetArchived sets the "archived" field.
func (rpcc *ReturnPortalClaimCreate) SetArchived(b bool) *ReturnPortalClaimCreate {
	rpcc.mutation.SetArchived(b)
	return rpcc
}

// SetID sets the "id" field.
func (rpcc *ReturnPortalClaimCreate) SetID(pu pulid.ID) *ReturnPortalClaimCreate {
	rpcc.mutation.SetID(pu)
	return rpcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rpcc *ReturnPortalClaimCreate) SetNillableID(pu *pulid.ID) *ReturnPortalClaimCreate {
	if pu != nil {
		rpcc.SetID(*pu)
	}
	return rpcc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rpcc *ReturnPortalClaimCreate) SetTenant(t *Tenant) *ReturnPortalClaimCreate {
	return rpcc.SetTenantID(t.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (rpcc *ReturnPortalClaimCreate) SetReturnPortalID(id pulid.ID) *ReturnPortalClaimCreate {
	rpcc.mutation.SetReturnPortalID(id)
	return rpcc
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (rpcc *ReturnPortalClaimCreate) SetReturnPortal(r *ReturnPortal) *ReturnPortalClaimCreate {
	return rpcc.SetReturnPortalID(r.ID)
}

// SetReturnLocationID sets the "return_location" edge to the Location entity by ID.
func (rpcc *ReturnPortalClaimCreate) SetReturnLocationID(id pulid.ID) *ReturnPortalClaimCreate {
	rpcc.mutation.SetReturnLocationID(id)
	return rpcc
}

// SetNillableReturnLocationID sets the "return_location" edge to the Location entity by ID if the given value is not nil.
func (rpcc *ReturnPortalClaimCreate) SetNillableReturnLocationID(id *pulid.ID) *ReturnPortalClaimCreate {
	if id != nil {
		rpcc = rpcc.SetReturnLocationID(*id)
	}
	return rpcc
}

// SetReturnLocation sets the "return_location" edge to the Location entity.
func (rpcc *ReturnPortalClaimCreate) SetReturnLocation(l *Location) *ReturnPortalClaimCreate {
	return rpcc.SetReturnLocationID(l.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (rpcc *ReturnPortalClaimCreate) AddReturnOrderLineIDs(ids ...pulid.ID) *ReturnPortalClaimCreate {
	rpcc.mutation.AddReturnOrderLineIDs(ids...)
	return rpcc
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (rpcc *ReturnPortalClaimCreate) AddReturnOrderLine(r ...*ReturnOrderLine) *ReturnPortalClaimCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpcc.AddReturnOrderLineIDs(ids...)
}

// Mutation returns the ReturnPortalClaimMutation object of the builder.
func (rpcc *ReturnPortalClaimCreate) Mutation() *ReturnPortalClaimMutation {
	return rpcc.mutation
}

// Save creates the ReturnPortalClaim in the database.
func (rpcc *ReturnPortalClaimCreate) Save(ctx context.Context) (*ReturnPortalClaim, error) {
	if err := rpcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rpcc.sqlSave, rpcc.mutation, rpcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpcc *ReturnPortalClaimCreate) SaveX(ctx context.Context) *ReturnPortalClaim {
	v, err := rpcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcc *ReturnPortalClaimCreate) Exec(ctx context.Context) error {
	_, err := rpcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcc *ReturnPortalClaimCreate) ExecX(ctx context.Context) {
	if err := rpcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpcc *ReturnPortalClaimCreate) defaults() error {
	if _, ok := rpcc.mutation.ID(); !ok {
		if returnportalclaim.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized returnportalclaim.DefaultID (forgotten import ent/runtime?)")
		}
		v := returnportalclaim.DefaultID()
		rpcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rpcc *ReturnPortalClaimCreate) check() error {
	if _, ok := rpcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ReturnPortalClaim.tenant_id"`)}
	}
	if _, ok := rpcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ReturnPortalClaim.name"`)}
	}
	if _, ok := rpcc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ReturnPortalClaim.description"`)}
	}
	if _, ok := rpcc.mutation.Restockable(); !ok {
		return &ValidationError{Name: "restockable", err: errors.New(`ent: missing required field "ReturnPortalClaim.restockable"`)}
	}
	if _, ok := rpcc.mutation.Archived(); !ok {
		return &ValidationError{Name: "archived", err: errors.New(`ent: missing required field "ReturnPortalClaim.archived"`)}
	}
	if len(rpcc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ReturnPortalClaim.tenant"`)}
	}
	if len(rpcc.mutation.ReturnPortalIDs()) == 0 {
		return &ValidationError{Name: "return_portal", err: errors.New(`ent: missing required edge "ReturnPortalClaim.return_portal"`)}
	}
	return nil
}

func (rpcc *ReturnPortalClaimCreate) sqlSave(ctx context.Context) (*ReturnPortalClaim, error) {
	if err := rpcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rpcc.mutation.id = &_node.ID
	rpcc.mutation.done = true
	return _node, nil
}

func (rpcc *ReturnPortalClaimCreate) createSpec() (*ReturnPortalClaim, *sqlgraph.CreateSpec) {
	var (
		_node = &ReturnPortalClaim{config: rpcc.config}
		_spec = sqlgraph.NewCreateSpec(returnportalclaim.Table, sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString))
	)
	_spec.OnConflict = rpcc.conflict
	if id, ok := rpcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rpcc.mutation.Name(); ok {
		_spec.SetField(returnportalclaim.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rpcc.mutation.Description(); ok {
		_spec.SetField(returnportalclaim.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rpcc.mutation.Restockable(); ok {
		_spec.SetField(returnportalclaim.FieldRestockable, field.TypeBool, value)
		_node.Restockable = value
	}
	if value, ok := rpcc.mutation.Archived(); ok {
		_spec.SetField(returnportalclaim.FieldArchived, field.TypeBool, value)
		_node.Archived = value
	}
	if nodes := rpcc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.TenantTable,
			Columns: []string{returnportalclaim.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpcc.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnportalclaim.ReturnPortalTable,
			Columns: []string{returnportalclaim.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_portal_return_portal_claim = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpcc.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.ReturnLocationTable,
			Columns: []string{returnportalclaim.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_portal_claim_return_location = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpcc.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportalclaim.ReturnOrderLineTable,
			Columns: []string{returnportalclaim.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnPortalClaim.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnPortalClaimUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rpcc *ReturnPortalClaimCreate) OnConflict(opts ...sql.ConflictOption) *ReturnPortalClaimUpsertOne {
	rpcc.conflict = opts
	return &ReturnPortalClaimUpsertOne{
		create: rpcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnPortalClaim.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpcc *ReturnPortalClaimCreate) OnConflictColumns(columns ...string) *ReturnPortalClaimUpsertOne {
	rpcc.conflict = append(rpcc.conflict, sql.ConflictColumns(columns...))
	return &ReturnPortalClaimUpsertOne{
		create: rpcc,
	}
}

type (
	// ReturnPortalClaimUpsertOne is the builder for "upsert"-ing
	//  one ReturnPortalClaim node.
	ReturnPortalClaimUpsertOne struct {
		create *ReturnPortalClaimCreate
	}

	// ReturnPortalClaimUpsert is the "OnConflict" setter.
	ReturnPortalClaimUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ReturnPortalClaimUpsert) SetTenantID(v pulid.ID) *ReturnPortalClaimUpsert {
	u.Set(returnportalclaim.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsert) UpdateTenantID() *ReturnPortalClaimUpsert {
	u.SetExcluded(returnportalclaim.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *ReturnPortalClaimUpsert) SetName(v string) *ReturnPortalClaimUpsert {
	u.Set(returnportalclaim.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsert) UpdateName() *ReturnPortalClaimUpsert {
	u.SetExcluded(returnportalclaim.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ReturnPortalClaimUpsert) SetDescription(v string) *ReturnPortalClaimUpsert {
	u.Set(returnportalclaim.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsert) UpdateDescription() *ReturnPortalClaimUpsert {
	u.SetExcluded(returnportalclaim.FieldDescription)
	return u
}

// SetRestockable sets the "restockable" field.
func (u *ReturnPortalClaimUpsert) SetRestockable(v bool) *ReturnPortalClaimUpsert {
	u.Set(returnportalclaim.FieldRestockable, v)
	return u
}

// UpdateRestockable sets the "restockable" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsert) UpdateRestockable() *ReturnPortalClaimUpsert {
	u.SetExcluded(returnportalclaim.FieldRestockable)
	return u
}

// SetArchived sets the "archived" field.
func (u *ReturnPortalClaimUpsert) SetArchived(v bool) *ReturnPortalClaimUpsert {
	u.Set(returnportalclaim.FieldArchived, v)
	return u
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsert) UpdateArchived() *ReturnPortalClaimUpsert {
	u.SetExcluded(returnportalclaim.FieldArchived)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReturnPortalClaim.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returnportalclaim.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnPortalClaimUpsertOne) UpdateNewValues() *ReturnPortalClaimUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(returnportalclaim.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnPortalClaim.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReturnPortalClaimUpsertOne) Ignore() *ReturnPortalClaimUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnPortalClaimUpsertOne) DoNothing() *ReturnPortalClaimUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnPortalClaimCreate.OnConflict
// documentation for more info.
func (u *ReturnPortalClaimUpsertOne) Update(set func(*ReturnPortalClaimUpsert)) *ReturnPortalClaimUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnPortalClaimUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnPortalClaimUpsertOne) SetTenantID(v pulid.ID) *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertOne) UpdateTenantID() *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *ReturnPortalClaimUpsertOne) SetName(v string) *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertOne) UpdateName() *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ReturnPortalClaimUpsertOne) SetDescription(v string) *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertOne) UpdateDescription() *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateDescription()
	})
}

// SetRestockable sets the "restockable" field.
func (u *ReturnPortalClaimUpsertOne) SetRestockable(v bool) *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetRestockable(v)
	})
}

// UpdateRestockable sets the "restockable" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertOne) UpdateRestockable() *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateRestockable()
	})
}

// SetArchived sets the "archived" field.
func (u *ReturnPortalClaimUpsertOne) SetArchived(v bool) *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertOne) UpdateArchived() *ReturnPortalClaimUpsertOne {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateArchived()
	})
}

// Exec executes the query.
func (u *ReturnPortalClaimUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnPortalClaimCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnPortalClaimUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReturnPortalClaimUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReturnPortalClaimUpsertOne.ID is not supported by MySQL driver. Use ReturnPortalClaimUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReturnPortalClaimUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReturnPortalClaimCreateBulk is the builder for creating many ReturnPortalClaim entities in bulk.
type ReturnPortalClaimCreateBulk struct {
	config
	err      error
	builders []*ReturnPortalClaimCreate
	conflict []sql.ConflictOption
}

// Save creates the ReturnPortalClaim entities in the database.
func (rpccb *ReturnPortalClaimCreateBulk) Save(ctx context.Context) ([]*ReturnPortalClaim, error) {
	if rpccb.err != nil {
		return nil, rpccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpccb.builders))
	nodes := make([]*ReturnPortalClaim, len(rpccb.builders))
	mutators := make([]Mutator, len(rpccb.builders))
	for i := range rpccb.builders {
		func(i int, root context.Context) {
			builder := rpccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReturnPortalClaimMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rpccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpccb *ReturnPortalClaimCreateBulk) SaveX(ctx context.Context) []*ReturnPortalClaim {
	v, err := rpccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpccb *ReturnPortalClaimCreateBulk) Exec(ctx context.Context) error {
	_, err := rpccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpccb *ReturnPortalClaimCreateBulk) ExecX(ctx context.Context) {
	if err := rpccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnPortalClaim.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnPortalClaimUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rpccb *ReturnPortalClaimCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReturnPortalClaimUpsertBulk {
	rpccb.conflict = opts
	return &ReturnPortalClaimUpsertBulk{
		create: rpccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnPortalClaim.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpccb *ReturnPortalClaimCreateBulk) OnConflictColumns(columns ...string) *ReturnPortalClaimUpsertBulk {
	rpccb.conflict = append(rpccb.conflict, sql.ConflictColumns(columns...))
	return &ReturnPortalClaimUpsertBulk{
		create: rpccb,
	}
}

// ReturnPortalClaimUpsertBulk is the builder for "upsert"-ing
// a bulk of ReturnPortalClaim nodes.
type ReturnPortalClaimUpsertBulk struct {
	create *ReturnPortalClaimCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReturnPortalClaim.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returnportalclaim.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnPortalClaimUpsertBulk) UpdateNewValues() *ReturnPortalClaimUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(returnportalclaim.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnPortalClaim.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReturnPortalClaimUpsertBulk) Ignore() *ReturnPortalClaimUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnPortalClaimUpsertBulk) DoNothing() *ReturnPortalClaimUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnPortalClaimCreateBulk.OnConflict
// documentation for more info.
func (u *ReturnPortalClaimUpsertBulk) Update(set func(*ReturnPortalClaimUpsert)) *ReturnPortalClaimUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnPortalClaimUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnPortalClaimUpsertBulk) SetTenantID(v pulid.ID) *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertBulk) UpdateTenantID() *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *ReturnPortalClaimUpsertBulk) SetName(v string) *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertBulk) UpdateName() *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ReturnPortalClaimUpsertBulk) SetDescription(v string) *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertBulk) UpdateDescription() *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateDescription()
	})
}

// SetRestockable sets the "restockable" field.
func (u *ReturnPortalClaimUpsertBulk) SetRestockable(v bool) *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetRestockable(v)
	})
}

// UpdateRestockable sets the "restockable" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertBulk) UpdateRestockable() *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateRestockable()
	})
}

// SetArchived sets the "archived" field.
func (u *ReturnPortalClaimUpsertBulk) SetArchived(v bool) *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *ReturnPortalClaimUpsertBulk) UpdateArchived() *ReturnPortalClaimUpsertBulk {
	return u.Update(func(s *ReturnPortalClaimUpsert) {
		s.UpdateArchived()
	})
}

// Exec executes the query.
func (u *ReturnPortalClaimUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReturnPortalClaimCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnPortalClaimCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnPortalClaimUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
