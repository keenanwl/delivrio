// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceUSPSUpdate is the builder for updating CarrierServiceUSPS entities.
type CarrierServiceUSPSUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierServiceUSPSMutation
}

// Where appends a list predicates to the CarrierServiceUSPSUpdate builder.
func (csuu *CarrierServiceUSPSUpdate) Where(ps ...predicate.CarrierServiceUSPS) *CarrierServiceUSPSUpdate {
	csuu.mutation.Where(ps...)
	return csuu
}

// SetAPIKey sets the "api_key" field.
func (csuu *CarrierServiceUSPSUpdate) SetAPIKey(ck carrierserviceusps.APIKey) *CarrierServiceUSPSUpdate {
	csuu.mutation.SetAPIKey(ck)
	return csuu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csuu *CarrierServiceUSPSUpdate) SetNillableAPIKey(ck *carrierserviceusps.APIKey) *CarrierServiceUSPSUpdate {
	if ck != nil {
		csuu.SetAPIKey(*ck)
	}
	return csuu
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csuu *CarrierServiceUSPSUpdate) SetCarrierServiceID(id pulid.ID) *CarrierServiceUSPSUpdate {
	csuu.mutation.SetCarrierServiceID(id)
	return csuu
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csuu *CarrierServiceUSPSUpdate) SetCarrierService(c *CarrierService) *CarrierServiceUSPSUpdate {
	return csuu.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceUspIDs adds the "carrier_additional_service_usps" edge to the CarrierAdditionalServiceUSPS entity by IDs.
func (csuu *CarrierServiceUSPSUpdate) AddCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *CarrierServiceUSPSUpdate {
	csuu.mutation.AddCarrierAdditionalServiceUspIDs(ids...)
	return csuu
}

// AddCarrierAdditionalServiceUSPS adds the "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (csuu *CarrierServiceUSPSUpdate) AddCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *CarrierServiceUSPSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuu.AddCarrierAdditionalServiceUspIDs(ids...)
}

// Mutation returns the CarrierServiceUSPSMutation object of the builder.
func (csuu *CarrierServiceUSPSUpdate) Mutation() *CarrierServiceUSPSMutation {
	return csuu.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csuu *CarrierServiceUSPSUpdate) ClearCarrierService() *CarrierServiceUSPSUpdate {
	csuu.mutation.ClearCarrierService()
	return csuu
}

// ClearCarrierAdditionalServiceUSPS clears all "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (csuu *CarrierServiceUSPSUpdate) ClearCarrierAdditionalServiceUSPS() *CarrierServiceUSPSUpdate {
	csuu.mutation.ClearCarrierAdditionalServiceUSPS()
	return csuu
}

// RemoveCarrierAdditionalServiceUspIDs removes the "carrier_additional_service_usps" edge to CarrierAdditionalServiceUSPS entities by IDs.
func (csuu *CarrierServiceUSPSUpdate) RemoveCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *CarrierServiceUSPSUpdate {
	csuu.mutation.RemoveCarrierAdditionalServiceUspIDs(ids...)
	return csuu
}

// RemoveCarrierAdditionalServiceUSPS removes "carrier_additional_service_usps" edges to CarrierAdditionalServiceUSPS entities.
func (csuu *CarrierServiceUSPSUpdate) RemoveCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *CarrierServiceUSPSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuu.RemoveCarrierAdditionalServiceUspIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csuu *CarrierServiceUSPSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csuu.sqlSave, csuu.mutation, csuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuu *CarrierServiceUSPSUpdate) SaveX(ctx context.Context) int {
	affected, err := csuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csuu *CarrierServiceUSPSUpdate) Exec(ctx context.Context) error {
	_, err := csuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuu *CarrierServiceUSPSUpdate) ExecX(ctx context.Context) {
	if err := csuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuu *CarrierServiceUSPSUpdate) check() error {
	if v, ok := csuu.mutation.APIKey(); ok {
		if err := carrierserviceusps.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "CarrierServiceUSPS.api_key": %w`, err)}
		}
	}
	if csuu.mutation.CarrierServiceCleared() && len(csuu.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceUSPS.carrier_service"`)
	}
	return nil
}

func (csuu *CarrierServiceUSPSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierserviceusps.Table, carrierserviceusps.Columns, sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString))
	if ps := csuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuu.mutation.APIKey(); ok {
		_spec.SetField(carrierserviceusps.FieldAPIKey, field.TypeEnum, value)
	}
	if csuu.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceusps.CarrierServiceTable,
			Columns: []string{carrierserviceusps.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuu.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceusps.CarrierServiceTable,
			Columns: []string{carrierserviceusps.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuu.mutation.CarrierAdditionalServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierserviceusps.CarrierAdditionalServiceUSPSTable,
			Columns: []string{carrierserviceusps.CarrierAdditionalServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuu.mutation.RemovedCarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 && !csuu.mutation.CarrierAdditionalServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierserviceusps.CarrierAdditionalServiceUSPSTable,
			Columns: []string{carrierserviceusps.CarrierAdditionalServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuu.mutation.CarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierserviceusps.CarrierAdditionalServiceUSPSTable,
			Columns: []string{carrierserviceusps.CarrierAdditionalServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierserviceusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csuu.mutation.done = true
	return n, nil
}

// CarrierServiceUSPSUpdateOne is the builder for updating a single CarrierServiceUSPS entity.
type CarrierServiceUSPSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierServiceUSPSMutation
}

// SetAPIKey sets the "api_key" field.
func (csuuo *CarrierServiceUSPSUpdateOne) SetAPIKey(ck carrierserviceusps.APIKey) *CarrierServiceUSPSUpdateOne {
	csuuo.mutation.SetAPIKey(ck)
	return csuuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csuuo *CarrierServiceUSPSUpdateOne) SetNillableAPIKey(ck *carrierserviceusps.APIKey) *CarrierServiceUSPSUpdateOne {
	if ck != nil {
		csuuo.SetAPIKey(*ck)
	}
	return csuuo
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csuuo *CarrierServiceUSPSUpdateOne) SetCarrierServiceID(id pulid.ID) *CarrierServiceUSPSUpdateOne {
	csuuo.mutation.SetCarrierServiceID(id)
	return csuuo
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csuuo *CarrierServiceUSPSUpdateOne) SetCarrierService(c *CarrierService) *CarrierServiceUSPSUpdateOne {
	return csuuo.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceUspIDs adds the "carrier_additional_service_usps" edge to the CarrierAdditionalServiceUSPS entity by IDs.
func (csuuo *CarrierServiceUSPSUpdateOne) AddCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *CarrierServiceUSPSUpdateOne {
	csuuo.mutation.AddCarrierAdditionalServiceUspIDs(ids...)
	return csuuo
}

// AddCarrierAdditionalServiceUSPS adds the "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (csuuo *CarrierServiceUSPSUpdateOne) AddCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *CarrierServiceUSPSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuuo.AddCarrierAdditionalServiceUspIDs(ids...)
}

// Mutation returns the CarrierServiceUSPSMutation object of the builder.
func (csuuo *CarrierServiceUSPSUpdateOne) Mutation() *CarrierServiceUSPSMutation {
	return csuuo.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csuuo *CarrierServiceUSPSUpdateOne) ClearCarrierService() *CarrierServiceUSPSUpdateOne {
	csuuo.mutation.ClearCarrierService()
	return csuuo
}

// ClearCarrierAdditionalServiceUSPS clears all "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (csuuo *CarrierServiceUSPSUpdateOne) ClearCarrierAdditionalServiceUSPS() *CarrierServiceUSPSUpdateOne {
	csuuo.mutation.ClearCarrierAdditionalServiceUSPS()
	return csuuo
}

// RemoveCarrierAdditionalServiceUspIDs removes the "carrier_additional_service_usps" edge to CarrierAdditionalServiceUSPS entities by IDs.
func (csuuo *CarrierServiceUSPSUpdateOne) RemoveCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *CarrierServiceUSPSUpdateOne {
	csuuo.mutation.RemoveCarrierAdditionalServiceUspIDs(ids...)
	return csuuo
}

// RemoveCarrierAdditionalServiceUSPS removes "carrier_additional_service_usps" edges to CarrierAdditionalServiceUSPS entities.
func (csuuo *CarrierServiceUSPSUpdateOne) RemoveCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *CarrierServiceUSPSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuuo.RemoveCarrierAdditionalServiceUspIDs(ids...)
}

// Where appends a list predicates to the CarrierServiceUSPSUpdate builder.
func (csuuo *CarrierServiceUSPSUpdateOne) Where(ps ...predicate.CarrierServiceUSPS) *CarrierServiceUSPSUpdateOne {
	csuuo.mutation.Where(ps...)
	return csuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuuo *CarrierServiceUSPSUpdateOne) Select(field string, fields ...string) *CarrierServiceUSPSUpdateOne {
	csuuo.fields = append([]string{field}, fields...)
	return csuuo
}

// Save executes the query and returns the updated CarrierServiceUSPS entity.
func (csuuo *CarrierServiceUSPSUpdateOne) Save(ctx context.Context) (*CarrierServiceUSPS, error) {
	return withHooks(ctx, csuuo.sqlSave, csuuo.mutation, csuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuuo *CarrierServiceUSPSUpdateOne) SaveX(ctx context.Context) *CarrierServiceUSPS {
	node, err := csuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuuo *CarrierServiceUSPSUpdateOne) Exec(ctx context.Context) error {
	_, err := csuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuuo *CarrierServiceUSPSUpdateOne) ExecX(ctx context.Context) {
	if err := csuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuuo *CarrierServiceUSPSUpdateOne) check() error {
	if v, ok := csuuo.mutation.APIKey(); ok {
		if err := carrierserviceusps.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "CarrierServiceUSPS.api_key": %w`, err)}
		}
	}
	if csuuo.mutation.CarrierServiceCleared() && len(csuuo.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceUSPS.carrier_service"`)
	}
	return nil
}

func (csuuo *CarrierServiceUSPSUpdateOne) sqlSave(ctx context.Context) (_node *CarrierServiceUSPS, err error) {
	if err := csuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierserviceusps.Table, carrierserviceusps.Columns, sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString))
	id, ok := csuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierServiceUSPS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierserviceusps.FieldID)
		for _, f := range fields {
			if !carrierserviceusps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierserviceusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuuo.mutation.APIKey(); ok {
		_spec.SetField(carrierserviceusps.FieldAPIKey, field.TypeEnum, value)
	}
	if csuuo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceusps.CarrierServiceTable,
			Columns: []string{carrierserviceusps.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuuo.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceusps.CarrierServiceTable,
			Columns: []string{carrierserviceusps.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuuo.mutation.CarrierAdditionalServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierserviceusps.CarrierAdditionalServiceUSPSTable,
			Columns: []string{carrierserviceusps.CarrierAdditionalServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuuo.mutation.RemovedCarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 && !csuuo.mutation.CarrierAdditionalServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierserviceusps.CarrierAdditionalServiceUSPSTable,
			Columns: []string{carrierserviceusps.CarrierAdditionalServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuuo.mutation.CarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierserviceusps.CarrierAdditionalServiceUSPSTable,
			Columns: []string{carrierserviceusps.CarrierAdditionalServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierServiceUSPS{config: csuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierserviceusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuuo.mutation.done = true
	return _node, nil
}
