// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentPostNordUpdate is the builder for updating ShipmentPostNord entities.
type ShipmentPostNordUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentPostNordMutation
}

// Where appends a list predicates to the ShipmentPostNordUpdate builder.
func (spnu *ShipmentPostNordUpdate) Where(ps ...predicate.ShipmentPostNord) *ShipmentPostNordUpdate {
	spnu.mutation.Where(ps...)
	return spnu
}

// SetTenantID sets the "tenant_id" field.
func (spnu *ShipmentPostNordUpdate) SetTenantID(pu pulid.ID) *ShipmentPostNordUpdate {
	spnu.mutation.SetTenantID(pu)
	return spnu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (spnu *ShipmentPostNordUpdate) SetNillableTenantID(pu *pulid.ID) *ShipmentPostNordUpdate {
	if pu != nil {
		spnu.SetTenantID(*pu)
	}
	return spnu
}

// SetBookingID sets the "booking_id" field.
func (spnu *ShipmentPostNordUpdate) SetBookingID(s string) *ShipmentPostNordUpdate {
	spnu.mutation.SetBookingID(s)
	return spnu
}

// SetNillableBookingID sets the "booking_id" field if the given value is not nil.
func (spnu *ShipmentPostNordUpdate) SetNillableBookingID(s *string) *ShipmentPostNordUpdate {
	if s != nil {
		spnu.SetBookingID(*s)
	}
	return spnu
}

// SetItemID sets the "item_id" field.
func (spnu *ShipmentPostNordUpdate) SetItemID(s string) *ShipmentPostNordUpdate {
	spnu.mutation.SetItemID(s)
	return spnu
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (spnu *ShipmentPostNordUpdate) SetNillableItemID(s *string) *ShipmentPostNordUpdate {
	if s != nil {
		spnu.SetItemID(*s)
	}
	return spnu
}

// SetShipmentReferenceNo sets the "shipment_reference_no" field.
func (spnu *ShipmentPostNordUpdate) SetShipmentReferenceNo(s string) *ShipmentPostNordUpdate {
	spnu.mutation.SetShipmentReferenceNo(s)
	return spnu
}

// SetNillableShipmentReferenceNo sets the "shipment_reference_no" field if the given value is not nil.
func (spnu *ShipmentPostNordUpdate) SetNillableShipmentReferenceNo(s *string) *ShipmentPostNordUpdate {
	if s != nil {
		spnu.SetShipmentReferenceNo(*s)
	}
	return spnu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spnu *ShipmentPostNordUpdate) SetTenant(t *Tenant) *ShipmentPostNordUpdate {
	return spnu.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (spnu *ShipmentPostNordUpdate) SetShipmentID(id pulid.ID) *ShipmentPostNordUpdate {
	spnu.mutation.SetShipmentID(id)
	return spnu
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (spnu *ShipmentPostNordUpdate) SetShipment(s *Shipment) *ShipmentPostNordUpdate {
	return spnu.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentPostNordMutation object of the builder.
func (spnu *ShipmentPostNordUpdate) Mutation() *ShipmentPostNordMutation {
	return spnu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (spnu *ShipmentPostNordUpdate) ClearTenant() *ShipmentPostNordUpdate {
	spnu.mutation.ClearTenant()
	return spnu
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (spnu *ShipmentPostNordUpdate) ClearShipment() *ShipmentPostNordUpdate {
	spnu.mutation.ClearShipment()
	return spnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spnu *ShipmentPostNordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spnu.sqlSave, spnu.mutation, spnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spnu *ShipmentPostNordUpdate) SaveX(ctx context.Context) int {
	affected, err := spnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spnu *ShipmentPostNordUpdate) Exec(ctx context.Context) error {
	_, err := spnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spnu *ShipmentPostNordUpdate) ExecX(ctx context.Context) {
	if err := spnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spnu *ShipmentPostNordUpdate) check() error {
	if spnu.mutation.TenantCleared() && len(spnu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentPostNord.tenant"`)
	}
	if spnu.mutation.ShipmentCleared() && len(spnu.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentPostNord.shipment"`)
	}
	return nil
}

func (spnu *ShipmentPostNordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentpostnord.Table, shipmentpostnord.Columns, sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString))
	if ps := spnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spnu.mutation.BookingID(); ok {
		_spec.SetField(shipmentpostnord.FieldBookingID, field.TypeString, value)
	}
	if value, ok := spnu.mutation.ItemID(); ok {
		_spec.SetField(shipmentpostnord.FieldItemID, field.TypeString, value)
	}
	if value, ok := spnu.mutation.ShipmentReferenceNo(); ok {
		_spec.SetField(shipmentpostnord.FieldShipmentReferenceNo, field.TypeString, value)
	}
	if spnu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpostnord.TenantTable,
			Columns: []string{shipmentpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spnu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpostnord.TenantTable,
			Columns: []string{shipmentpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spnu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpostnord.ShipmentTable,
			Columns: []string{shipmentpostnord.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spnu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpostnord.ShipmentTable,
			Columns: []string{shipmentpostnord.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentpostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spnu.mutation.done = true
	return n, nil
}

// ShipmentPostNordUpdateOne is the builder for updating a single ShipmentPostNord entity.
type ShipmentPostNordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentPostNordMutation
}

// SetTenantID sets the "tenant_id" field.
func (spnuo *ShipmentPostNordUpdateOne) SetTenantID(pu pulid.ID) *ShipmentPostNordUpdateOne {
	spnuo.mutation.SetTenantID(pu)
	return spnuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (spnuo *ShipmentPostNordUpdateOne) SetNillableTenantID(pu *pulid.ID) *ShipmentPostNordUpdateOne {
	if pu != nil {
		spnuo.SetTenantID(*pu)
	}
	return spnuo
}

// SetBookingID sets the "booking_id" field.
func (spnuo *ShipmentPostNordUpdateOne) SetBookingID(s string) *ShipmentPostNordUpdateOne {
	spnuo.mutation.SetBookingID(s)
	return spnuo
}

// SetNillableBookingID sets the "booking_id" field if the given value is not nil.
func (spnuo *ShipmentPostNordUpdateOne) SetNillableBookingID(s *string) *ShipmentPostNordUpdateOne {
	if s != nil {
		spnuo.SetBookingID(*s)
	}
	return spnuo
}

// SetItemID sets the "item_id" field.
func (spnuo *ShipmentPostNordUpdateOne) SetItemID(s string) *ShipmentPostNordUpdateOne {
	spnuo.mutation.SetItemID(s)
	return spnuo
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (spnuo *ShipmentPostNordUpdateOne) SetNillableItemID(s *string) *ShipmentPostNordUpdateOne {
	if s != nil {
		spnuo.SetItemID(*s)
	}
	return spnuo
}

// SetShipmentReferenceNo sets the "shipment_reference_no" field.
func (spnuo *ShipmentPostNordUpdateOne) SetShipmentReferenceNo(s string) *ShipmentPostNordUpdateOne {
	spnuo.mutation.SetShipmentReferenceNo(s)
	return spnuo
}

// SetNillableShipmentReferenceNo sets the "shipment_reference_no" field if the given value is not nil.
func (spnuo *ShipmentPostNordUpdateOne) SetNillableShipmentReferenceNo(s *string) *ShipmentPostNordUpdateOne {
	if s != nil {
		spnuo.SetShipmentReferenceNo(*s)
	}
	return spnuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spnuo *ShipmentPostNordUpdateOne) SetTenant(t *Tenant) *ShipmentPostNordUpdateOne {
	return spnuo.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (spnuo *ShipmentPostNordUpdateOne) SetShipmentID(id pulid.ID) *ShipmentPostNordUpdateOne {
	spnuo.mutation.SetShipmentID(id)
	return spnuo
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (spnuo *ShipmentPostNordUpdateOne) SetShipment(s *Shipment) *ShipmentPostNordUpdateOne {
	return spnuo.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentPostNordMutation object of the builder.
func (spnuo *ShipmentPostNordUpdateOne) Mutation() *ShipmentPostNordMutation {
	return spnuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (spnuo *ShipmentPostNordUpdateOne) ClearTenant() *ShipmentPostNordUpdateOne {
	spnuo.mutation.ClearTenant()
	return spnuo
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (spnuo *ShipmentPostNordUpdateOne) ClearShipment() *ShipmentPostNordUpdateOne {
	spnuo.mutation.ClearShipment()
	return spnuo
}

// Where appends a list predicates to the ShipmentPostNordUpdate builder.
func (spnuo *ShipmentPostNordUpdateOne) Where(ps ...predicate.ShipmentPostNord) *ShipmentPostNordUpdateOne {
	spnuo.mutation.Where(ps...)
	return spnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spnuo *ShipmentPostNordUpdateOne) Select(field string, fields ...string) *ShipmentPostNordUpdateOne {
	spnuo.fields = append([]string{field}, fields...)
	return spnuo
}

// Save executes the query and returns the updated ShipmentPostNord entity.
func (spnuo *ShipmentPostNordUpdateOne) Save(ctx context.Context) (*ShipmentPostNord, error) {
	return withHooks(ctx, spnuo.sqlSave, spnuo.mutation, spnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spnuo *ShipmentPostNordUpdateOne) SaveX(ctx context.Context) *ShipmentPostNord {
	node, err := spnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spnuo *ShipmentPostNordUpdateOne) Exec(ctx context.Context) error {
	_, err := spnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spnuo *ShipmentPostNordUpdateOne) ExecX(ctx context.Context) {
	if err := spnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spnuo *ShipmentPostNordUpdateOne) check() error {
	if spnuo.mutation.TenantCleared() && len(spnuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentPostNord.tenant"`)
	}
	if spnuo.mutation.ShipmentCleared() && len(spnuo.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentPostNord.shipment"`)
	}
	return nil
}

func (spnuo *ShipmentPostNordUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentPostNord, err error) {
	if err := spnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentpostnord.Table, shipmentpostnord.Columns, sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString))
	id, ok := spnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentPostNord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentpostnord.FieldID)
		for _, f := range fields {
			if !shipmentpostnord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentpostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spnuo.mutation.BookingID(); ok {
		_spec.SetField(shipmentpostnord.FieldBookingID, field.TypeString, value)
	}
	if value, ok := spnuo.mutation.ItemID(); ok {
		_spec.SetField(shipmentpostnord.FieldItemID, field.TypeString, value)
	}
	if value, ok := spnuo.mutation.ShipmentReferenceNo(); ok {
		_spec.SetField(shipmentpostnord.FieldShipmentReferenceNo, field.TypeString, value)
	}
	if spnuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpostnord.TenantTable,
			Columns: []string{shipmentpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spnuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpostnord.TenantTable,
			Columns: []string{shipmentpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spnuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpostnord.ShipmentTable,
			Columns: []string{shipmentpostnord.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spnuo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpostnord.ShipmentTable,
			Columns: []string{shipmentpostnord.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentPostNord{config: spnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentpostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spnuo.mutation.done = true
	return _node, nil
}
