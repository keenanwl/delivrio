// Code generated by ent, DO NOT EDIT.

package currency

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the currency type in the database.
	Label = "currency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDisplay holds the string denoting the display field in the database.
	FieldDisplay = "display"
	// FieldCurrencyCode holds the string denoting the currency_code field in the database.
	FieldCurrencyCode = "currency_code"
	// EdgeOrderLine holds the string denoting the order_line edge name in mutations.
	EdgeOrderLine = "order_line"
	// EdgeDeliveryRule holds the string denoting the delivery_rule edge name in mutations.
	EdgeDeliveryRule = "delivery_rule"
	// Table holds the table name of the currency in the database.
	Table = "currencies"
	// OrderLineTable is the table that holds the order_line relation/edge.
	OrderLineTable = "order_lines"
	// OrderLineInverseTable is the table name for the OrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "orderline" package.
	OrderLineInverseTable = "order_lines"
	// OrderLineColumn is the table column denoting the order_line relation/edge.
	OrderLineColumn = "order_line_currency"
	// DeliveryRuleTable is the table that holds the delivery_rule relation/edge.
	DeliveryRuleTable = "delivery_rules"
	// DeliveryRuleInverseTable is the table name for the DeliveryRule entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryrule" package.
	DeliveryRuleInverseTable = "delivery_rules"
	// DeliveryRuleColumn is the table column denoting the delivery_rule relation/edge.
	DeliveryRuleColumn = "delivery_rule_currency"
)

// Columns holds all SQL columns for currency fields.
var Columns = []string{
	FieldID,
	FieldDisplay,
	FieldCurrencyCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// CurrencyCode defines the type for the "currency_code" enum field.
type CurrencyCode string

// CurrencyCodeDKK is the default value of the CurrencyCode enum.
const DefaultCurrencyCode = CurrencyCodeDKK

// CurrencyCode values.
const (
	CurrencyCodeDKK CurrencyCode = "DKK"
	CurrencyCodeEUR CurrencyCode = "EUR"
	CurrencyCodeSEK CurrencyCode = "SEK"
	CurrencyCodeUSD CurrencyCode = "USD"
)

func (cc CurrencyCode) String() string {
	return string(cc)
}

// CurrencyCodeValidator is a validator for the "currency_code" field enum values. It is called by the builders before save.
func CurrencyCodeValidator(cc CurrencyCode) error {
	switch cc {
	case CurrencyCodeDKK, CurrencyCodeEUR, CurrencyCodeSEK, CurrencyCodeUSD:
		return nil
	default:
		return fmt.Errorf("currency: invalid enum value for currency_code field: %q", cc)
	}
}

// OrderOption defines the ordering options for the Currency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDisplay orders the results by the display field.
func ByDisplay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplay, opts...).ToFunc()
}

// ByCurrencyCode orders the results by the currency_code field.
func ByCurrencyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyCode, opts...).ToFunc()
}

// ByOrderLineCount orders the results by order_line count.
func ByOrderLineCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderLineStep(), opts...)
	}
}

// ByOrderLine orders the results by order_line terms.
func ByOrderLine(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderLineStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryRuleCount orders the results by delivery_rule count.
func ByDeliveryRuleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryRuleStep(), opts...)
	}
}

// ByDeliveryRule orders the results by delivery_rule terms.
func ByDeliveryRule(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryRuleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrderLineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderLineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrderLineTable, OrderLineColumn),
	)
}
func newDeliveryRuleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryRuleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeliveryRuleTable, DeliveryRuleColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e CurrencyCode) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *CurrencyCode) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = CurrencyCode(str)
	if err := CurrencyCodeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid CurrencyCode", str)
	}
	return nil
}
