// Code generated by ent, DO NOT EDIT.

package currency

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Currency {
	return predicate.Currency(sql.FieldLTE(FieldID, id))
}

// Display applies equality check predicate on the "display" field. It's identical to DisplayEQ.
func Display(v string) predicate.Currency {
	return predicate.Currency(sql.FieldEQ(FieldDisplay, v))
}

// DisplayEQ applies the EQ predicate on the "display" field.
func DisplayEQ(v string) predicate.Currency {
	return predicate.Currency(sql.FieldEQ(FieldDisplay, v))
}

// DisplayNEQ applies the NEQ predicate on the "display" field.
func DisplayNEQ(v string) predicate.Currency {
	return predicate.Currency(sql.FieldNEQ(FieldDisplay, v))
}

// DisplayIn applies the In predicate on the "display" field.
func DisplayIn(vs ...string) predicate.Currency {
	return predicate.Currency(sql.FieldIn(FieldDisplay, vs...))
}

// DisplayNotIn applies the NotIn predicate on the "display" field.
func DisplayNotIn(vs ...string) predicate.Currency {
	return predicate.Currency(sql.FieldNotIn(FieldDisplay, vs...))
}

// DisplayGT applies the GT predicate on the "display" field.
func DisplayGT(v string) predicate.Currency {
	return predicate.Currency(sql.FieldGT(FieldDisplay, v))
}

// DisplayGTE applies the GTE predicate on the "display" field.
func DisplayGTE(v string) predicate.Currency {
	return predicate.Currency(sql.FieldGTE(FieldDisplay, v))
}

// DisplayLT applies the LT predicate on the "display" field.
func DisplayLT(v string) predicate.Currency {
	return predicate.Currency(sql.FieldLT(FieldDisplay, v))
}

// DisplayLTE applies the LTE predicate on the "display" field.
func DisplayLTE(v string) predicate.Currency {
	return predicate.Currency(sql.FieldLTE(FieldDisplay, v))
}

// DisplayContains applies the Contains predicate on the "display" field.
func DisplayContains(v string) predicate.Currency {
	return predicate.Currency(sql.FieldContains(FieldDisplay, v))
}

// DisplayHasPrefix applies the HasPrefix predicate on the "display" field.
func DisplayHasPrefix(v string) predicate.Currency {
	return predicate.Currency(sql.FieldHasPrefix(FieldDisplay, v))
}

// DisplayHasSuffix applies the HasSuffix predicate on the "display" field.
func DisplayHasSuffix(v string) predicate.Currency {
	return predicate.Currency(sql.FieldHasSuffix(FieldDisplay, v))
}

// DisplayEqualFold applies the EqualFold predicate on the "display" field.
func DisplayEqualFold(v string) predicate.Currency {
	return predicate.Currency(sql.FieldEqualFold(FieldDisplay, v))
}

// DisplayContainsFold applies the ContainsFold predicate on the "display" field.
func DisplayContainsFold(v string) predicate.Currency {
	return predicate.Currency(sql.FieldContainsFold(FieldDisplay, v))
}

// CurrencyCodeEQ applies the EQ predicate on the "currency_code" field.
func CurrencyCodeEQ(v CurrencyCode) predicate.Currency {
	return predicate.Currency(sql.FieldEQ(FieldCurrencyCode, v))
}

// CurrencyCodeNEQ applies the NEQ predicate on the "currency_code" field.
func CurrencyCodeNEQ(v CurrencyCode) predicate.Currency {
	return predicate.Currency(sql.FieldNEQ(FieldCurrencyCode, v))
}

// CurrencyCodeIn applies the In predicate on the "currency_code" field.
func CurrencyCodeIn(vs ...CurrencyCode) predicate.Currency {
	return predicate.Currency(sql.FieldIn(FieldCurrencyCode, vs...))
}

// CurrencyCodeNotIn applies the NotIn predicate on the "currency_code" field.
func CurrencyCodeNotIn(vs ...CurrencyCode) predicate.Currency {
	return predicate.Currency(sql.FieldNotIn(FieldCurrencyCode, vs...))
}

// HasOrderLine applies the HasEdge predicate on the "order_line" edge.
func HasOrderLine() predicate.Currency {
	return predicate.Currency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrderLineTable, OrderLineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderLineWith applies the HasEdge predicate on the "order_line" edge with a given conditions (other predicates).
func HasOrderLineWith(preds ...predicate.OrderLine) predicate.Currency {
	return predicate.Currency(func(s *sql.Selector) {
		step := newOrderLineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryRule applies the HasEdge predicate on the "delivery_rule" edge.
func HasDeliveryRule() predicate.Currency {
	return predicate.Currency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeliveryRuleTable, DeliveryRuleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryRuleWith applies the HasEdge predicate on the "delivery_rule" edge with a given conditions (other predicates).
func HasDeliveryRuleWith(preds ...predicate.DeliveryRule) predicate.Currency {
	return predicate.Currency(func(s *sql.Selector) {
		step := newDeliveryRuleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Currency) predicate.Currency {
	return predicate.Currency(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Currency) predicate.Currency {
	return predicate.Currency(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Currency) predicate.Currency {
	return predicate.Currency(sql.NotPredicates(p))
}
