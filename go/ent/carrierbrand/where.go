// Code generated by ent, DO NOT EDIT.

package carrierbrand

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLTE(FieldID, id))
}

// LabelShort applies equality check predicate on the "label_short" field. It's identical to LabelShortEQ.
func LabelShort(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldLabelShort, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldLogoURL, v))
}

// TextColor applies equality check predicate on the "text_color" field. It's identical to TextColorEQ.
func TextColor(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldTextColor, v))
}

// BackgroundColor applies equality check predicate on the "background_color" field. It's identical to BackgroundColorEQ.
func BackgroundColor(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldBackgroundColor, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContainsFold(FieldLabel, v))
}

// LabelShortEQ applies the EQ predicate on the "label_short" field.
func LabelShortEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldLabelShort, v))
}

// LabelShortNEQ applies the NEQ predicate on the "label_short" field.
func LabelShortNEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNEQ(FieldLabelShort, v))
}

// LabelShortIn applies the In predicate on the "label_short" field.
func LabelShortIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIn(FieldLabelShort, vs...))
}

// LabelShortNotIn applies the NotIn predicate on the "label_short" field.
func LabelShortNotIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotIn(FieldLabelShort, vs...))
}

// LabelShortGT applies the GT predicate on the "label_short" field.
func LabelShortGT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGT(FieldLabelShort, v))
}

// LabelShortGTE applies the GTE predicate on the "label_short" field.
func LabelShortGTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGTE(FieldLabelShort, v))
}

// LabelShortLT applies the LT predicate on the "label_short" field.
func LabelShortLT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLT(FieldLabelShort, v))
}

// LabelShortLTE applies the LTE predicate on the "label_short" field.
func LabelShortLTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLTE(FieldLabelShort, v))
}

// LabelShortContains applies the Contains predicate on the "label_short" field.
func LabelShortContains(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContains(FieldLabelShort, v))
}

// LabelShortHasPrefix applies the HasPrefix predicate on the "label_short" field.
func LabelShortHasPrefix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasPrefix(FieldLabelShort, v))
}

// LabelShortHasSuffix applies the HasSuffix predicate on the "label_short" field.
func LabelShortHasSuffix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasSuffix(FieldLabelShort, v))
}

// LabelShortEqualFold applies the EqualFold predicate on the "label_short" field.
func LabelShortEqualFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEqualFold(FieldLabelShort, v))
}

// LabelShortContainsFold applies the ContainsFold predicate on the "label_short" field.
func LabelShortContainsFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContainsFold(FieldLabelShort, v))
}

// InternalIDEQ applies the EQ predicate on the "internal_id" field.
func InternalIDEQ(v InternalID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldInternalID, v))
}

// InternalIDNEQ applies the NEQ predicate on the "internal_id" field.
func InternalIDNEQ(v InternalID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNEQ(FieldInternalID, v))
}

// InternalIDIn applies the In predicate on the "internal_id" field.
func InternalIDIn(vs ...InternalID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIn(FieldInternalID, vs...))
}

// InternalIDNotIn applies the NotIn predicate on the "internal_id" field.
func InternalIDNotIn(vs ...InternalID) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotIn(FieldInternalID, vs...))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logo_url" field.
func LogoURLIsNil() predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logo_url" field.
func LogoURLNotNil() predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContainsFold(FieldLogoURL, v))
}

// TextColorEQ applies the EQ predicate on the "text_color" field.
func TextColorEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldTextColor, v))
}

// TextColorNEQ applies the NEQ predicate on the "text_color" field.
func TextColorNEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNEQ(FieldTextColor, v))
}

// TextColorIn applies the In predicate on the "text_color" field.
func TextColorIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIn(FieldTextColor, vs...))
}

// TextColorNotIn applies the NotIn predicate on the "text_color" field.
func TextColorNotIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotIn(FieldTextColor, vs...))
}

// TextColorGT applies the GT predicate on the "text_color" field.
func TextColorGT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGT(FieldTextColor, v))
}

// TextColorGTE applies the GTE predicate on the "text_color" field.
func TextColorGTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGTE(FieldTextColor, v))
}

// TextColorLT applies the LT predicate on the "text_color" field.
func TextColorLT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLT(FieldTextColor, v))
}

// TextColorLTE applies the LTE predicate on the "text_color" field.
func TextColorLTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLTE(FieldTextColor, v))
}

// TextColorContains applies the Contains predicate on the "text_color" field.
func TextColorContains(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContains(FieldTextColor, v))
}

// TextColorHasPrefix applies the HasPrefix predicate on the "text_color" field.
func TextColorHasPrefix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasPrefix(FieldTextColor, v))
}

// TextColorHasSuffix applies the HasSuffix predicate on the "text_color" field.
func TextColorHasSuffix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasSuffix(FieldTextColor, v))
}

// TextColorIsNil applies the IsNil predicate on the "text_color" field.
func TextColorIsNil() predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIsNull(FieldTextColor))
}

// TextColorNotNil applies the NotNil predicate on the "text_color" field.
func TextColorNotNil() predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotNull(FieldTextColor))
}

// TextColorEqualFold applies the EqualFold predicate on the "text_color" field.
func TextColorEqualFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEqualFold(FieldTextColor, v))
}

// TextColorContainsFold applies the ContainsFold predicate on the "text_color" field.
func TextColorContainsFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContainsFold(FieldTextColor, v))
}

// BackgroundColorEQ applies the EQ predicate on the "background_color" field.
func BackgroundColorEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEQ(FieldBackgroundColor, v))
}

// BackgroundColorNEQ applies the NEQ predicate on the "background_color" field.
func BackgroundColorNEQ(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNEQ(FieldBackgroundColor, v))
}

// BackgroundColorIn applies the In predicate on the "background_color" field.
func BackgroundColorIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIn(FieldBackgroundColor, vs...))
}

// BackgroundColorNotIn applies the NotIn predicate on the "background_color" field.
func BackgroundColorNotIn(vs ...string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotIn(FieldBackgroundColor, vs...))
}

// BackgroundColorGT applies the GT predicate on the "background_color" field.
func BackgroundColorGT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGT(FieldBackgroundColor, v))
}

// BackgroundColorGTE applies the GTE predicate on the "background_color" field.
func BackgroundColorGTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldGTE(FieldBackgroundColor, v))
}

// BackgroundColorLT applies the LT predicate on the "background_color" field.
func BackgroundColorLT(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLT(FieldBackgroundColor, v))
}

// BackgroundColorLTE applies the LTE predicate on the "background_color" field.
func BackgroundColorLTE(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldLTE(FieldBackgroundColor, v))
}

// BackgroundColorContains applies the Contains predicate on the "background_color" field.
func BackgroundColorContains(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContains(FieldBackgroundColor, v))
}

// BackgroundColorHasPrefix applies the HasPrefix predicate on the "background_color" field.
func BackgroundColorHasPrefix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasPrefix(FieldBackgroundColor, v))
}

// BackgroundColorHasSuffix applies the HasSuffix predicate on the "background_color" field.
func BackgroundColorHasSuffix(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldHasSuffix(FieldBackgroundColor, v))
}

// BackgroundColorIsNil applies the IsNil predicate on the "background_color" field.
func BackgroundColorIsNil() predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldIsNull(FieldBackgroundColor))
}

// BackgroundColorNotNil applies the NotNil predicate on the "background_color" field.
func BackgroundColorNotNil() predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldNotNull(FieldBackgroundColor))
}

// BackgroundColorEqualFold applies the EqualFold predicate on the "background_color" field.
func BackgroundColorEqualFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldEqualFold(FieldBackgroundColor, v))
}

// BackgroundColorContainsFold applies the ContainsFold predicate on the "background_color" field.
func BackgroundColorContainsFold(v string) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.FieldContainsFold(FieldBackgroundColor, v))
}

// HasCarrierService applies the HasEdge predicate on the "carrier_service" edge.
func HasCarrierService() predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarrierServiceTable, CarrierServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceWith applies the HasEdge predicate on the "carrier_service" edge with a given conditions (other predicates).
func HasCarrierServiceWith(preds ...predicate.CarrierService) predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := newCarrierServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrier applies the HasEdge predicate on the "carrier" edge.
func HasCarrier() predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CarrierTable, CarrierColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierWith applies the HasEdge predicate on the "carrier" edge with a given conditions (other predicates).
func HasCarrierWith(preds ...predicate.Carrier) predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := newCarrierStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcelShop applies the HasEdge predicate on the "parcel_shop" edge.
func HasParcelShop() predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ParcelShopTable, ParcelShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopWith applies the HasEdge predicate on the "parcel_shop" edge with a given conditions (other predicates).
func HasParcelShopWith(preds ...predicate.ParcelShop) predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := newParcelShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackaging applies the HasEdge predicate on the "packaging" edge.
func HasPackaging() predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PackagingTable, PackagingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagingWith applies the HasEdge predicate on the "packaging" edge with a given conditions (other predicates).
func HasPackagingWith(preds ...predicate.Packaging) predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := newPackagingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocument applies the HasEdge predicate on the "document" edge.
func HasDocument() predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DocumentTable, DocumentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentWith applies the HasEdge predicate on the "document" edge with a given conditions (other predicates).
func HasDocumentWith(preds ...predicate.Document) predicate.CarrierBrand {
	return predicate.CarrierBrand(func(s *sql.Selector) {
		step := newDocumentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarrierBrand) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarrierBrand) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarrierBrand) predicate.CarrierBrand {
	return predicate.CarrierBrand(sql.NotPredicates(p))
}
