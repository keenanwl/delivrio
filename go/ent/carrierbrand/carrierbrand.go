// Code generated by ent, DO NOT EDIT.

package carrierbrand

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrierbrand type in the database.
	Label = "carrier_brand"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldLabelShort holds the string denoting the label_short field in the database.
	FieldLabelShort = "label_short"
	// FieldInternalID holds the string denoting the internal_id field in the database.
	FieldInternalID = "internal_id"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldTextColor holds the string denoting the text_color field in the database.
	FieldTextColor = "text_color"
	// FieldBackgroundColor holds the string denoting the background_color field in the database.
	FieldBackgroundColor = "background_color"
	// EdgeCarrierService holds the string denoting the carrier_service edge name in mutations.
	EdgeCarrierService = "carrier_service"
	// EdgeCarrier holds the string denoting the carrier edge name in mutations.
	EdgeCarrier = "carrier"
	// EdgeParcelShop holds the string denoting the parcel_shop edge name in mutations.
	EdgeParcelShop = "parcel_shop"
	// EdgePackaging holds the string denoting the packaging edge name in mutations.
	EdgePackaging = "packaging"
	// EdgeDocument holds the string denoting the document edge name in mutations.
	EdgeDocument = "document"
	// Table holds the table name of the carrierbrand in the database.
	Table = "carrier_brands"
	// CarrierServiceTable is the table that holds the carrier_service relation/edge.
	CarrierServiceTable = "carrier_services"
	// CarrierServiceInverseTable is the table name for the CarrierService entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservice" package.
	CarrierServiceInverseTable = "carrier_services"
	// CarrierServiceColumn is the table column denoting the carrier_service relation/edge.
	CarrierServiceColumn = "carrier_brand_carrier_service"
	// CarrierTable is the table that holds the carrier relation/edge.
	CarrierTable = "carriers"
	// CarrierInverseTable is the table name for the Carrier entity.
	// It exists in this package in order to avoid circular dependency with the "carrier" package.
	CarrierInverseTable = "carriers"
	// CarrierColumn is the table column denoting the carrier relation/edge.
	CarrierColumn = "carrier_carrier_brand"
	// ParcelShopTable is the table that holds the parcel_shop relation/edge.
	ParcelShopTable = "parcel_shops"
	// ParcelShopInverseTable is the table name for the ParcelShop entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshop" package.
	ParcelShopInverseTable = "parcel_shops"
	// ParcelShopColumn is the table column denoting the parcel_shop relation/edge.
	ParcelShopColumn = "parcel_shop_carrier_brand"
	// PackagingTable is the table that holds the packaging relation/edge.
	PackagingTable = "packagings"
	// PackagingInverseTable is the table name for the Packaging entity.
	// It exists in this package in order to avoid circular dependency with the "packaging" package.
	PackagingInverseTable = "packagings"
	// PackagingColumn is the table column denoting the packaging relation/edge.
	PackagingColumn = "packaging_carrier_brand"
	// DocumentTable is the table that holds the document relation/edge.
	DocumentTable = "documents"
	// DocumentInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentInverseTable = "documents"
	// DocumentColumn is the table column denoting the document relation/edge.
	DocumentColumn = "document_carrier_brand"
)

// Columns holds all SQL columns for carrierbrand fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldLabelShort,
	FieldInternalID,
	FieldLogoURL,
	FieldTextColor,
	FieldBackgroundColor,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultTextColor holds the default value on creation for the "text_color" field.
	DefaultTextColor string
	// DefaultBackgroundColor holds the default value on creation for the "background_color" field.
	DefaultBackgroundColor string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// InternalID defines the type for the "internal_id" enum field.
type InternalID string

// InternalID values.
const (
	InternalIDBring    InternalID = "bring"
	InternalIDDAO      InternalID = "dao"
	InternalIDDF       InternalID = "df"
	InternalIDDSV      InternalID = "dsv"
	InternalIDEasyPost InternalID = "easy_post"
	InternalIDGLS      InternalID = "gls"
	InternalIDDHL      InternalID = "dhl"
	InternalIDPostNord InternalID = "post_nord"
	InternalIDUSPS     InternalID = "usps"
)

func (ii InternalID) String() string {
	return string(ii)
}

// InternalIDValidator is a validator for the "internal_id" field enum values. It is called by the builders before save.
func InternalIDValidator(ii InternalID) error {
	switch ii {
	case InternalIDBring, InternalIDDAO, InternalIDDF, InternalIDDSV, InternalIDEasyPost, InternalIDGLS, InternalIDDHL, InternalIDPostNord, InternalIDUSPS:
		return nil
	default:
		return fmt.Errorf("carrierbrand: invalid enum value for internal_id field: %q", ii)
	}
}

// OrderOption defines the ordering options for the CarrierBrand queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByLabelShort orders the results by the label_short field.
func ByLabelShort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabelShort, opts...).ToFunc()
}

// ByInternalID orders the results by the internal_id field.
func ByInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalID, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByTextColor orders the results by the text_color field.
func ByTextColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextColor, opts...).ToFunc()
}

// ByBackgroundColor orders the results by the background_color field.
func ByBackgroundColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundColor, opts...).ToFunc()
}

// ByCarrierServiceCount orders the results by carrier_service count.
func ByCarrierServiceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierServiceStep(), opts...)
	}
}

// ByCarrierService orders the results by carrier_service terms.
func ByCarrierService(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarrierCount orders the results by carrier count.
func ByCarrierCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierStep(), opts...)
	}
}

// ByCarrier orders the results by carrier terms.
func ByCarrier(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParcelShopCount orders the results by parcel_shop count.
func ByParcelShopCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParcelShopStep(), opts...)
	}
}

// ByParcelShop orders the results by parcel_shop terms.
func ByParcelShop(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPackagingCount orders the results by packaging count.
func ByPackagingCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPackagingStep(), opts...)
	}
}

// ByPackaging orders the results by packaging terms.
func ByPackaging(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentCount orders the results by document count.
func ByDocumentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentStep(), opts...)
	}
}

// ByDocument orders the results by document terms.
func ByDocument(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarrierServiceTable, CarrierServiceColumn),
	)
}
func newCarrierStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CarrierTable, CarrierColumn),
	)
}
func newParcelShopStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ParcelShopTable, ParcelShopColumn),
	)
}
func newPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PackagingTable, PackagingColumn),
	)
}
func newDocumentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DocumentTable, DocumentColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e InternalID) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *InternalID) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = InternalID(str)
	if err := InternalIDValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid InternalID", str)
	}
	return nil
}
