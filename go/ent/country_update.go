// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CountryUpdate is the builder for updating Country entities.
type CountryUpdate struct {
	config
	hooks    []Hook
	mutation *CountryMutation
}

// Where appends a list predicates to the CountryUpdate builder.
func (cu *CountryUpdate) Where(ps ...predicate.Country) *CountryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetLabel sets the "label" field.
func (cu *CountryUpdate) SetLabel(s string) *CountryUpdate {
	cu.mutation.SetLabel(s)
	return cu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableLabel(s *string) *CountryUpdate {
	if s != nil {
		cu.SetLabel(*s)
	}
	return cu
}

// SetAlpha2 sets the "alpha_2" field.
func (cu *CountryUpdate) SetAlpha2(s string) *CountryUpdate {
	cu.mutation.SetAlpha2(s)
	return cu
}

// SetNillableAlpha2 sets the "alpha_2" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableAlpha2(s *string) *CountryUpdate {
	if s != nil {
		cu.SetAlpha2(*s)
	}
	return cu
}

// SetAlpha3 sets the "alpha_3" field.
func (cu *CountryUpdate) SetAlpha3(s string) *CountryUpdate {
	cu.mutation.SetAlpha3(s)
	return cu
}

// SetNillableAlpha3 sets the "alpha_3" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableAlpha3(s *string) *CountryUpdate {
	if s != nil {
		cu.SetAlpha3(*s)
	}
	return cu
}

// SetCode sets the "code" field.
func (cu *CountryUpdate) SetCode(s string) *CountryUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableCode(s *string) *CountryUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetRegion sets the "region" field.
func (cu *CountryUpdate) SetRegion(c country.Region) *CountryUpdate {
	cu.mutation.SetRegion(c)
	return cu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableRegion(c *country.Region) *CountryUpdate {
	if c != nil {
		cu.SetRegion(*c)
	}
	return cu
}

// AddDeliveryRuleIDs adds the "delivery_rule" edge to the DeliveryRule entity by IDs.
func (cu *CountryUpdate) AddDeliveryRuleIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddDeliveryRuleIDs(ids...)
	return cu
}

// AddDeliveryRule adds the "delivery_rule" edges to the DeliveryRule entity.
func (cu *CountryUpdate) AddDeliveryRule(d ...*DeliveryRule) *CountryUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeliveryRuleIDs(ids...)
}

// AddAddresIDs adds the "address" edge to the Address entity by IDs.
func (cu *CountryUpdate) AddAddresIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddAddresIDs(ids...)
	return cu
}

// AddAddress adds the "address" edges to the Address entity.
func (cu *CountryUpdate) AddAddress(a ...*Address) *CountryUpdate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAddresIDs(ids...)
}

// AddAddressGlobalIDs adds the "address_global" edge to the AddressGlobal entity by IDs.
func (cu *CountryUpdate) AddAddressGlobalIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddAddressGlobalIDs(ids...)
	return cu
}

// AddAddressGlobal adds the "address_global" edges to the AddressGlobal entity.
func (cu *CountryUpdate) AddAddressGlobal(a ...*AddressGlobal) *CountryUpdate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAddressGlobalIDs(ids...)
}

// AddCarrierAdditionalServicePostNordConsigneeIDs adds the "carrier_additional_service_post_nord_consignee" edge to the CarrierAdditionalServicePostNord entity by IDs.
func (cu *CountryUpdate) AddCarrierAdditionalServicePostNordConsigneeIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddCarrierAdditionalServicePostNordConsigneeIDs(ids...)
	return cu
}

// AddCarrierAdditionalServicePostNordConsignee adds the "carrier_additional_service_post_nord_consignee" edges to the CarrierAdditionalServicePostNord entity.
func (cu *CountryUpdate) AddCarrierAdditionalServicePostNordConsignee(c ...*CarrierAdditionalServicePostNord) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCarrierAdditionalServicePostNordConsigneeIDs(ids...)
}

// AddCarrierAdditionalServicePostNordConsignorIDs adds the "carrier_additional_service_post_nord_consignor" edge to the CarrierAdditionalServicePostNord entity by IDs.
func (cu *CountryUpdate) AddCarrierAdditionalServicePostNordConsignorIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddCarrierAdditionalServicePostNordConsignorIDs(ids...)
	return cu
}

// AddCarrierAdditionalServicePostNordConsignor adds the "carrier_additional_service_post_nord_consignor" edges to the CarrierAdditionalServicePostNord entity.
func (cu *CountryUpdate) AddCarrierAdditionalServicePostNordConsignor(c ...*CarrierAdditionalServicePostNord) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCarrierAdditionalServicePostNordConsignorIDs(ids...)
}

// AddCarrierAdditionalServiceGLSConsigneeIDs adds the "carrier_additional_service_gls_consignee" edge to the CarrierAdditionalServiceGLS entity by IDs.
func (cu *CountryUpdate) AddCarrierAdditionalServiceGLSConsigneeIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddCarrierAdditionalServiceGLSConsigneeIDs(ids...)
	return cu
}

// AddCarrierAdditionalServiceGLSConsignee adds the "carrier_additional_service_gls_consignee" edges to the CarrierAdditionalServiceGLS entity.
func (cu *CountryUpdate) AddCarrierAdditionalServiceGLSConsignee(c ...*CarrierAdditionalServiceGLS) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCarrierAdditionalServiceGLSConsigneeIDs(ids...)
}

// AddCarrierAdditionalServiceGLSConsignorIDs adds the "carrier_additional_service_gls_consignor" edge to the CarrierAdditionalServiceGLS entity by IDs.
func (cu *CountryUpdate) AddCarrierAdditionalServiceGLSConsignorIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddCarrierAdditionalServiceGLSConsignorIDs(ids...)
	return cu
}

// AddCarrierAdditionalServiceGLSConsignor adds the "carrier_additional_service_gls_consignor" edges to the CarrierAdditionalServiceGLS entity.
func (cu *CountryUpdate) AddCarrierAdditionalServiceGLSConsignor(c ...*CarrierAdditionalServiceGLS) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCarrierAdditionalServiceGLSConsignorIDs(ids...)
}

// AddCountryHarmonizedCodeIDs adds the "country_harmonized_code" edge to the CountryHarmonizedCode entity by IDs.
func (cu *CountryUpdate) AddCountryHarmonizedCodeIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddCountryHarmonizedCodeIDs(ids...)
	return cu
}

// AddCountryHarmonizedCode adds the "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (cu *CountryUpdate) AddCountryHarmonizedCode(c ...*CountryHarmonizedCode) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCountryHarmonizedCodeIDs(ids...)
}

// AddInventoryItemIDs adds the "inventory_item" edge to the InventoryItem entity by IDs.
func (cu *CountryUpdate) AddInventoryItemIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.AddInventoryItemIDs(ids...)
	return cu
}

// AddInventoryItem adds the "inventory_item" edges to the InventoryItem entity.
func (cu *CountryUpdate) AddInventoryItem(i ...*InventoryItem) *CountryUpdate {
	ids := make([]pulid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddInventoryItemIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cu *CountryUpdate) Mutation() *CountryMutation {
	return cu.mutation
}

// ClearDeliveryRule clears all "delivery_rule" edges to the DeliveryRule entity.
func (cu *CountryUpdate) ClearDeliveryRule() *CountryUpdate {
	cu.mutation.ClearDeliveryRule()
	return cu
}

// RemoveDeliveryRuleIDs removes the "delivery_rule" edge to DeliveryRule entities by IDs.
func (cu *CountryUpdate) RemoveDeliveryRuleIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveDeliveryRuleIDs(ids...)
	return cu
}

// RemoveDeliveryRule removes "delivery_rule" edges to DeliveryRule entities.
func (cu *CountryUpdate) RemoveDeliveryRule(d ...*DeliveryRule) *CountryUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeliveryRuleIDs(ids...)
}

// ClearAddress clears all "address" edges to the Address entity.
func (cu *CountryUpdate) ClearAddress() *CountryUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// RemoveAddresIDs removes the "address" edge to Address entities by IDs.
func (cu *CountryUpdate) RemoveAddresIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveAddresIDs(ids...)
	return cu
}

// RemoveAddress removes "address" edges to Address entities.
func (cu *CountryUpdate) RemoveAddress(a ...*Address) *CountryUpdate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAddresIDs(ids...)
}

// ClearAddressGlobal clears all "address_global" edges to the AddressGlobal entity.
func (cu *CountryUpdate) ClearAddressGlobal() *CountryUpdate {
	cu.mutation.ClearAddressGlobal()
	return cu
}

// RemoveAddressGlobalIDs removes the "address_global" edge to AddressGlobal entities by IDs.
func (cu *CountryUpdate) RemoveAddressGlobalIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveAddressGlobalIDs(ids...)
	return cu
}

// RemoveAddressGlobal removes "address_global" edges to AddressGlobal entities.
func (cu *CountryUpdate) RemoveAddressGlobal(a ...*AddressGlobal) *CountryUpdate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAddressGlobalIDs(ids...)
}

// ClearCarrierAdditionalServicePostNordConsignee clears all "carrier_additional_service_post_nord_consignee" edges to the CarrierAdditionalServicePostNord entity.
func (cu *CountryUpdate) ClearCarrierAdditionalServicePostNordConsignee() *CountryUpdate {
	cu.mutation.ClearCarrierAdditionalServicePostNordConsignee()
	return cu
}

// RemoveCarrierAdditionalServicePostNordConsigneeIDs removes the "carrier_additional_service_post_nord_consignee" edge to CarrierAdditionalServicePostNord entities by IDs.
func (cu *CountryUpdate) RemoveCarrierAdditionalServicePostNordConsigneeIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveCarrierAdditionalServicePostNordConsigneeIDs(ids...)
	return cu
}

// RemoveCarrierAdditionalServicePostNordConsignee removes "carrier_additional_service_post_nord_consignee" edges to CarrierAdditionalServicePostNord entities.
func (cu *CountryUpdate) RemoveCarrierAdditionalServicePostNordConsignee(c ...*CarrierAdditionalServicePostNord) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCarrierAdditionalServicePostNordConsigneeIDs(ids...)
}

// ClearCarrierAdditionalServicePostNordConsignor clears all "carrier_additional_service_post_nord_consignor" edges to the CarrierAdditionalServicePostNord entity.
func (cu *CountryUpdate) ClearCarrierAdditionalServicePostNordConsignor() *CountryUpdate {
	cu.mutation.ClearCarrierAdditionalServicePostNordConsignor()
	return cu
}

// RemoveCarrierAdditionalServicePostNordConsignorIDs removes the "carrier_additional_service_post_nord_consignor" edge to CarrierAdditionalServicePostNord entities by IDs.
func (cu *CountryUpdate) RemoveCarrierAdditionalServicePostNordConsignorIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveCarrierAdditionalServicePostNordConsignorIDs(ids...)
	return cu
}

// RemoveCarrierAdditionalServicePostNordConsignor removes "carrier_additional_service_post_nord_consignor" edges to CarrierAdditionalServicePostNord entities.
func (cu *CountryUpdate) RemoveCarrierAdditionalServicePostNordConsignor(c ...*CarrierAdditionalServicePostNord) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCarrierAdditionalServicePostNordConsignorIDs(ids...)
}

// ClearCarrierAdditionalServiceGLSConsignee clears all "carrier_additional_service_gls_consignee" edges to the CarrierAdditionalServiceGLS entity.
func (cu *CountryUpdate) ClearCarrierAdditionalServiceGLSConsignee() *CountryUpdate {
	cu.mutation.ClearCarrierAdditionalServiceGLSConsignee()
	return cu
}

// RemoveCarrierAdditionalServiceGLSConsigneeIDs removes the "carrier_additional_service_gls_consignee" edge to CarrierAdditionalServiceGLS entities by IDs.
func (cu *CountryUpdate) RemoveCarrierAdditionalServiceGLSConsigneeIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveCarrierAdditionalServiceGLSConsigneeIDs(ids...)
	return cu
}

// RemoveCarrierAdditionalServiceGLSConsignee removes "carrier_additional_service_gls_consignee" edges to CarrierAdditionalServiceGLS entities.
func (cu *CountryUpdate) RemoveCarrierAdditionalServiceGLSConsignee(c ...*CarrierAdditionalServiceGLS) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCarrierAdditionalServiceGLSConsigneeIDs(ids...)
}

// ClearCarrierAdditionalServiceGLSConsignor clears all "carrier_additional_service_gls_consignor" edges to the CarrierAdditionalServiceGLS entity.
func (cu *CountryUpdate) ClearCarrierAdditionalServiceGLSConsignor() *CountryUpdate {
	cu.mutation.ClearCarrierAdditionalServiceGLSConsignor()
	return cu
}

// RemoveCarrierAdditionalServiceGLSConsignorIDs removes the "carrier_additional_service_gls_consignor" edge to CarrierAdditionalServiceGLS entities by IDs.
func (cu *CountryUpdate) RemoveCarrierAdditionalServiceGLSConsignorIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveCarrierAdditionalServiceGLSConsignorIDs(ids...)
	return cu
}

// RemoveCarrierAdditionalServiceGLSConsignor removes "carrier_additional_service_gls_consignor" edges to CarrierAdditionalServiceGLS entities.
func (cu *CountryUpdate) RemoveCarrierAdditionalServiceGLSConsignor(c ...*CarrierAdditionalServiceGLS) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCarrierAdditionalServiceGLSConsignorIDs(ids...)
}

// ClearCountryHarmonizedCode clears all "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (cu *CountryUpdate) ClearCountryHarmonizedCode() *CountryUpdate {
	cu.mutation.ClearCountryHarmonizedCode()
	return cu
}

// RemoveCountryHarmonizedCodeIDs removes the "country_harmonized_code" edge to CountryHarmonizedCode entities by IDs.
func (cu *CountryUpdate) RemoveCountryHarmonizedCodeIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveCountryHarmonizedCodeIDs(ids...)
	return cu
}

// RemoveCountryHarmonizedCode removes "country_harmonized_code" edges to CountryHarmonizedCode entities.
func (cu *CountryUpdate) RemoveCountryHarmonizedCode(c ...*CountryHarmonizedCode) *CountryUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCountryHarmonizedCodeIDs(ids...)
}

// ClearInventoryItem clears all "inventory_item" edges to the InventoryItem entity.
func (cu *CountryUpdate) ClearInventoryItem() *CountryUpdate {
	cu.mutation.ClearInventoryItem()
	return cu
}

// RemoveInventoryItemIDs removes the "inventory_item" edge to InventoryItem entities by IDs.
func (cu *CountryUpdate) RemoveInventoryItemIDs(ids ...pulid.ID) *CountryUpdate {
	cu.mutation.RemoveInventoryItemIDs(ids...)
	return cu
}

// RemoveInventoryItem removes "inventory_item" edges to InventoryItem entities.
func (cu *CountryUpdate) RemoveInventoryItem(i ...*InventoryItem) *CountryUpdate {
	ids := make([]pulid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveInventoryItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CountryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CountryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CountryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CountryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CountryUpdate) check() error {
	if v, ok := cu.mutation.Alpha2(); ok {
		if err := country.Alpha2Validator(v); err != nil {
			return &ValidationError{Name: "alpha_2", err: fmt.Errorf(`ent: validator failed for field "Country.alpha_2": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Alpha3(); ok {
		if err := country.Alpha3Validator(v); err != nil {
			return &ValidationError{Name: "alpha_3", err: fmt.Errorf(`ent: validator failed for field "Country.alpha_3": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Region(); ok {
		if err := country.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "Country.region": %w`, err)}
		}
	}
	return nil
}

func (cu *CountryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Label(); ok {
		_spec.SetField(country.FieldLabel, field.TypeString, value)
	}
	if value, ok := cu.mutation.Alpha2(); ok {
		_spec.SetField(country.FieldAlpha2, field.TypeString, value)
	}
	if value, ok := cu.mutation.Alpha3(); ok {
		_spec.SetField(country.FieldAlpha3, field.TypeString, value)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(country.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.Region(); ok {
		_spec.SetField(country.FieldRegion, field.TypeEnum, value)
	}
	if cu.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.DeliveryRuleTable,
			Columns: country.DeliveryRulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDeliveryRuleIDs(); len(nodes) > 0 && !cu.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.DeliveryRuleTable,
			Columns: country.DeliveryRulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.DeliveryRuleTable,
			Columns: country.DeliveryRulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressTable,
			Columns: []string{country.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAddressIDs(); len(nodes) > 0 && !cu.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressTable,
			Columns: []string{country.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressTable,
			Columns: []string{country.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AddressGlobalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressGlobalTable,
			Columns: []string{country.AddressGlobalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAddressGlobalIDs(); len(nodes) > 0 && !cu.mutation.AddressGlobalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressGlobalTable,
			Columns: []string{country.AddressGlobalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AddressGlobalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressGlobalTable,
			Columns: []string{country.AddressGlobalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierAdditionalServicePostNordConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsigneeTable,
			Columns: country.CarrierAdditionalServicePostNordConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCarrierAdditionalServicePostNordConsigneeIDs(); len(nodes) > 0 && !cu.mutation.CarrierAdditionalServicePostNordConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsigneeTable,
			Columns: country.CarrierAdditionalServicePostNordConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierAdditionalServicePostNordConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsigneeTable,
			Columns: country.CarrierAdditionalServicePostNordConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierAdditionalServicePostNordConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsignorTable,
			Columns: country.CarrierAdditionalServicePostNordConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCarrierAdditionalServicePostNordConsignorIDs(); len(nodes) > 0 && !cu.mutation.CarrierAdditionalServicePostNordConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsignorTable,
			Columns: country.CarrierAdditionalServicePostNordConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierAdditionalServicePostNordConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsignorTable,
			Columns: country.CarrierAdditionalServicePostNordConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierAdditionalServiceGLSConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsigneeTable,
			Columns: country.CarrierAdditionalServiceGLSConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCarrierAdditionalServiceGLSConsigneeIDs(); len(nodes) > 0 && !cu.mutation.CarrierAdditionalServiceGLSConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsigneeTable,
			Columns: country.CarrierAdditionalServiceGLSConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierAdditionalServiceGLSConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsigneeTable,
			Columns: country.CarrierAdditionalServiceGLSConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierAdditionalServiceGLSConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsignorTable,
			Columns: country.CarrierAdditionalServiceGLSConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCarrierAdditionalServiceGLSConsignorIDs(); len(nodes) > 0 && !cu.mutation.CarrierAdditionalServiceGLSConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsignorTable,
			Columns: country.CarrierAdditionalServiceGLSConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierAdditionalServiceGLSConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsignorTable,
			Columns: country.CarrierAdditionalServiceGLSConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CountryHarmonizedCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.CountryHarmonizedCodeTable,
			Columns: []string{country.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCountryHarmonizedCodeIDs(); len(nodes) > 0 && !cu.mutation.CountryHarmonizedCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.CountryHarmonizedCodeTable,
			Columns: []string{country.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CountryHarmonizedCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.CountryHarmonizedCodeTable,
			Columns: []string{country.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.InventoryItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.InventoryItemTable,
			Columns: []string{country.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedInventoryItemIDs(); len(nodes) > 0 && !cu.mutation.InventoryItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.InventoryItemTable,
			Columns: []string{country.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.InventoryItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.InventoryItemTable,
			Columns: []string{country.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CountryUpdateOne is the builder for updating a single Country entity.
type CountryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CountryMutation
}

// SetLabel sets the "label" field.
func (cuo *CountryUpdateOne) SetLabel(s string) *CountryUpdateOne {
	cuo.mutation.SetLabel(s)
	return cuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableLabel(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetLabel(*s)
	}
	return cuo
}

// SetAlpha2 sets the "alpha_2" field.
func (cuo *CountryUpdateOne) SetAlpha2(s string) *CountryUpdateOne {
	cuo.mutation.SetAlpha2(s)
	return cuo
}

// SetNillableAlpha2 sets the "alpha_2" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableAlpha2(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetAlpha2(*s)
	}
	return cuo
}

// SetAlpha3 sets the "alpha_3" field.
func (cuo *CountryUpdateOne) SetAlpha3(s string) *CountryUpdateOne {
	cuo.mutation.SetAlpha3(s)
	return cuo
}

// SetNillableAlpha3 sets the "alpha_3" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableAlpha3(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetAlpha3(*s)
	}
	return cuo
}

// SetCode sets the "code" field.
func (cuo *CountryUpdateOne) SetCode(s string) *CountryUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableCode(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetRegion sets the "region" field.
func (cuo *CountryUpdateOne) SetRegion(c country.Region) *CountryUpdateOne {
	cuo.mutation.SetRegion(c)
	return cuo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableRegion(c *country.Region) *CountryUpdateOne {
	if c != nil {
		cuo.SetRegion(*c)
	}
	return cuo
}

// AddDeliveryRuleIDs adds the "delivery_rule" edge to the DeliveryRule entity by IDs.
func (cuo *CountryUpdateOne) AddDeliveryRuleIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddDeliveryRuleIDs(ids...)
	return cuo
}

// AddDeliveryRule adds the "delivery_rule" edges to the DeliveryRule entity.
func (cuo *CountryUpdateOne) AddDeliveryRule(d ...*DeliveryRule) *CountryUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeliveryRuleIDs(ids...)
}

// AddAddresIDs adds the "address" edge to the Address entity by IDs.
func (cuo *CountryUpdateOne) AddAddresIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddAddresIDs(ids...)
	return cuo
}

// AddAddress adds the "address" edges to the Address entity.
func (cuo *CountryUpdateOne) AddAddress(a ...*Address) *CountryUpdateOne {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAddresIDs(ids...)
}

// AddAddressGlobalIDs adds the "address_global" edge to the AddressGlobal entity by IDs.
func (cuo *CountryUpdateOne) AddAddressGlobalIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddAddressGlobalIDs(ids...)
	return cuo
}

// AddAddressGlobal adds the "address_global" edges to the AddressGlobal entity.
func (cuo *CountryUpdateOne) AddAddressGlobal(a ...*AddressGlobal) *CountryUpdateOne {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAddressGlobalIDs(ids...)
}

// AddCarrierAdditionalServicePostNordConsigneeIDs adds the "carrier_additional_service_post_nord_consignee" edge to the CarrierAdditionalServicePostNord entity by IDs.
func (cuo *CountryUpdateOne) AddCarrierAdditionalServicePostNordConsigneeIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddCarrierAdditionalServicePostNordConsigneeIDs(ids...)
	return cuo
}

// AddCarrierAdditionalServicePostNordConsignee adds the "carrier_additional_service_post_nord_consignee" edges to the CarrierAdditionalServicePostNord entity.
func (cuo *CountryUpdateOne) AddCarrierAdditionalServicePostNordConsignee(c ...*CarrierAdditionalServicePostNord) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCarrierAdditionalServicePostNordConsigneeIDs(ids...)
}

// AddCarrierAdditionalServicePostNordConsignorIDs adds the "carrier_additional_service_post_nord_consignor" edge to the CarrierAdditionalServicePostNord entity by IDs.
func (cuo *CountryUpdateOne) AddCarrierAdditionalServicePostNordConsignorIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddCarrierAdditionalServicePostNordConsignorIDs(ids...)
	return cuo
}

// AddCarrierAdditionalServicePostNordConsignor adds the "carrier_additional_service_post_nord_consignor" edges to the CarrierAdditionalServicePostNord entity.
func (cuo *CountryUpdateOne) AddCarrierAdditionalServicePostNordConsignor(c ...*CarrierAdditionalServicePostNord) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCarrierAdditionalServicePostNordConsignorIDs(ids...)
}

// AddCarrierAdditionalServiceGLSConsigneeIDs adds the "carrier_additional_service_gls_consignee" edge to the CarrierAdditionalServiceGLS entity by IDs.
func (cuo *CountryUpdateOne) AddCarrierAdditionalServiceGLSConsigneeIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddCarrierAdditionalServiceGLSConsigneeIDs(ids...)
	return cuo
}

// AddCarrierAdditionalServiceGLSConsignee adds the "carrier_additional_service_gls_consignee" edges to the CarrierAdditionalServiceGLS entity.
func (cuo *CountryUpdateOne) AddCarrierAdditionalServiceGLSConsignee(c ...*CarrierAdditionalServiceGLS) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCarrierAdditionalServiceGLSConsigneeIDs(ids...)
}

// AddCarrierAdditionalServiceGLSConsignorIDs adds the "carrier_additional_service_gls_consignor" edge to the CarrierAdditionalServiceGLS entity by IDs.
func (cuo *CountryUpdateOne) AddCarrierAdditionalServiceGLSConsignorIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddCarrierAdditionalServiceGLSConsignorIDs(ids...)
	return cuo
}

// AddCarrierAdditionalServiceGLSConsignor adds the "carrier_additional_service_gls_consignor" edges to the CarrierAdditionalServiceGLS entity.
func (cuo *CountryUpdateOne) AddCarrierAdditionalServiceGLSConsignor(c ...*CarrierAdditionalServiceGLS) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCarrierAdditionalServiceGLSConsignorIDs(ids...)
}

// AddCountryHarmonizedCodeIDs adds the "country_harmonized_code" edge to the CountryHarmonizedCode entity by IDs.
func (cuo *CountryUpdateOne) AddCountryHarmonizedCodeIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddCountryHarmonizedCodeIDs(ids...)
	return cuo
}

// AddCountryHarmonizedCode adds the "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (cuo *CountryUpdateOne) AddCountryHarmonizedCode(c ...*CountryHarmonizedCode) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCountryHarmonizedCodeIDs(ids...)
}

// AddInventoryItemIDs adds the "inventory_item" edge to the InventoryItem entity by IDs.
func (cuo *CountryUpdateOne) AddInventoryItemIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.AddInventoryItemIDs(ids...)
	return cuo
}

// AddInventoryItem adds the "inventory_item" edges to the InventoryItem entity.
func (cuo *CountryUpdateOne) AddInventoryItem(i ...*InventoryItem) *CountryUpdateOne {
	ids := make([]pulid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddInventoryItemIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cuo *CountryUpdateOne) Mutation() *CountryMutation {
	return cuo.mutation
}

// ClearDeliveryRule clears all "delivery_rule" edges to the DeliveryRule entity.
func (cuo *CountryUpdateOne) ClearDeliveryRule() *CountryUpdateOne {
	cuo.mutation.ClearDeliveryRule()
	return cuo
}

// RemoveDeliveryRuleIDs removes the "delivery_rule" edge to DeliveryRule entities by IDs.
func (cuo *CountryUpdateOne) RemoveDeliveryRuleIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveDeliveryRuleIDs(ids...)
	return cuo
}

// RemoveDeliveryRule removes "delivery_rule" edges to DeliveryRule entities.
func (cuo *CountryUpdateOne) RemoveDeliveryRule(d ...*DeliveryRule) *CountryUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeliveryRuleIDs(ids...)
}

// ClearAddress clears all "address" edges to the Address entity.
func (cuo *CountryUpdateOne) ClearAddress() *CountryUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// RemoveAddresIDs removes the "address" edge to Address entities by IDs.
func (cuo *CountryUpdateOne) RemoveAddresIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveAddresIDs(ids...)
	return cuo
}

// RemoveAddress removes "address" edges to Address entities.
func (cuo *CountryUpdateOne) RemoveAddress(a ...*Address) *CountryUpdateOne {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAddresIDs(ids...)
}

// ClearAddressGlobal clears all "address_global" edges to the AddressGlobal entity.
func (cuo *CountryUpdateOne) ClearAddressGlobal() *CountryUpdateOne {
	cuo.mutation.ClearAddressGlobal()
	return cuo
}

// RemoveAddressGlobalIDs removes the "address_global" edge to AddressGlobal entities by IDs.
func (cuo *CountryUpdateOne) RemoveAddressGlobalIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveAddressGlobalIDs(ids...)
	return cuo
}

// RemoveAddressGlobal removes "address_global" edges to AddressGlobal entities.
func (cuo *CountryUpdateOne) RemoveAddressGlobal(a ...*AddressGlobal) *CountryUpdateOne {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAddressGlobalIDs(ids...)
}

// ClearCarrierAdditionalServicePostNordConsignee clears all "carrier_additional_service_post_nord_consignee" edges to the CarrierAdditionalServicePostNord entity.
func (cuo *CountryUpdateOne) ClearCarrierAdditionalServicePostNordConsignee() *CountryUpdateOne {
	cuo.mutation.ClearCarrierAdditionalServicePostNordConsignee()
	return cuo
}

// RemoveCarrierAdditionalServicePostNordConsigneeIDs removes the "carrier_additional_service_post_nord_consignee" edge to CarrierAdditionalServicePostNord entities by IDs.
func (cuo *CountryUpdateOne) RemoveCarrierAdditionalServicePostNordConsigneeIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveCarrierAdditionalServicePostNordConsigneeIDs(ids...)
	return cuo
}

// RemoveCarrierAdditionalServicePostNordConsignee removes "carrier_additional_service_post_nord_consignee" edges to CarrierAdditionalServicePostNord entities.
func (cuo *CountryUpdateOne) RemoveCarrierAdditionalServicePostNordConsignee(c ...*CarrierAdditionalServicePostNord) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCarrierAdditionalServicePostNordConsigneeIDs(ids...)
}

// ClearCarrierAdditionalServicePostNordConsignor clears all "carrier_additional_service_post_nord_consignor" edges to the CarrierAdditionalServicePostNord entity.
func (cuo *CountryUpdateOne) ClearCarrierAdditionalServicePostNordConsignor() *CountryUpdateOne {
	cuo.mutation.ClearCarrierAdditionalServicePostNordConsignor()
	return cuo
}

// RemoveCarrierAdditionalServicePostNordConsignorIDs removes the "carrier_additional_service_post_nord_consignor" edge to CarrierAdditionalServicePostNord entities by IDs.
func (cuo *CountryUpdateOne) RemoveCarrierAdditionalServicePostNordConsignorIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveCarrierAdditionalServicePostNordConsignorIDs(ids...)
	return cuo
}

// RemoveCarrierAdditionalServicePostNordConsignor removes "carrier_additional_service_post_nord_consignor" edges to CarrierAdditionalServicePostNord entities.
func (cuo *CountryUpdateOne) RemoveCarrierAdditionalServicePostNordConsignor(c ...*CarrierAdditionalServicePostNord) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCarrierAdditionalServicePostNordConsignorIDs(ids...)
}

// ClearCarrierAdditionalServiceGLSConsignee clears all "carrier_additional_service_gls_consignee" edges to the CarrierAdditionalServiceGLS entity.
func (cuo *CountryUpdateOne) ClearCarrierAdditionalServiceGLSConsignee() *CountryUpdateOne {
	cuo.mutation.ClearCarrierAdditionalServiceGLSConsignee()
	return cuo
}

// RemoveCarrierAdditionalServiceGLSConsigneeIDs removes the "carrier_additional_service_gls_consignee" edge to CarrierAdditionalServiceGLS entities by IDs.
func (cuo *CountryUpdateOne) RemoveCarrierAdditionalServiceGLSConsigneeIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveCarrierAdditionalServiceGLSConsigneeIDs(ids...)
	return cuo
}

// RemoveCarrierAdditionalServiceGLSConsignee removes "carrier_additional_service_gls_consignee" edges to CarrierAdditionalServiceGLS entities.
func (cuo *CountryUpdateOne) RemoveCarrierAdditionalServiceGLSConsignee(c ...*CarrierAdditionalServiceGLS) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCarrierAdditionalServiceGLSConsigneeIDs(ids...)
}

// ClearCarrierAdditionalServiceGLSConsignor clears all "carrier_additional_service_gls_consignor" edges to the CarrierAdditionalServiceGLS entity.
func (cuo *CountryUpdateOne) ClearCarrierAdditionalServiceGLSConsignor() *CountryUpdateOne {
	cuo.mutation.ClearCarrierAdditionalServiceGLSConsignor()
	return cuo
}

// RemoveCarrierAdditionalServiceGLSConsignorIDs removes the "carrier_additional_service_gls_consignor" edge to CarrierAdditionalServiceGLS entities by IDs.
func (cuo *CountryUpdateOne) RemoveCarrierAdditionalServiceGLSConsignorIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveCarrierAdditionalServiceGLSConsignorIDs(ids...)
	return cuo
}

// RemoveCarrierAdditionalServiceGLSConsignor removes "carrier_additional_service_gls_consignor" edges to CarrierAdditionalServiceGLS entities.
func (cuo *CountryUpdateOne) RemoveCarrierAdditionalServiceGLSConsignor(c ...*CarrierAdditionalServiceGLS) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCarrierAdditionalServiceGLSConsignorIDs(ids...)
}

// ClearCountryHarmonizedCode clears all "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (cuo *CountryUpdateOne) ClearCountryHarmonizedCode() *CountryUpdateOne {
	cuo.mutation.ClearCountryHarmonizedCode()
	return cuo
}

// RemoveCountryHarmonizedCodeIDs removes the "country_harmonized_code" edge to CountryHarmonizedCode entities by IDs.
func (cuo *CountryUpdateOne) RemoveCountryHarmonizedCodeIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveCountryHarmonizedCodeIDs(ids...)
	return cuo
}

// RemoveCountryHarmonizedCode removes "country_harmonized_code" edges to CountryHarmonizedCode entities.
func (cuo *CountryUpdateOne) RemoveCountryHarmonizedCode(c ...*CountryHarmonizedCode) *CountryUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCountryHarmonizedCodeIDs(ids...)
}

// ClearInventoryItem clears all "inventory_item" edges to the InventoryItem entity.
func (cuo *CountryUpdateOne) ClearInventoryItem() *CountryUpdateOne {
	cuo.mutation.ClearInventoryItem()
	return cuo
}

// RemoveInventoryItemIDs removes the "inventory_item" edge to InventoryItem entities by IDs.
func (cuo *CountryUpdateOne) RemoveInventoryItemIDs(ids ...pulid.ID) *CountryUpdateOne {
	cuo.mutation.RemoveInventoryItemIDs(ids...)
	return cuo
}

// RemoveInventoryItem removes "inventory_item" edges to InventoryItem entities.
func (cuo *CountryUpdateOne) RemoveInventoryItem(i ...*InventoryItem) *CountryUpdateOne {
	ids := make([]pulid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveInventoryItemIDs(ids...)
}

// Where appends a list predicates to the CountryUpdate builder.
func (cuo *CountryUpdateOne) Where(ps ...predicate.Country) *CountryUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CountryUpdateOne) Select(field string, fields ...string) *CountryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Country entity.
func (cuo *CountryUpdateOne) Save(ctx context.Context) (*Country, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CountryUpdateOne) SaveX(ctx context.Context) *Country {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CountryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CountryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CountryUpdateOne) check() error {
	if v, ok := cuo.mutation.Alpha2(); ok {
		if err := country.Alpha2Validator(v); err != nil {
			return &ValidationError{Name: "alpha_2", err: fmt.Errorf(`ent: validator failed for field "Country.alpha_2": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Alpha3(); ok {
		if err := country.Alpha3Validator(v); err != nil {
			return &ValidationError{Name: "alpha_3", err: fmt.Errorf(`ent: validator failed for field "Country.alpha_3": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Region(); ok {
		if err := country.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "Country.region": %w`, err)}
		}
	}
	return nil
}

func (cuo *CountryUpdateOne) sqlSave(ctx context.Context) (_node *Country, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Country.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, country.FieldID)
		for _, f := range fields {
			if !country.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != country.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Label(); ok {
		_spec.SetField(country.FieldLabel, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Alpha2(); ok {
		_spec.SetField(country.FieldAlpha2, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Alpha3(); ok {
		_spec.SetField(country.FieldAlpha3, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(country.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Region(); ok {
		_spec.SetField(country.FieldRegion, field.TypeEnum, value)
	}
	if cuo.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.DeliveryRuleTable,
			Columns: country.DeliveryRulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDeliveryRuleIDs(); len(nodes) > 0 && !cuo.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.DeliveryRuleTable,
			Columns: country.DeliveryRulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.DeliveryRuleTable,
			Columns: country.DeliveryRulePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressTable,
			Columns: []string{country.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAddressIDs(); len(nodes) > 0 && !cuo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressTable,
			Columns: []string{country.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressTable,
			Columns: []string{country.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AddressGlobalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressGlobalTable,
			Columns: []string{country.AddressGlobalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAddressGlobalIDs(); len(nodes) > 0 && !cuo.mutation.AddressGlobalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressGlobalTable,
			Columns: []string{country.AddressGlobalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AddressGlobalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressGlobalTable,
			Columns: []string{country.AddressGlobalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierAdditionalServicePostNordConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsigneeTable,
			Columns: country.CarrierAdditionalServicePostNordConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCarrierAdditionalServicePostNordConsigneeIDs(); len(nodes) > 0 && !cuo.mutation.CarrierAdditionalServicePostNordConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsigneeTable,
			Columns: country.CarrierAdditionalServicePostNordConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierAdditionalServicePostNordConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsigneeTable,
			Columns: country.CarrierAdditionalServicePostNordConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierAdditionalServicePostNordConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsignorTable,
			Columns: country.CarrierAdditionalServicePostNordConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCarrierAdditionalServicePostNordConsignorIDs(); len(nodes) > 0 && !cuo.mutation.CarrierAdditionalServicePostNordConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsignorTable,
			Columns: country.CarrierAdditionalServicePostNordConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierAdditionalServicePostNordConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsignorTable,
			Columns: country.CarrierAdditionalServicePostNordConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierAdditionalServiceGLSConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsigneeTable,
			Columns: country.CarrierAdditionalServiceGLSConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCarrierAdditionalServiceGLSConsigneeIDs(); len(nodes) > 0 && !cuo.mutation.CarrierAdditionalServiceGLSConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsigneeTable,
			Columns: country.CarrierAdditionalServiceGLSConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierAdditionalServiceGLSConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsigneeTable,
			Columns: country.CarrierAdditionalServiceGLSConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierAdditionalServiceGLSConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsignorTable,
			Columns: country.CarrierAdditionalServiceGLSConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCarrierAdditionalServiceGLSConsignorIDs(); len(nodes) > 0 && !cuo.mutation.CarrierAdditionalServiceGLSConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsignorTable,
			Columns: country.CarrierAdditionalServiceGLSConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierAdditionalServiceGLSConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsignorTable,
			Columns: country.CarrierAdditionalServiceGLSConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CountryHarmonizedCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.CountryHarmonizedCodeTable,
			Columns: []string{country.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCountryHarmonizedCodeIDs(); len(nodes) > 0 && !cuo.mutation.CountryHarmonizedCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.CountryHarmonizedCodeTable,
			Columns: []string{country.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CountryHarmonizedCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.CountryHarmonizedCodeTable,
			Columns: []string{country.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.InventoryItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.InventoryItemTable,
			Columns: []string{country.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedInventoryItemIDs(); len(nodes) > 0 && !cuo.mutation.InventoryItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.InventoryItemTable,
			Columns: []string{country.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.InventoryItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.InventoryItemTable,
			Columns: []string{country.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Country{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
