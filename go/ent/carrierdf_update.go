// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierDFUpdate is the builder for updating CarrierDF entities.
type CarrierDFUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierDFMutation
}

// Where appends a list predicates to the CarrierDFUpdate builder.
func (cdu *CarrierDFUpdate) Where(ps ...predicate.CarrierDF) *CarrierDFUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetTenantID sets the "tenant_id" field.
func (cdu *CarrierDFUpdate) SetTenantID(pu pulid.ID) *CarrierDFUpdate {
	cdu.mutation.SetTenantID(pu)
	return cdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cdu *CarrierDFUpdate) SetNillableTenantID(pu *pulid.ID) *CarrierDFUpdate {
	if pu != nil {
		cdu.SetTenantID(*pu)
	}
	return cdu
}

// SetCustomerID sets the "customer_id" field.
func (cdu *CarrierDFUpdate) SetCustomerID(s string) *CarrierDFUpdate {
	cdu.mutation.SetCustomerID(s)
	return cdu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cdu *CarrierDFUpdate) SetNillableCustomerID(s *string) *CarrierDFUpdate {
	if s != nil {
		cdu.SetCustomerID(*s)
	}
	return cdu
}

// SetAgreementNumber sets the "agreement_number" field.
func (cdu *CarrierDFUpdate) SetAgreementNumber(s string) *CarrierDFUpdate {
	cdu.mutation.SetAgreementNumber(s)
	return cdu
}

// SetNillableAgreementNumber sets the "agreement_number" field if the given value is not nil.
func (cdu *CarrierDFUpdate) SetNillableAgreementNumber(s *string) *CarrierDFUpdate {
	if s != nil {
		cdu.SetAgreementNumber(*s)
	}
	return cdu
}

// SetWhoPays sets the "who_pays" field.
func (cdu *CarrierDFUpdate) SetWhoPays(cp carrierdf.WhoPays) *CarrierDFUpdate {
	cdu.mutation.SetWhoPays(cp)
	return cdu
}

// SetNillableWhoPays sets the "who_pays" field if the given value is not nil.
func (cdu *CarrierDFUpdate) SetNillableWhoPays(cp *carrierdf.WhoPays) *CarrierDFUpdate {
	if cp != nil {
		cdu.SetWhoPays(*cp)
	}
	return cdu
}

// SetTest sets the "test" field.
func (cdu *CarrierDFUpdate) SetTest(b bool) *CarrierDFUpdate {
	cdu.mutation.SetTest(b)
	return cdu
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cdu *CarrierDFUpdate) SetNillableTest(b *bool) *CarrierDFUpdate {
	if b != nil {
		cdu.SetTest(*b)
	}
	return cdu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cdu *CarrierDFUpdate) SetTenant(t *Tenant) *CarrierDFUpdate {
	return cdu.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cdu *CarrierDFUpdate) SetCarrierID(id pulid.ID) *CarrierDFUpdate {
	cdu.mutation.SetCarrierID(id)
	return cdu
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cdu *CarrierDFUpdate) SetCarrier(c *Carrier) *CarrierDFUpdate {
	return cdu.SetCarrierID(c.ID)
}

// Mutation returns the CarrierDFMutation object of the builder.
func (cdu *CarrierDFUpdate) Mutation() *CarrierDFMutation {
	return cdu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cdu *CarrierDFUpdate) ClearTenant() *CarrierDFUpdate {
	cdu.mutation.ClearTenant()
	return cdu
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cdu *CarrierDFUpdate) ClearCarrier() *CarrierDFUpdate {
	cdu.mutation.ClearCarrier()
	return cdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CarrierDFUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cdu.sqlSave, cdu.mutation, cdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CarrierDFUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CarrierDFUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CarrierDFUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdu *CarrierDFUpdate) check() error {
	if v, ok := cdu.mutation.WhoPays(); ok {
		if err := carrierdf.WhoPaysValidator(v); err != nil {
			return &ValidationError{Name: "who_pays", err: fmt.Errorf(`ent: validator failed for field "CarrierDF.who_pays": %w`, err)}
		}
	}
	if cdu.mutation.TenantCleared() && len(cdu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierDF.tenant"`)
	}
	if cdu.mutation.CarrierCleared() && len(cdu.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierDF.carrier"`)
	}
	return nil
}

func (cdu *CarrierDFUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierdf.Table, carrierdf.Columns, sqlgraph.NewFieldSpec(carrierdf.FieldID, field.TypeString))
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.CustomerID(); ok {
		_spec.SetField(carrierdf.FieldCustomerID, field.TypeString, value)
	}
	if value, ok := cdu.mutation.AgreementNumber(); ok {
		_spec.SetField(carrierdf.FieldAgreementNumber, field.TypeString, value)
	}
	if value, ok := cdu.mutation.WhoPays(); ok {
		_spec.SetField(carrierdf.FieldWhoPays, field.TypeEnum, value)
	}
	if value, ok := cdu.mutation.Test(); ok {
		_spec.SetField(carrierdf.FieldTest, field.TypeBool, value)
	}
	if cdu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdf.TenantTable,
			Columns: []string{carrierdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdf.TenantTable,
			Columns: []string{carrierdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdf.CarrierTable,
			Columns: []string{carrierdf.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdf.CarrierTable,
			Columns: []string{carrierdf.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierdf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdu.mutation.done = true
	return n, nil
}

// CarrierDFUpdateOne is the builder for updating a single CarrierDF entity.
type CarrierDFUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierDFMutation
}

// SetTenantID sets the "tenant_id" field.
func (cduo *CarrierDFUpdateOne) SetTenantID(pu pulid.ID) *CarrierDFUpdateOne {
	cduo.mutation.SetTenantID(pu)
	return cduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cduo *CarrierDFUpdateOne) SetNillableTenantID(pu *pulid.ID) *CarrierDFUpdateOne {
	if pu != nil {
		cduo.SetTenantID(*pu)
	}
	return cduo
}

// SetCustomerID sets the "customer_id" field.
func (cduo *CarrierDFUpdateOne) SetCustomerID(s string) *CarrierDFUpdateOne {
	cduo.mutation.SetCustomerID(s)
	return cduo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cduo *CarrierDFUpdateOne) SetNillableCustomerID(s *string) *CarrierDFUpdateOne {
	if s != nil {
		cduo.SetCustomerID(*s)
	}
	return cduo
}

// SetAgreementNumber sets the "agreement_number" field.
func (cduo *CarrierDFUpdateOne) SetAgreementNumber(s string) *CarrierDFUpdateOne {
	cduo.mutation.SetAgreementNumber(s)
	return cduo
}

// SetNillableAgreementNumber sets the "agreement_number" field if the given value is not nil.
func (cduo *CarrierDFUpdateOne) SetNillableAgreementNumber(s *string) *CarrierDFUpdateOne {
	if s != nil {
		cduo.SetAgreementNumber(*s)
	}
	return cduo
}

// SetWhoPays sets the "who_pays" field.
func (cduo *CarrierDFUpdateOne) SetWhoPays(cp carrierdf.WhoPays) *CarrierDFUpdateOne {
	cduo.mutation.SetWhoPays(cp)
	return cduo
}

// SetNillableWhoPays sets the "who_pays" field if the given value is not nil.
func (cduo *CarrierDFUpdateOne) SetNillableWhoPays(cp *carrierdf.WhoPays) *CarrierDFUpdateOne {
	if cp != nil {
		cduo.SetWhoPays(*cp)
	}
	return cduo
}

// SetTest sets the "test" field.
func (cduo *CarrierDFUpdateOne) SetTest(b bool) *CarrierDFUpdateOne {
	cduo.mutation.SetTest(b)
	return cduo
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cduo *CarrierDFUpdateOne) SetNillableTest(b *bool) *CarrierDFUpdateOne {
	if b != nil {
		cduo.SetTest(*b)
	}
	return cduo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cduo *CarrierDFUpdateOne) SetTenant(t *Tenant) *CarrierDFUpdateOne {
	return cduo.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cduo *CarrierDFUpdateOne) SetCarrierID(id pulid.ID) *CarrierDFUpdateOne {
	cduo.mutation.SetCarrierID(id)
	return cduo
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cduo *CarrierDFUpdateOne) SetCarrier(c *Carrier) *CarrierDFUpdateOne {
	return cduo.SetCarrierID(c.ID)
}

// Mutation returns the CarrierDFMutation object of the builder.
func (cduo *CarrierDFUpdateOne) Mutation() *CarrierDFMutation {
	return cduo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cduo *CarrierDFUpdateOne) ClearTenant() *CarrierDFUpdateOne {
	cduo.mutation.ClearTenant()
	return cduo
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cduo *CarrierDFUpdateOne) ClearCarrier() *CarrierDFUpdateOne {
	cduo.mutation.ClearCarrier()
	return cduo
}

// Where appends a list predicates to the CarrierDFUpdate builder.
func (cduo *CarrierDFUpdateOne) Where(ps ...predicate.CarrierDF) *CarrierDFUpdateOne {
	cduo.mutation.Where(ps...)
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CarrierDFUpdateOne) Select(field string, fields ...string) *CarrierDFUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CarrierDF entity.
func (cduo *CarrierDFUpdateOne) Save(ctx context.Context) (*CarrierDF, error) {
	return withHooks(ctx, cduo.sqlSave, cduo.mutation, cduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CarrierDFUpdateOne) SaveX(ctx context.Context) *CarrierDF {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CarrierDFUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CarrierDFUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cduo *CarrierDFUpdateOne) check() error {
	if v, ok := cduo.mutation.WhoPays(); ok {
		if err := carrierdf.WhoPaysValidator(v); err != nil {
			return &ValidationError{Name: "who_pays", err: fmt.Errorf(`ent: validator failed for field "CarrierDF.who_pays": %w`, err)}
		}
	}
	if cduo.mutation.TenantCleared() && len(cduo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierDF.tenant"`)
	}
	if cduo.mutation.CarrierCleared() && len(cduo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierDF.carrier"`)
	}
	return nil
}

func (cduo *CarrierDFUpdateOne) sqlSave(ctx context.Context) (_node *CarrierDF, err error) {
	if err := cduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierdf.Table, carrierdf.Columns, sqlgraph.NewFieldSpec(carrierdf.FieldID, field.TypeString))
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierDF.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierdf.FieldID)
		for _, f := range fields {
			if !carrierdf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierdf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.CustomerID(); ok {
		_spec.SetField(carrierdf.FieldCustomerID, field.TypeString, value)
	}
	if value, ok := cduo.mutation.AgreementNumber(); ok {
		_spec.SetField(carrierdf.FieldAgreementNumber, field.TypeString, value)
	}
	if value, ok := cduo.mutation.WhoPays(); ok {
		_spec.SetField(carrierdf.FieldWhoPays, field.TypeEnum, value)
	}
	if value, ok := cduo.mutation.Test(); ok {
		_spec.SetField(carrierdf.FieldTest, field.TypeBool, value)
	}
	if cduo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdf.TenantTable,
			Columns: []string{carrierdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdf.TenantTable,
			Columns: []string{carrierdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cduo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdf.CarrierTable,
			Columns: []string{carrierdf.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdf.CarrierTable,
			Columns: []string{carrierdf.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierDF{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierdf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cduo.mutation.done = true
	return _node, nil
}
