// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ParcelShopPostNord is the model entity for the ParcelShopPostNord schema.
type ParcelShopPostNord struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// ServicePointID holds the value of the "service_point_id" field.
	ServicePointID string `json:"service_point_id,omitempty"`
	// Pudoid holds the value of the "pudoid" field.
	Pudoid string `json:"pudoid,omitempty"`
	// No idea what the options are aside from the default: 156. Maybe box, shop, etc??
	TypeID string `json:"type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParcelShopPostNordQuery when eager-loading is set.
	Edges                             ParcelShopPostNordEdges `json:"edges"`
	parcel_shop_parcel_shop_post_nord *pulid.ID
	selectValues                      sql.SelectValues
}

// ParcelShopPostNordEdges holds the relations/edges for other nodes in the graph.
type ParcelShopPostNordEdges struct {
	// ParcelShop holds the value of the parcel_shop edge.
	ParcelShop *ParcelShop `json:"parcel_shop,omitempty"`
	// AddressDelivery holds the value of the address_delivery edge.
	AddressDelivery *AddressGlobal `json:"address_delivery,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ParcelShopOrErr returns the ParcelShop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopPostNordEdges) ParcelShopOrErr() (*ParcelShop, error) {
	if e.ParcelShop != nil {
		return e.ParcelShop, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: parcelshop.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop"}
}

// AddressDeliveryOrErr returns the AddressDelivery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParcelShopPostNordEdges) AddressDeliveryOrErr() (*AddressGlobal, error) {
	if e.AddressDelivery != nil {
		return e.AddressDelivery, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: addressglobal.Label}
	}
	return nil, &NotLoadedError{edge: "address_delivery"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ParcelShopPostNord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parcelshoppostnord.FieldID:
			values[i] = new(pulid.ID)
		case parcelshoppostnord.FieldServicePointID, parcelshoppostnord.FieldPudoid, parcelshoppostnord.FieldTypeID:
			values[i] = new(sql.NullString)
		case parcelshoppostnord.ForeignKeys[0]: // parcel_shop_parcel_shop_post_nord
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ParcelShopPostNord fields.
func (pspn *ParcelShopPostNord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parcelshoppostnord.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pspn.ID = *value
			}
		case parcelshoppostnord.FieldServicePointID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_point_id", values[i])
			} else if value.Valid {
				pspn.ServicePointID = value.String
			}
		case parcelshoppostnord.FieldPudoid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pudoid", values[i])
			} else if value.Valid {
				pspn.Pudoid = value.String
			}
		case parcelshoppostnord.FieldTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				pspn.TypeID = value.String
			}
		case parcelshoppostnord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parcel_shop_parcel_shop_post_nord", values[i])
			} else if value.Valid {
				pspn.parcel_shop_parcel_shop_post_nord = new(pulid.ID)
				*pspn.parcel_shop_parcel_shop_post_nord = *value.S.(*pulid.ID)
			}
		default:
			pspn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ParcelShopPostNord.
// This includes values selected through modifiers, order, etc.
func (pspn *ParcelShopPostNord) Value(name string) (ent.Value, error) {
	return pspn.selectValues.Get(name)
}

// QueryParcelShop queries the "parcel_shop" edge of the ParcelShopPostNord entity.
func (pspn *ParcelShopPostNord) QueryParcelShop() *ParcelShopQuery {
	return NewParcelShopPostNordClient(pspn.config).QueryParcelShop(pspn)
}

// QueryAddressDelivery queries the "address_delivery" edge of the ParcelShopPostNord entity.
func (pspn *ParcelShopPostNord) QueryAddressDelivery() *AddressGlobalQuery {
	return NewParcelShopPostNordClient(pspn.config).QueryAddressDelivery(pspn)
}

// Update returns a builder for updating this ParcelShopPostNord.
// Note that you need to call ParcelShopPostNord.Unwrap() before calling this method if this ParcelShopPostNord
// was returned from a transaction, and the transaction was committed or rolled back.
func (pspn *ParcelShopPostNord) Update() *ParcelShopPostNordUpdateOne {
	return NewParcelShopPostNordClient(pspn.config).UpdateOne(pspn)
}

// Unwrap unwraps the ParcelShopPostNord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pspn *ParcelShopPostNord) Unwrap() *ParcelShopPostNord {
	_tx, ok := pspn.config.driver.(*txDriver)
	if !ok {
		panic("ent: ParcelShopPostNord is not a transactional entity")
	}
	pspn.config.driver = _tx.drv
	return pspn
}

// String implements the fmt.Stringer.
func (pspn *ParcelShopPostNord) String() string {
	var builder strings.Builder
	builder.WriteString("ParcelShopPostNord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pspn.ID))
	builder.WriteString("service_point_id=")
	builder.WriteString(pspn.ServicePointID)
	builder.WriteString(", ")
	builder.WriteString("pudoid=")
	builder.WriteString(pspn.Pudoid)
	builder.WriteString(", ")
	builder.WriteString("type_id=")
	builder.WriteString(pspn.TypeID)
	builder.WriteByte(')')
	return builder.String()
}

// ParcelShopPostNords is a parsable slice of ParcelShopPostNord.
type ParcelShopPostNords []*ParcelShopPostNord
