// Code generated by ent, DO NOT EDIT.

package shipmentparcel

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the shipmentparcel type in the database.
	Label = "shipment_parcel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldItemID holds the string denoting the item_id field in the database.
	FieldItemID = "item_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCcPickupSignatureUrls holds the string denoting the cc_pickup_signature_urls field in the database.
	FieldCcPickupSignatureUrls = "cc_pickup_signature_urls"
	// FieldExpectedAt holds the string denoting the expected_at field in the database.
	FieldExpectedAt = "expected_at"
	// FieldFulfillmentSyncedAt holds the string denoting the fulfillment_synced_at field in the database.
	FieldFulfillmentSyncedAt = "fulfillment_synced_at"
	// FieldCancelSyncedAt holds the string denoting the cancel_synced_at field in the database.
	FieldCancelSyncedAt = "cancel_synced_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeShipment holds the string denoting the shipment edge name in mutations.
	EdgeShipment = "shipment"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// EdgeOldColli holds the string denoting the old_colli edge name in mutations.
	EdgeOldColli = "old_colli"
	// EdgeWorkspaceRecentScan holds the string denoting the workspace_recent_scan edge name in mutations.
	EdgeWorkspaceRecentScan = "workspace_recent_scan"
	// EdgePackaging holds the string denoting the packaging edge name in mutations.
	EdgePackaging = "packaging"
	// EdgePrintJob holds the string denoting the print_job edge name in mutations.
	EdgePrintJob = "print_job"
	// EdgeDocumentFile holds the string denoting the document_file edge name in mutations.
	EdgeDocumentFile = "document_file"
	// Table holds the table name of the shipmentparcel in the database.
	Table = "shipment_parcels"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "shipment_parcels"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ShipmentTable is the table that holds the shipment relation/edge.
	ShipmentTable = "shipment_parcels"
	// ShipmentInverseTable is the table name for the Shipment entity.
	// It exists in this package in order to avoid circular dependency with the "shipment" package.
	ShipmentInverseTable = "shipments"
	// ShipmentColumn is the table column denoting the shipment relation/edge.
	ShipmentColumn = "shipment_shipment_parcel"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "shipment_parcels"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "colli_shipment_parcel"
	// OldColliTable is the table that holds the old_colli relation/edge. The primary key declared below.
	OldColliTable = "colli_cancelled_shipment_parcel"
	// OldColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	OldColliInverseTable = "collis"
	// WorkspaceRecentScanTable is the table that holds the workspace_recent_scan relation/edge.
	WorkspaceRecentScanTable = "workspace_recent_scans"
	// WorkspaceRecentScanInverseTable is the table name for the WorkspaceRecentScan entity.
	// It exists in this package in order to avoid circular dependency with the "workspacerecentscan" package.
	WorkspaceRecentScanInverseTable = "workspace_recent_scans"
	// WorkspaceRecentScanColumn is the table column denoting the workspace_recent_scan relation/edge.
	WorkspaceRecentScanColumn = "workspace_recent_scan_shipment_parcel"
	// PackagingTable is the table that holds the packaging relation/edge.
	PackagingTable = "shipment_parcels"
	// PackagingInverseTable is the table name for the Packaging entity.
	// It exists in this package in order to avoid circular dependency with the "packaging" package.
	PackagingInverseTable = "packagings"
	// PackagingColumn is the table column denoting the packaging relation/edge.
	PackagingColumn = "shipment_parcel_packaging"
	// PrintJobTable is the table that holds the print_job relation/edge.
	PrintJobTable = "print_jobs"
	// PrintJobInverseTable is the table name for the PrintJob entity.
	// It exists in this package in order to avoid circular dependency with the "printjob" package.
	PrintJobInverseTable = "print_jobs"
	// PrintJobColumn is the table column denoting the print_job relation/edge.
	PrintJobColumn = "print_job_shipment_parcel"
	// DocumentFileTable is the table that holds the document_file relation/edge.
	DocumentFileTable = "document_files"
	// DocumentFileInverseTable is the table name for the DocumentFile entity.
	// It exists in this package in order to avoid circular dependency with the "documentfile" package.
	DocumentFileInverseTable = "document_files"
	// DocumentFileColumn is the table column denoting the document_file relation/edge.
	DocumentFileColumn = "shipment_parcel_document_file"
)

// Columns holds all SQL columns for shipmentparcel fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldItemID,
	FieldStatus,
	FieldCcPickupSignatureUrls,
	FieldExpectedAt,
	FieldFulfillmentSyncedAt,
	FieldCancelSyncedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "shipment_parcels"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"colli_shipment_parcel",
	"shipment_shipment_parcel",
	"shipment_parcel_packaging",
}

var (
	// OldColliPrimaryKey and OldColliColumn2 are the table columns denoting the
	// primary key for the old_colli relation (M2M).
	OldColliPrimaryKey = []string{"colli_id", "shipment_parcel_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [4]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending          Status = "pending"
	StatusPrinted          Status = "printed"
	StatusInTransit        Status = "in_transit"
	StatusOutForDelivery   Status = "out_for_delivery"
	StatusDelivered        Status = "delivered"
	StatusAwaitingCcPickup Status = "awaiting_cc_pickup"
	StatusPickedUp         Status = "picked_up"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusPrinted, StatusInTransit, StatusOutForDelivery, StatusDelivered, StatusAwaitingCcPickup, StatusPickedUp:
		return nil
	default:
		return fmt.Errorf("shipmentparcel: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ShipmentParcel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByItemID orders the results by the item_id field.
func ByItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByExpectedAt orders the results by the expected_at field.
func ByExpectedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectedAt, opts...).ToFunc()
}

// ByFulfillmentSyncedAt orders the results by the fulfillment_synced_at field.
func ByFulfillmentSyncedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFulfillmentSyncedAt, opts...).ToFunc()
}

// ByCancelSyncedAt orders the results by the cancel_synced_at field.
func ByCancelSyncedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelSyncedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentField orders the results by shipment field.
func ByShipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByColliField orders the results by colli field.
func ByColliField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), sql.OrderByField(field, opts...))
	}
}

// ByOldColliCount orders the results by old_colli count.
func ByOldColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOldColliStep(), opts...)
	}
}

// ByOldColli orders the results by old_colli terms.
func ByOldColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOldColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkspaceRecentScanCount orders the results by workspace_recent_scan count.
func ByWorkspaceRecentScanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkspaceRecentScanStep(), opts...)
	}
}

// ByWorkspaceRecentScan orders the results by workspace_recent_scan terms.
func ByWorkspaceRecentScan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkspaceRecentScanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPackagingField orders the results by packaging field.
func ByPackagingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrintJobCount orders the results by print_job count.
func ByPrintJobCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrintJobStep(), opts...)
	}
}

// ByPrintJob orders the results by print_job terms.
func ByPrintJob(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrintJobStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentFileField orders the results by document_file field.
func ByDocumentFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentFileStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newShipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTable, ShipmentColumn),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ColliTable, ColliColumn),
	)
}
func newOldColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OldColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OldColliTable, OldColliPrimaryKey...),
	)
}
func newWorkspaceRecentScanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkspaceRecentScanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, WorkspaceRecentScanTable, WorkspaceRecentScanColumn),
	)
}
func newPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackagingTable, PackagingColumn),
	)
}
func newPrintJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrintJobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PrintJobTable, PrintJobColumn),
	)
}
func newDocumentFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentFileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DocumentFileTable, DocumentFileColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
