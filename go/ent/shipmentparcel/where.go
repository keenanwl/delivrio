// Code generated by ent, DO NOT EDIT.

package shipmentparcel

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldTenantID, v))
}

// ItemID applies equality check predicate on the "item_id" field. It's identical to ItemIDEQ.
func ItemID(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldItemID, v))
}

// ExpectedAt applies equality check predicate on the "expected_at" field. It's identical to ExpectedAtEQ.
func ExpectedAt(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldExpectedAt, v))
}

// FulfillmentSyncedAt applies equality check predicate on the "fulfillment_synced_at" field. It's identical to FulfillmentSyncedAtEQ.
func FulfillmentSyncedAt(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldFulfillmentSyncedAt, v))
}

// CancelSyncedAt applies equality check predicate on the "cancel_synced_at" field. It's identical to CancelSyncedAtEQ.
func CancelSyncedAt(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldCancelSyncedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.ShipmentParcel {
	vc := string(v)
	return predicate.ShipmentParcel(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.ShipmentParcel {
	vc := string(v)
	return predicate.ShipmentParcel(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.ShipmentParcel {
	vc := string(v)
	return predicate.ShipmentParcel(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.ShipmentParcel {
	vc := string(v)
	return predicate.ShipmentParcel(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.ShipmentParcel {
	vc := string(v)
	return predicate.ShipmentParcel(sql.FieldContainsFold(FieldTenantID, vc))
}

// ItemIDEQ applies the EQ predicate on the "item_id" field.
func ItemIDEQ(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldItemID, v))
}

// ItemIDNEQ applies the NEQ predicate on the "item_id" field.
func ItemIDNEQ(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNEQ(FieldItemID, v))
}

// ItemIDIn applies the In predicate on the "item_id" field.
func ItemIDIn(vs ...string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIn(FieldItemID, vs...))
}

// ItemIDNotIn applies the NotIn predicate on the "item_id" field.
func ItemIDNotIn(vs ...string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotIn(FieldItemID, vs...))
}

// ItemIDGT applies the GT predicate on the "item_id" field.
func ItemIDGT(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGT(FieldItemID, v))
}

// ItemIDGTE applies the GTE predicate on the "item_id" field.
func ItemIDGTE(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGTE(FieldItemID, v))
}

// ItemIDLT applies the LT predicate on the "item_id" field.
func ItemIDLT(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLT(FieldItemID, v))
}

// ItemIDLTE applies the LTE predicate on the "item_id" field.
func ItemIDLTE(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLTE(FieldItemID, v))
}

// ItemIDContains applies the Contains predicate on the "item_id" field.
func ItemIDContains(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldContains(FieldItemID, v))
}

// ItemIDHasPrefix applies the HasPrefix predicate on the "item_id" field.
func ItemIDHasPrefix(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldHasPrefix(FieldItemID, v))
}

// ItemIDHasSuffix applies the HasSuffix predicate on the "item_id" field.
func ItemIDHasSuffix(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldHasSuffix(FieldItemID, v))
}

// ItemIDIsNil applies the IsNil predicate on the "item_id" field.
func ItemIDIsNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIsNull(FieldItemID))
}

// ItemIDNotNil applies the NotNil predicate on the "item_id" field.
func ItemIDNotNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotNull(FieldItemID))
}

// ItemIDEqualFold applies the EqualFold predicate on the "item_id" field.
func ItemIDEqualFold(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEqualFold(FieldItemID, v))
}

// ItemIDContainsFold applies the ContainsFold predicate on the "item_id" field.
func ItemIDContainsFold(v string) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldContainsFold(FieldItemID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotIn(FieldStatus, vs...))
}

// CcPickupSignatureUrlsIsNil applies the IsNil predicate on the "cc_pickup_signature_urls" field.
func CcPickupSignatureUrlsIsNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIsNull(FieldCcPickupSignatureUrls))
}

// CcPickupSignatureUrlsNotNil applies the NotNil predicate on the "cc_pickup_signature_urls" field.
func CcPickupSignatureUrlsNotNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotNull(FieldCcPickupSignatureUrls))
}

// ExpectedAtEQ applies the EQ predicate on the "expected_at" field.
func ExpectedAtEQ(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldExpectedAt, v))
}

// ExpectedAtNEQ applies the NEQ predicate on the "expected_at" field.
func ExpectedAtNEQ(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNEQ(FieldExpectedAt, v))
}

// ExpectedAtIn applies the In predicate on the "expected_at" field.
func ExpectedAtIn(vs ...time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIn(FieldExpectedAt, vs...))
}

// ExpectedAtNotIn applies the NotIn predicate on the "expected_at" field.
func ExpectedAtNotIn(vs ...time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotIn(FieldExpectedAt, vs...))
}

// ExpectedAtGT applies the GT predicate on the "expected_at" field.
func ExpectedAtGT(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGT(FieldExpectedAt, v))
}

// ExpectedAtGTE applies the GTE predicate on the "expected_at" field.
func ExpectedAtGTE(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGTE(FieldExpectedAt, v))
}

// ExpectedAtLT applies the LT predicate on the "expected_at" field.
func ExpectedAtLT(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLT(FieldExpectedAt, v))
}

// ExpectedAtLTE applies the LTE predicate on the "expected_at" field.
func ExpectedAtLTE(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLTE(FieldExpectedAt, v))
}

// ExpectedAtIsNil applies the IsNil predicate on the "expected_at" field.
func ExpectedAtIsNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIsNull(FieldExpectedAt))
}

// ExpectedAtNotNil applies the NotNil predicate on the "expected_at" field.
func ExpectedAtNotNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotNull(FieldExpectedAt))
}

// FulfillmentSyncedAtEQ applies the EQ predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtEQ(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldFulfillmentSyncedAt, v))
}

// FulfillmentSyncedAtNEQ applies the NEQ predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtNEQ(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNEQ(FieldFulfillmentSyncedAt, v))
}

// FulfillmentSyncedAtIn applies the In predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtIn(vs ...time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIn(FieldFulfillmentSyncedAt, vs...))
}

// FulfillmentSyncedAtNotIn applies the NotIn predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtNotIn(vs ...time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotIn(FieldFulfillmentSyncedAt, vs...))
}

// FulfillmentSyncedAtGT applies the GT predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtGT(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGT(FieldFulfillmentSyncedAt, v))
}

// FulfillmentSyncedAtGTE applies the GTE predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtGTE(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGTE(FieldFulfillmentSyncedAt, v))
}

// FulfillmentSyncedAtLT applies the LT predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtLT(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLT(FieldFulfillmentSyncedAt, v))
}

// FulfillmentSyncedAtLTE applies the LTE predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtLTE(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLTE(FieldFulfillmentSyncedAt, v))
}

// FulfillmentSyncedAtIsNil applies the IsNil predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtIsNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIsNull(FieldFulfillmentSyncedAt))
}

// FulfillmentSyncedAtNotNil applies the NotNil predicate on the "fulfillment_synced_at" field.
func FulfillmentSyncedAtNotNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotNull(FieldFulfillmentSyncedAt))
}

// CancelSyncedAtEQ applies the EQ predicate on the "cancel_synced_at" field.
func CancelSyncedAtEQ(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldEQ(FieldCancelSyncedAt, v))
}

// CancelSyncedAtNEQ applies the NEQ predicate on the "cancel_synced_at" field.
func CancelSyncedAtNEQ(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNEQ(FieldCancelSyncedAt, v))
}

// CancelSyncedAtIn applies the In predicate on the "cancel_synced_at" field.
func CancelSyncedAtIn(vs ...time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIn(FieldCancelSyncedAt, vs...))
}

// CancelSyncedAtNotIn applies the NotIn predicate on the "cancel_synced_at" field.
func CancelSyncedAtNotIn(vs ...time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotIn(FieldCancelSyncedAt, vs...))
}

// CancelSyncedAtGT applies the GT predicate on the "cancel_synced_at" field.
func CancelSyncedAtGT(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGT(FieldCancelSyncedAt, v))
}

// CancelSyncedAtGTE applies the GTE predicate on the "cancel_synced_at" field.
func CancelSyncedAtGTE(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldGTE(FieldCancelSyncedAt, v))
}

// CancelSyncedAtLT applies the LT predicate on the "cancel_synced_at" field.
func CancelSyncedAtLT(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLT(FieldCancelSyncedAt, v))
}

// CancelSyncedAtLTE applies the LTE predicate on the "cancel_synced_at" field.
func CancelSyncedAtLTE(v time.Time) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldLTE(FieldCancelSyncedAt, v))
}

// CancelSyncedAtIsNil applies the IsNil predicate on the "cancel_synced_at" field.
func CancelSyncedAtIsNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldIsNull(FieldCancelSyncedAt))
}

// CancelSyncedAtNotNil applies the NotNil predicate on the "cancel_synced_at" field.
func CancelSyncedAtNotNil() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.FieldNotNull(FieldCancelSyncedAt))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipment applies the HasEdge predicate on the "shipment" edge.
func HasShipment() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTable, ShipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentWith applies the HasEdge predicate on the "shipment" edge with a given conditions (other predicates).
func HasShipmentWith(preds ...predicate.Shipment) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := newShipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasColli applies the HasEdge predicate on the "colli" edge.
func HasColli() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ColliTable, ColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColliWith applies the HasEdge predicate on the "colli" edge with a given conditions (other predicates).
func HasColliWith(preds ...predicate.Colli) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := newColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOldColli applies the HasEdge predicate on the "old_colli" edge.
func HasOldColli() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OldColliTable, OldColliPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOldColliWith applies the HasEdge predicate on the "old_colli" edge with a given conditions (other predicates).
func HasOldColliWith(preds ...predicate.Colli) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := newOldColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkspaceRecentScan applies the HasEdge predicate on the "workspace_recent_scan" edge.
func HasWorkspaceRecentScan() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, WorkspaceRecentScanTable, WorkspaceRecentScanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkspaceRecentScanWith applies the HasEdge predicate on the "workspace_recent_scan" edge with a given conditions (other predicates).
func HasWorkspaceRecentScanWith(preds ...predicate.WorkspaceRecentScan) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := newWorkspaceRecentScanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackaging applies the HasEdge predicate on the "packaging" edge.
func HasPackaging() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackagingTable, PackagingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagingWith applies the HasEdge predicate on the "packaging" edge with a given conditions (other predicates).
func HasPackagingWith(preds ...predicate.Packaging) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := newPackagingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrintJob applies the HasEdge predicate on the "print_job" edge.
func HasPrintJob() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PrintJobTable, PrintJobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrintJobWith applies the HasEdge predicate on the "print_job" edge with a given conditions (other predicates).
func HasPrintJobWith(preds ...predicate.PrintJob) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := newPrintJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocumentFile applies the HasEdge predicate on the "document_file" edge.
func HasDocumentFile() predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DocumentFileTable, DocumentFileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentFileWith applies the HasEdge predicate on the "document_file" edge with a given conditions (other predicates).
func HasDocumentFileWith(preds ...predicate.DocumentFile) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(func(s *sql.Selector) {
		step := newDocumentFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentParcel) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentParcel) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentParcel) predicate.ShipmentParcel {
	return predicate.ShipmentParcel(sql.NotPredicates(p))
}
