// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceDSVUpdate is the builder for updating CarrierServiceDSV entities.
type CarrierServiceDSVUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierServiceDSVMutation
}

// Where appends a list predicates to the CarrierServiceDSVUpdate builder.
func (csdu *CarrierServiceDSVUpdate) Where(ps ...predicate.CarrierServiceDSV) *CarrierServiceDSVUpdate {
	csdu.mutation.Where(ps...)
	return csdu
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csdu *CarrierServiceDSVUpdate) SetCarrierServiceID(id pulid.ID) *CarrierServiceDSVUpdate {
	csdu.mutation.SetCarrierServiceID(id)
	return csdu
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csdu *CarrierServiceDSVUpdate) SetCarrierService(c *CarrierService) *CarrierServiceDSVUpdate {
	return csdu.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceDSVIDs adds the "carrier_additional_service_dsv" edge to the CarrierAdditionalServiceDSV entity by IDs.
func (csdu *CarrierServiceDSVUpdate) AddCarrierAdditionalServiceDSVIDs(ids ...pulid.ID) *CarrierServiceDSVUpdate {
	csdu.mutation.AddCarrierAdditionalServiceDSVIDs(ids...)
	return csdu
}

// AddCarrierAdditionalServiceDSV adds the "carrier_additional_service_dsv" edges to the CarrierAdditionalServiceDSV entity.
func (csdu *CarrierServiceDSVUpdate) AddCarrierAdditionalServiceDSV(c ...*CarrierAdditionalServiceDSV) *CarrierServiceDSVUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csdu.AddCarrierAdditionalServiceDSVIDs(ids...)
}

// Mutation returns the CarrierServiceDSVMutation object of the builder.
func (csdu *CarrierServiceDSVUpdate) Mutation() *CarrierServiceDSVMutation {
	return csdu.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csdu *CarrierServiceDSVUpdate) ClearCarrierService() *CarrierServiceDSVUpdate {
	csdu.mutation.ClearCarrierService()
	return csdu
}

// ClearCarrierAdditionalServiceDSV clears all "carrier_additional_service_dsv" edges to the CarrierAdditionalServiceDSV entity.
func (csdu *CarrierServiceDSVUpdate) ClearCarrierAdditionalServiceDSV() *CarrierServiceDSVUpdate {
	csdu.mutation.ClearCarrierAdditionalServiceDSV()
	return csdu
}

// RemoveCarrierAdditionalServiceDSVIDs removes the "carrier_additional_service_dsv" edge to CarrierAdditionalServiceDSV entities by IDs.
func (csdu *CarrierServiceDSVUpdate) RemoveCarrierAdditionalServiceDSVIDs(ids ...pulid.ID) *CarrierServiceDSVUpdate {
	csdu.mutation.RemoveCarrierAdditionalServiceDSVIDs(ids...)
	return csdu
}

// RemoveCarrierAdditionalServiceDSV removes "carrier_additional_service_dsv" edges to CarrierAdditionalServiceDSV entities.
func (csdu *CarrierServiceDSVUpdate) RemoveCarrierAdditionalServiceDSV(c ...*CarrierAdditionalServiceDSV) *CarrierServiceDSVUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csdu.RemoveCarrierAdditionalServiceDSVIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csdu *CarrierServiceDSVUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csdu.sqlSave, csdu.mutation, csdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csdu *CarrierServiceDSVUpdate) SaveX(ctx context.Context) int {
	affected, err := csdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csdu *CarrierServiceDSVUpdate) Exec(ctx context.Context) error {
	_, err := csdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csdu *CarrierServiceDSVUpdate) ExecX(ctx context.Context) {
	if err := csdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csdu *CarrierServiceDSVUpdate) check() error {
	if csdu.mutation.CarrierServiceCleared() && len(csdu.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceDSV.carrier_service"`)
	}
	return nil
}

func (csdu *CarrierServiceDSVUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservicedsv.Table, carrierservicedsv.Columns, sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString))
	if ps := csdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csdu.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicedsv.CarrierServiceTable,
			Columns: []string{carrierservicedsv.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csdu.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicedsv.CarrierServiceTable,
			Columns: []string{carrierservicedsv.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csdu.mutation.CarrierAdditionalServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedsv.CarrierAdditionalServiceDSVTable,
			Columns: carrierservicedsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csdu.mutation.RemovedCarrierAdditionalServiceDSVIDs(); len(nodes) > 0 && !csdu.mutation.CarrierAdditionalServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedsv.CarrierAdditionalServiceDSVTable,
			Columns: carrierservicedsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csdu.mutation.CarrierAdditionalServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedsv.CarrierAdditionalServiceDSVTable,
			Columns: carrierservicedsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservicedsv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csdu.mutation.done = true
	return n, nil
}

// CarrierServiceDSVUpdateOne is the builder for updating a single CarrierServiceDSV entity.
type CarrierServiceDSVUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierServiceDSVMutation
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csduo *CarrierServiceDSVUpdateOne) SetCarrierServiceID(id pulid.ID) *CarrierServiceDSVUpdateOne {
	csduo.mutation.SetCarrierServiceID(id)
	return csduo
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csduo *CarrierServiceDSVUpdateOne) SetCarrierService(c *CarrierService) *CarrierServiceDSVUpdateOne {
	return csduo.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceDSVIDs adds the "carrier_additional_service_dsv" edge to the CarrierAdditionalServiceDSV entity by IDs.
func (csduo *CarrierServiceDSVUpdateOne) AddCarrierAdditionalServiceDSVIDs(ids ...pulid.ID) *CarrierServiceDSVUpdateOne {
	csduo.mutation.AddCarrierAdditionalServiceDSVIDs(ids...)
	return csduo
}

// AddCarrierAdditionalServiceDSV adds the "carrier_additional_service_dsv" edges to the CarrierAdditionalServiceDSV entity.
func (csduo *CarrierServiceDSVUpdateOne) AddCarrierAdditionalServiceDSV(c ...*CarrierAdditionalServiceDSV) *CarrierServiceDSVUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csduo.AddCarrierAdditionalServiceDSVIDs(ids...)
}

// Mutation returns the CarrierServiceDSVMutation object of the builder.
func (csduo *CarrierServiceDSVUpdateOne) Mutation() *CarrierServiceDSVMutation {
	return csduo.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csduo *CarrierServiceDSVUpdateOne) ClearCarrierService() *CarrierServiceDSVUpdateOne {
	csduo.mutation.ClearCarrierService()
	return csduo
}

// ClearCarrierAdditionalServiceDSV clears all "carrier_additional_service_dsv" edges to the CarrierAdditionalServiceDSV entity.
func (csduo *CarrierServiceDSVUpdateOne) ClearCarrierAdditionalServiceDSV() *CarrierServiceDSVUpdateOne {
	csduo.mutation.ClearCarrierAdditionalServiceDSV()
	return csduo
}

// RemoveCarrierAdditionalServiceDSVIDs removes the "carrier_additional_service_dsv" edge to CarrierAdditionalServiceDSV entities by IDs.
func (csduo *CarrierServiceDSVUpdateOne) RemoveCarrierAdditionalServiceDSVIDs(ids ...pulid.ID) *CarrierServiceDSVUpdateOne {
	csduo.mutation.RemoveCarrierAdditionalServiceDSVIDs(ids...)
	return csduo
}

// RemoveCarrierAdditionalServiceDSV removes "carrier_additional_service_dsv" edges to CarrierAdditionalServiceDSV entities.
func (csduo *CarrierServiceDSVUpdateOne) RemoveCarrierAdditionalServiceDSV(c ...*CarrierAdditionalServiceDSV) *CarrierServiceDSVUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csduo.RemoveCarrierAdditionalServiceDSVIDs(ids...)
}

// Where appends a list predicates to the CarrierServiceDSVUpdate builder.
func (csduo *CarrierServiceDSVUpdateOne) Where(ps ...predicate.CarrierServiceDSV) *CarrierServiceDSVUpdateOne {
	csduo.mutation.Where(ps...)
	return csduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csduo *CarrierServiceDSVUpdateOne) Select(field string, fields ...string) *CarrierServiceDSVUpdateOne {
	csduo.fields = append([]string{field}, fields...)
	return csduo
}

// Save executes the query and returns the updated CarrierServiceDSV entity.
func (csduo *CarrierServiceDSVUpdateOne) Save(ctx context.Context) (*CarrierServiceDSV, error) {
	return withHooks(ctx, csduo.sqlSave, csduo.mutation, csduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csduo *CarrierServiceDSVUpdateOne) SaveX(ctx context.Context) *CarrierServiceDSV {
	node, err := csduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csduo *CarrierServiceDSVUpdateOne) Exec(ctx context.Context) error {
	_, err := csduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csduo *CarrierServiceDSVUpdateOne) ExecX(ctx context.Context) {
	if err := csduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csduo *CarrierServiceDSVUpdateOne) check() error {
	if csduo.mutation.CarrierServiceCleared() && len(csduo.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceDSV.carrier_service"`)
	}
	return nil
}

func (csduo *CarrierServiceDSVUpdateOne) sqlSave(ctx context.Context) (_node *CarrierServiceDSV, err error) {
	if err := csduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservicedsv.Table, carrierservicedsv.Columns, sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString))
	id, ok := csduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierServiceDSV.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicedsv.FieldID)
		for _, f := range fields {
			if !carrierservicedsv.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierservicedsv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csduo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicedsv.CarrierServiceTable,
			Columns: []string{carrierservicedsv.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csduo.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicedsv.CarrierServiceTable,
			Columns: []string{carrierservicedsv.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csduo.mutation.CarrierAdditionalServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedsv.CarrierAdditionalServiceDSVTable,
			Columns: carrierservicedsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csduo.mutation.RemovedCarrierAdditionalServiceDSVIDs(); len(nodes) > 0 && !csduo.mutation.CarrierAdditionalServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedsv.CarrierAdditionalServiceDSVTable,
			Columns: carrierservicedsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csduo.mutation.CarrierAdditionalServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedsv.CarrierAdditionalServiceDSVTable,
			Columns: carrierservicedsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierServiceDSV{config: csduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservicedsv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csduo.mutation.done = true
	return _node, nil
}
