// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceDFQuery is the builder for querying CarrierServiceDF entities.
type CarrierServiceDFQuery struct {
	config
	ctx                                 *QueryContext
	order                               []carrierservicedf.OrderOption
	inters                              []Interceptor
	predicates                          []predicate.CarrierServiceDF
	withCarrierService                  *CarrierServiceQuery
	withCarrierAdditionalServiceDF      *CarrierAdditionalServiceDFQuery
	withFKs                             bool
	modifiers                           []func(*sql.Selector)
	loadTotal                           []func(context.Context, []*CarrierServiceDF) error
	withNamedCarrierAdditionalServiceDF map[string]*CarrierAdditionalServiceDFQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierServiceDFQuery builder.
func (csdq *CarrierServiceDFQuery) Where(ps ...predicate.CarrierServiceDF) *CarrierServiceDFQuery {
	csdq.predicates = append(csdq.predicates, ps...)
	return csdq
}

// Limit the number of records to be returned by this query.
func (csdq *CarrierServiceDFQuery) Limit(limit int) *CarrierServiceDFQuery {
	csdq.ctx.Limit = &limit
	return csdq
}

// Offset to start from.
func (csdq *CarrierServiceDFQuery) Offset(offset int) *CarrierServiceDFQuery {
	csdq.ctx.Offset = &offset
	return csdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (csdq *CarrierServiceDFQuery) Unique(unique bool) *CarrierServiceDFQuery {
	csdq.ctx.Unique = &unique
	return csdq
}

// Order specifies how the records should be ordered.
func (csdq *CarrierServiceDFQuery) Order(o ...carrierservicedf.OrderOption) *CarrierServiceDFQuery {
	csdq.order = append(csdq.order, o...)
	return csdq
}

// QueryCarrierService chains the current query on the "carrier_service" edge.
func (csdq *CarrierServiceDFQuery) QueryCarrierService() *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: csdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicedf.Table, carrierservicedf.FieldID, selector),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicedf.CarrierServiceTable, carrierservicedf.CarrierServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(csdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServiceDF chains the current query on the "carrier_additional_service_df" edge.
func (csdq *CarrierServiceDFQuery) QueryCarrierAdditionalServiceDF() *CarrierAdditionalServiceDFQuery {
	query := (&CarrierAdditionalServiceDFClient{config: csdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicedf.Table, carrierservicedf.FieldID, selector),
			sqlgraph.To(carrieradditionalservicedf.Table, carrieradditionalservicedf.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrierservicedf.CarrierAdditionalServiceDFTable, carrierservicedf.CarrierAdditionalServiceDFPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(csdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierServiceDF entity from the query.
// Returns a *NotFoundError when no CarrierServiceDF was found.
func (csdq *CarrierServiceDFQuery) First(ctx context.Context) (*CarrierServiceDF, error) {
	nodes, err := csdq.Limit(1).All(setContextOp(ctx, csdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrierservicedf.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (csdq *CarrierServiceDFQuery) FirstX(ctx context.Context) *CarrierServiceDF {
	node, err := csdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierServiceDF ID from the query.
// Returns a *NotFoundError when no CarrierServiceDF ID was found.
func (csdq *CarrierServiceDFQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = csdq.Limit(1).IDs(setContextOp(ctx, csdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrierservicedf.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (csdq *CarrierServiceDFQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := csdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierServiceDF entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierServiceDF entity is found.
// Returns a *NotFoundError when no CarrierServiceDF entities are found.
func (csdq *CarrierServiceDFQuery) Only(ctx context.Context) (*CarrierServiceDF, error) {
	nodes, err := csdq.Limit(2).All(setContextOp(ctx, csdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrierservicedf.Label}
	default:
		return nil, &NotSingularError{carrierservicedf.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (csdq *CarrierServiceDFQuery) OnlyX(ctx context.Context) *CarrierServiceDF {
	node, err := csdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierServiceDF ID in the query.
// Returns a *NotSingularError when more than one CarrierServiceDF ID is found.
// Returns a *NotFoundError when no entities are found.
func (csdq *CarrierServiceDFQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = csdq.Limit(2).IDs(setContextOp(ctx, csdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrierservicedf.Label}
	default:
		err = &NotSingularError{carrierservicedf.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (csdq *CarrierServiceDFQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := csdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierServiceDFs.
func (csdq *CarrierServiceDFQuery) All(ctx context.Context) ([]*CarrierServiceDF, error) {
	ctx = setContextOp(ctx, csdq.ctx, ent.OpQueryAll)
	if err := csdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierServiceDF, *CarrierServiceDFQuery]()
	return withInterceptors[[]*CarrierServiceDF](ctx, csdq, qr, csdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (csdq *CarrierServiceDFQuery) AllX(ctx context.Context) []*CarrierServiceDF {
	nodes, err := csdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierServiceDF IDs.
func (csdq *CarrierServiceDFQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if csdq.ctx.Unique == nil && csdq.path != nil {
		csdq.Unique(true)
	}
	ctx = setContextOp(ctx, csdq.ctx, ent.OpQueryIDs)
	if err = csdq.Select(carrierservicedf.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (csdq *CarrierServiceDFQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := csdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (csdq *CarrierServiceDFQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, csdq.ctx, ent.OpQueryCount)
	if err := csdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, csdq, querierCount[*CarrierServiceDFQuery](), csdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (csdq *CarrierServiceDFQuery) CountX(ctx context.Context) int {
	count, err := csdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (csdq *CarrierServiceDFQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, csdq.ctx, ent.OpQueryExist)
	switch _, err := csdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (csdq *CarrierServiceDFQuery) ExistX(ctx context.Context) bool {
	exist, err := csdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierServiceDFQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (csdq *CarrierServiceDFQuery) Clone() *CarrierServiceDFQuery {
	if csdq == nil {
		return nil
	}
	return &CarrierServiceDFQuery{
		config:                         csdq.config,
		ctx:                            csdq.ctx.Clone(),
		order:                          append([]carrierservicedf.OrderOption{}, csdq.order...),
		inters:                         append([]Interceptor{}, csdq.inters...),
		predicates:                     append([]predicate.CarrierServiceDF{}, csdq.predicates...),
		withCarrierService:             csdq.withCarrierService.Clone(),
		withCarrierAdditionalServiceDF: csdq.withCarrierAdditionalServiceDF.Clone(),
		// clone intermediate query.
		sql:  csdq.sql.Clone(),
		path: csdq.path,
	}
}

// WithCarrierService tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service" edge. The optional arguments are used to configure the query builder of the edge.
func (csdq *CarrierServiceDFQuery) WithCarrierService(opts ...func(*CarrierServiceQuery)) *CarrierServiceDFQuery {
	query := (&CarrierServiceClient{config: csdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csdq.withCarrierService = query
	return csdq
}

// WithCarrierAdditionalServiceDF tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_df" edge. The optional arguments are used to configure the query builder of the edge.
func (csdq *CarrierServiceDFQuery) WithCarrierAdditionalServiceDF(opts ...func(*CarrierAdditionalServiceDFQuery)) *CarrierServiceDFQuery {
	query := (&CarrierAdditionalServiceDFClient{config: csdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csdq.withCarrierAdditionalServiceDF = query
	return csdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (csdq *CarrierServiceDFQuery) GroupBy(field string, fields ...string) *CarrierServiceDFGroupBy {
	csdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierServiceDFGroupBy{build: csdq}
	grbuild.flds = &csdq.ctx.Fields
	grbuild.label = carrierservicedf.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (csdq *CarrierServiceDFQuery) Select(fields ...string) *CarrierServiceDFSelect {
	csdq.ctx.Fields = append(csdq.ctx.Fields, fields...)
	sbuild := &CarrierServiceDFSelect{CarrierServiceDFQuery: csdq}
	sbuild.label = carrierservicedf.Label
	sbuild.flds, sbuild.scan = &csdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierServiceDFSelect configured with the given aggregations.
func (csdq *CarrierServiceDFQuery) Aggregate(fns ...AggregateFunc) *CarrierServiceDFSelect {
	return csdq.Select().Aggregate(fns...)
}

func (csdq *CarrierServiceDFQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range csdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, csdq); err != nil {
				return err
			}
		}
	}
	for _, f := range csdq.ctx.Fields {
		if !carrierservicedf.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if csdq.path != nil {
		prev, err := csdq.path(ctx)
		if err != nil {
			return err
		}
		csdq.sql = prev
	}
	if carrierservicedf.Policy == nil {
		return errors.New("ent: uninitialized carrierservicedf.Policy (forgotten import ent/runtime?)")
	}
	if err := carrierservicedf.Policy.EvalQuery(ctx, csdq); err != nil {
		return err
	}
	return nil
}

func (csdq *CarrierServiceDFQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierServiceDF, error) {
	var (
		nodes       = []*CarrierServiceDF{}
		withFKs     = csdq.withFKs
		_spec       = csdq.querySpec()
		loadedTypes = [2]bool{
			csdq.withCarrierService != nil,
			csdq.withCarrierAdditionalServiceDF != nil,
		}
	)
	if csdq.withCarrierService != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicedf.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierServiceDF).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierServiceDF{config: csdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(csdq.modifiers) > 0 {
		_spec.Modifiers = csdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, csdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := csdq.withCarrierService; query != nil {
		if err := csdq.loadCarrierService(ctx, query, nodes, nil,
			func(n *CarrierServiceDF, e *CarrierService) { n.Edges.CarrierService = e }); err != nil {
			return nil, err
		}
	}
	if query := csdq.withCarrierAdditionalServiceDF; query != nil {
		if err := csdq.loadCarrierAdditionalServiceDF(ctx, query, nodes,
			func(n *CarrierServiceDF) { n.Edges.CarrierAdditionalServiceDF = []*CarrierAdditionalServiceDF{} },
			func(n *CarrierServiceDF, e *CarrierAdditionalServiceDF) {
				n.Edges.CarrierAdditionalServiceDF = append(n.Edges.CarrierAdditionalServiceDF, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range csdq.withNamedCarrierAdditionalServiceDF {
		if err := csdq.loadCarrierAdditionalServiceDF(ctx, query, nodes,
			func(n *CarrierServiceDF) { n.appendNamedCarrierAdditionalServiceDF(name) },
			func(n *CarrierServiceDF, e *CarrierAdditionalServiceDF) {
				n.appendNamedCarrierAdditionalServiceDF(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range csdq.loadTotal {
		if err := csdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (csdq *CarrierServiceDFQuery) loadCarrierService(ctx context.Context, query *CarrierServiceQuery, nodes []*CarrierServiceDF, init func(*CarrierServiceDF), assign func(*CarrierServiceDF, *CarrierService)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierServiceDF)
	for i := range nodes {
		if nodes[i].carrier_service_carrier_service_df == nil {
			continue
		}
		fk := *nodes[i].carrier_service_carrier_service_df
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierservice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_service_carrier_service_df" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (csdq *CarrierServiceDFQuery) loadCarrierAdditionalServiceDF(ctx context.Context, query *CarrierAdditionalServiceDFQuery, nodes []*CarrierServiceDF, init func(*CarrierServiceDF), assign func(*CarrierServiceDF, *CarrierAdditionalServiceDF)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierServiceDF)
	nids := make(map[pulid.ID]map[*CarrierServiceDF]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrierservicedf.CarrierAdditionalServiceDFTable)
		s.Join(joinT).On(s.C(carrieradditionalservicedf.FieldID), joinT.C(carrierservicedf.CarrierAdditionalServiceDFPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(carrierservicedf.CarrierAdditionalServiceDFPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrierservicedf.CarrierAdditionalServiceDFPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierServiceDF]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierAdditionalServiceDF](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_additional_service_df" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (csdq *CarrierServiceDFQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := csdq.querySpec()
	if len(csdq.modifiers) > 0 {
		_spec.Modifiers = csdq.modifiers
	}
	_spec.Node.Columns = csdq.ctx.Fields
	if len(csdq.ctx.Fields) > 0 {
		_spec.Unique = csdq.ctx.Unique != nil && *csdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, csdq.driver, _spec)
}

func (csdq *CarrierServiceDFQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrierservicedf.Table, carrierservicedf.Columns, sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString))
	_spec.From = csdq.sql
	if unique := csdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if csdq.path != nil {
		_spec.Unique = true
	}
	if fields := csdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicedf.FieldID)
		for i := range fields {
			if fields[i] != carrierservicedf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := csdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := csdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := csdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := csdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (csdq *CarrierServiceDFQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(csdq.driver.Dialect())
	t1 := builder.Table(carrierservicedf.Table)
	columns := csdq.ctx.Fields
	if len(columns) == 0 {
		columns = carrierservicedf.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if csdq.sql != nil {
		selector = csdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if csdq.ctx.Unique != nil && *csdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range csdq.predicates {
		p(selector)
	}
	for _, p := range csdq.order {
		p(selector)
	}
	if offset := csdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := csdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierAdditionalServiceDF tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_df"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (csdq *CarrierServiceDFQuery) WithNamedCarrierAdditionalServiceDF(name string, opts ...func(*CarrierAdditionalServiceDFQuery)) *CarrierServiceDFQuery {
	query := (&CarrierAdditionalServiceDFClient{config: csdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if csdq.withNamedCarrierAdditionalServiceDF == nil {
		csdq.withNamedCarrierAdditionalServiceDF = make(map[string]*CarrierAdditionalServiceDFQuery)
	}
	csdq.withNamedCarrierAdditionalServiceDF[name] = query
	return csdq
}

// CarrierServiceDFGroupBy is the group-by builder for CarrierServiceDF entities.
type CarrierServiceDFGroupBy struct {
	selector
	build *CarrierServiceDFQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (csdgb *CarrierServiceDFGroupBy) Aggregate(fns ...AggregateFunc) *CarrierServiceDFGroupBy {
	csdgb.fns = append(csdgb.fns, fns...)
	return csdgb
}

// Scan applies the selector query and scans the result into the given value.
func (csdgb *CarrierServiceDFGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csdgb.build.ctx, ent.OpQueryGroupBy)
	if err := csdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServiceDFQuery, *CarrierServiceDFGroupBy](ctx, csdgb.build, csdgb, csdgb.build.inters, v)
}

func (csdgb *CarrierServiceDFGroupBy) sqlScan(ctx context.Context, root *CarrierServiceDFQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(csdgb.fns))
	for _, fn := range csdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*csdgb.flds)+len(csdgb.fns))
		for _, f := range *csdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*csdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierServiceDFSelect is the builder for selecting fields of CarrierServiceDF entities.
type CarrierServiceDFSelect struct {
	*CarrierServiceDFQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (csds *CarrierServiceDFSelect) Aggregate(fns ...AggregateFunc) *CarrierServiceDFSelect {
	csds.fns = append(csds.fns, fns...)
	return csds
}

// Scan applies the selector query and scans the result into the given value.
func (csds *CarrierServiceDFSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csds.ctx, ent.OpQuerySelect)
	if err := csds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServiceDFQuery, *CarrierServiceDFSelect](ctx, csds.CarrierServiceDFQuery, csds, csds.inters, v)
}

func (csds *CarrierServiceDFSelect) sqlScan(ctx context.Context, root *CarrierServiceDFQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(csds.fns))
	for _, fn := range csds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*csds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
