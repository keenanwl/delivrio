// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSUpdate is the builder for updating PackagingUSPS entities.
type PackagingUSPSUpdate struct {
	config
	hooks    []Hook
	mutation *PackagingUSPSMutation
}

// Where appends a list predicates to the PackagingUSPSUpdate builder.
func (puu *PackagingUSPSUpdate) Where(ps ...predicate.PackagingUSPS) *PackagingUSPSUpdate {
	puu.mutation.Where(ps...)
	return puu
}

// SetTenantID sets the "tenant_id" field.
func (puu *PackagingUSPSUpdate) SetTenantID(pu pulid.ID) *PackagingUSPSUpdate {
	puu.mutation.SetTenantID(pu)
	return puu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puu *PackagingUSPSUpdate) SetNillableTenantID(pu *pulid.ID) *PackagingUSPSUpdate {
	if pu != nil {
		puu.SetTenantID(*pu)
	}
	return puu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (puu *PackagingUSPSUpdate) SetTenant(t *Tenant) *PackagingUSPSUpdate {
	return puu.SetTenantID(t.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (puu *PackagingUSPSUpdate) SetPackagingID(id pulid.ID) *PackagingUSPSUpdate {
	puu.mutation.SetPackagingID(id)
	return puu
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (puu *PackagingUSPSUpdate) SetPackaging(p *Packaging) *PackagingUSPSUpdate {
	return puu.SetPackagingID(p.ID)
}

// SetPackagingUSPSRateIndicatorID sets the "packaging_usps_rate_indicator" edge to the PackagingUSPSRateIndicator entity by ID.
func (puu *PackagingUSPSUpdate) SetPackagingUSPSRateIndicatorID(id pulid.ID) *PackagingUSPSUpdate {
	puu.mutation.SetPackagingUSPSRateIndicatorID(id)
	return puu
}

// SetPackagingUSPSRateIndicator sets the "packaging_usps_rate_indicator" edge to the PackagingUSPSRateIndicator entity.
func (puu *PackagingUSPSUpdate) SetPackagingUSPSRateIndicator(p *PackagingUSPSRateIndicator) *PackagingUSPSUpdate {
	return puu.SetPackagingUSPSRateIndicatorID(p.ID)
}

// SetPackagingUSPSProcessingCategoryID sets the "packaging_usps_processing_category" edge to the PackagingUSPSProcessingCategory entity by ID.
func (puu *PackagingUSPSUpdate) SetPackagingUSPSProcessingCategoryID(id pulid.ID) *PackagingUSPSUpdate {
	puu.mutation.SetPackagingUSPSProcessingCategoryID(id)
	return puu
}

// SetPackagingUSPSProcessingCategory sets the "packaging_usps_processing_category" edge to the PackagingUSPSProcessingCategory entity.
func (puu *PackagingUSPSUpdate) SetPackagingUSPSProcessingCategory(p *PackagingUSPSProcessingCategory) *PackagingUSPSUpdate {
	return puu.SetPackagingUSPSProcessingCategoryID(p.ID)
}

// Mutation returns the PackagingUSPSMutation object of the builder.
func (puu *PackagingUSPSUpdate) Mutation() *PackagingUSPSMutation {
	return puu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (puu *PackagingUSPSUpdate) ClearTenant() *PackagingUSPSUpdate {
	puu.mutation.ClearTenant()
	return puu
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (puu *PackagingUSPSUpdate) ClearPackaging() *PackagingUSPSUpdate {
	puu.mutation.ClearPackaging()
	return puu
}

// ClearPackagingUSPSRateIndicator clears the "packaging_usps_rate_indicator" edge to the PackagingUSPSRateIndicator entity.
func (puu *PackagingUSPSUpdate) ClearPackagingUSPSRateIndicator() *PackagingUSPSUpdate {
	puu.mutation.ClearPackagingUSPSRateIndicator()
	return puu
}

// ClearPackagingUSPSProcessingCategory clears the "packaging_usps_processing_category" edge to the PackagingUSPSProcessingCategory entity.
func (puu *PackagingUSPSUpdate) ClearPackagingUSPSProcessingCategory() *PackagingUSPSUpdate {
	puu.mutation.ClearPackagingUSPSProcessingCategory()
	return puu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (puu *PackagingUSPSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, puu.sqlSave, puu.mutation, puu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puu *PackagingUSPSUpdate) SaveX(ctx context.Context) int {
	affected, err := puu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (puu *PackagingUSPSUpdate) Exec(ctx context.Context) error {
	_, err := puu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puu *PackagingUSPSUpdate) ExecX(ctx context.Context) {
	if err := puu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puu *PackagingUSPSUpdate) check() error {
	if puu.mutation.TenantCleared() && len(puu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingUSPS.tenant"`)
	}
	if puu.mutation.PackagingCleared() && len(puu.mutation.PackagingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingUSPS.packaging"`)
	}
	if puu.mutation.PackagingUSPSRateIndicatorCleared() && len(puu.mutation.PackagingUSPSRateIndicatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingUSPS.packaging_usps_rate_indicator"`)
	}
	if puu.mutation.PackagingUSPSProcessingCategoryCleared() && len(puu.mutation.PackagingUSPSProcessingCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingUSPS.packaging_usps_processing_category"`)
	}
	return nil
}

func (puu *PackagingUSPSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := puu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagingusps.Table, packagingusps.Columns, sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString))
	if ps := puu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.TenantTable,
			Columns: []string{packagingusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.TenantTable,
			Columns: []string{packagingusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puu.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingusps.PackagingTable,
			Columns: []string{packagingusps.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingusps.PackagingTable,
			Columns: []string{packagingusps.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puu.mutation.PackagingUSPSRateIndicatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSRateIndicatorTable,
			Columns: []string{packagingusps.PackagingUSPSRateIndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.PackagingUSPSRateIndicatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSRateIndicatorTable,
			Columns: []string{packagingusps.PackagingUSPSRateIndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puu.mutation.PackagingUSPSProcessingCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSProcessingCategoryTable,
			Columns: []string{packagingusps.PackagingUSPSProcessingCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.PackagingUSPSProcessingCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSProcessingCategoryTable,
			Columns: []string{packagingusps.PackagingUSPSProcessingCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, puu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagingusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	puu.mutation.done = true
	return n, nil
}

// PackagingUSPSUpdateOne is the builder for updating a single PackagingUSPS entity.
type PackagingUSPSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackagingUSPSMutation
}

// SetTenantID sets the "tenant_id" field.
func (puuo *PackagingUSPSUpdateOne) SetTenantID(pu pulid.ID) *PackagingUSPSUpdateOne {
	puuo.mutation.SetTenantID(pu)
	return puuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puuo *PackagingUSPSUpdateOne) SetNillableTenantID(pu *pulid.ID) *PackagingUSPSUpdateOne {
	if pu != nil {
		puuo.SetTenantID(*pu)
	}
	return puuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (puuo *PackagingUSPSUpdateOne) SetTenant(t *Tenant) *PackagingUSPSUpdateOne {
	return puuo.SetTenantID(t.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (puuo *PackagingUSPSUpdateOne) SetPackagingID(id pulid.ID) *PackagingUSPSUpdateOne {
	puuo.mutation.SetPackagingID(id)
	return puuo
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (puuo *PackagingUSPSUpdateOne) SetPackaging(p *Packaging) *PackagingUSPSUpdateOne {
	return puuo.SetPackagingID(p.ID)
}

// SetPackagingUSPSRateIndicatorID sets the "packaging_usps_rate_indicator" edge to the PackagingUSPSRateIndicator entity by ID.
func (puuo *PackagingUSPSUpdateOne) SetPackagingUSPSRateIndicatorID(id pulid.ID) *PackagingUSPSUpdateOne {
	puuo.mutation.SetPackagingUSPSRateIndicatorID(id)
	return puuo
}

// SetPackagingUSPSRateIndicator sets the "packaging_usps_rate_indicator" edge to the PackagingUSPSRateIndicator entity.
func (puuo *PackagingUSPSUpdateOne) SetPackagingUSPSRateIndicator(p *PackagingUSPSRateIndicator) *PackagingUSPSUpdateOne {
	return puuo.SetPackagingUSPSRateIndicatorID(p.ID)
}

// SetPackagingUSPSProcessingCategoryID sets the "packaging_usps_processing_category" edge to the PackagingUSPSProcessingCategory entity by ID.
func (puuo *PackagingUSPSUpdateOne) SetPackagingUSPSProcessingCategoryID(id pulid.ID) *PackagingUSPSUpdateOne {
	puuo.mutation.SetPackagingUSPSProcessingCategoryID(id)
	return puuo
}

// SetPackagingUSPSProcessingCategory sets the "packaging_usps_processing_category" edge to the PackagingUSPSProcessingCategory entity.
func (puuo *PackagingUSPSUpdateOne) SetPackagingUSPSProcessingCategory(p *PackagingUSPSProcessingCategory) *PackagingUSPSUpdateOne {
	return puuo.SetPackagingUSPSProcessingCategoryID(p.ID)
}

// Mutation returns the PackagingUSPSMutation object of the builder.
func (puuo *PackagingUSPSUpdateOne) Mutation() *PackagingUSPSMutation {
	return puuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (puuo *PackagingUSPSUpdateOne) ClearTenant() *PackagingUSPSUpdateOne {
	puuo.mutation.ClearTenant()
	return puuo
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (puuo *PackagingUSPSUpdateOne) ClearPackaging() *PackagingUSPSUpdateOne {
	puuo.mutation.ClearPackaging()
	return puuo
}

// ClearPackagingUSPSRateIndicator clears the "packaging_usps_rate_indicator" edge to the PackagingUSPSRateIndicator entity.
func (puuo *PackagingUSPSUpdateOne) ClearPackagingUSPSRateIndicator() *PackagingUSPSUpdateOne {
	puuo.mutation.ClearPackagingUSPSRateIndicator()
	return puuo
}

// ClearPackagingUSPSProcessingCategory clears the "packaging_usps_processing_category" edge to the PackagingUSPSProcessingCategory entity.
func (puuo *PackagingUSPSUpdateOne) ClearPackagingUSPSProcessingCategory() *PackagingUSPSUpdateOne {
	puuo.mutation.ClearPackagingUSPSProcessingCategory()
	return puuo
}

// Where appends a list predicates to the PackagingUSPSUpdate builder.
func (puuo *PackagingUSPSUpdateOne) Where(ps ...predicate.PackagingUSPS) *PackagingUSPSUpdateOne {
	puuo.mutation.Where(ps...)
	return puuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puuo *PackagingUSPSUpdateOne) Select(field string, fields ...string) *PackagingUSPSUpdateOne {
	puuo.fields = append([]string{field}, fields...)
	return puuo
}

// Save executes the query and returns the updated PackagingUSPS entity.
func (puuo *PackagingUSPSUpdateOne) Save(ctx context.Context) (*PackagingUSPS, error) {
	return withHooks(ctx, puuo.sqlSave, puuo.mutation, puuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puuo *PackagingUSPSUpdateOne) SaveX(ctx context.Context) *PackagingUSPS {
	node, err := puuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puuo *PackagingUSPSUpdateOne) Exec(ctx context.Context) error {
	_, err := puuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puuo *PackagingUSPSUpdateOne) ExecX(ctx context.Context) {
	if err := puuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puuo *PackagingUSPSUpdateOne) check() error {
	if puuo.mutation.TenantCleared() && len(puuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingUSPS.tenant"`)
	}
	if puuo.mutation.PackagingCleared() && len(puuo.mutation.PackagingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingUSPS.packaging"`)
	}
	if puuo.mutation.PackagingUSPSRateIndicatorCleared() && len(puuo.mutation.PackagingUSPSRateIndicatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingUSPS.packaging_usps_rate_indicator"`)
	}
	if puuo.mutation.PackagingUSPSProcessingCategoryCleared() && len(puuo.mutation.PackagingUSPSProcessingCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingUSPS.packaging_usps_processing_category"`)
	}
	return nil
}

func (puuo *PackagingUSPSUpdateOne) sqlSave(ctx context.Context) (_node *PackagingUSPS, err error) {
	if err := puuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagingusps.Table, packagingusps.Columns, sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString))
	id, ok := puuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackagingUSPS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packagingusps.FieldID)
		for _, f := range fields {
			if !packagingusps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packagingusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.TenantTable,
			Columns: []string{packagingusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.TenantTable,
			Columns: []string{packagingusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puuo.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingusps.PackagingTable,
			Columns: []string{packagingusps.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingusps.PackagingTable,
			Columns: []string{packagingusps.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puuo.mutation.PackagingUSPSRateIndicatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSRateIndicatorTable,
			Columns: []string{packagingusps.PackagingUSPSRateIndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.PackagingUSPSRateIndicatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSRateIndicatorTable,
			Columns: []string{packagingusps.PackagingUSPSRateIndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puuo.mutation.PackagingUSPSProcessingCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSProcessingCategoryTable,
			Columns: []string{packagingusps.PackagingUSPSProcessingCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.PackagingUSPSProcessingCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSProcessingCategoryTable,
			Columns: []string{packagingusps.PackagingUSPSProcessingCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PackagingUSPS{config: puuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagingusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puuo.mutation.done = true
	return _node, nil
}
