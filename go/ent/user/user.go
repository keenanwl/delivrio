// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldIsAccountOwner holds the string denoting the is_account_owner field in the database.
	FieldIsAccountOwner = "is_account_owner"
	// FieldIsGlobalAdmin holds the string denoting the is_global_admin field in the database.
	FieldIsGlobalAdmin = "is_global_admin"
	// FieldMarketingConsent holds the string denoting the marketing_consent field in the database.
	FieldMarketingConsent = "marketing_consent"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldArchivedAt holds the string denoting the archived_at field in the database.
	FieldArchivedAt = "archived_at"
	// FieldPickupDay holds the string denoting the pickup_day field in the database.
	FieldPickupDay = "pickup_day"
	// FieldPickupDayLastChanged holds the string denoting the pickup_day_last_changed field in the database.
	FieldPickupDayLastChanged = "pickup_day_last_changed"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeOtkRequests holds the string denoting the otk_requests edge name in mutations.
	EdgeOtkRequests = "otk_requests"
	// EdgeSignupOptions holds the string denoting the signup_options edge name in mutations.
	EdgeSignupOptions = "signup_options"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// EdgeChangeHistory holds the string denoting the change_history edge name in mutations.
	EdgeChangeHistory = "change_history"
	// EdgePlanHistoryUser holds the string denoting the plan_history_user edge name in mutations.
	EdgePlanHistoryUser = "plan_history_user"
	// EdgeAPIToken holds the string denoting the api_token edge name in mutations.
	EdgeAPIToken = "api_token"
	// EdgeSelectedWorkstation holds the string denoting the selected_workstation edge name in mutations.
	EdgeSelectedWorkstation = "selected_workstation"
	// EdgeSeatGroup holds the string denoting the seat_group edge name in mutations.
	EdgeSeatGroup = "seat_group"
	// EdgeWorkspaceRecentScan holds the string denoting the workspace_recent_scan edge name in mutations.
	EdgeWorkspaceRecentScan = "workspace_recent_scan"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "users"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// OtkRequestsTable is the table that holds the otk_requests relation/edge.
	OtkRequestsTable = "otk_requests"
	// OtkRequestsInverseTable is the table name for the OTKRequests entity.
	// It exists in this package in order to avoid circular dependency with the "otkrequests" package.
	OtkRequestsInverseTable = "otk_requests"
	// OtkRequestsColumn is the table column denoting the otk_requests relation/edge.
	OtkRequestsColumn = "user_otk_requests"
	// SignupOptionsTable is the table that holds the signup_options relation/edge.
	SignupOptionsTable = "signup_options"
	// SignupOptionsInverseTable is the table name for the SignupOptions entity.
	// It exists in this package in order to avoid circular dependency with the "signupoptions" package.
	SignupOptionsInverseTable = "signup_options"
	// SignupOptionsColumn is the table column denoting the signup_options relation/edge.
	SignupOptionsColumn = "user_signup_options"
	// LanguageTable is the table that holds the language relation/edge.
	LanguageTable = "users"
	// LanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguageInverseTable = "languages"
	// LanguageColumn is the table column denoting the language relation/edge.
	LanguageColumn = "user_language"
	// ChangeHistoryTable is the table that holds the change_history relation/edge.
	ChangeHistoryTable = "change_histories"
	// ChangeHistoryInverseTable is the table name for the ChangeHistory entity.
	// It exists in this package in order to avoid circular dependency with the "changehistory" package.
	ChangeHistoryInverseTable = "change_histories"
	// ChangeHistoryColumn is the table column denoting the change_history relation/edge.
	ChangeHistoryColumn = "change_history_user"
	// PlanHistoryUserTable is the table that holds the plan_history_user relation/edge.
	PlanHistoryUserTable = "plan_histories"
	// PlanHistoryUserInverseTable is the table name for the PlanHistory entity.
	// It exists in this package in order to avoid circular dependency with the "planhistory" package.
	PlanHistoryUserInverseTable = "plan_histories"
	// PlanHistoryUserColumn is the table column denoting the plan_history_user relation/edge.
	PlanHistoryUserColumn = "user_plan_history_user"
	// APITokenTable is the table that holds the api_token relation/edge.
	APITokenTable = "api_tokens"
	// APITokenInverseTable is the table name for the APIToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	APITokenInverseTable = "api_tokens"
	// APITokenColumn is the table column denoting the api_token relation/edge.
	APITokenColumn = "user_api_token"
	// SelectedWorkstationTable is the table that holds the selected_workstation relation/edge.
	SelectedWorkstationTable = "workstations"
	// SelectedWorkstationInverseTable is the table name for the Workstation entity.
	// It exists in this package in order to avoid circular dependency with the "workstation" package.
	SelectedWorkstationInverseTable = "workstations"
	// SelectedWorkstationColumn is the table column denoting the selected_workstation relation/edge.
	SelectedWorkstationColumn = "user_selected_workstation"
	// SeatGroupTable is the table that holds the seat_group relation/edge.
	SeatGroupTable = "users"
	// SeatGroupInverseTable is the table name for the SeatGroup entity.
	// It exists in this package in order to avoid circular dependency with the "seatgroup" package.
	SeatGroupInverseTable = "seat_groups"
	// SeatGroupColumn is the table column denoting the seat_group relation/edge.
	SeatGroupColumn = "seat_group_user"
	// WorkspaceRecentScanTable is the table that holds the workspace_recent_scan relation/edge.
	WorkspaceRecentScanTable = "workspace_recent_scans"
	// WorkspaceRecentScanInverseTable is the table name for the WorkspaceRecentScan entity.
	// It exists in this package in order to avoid circular dependency with the "workspacerecentscan" package.
	WorkspaceRecentScanInverseTable = "workspace_recent_scans"
	// WorkspaceRecentScanColumn is the table column denoting the workspace_recent_scan relation/edge.
	WorkspaceRecentScanColumn = "workspace_recent_scan_user"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldSurname,
	FieldPhoneNumber,
	FieldEmail,
	FieldPassword,
	FieldHash,
	FieldIsAccountOwner,
	FieldIsGlobalAdmin,
	FieldMarketingConsent,
	FieldCreatedAt,
	FieldArchivedAt,
	FieldPickupDay,
	FieldPickupDayLastChanged,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"seat_group_user",
	"user_language",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [3]ent.Hook
	Policy ent.Policy
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultIsAccountOwner holds the default value on creation for the "is_account_owner" field.
	DefaultIsAccountOwner bool
	// DefaultIsGlobalAdmin holds the default value on creation for the "is_global_admin" field.
	DefaultIsGlobalAdmin bool
	// DefaultMarketingConsent holds the default value on creation for the "marketing_consent" field.
	DefaultMarketingConsent bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// PickupDay defines the type for the "pickup_day" enum field.
type PickupDay string

// PickupDayToday is the default value of the PickupDay enum.
const DefaultPickupDay = PickupDayToday

// PickupDay values.
const (
	PickupDayToday     PickupDay = "Today"
	PickupDayTomorrow  PickupDay = "Tomorrow"
	PickupDayIn_2_Days PickupDay = "In_2_Days"
	PickupDayIn_3_Days PickupDay = "In_3_Days"
	PickupDayIn_4_Days PickupDay = "In_4_Days"
	PickupDayIn_5_Days PickupDay = "In_5_Days"
)

func (pd PickupDay) String() string {
	return string(pd)
}

// PickupDayValidator is a validator for the "pickup_day" field enum values. It is called by the builders before save.
func PickupDayValidator(pd PickupDay) error {
	switch pd {
	case PickupDayToday, PickupDayTomorrow, PickupDayIn_2_Days, PickupDayIn_3_Days, PickupDayIn_4_Days, PickupDayIn_5_Days:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for pickup_day field: %q", pd)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySurname orders the results by the surname field.
func BySurname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurname, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByIsAccountOwner orders the results by the is_account_owner field.
func ByIsAccountOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAccountOwner, opts...).ToFunc()
}

// ByIsGlobalAdmin orders the results by the is_global_admin field.
func ByIsGlobalAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsGlobalAdmin, opts...).ToFunc()
}

// ByMarketingConsent orders the results by the marketing_consent field.
func ByMarketingConsent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarketingConsent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByArchivedAt orders the results by the archived_at field.
func ByArchivedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchivedAt, opts...).ToFunc()
}

// ByPickupDay orders the results by the pickup_day field.
func ByPickupDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPickupDay, opts...).ToFunc()
}

// ByPickupDayLastChanged orders the results by the pickup_day_last_changed field.
func ByPickupDayLastChanged(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPickupDayLastChanged, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByOtkRequestsCount orders the results by otk_requests count.
func ByOtkRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOtkRequestsStep(), opts...)
	}
}

// ByOtkRequests orders the results by otk_requests terms.
func ByOtkRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOtkRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySignupOptionsField orders the results by signup_options field.
func BySignupOptionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSignupOptionsStep(), sql.OrderByField(field, opts...))
	}
}

// ByLanguageField orders the results by language field.
func ByLanguageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguageStep(), sql.OrderByField(field, opts...))
	}
}

// ByChangeHistoryCount orders the results by change_history count.
func ByChangeHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChangeHistoryStep(), opts...)
	}
}

// ByChangeHistory orders the results by change_history terms.
func ByChangeHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChangeHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlanHistoryUserCount orders the results by plan_history_user count.
func ByPlanHistoryUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlanHistoryUserStep(), opts...)
	}
}

// ByPlanHistoryUser orders the results by plan_history_user terms.
func ByPlanHistoryUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanHistoryUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPITokenCount orders the results by api_token count.
func ByAPITokenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPITokenStep(), opts...)
	}
}

// ByAPIToken orders the results by api_token terms.
func ByAPIToken(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPITokenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySelectedWorkstationField orders the results by selected_workstation field.
func BySelectedWorkstationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectedWorkstationStep(), sql.OrderByField(field, opts...))
	}
}

// BySeatGroupField orders the results by seat_group field.
func BySeatGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeatGroupStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkspaceRecentScanCount orders the results by workspace_recent_scan count.
func ByWorkspaceRecentScanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkspaceRecentScanStep(), opts...)
	}
}

// ByWorkspaceRecentScan orders the results by workspace_recent_scan terms.
func ByWorkspaceRecentScan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkspaceRecentScanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newOtkRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OtkRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OtkRequestsTable, OtkRequestsColumn),
	)
}
func newSignupOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SignupOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SignupOptionsTable, SignupOptionsColumn),
	)
}
func newLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LanguageTable, LanguageColumn),
	)
}
func newChangeHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChangeHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ChangeHistoryTable, ChangeHistoryColumn),
	)
}
func newPlanHistoryUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanHistoryUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlanHistoryUserTable, PlanHistoryUserColumn),
	)
}
func newAPITokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APITokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APITokenTable, APITokenColumn),
	)
}
func newSelectedWorkstationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectedWorkstationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SelectedWorkstationTable, SelectedWorkstationColumn),
	)
}
func newSeatGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeatGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SeatGroupTable, SeatGroupColumn),
	)
}
func newWorkspaceRecentScanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkspaceRecentScanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, WorkspaceRecentScanTable, WorkspaceRecentScanColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e PickupDay) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *PickupDay) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = PickupDay(str)
	if err := PickupDayValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid PickupDay", str)
	}
	return nil
}
