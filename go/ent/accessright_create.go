// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccessRightCreate is the builder for creating a AccessRight entity.
type AccessRightCreate struct {
	config
	mutation *AccessRightMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (arc *AccessRightCreate) SetLabel(s string) *AccessRightCreate {
	arc.mutation.SetLabel(s)
	return arc
}

// SetInternalID sets the "internal_id" field.
func (arc *AccessRightCreate) SetInternalID(s string) *AccessRightCreate {
	arc.mutation.SetInternalID(s)
	return arc
}

// SetID sets the "id" field.
func (arc *AccessRightCreate) SetID(pu pulid.ID) *AccessRightCreate {
	arc.mutation.SetID(pu)
	return arc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (arc *AccessRightCreate) SetNillableID(pu *pulid.ID) *AccessRightCreate {
	if pu != nil {
		arc.SetID(*pu)
	}
	return arc
}

// AddAssignedAccessRightIDs adds the "assigned_access_right" edge to the SeatGroup entity by IDs.
func (arc *AccessRightCreate) AddAssignedAccessRightIDs(ids ...pulid.ID) *AccessRightCreate {
	arc.mutation.AddAssignedAccessRightIDs(ids...)
	return arc
}

// AddAssignedAccessRight adds the "assigned_access_right" edges to the SeatGroup entity.
func (arc *AccessRightCreate) AddAssignedAccessRight(s ...*SeatGroup) *AccessRightCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return arc.AddAssignedAccessRightIDs(ids...)
}

// AddSeatGroupAccessRightIDs adds the "seat_group_access_right" edge to the SeatGroupAccessRight entity by IDs.
func (arc *AccessRightCreate) AddSeatGroupAccessRightIDs(ids ...pulid.ID) *AccessRightCreate {
	arc.mutation.AddSeatGroupAccessRightIDs(ids...)
	return arc
}

// AddSeatGroupAccessRight adds the "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (arc *AccessRightCreate) AddSeatGroupAccessRight(s ...*SeatGroupAccessRight) *AccessRightCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return arc.AddSeatGroupAccessRightIDs(ids...)
}

// Mutation returns the AccessRightMutation object of the builder.
func (arc *AccessRightCreate) Mutation() *AccessRightMutation {
	return arc.mutation
}

// Save creates the AccessRight in the database.
func (arc *AccessRightCreate) Save(ctx context.Context) (*AccessRight, error) {
	if err := arc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AccessRightCreate) SaveX(ctx context.Context) *AccessRight {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AccessRightCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AccessRightCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *AccessRightCreate) defaults() error {
	if _, ok := arc.mutation.ID(); !ok {
		if accessright.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized accessright.DefaultID (forgotten import ent/runtime?)")
		}
		v := accessright.DefaultID()
		arc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (arc *AccessRightCreate) check() error {
	if _, ok := arc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "AccessRight.label"`)}
	}
	if _, ok := arc.mutation.InternalID(); !ok {
		return &ValidationError{Name: "internal_id", err: errors.New(`ent: missing required field "AccessRight.internal_id"`)}
	}
	return nil
}

func (arc *AccessRightCreate) sqlSave(ctx context.Context) (*AccessRight, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AccessRightCreate) createSpec() (*AccessRight, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessRight{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(accessright.Table, sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString))
	)
	_spec.OnConflict = arc.conflict
	if id, ok := arc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := arc.mutation.Label(); ok {
		_spec.SetField(accessright.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := arc.mutation.InternalID(); ok {
		_spec.SetField(accessright.FieldInternalID, field.TypeString, value)
		_node.InternalID = value
	}
	if nodes := arc.mutation.AssignedAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accessright.AssignedAccessRightTable,
			Columns: accessright.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: arc.config, mutation: newSeatGroupAccessRightMutation(arc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arc.mutation.SeatGroupAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   accessright.SeatGroupAccessRightTable,
			Columns: []string{accessright.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccessRight.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccessRightUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (arc *AccessRightCreate) OnConflict(opts ...sql.ConflictOption) *AccessRightUpsertOne {
	arc.conflict = opts
	return &AccessRightUpsertOne{
		create: arc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccessRight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arc *AccessRightCreate) OnConflictColumns(columns ...string) *AccessRightUpsertOne {
	arc.conflict = append(arc.conflict, sql.ConflictColumns(columns...))
	return &AccessRightUpsertOne{
		create: arc,
	}
}

type (
	// AccessRightUpsertOne is the builder for "upsert"-ing
	//  one AccessRight node.
	AccessRightUpsertOne struct {
		create *AccessRightCreate
	}

	// AccessRightUpsert is the "OnConflict" setter.
	AccessRightUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *AccessRightUpsert) SetLabel(v string) *AccessRightUpsert {
	u.Set(accessright.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *AccessRightUpsert) UpdateLabel() *AccessRightUpsert {
	u.SetExcluded(accessright.FieldLabel)
	return u
}

// SetInternalID sets the "internal_id" field.
func (u *AccessRightUpsert) SetInternalID(v string) *AccessRightUpsert {
	u.Set(accessright.FieldInternalID, v)
	return u
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *AccessRightUpsert) UpdateInternalID() *AccessRightUpsert {
	u.SetExcluded(accessright.FieldInternalID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AccessRight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accessright.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccessRightUpsertOne) UpdateNewValues() *AccessRightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(accessright.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccessRight.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccessRightUpsertOne) Ignore() *AccessRightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccessRightUpsertOne) DoNothing() *AccessRightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccessRightCreate.OnConflict
// documentation for more info.
func (u *AccessRightUpsertOne) Update(set func(*AccessRightUpsert)) *AccessRightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccessRightUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *AccessRightUpsertOne) SetLabel(v string) *AccessRightUpsertOne {
	return u.Update(func(s *AccessRightUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *AccessRightUpsertOne) UpdateLabel() *AccessRightUpsertOne {
	return u.Update(func(s *AccessRightUpsert) {
		s.UpdateLabel()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *AccessRightUpsertOne) SetInternalID(v string) *AccessRightUpsertOne {
	return u.Update(func(s *AccessRightUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *AccessRightUpsertOne) UpdateInternalID() *AccessRightUpsertOne {
	return u.Update(func(s *AccessRightUpsert) {
		s.UpdateInternalID()
	})
}

// Exec executes the query.
func (u *AccessRightUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccessRightCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccessRightUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccessRightUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AccessRightUpsertOne.ID is not supported by MySQL driver. Use AccessRightUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccessRightUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccessRightCreateBulk is the builder for creating many AccessRight entities in bulk.
type AccessRightCreateBulk struct {
	config
	err      error
	builders []*AccessRightCreate
	conflict []sql.ConflictOption
}

// Save creates the AccessRight entities in the database.
func (arcb *AccessRightCreateBulk) Save(ctx context.Context) ([]*AccessRight, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AccessRight, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessRightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = arcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AccessRightCreateBulk) SaveX(ctx context.Context) []*AccessRight {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AccessRightCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AccessRightCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccessRight.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccessRightUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (arcb *AccessRightCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccessRightUpsertBulk {
	arcb.conflict = opts
	return &AccessRightUpsertBulk{
		create: arcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccessRight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arcb *AccessRightCreateBulk) OnConflictColumns(columns ...string) *AccessRightUpsertBulk {
	arcb.conflict = append(arcb.conflict, sql.ConflictColumns(columns...))
	return &AccessRightUpsertBulk{
		create: arcb,
	}
}

// AccessRightUpsertBulk is the builder for "upsert"-ing
// a bulk of AccessRight nodes.
type AccessRightUpsertBulk struct {
	create *AccessRightCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AccessRight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accessright.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccessRightUpsertBulk) UpdateNewValues() *AccessRightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(accessright.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccessRight.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccessRightUpsertBulk) Ignore() *AccessRightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccessRightUpsertBulk) DoNothing() *AccessRightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccessRightCreateBulk.OnConflict
// documentation for more info.
func (u *AccessRightUpsertBulk) Update(set func(*AccessRightUpsert)) *AccessRightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccessRightUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *AccessRightUpsertBulk) SetLabel(v string) *AccessRightUpsertBulk {
	return u.Update(func(s *AccessRightUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *AccessRightUpsertBulk) UpdateLabel() *AccessRightUpsertBulk {
	return u.Update(func(s *AccessRightUpsert) {
		s.UpdateLabel()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *AccessRightUpsertBulk) SetInternalID(v string) *AccessRightUpsertBulk {
	return u.Update(func(s *AccessRightUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *AccessRightUpsertBulk) UpdateInternalID() *AccessRightUpsertBulk {
	return u.Update(func(s *AccessRightUpsert) {
		s.UpdateInternalID()
	})
}

// Exec executes the query.
func (u *AccessRightUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccessRightCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccessRightCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccessRightUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
