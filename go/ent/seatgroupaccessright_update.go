// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatGroupAccessRightUpdate is the builder for updating SeatGroupAccessRight entities.
type SeatGroupAccessRightUpdate struct {
	config
	hooks    []Hook
	mutation *SeatGroupAccessRightMutation
}

// Where appends a list predicates to the SeatGroupAccessRightUpdate builder.
func (sgaru *SeatGroupAccessRightUpdate) Where(ps ...predicate.SeatGroupAccessRight) *SeatGroupAccessRightUpdate {
	sgaru.mutation.Where(ps...)
	return sgaru
}

// SetTenantID sets the "tenant_id" field.
func (sgaru *SeatGroupAccessRightUpdate) SetTenantID(pu pulid.ID) *SeatGroupAccessRightUpdate {
	sgaru.mutation.SetTenantID(pu)
	return sgaru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sgaru *SeatGroupAccessRightUpdate) SetNillableTenantID(pu *pulid.ID) *SeatGroupAccessRightUpdate {
	if pu != nil {
		sgaru.SetTenantID(*pu)
	}
	return sgaru
}

// SetLevel sets the "level" field.
func (sgaru *SeatGroupAccessRightUpdate) SetLevel(s seatgroupaccessright.Level) *SeatGroupAccessRightUpdate {
	sgaru.mutation.SetLevel(s)
	return sgaru
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (sgaru *SeatGroupAccessRightUpdate) SetNillableLevel(s *seatgroupaccessright.Level) *SeatGroupAccessRightUpdate {
	if s != nil {
		sgaru.SetLevel(*s)
	}
	return sgaru
}

// SetAccessRightID sets the "access_right_id" field.
func (sgaru *SeatGroupAccessRightUpdate) SetAccessRightID(pu pulid.ID) *SeatGroupAccessRightUpdate {
	sgaru.mutation.SetAccessRightID(pu)
	return sgaru
}

// SetNillableAccessRightID sets the "access_right_id" field if the given value is not nil.
func (sgaru *SeatGroupAccessRightUpdate) SetNillableAccessRightID(pu *pulid.ID) *SeatGroupAccessRightUpdate {
	if pu != nil {
		sgaru.SetAccessRightID(*pu)
	}
	return sgaru
}

// SetSeatGroupID sets the "seat_group_id" field.
func (sgaru *SeatGroupAccessRightUpdate) SetSeatGroupID(pu pulid.ID) *SeatGroupAccessRightUpdate {
	sgaru.mutation.SetSeatGroupID(pu)
	return sgaru
}

// SetNillableSeatGroupID sets the "seat_group_id" field if the given value is not nil.
func (sgaru *SeatGroupAccessRightUpdate) SetNillableSeatGroupID(pu *pulid.ID) *SeatGroupAccessRightUpdate {
	if pu != nil {
		sgaru.SetSeatGroupID(*pu)
	}
	return sgaru
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sgaru *SeatGroupAccessRightUpdate) SetTenant(t *Tenant) *SeatGroupAccessRightUpdate {
	return sgaru.SetTenantID(t.ID)
}

// SetAccessRight sets the "access_right" edge to the AccessRight entity.
func (sgaru *SeatGroupAccessRightUpdate) SetAccessRight(a *AccessRight) *SeatGroupAccessRightUpdate {
	return sgaru.SetAccessRightID(a.ID)
}

// SetSeatGroup sets the "seat_group" edge to the SeatGroup entity.
func (sgaru *SeatGroupAccessRightUpdate) SetSeatGroup(s *SeatGroup) *SeatGroupAccessRightUpdate {
	return sgaru.SetSeatGroupID(s.ID)
}

// Mutation returns the SeatGroupAccessRightMutation object of the builder.
func (sgaru *SeatGroupAccessRightUpdate) Mutation() *SeatGroupAccessRightMutation {
	return sgaru.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sgaru *SeatGroupAccessRightUpdate) ClearTenant() *SeatGroupAccessRightUpdate {
	sgaru.mutation.ClearTenant()
	return sgaru
}

// ClearAccessRight clears the "access_right" edge to the AccessRight entity.
func (sgaru *SeatGroupAccessRightUpdate) ClearAccessRight() *SeatGroupAccessRightUpdate {
	sgaru.mutation.ClearAccessRight()
	return sgaru
}

// ClearSeatGroup clears the "seat_group" edge to the SeatGroup entity.
func (sgaru *SeatGroupAccessRightUpdate) ClearSeatGroup() *SeatGroupAccessRightUpdate {
	sgaru.mutation.ClearSeatGroup()
	return sgaru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgaru *SeatGroupAccessRightUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sgaru.sqlSave, sgaru.mutation, sgaru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sgaru *SeatGroupAccessRightUpdate) SaveX(ctx context.Context) int {
	affected, err := sgaru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgaru *SeatGroupAccessRightUpdate) Exec(ctx context.Context) error {
	_, err := sgaru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgaru *SeatGroupAccessRightUpdate) ExecX(ctx context.Context) {
	if err := sgaru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgaru *SeatGroupAccessRightUpdate) check() error {
	if v, ok := sgaru.mutation.Level(); ok {
		if err := seatgroupaccessright.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SeatGroupAccessRight.level": %w`, err)}
		}
	}
	if sgaru.mutation.TenantCleared() && len(sgaru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeatGroupAccessRight.tenant"`)
	}
	if sgaru.mutation.AccessRightCleared() && len(sgaru.mutation.AccessRightIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeatGroupAccessRight.access_right"`)
	}
	if sgaru.mutation.SeatGroupCleared() && len(sgaru.mutation.SeatGroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeatGroupAccessRight.seat_group"`)
	}
	return nil
}

func (sgaru *SeatGroupAccessRightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sgaru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(seatgroupaccessright.Table, seatgroupaccessright.Columns, sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString))
	if ps := sgaru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgaru.mutation.Level(); ok {
		_spec.SetField(seatgroupaccessright.FieldLevel, field.TypeEnum, value)
	}
	if sgaru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.TenantTable,
			Columns: []string{seatgroupaccessright.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgaru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.TenantTable,
			Columns: []string{seatgroupaccessright.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgaru.mutation.AccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.AccessRightTable,
			Columns: []string{seatgroupaccessright.AccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgaru.mutation.AccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.AccessRightTable,
			Columns: []string{seatgroupaccessright.AccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgaru.mutation.SeatGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.SeatGroupTable,
			Columns: []string{seatgroupaccessright.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgaru.mutation.SeatGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.SeatGroupTable,
			Columns: []string{seatgroupaccessright.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgaru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seatgroupaccessright.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sgaru.mutation.done = true
	return n, nil
}

// SeatGroupAccessRightUpdateOne is the builder for updating a single SeatGroupAccessRight entity.
type SeatGroupAccessRightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeatGroupAccessRightMutation
}

// SetTenantID sets the "tenant_id" field.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetTenantID(pu pulid.ID) *SeatGroupAccessRightUpdateOne {
	sgaruo.mutation.SetTenantID(pu)
	return sgaruo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetNillableTenantID(pu *pulid.ID) *SeatGroupAccessRightUpdateOne {
	if pu != nil {
		sgaruo.SetTenantID(*pu)
	}
	return sgaruo
}

// SetLevel sets the "level" field.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetLevel(s seatgroupaccessright.Level) *SeatGroupAccessRightUpdateOne {
	sgaruo.mutation.SetLevel(s)
	return sgaruo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetNillableLevel(s *seatgroupaccessright.Level) *SeatGroupAccessRightUpdateOne {
	if s != nil {
		sgaruo.SetLevel(*s)
	}
	return sgaruo
}

// SetAccessRightID sets the "access_right_id" field.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetAccessRightID(pu pulid.ID) *SeatGroupAccessRightUpdateOne {
	sgaruo.mutation.SetAccessRightID(pu)
	return sgaruo
}

// SetNillableAccessRightID sets the "access_right_id" field if the given value is not nil.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetNillableAccessRightID(pu *pulid.ID) *SeatGroupAccessRightUpdateOne {
	if pu != nil {
		sgaruo.SetAccessRightID(*pu)
	}
	return sgaruo
}

// SetSeatGroupID sets the "seat_group_id" field.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetSeatGroupID(pu pulid.ID) *SeatGroupAccessRightUpdateOne {
	sgaruo.mutation.SetSeatGroupID(pu)
	return sgaruo
}

// SetNillableSeatGroupID sets the "seat_group_id" field if the given value is not nil.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetNillableSeatGroupID(pu *pulid.ID) *SeatGroupAccessRightUpdateOne {
	if pu != nil {
		sgaruo.SetSeatGroupID(*pu)
	}
	return sgaruo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetTenant(t *Tenant) *SeatGroupAccessRightUpdateOne {
	return sgaruo.SetTenantID(t.ID)
}

// SetAccessRight sets the "access_right" edge to the AccessRight entity.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetAccessRight(a *AccessRight) *SeatGroupAccessRightUpdateOne {
	return sgaruo.SetAccessRightID(a.ID)
}

// SetSeatGroup sets the "seat_group" edge to the SeatGroup entity.
func (sgaruo *SeatGroupAccessRightUpdateOne) SetSeatGroup(s *SeatGroup) *SeatGroupAccessRightUpdateOne {
	return sgaruo.SetSeatGroupID(s.ID)
}

// Mutation returns the SeatGroupAccessRightMutation object of the builder.
func (sgaruo *SeatGroupAccessRightUpdateOne) Mutation() *SeatGroupAccessRightMutation {
	return sgaruo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sgaruo *SeatGroupAccessRightUpdateOne) ClearTenant() *SeatGroupAccessRightUpdateOne {
	sgaruo.mutation.ClearTenant()
	return sgaruo
}

// ClearAccessRight clears the "access_right" edge to the AccessRight entity.
func (sgaruo *SeatGroupAccessRightUpdateOne) ClearAccessRight() *SeatGroupAccessRightUpdateOne {
	sgaruo.mutation.ClearAccessRight()
	return sgaruo
}

// ClearSeatGroup clears the "seat_group" edge to the SeatGroup entity.
func (sgaruo *SeatGroupAccessRightUpdateOne) ClearSeatGroup() *SeatGroupAccessRightUpdateOne {
	sgaruo.mutation.ClearSeatGroup()
	return sgaruo
}

// Where appends a list predicates to the SeatGroupAccessRightUpdate builder.
func (sgaruo *SeatGroupAccessRightUpdateOne) Where(ps ...predicate.SeatGroupAccessRight) *SeatGroupAccessRightUpdateOne {
	sgaruo.mutation.Where(ps...)
	return sgaruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sgaruo *SeatGroupAccessRightUpdateOne) Select(field string, fields ...string) *SeatGroupAccessRightUpdateOne {
	sgaruo.fields = append([]string{field}, fields...)
	return sgaruo
}

// Save executes the query and returns the updated SeatGroupAccessRight entity.
func (sgaruo *SeatGroupAccessRightUpdateOne) Save(ctx context.Context) (*SeatGroupAccessRight, error) {
	return withHooks(ctx, sgaruo.sqlSave, sgaruo.mutation, sgaruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sgaruo *SeatGroupAccessRightUpdateOne) SaveX(ctx context.Context) *SeatGroupAccessRight {
	node, err := sgaruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sgaruo *SeatGroupAccessRightUpdateOne) Exec(ctx context.Context) error {
	_, err := sgaruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgaruo *SeatGroupAccessRightUpdateOne) ExecX(ctx context.Context) {
	if err := sgaruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgaruo *SeatGroupAccessRightUpdateOne) check() error {
	if v, ok := sgaruo.mutation.Level(); ok {
		if err := seatgroupaccessright.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SeatGroupAccessRight.level": %w`, err)}
		}
	}
	if sgaruo.mutation.TenantCleared() && len(sgaruo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeatGroupAccessRight.tenant"`)
	}
	if sgaruo.mutation.AccessRightCleared() && len(sgaruo.mutation.AccessRightIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeatGroupAccessRight.access_right"`)
	}
	if sgaruo.mutation.SeatGroupCleared() && len(sgaruo.mutation.SeatGroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeatGroupAccessRight.seat_group"`)
	}
	return nil
}

func (sgaruo *SeatGroupAccessRightUpdateOne) sqlSave(ctx context.Context) (_node *SeatGroupAccessRight, err error) {
	if err := sgaruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(seatgroupaccessright.Table, seatgroupaccessright.Columns, sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString))
	id, ok := sgaruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SeatGroupAccessRight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sgaruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seatgroupaccessright.FieldID)
		for _, f := range fields {
			if !seatgroupaccessright.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seatgroupaccessright.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sgaruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgaruo.mutation.Level(); ok {
		_spec.SetField(seatgroupaccessright.FieldLevel, field.TypeEnum, value)
	}
	if sgaruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.TenantTable,
			Columns: []string{seatgroupaccessright.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgaruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.TenantTable,
			Columns: []string{seatgroupaccessright.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgaruo.mutation.AccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.AccessRightTable,
			Columns: []string{seatgroupaccessright.AccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgaruo.mutation.AccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.AccessRightTable,
			Columns: []string{seatgroupaccessright.AccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgaruo.mutation.SeatGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.SeatGroupTable,
			Columns: []string{seatgroupaccessright.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgaruo.mutation.SeatGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.SeatGroupTable,
			Columns: []string{seatgroupaccessright.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SeatGroupAccessRight{config: sgaruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sgaruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seatgroupaccessright.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sgaruo.mutation.done = true
	return _node, nil
}
