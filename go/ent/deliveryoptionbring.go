// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeliveryOptionBring is the model entity for the DeliveryOptionBring schema.
type DeliveryOptionBring struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ElectronicCustoms holds the value of the "electronic_customs" field.
	ElectronicCustoms bool `json:"electronic_customs,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryOptionBringQuery when eager-loading is set.
	Edges                                 DeliveryOptionBringEdges `json:"edges"`
	delivery_option_delivery_option_bring *pulid.ID
	selectValues                          sql.SelectValues
}

// DeliveryOptionBringEdges holds the relations/edges for other nodes in the graph.
type DeliveryOptionBringEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption *DeliveryOption `json:"delivery_option,omitempty"`
	// CarrierAdditionalServiceBring holds the value of the carrier_additional_service_bring edge.
	CarrierAdditionalServiceBring []*CarrierAdditionalServiceBring `json:"carrier_additional_service_bring,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedCarrierAdditionalServiceBring map[string][]*CarrierAdditionalServiceBring
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionBringEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionBringEdges) DeliveryOptionOrErr() (*DeliveryOption, error) {
	if e.DeliveryOption != nil {
		return e.DeliveryOption, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: deliveryoption.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// CarrierAdditionalServiceBringOrErr returns the CarrierAdditionalServiceBring value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionBringEdges) CarrierAdditionalServiceBringOrErr() ([]*CarrierAdditionalServiceBring, error) {
	if e.loadedTypes[2] {
		return e.CarrierAdditionalServiceBring, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_bring"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeliveryOptionBring) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliveryoptionbring.FieldID, deliveryoptionbring.FieldTenantID:
			values[i] = new(pulid.ID)
		case deliveryoptionbring.FieldElectronicCustoms:
			values[i] = new(sql.NullBool)
		case deliveryoptionbring.ForeignKeys[0]: // delivery_option_delivery_option_bring
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeliveryOptionBring fields.
func (dob *DeliveryOptionBring) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliveryoptionbring.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dob.ID = *value
			}
		case deliveryoptionbring.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				dob.TenantID = *value
			}
		case deliveryoptionbring.FieldElectronicCustoms:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field electronic_customs", values[i])
			} else if value.Valid {
				dob.ElectronicCustoms = value.Bool
			}
		case deliveryoptionbring.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_option_delivery_option_bring", values[i])
			} else if value.Valid {
				dob.delivery_option_delivery_option_bring = new(pulid.ID)
				*dob.delivery_option_delivery_option_bring = *value.S.(*pulid.ID)
			}
		default:
			dob.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeliveryOptionBring.
// This includes values selected through modifiers, order, etc.
func (dob *DeliveryOptionBring) Value(name string) (ent.Value, error) {
	return dob.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the DeliveryOptionBring entity.
func (dob *DeliveryOptionBring) QueryTenant() *TenantQuery {
	return NewDeliveryOptionBringClient(dob.config).QueryTenant(dob)
}

// QueryDeliveryOption queries the "delivery_option" edge of the DeliveryOptionBring entity.
func (dob *DeliveryOptionBring) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewDeliveryOptionBringClient(dob.config).QueryDeliveryOption(dob)
}

// QueryCarrierAdditionalServiceBring queries the "carrier_additional_service_bring" edge of the DeliveryOptionBring entity.
func (dob *DeliveryOptionBring) QueryCarrierAdditionalServiceBring() *CarrierAdditionalServiceBringQuery {
	return NewDeliveryOptionBringClient(dob.config).QueryCarrierAdditionalServiceBring(dob)
}

// Update returns a builder for updating this DeliveryOptionBring.
// Note that you need to call DeliveryOptionBring.Unwrap() before calling this method if this DeliveryOptionBring
// was returned from a transaction, and the transaction was committed or rolled back.
func (dob *DeliveryOptionBring) Update() *DeliveryOptionBringUpdateOne {
	return NewDeliveryOptionBringClient(dob.config).UpdateOne(dob)
}

// Unwrap unwraps the DeliveryOptionBring entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dob *DeliveryOptionBring) Unwrap() *DeliveryOptionBring {
	_tx, ok := dob.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeliveryOptionBring is not a transactional entity")
	}
	dob.config.driver = _tx.drv
	return dob
}

// String implements the fmt.Stringer.
func (dob *DeliveryOptionBring) String() string {
	var builder strings.Builder
	builder.WriteString("DeliveryOptionBring(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dob.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dob.TenantID))
	builder.WriteString(", ")
	builder.WriteString("electronic_customs=")
	builder.WriteString(fmt.Sprintf("%v", dob.ElectronicCustoms))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierAdditionalServiceBring returns the CarrierAdditionalServiceBring named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dob *DeliveryOptionBring) NamedCarrierAdditionalServiceBring(name string) ([]*CarrierAdditionalServiceBring, error) {
	if dob.Edges.namedCarrierAdditionalServiceBring == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dob.Edges.namedCarrierAdditionalServiceBring[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dob *DeliveryOptionBring) appendNamedCarrierAdditionalServiceBring(name string, edges ...*CarrierAdditionalServiceBring) {
	if dob.Edges.namedCarrierAdditionalServiceBring == nil {
		dob.Edges.namedCarrierAdditionalServiceBring = make(map[string][]*CarrierAdditionalServiceBring)
	}
	if len(edges) == 0 {
		dob.Edges.namedCarrierAdditionalServiceBring[name] = []*CarrierAdditionalServiceBring{}
	} else {
		dob.Edges.namedCarrierAdditionalServiceBring[name] = append(dob.Edges.namedCarrierAdditionalServiceBring[name], edges...)
	}
}

// DeliveryOptionBrings is a parsable slice of DeliveryOptionBring.
type DeliveryOptionBrings []*DeliveryOptionBring
