// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ConnectOptionPlatform is the model entity for the ConnectOptionPlatform schema.
type ConnectOptionPlatform struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectOptionPlatformQuery when eager-loading is set.
	Edges        ConnectOptionPlatformEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConnectOptionPlatformEdges holds the relations/edges for other nodes in the graph.
type ConnectOptionPlatformEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant []*Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedTenant map[string][]*Tenant
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading.
func (e ConnectOptionPlatformEdges) TenantOrErr() ([]*Tenant, error) {
	if e.loadedTypes[0] {
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConnectOptionPlatform) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case connectoptionplatform.FieldID:
			values[i] = new(pulid.ID)
		case connectoptionplatform.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConnectOptionPlatform fields.
func (cop *ConnectOptionPlatform) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connectoptionplatform.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cop.ID = *value
			}
		case connectoptionplatform.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cop.Name = value.String
			}
		default:
			cop.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConnectOptionPlatform.
// This includes values selected through modifiers, order, etc.
func (cop *ConnectOptionPlatform) Value(name string) (ent.Value, error) {
	return cop.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ConnectOptionPlatform entity.
func (cop *ConnectOptionPlatform) QueryTenant() *TenantQuery {
	return NewConnectOptionPlatformClient(cop.config).QueryTenant(cop)
}

// Update returns a builder for updating this ConnectOptionPlatform.
// Note that you need to call ConnectOptionPlatform.Unwrap() before calling this method if this ConnectOptionPlatform
// was returned from a transaction, and the transaction was committed or rolled back.
func (cop *ConnectOptionPlatform) Update() *ConnectOptionPlatformUpdateOne {
	return NewConnectOptionPlatformClient(cop.config).UpdateOne(cop)
}

// Unwrap unwraps the ConnectOptionPlatform entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cop *ConnectOptionPlatform) Unwrap() *ConnectOptionPlatform {
	_tx, ok := cop.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConnectOptionPlatform is not a transactional entity")
	}
	cop.config.driver = _tx.drv
	return cop
}

// String implements the fmt.Stringer.
func (cop *ConnectOptionPlatform) String() string {
	var builder strings.Builder
	builder.WriteString("ConnectOptionPlatform(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cop.ID))
	builder.WriteString("name=")
	builder.WriteString(cop.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTenant returns the Tenant named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cop *ConnectOptionPlatform) NamedTenant(name string) ([]*Tenant, error) {
	if cop.Edges.namedTenant == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cop.Edges.namedTenant[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cop *ConnectOptionPlatform) appendNamedTenant(name string, edges ...*Tenant) {
	if cop.Edges.namedTenant == nil {
		cop.Edges.namedTenant = make(map[string][]*Tenant)
	}
	if len(edges) == 0 {
		cop.Edges.namedTenant[name] = []*Tenant{}
	} else {
		cop.Edges.namedTenant[name] = append(cop.Edges.namedTenant[name], edges...)
	}
}

// ConnectOptionPlatforms is a parsable slice of ConnectOptionPlatform.
type ConnectOptionPlatforms []*ConnectOptionPlatform
