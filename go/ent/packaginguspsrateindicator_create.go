// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSRateIndicatorCreate is the builder for creating a PackagingUSPSRateIndicator entity.
type PackagingUSPSRateIndicatorCreate struct {
	config
	mutation *PackagingUSPSRateIndicatorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (puric *PackagingUSPSRateIndicatorCreate) SetCode(s string) *PackagingUSPSRateIndicatorCreate {
	puric.mutation.SetCode(s)
	return puric
}

// SetName sets the "name" field.
func (puric *PackagingUSPSRateIndicatorCreate) SetName(s string) *PackagingUSPSRateIndicatorCreate {
	puric.mutation.SetName(s)
	return puric
}

// SetID sets the "id" field.
func (puric *PackagingUSPSRateIndicatorCreate) SetID(pu pulid.ID) *PackagingUSPSRateIndicatorCreate {
	puric.mutation.SetID(pu)
	return puric
}

// SetNillableID sets the "id" field if the given value is not nil.
func (puric *PackagingUSPSRateIndicatorCreate) SetNillableID(pu *pulid.ID) *PackagingUSPSRateIndicatorCreate {
	if pu != nil {
		puric.SetID(*pu)
	}
	return puric
}

// AddPackagingUspIDs adds the "packaging_usps" edge to the PackagingUSPS entity by IDs.
func (puric *PackagingUSPSRateIndicatorCreate) AddPackagingUspIDs(ids ...pulid.ID) *PackagingUSPSRateIndicatorCreate {
	puric.mutation.AddPackagingUspIDs(ids...)
	return puric
}

// AddPackagingUSPS adds the "packaging_usps" edges to the PackagingUSPS entity.
func (puric *PackagingUSPSRateIndicatorCreate) AddPackagingUSPS(p ...*PackagingUSPS) *PackagingUSPSRateIndicatorCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puric.AddPackagingUspIDs(ids...)
}

// Mutation returns the PackagingUSPSRateIndicatorMutation object of the builder.
func (puric *PackagingUSPSRateIndicatorCreate) Mutation() *PackagingUSPSRateIndicatorMutation {
	return puric.mutation
}

// Save creates the PackagingUSPSRateIndicator in the database.
func (puric *PackagingUSPSRateIndicatorCreate) Save(ctx context.Context) (*PackagingUSPSRateIndicator, error) {
	if err := puric.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puric.sqlSave, puric.mutation, puric.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (puric *PackagingUSPSRateIndicatorCreate) SaveX(ctx context.Context) *PackagingUSPSRateIndicator {
	v, err := puric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (puric *PackagingUSPSRateIndicatorCreate) Exec(ctx context.Context) error {
	_, err := puric.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puric *PackagingUSPSRateIndicatorCreate) ExecX(ctx context.Context) {
	if err := puric.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puric *PackagingUSPSRateIndicatorCreate) defaults() error {
	if _, ok := puric.mutation.ID(); !ok {
		if packaginguspsrateindicator.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized packaginguspsrateindicator.DefaultID (forgotten import ent/runtime?)")
		}
		v := packaginguspsrateindicator.DefaultID()
		puric.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puric *PackagingUSPSRateIndicatorCreate) check() error {
	if _, ok := puric.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "PackagingUSPSRateIndicator.code"`)}
	}
	if _, ok := puric.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PackagingUSPSRateIndicator.name"`)}
	}
	return nil
}

func (puric *PackagingUSPSRateIndicatorCreate) sqlSave(ctx context.Context) (*PackagingUSPSRateIndicator, error) {
	if err := puric.check(); err != nil {
		return nil, err
	}
	_node, _spec := puric.createSpec()
	if err := sqlgraph.CreateNode(ctx, puric.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	puric.mutation.id = &_node.ID
	puric.mutation.done = true
	return _node, nil
}

func (puric *PackagingUSPSRateIndicatorCreate) createSpec() (*PackagingUSPSRateIndicator, *sqlgraph.CreateSpec) {
	var (
		_node = &PackagingUSPSRateIndicator{config: puric.config}
		_spec = sqlgraph.NewCreateSpec(packaginguspsrateindicator.Table, sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString))
	)
	_spec.OnConflict = puric.conflict
	if id, ok := puric.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := puric.mutation.Code(); ok {
		_spec.SetField(packaginguspsrateindicator.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := puric.mutation.Name(); ok {
		_spec.SetField(packaginguspsrateindicator.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := puric.mutation.PackagingUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaginguspsrateindicator.PackagingUSPSTable,
			Columns: []string{packaginguspsrateindicator.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackagingUSPSRateIndicator.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingUSPSRateIndicatorUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (puric *PackagingUSPSRateIndicatorCreate) OnConflict(opts ...sql.ConflictOption) *PackagingUSPSRateIndicatorUpsertOne {
	puric.conflict = opts
	return &PackagingUSPSRateIndicatorUpsertOne{
		create: puric,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackagingUSPSRateIndicator.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (puric *PackagingUSPSRateIndicatorCreate) OnConflictColumns(columns ...string) *PackagingUSPSRateIndicatorUpsertOne {
	puric.conflict = append(puric.conflict, sql.ConflictColumns(columns...))
	return &PackagingUSPSRateIndicatorUpsertOne{
		create: puric,
	}
}

type (
	// PackagingUSPSRateIndicatorUpsertOne is the builder for "upsert"-ing
	//  one PackagingUSPSRateIndicator node.
	PackagingUSPSRateIndicatorUpsertOne struct {
		create *PackagingUSPSRateIndicatorCreate
	}

	// PackagingUSPSRateIndicatorUpsert is the "OnConflict" setter.
	PackagingUSPSRateIndicatorUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *PackagingUSPSRateIndicatorUpsert) SetCode(v string) *PackagingUSPSRateIndicatorUpsert {
	u.Set(packaginguspsrateindicator.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PackagingUSPSRateIndicatorUpsert) UpdateCode() *PackagingUSPSRateIndicatorUpsert {
	u.SetExcluded(packaginguspsrateindicator.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *PackagingUSPSRateIndicatorUpsert) SetName(v string) *PackagingUSPSRateIndicatorUpsert {
	u.Set(packaginguspsrateindicator.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUSPSRateIndicatorUpsert) UpdateName() *PackagingUSPSRateIndicatorUpsert {
	u.SetExcluded(packaginguspsrateindicator.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PackagingUSPSRateIndicator.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packaginguspsrateindicator.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingUSPSRateIndicatorUpsertOne) UpdateNewValues() *PackagingUSPSRateIndicatorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(packaginguspsrateindicator.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackagingUSPSRateIndicator.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PackagingUSPSRateIndicatorUpsertOne) Ignore() *PackagingUSPSRateIndicatorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingUSPSRateIndicatorUpsertOne) DoNothing() *PackagingUSPSRateIndicatorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingUSPSRateIndicatorCreate.OnConflict
// documentation for more info.
func (u *PackagingUSPSRateIndicatorUpsertOne) Update(set func(*PackagingUSPSRateIndicatorUpsert)) *PackagingUSPSRateIndicatorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingUSPSRateIndicatorUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *PackagingUSPSRateIndicatorUpsertOne) SetCode(v string) *PackagingUSPSRateIndicatorUpsertOne {
	return u.Update(func(s *PackagingUSPSRateIndicatorUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PackagingUSPSRateIndicatorUpsertOne) UpdateCode() *PackagingUSPSRateIndicatorUpsertOne {
	return u.Update(func(s *PackagingUSPSRateIndicatorUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *PackagingUSPSRateIndicatorUpsertOne) SetName(v string) *PackagingUSPSRateIndicatorUpsertOne {
	return u.Update(func(s *PackagingUSPSRateIndicatorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUSPSRateIndicatorUpsertOne) UpdateName() *PackagingUSPSRateIndicatorUpsertOne {
	return u.Update(func(s *PackagingUSPSRateIndicatorUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *PackagingUSPSRateIndicatorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingUSPSRateIndicatorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingUSPSRateIndicatorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackagingUSPSRateIndicatorUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PackagingUSPSRateIndicatorUpsertOne.ID is not supported by MySQL driver. Use PackagingUSPSRateIndicatorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackagingUSPSRateIndicatorUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackagingUSPSRateIndicatorCreateBulk is the builder for creating many PackagingUSPSRateIndicator entities in bulk.
type PackagingUSPSRateIndicatorCreateBulk struct {
	config
	err      error
	builders []*PackagingUSPSRateIndicatorCreate
	conflict []sql.ConflictOption
}

// Save creates the PackagingUSPSRateIndicator entities in the database.
func (puricb *PackagingUSPSRateIndicatorCreateBulk) Save(ctx context.Context) ([]*PackagingUSPSRateIndicator, error) {
	if puricb.err != nil {
		return nil, puricb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(puricb.builders))
	nodes := make([]*PackagingUSPSRateIndicator, len(puricb.builders))
	mutators := make([]Mutator, len(puricb.builders))
	for i := range puricb.builders {
		func(i int, root context.Context) {
			builder := puricb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackagingUSPSRateIndicatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, puricb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = puricb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, puricb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, puricb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (puricb *PackagingUSPSRateIndicatorCreateBulk) SaveX(ctx context.Context) []*PackagingUSPSRateIndicator {
	v, err := puricb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (puricb *PackagingUSPSRateIndicatorCreateBulk) Exec(ctx context.Context) error {
	_, err := puricb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puricb *PackagingUSPSRateIndicatorCreateBulk) ExecX(ctx context.Context) {
	if err := puricb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackagingUSPSRateIndicator.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingUSPSRateIndicatorUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (puricb *PackagingUSPSRateIndicatorCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackagingUSPSRateIndicatorUpsertBulk {
	puricb.conflict = opts
	return &PackagingUSPSRateIndicatorUpsertBulk{
		create: puricb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackagingUSPSRateIndicator.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (puricb *PackagingUSPSRateIndicatorCreateBulk) OnConflictColumns(columns ...string) *PackagingUSPSRateIndicatorUpsertBulk {
	puricb.conflict = append(puricb.conflict, sql.ConflictColumns(columns...))
	return &PackagingUSPSRateIndicatorUpsertBulk{
		create: puricb,
	}
}

// PackagingUSPSRateIndicatorUpsertBulk is the builder for "upsert"-ing
// a bulk of PackagingUSPSRateIndicator nodes.
type PackagingUSPSRateIndicatorUpsertBulk struct {
	create *PackagingUSPSRateIndicatorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PackagingUSPSRateIndicator.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packaginguspsrateindicator.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingUSPSRateIndicatorUpsertBulk) UpdateNewValues() *PackagingUSPSRateIndicatorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(packaginguspsrateindicator.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackagingUSPSRateIndicator.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PackagingUSPSRateIndicatorUpsertBulk) Ignore() *PackagingUSPSRateIndicatorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingUSPSRateIndicatorUpsertBulk) DoNothing() *PackagingUSPSRateIndicatorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingUSPSRateIndicatorCreateBulk.OnConflict
// documentation for more info.
func (u *PackagingUSPSRateIndicatorUpsertBulk) Update(set func(*PackagingUSPSRateIndicatorUpsert)) *PackagingUSPSRateIndicatorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingUSPSRateIndicatorUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *PackagingUSPSRateIndicatorUpsertBulk) SetCode(v string) *PackagingUSPSRateIndicatorUpsertBulk {
	return u.Update(func(s *PackagingUSPSRateIndicatorUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *PackagingUSPSRateIndicatorUpsertBulk) UpdateCode() *PackagingUSPSRateIndicatorUpsertBulk {
	return u.Update(func(s *PackagingUSPSRateIndicatorUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *PackagingUSPSRateIndicatorUpsertBulk) SetName(v string) *PackagingUSPSRateIndicatorUpsertBulk {
	return u.Update(func(s *PackagingUSPSRateIndicatorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUSPSRateIndicatorUpsertBulk) UpdateName() *PackagingUSPSRateIndicatorUpsertBulk {
	return u.Update(func(s *PackagingUSPSRateIndicatorUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *PackagingUSPSRateIndicatorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackagingUSPSRateIndicatorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingUSPSRateIndicatorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingUSPSRateIndicatorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
