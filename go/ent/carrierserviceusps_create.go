// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceUSPSCreate is the builder for creating a CarrierServiceUSPS entity.
type CarrierServiceUSPSCreate struct {
	config
	mutation *CarrierServiceUSPSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAPIKey sets the "api_key" field.
func (csuc *CarrierServiceUSPSCreate) SetAPIKey(ck carrierserviceusps.APIKey) *CarrierServiceUSPSCreate {
	csuc.mutation.SetAPIKey(ck)
	return csuc
}

// SetID sets the "id" field.
func (csuc *CarrierServiceUSPSCreate) SetID(pu pulid.ID) *CarrierServiceUSPSCreate {
	csuc.mutation.SetID(pu)
	return csuc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csuc *CarrierServiceUSPSCreate) SetNillableID(pu *pulid.ID) *CarrierServiceUSPSCreate {
	if pu != nil {
		csuc.SetID(*pu)
	}
	return csuc
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csuc *CarrierServiceUSPSCreate) SetCarrierServiceID(id pulid.ID) *CarrierServiceUSPSCreate {
	csuc.mutation.SetCarrierServiceID(id)
	return csuc
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csuc *CarrierServiceUSPSCreate) SetCarrierService(c *CarrierService) *CarrierServiceUSPSCreate {
	return csuc.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceUspIDs adds the "carrier_additional_service_usps" edge to the CarrierAdditionalServiceUSPS entity by IDs.
func (csuc *CarrierServiceUSPSCreate) AddCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *CarrierServiceUSPSCreate {
	csuc.mutation.AddCarrierAdditionalServiceUspIDs(ids...)
	return csuc
}

// AddCarrierAdditionalServiceUSPS adds the "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (csuc *CarrierServiceUSPSCreate) AddCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *CarrierServiceUSPSCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuc.AddCarrierAdditionalServiceUspIDs(ids...)
}

// Mutation returns the CarrierServiceUSPSMutation object of the builder.
func (csuc *CarrierServiceUSPSCreate) Mutation() *CarrierServiceUSPSMutation {
	return csuc.mutation
}

// Save creates the CarrierServiceUSPS in the database.
func (csuc *CarrierServiceUSPSCreate) Save(ctx context.Context) (*CarrierServiceUSPS, error) {
	if err := csuc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csuc.sqlSave, csuc.mutation, csuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csuc *CarrierServiceUSPSCreate) SaveX(ctx context.Context) *CarrierServiceUSPS {
	v, err := csuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csuc *CarrierServiceUSPSCreate) Exec(ctx context.Context) error {
	_, err := csuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuc *CarrierServiceUSPSCreate) ExecX(ctx context.Context) {
	if err := csuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuc *CarrierServiceUSPSCreate) defaults() error {
	if _, ok := csuc.mutation.ID(); !ok {
		if carrierserviceusps.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierserviceusps.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierserviceusps.DefaultID()
		csuc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csuc *CarrierServiceUSPSCreate) check() error {
	if _, ok := csuc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`ent: missing required field "CarrierServiceUSPS.api_key"`)}
	}
	if v, ok := csuc.mutation.APIKey(); ok {
		if err := carrierserviceusps.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "CarrierServiceUSPS.api_key": %w`, err)}
		}
	}
	if len(csuc.mutation.CarrierServiceIDs()) == 0 {
		return &ValidationError{Name: "carrier_service", err: errors.New(`ent: missing required edge "CarrierServiceUSPS.carrier_service"`)}
	}
	return nil
}

func (csuc *CarrierServiceUSPSCreate) sqlSave(ctx context.Context) (*CarrierServiceUSPS, error) {
	if err := csuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csuc.mutation.id = &_node.ID
	csuc.mutation.done = true
	return _node, nil
}

func (csuc *CarrierServiceUSPSCreate) createSpec() (*CarrierServiceUSPS, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierServiceUSPS{config: csuc.config}
		_spec = sqlgraph.NewCreateSpec(carrierserviceusps.Table, sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString))
	)
	_spec.OnConflict = csuc.conflict
	if id, ok := csuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csuc.mutation.APIKey(); ok {
		_spec.SetField(carrierserviceusps.FieldAPIKey, field.TypeEnum, value)
		_node.APIKey = value
	}
	if nodes := csuc.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceusps.CarrierServiceTable,
			Columns: []string{carrierserviceusps.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_service_carrier_service_usps = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csuc.mutation.CarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierserviceusps.CarrierAdditionalServiceUSPSTable,
			Columns: []string{carrierserviceusps.CarrierAdditionalServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierServiceUSPS.Create().
//		SetAPIKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierServiceUSPSUpsert) {
//			SetAPIKey(v+v).
//		}).
//		Exec(ctx)
func (csuc *CarrierServiceUSPSCreate) OnConflict(opts ...sql.ConflictOption) *CarrierServiceUSPSUpsertOne {
	csuc.conflict = opts
	return &CarrierServiceUSPSUpsertOne{
		create: csuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierServiceUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csuc *CarrierServiceUSPSCreate) OnConflictColumns(columns ...string) *CarrierServiceUSPSUpsertOne {
	csuc.conflict = append(csuc.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceUSPSUpsertOne{
		create: csuc,
	}
}

type (
	// CarrierServiceUSPSUpsertOne is the builder for "upsert"-ing
	//  one CarrierServiceUSPS node.
	CarrierServiceUSPSUpsertOne struct {
		create *CarrierServiceUSPSCreate
	}

	// CarrierServiceUSPSUpsert is the "OnConflict" setter.
	CarrierServiceUSPSUpsert struct {
		*sql.UpdateSet
	}
)

// SetAPIKey sets the "api_key" field.
func (u *CarrierServiceUSPSUpsert) SetAPIKey(v carrierserviceusps.APIKey) *CarrierServiceUSPSUpsert {
	u.Set(carrierserviceusps.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierServiceUSPSUpsert) UpdateAPIKey() *CarrierServiceUSPSUpsert {
	u.SetExcluded(carrierserviceusps.FieldAPIKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierServiceUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierserviceusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceUSPSUpsertOne) UpdateNewValues() *CarrierServiceUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierserviceusps.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierServiceUSPS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierServiceUSPSUpsertOne) Ignore() *CarrierServiceUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceUSPSUpsertOne) DoNothing() *CarrierServiceUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceUSPSCreate.OnConflict
// documentation for more info.
func (u *CarrierServiceUSPSUpsertOne) Update(set func(*CarrierServiceUSPSUpsert)) *CarrierServiceUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierServiceUSPSUpsertOne) SetAPIKey(v carrierserviceusps.APIKey) *CarrierServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierServiceUSPSUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierServiceUSPSUpsertOne) UpdateAPIKey() *CarrierServiceUSPSUpsertOne {
	return u.Update(func(s *CarrierServiceUSPSUpsert) {
		s.UpdateAPIKey()
	})
}

// Exec executes the query.
func (u *CarrierServiceUSPSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceUSPSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceUSPSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierServiceUSPSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierServiceUSPSUpsertOne.ID is not supported by MySQL driver. Use CarrierServiceUSPSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierServiceUSPSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierServiceUSPSCreateBulk is the builder for creating many CarrierServiceUSPS entities in bulk.
type CarrierServiceUSPSCreateBulk struct {
	config
	err      error
	builders []*CarrierServiceUSPSCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierServiceUSPS entities in the database.
func (csucb *CarrierServiceUSPSCreateBulk) Save(ctx context.Context) ([]*CarrierServiceUSPS, error) {
	if csucb.err != nil {
		return nil, csucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(csucb.builders))
	nodes := make([]*CarrierServiceUSPS, len(csucb.builders))
	mutators := make([]Mutator, len(csucb.builders))
	for i := range csucb.builders {
		func(i int, root context.Context) {
			builder := csucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierServiceUSPSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = csucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csucb *CarrierServiceUSPSCreateBulk) SaveX(ctx context.Context) []*CarrierServiceUSPS {
	v, err := csucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csucb *CarrierServiceUSPSCreateBulk) Exec(ctx context.Context) error {
	_, err := csucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csucb *CarrierServiceUSPSCreateBulk) ExecX(ctx context.Context) {
	if err := csucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierServiceUSPS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierServiceUSPSUpsert) {
//			SetAPIKey(v+v).
//		}).
//		Exec(ctx)
func (csucb *CarrierServiceUSPSCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierServiceUSPSUpsertBulk {
	csucb.conflict = opts
	return &CarrierServiceUSPSUpsertBulk{
		create: csucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierServiceUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csucb *CarrierServiceUSPSCreateBulk) OnConflictColumns(columns ...string) *CarrierServiceUSPSUpsertBulk {
	csucb.conflict = append(csucb.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceUSPSUpsertBulk{
		create: csucb,
	}
}

// CarrierServiceUSPSUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierServiceUSPS nodes.
type CarrierServiceUSPSUpsertBulk struct {
	create *CarrierServiceUSPSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierServiceUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierserviceusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceUSPSUpsertBulk) UpdateNewValues() *CarrierServiceUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierserviceusps.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierServiceUSPS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierServiceUSPSUpsertBulk) Ignore() *CarrierServiceUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceUSPSUpsertBulk) DoNothing() *CarrierServiceUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceUSPSCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierServiceUSPSUpsertBulk) Update(set func(*CarrierServiceUSPSUpsert)) *CarrierServiceUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierServiceUSPSUpsertBulk) SetAPIKey(v carrierserviceusps.APIKey) *CarrierServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierServiceUSPSUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierServiceUSPSUpsertBulk) UpdateAPIKey() *CarrierServiceUSPSUpsertBulk {
	return u.Update(func(s *CarrierServiceUSPSUpsert) {
		s.UpdateAPIKey()
	})
}

// Exec executes the query.
func (u *CarrierServiceUSPSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierServiceUSPSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceUSPSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceUSPSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
