// Code generated by ent, DO NOT EDIT.

package hypothesistestdeliveryoptionlookup

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.HypothesisTestDeliveryOptionLookup {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOptionLookup(sql.FieldContainsFold(FieldTenantID, vc))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOption applies the HasEdge predicate on the "delivery_option" edge.
func HasDeliveryOption() predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DeliveryOptionTable, DeliveryOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionWith applies the HasEdge predicate on the "delivery_option" edge with a given conditions (other predicates).
func HasDeliveryOptionWith(preds ...predicate.DeliveryOption) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(func(s *sql.Selector) {
		step := newDeliveryOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHypothesisTestDeliveryOptionRequest applies the HasEdge predicate on the "hypothesis_test_delivery_option_request" edge.
func HasHypothesisTestDeliveryOptionRequest() predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HypothesisTestDeliveryOptionRequestTable, HypothesisTestDeliveryOptionRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHypothesisTestDeliveryOptionRequestWith applies the HasEdge predicate on the "hypothesis_test_delivery_option_request" edge with a given conditions (other predicates).
func HasHypothesisTestDeliveryOptionRequestWith(preds ...predicate.HypothesisTestDeliveryOptionRequest) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(func(s *sql.Selector) {
		step := newHypothesisTestDeliveryOptionRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HypothesisTestDeliveryOptionLookup) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HypothesisTestDeliveryOptionLookup) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HypothesisTestDeliveryOptionLookup) predicate.HypothesisTestDeliveryOptionLookup {
	return predicate.HypothesisTestDeliveryOptionLookup(sql.NotPredicates(p))
}
