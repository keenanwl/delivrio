// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionLookupQuery is the builder for querying HypothesisTestDeliveryOptionLookup entities.
type HypothesisTestDeliveryOptionLookupQuery struct {
	config
	ctx                                     *QueryContext
	order                                   []hypothesistestdeliveryoptionlookup.OrderOption
	inters                                  []Interceptor
	predicates                              []predicate.HypothesisTestDeliveryOptionLookup
	withTenant                              *TenantQuery
	withDeliveryOption                      *DeliveryOptionQuery
	withHypothesisTestDeliveryOptionRequest *HypothesisTestDeliveryOptionRequestQuery
	withFKs                                 bool
	modifiers                               []func(*sql.Selector)
	loadTotal                               []func(context.Context, []*HypothesisTestDeliveryOptionLookup) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HypothesisTestDeliveryOptionLookupQuery builder.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Where(ps ...predicate.HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionLookupQuery {
	htdolq.predicates = append(htdolq.predicates, ps...)
	return htdolq
}

// Limit the number of records to be returned by this query.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Limit(limit int) *HypothesisTestDeliveryOptionLookupQuery {
	htdolq.ctx.Limit = &limit
	return htdolq
}

// Offset to start from.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Offset(offset int) *HypothesisTestDeliveryOptionLookupQuery {
	htdolq.ctx.Offset = &offset
	return htdolq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Unique(unique bool) *HypothesisTestDeliveryOptionLookupQuery {
	htdolq.ctx.Unique = &unique
	return htdolq
}

// Order specifies how the records should be ordered.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Order(o ...hypothesistestdeliveryoptionlookup.OrderOption) *HypothesisTestDeliveryOptionLookupQuery {
	htdolq.order = append(htdolq.order, o...)
	return htdolq
}

// QueryTenant chains the current query on the "tenant" edge.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: htdolq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdolq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdolq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoptionlookup.TenantTable, hypothesistestdeliveryoptionlookup.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdolq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: htdolq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdolq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdolq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoptionlookup.DeliveryOptionTable, hypothesistestdeliveryoptionlookup.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdolq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionRequest chains the current query on the "hypothesis_test_delivery_option_request" edge.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) QueryHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: htdolq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdolq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdolq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID, selector),
			sqlgraph.To(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestTable, hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdolq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HypothesisTestDeliveryOptionLookup entity from the query.
// Returns a *NotFoundError when no HypothesisTestDeliveryOptionLookup was found.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) First(ctx context.Context) (*HypothesisTestDeliveryOptionLookup, error) {
	nodes, err := htdolq.Limit(1).All(setContextOp(ctx, htdolq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hypothesistestdeliveryoptionlookup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) FirstX(ctx context.Context) *HypothesisTestDeliveryOptionLookup {
	node, err := htdolq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HypothesisTestDeliveryOptionLookup ID from the query.
// Returns a *NotFoundError when no HypothesisTestDeliveryOptionLookup ID was found.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = htdolq.Limit(1).IDs(setContextOp(ctx, htdolq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hypothesistestdeliveryoptionlookup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := htdolq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HypothesisTestDeliveryOptionLookup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HypothesisTestDeliveryOptionLookup entity is found.
// Returns a *NotFoundError when no HypothesisTestDeliveryOptionLookup entities are found.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Only(ctx context.Context) (*HypothesisTestDeliveryOptionLookup, error) {
	nodes, err := htdolq.Limit(2).All(setContextOp(ctx, htdolq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hypothesistestdeliveryoptionlookup.Label}
	default:
		return nil, &NotSingularError{hypothesistestdeliveryoptionlookup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) OnlyX(ctx context.Context) *HypothesisTestDeliveryOptionLookup {
	node, err := htdolq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HypothesisTestDeliveryOptionLookup ID in the query.
// Returns a *NotSingularError when more than one HypothesisTestDeliveryOptionLookup ID is found.
// Returns a *NotFoundError when no entities are found.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = htdolq.Limit(2).IDs(setContextOp(ctx, htdolq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hypothesistestdeliveryoptionlookup.Label}
	default:
		err = &NotSingularError{hypothesistestdeliveryoptionlookup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := htdolq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HypothesisTestDeliveryOptionLookups.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) All(ctx context.Context) ([]*HypothesisTestDeliveryOptionLookup, error) {
	ctx = setContextOp(ctx, htdolq.ctx, ent.OpQueryAll)
	if err := htdolq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HypothesisTestDeliveryOptionLookup, *HypothesisTestDeliveryOptionLookupQuery]()
	return withInterceptors[[]*HypothesisTestDeliveryOptionLookup](ctx, htdolq, qr, htdolq.inters)
}

// AllX is like All, but panics if an error occurs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) AllX(ctx context.Context) []*HypothesisTestDeliveryOptionLookup {
	nodes, err := htdolq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HypothesisTestDeliveryOptionLookup IDs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if htdolq.ctx.Unique == nil && htdolq.path != nil {
		htdolq.Unique(true)
	}
	ctx = setContextOp(ctx, htdolq.ctx, ent.OpQueryIDs)
	if err = htdolq.Select(hypothesistestdeliveryoptionlookup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := htdolq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, htdolq.ctx, ent.OpQueryCount)
	if err := htdolq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, htdolq, querierCount[*HypothesisTestDeliveryOptionLookupQuery](), htdolq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) CountX(ctx context.Context) int {
	count, err := htdolq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, htdolq.ctx, ent.OpQueryExist)
	switch _, err := htdolq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) ExistX(ctx context.Context) bool {
	exist, err := htdolq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HypothesisTestDeliveryOptionLookupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Clone() *HypothesisTestDeliveryOptionLookupQuery {
	if htdolq == nil {
		return nil
	}
	return &HypothesisTestDeliveryOptionLookupQuery{
		config:                                  htdolq.config,
		ctx:                                     htdolq.ctx.Clone(),
		order:                                   append([]hypothesistestdeliveryoptionlookup.OrderOption{}, htdolq.order...),
		inters:                                  append([]Interceptor{}, htdolq.inters...),
		predicates:                              append([]predicate.HypothesisTestDeliveryOptionLookup{}, htdolq.predicates...),
		withTenant:                              htdolq.withTenant.Clone(),
		withDeliveryOption:                      htdolq.withDeliveryOption.Clone(),
		withHypothesisTestDeliveryOptionRequest: htdolq.withHypothesisTestDeliveryOptionRequest.Clone(),
		// clone intermediate query.
		sql:  htdolq.sql.Clone(),
		path: htdolq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) WithTenant(opts ...func(*TenantQuery)) *HypothesisTestDeliveryOptionLookupQuery {
	query := (&TenantClient{config: htdolq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdolq.withTenant = query
	return htdolq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *HypothesisTestDeliveryOptionLookupQuery {
	query := (&DeliveryOptionClient{config: htdolq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdolq.withDeliveryOption = query
	return htdolq
}

// WithHypothesisTestDeliveryOptionRequest tells the query-builder to eager-load the nodes that are connected to
// the "hypothesis_test_delivery_option_request" edge. The optional arguments are used to configure the query builder of the edge.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) WithHypothesisTestDeliveryOptionRequest(opts ...func(*HypothesisTestDeliveryOptionRequestQuery)) *HypothesisTestDeliveryOptionLookupQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: htdolq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdolq.withHypothesisTestDeliveryOptionRequest = query
	return htdolq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HypothesisTestDeliveryOptionLookup.Query().
//		GroupBy(hypothesistestdeliveryoptionlookup.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) GroupBy(field string, fields ...string) *HypothesisTestDeliveryOptionLookupGroupBy {
	htdolq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HypothesisTestDeliveryOptionLookupGroupBy{build: htdolq}
	grbuild.flds = &htdolq.ctx.Fields
	grbuild.label = hypothesistestdeliveryoptionlookup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.HypothesisTestDeliveryOptionLookup.Query().
//		Select(hypothesistestdeliveryoptionlookup.FieldTenantID).
//		Scan(ctx, &v)
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Select(fields ...string) *HypothesisTestDeliveryOptionLookupSelect {
	htdolq.ctx.Fields = append(htdolq.ctx.Fields, fields...)
	sbuild := &HypothesisTestDeliveryOptionLookupSelect{HypothesisTestDeliveryOptionLookupQuery: htdolq}
	sbuild.label = hypothesistestdeliveryoptionlookup.Label
	sbuild.flds, sbuild.scan = &htdolq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HypothesisTestDeliveryOptionLookupSelect configured with the given aggregations.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionLookupSelect {
	return htdolq.Select().Aggregate(fns...)
}

func (htdolq *HypothesisTestDeliveryOptionLookupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range htdolq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, htdolq); err != nil {
				return err
			}
		}
	}
	for _, f := range htdolq.ctx.Fields {
		if !hypothesistestdeliveryoptionlookup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if htdolq.path != nil {
		prev, err := htdolq.path(ctx)
		if err != nil {
			return err
		}
		htdolq.sql = prev
	}
	if hypothesistestdeliveryoptionlookup.Policy == nil {
		return errors.New("ent: uninitialized hypothesistestdeliveryoptionlookup.Policy (forgotten import ent/runtime?)")
	}
	if err := hypothesistestdeliveryoptionlookup.Policy.EvalQuery(ctx, htdolq); err != nil {
		return err
	}
	return nil
}

func (htdolq *HypothesisTestDeliveryOptionLookupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HypothesisTestDeliveryOptionLookup, error) {
	var (
		nodes       = []*HypothesisTestDeliveryOptionLookup{}
		withFKs     = htdolq.withFKs
		_spec       = htdolq.querySpec()
		loadedTypes = [3]bool{
			htdolq.withTenant != nil,
			htdolq.withDeliveryOption != nil,
			htdolq.withHypothesisTestDeliveryOptionRequest != nil,
		}
	)
	if htdolq.withDeliveryOption != nil || htdolq.withHypothesisTestDeliveryOptionRequest != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoptionlookup.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HypothesisTestDeliveryOptionLookup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HypothesisTestDeliveryOptionLookup{config: htdolq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(htdolq.modifiers) > 0 {
		_spec.Modifiers = htdolq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, htdolq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := htdolq.withTenant; query != nil {
		if err := htdolq.loadTenant(ctx, query, nodes, nil,
			func(n *HypothesisTestDeliveryOptionLookup, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := htdolq.withDeliveryOption; query != nil {
		if err := htdolq.loadDeliveryOption(ctx, query, nodes, nil,
			func(n *HypothesisTestDeliveryOptionLookup, e *DeliveryOption) { n.Edges.DeliveryOption = e }); err != nil {
			return nil, err
		}
	}
	if query := htdolq.withHypothesisTestDeliveryOptionRequest; query != nil {
		if err := htdolq.loadHypothesisTestDeliveryOptionRequest(ctx, query, nodes, nil,
			func(n *HypothesisTestDeliveryOptionLookup, e *HypothesisTestDeliveryOptionRequest) {
				n.Edges.HypothesisTestDeliveryOptionRequest = e
			}); err != nil {
			return nil, err
		}
	}
	for i := range htdolq.loadTotal {
		if err := htdolq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (htdolq *HypothesisTestDeliveryOptionLookupQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*HypothesisTestDeliveryOptionLookup, init func(*HypothesisTestDeliveryOptionLookup), assign func(*HypothesisTestDeliveryOptionLookup, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*HypothesisTestDeliveryOptionLookup)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*HypothesisTestDeliveryOptionLookup, init func(*HypothesisTestDeliveryOptionLookup), assign func(*HypothesisTestDeliveryOptionLookup, *DeliveryOption)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*HypothesisTestDeliveryOptionLookup)
	for i := range nodes {
		if nodes[i].hypothesis_test_delivery_option_lookup_delivery_option == nil {
			continue
		}
		fk := *nodes[i].hypothesis_test_delivery_option_lookup_delivery_option
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hypothesis_test_delivery_option_lookup_delivery_option" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) loadHypothesisTestDeliveryOptionRequest(ctx context.Context, query *HypothesisTestDeliveryOptionRequestQuery, nodes []*HypothesisTestDeliveryOptionLookup, init func(*HypothesisTestDeliveryOptionLookup), assign func(*HypothesisTestDeliveryOptionLookup, *HypothesisTestDeliveryOptionRequest)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*HypothesisTestDeliveryOptionLookup)
	for i := range nodes {
		if nodes[i].hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup == nil {
			continue
		}
		fk := *nodes[i].hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hypothesistestdeliveryoptionrequest.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (htdolq *HypothesisTestDeliveryOptionLookupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := htdolq.querySpec()
	if len(htdolq.modifiers) > 0 {
		_spec.Modifiers = htdolq.modifiers
	}
	_spec.Node.Columns = htdolq.ctx.Fields
	if len(htdolq.ctx.Fields) > 0 {
		_spec.Unique = htdolq.ctx.Unique != nil && *htdolq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, htdolq.driver, _spec)
}

func (htdolq *HypothesisTestDeliveryOptionLookupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString))
	_spec.From = htdolq.sql
	if unique := htdolq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if htdolq.path != nil {
		_spec.Unique = true
	}
	if fields := htdolq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoptionlookup.FieldID)
		for i := range fields {
			if fields[i] != hypothesistestdeliveryoptionlookup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if htdolq.withTenant != nil {
			_spec.Node.AddColumnOnce(hypothesistestdeliveryoptionlookup.FieldTenantID)
		}
	}
	if ps := htdolq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := htdolq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := htdolq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := htdolq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (htdolq *HypothesisTestDeliveryOptionLookupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(htdolq.driver.Dialect())
	t1 := builder.Table(hypothesistestdeliveryoptionlookup.Table)
	columns := htdolq.ctx.Fields
	if len(columns) == 0 {
		columns = hypothesistestdeliveryoptionlookup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if htdolq.sql != nil {
		selector = htdolq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if htdolq.ctx.Unique != nil && *htdolq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range htdolq.predicates {
		p(selector)
	}
	for _, p := range htdolq.order {
		p(selector)
	}
	if offset := htdolq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := htdolq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HypothesisTestDeliveryOptionLookupGroupBy is the group-by builder for HypothesisTestDeliveryOptionLookup entities.
type HypothesisTestDeliveryOptionLookupGroupBy struct {
	selector
	build *HypothesisTestDeliveryOptionLookupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (htdolgb *HypothesisTestDeliveryOptionLookupGroupBy) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionLookupGroupBy {
	htdolgb.fns = append(htdolgb.fns, fns...)
	return htdolgb
}

// Scan applies the selector query and scans the result into the given value.
func (htdolgb *HypothesisTestDeliveryOptionLookupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, htdolgb.build.ctx, ent.OpQueryGroupBy)
	if err := htdolgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HypothesisTestDeliveryOptionLookupQuery, *HypothesisTestDeliveryOptionLookupGroupBy](ctx, htdolgb.build, htdolgb, htdolgb.build.inters, v)
}

func (htdolgb *HypothesisTestDeliveryOptionLookupGroupBy) sqlScan(ctx context.Context, root *HypothesisTestDeliveryOptionLookupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(htdolgb.fns))
	for _, fn := range htdolgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*htdolgb.flds)+len(htdolgb.fns))
		for _, f := range *htdolgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*htdolgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htdolgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HypothesisTestDeliveryOptionLookupSelect is the builder for selecting fields of HypothesisTestDeliveryOptionLookup entities.
type HypothesisTestDeliveryOptionLookupSelect struct {
	*HypothesisTestDeliveryOptionLookupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (htdols *HypothesisTestDeliveryOptionLookupSelect) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionLookupSelect {
	htdols.fns = append(htdols.fns, fns...)
	return htdols
}

// Scan applies the selector query and scans the result into the given value.
func (htdols *HypothesisTestDeliveryOptionLookupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, htdols.ctx, ent.OpQuerySelect)
	if err := htdols.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HypothesisTestDeliveryOptionLookupQuery, *HypothesisTestDeliveryOptionLookupSelect](ctx, htdols.HypothesisTestDeliveryOptionLookupQuery, htdols, htdols.inters, v)
}

func (htdols *HypothesisTestDeliveryOptionLookupSelect) sqlScan(ctx context.Context, root *HypothesisTestDeliveryOptionLookupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(htdols.fns))
	for _, fn := range htdols.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*htdols.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htdols.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
