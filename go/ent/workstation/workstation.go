// Code generated by ent, DO NOT EDIT.

package workstation

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workstation type in the database.
	Label = "workstation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldArchivedAt holds the string denoting the archived_at field in the database.
	FieldArchivedAt = "archived_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDeviceType holds the string denoting the device_type field in the database.
	FieldDeviceType = "device_type"
	// FieldRegistrationCode holds the string denoting the registration_code field in the database.
	FieldRegistrationCode = "registration_code"
	// FieldWorkstationID holds the string denoting the workstation_id field in the database.
	FieldWorkstationID = "workstation_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastPing holds the string denoting the last_ping field in the database.
	FieldLastPing = "last_ping"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAutoPrintReceiver holds the string denoting the auto_print_receiver field in the database.
	FieldAutoPrintReceiver = "auto_print_receiver"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePrinter holds the string denoting the printer edge name in mutations.
	EdgePrinter = "printer"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeSelectedUser holds the string denoting the selected_user edge name in mutations.
	EdgeSelectedUser = "selected_user"
	// Table holds the table name of the workstation in the database.
	Table = "workstations"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "workstations"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// PrinterTable is the table that holds the printer relation/edge.
	PrinterTable = "printers"
	// PrinterInverseTable is the table name for the Printer entity.
	// It exists in this package in order to avoid circular dependency with the "printer" package.
	PrinterInverseTable = "printers"
	// PrinterColumn is the table column denoting the printer relation/edge.
	PrinterColumn = "workstation_printer"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "workstations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "workstation_user"
	// SelectedUserTable is the table that holds the selected_user relation/edge.
	SelectedUserTable = "workstations"
	// SelectedUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SelectedUserInverseTable = "users"
	// SelectedUserColumn is the table column denoting the selected_user relation/edge.
	SelectedUserColumn = "user_selected_workstation"
)

// Columns holds all SQL columns for workstation fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldArchivedAt,
	FieldName,
	FieldDeviceType,
	FieldRegistrationCode,
	FieldWorkstationID,
	FieldCreatedAt,
	FieldLastPing,
	FieldStatus,
	FieldAutoPrintReceiver,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workstations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_selected_workstation",
	"workstation_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultAutoPrintReceiver holds the default value on creation for the "auto_print_receiver" field.
	DefaultAutoPrintReceiver bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// DeviceType defines the type for the "device_type" enum field.
type DeviceType string

// DeviceTypeLabelStation is the default value of the DeviceType enum.
const DefaultDeviceType = DeviceTypeLabelStation

// DeviceType values.
const (
	DeviceTypeLabelStation DeviceType = "label_station"
	DeviceTypeApp          DeviceType = "app"
)

func (dt DeviceType) String() string {
	return string(dt)
}

// DeviceTypeValidator is a validator for the "device_type" field enum values. It is called by the builders before save.
func DeviceTypeValidator(dt DeviceType) error {
	switch dt {
	case DeviceTypeLabelStation, DeviceTypeApp:
		return nil
	default:
		return fmt.Errorf("workstation: invalid enum value for device_type field: %q", dt)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "pending"
	StatusActive   Status = "active"
	StatusOffline  Status = "offline"
	StatusDisabled Status = "disabled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusActive, StatusOffline, StatusDisabled:
		return nil
	default:
		return fmt.Errorf("workstation: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Workstation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByArchivedAt orders the results by the archived_at field.
func ByArchivedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchivedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDeviceType orders the results by the device_type field.
func ByDeviceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceType, opts...).ToFunc()
}

// ByRegistrationCode orders the results by the registration_code field.
func ByRegistrationCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationCode, opts...).ToFunc()
}

// ByWorkstationID orders the results by the workstation_id field.
func ByWorkstationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkstationID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastPing orders the results by the last_ping field.
func ByLastPing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPing, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAutoPrintReceiver orders the results by the auto_print_receiver field.
func ByAutoPrintReceiver(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoPrintReceiver, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrinterCount orders the results by printer count.
func ByPrinterCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrinterStep(), opts...)
	}
}

// ByPrinter orders the results by printer terms.
func ByPrinter(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrinterStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// BySelectedUserField orders the results by selected_user field.
func BySelectedUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectedUserStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newPrinterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrinterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PrinterTable, PrinterColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newSelectedUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectedUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SelectedUserTable, SelectedUserColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DeviceType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DeviceType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DeviceType(str)
	if err := DeviceTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DeviceType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
