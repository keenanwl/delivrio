// Code generated by ent, DO NOT EDIT.

package workstation

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldTenantID, v))
}

// ArchivedAt applies equality check predicate on the "archived_at" field. It's identical to ArchivedAtEQ.
func ArchivedAt(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldArchivedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldName, v))
}

// RegistrationCode applies equality check predicate on the "registration_code" field. It's identical to RegistrationCodeEQ.
func RegistrationCode(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldRegistrationCode, v))
}

// WorkstationID applies equality check predicate on the "workstation_id" field. It's identical to WorkstationIDEQ.
func WorkstationID(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldWorkstationID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldCreatedAt, v))
}

// LastPing applies equality check predicate on the "last_ping" field. It's identical to LastPingEQ.
func LastPing(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldLastPing, v))
}

// AutoPrintReceiver applies equality check predicate on the "auto_print_receiver" field. It's identical to AutoPrintReceiverEQ.
func AutoPrintReceiver(v bool) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldAutoPrintReceiver, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldContainsFold(FieldTenantID, vc))
}

// ArchivedAtEQ applies the EQ predicate on the "archived_at" field.
func ArchivedAtEQ(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldArchivedAt, v))
}

// ArchivedAtNEQ applies the NEQ predicate on the "archived_at" field.
func ArchivedAtNEQ(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldArchivedAt, v))
}

// ArchivedAtIn applies the In predicate on the "archived_at" field.
func ArchivedAtIn(vs ...time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldArchivedAt, vs...))
}

// ArchivedAtNotIn applies the NotIn predicate on the "archived_at" field.
func ArchivedAtNotIn(vs ...time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldArchivedAt, vs...))
}

// ArchivedAtGT applies the GT predicate on the "archived_at" field.
func ArchivedAtGT(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldGT(FieldArchivedAt, v))
}

// ArchivedAtGTE applies the GTE predicate on the "archived_at" field.
func ArchivedAtGTE(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldGTE(FieldArchivedAt, v))
}

// ArchivedAtLT applies the LT predicate on the "archived_at" field.
func ArchivedAtLT(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldLT(FieldArchivedAt, v))
}

// ArchivedAtLTE applies the LTE predicate on the "archived_at" field.
func ArchivedAtLTE(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldLTE(FieldArchivedAt, v))
}

// ArchivedAtIsNil applies the IsNil predicate on the "archived_at" field.
func ArchivedAtIsNil() predicate.Workstation {
	return predicate.Workstation(sql.FieldIsNull(FieldArchivedAt))
}

// ArchivedAtNotNil applies the NotNil predicate on the "archived_at" field.
func ArchivedAtNotNil() predicate.Workstation {
	return predicate.Workstation(sql.FieldNotNull(FieldArchivedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldContainsFold(FieldName, v))
}

// DeviceTypeEQ applies the EQ predicate on the "device_type" field.
func DeviceTypeEQ(v DeviceType) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldDeviceType, v))
}

// DeviceTypeNEQ applies the NEQ predicate on the "device_type" field.
func DeviceTypeNEQ(v DeviceType) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldDeviceType, v))
}

// DeviceTypeIn applies the In predicate on the "device_type" field.
func DeviceTypeIn(vs ...DeviceType) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldDeviceType, vs...))
}

// DeviceTypeNotIn applies the NotIn predicate on the "device_type" field.
func DeviceTypeNotIn(vs ...DeviceType) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldDeviceType, vs...))
}

// RegistrationCodeEQ applies the EQ predicate on the "registration_code" field.
func RegistrationCodeEQ(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldRegistrationCode, v))
}

// RegistrationCodeNEQ applies the NEQ predicate on the "registration_code" field.
func RegistrationCodeNEQ(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldRegistrationCode, v))
}

// RegistrationCodeIn applies the In predicate on the "registration_code" field.
func RegistrationCodeIn(vs ...string) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldRegistrationCode, vs...))
}

// RegistrationCodeNotIn applies the NotIn predicate on the "registration_code" field.
func RegistrationCodeNotIn(vs ...string) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldRegistrationCode, vs...))
}

// RegistrationCodeGT applies the GT predicate on the "registration_code" field.
func RegistrationCodeGT(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldGT(FieldRegistrationCode, v))
}

// RegistrationCodeGTE applies the GTE predicate on the "registration_code" field.
func RegistrationCodeGTE(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldGTE(FieldRegistrationCode, v))
}

// RegistrationCodeLT applies the LT predicate on the "registration_code" field.
func RegistrationCodeLT(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldLT(FieldRegistrationCode, v))
}

// RegistrationCodeLTE applies the LTE predicate on the "registration_code" field.
func RegistrationCodeLTE(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldLTE(FieldRegistrationCode, v))
}

// RegistrationCodeContains applies the Contains predicate on the "registration_code" field.
func RegistrationCodeContains(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldContains(FieldRegistrationCode, v))
}

// RegistrationCodeHasPrefix applies the HasPrefix predicate on the "registration_code" field.
func RegistrationCodeHasPrefix(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldHasPrefix(FieldRegistrationCode, v))
}

// RegistrationCodeHasSuffix applies the HasSuffix predicate on the "registration_code" field.
func RegistrationCodeHasSuffix(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldHasSuffix(FieldRegistrationCode, v))
}

// RegistrationCodeEqualFold applies the EqualFold predicate on the "registration_code" field.
func RegistrationCodeEqualFold(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldEqualFold(FieldRegistrationCode, v))
}

// RegistrationCodeContainsFold applies the ContainsFold predicate on the "registration_code" field.
func RegistrationCodeContainsFold(v string) predicate.Workstation {
	return predicate.Workstation(sql.FieldContainsFold(FieldRegistrationCode, v))
}

// WorkstationIDEQ applies the EQ predicate on the "workstation_id" field.
func WorkstationIDEQ(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldWorkstationID, v))
}

// WorkstationIDNEQ applies the NEQ predicate on the "workstation_id" field.
func WorkstationIDNEQ(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldWorkstationID, v))
}

// WorkstationIDIn applies the In predicate on the "workstation_id" field.
func WorkstationIDIn(vs ...pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldWorkstationID, vs...))
}

// WorkstationIDNotIn applies the NotIn predicate on the "workstation_id" field.
func WorkstationIDNotIn(vs ...pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldWorkstationID, vs...))
}

// WorkstationIDGT applies the GT predicate on the "workstation_id" field.
func WorkstationIDGT(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldGT(FieldWorkstationID, v))
}

// WorkstationIDGTE applies the GTE predicate on the "workstation_id" field.
func WorkstationIDGTE(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldGTE(FieldWorkstationID, v))
}

// WorkstationIDLT applies the LT predicate on the "workstation_id" field.
func WorkstationIDLT(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldLT(FieldWorkstationID, v))
}

// WorkstationIDLTE applies the LTE predicate on the "workstation_id" field.
func WorkstationIDLTE(v pulid.ID) predicate.Workstation {
	return predicate.Workstation(sql.FieldLTE(FieldWorkstationID, v))
}

// WorkstationIDContains applies the Contains predicate on the "workstation_id" field.
func WorkstationIDContains(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldContains(FieldWorkstationID, vc))
}

// WorkstationIDHasPrefix applies the HasPrefix predicate on the "workstation_id" field.
func WorkstationIDHasPrefix(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldHasPrefix(FieldWorkstationID, vc))
}

// WorkstationIDHasSuffix applies the HasSuffix predicate on the "workstation_id" field.
func WorkstationIDHasSuffix(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldHasSuffix(FieldWorkstationID, vc))
}

// WorkstationIDEqualFold applies the EqualFold predicate on the "workstation_id" field.
func WorkstationIDEqualFold(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldEqualFold(FieldWorkstationID, vc))
}

// WorkstationIDContainsFold applies the ContainsFold predicate on the "workstation_id" field.
func WorkstationIDContainsFold(v pulid.ID) predicate.Workstation {
	vc := string(v)
	return predicate.Workstation(sql.FieldContainsFold(FieldWorkstationID, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldLTE(FieldCreatedAt, v))
}

// LastPingEQ applies the EQ predicate on the "last_ping" field.
func LastPingEQ(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldLastPing, v))
}

// LastPingNEQ applies the NEQ predicate on the "last_ping" field.
func LastPingNEQ(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldLastPing, v))
}

// LastPingIn applies the In predicate on the "last_ping" field.
func LastPingIn(vs ...time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldLastPing, vs...))
}

// LastPingNotIn applies the NotIn predicate on the "last_ping" field.
func LastPingNotIn(vs ...time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldLastPing, vs...))
}

// LastPingGT applies the GT predicate on the "last_ping" field.
func LastPingGT(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldGT(FieldLastPing, v))
}

// LastPingGTE applies the GTE predicate on the "last_ping" field.
func LastPingGTE(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldGTE(FieldLastPing, v))
}

// LastPingLT applies the LT predicate on the "last_ping" field.
func LastPingLT(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldLT(FieldLastPing, v))
}

// LastPingLTE applies the LTE predicate on the "last_ping" field.
func LastPingLTE(v time.Time) predicate.Workstation {
	return predicate.Workstation(sql.FieldLTE(FieldLastPing, v))
}

// LastPingIsNil applies the IsNil predicate on the "last_ping" field.
func LastPingIsNil() predicate.Workstation {
	return predicate.Workstation(sql.FieldIsNull(FieldLastPing))
}

// LastPingNotNil applies the NotNil predicate on the "last_ping" field.
func LastPingNotNil() predicate.Workstation {
	return predicate.Workstation(sql.FieldNotNull(FieldLastPing))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Workstation {
	return predicate.Workstation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Workstation {
	return predicate.Workstation(sql.FieldNotIn(FieldStatus, vs...))
}

// AutoPrintReceiverEQ applies the EQ predicate on the "auto_print_receiver" field.
func AutoPrintReceiverEQ(v bool) predicate.Workstation {
	return predicate.Workstation(sql.FieldEQ(FieldAutoPrintReceiver, v))
}

// AutoPrintReceiverNEQ applies the NEQ predicate on the "auto_print_receiver" field.
func AutoPrintReceiverNEQ(v bool) predicate.Workstation {
	return predicate.Workstation(sql.FieldNEQ(FieldAutoPrintReceiver, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Workstation {
	return predicate.Workstation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Workstation {
	return predicate.Workstation(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrinter applies the HasEdge predicate on the "printer" edge.
func HasPrinter() predicate.Workstation {
	return predicate.Workstation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PrinterTable, PrinterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrinterWith applies the HasEdge predicate on the "printer" edge with a given conditions (other predicates).
func HasPrinterWith(preds ...predicate.Printer) predicate.Workstation {
	return predicate.Workstation(func(s *sql.Selector) {
		step := newPrinterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Workstation {
	return predicate.Workstation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Workstation {
	return predicate.Workstation(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSelectedUser applies the HasEdge predicate on the "selected_user" edge.
func HasSelectedUser() predicate.Workstation {
	return predicate.Workstation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SelectedUserTable, SelectedUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSelectedUserWith applies the HasEdge predicate on the "selected_user" edge with a given conditions (other predicates).
func HasSelectedUserWith(preds ...predicate.User) predicate.Workstation {
	return predicate.Workstation(func(s *sql.Selector) {
		step := newSelectedUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Workstation) predicate.Workstation {
	return predicate.Workstation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Workstation) predicate.Workstation {
	return predicate.Workstation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workstation) predicate.Workstation {
	return predicate.Workstation(sql.NotPredicates(p))
}
