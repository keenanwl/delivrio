// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionRequestQuery is the builder for querying HypothesisTestDeliveryOptionRequest entities.
type HypothesisTestDeliveryOptionRequestQuery struct {
	config
	ctx                                         *QueryContext
	order                                       []hypothesistestdeliveryoptionrequest.OrderOption
	inters                                      []Interceptor
	predicates                                  []predicate.HypothesisTestDeliveryOptionRequest
	withTenant                                  *TenantQuery
	withHypothesisTestDeliveryOption            *HypothesisTestDeliveryOptionQuery
	withOrder                                   *OrderQuery
	withHypothesisTestDeliveryOptionLookup      *HypothesisTestDeliveryOptionLookupQuery
	withFKs                                     bool
	modifiers                                   []func(*sql.Selector)
	loadTotal                                   []func(context.Context, []*HypothesisTestDeliveryOptionRequest) error
	withNamedHypothesisTestDeliveryOptionLookup map[string]*HypothesisTestDeliveryOptionLookupQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HypothesisTestDeliveryOptionRequestQuery builder.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Where(ps ...predicate.HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionRequestQuery {
	htdorq.predicates = append(htdorq.predicates, ps...)
	return htdorq
}

// Limit the number of records to be returned by this query.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Limit(limit int) *HypothesisTestDeliveryOptionRequestQuery {
	htdorq.ctx.Limit = &limit
	return htdorq
}

// Offset to start from.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Offset(offset int) *HypothesisTestDeliveryOptionRequestQuery {
	htdorq.ctx.Offset = &offset
	return htdorq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Unique(unique bool) *HypothesisTestDeliveryOptionRequestQuery {
	htdorq.ctx.Unique = &unique
	return htdorq
}

// Order specifies how the records should be ordered.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Order(o ...hypothesistestdeliveryoptionrequest.OrderOption) *HypothesisTestDeliveryOptionRequestQuery {
	htdorq.order = append(htdorq.order, o...)
	return htdorq
}

// QueryTenant chains the current query on the "tenant" edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: htdorq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdorq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdorq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoptionrequest.TenantTable, hypothesistestdeliveryoptionrequest.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdorq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOption chains the current query on the "hypothesis_test_delivery_option" edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) QueryHypothesisTestDeliveryOption() *HypothesisTestDeliveryOptionQuery {
	query := (&HypothesisTestDeliveryOptionClient{config: htdorq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdorq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdorq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID, selector),
			sqlgraph.To(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionTable, hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdorq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrder chains the current query on the "order" edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) QueryOrder() *OrderQuery {
	query := (&OrderClient{config: htdorq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdorq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdorq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, hypothesistestdeliveryoptionrequest.OrderTable, hypothesistestdeliveryoptionrequest.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdorq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionLookup chains the current query on the "hypothesis_test_delivery_option_lookup" edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) QueryHypothesisTestDeliveryOptionLookup() *HypothesisTestDeliveryOptionLookupQuery {
	query := (&HypothesisTestDeliveryOptionLookupClient{config: htdorq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdorq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdorq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID, selector),
			sqlgraph.To(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable, hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdorq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HypothesisTestDeliveryOptionRequest entity from the query.
// Returns a *NotFoundError when no HypothesisTestDeliveryOptionRequest was found.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) First(ctx context.Context) (*HypothesisTestDeliveryOptionRequest, error) {
	nodes, err := htdorq.Limit(1).All(setContextOp(ctx, htdorq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hypothesistestdeliveryoptionrequest.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) FirstX(ctx context.Context) *HypothesisTestDeliveryOptionRequest {
	node, err := htdorq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HypothesisTestDeliveryOptionRequest ID from the query.
// Returns a *NotFoundError when no HypothesisTestDeliveryOptionRequest ID was found.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = htdorq.Limit(1).IDs(setContextOp(ctx, htdorq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hypothesistestdeliveryoptionrequest.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := htdorq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HypothesisTestDeliveryOptionRequest entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HypothesisTestDeliveryOptionRequest entity is found.
// Returns a *NotFoundError when no HypothesisTestDeliveryOptionRequest entities are found.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Only(ctx context.Context) (*HypothesisTestDeliveryOptionRequest, error) {
	nodes, err := htdorq.Limit(2).All(setContextOp(ctx, htdorq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hypothesistestdeliveryoptionrequest.Label}
	default:
		return nil, &NotSingularError{hypothesistestdeliveryoptionrequest.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) OnlyX(ctx context.Context) *HypothesisTestDeliveryOptionRequest {
	node, err := htdorq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HypothesisTestDeliveryOptionRequest ID in the query.
// Returns a *NotSingularError when more than one HypothesisTestDeliveryOptionRequest ID is found.
// Returns a *NotFoundError when no entities are found.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = htdorq.Limit(2).IDs(setContextOp(ctx, htdorq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hypothesistestdeliveryoptionrequest.Label}
	default:
		err = &NotSingularError{hypothesistestdeliveryoptionrequest.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := htdorq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HypothesisTestDeliveryOptionRequests.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) All(ctx context.Context) ([]*HypothesisTestDeliveryOptionRequest, error) {
	ctx = setContextOp(ctx, htdorq.ctx, ent.OpQueryAll)
	if err := htdorq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HypothesisTestDeliveryOptionRequest, *HypothesisTestDeliveryOptionRequestQuery]()
	return withInterceptors[[]*HypothesisTestDeliveryOptionRequest](ctx, htdorq, qr, htdorq.inters)
}

// AllX is like All, but panics if an error occurs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) AllX(ctx context.Context) []*HypothesisTestDeliveryOptionRequest {
	nodes, err := htdorq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HypothesisTestDeliveryOptionRequest IDs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if htdorq.ctx.Unique == nil && htdorq.path != nil {
		htdorq.Unique(true)
	}
	ctx = setContextOp(ctx, htdorq.ctx, ent.OpQueryIDs)
	if err = htdorq.Select(hypothesistestdeliveryoptionrequest.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := htdorq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, htdorq.ctx, ent.OpQueryCount)
	if err := htdorq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, htdorq, querierCount[*HypothesisTestDeliveryOptionRequestQuery](), htdorq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) CountX(ctx context.Context) int {
	count, err := htdorq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, htdorq.ctx, ent.OpQueryExist)
	switch _, err := htdorq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) ExistX(ctx context.Context) bool {
	exist, err := htdorq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HypothesisTestDeliveryOptionRequestQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Clone() *HypothesisTestDeliveryOptionRequestQuery {
	if htdorq == nil {
		return nil
	}
	return &HypothesisTestDeliveryOptionRequestQuery{
		config:                                 htdorq.config,
		ctx:                                    htdorq.ctx.Clone(),
		order:                                  append([]hypothesistestdeliveryoptionrequest.OrderOption{}, htdorq.order...),
		inters:                                 append([]Interceptor{}, htdorq.inters...),
		predicates:                             append([]predicate.HypothesisTestDeliveryOptionRequest{}, htdorq.predicates...),
		withTenant:                             htdorq.withTenant.Clone(),
		withHypothesisTestDeliveryOption:       htdorq.withHypothesisTestDeliveryOption.Clone(),
		withOrder:                              htdorq.withOrder.Clone(),
		withHypothesisTestDeliveryOptionLookup: htdorq.withHypothesisTestDeliveryOptionLookup.Clone(),
		// clone intermediate query.
		sql:  htdorq.sql.Clone(),
		path: htdorq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) WithTenant(opts ...func(*TenantQuery)) *HypothesisTestDeliveryOptionRequestQuery {
	query := (&TenantClient{config: htdorq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdorq.withTenant = query
	return htdorq
}

// WithHypothesisTestDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "hypothesis_test_delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) WithHypothesisTestDeliveryOption(opts ...func(*HypothesisTestDeliveryOptionQuery)) *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionClient{config: htdorq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdorq.withHypothesisTestDeliveryOption = query
	return htdorq
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) WithOrder(opts ...func(*OrderQuery)) *HypothesisTestDeliveryOptionRequestQuery {
	query := (&OrderClient{config: htdorq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdorq.withOrder = query
	return htdorq
}

// WithHypothesisTestDeliveryOptionLookup tells the query-builder to eager-load the nodes that are connected to
// the "hypothesis_test_delivery_option_lookup" edge. The optional arguments are used to configure the query builder of the edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) WithHypothesisTestDeliveryOptionLookup(opts ...func(*HypothesisTestDeliveryOptionLookupQuery)) *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionLookupClient{config: htdorq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdorq.withHypothesisTestDeliveryOptionLookup = query
	return htdorq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HypothesisTestDeliveryOptionRequest.Query().
//		GroupBy(hypothesistestdeliveryoptionrequest.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) GroupBy(field string, fields ...string) *HypothesisTestDeliveryOptionRequestGroupBy {
	htdorq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HypothesisTestDeliveryOptionRequestGroupBy{build: htdorq}
	grbuild.flds = &htdorq.ctx.Fields
	grbuild.label = hypothesistestdeliveryoptionrequest.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.HypothesisTestDeliveryOptionRequest.Query().
//		Select(hypothesistestdeliveryoptionrequest.FieldTenantID).
//		Scan(ctx, &v)
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Select(fields ...string) *HypothesisTestDeliveryOptionRequestSelect {
	htdorq.ctx.Fields = append(htdorq.ctx.Fields, fields...)
	sbuild := &HypothesisTestDeliveryOptionRequestSelect{HypothesisTestDeliveryOptionRequestQuery: htdorq}
	sbuild.label = hypothesistestdeliveryoptionrequest.Label
	sbuild.flds, sbuild.scan = &htdorq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HypothesisTestDeliveryOptionRequestSelect configured with the given aggregations.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionRequestSelect {
	return htdorq.Select().Aggregate(fns...)
}

func (htdorq *HypothesisTestDeliveryOptionRequestQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range htdorq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, htdorq); err != nil {
				return err
			}
		}
	}
	for _, f := range htdorq.ctx.Fields {
		if !hypothesistestdeliveryoptionrequest.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if htdorq.path != nil {
		prev, err := htdorq.path(ctx)
		if err != nil {
			return err
		}
		htdorq.sql = prev
	}
	if hypothesistestdeliveryoptionrequest.Policy == nil {
		return errors.New("ent: uninitialized hypothesistestdeliveryoptionrequest.Policy (forgotten import ent/runtime?)")
	}
	if err := hypothesistestdeliveryoptionrequest.Policy.EvalQuery(ctx, htdorq); err != nil {
		return err
	}
	return nil
}

func (htdorq *HypothesisTestDeliveryOptionRequestQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HypothesisTestDeliveryOptionRequest, error) {
	var (
		nodes       = []*HypothesisTestDeliveryOptionRequest{}
		withFKs     = htdorq.withFKs
		_spec       = htdorq.querySpec()
		loadedTypes = [4]bool{
			htdorq.withTenant != nil,
			htdorq.withHypothesisTestDeliveryOption != nil,
			htdorq.withOrder != nil,
			htdorq.withHypothesisTestDeliveryOptionLookup != nil,
		}
	)
	if htdorq.withHypothesisTestDeliveryOption != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoptionrequest.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HypothesisTestDeliveryOptionRequest).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HypothesisTestDeliveryOptionRequest{config: htdorq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(htdorq.modifiers) > 0 {
		_spec.Modifiers = htdorq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, htdorq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := htdorq.withTenant; query != nil {
		if err := htdorq.loadTenant(ctx, query, nodes, nil,
			func(n *HypothesisTestDeliveryOptionRequest, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := htdorq.withHypothesisTestDeliveryOption; query != nil {
		if err := htdorq.loadHypothesisTestDeliveryOption(ctx, query, nodes, nil,
			func(n *HypothesisTestDeliveryOptionRequest, e *HypothesisTestDeliveryOption) {
				n.Edges.HypothesisTestDeliveryOption = e
			}); err != nil {
			return nil, err
		}
	}
	if query := htdorq.withOrder; query != nil {
		if err := htdorq.loadOrder(ctx, query, nodes, nil,
			func(n *HypothesisTestDeliveryOptionRequest, e *Order) { n.Edges.Order = e }); err != nil {
			return nil, err
		}
	}
	if query := htdorq.withHypothesisTestDeliveryOptionLookup; query != nil {
		if err := htdorq.loadHypothesisTestDeliveryOptionLookup(ctx, query, nodes,
			func(n *HypothesisTestDeliveryOptionRequest) {
				n.Edges.HypothesisTestDeliveryOptionLookup = []*HypothesisTestDeliveryOptionLookup{}
			},
			func(n *HypothesisTestDeliveryOptionRequest, e *HypothesisTestDeliveryOptionLookup) {
				n.Edges.HypothesisTestDeliveryOptionLookup = append(n.Edges.HypothesisTestDeliveryOptionLookup, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range htdorq.withNamedHypothesisTestDeliveryOptionLookup {
		if err := htdorq.loadHypothesisTestDeliveryOptionLookup(ctx, query, nodes,
			func(n *HypothesisTestDeliveryOptionRequest) { n.appendNamedHypothesisTestDeliveryOptionLookup(name) },
			func(n *HypothesisTestDeliveryOptionRequest, e *HypothesisTestDeliveryOptionLookup) {
				n.appendNamedHypothesisTestDeliveryOptionLookup(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range htdorq.loadTotal {
		if err := htdorq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (htdorq *HypothesisTestDeliveryOptionRequestQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*HypothesisTestDeliveryOptionRequest, init func(*HypothesisTestDeliveryOptionRequest), assign func(*HypothesisTestDeliveryOptionRequest, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*HypothesisTestDeliveryOptionRequest)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) loadHypothesisTestDeliveryOption(ctx context.Context, query *HypothesisTestDeliveryOptionQuery, nodes []*HypothesisTestDeliveryOptionRequest, init func(*HypothesisTestDeliveryOptionRequest), assign func(*HypothesisTestDeliveryOptionRequest, *HypothesisTestDeliveryOption)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*HypothesisTestDeliveryOptionRequest)
	for i := range nodes {
		if nodes[i].hypothesis_test_delivery_option_request_hypothesis_test_delivery_option == nil {
			continue
		}
		fk := *nodes[i].hypothesis_test_delivery_option_request_hypothesis_test_delivery_option
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hypothesistestdeliveryoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) loadOrder(ctx context.Context, query *OrderQuery, nodes []*HypothesisTestDeliveryOptionRequest, init func(*HypothesisTestDeliveryOptionRequest), assign func(*HypothesisTestDeliveryOptionRequest, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*HypothesisTestDeliveryOptionRequest)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hypothesistestdeliveryoptionrequest.OrderColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hypothesis_test_delivery_option_request_order
		if fk == nil {
			return fmt.Errorf(`foreign-key "hypothesis_test_delivery_option_request_order" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hypothesis_test_delivery_option_request_order" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) loadHypothesisTestDeliveryOptionLookup(ctx context.Context, query *HypothesisTestDeliveryOptionLookupQuery, nodes []*HypothesisTestDeliveryOptionRequest, init func(*HypothesisTestDeliveryOptionRequest), assign func(*HypothesisTestDeliveryOptionRequest, *HypothesisTestDeliveryOptionLookup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*HypothesisTestDeliveryOptionRequest)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HypothesisTestDeliveryOptionLookup(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup
		if fk == nil {
			return fmt.Errorf(`foreign-key "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (htdorq *HypothesisTestDeliveryOptionRequestQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := htdorq.querySpec()
	if len(htdorq.modifiers) > 0 {
		_spec.Modifiers = htdorq.modifiers
	}
	_spec.Node.Columns = htdorq.ctx.Fields
	if len(htdorq.ctx.Fields) > 0 {
		_spec.Unique = htdorq.ctx.Unique != nil && *htdorq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, htdorq.driver, _spec)
}

func (htdorq *HypothesisTestDeliveryOptionRequestQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString))
	_spec.From = htdorq.sql
	if unique := htdorq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if htdorq.path != nil {
		_spec.Unique = true
	}
	if fields := htdorq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoptionrequest.FieldID)
		for i := range fields {
			if fields[i] != hypothesistestdeliveryoptionrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if htdorq.withTenant != nil {
			_spec.Node.AddColumnOnce(hypothesistestdeliveryoptionrequest.FieldTenantID)
		}
	}
	if ps := htdorq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := htdorq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := htdorq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := htdorq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (htdorq *HypothesisTestDeliveryOptionRequestQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(htdorq.driver.Dialect())
	t1 := builder.Table(hypothesistestdeliveryoptionrequest.Table)
	columns := htdorq.ctx.Fields
	if len(columns) == 0 {
		columns = hypothesistestdeliveryoptionrequest.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if htdorq.sql != nil {
		selector = htdorq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if htdorq.ctx.Unique != nil && *htdorq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range htdorq.predicates {
		p(selector)
	}
	for _, p := range htdorq.order {
		p(selector)
	}
	if offset := htdorq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := htdorq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedHypothesisTestDeliveryOptionLookup tells the query-builder to eager-load the nodes that are connected to the "hypothesis_test_delivery_option_lookup"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) WithNamedHypothesisTestDeliveryOptionLookup(name string, opts ...func(*HypothesisTestDeliveryOptionLookupQuery)) *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionLookupClient{config: htdorq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if htdorq.withNamedHypothesisTestDeliveryOptionLookup == nil {
		htdorq.withNamedHypothesisTestDeliveryOptionLookup = make(map[string]*HypothesisTestDeliveryOptionLookupQuery)
	}
	htdorq.withNamedHypothesisTestDeliveryOptionLookup[name] = query
	return htdorq
}

// HypothesisTestDeliveryOptionRequestGroupBy is the group-by builder for HypothesisTestDeliveryOptionRequest entities.
type HypothesisTestDeliveryOptionRequestGroupBy struct {
	selector
	build *HypothesisTestDeliveryOptionRequestQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (htdorgb *HypothesisTestDeliveryOptionRequestGroupBy) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionRequestGroupBy {
	htdorgb.fns = append(htdorgb.fns, fns...)
	return htdorgb
}

// Scan applies the selector query and scans the result into the given value.
func (htdorgb *HypothesisTestDeliveryOptionRequestGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, htdorgb.build.ctx, ent.OpQueryGroupBy)
	if err := htdorgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HypothesisTestDeliveryOptionRequestQuery, *HypothesisTestDeliveryOptionRequestGroupBy](ctx, htdorgb.build, htdorgb, htdorgb.build.inters, v)
}

func (htdorgb *HypothesisTestDeliveryOptionRequestGroupBy) sqlScan(ctx context.Context, root *HypothesisTestDeliveryOptionRequestQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(htdorgb.fns))
	for _, fn := range htdorgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*htdorgb.flds)+len(htdorgb.fns))
		for _, f := range *htdorgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*htdorgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htdorgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HypothesisTestDeliveryOptionRequestSelect is the builder for selecting fields of HypothesisTestDeliveryOptionRequest entities.
type HypothesisTestDeliveryOptionRequestSelect struct {
	*HypothesisTestDeliveryOptionRequestQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (htdors *HypothesisTestDeliveryOptionRequestSelect) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionRequestSelect {
	htdors.fns = append(htdors.fns, fns...)
	return htdors
}

// Scan applies the selector query and scans the result into the given value.
func (htdors *HypothesisTestDeliveryOptionRequestSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, htdors.ctx, ent.OpQuerySelect)
	if err := htdors.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HypothesisTestDeliveryOptionRequestQuery, *HypothesisTestDeliveryOptionRequestSelect](ctx, htdors.HypothesisTestDeliveryOptionRequestQuery, htdors, htdors.inters, v)
}

func (htdors *HypothesisTestDeliveryOptionRequestSelect) sqlScan(ctx context.Context, root *HypothesisTestDeliveryOptionRequestQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(htdors.fns))
	for _, fn := range htdors.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*htdors.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htdors.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
