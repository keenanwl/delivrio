// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// BodyHTML holds the value of the "body_html" field.
	BodyHTML string `json:"body_html,omitempty"`
	// Status holds the value of the "status" field.
	Status product.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges        ProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ProductTags holds the value of the product_tags edge.
	ProductTags []*ProductTag `json:"product_tags,omitempty"`
	// ProductVariant holds the value of the product_variant edge.
	ProductVariant []*ProductVariant `json:"product_variant,omitempty"`
	// ProductImage holds the value of the product_image edge.
	ProductImage []*ProductImage `json:"product_image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedProductTags    map[string][]*ProductTag
	namedProductVariant map[string][]*ProductVariant
	namedProductImage   map[string][]*ProductImage
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ProductTagsOrErr returns the ProductTags value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductTagsOrErr() ([]*ProductTag, error) {
	if e.loadedTypes[1] {
		return e.ProductTags, nil
	}
	return nil, &NotLoadedError{edge: "product_tags"}
}

// ProductVariantOrErr returns the ProductVariant value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductVariantOrErr() ([]*ProductVariant, error) {
	if e.loadedTypes[2] {
		return e.ProductVariant, nil
	}
	return nil, &NotLoadedError{edge: "product_variant"}
}

// ProductImageOrErr returns the ProductImage value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductImageOrErr() ([]*ProductImage, error) {
	if e.loadedTypes[3] {
		return e.ProductImage, nil
	}
	return nil, &NotLoadedError{edge: "product_image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID, product.FieldTenantID:
			values[i] = new(pulid.ID)
		case product.FieldExternalID, product.FieldTitle, product.FieldBodyHTML, product.FieldStatus:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case product.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pr.TenantID = *value
			}
		case product.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				pr.ExternalID = value.String
			}
		case product.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pr.Title = value.String
			}
		case product.FieldBodyHTML:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body_html", values[i])
			} else if value.Valid {
				pr.BodyHTML = value.String
			}
		case product.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = product.Status(value.String)
			}
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Product entity.
func (pr *Product) QueryTenant() *TenantQuery {
	return NewProductClient(pr.config).QueryTenant(pr)
}

// QueryProductTags queries the "product_tags" edge of the Product entity.
func (pr *Product) QueryProductTags() *ProductTagQuery {
	return NewProductClient(pr.config).QueryProductTags(pr)
}

// QueryProductVariant queries the "product_variant" edge of the Product entity.
func (pr *Product) QueryProductVariant() *ProductVariantQuery {
	return NewProductClient(pr.config).QueryProductVariant(pr)
}

// QueryProductImage queries the "product_image" edge of the Product entity.
func (pr *Product) QueryProductImage() *ProductImageQuery {
	return NewProductClient(pr.config).QueryProductImage(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(pr.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pr.Title)
	builder.WriteString(", ")
	builder.WriteString("body_html=")
	builder.WriteString(pr.BodyHTML)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProductTags returns the ProductTags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Product) NamedProductTags(name string) ([]*ProductTag, error) {
	if pr.Edges.namedProductTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedProductTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Product) appendNamedProductTags(name string, edges ...*ProductTag) {
	if pr.Edges.namedProductTags == nil {
		pr.Edges.namedProductTags = make(map[string][]*ProductTag)
	}
	if len(edges) == 0 {
		pr.Edges.namedProductTags[name] = []*ProductTag{}
	} else {
		pr.Edges.namedProductTags[name] = append(pr.Edges.namedProductTags[name], edges...)
	}
}

// NamedProductVariant returns the ProductVariant named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Product) NamedProductVariant(name string) ([]*ProductVariant, error) {
	if pr.Edges.namedProductVariant == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedProductVariant[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Product) appendNamedProductVariant(name string, edges ...*ProductVariant) {
	if pr.Edges.namedProductVariant == nil {
		pr.Edges.namedProductVariant = make(map[string][]*ProductVariant)
	}
	if len(edges) == 0 {
		pr.Edges.namedProductVariant[name] = []*ProductVariant{}
	} else {
		pr.Edges.namedProductVariant[name] = append(pr.Edges.namedProductVariant[name], edges...)
	}
}

// NamedProductImage returns the ProductImage named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Product) NamedProductImage(name string) ([]*ProductImage, error) {
	if pr.Edges.namedProductImage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedProductImage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Product) appendNamedProductImage(name string, edges ...*ProductImage) {
	if pr.Edges.namedProductImage == nil {
		pr.Edges.namedProductImage = make(map[string][]*ProductImage)
	}
	if len(edges) == 0 {
		pr.Edges.namedProductImage[name] = []*ProductImage{}
	} else {
		pr.Edges.namedProductImage[name] = append(pr.Edges.namedProductImage[name], edges...)
	}
}

// Products is a parsable slice of Product.
type Products []*Product
