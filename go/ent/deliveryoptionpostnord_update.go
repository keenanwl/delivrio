// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionPostNordUpdate is the builder for updating DeliveryOptionPostNord entities.
type DeliveryOptionPostNordUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryOptionPostNordMutation
}

// Where appends a list predicates to the DeliveryOptionPostNordUpdate builder.
func (dopnu *DeliveryOptionPostNordUpdate) Where(ps ...predicate.DeliveryOptionPostNord) *DeliveryOptionPostNordUpdate {
	dopnu.mutation.Where(ps...)
	return dopnu
}

// SetTenantID sets the "tenant_id" field.
func (dopnu *DeliveryOptionPostNordUpdate) SetTenantID(pu pulid.ID) *DeliveryOptionPostNordUpdate {
	dopnu.mutation.SetTenantID(pu)
	return dopnu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dopnu *DeliveryOptionPostNordUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionPostNordUpdate {
	if pu != nil {
		dopnu.SetTenantID(*pu)
	}
	return dopnu
}

// SetFormatZpl sets the "format_zpl" field.
func (dopnu *DeliveryOptionPostNordUpdate) SetFormatZpl(b bool) *DeliveryOptionPostNordUpdate {
	dopnu.mutation.SetFormatZpl(b)
	return dopnu
}

// SetNillableFormatZpl sets the "format_zpl" field if the given value is not nil.
func (dopnu *DeliveryOptionPostNordUpdate) SetNillableFormatZpl(b *bool) *DeliveryOptionPostNordUpdate {
	if b != nil {
		dopnu.SetFormatZpl(*b)
	}
	return dopnu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dopnu *DeliveryOptionPostNordUpdate) SetTenant(t *Tenant) *DeliveryOptionPostNordUpdate {
	return dopnu.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dopnu *DeliveryOptionPostNordUpdate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionPostNordUpdate {
	dopnu.mutation.SetDeliveryOptionID(id)
	return dopnu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dopnu *DeliveryOptionPostNordUpdate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionPostNordUpdate {
	return dopnu.SetDeliveryOptionID(d.ID)
}

// AddCarrierAddServPostNordIDs adds the "carrier_add_serv_post_nord" edge to the CarrierAdditionalServicePostNord entity by IDs.
func (dopnu *DeliveryOptionPostNordUpdate) AddCarrierAddServPostNordIDs(ids ...pulid.ID) *DeliveryOptionPostNordUpdate {
	dopnu.mutation.AddCarrierAddServPostNordIDs(ids...)
	return dopnu
}

// AddCarrierAddServPostNord adds the "carrier_add_serv_post_nord" edges to the CarrierAdditionalServicePostNord entity.
func (dopnu *DeliveryOptionPostNordUpdate) AddCarrierAddServPostNord(c ...*CarrierAdditionalServicePostNord) *DeliveryOptionPostNordUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dopnu.AddCarrierAddServPostNordIDs(ids...)
}

// Mutation returns the DeliveryOptionPostNordMutation object of the builder.
func (dopnu *DeliveryOptionPostNordUpdate) Mutation() *DeliveryOptionPostNordMutation {
	return dopnu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dopnu *DeliveryOptionPostNordUpdate) ClearTenant() *DeliveryOptionPostNordUpdate {
	dopnu.mutation.ClearTenant()
	return dopnu
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (dopnu *DeliveryOptionPostNordUpdate) ClearDeliveryOption() *DeliveryOptionPostNordUpdate {
	dopnu.mutation.ClearDeliveryOption()
	return dopnu
}

// ClearCarrierAddServPostNord clears all "carrier_add_serv_post_nord" edges to the CarrierAdditionalServicePostNord entity.
func (dopnu *DeliveryOptionPostNordUpdate) ClearCarrierAddServPostNord() *DeliveryOptionPostNordUpdate {
	dopnu.mutation.ClearCarrierAddServPostNord()
	return dopnu
}

// RemoveCarrierAddServPostNordIDs removes the "carrier_add_serv_post_nord" edge to CarrierAdditionalServicePostNord entities by IDs.
func (dopnu *DeliveryOptionPostNordUpdate) RemoveCarrierAddServPostNordIDs(ids ...pulid.ID) *DeliveryOptionPostNordUpdate {
	dopnu.mutation.RemoveCarrierAddServPostNordIDs(ids...)
	return dopnu
}

// RemoveCarrierAddServPostNord removes "carrier_add_serv_post_nord" edges to CarrierAdditionalServicePostNord entities.
func (dopnu *DeliveryOptionPostNordUpdate) RemoveCarrierAddServPostNord(c ...*CarrierAdditionalServicePostNord) *DeliveryOptionPostNordUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dopnu.RemoveCarrierAddServPostNordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dopnu *DeliveryOptionPostNordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dopnu.sqlSave, dopnu.mutation, dopnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dopnu *DeliveryOptionPostNordUpdate) SaveX(ctx context.Context) int {
	affected, err := dopnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dopnu *DeliveryOptionPostNordUpdate) Exec(ctx context.Context) error {
	_, err := dopnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dopnu *DeliveryOptionPostNordUpdate) ExecX(ctx context.Context) {
	if err := dopnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dopnu *DeliveryOptionPostNordUpdate) check() error {
	if dopnu.mutation.TenantCleared() && len(dopnu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionPostNord.tenant"`)
	}
	if dopnu.mutation.DeliveryOptionCleared() && len(dopnu.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionPostNord.delivery_option"`)
	}
	return nil
}

func (dopnu *DeliveryOptionPostNordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dopnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptionpostnord.Table, deliveryoptionpostnord.Columns, sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString))
	if ps := dopnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dopnu.mutation.FormatZpl(); ok {
		_spec.SetField(deliveryoptionpostnord.FieldFormatZpl, field.TypeBool, value)
	}
	if dopnu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionpostnord.TenantTable,
			Columns: []string{deliveryoptionpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dopnu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionpostnord.TenantTable,
			Columns: []string{deliveryoptionpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dopnu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionpostnord.DeliveryOptionTable,
			Columns: []string{deliveryoptionpostnord.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dopnu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionpostnord.DeliveryOptionTable,
			Columns: []string{deliveryoptionpostnord.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dopnu.mutation.CarrierAddServPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionpostnord.CarrierAddServPostNordTable,
			Columns: deliveryoptionpostnord.CarrierAddServPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dopnu.mutation.RemovedCarrierAddServPostNordIDs(); len(nodes) > 0 && !dopnu.mutation.CarrierAddServPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionpostnord.CarrierAddServPostNordTable,
			Columns: deliveryoptionpostnord.CarrierAddServPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dopnu.mutation.CarrierAddServPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionpostnord.CarrierAddServPostNordTable,
			Columns: deliveryoptionpostnord.CarrierAddServPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dopnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptionpostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dopnu.mutation.done = true
	return n, nil
}

// DeliveryOptionPostNordUpdateOne is the builder for updating a single DeliveryOptionPostNord entity.
type DeliveryOptionPostNordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryOptionPostNordMutation
}

// SetTenantID sets the "tenant_id" field.
func (dopnuo *DeliveryOptionPostNordUpdateOne) SetTenantID(pu pulid.ID) *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.SetTenantID(pu)
	return dopnuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dopnuo *DeliveryOptionPostNordUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionPostNordUpdateOne {
	if pu != nil {
		dopnuo.SetTenantID(*pu)
	}
	return dopnuo
}

// SetFormatZpl sets the "format_zpl" field.
func (dopnuo *DeliveryOptionPostNordUpdateOne) SetFormatZpl(b bool) *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.SetFormatZpl(b)
	return dopnuo
}

// SetNillableFormatZpl sets the "format_zpl" field if the given value is not nil.
func (dopnuo *DeliveryOptionPostNordUpdateOne) SetNillableFormatZpl(b *bool) *DeliveryOptionPostNordUpdateOne {
	if b != nil {
		dopnuo.SetFormatZpl(*b)
	}
	return dopnuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dopnuo *DeliveryOptionPostNordUpdateOne) SetTenant(t *Tenant) *DeliveryOptionPostNordUpdateOne {
	return dopnuo.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dopnuo *DeliveryOptionPostNordUpdateOne) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.SetDeliveryOptionID(id)
	return dopnuo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dopnuo *DeliveryOptionPostNordUpdateOne) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionPostNordUpdateOne {
	return dopnuo.SetDeliveryOptionID(d.ID)
}

// AddCarrierAddServPostNordIDs adds the "carrier_add_serv_post_nord" edge to the CarrierAdditionalServicePostNord entity by IDs.
func (dopnuo *DeliveryOptionPostNordUpdateOne) AddCarrierAddServPostNordIDs(ids ...pulid.ID) *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.AddCarrierAddServPostNordIDs(ids...)
	return dopnuo
}

// AddCarrierAddServPostNord adds the "carrier_add_serv_post_nord" edges to the CarrierAdditionalServicePostNord entity.
func (dopnuo *DeliveryOptionPostNordUpdateOne) AddCarrierAddServPostNord(c ...*CarrierAdditionalServicePostNord) *DeliveryOptionPostNordUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dopnuo.AddCarrierAddServPostNordIDs(ids...)
}

// Mutation returns the DeliveryOptionPostNordMutation object of the builder.
func (dopnuo *DeliveryOptionPostNordUpdateOne) Mutation() *DeliveryOptionPostNordMutation {
	return dopnuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dopnuo *DeliveryOptionPostNordUpdateOne) ClearTenant() *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.ClearTenant()
	return dopnuo
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (dopnuo *DeliveryOptionPostNordUpdateOne) ClearDeliveryOption() *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.ClearDeliveryOption()
	return dopnuo
}

// ClearCarrierAddServPostNord clears all "carrier_add_serv_post_nord" edges to the CarrierAdditionalServicePostNord entity.
func (dopnuo *DeliveryOptionPostNordUpdateOne) ClearCarrierAddServPostNord() *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.ClearCarrierAddServPostNord()
	return dopnuo
}

// RemoveCarrierAddServPostNordIDs removes the "carrier_add_serv_post_nord" edge to CarrierAdditionalServicePostNord entities by IDs.
func (dopnuo *DeliveryOptionPostNordUpdateOne) RemoveCarrierAddServPostNordIDs(ids ...pulid.ID) *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.RemoveCarrierAddServPostNordIDs(ids...)
	return dopnuo
}

// RemoveCarrierAddServPostNord removes "carrier_add_serv_post_nord" edges to CarrierAdditionalServicePostNord entities.
func (dopnuo *DeliveryOptionPostNordUpdateOne) RemoveCarrierAddServPostNord(c ...*CarrierAdditionalServicePostNord) *DeliveryOptionPostNordUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dopnuo.RemoveCarrierAddServPostNordIDs(ids...)
}

// Where appends a list predicates to the DeliveryOptionPostNordUpdate builder.
func (dopnuo *DeliveryOptionPostNordUpdateOne) Where(ps ...predicate.DeliveryOptionPostNord) *DeliveryOptionPostNordUpdateOne {
	dopnuo.mutation.Where(ps...)
	return dopnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dopnuo *DeliveryOptionPostNordUpdateOne) Select(field string, fields ...string) *DeliveryOptionPostNordUpdateOne {
	dopnuo.fields = append([]string{field}, fields...)
	return dopnuo
}

// Save executes the query and returns the updated DeliveryOptionPostNord entity.
func (dopnuo *DeliveryOptionPostNordUpdateOne) Save(ctx context.Context) (*DeliveryOptionPostNord, error) {
	return withHooks(ctx, dopnuo.sqlSave, dopnuo.mutation, dopnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dopnuo *DeliveryOptionPostNordUpdateOne) SaveX(ctx context.Context) *DeliveryOptionPostNord {
	node, err := dopnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dopnuo *DeliveryOptionPostNordUpdateOne) Exec(ctx context.Context) error {
	_, err := dopnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dopnuo *DeliveryOptionPostNordUpdateOne) ExecX(ctx context.Context) {
	if err := dopnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dopnuo *DeliveryOptionPostNordUpdateOne) check() error {
	if dopnuo.mutation.TenantCleared() && len(dopnuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionPostNord.tenant"`)
	}
	if dopnuo.mutation.DeliveryOptionCleared() && len(dopnuo.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionPostNord.delivery_option"`)
	}
	return nil
}

func (dopnuo *DeliveryOptionPostNordUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryOptionPostNord, err error) {
	if err := dopnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptionpostnord.Table, deliveryoptionpostnord.Columns, sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString))
	id, ok := dopnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryOptionPostNord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dopnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptionpostnord.FieldID)
		for _, f := range fields {
			if !deliveryoptionpostnord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryoptionpostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dopnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dopnuo.mutation.FormatZpl(); ok {
		_spec.SetField(deliveryoptionpostnord.FieldFormatZpl, field.TypeBool, value)
	}
	if dopnuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionpostnord.TenantTable,
			Columns: []string{deliveryoptionpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dopnuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionpostnord.TenantTable,
			Columns: []string{deliveryoptionpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dopnuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionpostnord.DeliveryOptionTable,
			Columns: []string{deliveryoptionpostnord.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dopnuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionpostnord.DeliveryOptionTable,
			Columns: []string{deliveryoptionpostnord.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dopnuo.mutation.CarrierAddServPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionpostnord.CarrierAddServPostNordTable,
			Columns: deliveryoptionpostnord.CarrierAddServPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dopnuo.mutation.RemovedCarrierAddServPostNordIDs(); len(nodes) > 0 && !dopnuo.mutation.CarrierAddServPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionpostnord.CarrierAddServPostNordTable,
			Columns: deliveryoptionpostnord.CarrierAddServPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dopnuo.mutation.CarrierAddServPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionpostnord.CarrierAddServPostNordTable,
			Columns: deliveryoptionpostnord.CarrierAddServPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryOptionPostNord{config: dopnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dopnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptionpostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dopnuo.mutation.done = true
	return _node, nil
}
