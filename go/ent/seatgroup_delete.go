// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroup"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatGroupDelete is the builder for deleting a SeatGroup entity.
type SeatGroupDelete struct {
	config
	hooks    []Hook
	mutation *SeatGroupMutation
}

// Where appends a list predicates to the SeatGroupDelete builder.
func (sgd *SeatGroupDelete) Where(ps ...predicate.SeatGroup) *SeatGroupDelete {
	sgd.mutation.Where(ps...)
	return sgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sgd *SeatGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sgd.sqlExec, sgd.mutation, sgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sgd *SeatGroupDelete) ExecX(ctx context.Context) int {
	n, err := sgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sgd *SeatGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(seatgroup.Table, sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString))
	if ps := sgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sgd.mutation.done = true
	return affected, err
}

// SeatGroupDeleteOne is the builder for deleting a single SeatGroup entity.
type SeatGroupDeleteOne struct {
	sgd *SeatGroupDelete
}

// Where appends a list predicates to the SeatGroupDelete builder.
func (sgdo *SeatGroupDeleteOne) Where(ps ...predicate.SeatGroup) *SeatGroupDeleteOne {
	sgdo.sgd.mutation.Where(ps...)
	return sgdo
}

// Exec executes the deletion query.
func (sgdo *SeatGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := sgdo.sgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{seatgroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sgdo *SeatGroupDeleteOne) ExecX(ctx context.Context) {
	if err := sgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
