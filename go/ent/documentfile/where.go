// Code generated by ent, DO NOT EDIT.

package documentfile

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldCreatedAt, v))
}

// StoragePath applies equality check predicate on the "storage_path" field. It's identical to StoragePathEQ.
func StoragePath(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldStoragePath, v))
}

// StoragePathZpl applies equality check predicate on the "storage_path_zpl" field. It's identical to StoragePathZplEQ.
func StoragePathZpl(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldStoragePathZpl, v))
}

// DataPdfBase64 applies equality check predicate on the "data_pdf_base64" field. It's identical to DataPdfBase64EQ.
func DataPdfBase64(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldDataPdfBase64, v))
}

// DataZplBase64 applies equality check predicate on the "data_zpl_base64" field. It's identical to DataZplBase64EQ.
func DataZplBase64(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldDataZplBase64, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.DocumentFile {
	vc := string(v)
	return predicate.DocumentFile(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.DocumentFile {
	vc := string(v)
	return predicate.DocumentFile(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.DocumentFile {
	vc := string(v)
	return predicate.DocumentFile(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.DocumentFile {
	vc := string(v)
	return predicate.DocumentFile(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.DocumentFile {
	vc := string(v)
	return predicate.DocumentFile(sql.FieldContainsFold(FieldTenantID, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLTE(FieldCreatedAt, v))
}

// StorageTypeEQ applies the EQ predicate on the "storage_type" field.
func StorageTypeEQ(v StorageType) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldStorageType, v))
}

// StorageTypeNEQ applies the NEQ predicate on the "storage_type" field.
func StorageTypeNEQ(v StorageType) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldStorageType, v))
}

// StorageTypeIn applies the In predicate on the "storage_type" field.
func StorageTypeIn(vs ...StorageType) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldStorageType, vs...))
}

// StorageTypeNotIn applies the NotIn predicate on the "storage_type" field.
func StorageTypeNotIn(vs ...StorageType) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldStorageType, vs...))
}

// StoragePathEQ applies the EQ predicate on the "storage_path" field.
func StoragePathEQ(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldStoragePath, v))
}

// StoragePathNEQ applies the NEQ predicate on the "storage_path" field.
func StoragePathNEQ(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldStoragePath, v))
}

// StoragePathIn applies the In predicate on the "storage_path" field.
func StoragePathIn(vs ...string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldStoragePath, vs...))
}

// StoragePathNotIn applies the NotIn predicate on the "storage_path" field.
func StoragePathNotIn(vs ...string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldStoragePath, vs...))
}

// StoragePathGT applies the GT predicate on the "storage_path" field.
func StoragePathGT(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGT(FieldStoragePath, v))
}

// StoragePathGTE applies the GTE predicate on the "storage_path" field.
func StoragePathGTE(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGTE(FieldStoragePath, v))
}

// StoragePathLT applies the LT predicate on the "storage_path" field.
func StoragePathLT(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLT(FieldStoragePath, v))
}

// StoragePathLTE applies the LTE predicate on the "storage_path" field.
func StoragePathLTE(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLTE(FieldStoragePath, v))
}

// StoragePathContains applies the Contains predicate on the "storage_path" field.
func StoragePathContains(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldContains(FieldStoragePath, v))
}

// StoragePathHasPrefix applies the HasPrefix predicate on the "storage_path" field.
func StoragePathHasPrefix(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldHasPrefix(FieldStoragePath, v))
}

// StoragePathHasSuffix applies the HasSuffix predicate on the "storage_path" field.
func StoragePathHasSuffix(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldHasSuffix(FieldStoragePath, v))
}

// StoragePathIsNil applies the IsNil predicate on the "storage_path" field.
func StoragePathIsNil() predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIsNull(FieldStoragePath))
}

// StoragePathNotNil applies the NotNil predicate on the "storage_path" field.
func StoragePathNotNil() predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotNull(FieldStoragePath))
}

// StoragePathEqualFold applies the EqualFold predicate on the "storage_path" field.
func StoragePathEqualFold(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEqualFold(FieldStoragePath, v))
}

// StoragePathContainsFold applies the ContainsFold predicate on the "storage_path" field.
func StoragePathContainsFold(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldContainsFold(FieldStoragePath, v))
}

// StoragePathZplEQ applies the EQ predicate on the "storage_path_zpl" field.
func StoragePathZplEQ(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldStoragePathZpl, v))
}

// StoragePathZplNEQ applies the NEQ predicate on the "storage_path_zpl" field.
func StoragePathZplNEQ(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldStoragePathZpl, v))
}

// StoragePathZplIn applies the In predicate on the "storage_path_zpl" field.
func StoragePathZplIn(vs ...string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldStoragePathZpl, vs...))
}

// StoragePathZplNotIn applies the NotIn predicate on the "storage_path_zpl" field.
func StoragePathZplNotIn(vs ...string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldStoragePathZpl, vs...))
}

// StoragePathZplGT applies the GT predicate on the "storage_path_zpl" field.
func StoragePathZplGT(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGT(FieldStoragePathZpl, v))
}

// StoragePathZplGTE applies the GTE predicate on the "storage_path_zpl" field.
func StoragePathZplGTE(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGTE(FieldStoragePathZpl, v))
}

// StoragePathZplLT applies the LT predicate on the "storage_path_zpl" field.
func StoragePathZplLT(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLT(FieldStoragePathZpl, v))
}

// StoragePathZplLTE applies the LTE predicate on the "storage_path_zpl" field.
func StoragePathZplLTE(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLTE(FieldStoragePathZpl, v))
}

// StoragePathZplContains applies the Contains predicate on the "storage_path_zpl" field.
func StoragePathZplContains(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldContains(FieldStoragePathZpl, v))
}

// StoragePathZplHasPrefix applies the HasPrefix predicate on the "storage_path_zpl" field.
func StoragePathZplHasPrefix(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldHasPrefix(FieldStoragePathZpl, v))
}

// StoragePathZplHasSuffix applies the HasSuffix predicate on the "storage_path_zpl" field.
func StoragePathZplHasSuffix(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldHasSuffix(FieldStoragePathZpl, v))
}

// StoragePathZplIsNil applies the IsNil predicate on the "storage_path_zpl" field.
func StoragePathZplIsNil() predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIsNull(FieldStoragePathZpl))
}

// StoragePathZplNotNil applies the NotNil predicate on the "storage_path_zpl" field.
func StoragePathZplNotNil() predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotNull(FieldStoragePathZpl))
}

// StoragePathZplEqualFold applies the EqualFold predicate on the "storage_path_zpl" field.
func StoragePathZplEqualFold(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEqualFold(FieldStoragePathZpl, v))
}

// StoragePathZplContainsFold applies the ContainsFold predicate on the "storage_path_zpl" field.
func StoragePathZplContainsFold(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldContainsFold(FieldStoragePathZpl, v))
}

// DocTypeEQ applies the EQ predicate on the "doc_type" field.
func DocTypeEQ(v DocType) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldDocType, v))
}

// DocTypeNEQ applies the NEQ predicate on the "doc_type" field.
func DocTypeNEQ(v DocType) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldDocType, v))
}

// DocTypeIn applies the In predicate on the "doc_type" field.
func DocTypeIn(vs ...DocType) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldDocType, vs...))
}

// DocTypeNotIn applies the NotIn predicate on the "doc_type" field.
func DocTypeNotIn(vs ...DocType) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldDocType, vs...))
}

// DataPdfBase64EQ applies the EQ predicate on the "data_pdf_base64" field.
func DataPdfBase64EQ(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldDataPdfBase64, v))
}

// DataPdfBase64NEQ applies the NEQ predicate on the "data_pdf_base64" field.
func DataPdfBase64NEQ(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldDataPdfBase64, v))
}

// DataPdfBase64In applies the In predicate on the "data_pdf_base64" field.
func DataPdfBase64In(vs ...string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldDataPdfBase64, vs...))
}

// DataPdfBase64NotIn applies the NotIn predicate on the "data_pdf_base64" field.
func DataPdfBase64NotIn(vs ...string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldDataPdfBase64, vs...))
}

// DataPdfBase64GT applies the GT predicate on the "data_pdf_base64" field.
func DataPdfBase64GT(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGT(FieldDataPdfBase64, v))
}

// DataPdfBase64GTE applies the GTE predicate on the "data_pdf_base64" field.
func DataPdfBase64GTE(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGTE(FieldDataPdfBase64, v))
}

// DataPdfBase64LT applies the LT predicate on the "data_pdf_base64" field.
func DataPdfBase64LT(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLT(FieldDataPdfBase64, v))
}

// DataPdfBase64LTE applies the LTE predicate on the "data_pdf_base64" field.
func DataPdfBase64LTE(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLTE(FieldDataPdfBase64, v))
}

// DataPdfBase64Contains applies the Contains predicate on the "data_pdf_base64" field.
func DataPdfBase64Contains(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldContains(FieldDataPdfBase64, v))
}

// DataPdfBase64HasPrefix applies the HasPrefix predicate on the "data_pdf_base64" field.
func DataPdfBase64HasPrefix(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldHasPrefix(FieldDataPdfBase64, v))
}

// DataPdfBase64HasSuffix applies the HasSuffix predicate on the "data_pdf_base64" field.
func DataPdfBase64HasSuffix(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldHasSuffix(FieldDataPdfBase64, v))
}

// DataPdfBase64IsNil applies the IsNil predicate on the "data_pdf_base64" field.
func DataPdfBase64IsNil() predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIsNull(FieldDataPdfBase64))
}

// DataPdfBase64NotNil applies the NotNil predicate on the "data_pdf_base64" field.
func DataPdfBase64NotNil() predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotNull(FieldDataPdfBase64))
}

// DataPdfBase64EqualFold applies the EqualFold predicate on the "data_pdf_base64" field.
func DataPdfBase64EqualFold(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEqualFold(FieldDataPdfBase64, v))
}

// DataPdfBase64ContainsFold applies the ContainsFold predicate on the "data_pdf_base64" field.
func DataPdfBase64ContainsFold(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldContainsFold(FieldDataPdfBase64, v))
}

// DataZplBase64EQ applies the EQ predicate on the "data_zpl_base64" field.
func DataZplBase64EQ(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEQ(FieldDataZplBase64, v))
}

// DataZplBase64NEQ applies the NEQ predicate on the "data_zpl_base64" field.
func DataZplBase64NEQ(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNEQ(FieldDataZplBase64, v))
}

// DataZplBase64In applies the In predicate on the "data_zpl_base64" field.
func DataZplBase64In(vs ...string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIn(FieldDataZplBase64, vs...))
}

// DataZplBase64NotIn applies the NotIn predicate on the "data_zpl_base64" field.
func DataZplBase64NotIn(vs ...string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotIn(FieldDataZplBase64, vs...))
}

// DataZplBase64GT applies the GT predicate on the "data_zpl_base64" field.
func DataZplBase64GT(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGT(FieldDataZplBase64, v))
}

// DataZplBase64GTE applies the GTE predicate on the "data_zpl_base64" field.
func DataZplBase64GTE(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldGTE(FieldDataZplBase64, v))
}

// DataZplBase64LT applies the LT predicate on the "data_zpl_base64" field.
func DataZplBase64LT(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLT(FieldDataZplBase64, v))
}

// DataZplBase64LTE applies the LTE predicate on the "data_zpl_base64" field.
func DataZplBase64LTE(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldLTE(FieldDataZplBase64, v))
}

// DataZplBase64Contains applies the Contains predicate on the "data_zpl_base64" field.
func DataZplBase64Contains(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldContains(FieldDataZplBase64, v))
}

// DataZplBase64HasPrefix applies the HasPrefix predicate on the "data_zpl_base64" field.
func DataZplBase64HasPrefix(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldHasPrefix(FieldDataZplBase64, v))
}

// DataZplBase64HasSuffix applies the HasSuffix predicate on the "data_zpl_base64" field.
func DataZplBase64HasSuffix(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldHasSuffix(FieldDataZplBase64, v))
}

// DataZplBase64IsNil applies the IsNil predicate on the "data_zpl_base64" field.
func DataZplBase64IsNil() predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldIsNull(FieldDataZplBase64))
}

// DataZplBase64NotNil applies the NotNil predicate on the "data_zpl_base64" field.
func DataZplBase64NotNil() predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldNotNull(FieldDataZplBase64))
}

// DataZplBase64EqualFold applies the EqualFold predicate on the "data_zpl_base64" field.
func DataZplBase64EqualFold(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldEqualFold(FieldDataZplBase64, v))
}

// DataZplBase64ContainsFold applies the ContainsFold predicate on the "data_zpl_base64" field.
func DataZplBase64ContainsFold(v string) predicate.DocumentFile {
	return predicate.DocumentFile(sql.FieldContainsFold(FieldDataZplBase64, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.DocumentFile {
	return predicate.DocumentFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.DocumentFile {
	return predicate.DocumentFile(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasColli applies the HasEdge predicate on the "colli" edge.
func HasColli() predicate.DocumentFile {
	return predicate.DocumentFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ColliTable, ColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColliWith applies the HasEdge predicate on the "colli" edge with a given conditions (other predicates).
func HasColliWith(preds ...predicate.Colli) predicate.DocumentFile {
	return predicate.DocumentFile(func(s *sql.Selector) {
		step := newColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentParcel applies the HasEdge predicate on the "shipment_parcel" edge.
func HasShipmentParcel() predicate.DocumentFile {
	return predicate.DocumentFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ShipmentParcelTable, ShipmentParcelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentParcelWith applies the HasEdge predicate on the "shipment_parcel" edge with a given conditions (other predicates).
func HasShipmentParcelWith(preds ...predicate.ShipmentParcel) predicate.DocumentFile {
	return predicate.DocumentFile(func(s *sql.Selector) {
		step := newShipmentParcelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DocumentFile) predicate.DocumentFile {
	return predicate.DocumentFile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DocumentFile) predicate.DocumentFile {
	return predicate.DocumentFile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DocumentFile) predicate.DocumentFile {
	return predicate.DocumentFile(sql.NotPredicates(p))
}
