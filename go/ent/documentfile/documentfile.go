// Code generated by ent, DO NOT EDIT.

package documentfile

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the documentfile type in the database.
	Label = "document_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStorageType holds the string denoting the storage_type field in the database.
	FieldStorageType = "storage_type"
	// FieldStoragePath holds the string denoting the storage_path field in the database.
	FieldStoragePath = "storage_path"
	// FieldStoragePathZpl holds the string denoting the storage_path_zpl field in the database.
	FieldStoragePathZpl = "storage_path_zpl"
	// FieldDocType holds the string denoting the doc_type field in the database.
	FieldDocType = "doc_type"
	// FieldDataPdfBase64 holds the string denoting the data_pdf_base64 field in the database.
	FieldDataPdfBase64 = "data_pdf_base64"
	// FieldDataZplBase64 holds the string denoting the data_zpl_base64 field in the database.
	FieldDataZplBase64 = "data_zpl_base64"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// EdgeShipmentParcel holds the string denoting the shipment_parcel edge name in mutations.
	EdgeShipmentParcel = "shipment_parcel"
	// Table holds the table name of the documentfile in the database.
	Table = "document_files"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "document_files"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "document_files"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "colli_document_file"
	// ShipmentParcelTable is the table that holds the shipment_parcel relation/edge.
	ShipmentParcelTable = "document_files"
	// ShipmentParcelInverseTable is the table name for the ShipmentParcel entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentparcel" package.
	ShipmentParcelInverseTable = "shipment_parcels"
	// ShipmentParcelColumn is the table column denoting the shipment_parcel relation/edge.
	ShipmentParcelColumn = "shipment_parcel_document_file"
)

// Columns holds all SQL columns for documentfile fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldCreatedAt,
	FieldStorageType,
	FieldStoragePath,
	FieldStoragePathZpl,
	FieldDocType,
	FieldDataPdfBase64,
	FieldDataZplBase64,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "document_files"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"colli_document_file",
	"shipment_parcel_document_file",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultStoragePathZpl holds the default value on creation for the "storage_path_zpl" field.
	DefaultStoragePathZpl string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// StorageType defines the type for the "storage_type" enum field.
type StorageType string

// StorageType values.
const (
	StorageTypeDatabase StorageType = "database"
	StorageTypeBucket   StorageType = "bucket"
)

func (st StorageType) String() string {
	return string(st)
}

// StorageTypeValidator is a validator for the "storage_type" field enum values. It is called by the builders before save.
func StorageTypeValidator(st StorageType) error {
	switch st {
	case StorageTypeDatabase, StorageTypeBucket:
		return nil
	default:
		return fmt.Errorf("documentfile: invalid enum value for storage_type field: %q", st)
	}
}

// DocType defines the type for the "doc_type" enum field.
type DocType string

// DocType values.
const (
	DocTypeCarrierLabel DocType = "carrier_label"
	DocTypePackingSlip  DocType = "packing_slip"
)

func (dt DocType) String() string {
	return string(dt)
}

// DocTypeValidator is a validator for the "doc_type" field enum values. It is called by the builders before save.
func DocTypeValidator(dt DocType) error {
	switch dt {
	case DocTypeCarrierLabel, DocTypePackingSlip:
		return nil
	default:
		return fmt.Errorf("documentfile: invalid enum value for doc_type field: %q", dt)
	}
}

// OrderOption defines the ordering options for the DocumentFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStorageType orders the results by the storage_type field.
func ByStorageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageType, opts...).ToFunc()
}

// ByStoragePath orders the results by the storage_path field.
func ByStoragePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoragePath, opts...).ToFunc()
}

// ByStoragePathZpl orders the results by the storage_path_zpl field.
func ByStoragePathZpl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoragePathZpl, opts...).ToFunc()
}

// ByDocType orders the results by the doc_type field.
func ByDocType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocType, opts...).ToFunc()
}

// ByDataPdfBase64 orders the results by the data_pdf_base64 field.
func ByDataPdfBase64(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataPdfBase64, opts...).ToFunc()
}

// ByDataZplBase64 orders the results by the data_zpl_base64 field.
func ByDataZplBase64(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataZplBase64, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByColliField orders the results by colli field.
func ByColliField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentParcelField orders the results by shipment_parcel field.
func ByShipmentParcelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentParcelStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ColliTable, ColliColumn),
	)
}
func newShipmentParcelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentParcelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ShipmentParcelTable, ShipmentParcelColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e StorageType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *StorageType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = StorageType(str)
	if err := StorageTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid StorageType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DocType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DocType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DocType(str)
	if err := DocTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DocType", str)
	}
	return nil
}
