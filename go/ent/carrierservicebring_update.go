// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceBringUpdate is the builder for updating CarrierServiceBring entities.
type CarrierServiceBringUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierServiceBringMutation
}

// Where appends a list predicates to the CarrierServiceBringUpdate builder.
func (csbu *CarrierServiceBringUpdate) Where(ps ...predicate.CarrierServiceBring) *CarrierServiceBringUpdate {
	csbu.mutation.Where(ps...)
	return csbu
}

// SetAPIServiceCode sets the "api_service_code" field.
func (csbu *CarrierServiceBringUpdate) SetAPIServiceCode(s string) *CarrierServiceBringUpdate {
	csbu.mutation.SetAPIServiceCode(s)
	return csbu
}

// SetNillableAPIServiceCode sets the "api_service_code" field if the given value is not nil.
func (csbu *CarrierServiceBringUpdate) SetNillableAPIServiceCode(s *string) *CarrierServiceBringUpdate {
	if s != nil {
		csbu.SetAPIServiceCode(*s)
	}
	return csbu
}

// SetAPIRequest sets the "api_request" field.
func (csbu *CarrierServiceBringUpdate) SetAPIRequest(s string) *CarrierServiceBringUpdate {
	csbu.mutation.SetAPIRequest(s)
	return csbu
}

// SetNillableAPIRequest sets the "api_request" field if the given value is not nil.
func (csbu *CarrierServiceBringUpdate) SetNillableAPIRequest(s *string) *CarrierServiceBringUpdate {
	if s != nil {
		csbu.SetAPIRequest(*s)
	}
	return csbu
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csbu *CarrierServiceBringUpdate) SetCarrierServiceID(id pulid.ID) *CarrierServiceBringUpdate {
	csbu.mutation.SetCarrierServiceID(id)
	return csbu
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csbu *CarrierServiceBringUpdate) SetCarrierService(c *CarrierService) *CarrierServiceBringUpdate {
	return csbu.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceBringIDs adds the "carrier_additional_service_bring" edge to the CarrierAdditionalServiceBring entity by IDs.
func (csbu *CarrierServiceBringUpdate) AddCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *CarrierServiceBringUpdate {
	csbu.mutation.AddCarrierAdditionalServiceBringIDs(ids...)
	return csbu
}

// AddCarrierAdditionalServiceBring adds the "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (csbu *CarrierServiceBringUpdate) AddCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *CarrierServiceBringUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csbu.AddCarrierAdditionalServiceBringIDs(ids...)
}

// Mutation returns the CarrierServiceBringMutation object of the builder.
func (csbu *CarrierServiceBringUpdate) Mutation() *CarrierServiceBringMutation {
	return csbu.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csbu *CarrierServiceBringUpdate) ClearCarrierService() *CarrierServiceBringUpdate {
	csbu.mutation.ClearCarrierService()
	return csbu
}

// ClearCarrierAdditionalServiceBring clears all "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (csbu *CarrierServiceBringUpdate) ClearCarrierAdditionalServiceBring() *CarrierServiceBringUpdate {
	csbu.mutation.ClearCarrierAdditionalServiceBring()
	return csbu
}

// RemoveCarrierAdditionalServiceBringIDs removes the "carrier_additional_service_bring" edge to CarrierAdditionalServiceBring entities by IDs.
func (csbu *CarrierServiceBringUpdate) RemoveCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *CarrierServiceBringUpdate {
	csbu.mutation.RemoveCarrierAdditionalServiceBringIDs(ids...)
	return csbu
}

// RemoveCarrierAdditionalServiceBring removes "carrier_additional_service_bring" edges to CarrierAdditionalServiceBring entities.
func (csbu *CarrierServiceBringUpdate) RemoveCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *CarrierServiceBringUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csbu.RemoveCarrierAdditionalServiceBringIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csbu *CarrierServiceBringUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csbu.sqlSave, csbu.mutation, csbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csbu *CarrierServiceBringUpdate) SaveX(ctx context.Context) int {
	affected, err := csbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csbu *CarrierServiceBringUpdate) Exec(ctx context.Context) error {
	_, err := csbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csbu *CarrierServiceBringUpdate) ExecX(ctx context.Context) {
	if err := csbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csbu *CarrierServiceBringUpdate) check() error {
	if csbu.mutation.CarrierServiceCleared() && len(csbu.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceBring.carrier_service"`)
	}
	return nil
}

func (csbu *CarrierServiceBringUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservicebring.Table, carrierservicebring.Columns, sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString))
	if ps := csbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csbu.mutation.APIServiceCode(); ok {
		_spec.SetField(carrierservicebring.FieldAPIServiceCode, field.TypeString, value)
	}
	if value, ok := csbu.mutation.APIRequest(); ok {
		_spec.SetField(carrierservicebring.FieldAPIRequest, field.TypeString, value)
	}
	if csbu.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicebring.CarrierServiceTable,
			Columns: []string{carrierservicebring.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csbu.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicebring.CarrierServiceTable,
			Columns: []string{carrierservicebring.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csbu.mutation.CarrierAdditionalServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicebring.CarrierAdditionalServiceBringTable,
			Columns: []string{carrierservicebring.CarrierAdditionalServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csbu.mutation.RemovedCarrierAdditionalServiceBringIDs(); len(nodes) > 0 && !csbu.mutation.CarrierAdditionalServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicebring.CarrierAdditionalServiceBringTable,
			Columns: []string{carrierservicebring.CarrierAdditionalServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csbu.mutation.CarrierAdditionalServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicebring.CarrierAdditionalServiceBringTable,
			Columns: []string{carrierservicebring.CarrierAdditionalServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservicebring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csbu.mutation.done = true
	return n, nil
}

// CarrierServiceBringUpdateOne is the builder for updating a single CarrierServiceBring entity.
type CarrierServiceBringUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierServiceBringMutation
}

// SetAPIServiceCode sets the "api_service_code" field.
func (csbuo *CarrierServiceBringUpdateOne) SetAPIServiceCode(s string) *CarrierServiceBringUpdateOne {
	csbuo.mutation.SetAPIServiceCode(s)
	return csbuo
}

// SetNillableAPIServiceCode sets the "api_service_code" field if the given value is not nil.
func (csbuo *CarrierServiceBringUpdateOne) SetNillableAPIServiceCode(s *string) *CarrierServiceBringUpdateOne {
	if s != nil {
		csbuo.SetAPIServiceCode(*s)
	}
	return csbuo
}

// SetAPIRequest sets the "api_request" field.
func (csbuo *CarrierServiceBringUpdateOne) SetAPIRequest(s string) *CarrierServiceBringUpdateOne {
	csbuo.mutation.SetAPIRequest(s)
	return csbuo
}

// SetNillableAPIRequest sets the "api_request" field if the given value is not nil.
func (csbuo *CarrierServiceBringUpdateOne) SetNillableAPIRequest(s *string) *CarrierServiceBringUpdateOne {
	if s != nil {
		csbuo.SetAPIRequest(*s)
	}
	return csbuo
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csbuo *CarrierServiceBringUpdateOne) SetCarrierServiceID(id pulid.ID) *CarrierServiceBringUpdateOne {
	csbuo.mutation.SetCarrierServiceID(id)
	return csbuo
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csbuo *CarrierServiceBringUpdateOne) SetCarrierService(c *CarrierService) *CarrierServiceBringUpdateOne {
	return csbuo.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceBringIDs adds the "carrier_additional_service_bring" edge to the CarrierAdditionalServiceBring entity by IDs.
func (csbuo *CarrierServiceBringUpdateOne) AddCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *CarrierServiceBringUpdateOne {
	csbuo.mutation.AddCarrierAdditionalServiceBringIDs(ids...)
	return csbuo
}

// AddCarrierAdditionalServiceBring adds the "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (csbuo *CarrierServiceBringUpdateOne) AddCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *CarrierServiceBringUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csbuo.AddCarrierAdditionalServiceBringIDs(ids...)
}

// Mutation returns the CarrierServiceBringMutation object of the builder.
func (csbuo *CarrierServiceBringUpdateOne) Mutation() *CarrierServiceBringMutation {
	return csbuo.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csbuo *CarrierServiceBringUpdateOne) ClearCarrierService() *CarrierServiceBringUpdateOne {
	csbuo.mutation.ClearCarrierService()
	return csbuo
}

// ClearCarrierAdditionalServiceBring clears all "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (csbuo *CarrierServiceBringUpdateOne) ClearCarrierAdditionalServiceBring() *CarrierServiceBringUpdateOne {
	csbuo.mutation.ClearCarrierAdditionalServiceBring()
	return csbuo
}

// RemoveCarrierAdditionalServiceBringIDs removes the "carrier_additional_service_bring" edge to CarrierAdditionalServiceBring entities by IDs.
func (csbuo *CarrierServiceBringUpdateOne) RemoveCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *CarrierServiceBringUpdateOne {
	csbuo.mutation.RemoveCarrierAdditionalServiceBringIDs(ids...)
	return csbuo
}

// RemoveCarrierAdditionalServiceBring removes "carrier_additional_service_bring" edges to CarrierAdditionalServiceBring entities.
func (csbuo *CarrierServiceBringUpdateOne) RemoveCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *CarrierServiceBringUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csbuo.RemoveCarrierAdditionalServiceBringIDs(ids...)
}

// Where appends a list predicates to the CarrierServiceBringUpdate builder.
func (csbuo *CarrierServiceBringUpdateOne) Where(ps ...predicate.CarrierServiceBring) *CarrierServiceBringUpdateOne {
	csbuo.mutation.Where(ps...)
	return csbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csbuo *CarrierServiceBringUpdateOne) Select(field string, fields ...string) *CarrierServiceBringUpdateOne {
	csbuo.fields = append([]string{field}, fields...)
	return csbuo
}

// Save executes the query and returns the updated CarrierServiceBring entity.
func (csbuo *CarrierServiceBringUpdateOne) Save(ctx context.Context) (*CarrierServiceBring, error) {
	return withHooks(ctx, csbuo.sqlSave, csbuo.mutation, csbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csbuo *CarrierServiceBringUpdateOne) SaveX(ctx context.Context) *CarrierServiceBring {
	node, err := csbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csbuo *CarrierServiceBringUpdateOne) Exec(ctx context.Context) error {
	_, err := csbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csbuo *CarrierServiceBringUpdateOne) ExecX(ctx context.Context) {
	if err := csbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csbuo *CarrierServiceBringUpdateOne) check() error {
	if csbuo.mutation.CarrierServiceCleared() && len(csbuo.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceBring.carrier_service"`)
	}
	return nil
}

func (csbuo *CarrierServiceBringUpdateOne) sqlSave(ctx context.Context) (_node *CarrierServiceBring, err error) {
	if err := csbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservicebring.Table, carrierservicebring.Columns, sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString))
	id, ok := csbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierServiceBring.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicebring.FieldID)
		for _, f := range fields {
			if !carrierservicebring.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierservicebring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csbuo.mutation.APIServiceCode(); ok {
		_spec.SetField(carrierservicebring.FieldAPIServiceCode, field.TypeString, value)
	}
	if value, ok := csbuo.mutation.APIRequest(); ok {
		_spec.SetField(carrierservicebring.FieldAPIRequest, field.TypeString, value)
	}
	if csbuo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicebring.CarrierServiceTable,
			Columns: []string{carrierservicebring.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csbuo.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicebring.CarrierServiceTable,
			Columns: []string{carrierservicebring.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csbuo.mutation.CarrierAdditionalServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicebring.CarrierAdditionalServiceBringTable,
			Columns: []string{carrierservicebring.CarrierAdditionalServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csbuo.mutation.RemovedCarrierAdditionalServiceBringIDs(); len(nodes) > 0 && !csbuo.mutation.CarrierAdditionalServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicebring.CarrierAdditionalServiceBringTable,
			Columns: []string{carrierservicebring.CarrierAdditionalServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csbuo.mutation.CarrierAdditionalServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicebring.CarrierAdditionalServiceBringTable,
			Columns: []string{carrierservicebring.CarrierAdditionalServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierServiceBring{config: csbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservicebring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csbuo.mutation.done = true
	return _node, nil
}
