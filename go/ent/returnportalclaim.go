// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReturnPortalClaim is the model entity for the ReturnPortalClaim schema.
type ReturnPortalClaim struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Restockable holds the value of the "restockable" field.
	Restockable bool `json:"restockable,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReturnPortalClaimQuery when eager-loading is set.
	Edges                               ReturnPortalClaimEdges `json:"edges"`
	return_portal_return_portal_claim   *pulid.ID
	return_portal_claim_return_location *pulid.ID
	selectValues                        sql.SelectValues
}

// ReturnPortalClaimEdges holds the relations/edges for other nodes in the graph.
type ReturnPortalClaimEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ReturnPortal holds the value of the return_portal edge.
	ReturnPortal *ReturnPortal `json:"return_portal,omitempty"`
	// Return to address
	ReturnLocation *Location `json:"return_location,omitempty"`
	// ReturnOrderLine holds the value of the return_order_line edge.
	ReturnOrderLine []*ReturnOrderLine `json:"return_order_line,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedReturnOrderLine map[string][]*ReturnOrderLine
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalClaimEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ReturnPortalOrErr returns the ReturnPortal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalClaimEdges) ReturnPortalOrErr() (*ReturnPortal, error) {
	if e.ReturnPortal != nil {
		return e.ReturnPortal, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: returnportal.Label}
	}
	return nil, &NotLoadedError{edge: "return_portal"}
}

// ReturnLocationOrErr returns the ReturnLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalClaimEdges) ReturnLocationOrErr() (*Location, error) {
	if e.ReturnLocation != nil {
		return e.ReturnLocation, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "return_location"}
}

// ReturnOrderLineOrErr returns the ReturnOrderLine value or an error if the edge
// was not loaded in eager-loading.
func (e ReturnPortalClaimEdges) ReturnOrderLineOrErr() ([]*ReturnOrderLine, error) {
	if e.loadedTypes[3] {
		return e.ReturnOrderLine, nil
	}
	return nil, &NotLoadedError{edge: "return_order_line"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReturnPortalClaim) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case returnportalclaim.FieldID, returnportalclaim.FieldTenantID:
			values[i] = new(pulid.ID)
		case returnportalclaim.FieldRestockable, returnportalclaim.FieldArchived:
			values[i] = new(sql.NullBool)
		case returnportalclaim.FieldName, returnportalclaim.FieldDescription:
			values[i] = new(sql.NullString)
		case returnportalclaim.ForeignKeys[0]: // return_portal_return_portal_claim
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returnportalclaim.ForeignKeys[1]: // return_portal_claim_return_location
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReturnPortalClaim fields.
func (rpc *ReturnPortalClaim) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case returnportalclaim.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rpc.ID = *value
			}
		case returnportalclaim.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				rpc.TenantID = *value
			}
		case returnportalclaim.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rpc.Name = value.String
			}
		case returnportalclaim.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rpc.Description = value.String
			}
		case returnportalclaim.FieldRestockable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field restockable", values[i])
			} else if value.Valid {
				rpc.Restockable = value.Bool
			}
		case returnportalclaim.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				rpc.Archived = value.Bool
			}
		case returnportalclaim.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_portal_return_portal_claim", values[i])
			} else if value.Valid {
				rpc.return_portal_return_portal_claim = new(pulid.ID)
				*rpc.return_portal_return_portal_claim = *value.S.(*pulid.ID)
			}
		case returnportalclaim.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_portal_claim_return_location", values[i])
			} else if value.Valid {
				rpc.return_portal_claim_return_location = new(pulid.ID)
				*rpc.return_portal_claim_return_location = *value.S.(*pulid.ID)
			}
		default:
			rpc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReturnPortalClaim.
// This includes values selected through modifiers, order, etc.
func (rpc *ReturnPortalClaim) Value(name string) (ent.Value, error) {
	return rpc.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ReturnPortalClaim entity.
func (rpc *ReturnPortalClaim) QueryTenant() *TenantQuery {
	return NewReturnPortalClaimClient(rpc.config).QueryTenant(rpc)
}

// QueryReturnPortal queries the "return_portal" edge of the ReturnPortalClaim entity.
func (rpc *ReturnPortalClaim) QueryReturnPortal() *ReturnPortalQuery {
	return NewReturnPortalClaimClient(rpc.config).QueryReturnPortal(rpc)
}

// QueryReturnLocation queries the "return_location" edge of the ReturnPortalClaim entity.
func (rpc *ReturnPortalClaim) QueryReturnLocation() *LocationQuery {
	return NewReturnPortalClaimClient(rpc.config).QueryReturnLocation(rpc)
}

// QueryReturnOrderLine queries the "return_order_line" edge of the ReturnPortalClaim entity.
func (rpc *ReturnPortalClaim) QueryReturnOrderLine() *ReturnOrderLineQuery {
	return NewReturnPortalClaimClient(rpc.config).QueryReturnOrderLine(rpc)
}

// Update returns a builder for updating this ReturnPortalClaim.
// Note that you need to call ReturnPortalClaim.Unwrap() before calling this method if this ReturnPortalClaim
// was returned from a transaction, and the transaction was committed or rolled back.
func (rpc *ReturnPortalClaim) Update() *ReturnPortalClaimUpdateOne {
	return NewReturnPortalClaimClient(rpc.config).UpdateOne(rpc)
}

// Unwrap unwraps the ReturnPortalClaim entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rpc *ReturnPortalClaim) Unwrap() *ReturnPortalClaim {
	_tx, ok := rpc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReturnPortalClaim is not a transactional entity")
	}
	rpc.config.driver = _tx.drv
	return rpc
}

// String implements the fmt.Stringer.
func (rpc *ReturnPortalClaim) String() string {
	var builder strings.Builder
	builder.WriteString("ReturnPortalClaim(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rpc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", rpc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rpc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rpc.Description)
	builder.WriteString(", ")
	builder.WriteString("restockable=")
	builder.WriteString(fmt.Sprintf("%v", rpc.Restockable))
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", rpc.Archived))
	builder.WriteByte(')')
	return builder.String()
}

// NamedReturnOrderLine returns the ReturnOrderLine named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rpc *ReturnPortalClaim) NamedReturnOrderLine(name string) ([]*ReturnOrderLine, error) {
	if rpc.Edges.namedReturnOrderLine == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rpc.Edges.namedReturnOrderLine[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rpc *ReturnPortalClaim) appendNamedReturnOrderLine(name string, edges ...*ReturnOrderLine) {
	if rpc.Edges.namedReturnOrderLine == nil {
		rpc.Edges.namedReturnOrderLine = make(map[string][]*ReturnOrderLine)
	}
	if len(edges) == 0 {
		rpc.Edges.namedReturnOrderLine[name] = []*ReturnOrderLine{}
	} else {
		rpc.Edges.namedReturnOrderLine[name] = append(rpc.Edges.namedReturnOrderLine[name], edges...)
	}
}

// ReturnPortalClaims is a parsable slice of ReturnPortalClaim.
type ReturnPortalClaims []*ReturnPortalClaim
