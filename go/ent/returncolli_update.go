// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnColliUpdate is the builder for updating ReturnColli entities.
type ReturnColliUpdate struct {
	config
	hooks    []Hook
	mutation *ReturnColliMutation
}

// Where appends a list predicates to the ReturnColliUpdate builder.
func (rcu *ReturnColliUpdate) Where(ps ...predicate.ReturnColli) *ReturnColliUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetTenantID sets the "tenant_id" field.
func (rcu *ReturnColliUpdate) SetTenantID(pu pulid.ID) *ReturnColliUpdate {
	rcu.mutation.SetTenantID(pu)
	return rcu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableTenantID(pu *pulid.ID) *ReturnColliUpdate {
	if pu != nil {
		rcu.SetTenantID(*pu)
	}
	return rcu
}

// SetExpectedAt sets the "expected_at" field.
func (rcu *ReturnColliUpdate) SetExpectedAt(t time.Time) *ReturnColliUpdate {
	rcu.mutation.SetExpectedAt(t)
	return rcu
}

// SetNillableExpectedAt sets the "expected_at" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableExpectedAt(t *time.Time) *ReturnColliUpdate {
	if t != nil {
		rcu.SetExpectedAt(*t)
	}
	return rcu
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (rcu *ReturnColliUpdate) ClearExpectedAt() *ReturnColliUpdate {
	rcu.mutation.ClearExpectedAt()
	return rcu
}

// SetLabelPdf sets the "label_pdf" field.
func (rcu *ReturnColliUpdate) SetLabelPdf(s string) *ReturnColliUpdate {
	rcu.mutation.SetLabelPdf(s)
	return rcu
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableLabelPdf(s *string) *ReturnColliUpdate {
	if s != nil {
		rcu.SetLabelPdf(*s)
	}
	return rcu
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (rcu *ReturnColliUpdate) ClearLabelPdf() *ReturnColliUpdate {
	rcu.mutation.ClearLabelPdf()
	return rcu
}

// SetLabelPng sets the "label_png" field.
func (rcu *ReturnColliUpdate) SetLabelPng(s string) *ReturnColliUpdate {
	rcu.mutation.SetLabelPng(s)
	return rcu
}

// SetNillableLabelPng sets the "label_png" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableLabelPng(s *string) *ReturnColliUpdate {
	if s != nil {
		rcu.SetLabelPng(*s)
	}
	return rcu
}

// ClearLabelPng clears the value of the "label_png" field.
func (rcu *ReturnColliUpdate) ClearLabelPng() *ReturnColliUpdate {
	rcu.mutation.ClearLabelPng()
	return rcu
}

// SetQrCodePng sets the "qr_code_png" field.
func (rcu *ReturnColliUpdate) SetQrCodePng(s string) *ReturnColliUpdate {
	rcu.mutation.SetQrCodePng(s)
	return rcu
}

// SetNillableQrCodePng sets the "qr_code_png" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableQrCodePng(s *string) *ReturnColliUpdate {
	if s != nil {
		rcu.SetQrCodePng(*s)
	}
	return rcu
}

// ClearQrCodePng clears the value of the "qr_code_png" field.
func (rcu *ReturnColliUpdate) ClearQrCodePng() *ReturnColliUpdate {
	rcu.mutation.ClearQrCodePng()
	return rcu
}

// SetComment sets the "comment" field.
func (rcu *ReturnColliUpdate) SetComment(s string) *ReturnColliUpdate {
	rcu.mutation.SetComment(s)
	return rcu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableComment(s *string) *ReturnColliUpdate {
	if s != nil {
		rcu.SetComment(*s)
	}
	return rcu
}

// ClearComment clears the value of the "comment" field.
func (rcu *ReturnColliUpdate) ClearComment() *ReturnColliUpdate {
	rcu.mutation.ClearComment()
	return rcu
}

// SetStatus sets the "status" field.
func (rcu *ReturnColliUpdate) SetStatus(r returncolli.Status) *ReturnColliUpdate {
	rcu.mutation.SetStatus(r)
	return rcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableStatus(r *returncolli.Status) *ReturnColliUpdate {
	if r != nil {
		rcu.SetStatus(*r)
	}
	return rcu
}

// SetEmailReceived sets the "email_received" field.
func (rcu *ReturnColliUpdate) SetEmailReceived(t time.Time) *ReturnColliUpdate {
	rcu.mutation.SetEmailReceived(t)
	return rcu
}

// SetNillableEmailReceived sets the "email_received" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableEmailReceived(t *time.Time) *ReturnColliUpdate {
	if t != nil {
		rcu.SetEmailReceived(*t)
	}
	return rcu
}

// ClearEmailReceived clears the value of the "email_received" field.
func (rcu *ReturnColliUpdate) ClearEmailReceived() *ReturnColliUpdate {
	rcu.mutation.ClearEmailReceived()
	return rcu
}

// SetEmailAccepted sets the "email_accepted" field.
func (rcu *ReturnColliUpdate) SetEmailAccepted(t time.Time) *ReturnColliUpdate {
	rcu.mutation.SetEmailAccepted(t)
	return rcu
}

// SetNillableEmailAccepted sets the "email_accepted" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableEmailAccepted(t *time.Time) *ReturnColliUpdate {
	if t != nil {
		rcu.SetEmailAccepted(*t)
	}
	return rcu
}

// ClearEmailAccepted clears the value of the "email_accepted" field.
func (rcu *ReturnColliUpdate) ClearEmailAccepted() *ReturnColliUpdate {
	rcu.mutation.ClearEmailAccepted()
	return rcu
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" field.
func (rcu *ReturnColliUpdate) SetEmailConfirmationLabel(t time.Time) *ReturnColliUpdate {
	rcu.mutation.SetEmailConfirmationLabel(t)
	return rcu
}

// SetNillableEmailConfirmationLabel sets the "email_confirmation_label" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableEmailConfirmationLabel(t *time.Time) *ReturnColliUpdate {
	if t != nil {
		rcu.SetEmailConfirmationLabel(*t)
	}
	return rcu
}

// ClearEmailConfirmationLabel clears the value of the "email_confirmation_label" field.
func (rcu *ReturnColliUpdate) ClearEmailConfirmationLabel() *ReturnColliUpdate {
	rcu.mutation.ClearEmailConfirmationLabel()
	return rcu
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" field.
func (rcu *ReturnColliUpdate) SetEmailConfirmationQrCode(t time.Time) *ReturnColliUpdate {
	rcu.mutation.SetEmailConfirmationQrCode(t)
	return rcu
}

// SetNillableEmailConfirmationQrCode sets the "email_confirmation_qr_code" field if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableEmailConfirmationQrCode(t *time.Time) *ReturnColliUpdate {
	if t != nil {
		rcu.SetEmailConfirmationQrCode(*t)
	}
	return rcu
}

// ClearEmailConfirmationQrCode clears the value of the "email_confirmation_qr_code" field.
func (rcu *ReturnColliUpdate) ClearEmailConfirmationQrCode() *ReturnColliUpdate {
	rcu.mutation.ClearEmailConfirmationQrCode()
	return rcu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rcu *ReturnColliUpdate) SetTenant(t *Tenant) *ReturnColliUpdate {
	return rcu.SetTenantID(t.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (rcu *ReturnColliUpdate) SetRecipientID(id pulid.ID) *ReturnColliUpdate {
	rcu.mutation.SetRecipientID(id)
	return rcu
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (rcu *ReturnColliUpdate) SetRecipient(a *Address) *ReturnColliUpdate {
	return rcu.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (rcu *ReturnColliUpdate) SetSenderID(id pulid.ID) *ReturnColliUpdate {
	rcu.mutation.SetSenderID(id)
	return rcu
}

// SetSender sets the "sender" edge to the Address entity.
func (rcu *ReturnColliUpdate) SetSender(a *Address) *ReturnColliUpdate {
	return rcu.SetSenderID(a.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (rcu *ReturnColliUpdate) SetOrderID(id pulid.ID) *ReturnColliUpdate {
	rcu.mutation.SetOrderID(id)
	return rcu
}

// SetOrder sets the "order" edge to the Order entity.
func (rcu *ReturnColliUpdate) SetOrder(o *Order) *ReturnColliUpdate {
	return rcu.SetOrderID(o.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (rcu *ReturnColliUpdate) SetDeliveryOptionID(id pulid.ID) *ReturnColliUpdate {
	rcu.mutation.SetDeliveryOptionID(id)
	return rcu
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillableDeliveryOptionID(id *pulid.ID) *ReturnColliUpdate {
	if id != nil {
		rcu = rcu.SetDeliveryOptionID(*id)
	}
	return rcu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (rcu *ReturnColliUpdate) SetDeliveryOption(d *DeliveryOption) *ReturnColliUpdate {
	return rcu.SetDeliveryOptionID(d.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (rcu *ReturnColliUpdate) SetReturnPortalID(id pulid.ID) *ReturnColliUpdate {
	rcu.mutation.SetReturnPortalID(id)
	return rcu
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (rcu *ReturnColliUpdate) SetReturnPortal(r *ReturnPortal) *ReturnColliUpdate {
	return rcu.SetReturnPortalID(r.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (rcu *ReturnColliUpdate) SetPackagingID(id pulid.ID) *ReturnColliUpdate {
	rcu.mutation.SetPackagingID(id)
	return rcu
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (rcu *ReturnColliUpdate) SetNillablePackagingID(id *pulid.ID) *ReturnColliUpdate {
	if id != nil {
		rcu = rcu.SetPackagingID(*id)
	}
	return rcu
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (rcu *ReturnColliUpdate) SetPackaging(p *Packaging) *ReturnColliUpdate {
	return rcu.SetPackagingID(p.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (rcu *ReturnColliUpdate) AddReturnOrderLineIDs(ids ...pulid.ID) *ReturnColliUpdate {
	rcu.mutation.AddReturnOrderLineIDs(ids...)
	return rcu
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (rcu *ReturnColliUpdate) AddReturnOrderLine(r ...*ReturnOrderLine) *ReturnColliUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddReturnOrderLineIDs(ids...)
}

// AddReturnColliHistoryIDs adds the "return_colli_history" edge to the ReturnColliHistory entity by IDs.
func (rcu *ReturnColliUpdate) AddReturnColliHistoryIDs(ids ...pulid.ID) *ReturnColliUpdate {
	rcu.mutation.AddReturnColliHistoryIDs(ids...)
	return rcu
}

// AddReturnColliHistory adds the "return_colli_history" edges to the ReturnColliHistory entity.
func (rcu *ReturnColliUpdate) AddReturnColliHistory(r ...*ReturnColliHistory) *ReturnColliUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddReturnColliHistoryIDs(ids...)
}

// Mutation returns the ReturnColliMutation object of the builder.
func (rcu *ReturnColliUpdate) Mutation() *ReturnColliMutation {
	return rcu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rcu *ReturnColliUpdate) ClearTenant() *ReturnColliUpdate {
	rcu.mutation.ClearTenant()
	return rcu
}

// ClearRecipient clears the "recipient" edge to the Address entity.
func (rcu *ReturnColliUpdate) ClearRecipient() *ReturnColliUpdate {
	rcu.mutation.ClearRecipient()
	return rcu
}

// ClearSender clears the "sender" edge to the Address entity.
func (rcu *ReturnColliUpdate) ClearSender() *ReturnColliUpdate {
	rcu.mutation.ClearSender()
	return rcu
}

// ClearOrder clears the "order" edge to the Order entity.
func (rcu *ReturnColliUpdate) ClearOrder() *ReturnColliUpdate {
	rcu.mutation.ClearOrder()
	return rcu
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (rcu *ReturnColliUpdate) ClearDeliveryOption() *ReturnColliUpdate {
	rcu.mutation.ClearDeliveryOption()
	return rcu
}

// ClearReturnPortal clears the "return_portal" edge to the ReturnPortal entity.
func (rcu *ReturnColliUpdate) ClearReturnPortal() *ReturnColliUpdate {
	rcu.mutation.ClearReturnPortal()
	return rcu
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (rcu *ReturnColliUpdate) ClearPackaging() *ReturnColliUpdate {
	rcu.mutation.ClearPackaging()
	return rcu
}

// ClearReturnOrderLine clears all "return_order_line" edges to the ReturnOrderLine entity.
func (rcu *ReturnColliUpdate) ClearReturnOrderLine() *ReturnColliUpdate {
	rcu.mutation.ClearReturnOrderLine()
	return rcu
}

// RemoveReturnOrderLineIDs removes the "return_order_line" edge to ReturnOrderLine entities by IDs.
func (rcu *ReturnColliUpdate) RemoveReturnOrderLineIDs(ids ...pulid.ID) *ReturnColliUpdate {
	rcu.mutation.RemoveReturnOrderLineIDs(ids...)
	return rcu
}

// RemoveReturnOrderLine removes "return_order_line" edges to ReturnOrderLine entities.
func (rcu *ReturnColliUpdate) RemoveReturnOrderLine(r ...*ReturnOrderLine) *ReturnColliUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveReturnOrderLineIDs(ids...)
}

// ClearReturnColliHistory clears all "return_colli_history" edges to the ReturnColliHistory entity.
func (rcu *ReturnColliUpdate) ClearReturnColliHistory() *ReturnColliUpdate {
	rcu.mutation.ClearReturnColliHistory()
	return rcu
}

// RemoveReturnColliHistoryIDs removes the "return_colli_history" edge to ReturnColliHistory entities by IDs.
func (rcu *ReturnColliUpdate) RemoveReturnColliHistoryIDs(ids ...pulid.ID) *ReturnColliUpdate {
	rcu.mutation.RemoveReturnColliHistoryIDs(ids...)
	return rcu
}

// RemoveReturnColliHistory removes "return_colli_history" edges to ReturnColliHistory entities.
func (rcu *ReturnColliUpdate) RemoveReturnColliHistory(r ...*ReturnColliHistory) *ReturnColliUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveReturnColliHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *ReturnColliUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *ReturnColliUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *ReturnColliUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *ReturnColliUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcu *ReturnColliUpdate) check() error {
	if v, ok := rcu.mutation.Status(); ok {
		if err := returncolli.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ReturnColli.status": %w`, err)}
		}
	}
	if rcu.mutation.TenantCleared() && len(rcu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.tenant"`)
	}
	if rcu.mutation.RecipientCleared() && len(rcu.mutation.RecipientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.recipient"`)
	}
	if rcu.mutation.SenderCleared() && len(rcu.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.sender"`)
	}
	if rcu.mutation.OrderCleared() && len(rcu.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.order"`)
	}
	if rcu.mutation.ReturnPortalCleared() && len(rcu.mutation.ReturnPortalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.return_portal"`)
	}
	return nil
}

func (rcu *ReturnColliUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(returncolli.Table, returncolli.Columns, sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.ExpectedAt(); ok {
		_spec.SetField(returncolli.FieldExpectedAt, field.TypeTime, value)
	}
	if rcu.mutation.ExpectedAtCleared() {
		_spec.ClearField(returncolli.FieldExpectedAt, field.TypeTime)
	}
	if value, ok := rcu.mutation.LabelPdf(); ok {
		_spec.SetField(returncolli.FieldLabelPdf, field.TypeString, value)
	}
	if rcu.mutation.LabelPdfCleared() {
		_spec.ClearField(returncolli.FieldLabelPdf, field.TypeString)
	}
	if value, ok := rcu.mutation.LabelPng(); ok {
		_spec.SetField(returncolli.FieldLabelPng, field.TypeString, value)
	}
	if rcu.mutation.LabelPngCleared() {
		_spec.ClearField(returncolli.FieldLabelPng, field.TypeString)
	}
	if value, ok := rcu.mutation.QrCodePng(); ok {
		_spec.SetField(returncolli.FieldQrCodePng, field.TypeString, value)
	}
	if rcu.mutation.QrCodePngCleared() {
		_spec.ClearField(returncolli.FieldQrCodePng, field.TypeString)
	}
	if value, ok := rcu.mutation.Comment(); ok {
		_spec.SetField(returncolli.FieldComment, field.TypeString, value)
	}
	if rcu.mutation.CommentCleared() {
		_spec.ClearField(returncolli.FieldComment, field.TypeString)
	}
	if value, ok := rcu.mutation.Status(); ok {
		_spec.SetField(returncolli.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := rcu.mutation.EmailReceived(); ok {
		_spec.SetField(returncolli.FieldEmailReceived, field.TypeTime, value)
	}
	if rcu.mutation.EmailReceivedCleared() {
		_spec.ClearField(returncolli.FieldEmailReceived, field.TypeTime)
	}
	if value, ok := rcu.mutation.EmailAccepted(); ok {
		_spec.SetField(returncolli.FieldEmailAccepted, field.TypeTime, value)
	}
	if rcu.mutation.EmailAcceptedCleared() {
		_spec.ClearField(returncolli.FieldEmailAccepted, field.TypeTime)
	}
	if value, ok := rcu.mutation.EmailConfirmationLabel(); ok {
		_spec.SetField(returncolli.FieldEmailConfirmationLabel, field.TypeTime, value)
	}
	if rcu.mutation.EmailConfirmationLabelCleared() {
		_spec.ClearField(returncolli.FieldEmailConfirmationLabel, field.TypeTime)
	}
	if value, ok := rcu.mutation.EmailConfirmationQrCode(); ok {
		_spec.SetField(returncolli.FieldEmailConfirmationQrCode, field.TypeTime, value)
	}
	if rcu.mutation.EmailConfirmationQrCodeCleared() {
		_spec.ClearField(returncolli.FieldEmailConfirmationQrCode, field.TypeTime)
	}
	if rcu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.TenantTable,
			Columns: []string{returncolli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.TenantTable,
			Columns: []string{returncolli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.RecipientTable,
			Columns: []string{returncolli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.RecipientTable,
			Columns: []string{returncolli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.SenderTable,
			Columns: []string{returncolli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.SenderTable,
			Columns: []string{returncolli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncolli.OrderTable,
			Columns: []string{returncolli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncolli.OrderTable,
			Columns: []string{returncolli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.DeliveryOptionTable,
			Columns: []string{returncolli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.DeliveryOptionTable,
			Columns: []string{returncolli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.ReturnPortalTable,
			Columns: []string{returncolli.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.ReturnPortalTable,
			Columns: []string{returncolli.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.PackagingTable,
			Columns: []string{returncolli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.PackagingTable,
			Columns: []string{returncolli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnOrderLineTable,
			Columns: []string{returncolli.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedReturnOrderLineIDs(); len(nodes) > 0 && !rcu.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnOrderLineTable,
			Columns: []string{returncolli.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnOrderLineTable,
			Columns: []string{returncolli.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.ReturnColliHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnColliHistoryTable,
			Columns: []string{returncolli.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedReturnColliHistoryIDs(); len(nodes) > 0 && !rcu.mutation.ReturnColliHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnColliHistoryTable,
			Columns: []string{returncolli.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ReturnColliHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnColliHistoryTable,
			Columns: []string{returncolli.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returncolli.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// ReturnColliUpdateOne is the builder for updating a single ReturnColli entity.
type ReturnColliUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReturnColliMutation
}

// SetTenantID sets the "tenant_id" field.
func (rcuo *ReturnColliUpdateOne) SetTenantID(pu pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.SetTenantID(pu)
	return rcuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableTenantID(pu *pulid.ID) *ReturnColliUpdateOne {
	if pu != nil {
		rcuo.SetTenantID(*pu)
	}
	return rcuo
}

// SetExpectedAt sets the "expected_at" field.
func (rcuo *ReturnColliUpdateOne) SetExpectedAt(t time.Time) *ReturnColliUpdateOne {
	rcuo.mutation.SetExpectedAt(t)
	return rcuo
}

// SetNillableExpectedAt sets the "expected_at" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableExpectedAt(t *time.Time) *ReturnColliUpdateOne {
	if t != nil {
		rcuo.SetExpectedAt(*t)
	}
	return rcuo
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (rcuo *ReturnColliUpdateOne) ClearExpectedAt() *ReturnColliUpdateOne {
	rcuo.mutation.ClearExpectedAt()
	return rcuo
}

// SetLabelPdf sets the "label_pdf" field.
func (rcuo *ReturnColliUpdateOne) SetLabelPdf(s string) *ReturnColliUpdateOne {
	rcuo.mutation.SetLabelPdf(s)
	return rcuo
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableLabelPdf(s *string) *ReturnColliUpdateOne {
	if s != nil {
		rcuo.SetLabelPdf(*s)
	}
	return rcuo
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (rcuo *ReturnColliUpdateOne) ClearLabelPdf() *ReturnColliUpdateOne {
	rcuo.mutation.ClearLabelPdf()
	return rcuo
}

// SetLabelPng sets the "label_png" field.
func (rcuo *ReturnColliUpdateOne) SetLabelPng(s string) *ReturnColliUpdateOne {
	rcuo.mutation.SetLabelPng(s)
	return rcuo
}

// SetNillableLabelPng sets the "label_png" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableLabelPng(s *string) *ReturnColliUpdateOne {
	if s != nil {
		rcuo.SetLabelPng(*s)
	}
	return rcuo
}

// ClearLabelPng clears the value of the "label_png" field.
func (rcuo *ReturnColliUpdateOne) ClearLabelPng() *ReturnColliUpdateOne {
	rcuo.mutation.ClearLabelPng()
	return rcuo
}

// SetQrCodePng sets the "qr_code_png" field.
func (rcuo *ReturnColliUpdateOne) SetQrCodePng(s string) *ReturnColliUpdateOne {
	rcuo.mutation.SetQrCodePng(s)
	return rcuo
}

// SetNillableQrCodePng sets the "qr_code_png" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableQrCodePng(s *string) *ReturnColliUpdateOne {
	if s != nil {
		rcuo.SetQrCodePng(*s)
	}
	return rcuo
}

// ClearQrCodePng clears the value of the "qr_code_png" field.
func (rcuo *ReturnColliUpdateOne) ClearQrCodePng() *ReturnColliUpdateOne {
	rcuo.mutation.ClearQrCodePng()
	return rcuo
}

// SetComment sets the "comment" field.
func (rcuo *ReturnColliUpdateOne) SetComment(s string) *ReturnColliUpdateOne {
	rcuo.mutation.SetComment(s)
	return rcuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableComment(s *string) *ReturnColliUpdateOne {
	if s != nil {
		rcuo.SetComment(*s)
	}
	return rcuo
}

// ClearComment clears the value of the "comment" field.
func (rcuo *ReturnColliUpdateOne) ClearComment() *ReturnColliUpdateOne {
	rcuo.mutation.ClearComment()
	return rcuo
}

// SetStatus sets the "status" field.
func (rcuo *ReturnColliUpdateOne) SetStatus(r returncolli.Status) *ReturnColliUpdateOne {
	rcuo.mutation.SetStatus(r)
	return rcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableStatus(r *returncolli.Status) *ReturnColliUpdateOne {
	if r != nil {
		rcuo.SetStatus(*r)
	}
	return rcuo
}

// SetEmailReceived sets the "email_received" field.
func (rcuo *ReturnColliUpdateOne) SetEmailReceived(t time.Time) *ReturnColliUpdateOne {
	rcuo.mutation.SetEmailReceived(t)
	return rcuo
}

// SetNillableEmailReceived sets the "email_received" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableEmailReceived(t *time.Time) *ReturnColliUpdateOne {
	if t != nil {
		rcuo.SetEmailReceived(*t)
	}
	return rcuo
}

// ClearEmailReceived clears the value of the "email_received" field.
func (rcuo *ReturnColliUpdateOne) ClearEmailReceived() *ReturnColliUpdateOne {
	rcuo.mutation.ClearEmailReceived()
	return rcuo
}

// SetEmailAccepted sets the "email_accepted" field.
func (rcuo *ReturnColliUpdateOne) SetEmailAccepted(t time.Time) *ReturnColliUpdateOne {
	rcuo.mutation.SetEmailAccepted(t)
	return rcuo
}

// SetNillableEmailAccepted sets the "email_accepted" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableEmailAccepted(t *time.Time) *ReturnColliUpdateOne {
	if t != nil {
		rcuo.SetEmailAccepted(*t)
	}
	return rcuo
}

// ClearEmailAccepted clears the value of the "email_accepted" field.
func (rcuo *ReturnColliUpdateOne) ClearEmailAccepted() *ReturnColliUpdateOne {
	rcuo.mutation.ClearEmailAccepted()
	return rcuo
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" field.
func (rcuo *ReturnColliUpdateOne) SetEmailConfirmationLabel(t time.Time) *ReturnColliUpdateOne {
	rcuo.mutation.SetEmailConfirmationLabel(t)
	return rcuo
}

// SetNillableEmailConfirmationLabel sets the "email_confirmation_label" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableEmailConfirmationLabel(t *time.Time) *ReturnColliUpdateOne {
	if t != nil {
		rcuo.SetEmailConfirmationLabel(*t)
	}
	return rcuo
}

// ClearEmailConfirmationLabel clears the value of the "email_confirmation_label" field.
func (rcuo *ReturnColliUpdateOne) ClearEmailConfirmationLabel() *ReturnColliUpdateOne {
	rcuo.mutation.ClearEmailConfirmationLabel()
	return rcuo
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" field.
func (rcuo *ReturnColliUpdateOne) SetEmailConfirmationQrCode(t time.Time) *ReturnColliUpdateOne {
	rcuo.mutation.SetEmailConfirmationQrCode(t)
	return rcuo
}

// SetNillableEmailConfirmationQrCode sets the "email_confirmation_qr_code" field if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableEmailConfirmationQrCode(t *time.Time) *ReturnColliUpdateOne {
	if t != nil {
		rcuo.SetEmailConfirmationQrCode(*t)
	}
	return rcuo
}

// ClearEmailConfirmationQrCode clears the value of the "email_confirmation_qr_code" field.
func (rcuo *ReturnColliUpdateOne) ClearEmailConfirmationQrCode() *ReturnColliUpdateOne {
	rcuo.mutation.ClearEmailConfirmationQrCode()
	return rcuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rcuo *ReturnColliUpdateOne) SetTenant(t *Tenant) *ReturnColliUpdateOne {
	return rcuo.SetTenantID(t.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (rcuo *ReturnColliUpdateOne) SetRecipientID(id pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.SetRecipientID(id)
	return rcuo
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (rcuo *ReturnColliUpdateOne) SetRecipient(a *Address) *ReturnColliUpdateOne {
	return rcuo.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (rcuo *ReturnColliUpdateOne) SetSenderID(id pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.SetSenderID(id)
	return rcuo
}

// SetSender sets the "sender" edge to the Address entity.
func (rcuo *ReturnColliUpdateOne) SetSender(a *Address) *ReturnColliUpdateOne {
	return rcuo.SetSenderID(a.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (rcuo *ReturnColliUpdateOne) SetOrderID(id pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.SetOrderID(id)
	return rcuo
}

// SetOrder sets the "order" edge to the Order entity.
func (rcuo *ReturnColliUpdateOne) SetOrder(o *Order) *ReturnColliUpdateOne {
	return rcuo.SetOrderID(o.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (rcuo *ReturnColliUpdateOne) SetDeliveryOptionID(id pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.SetDeliveryOptionID(id)
	return rcuo
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillableDeliveryOptionID(id *pulid.ID) *ReturnColliUpdateOne {
	if id != nil {
		rcuo = rcuo.SetDeliveryOptionID(*id)
	}
	return rcuo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (rcuo *ReturnColliUpdateOne) SetDeliveryOption(d *DeliveryOption) *ReturnColliUpdateOne {
	return rcuo.SetDeliveryOptionID(d.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (rcuo *ReturnColliUpdateOne) SetReturnPortalID(id pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.SetReturnPortalID(id)
	return rcuo
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (rcuo *ReturnColliUpdateOne) SetReturnPortal(r *ReturnPortal) *ReturnColliUpdateOne {
	return rcuo.SetReturnPortalID(r.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (rcuo *ReturnColliUpdateOne) SetPackagingID(id pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.SetPackagingID(id)
	return rcuo
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (rcuo *ReturnColliUpdateOne) SetNillablePackagingID(id *pulid.ID) *ReturnColliUpdateOne {
	if id != nil {
		rcuo = rcuo.SetPackagingID(*id)
	}
	return rcuo
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (rcuo *ReturnColliUpdateOne) SetPackaging(p *Packaging) *ReturnColliUpdateOne {
	return rcuo.SetPackagingID(p.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (rcuo *ReturnColliUpdateOne) AddReturnOrderLineIDs(ids ...pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.AddReturnOrderLineIDs(ids...)
	return rcuo
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (rcuo *ReturnColliUpdateOne) AddReturnOrderLine(r ...*ReturnOrderLine) *ReturnColliUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddReturnOrderLineIDs(ids...)
}

// AddReturnColliHistoryIDs adds the "return_colli_history" edge to the ReturnColliHistory entity by IDs.
func (rcuo *ReturnColliUpdateOne) AddReturnColliHistoryIDs(ids ...pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.AddReturnColliHistoryIDs(ids...)
	return rcuo
}

// AddReturnColliHistory adds the "return_colli_history" edges to the ReturnColliHistory entity.
func (rcuo *ReturnColliUpdateOne) AddReturnColliHistory(r ...*ReturnColliHistory) *ReturnColliUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddReturnColliHistoryIDs(ids...)
}

// Mutation returns the ReturnColliMutation object of the builder.
func (rcuo *ReturnColliUpdateOne) Mutation() *ReturnColliMutation {
	return rcuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rcuo *ReturnColliUpdateOne) ClearTenant() *ReturnColliUpdateOne {
	rcuo.mutation.ClearTenant()
	return rcuo
}

// ClearRecipient clears the "recipient" edge to the Address entity.
func (rcuo *ReturnColliUpdateOne) ClearRecipient() *ReturnColliUpdateOne {
	rcuo.mutation.ClearRecipient()
	return rcuo
}

// ClearSender clears the "sender" edge to the Address entity.
func (rcuo *ReturnColliUpdateOne) ClearSender() *ReturnColliUpdateOne {
	rcuo.mutation.ClearSender()
	return rcuo
}

// ClearOrder clears the "order" edge to the Order entity.
func (rcuo *ReturnColliUpdateOne) ClearOrder() *ReturnColliUpdateOne {
	rcuo.mutation.ClearOrder()
	return rcuo
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (rcuo *ReturnColliUpdateOne) ClearDeliveryOption() *ReturnColliUpdateOne {
	rcuo.mutation.ClearDeliveryOption()
	return rcuo
}

// ClearReturnPortal clears the "return_portal" edge to the ReturnPortal entity.
func (rcuo *ReturnColliUpdateOne) ClearReturnPortal() *ReturnColliUpdateOne {
	rcuo.mutation.ClearReturnPortal()
	return rcuo
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (rcuo *ReturnColliUpdateOne) ClearPackaging() *ReturnColliUpdateOne {
	rcuo.mutation.ClearPackaging()
	return rcuo
}

// ClearReturnOrderLine clears all "return_order_line" edges to the ReturnOrderLine entity.
func (rcuo *ReturnColliUpdateOne) ClearReturnOrderLine() *ReturnColliUpdateOne {
	rcuo.mutation.ClearReturnOrderLine()
	return rcuo
}

// RemoveReturnOrderLineIDs removes the "return_order_line" edge to ReturnOrderLine entities by IDs.
func (rcuo *ReturnColliUpdateOne) RemoveReturnOrderLineIDs(ids ...pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.RemoveReturnOrderLineIDs(ids...)
	return rcuo
}

// RemoveReturnOrderLine removes "return_order_line" edges to ReturnOrderLine entities.
func (rcuo *ReturnColliUpdateOne) RemoveReturnOrderLine(r ...*ReturnOrderLine) *ReturnColliUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveReturnOrderLineIDs(ids...)
}

// ClearReturnColliHistory clears all "return_colli_history" edges to the ReturnColliHistory entity.
func (rcuo *ReturnColliUpdateOne) ClearReturnColliHistory() *ReturnColliUpdateOne {
	rcuo.mutation.ClearReturnColliHistory()
	return rcuo
}

// RemoveReturnColliHistoryIDs removes the "return_colli_history" edge to ReturnColliHistory entities by IDs.
func (rcuo *ReturnColliUpdateOne) RemoveReturnColliHistoryIDs(ids ...pulid.ID) *ReturnColliUpdateOne {
	rcuo.mutation.RemoveReturnColliHistoryIDs(ids...)
	return rcuo
}

// RemoveReturnColliHistory removes "return_colli_history" edges to ReturnColliHistory entities.
func (rcuo *ReturnColliUpdateOne) RemoveReturnColliHistory(r ...*ReturnColliHistory) *ReturnColliUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveReturnColliHistoryIDs(ids...)
}

// Where appends a list predicates to the ReturnColliUpdate builder.
func (rcuo *ReturnColliUpdateOne) Where(ps ...predicate.ReturnColli) *ReturnColliUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *ReturnColliUpdateOne) Select(field string, fields ...string) *ReturnColliUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated ReturnColli entity.
func (rcuo *ReturnColliUpdateOne) Save(ctx context.Context) (*ReturnColli, error) {
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *ReturnColliUpdateOne) SaveX(ctx context.Context) *ReturnColli {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *ReturnColliUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *ReturnColliUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *ReturnColliUpdateOne) check() error {
	if v, ok := rcuo.mutation.Status(); ok {
		if err := returncolli.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ReturnColli.status": %w`, err)}
		}
	}
	if rcuo.mutation.TenantCleared() && len(rcuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.tenant"`)
	}
	if rcuo.mutation.RecipientCleared() && len(rcuo.mutation.RecipientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.recipient"`)
	}
	if rcuo.mutation.SenderCleared() && len(rcuo.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.sender"`)
	}
	if rcuo.mutation.OrderCleared() && len(rcuo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.order"`)
	}
	if rcuo.mutation.ReturnPortalCleared() && len(rcuo.mutation.ReturnPortalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColli.return_portal"`)
	}
	return nil
}

func (rcuo *ReturnColliUpdateOne) sqlSave(ctx context.Context) (_node *ReturnColli, err error) {
	if err := rcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(returncolli.Table, returncolli.Columns, sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReturnColli.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, returncolli.FieldID)
		for _, f := range fields {
			if !returncolli.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != returncolli.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.ExpectedAt(); ok {
		_spec.SetField(returncolli.FieldExpectedAt, field.TypeTime, value)
	}
	if rcuo.mutation.ExpectedAtCleared() {
		_spec.ClearField(returncolli.FieldExpectedAt, field.TypeTime)
	}
	if value, ok := rcuo.mutation.LabelPdf(); ok {
		_spec.SetField(returncolli.FieldLabelPdf, field.TypeString, value)
	}
	if rcuo.mutation.LabelPdfCleared() {
		_spec.ClearField(returncolli.FieldLabelPdf, field.TypeString)
	}
	if value, ok := rcuo.mutation.LabelPng(); ok {
		_spec.SetField(returncolli.FieldLabelPng, field.TypeString, value)
	}
	if rcuo.mutation.LabelPngCleared() {
		_spec.ClearField(returncolli.FieldLabelPng, field.TypeString)
	}
	if value, ok := rcuo.mutation.QrCodePng(); ok {
		_spec.SetField(returncolli.FieldQrCodePng, field.TypeString, value)
	}
	if rcuo.mutation.QrCodePngCleared() {
		_spec.ClearField(returncolli.FieldQrCodePng, field.TypeString)
	}
	if value, ok := rcuo.mutation.Comment(); ok {
		_spec.SetField(returncolli.FieldComment, field.TypeString, value)
	}
	if rcuo.mutation.CommentCleared() {
		_spec.ClearField(returncolli.FieldComment, field.TypeString)
	}
	if value, ok := rcuo.mutation.Status(); ok {
		_spec.SetField(returncolli.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := rcuo.mutation.EmailReceived(); ok {
		_spec.SetField(returncolli.FieldEmailReceived, field.TypeTime, value)
	}
	if rcuo.mutation.EmailReceivedCleared() {
		_spec.ClearField(returncolli.FieldEmailReceived, field.TypeTime)
	}
	if value, ok := rcuo.mutation.EmailAccepted(); ok {
		_spec.SetField(returncolli.FieldEmailAccepted, field.TypeTime, value)
	}
	if rcuo.mutation.EmailAcceptedCleared() {
		_spec.ClearField(returncolli.FieldEmailAccepted, field.TypeTime)
	}
	if value, ok := rcuo.mutation.EmailConfirmationLabel(); ok {
		_spec.SetField(returncolli.FieldEmailConfirmationLabel, field.TypeTime, value)
	}
	if rcuo.mutation.EmailConfirmationLabelCleared() {
		_spec.ClearField(returncolli.FieldEmailConfirmationLabel, field.TypeTime)
	}
	if value, ok := rcuo.mutation.EmailConfirmationQrCode(); ok {
		_spec.SetField(returncolli.FieldEmailConfirmationQrCode, field.TypeTime, value)
	}
	if rcuo.mutation.EmailConfirmationQrCodeCleared() {
		_spec.ClearField(returncolli.FieldEmailConfirmationQrCode, field.TypeTime)
	}
	if rcuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.TenantTable,
			Columns: []string{returncolli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.TenantTable,
			Columns: []string{returncolli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.RecipientTable,
			Columns: []string{returncolli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.RecipientTable,
			Columns: []string{returncolli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.SenderTable,
			Columns: []string{returncolli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.SenderTable,
			Columns: []string{returncolli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncolli.OrderTable,
			Columns: []string{returncolli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncolli.OrderTable,
			Columns: []string{returncolli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.DeliveryOptionTable,
			Columns: []string{returncolli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.DeliveryOptionTable,
			Columns: []string{returncolli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.ReturnPortalTable,
			Columns: []string{returncolli.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.ReturnPortalTable,
			Columns: []string{returncolli.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.PackagingTable,
			Columns: []string{returncolli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.PackagingTable,
			Columns: []string{returncolli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnOrderLineTable,
			Columns: []string{returncolli.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedReturnOrderLineIDs(); len(nodes) > 0 && !rcuo.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnOrderLineTable,
			Columns: []string{returncolli.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnOrderLineTable,
			Columns: []string{returncolli.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.ReturnColliHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnColliHistoryTable,
			Columns: []string{returncolli.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedReturnColliHistoryIDs(); len(nodes) > 0 && !rcuo.mutation.ReturnColliHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnColliHistoryTable,
			Columns: []string{returncolli.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ReturnColliHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnColliHistoryTable,
			Columns: []string{returncolli.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReturnColli{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returncolli.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
