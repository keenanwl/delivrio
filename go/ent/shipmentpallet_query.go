// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentPalletQuery is the builder for querying ShipmentPallet entities.
type ShipmentPalletQuery struct {
	config
	ctx                *QueryContext
	order              []shipmentpallet.OrderOption
	inters             []Interceptor
	predicates         []predicate.ShipmentPallet
	withTenant         *TenantQuery
	withPallet         *PalletQuery
	withOldPallet      *PalletQuery
	withShipment       *ShipmentQuery
	withFKs            bool
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*ShipmentPallet) error
	withNamedOldPallet map[string]*PalletQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShipmentPalletQuery builder.
func (spq *ShipmentPalletQuery) Where(ps ...predicate.ShipmentPallet) *ShipmentPalletQuery {
	spq.predicates = append(spq.predicates, ps...)
	return spq
}

// Limit the number of records to be returned by this query.
func (spq *ShipmentPalletQuery) Limit(limit int) *ShipmentPalletQuery {
	spq.ctx.Limit = &limit
	return spq
}

// Offset to start from.
func (spq *ShipmentPalletQuery) Offset(offset int) *ShipmentPalletQuery {
	spq.ctx.Offset = &offset
	return spq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spq *ShipmentPalletQuery) Unique(unique bool) *ShipmentPalletQuery {
	spq.ctx.Unique = &unique
	return spq
}

// Order specifies how the records should be ordered.
func (spq *ShipmentPalletQuery) Order(o ...shipmentpallet.OrderOption) *ShipmentPalletQuery {
	spq.order = append(spq.order, o...)
	return spq
}

// QueryTenant chains the current query on the "tenant" edge.
func (spq *ShipmentPalletQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpallet.Table, shipmentpallet.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentpallet.TenantTable, shipmentpallet.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPallet chains the current query on the "pallet" edge.
func (spq *ShipmentPalletQuery) QueryPallet() *PalletQuery {
	query := (&PalletClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpallet.Table, shipmentpallet.FieldID, selector),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentpallet.PalletTable, shipmentpallet.PalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOldPallet chains the current query on the "old_pallet" edge.
func (spq *ShipmentPalletQuery) QueryOldPallet() *PalletQuery {
	query := (&PalletClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpallet.Table, shipmentpallet.FieldID, selector),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, shipmentpallet.OldPalletTable, shipmentpallet.OldPalletPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipment chains the current query on the "shipment" edge.
func (spq *ShipmentPalletQuery) QueryShipment() *ShipmentQuery {
	query := (&ShipmentClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpallet.Table, shipmentpallet.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentpallet.ShipmentTable, shipmentpallet.ShipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ShipmentPallet entity from the query.
// Returns a *NotFoundError when no ShipmentPallet was found.
func (spq *ShipmentPalletQuery) First(ctx context.Context) (*ShipmentPallet, error) {
	nodes, err := spq.Limit(1).All(setContextOp(ctx, spq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shipmentpallet.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spq *ShipmentPalletQuery) FirstX(ctx context.Context) *ShipmentPallet {
	node, err := spq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShipmentPallet ID from the query.
// Returns a *NotFoundError when no ShipmentPallet ID was found.
func (spq *ShipmentPalletQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = spq.Limit(1).IDs(setContextOp(ctx, spq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shipmentpallet.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spq *ShipmentPalletQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := spq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ShipmentPallet entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ShipmentPallet entity is found.
// Returns a *NotFoundError when no ShipmentPallet entities are found.
func (spq *ShipmentPalletQuery) Only(ctx context.Context) (*ShipmentPallet, error) {
	nodes, err := spq.Limit(2).All(setContextOp(ctx, spq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shipmentpallet.Label}
	default:
		return nil, &NotSingularError{shipmentpallet.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spq *ShipmentPalletQuery) OnlyX(ctx context.Context) *ShipmentPallet {
	node, err := spq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ShipmentPallet ID in the query.
// Returns a *NotSingularError when more than one ShipmentPallet ID is found.
// Returns a *NotFoundError when no entities are found.
func (spq *ShipmentPalletQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = spq.Limit(2).IDs(setContextOp(ctx, spq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shipmentpallet.Label}
	default:
		err = &NotSingularError{shipmentpallet.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spq *ShipmentPalletQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := spq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShipmentPallets.
func (spq *ShipmentPalletQuery) All(ctx context.Context) ([]*ShipmentPallet, error) {
	ctx = setContextOp(ctx, spq.ctx, ent.OpQueryAll)
	if err := spq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ShipmentPallet, *ShipmentPalletQuery]()
	return withInterceptors[[]*ShipmentPallet](ctx, spq, qr, spq.inters)
}

// AllX is like All, but panics if an error occurs.
func (spq *ShipmentPalletQuery) AllX(ctx context.Context) []*ShipmentPallet {
	nodes, err := spq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShipmentPallet IDs.
func (spq *ShipmentPalletQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if spq.ctx.Unique == nil && spq.path != nil {
		spq.Unique(true)
	}
	ctx = setContextOp(ctx, spq.ctx, ent.OpQueryIDs)
	if err = spq.Select(shipmentpallet.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spq *ShipmentPalletQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := spq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spq *ShipmentPalletQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, spq.ctx, ent.OpQueryCount)
	if err := spq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, spq, querierCount[*ShipmentPalletQuery](), spq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (spq *ShipmentPalletQuery) CountX(ctx context.Context) int {
	count, err := spq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spq *ShipmentPalletQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, spq.ctx, ent.OpQueryExist)
	switch _, err := spq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (spq *ShipmentPalletQuery) ExistX(ctx context.Context) bool {
	exist, err := spq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShipmentPalletQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spq *ShipmentPalletQuery) Clone() *ShipmentPalletQuery {
	if spq == nil {
		return nil
	}
	return &ShipmentPalletQuery{
		config:        spq.config,
		ctx:           spq.ctx.Clone(),
		order:         append([]shipmentpallet.OrderOption{}, spq.order...),
		inters:        append([]Interceptor{}, spq.inters...),
		predicates:    append([]predicate.ShipmentPallet{}, spq.predicates...),
		withTenant:    spq.withTenant.Clone(),
		withPallet:    spq.withPallet.Clone(),
		withOldPallet: spq.withOldPallet.Clone(),
		withShipment:  spq.withShipment.Clone(),
		// clone intermediate query.
		sql:  spq.sql.Clone(),
		path: spq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentPalletQuery) WithTenant(opts ...func(*TenantQuery)) *ShipmentPalletQuery {
	query := (&TenantClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withTenant = query
	return spq
}

// WithPallet tells the query-builder to eager-load the nodes that are connected to
// the "pallet" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentPalletQuery) WithPallet(opts ...func(*PalletQuery)) *ShipmentPalletQuery {
	query := (&PalletClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withPallet = query
	return spq
}

// WithOldPallet tells the query-builder to eager-load the nodes that are connected to
// the "old_pallet" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentPalletQuery) WithOldPallet(opts ...func(*PalletQuery)) *ShipmentPalletQuery {
	query := (&PalletClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withOldPallet = query
	return spq
}

// WithShipment tells the query-builder to eager-load the nodes that are connected to
// the "shipment" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentPalletQuery) WithShipment(opts ...func(*ShipmentQuery)) *ShipmentPalletQuery {
	query := (&ShipmentClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withShipment = query
	return spq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ShipmentPallet.Query().
//		GroupBy(shipmentpallet.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (spq *ShipmentPalletQuery) GroupBy(field string, fields ...string) *ShipmentPalletGroupBy {
	spq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ShipmentPalletGroupBy{build: spq}
	grbuild.flds = &spq.ctx.Fields
	grbuild.label = shipmentpallet.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ShipmentPallet.Query().
//		Select(shipmentpallet.FieldTenantID).
//		Scan(ctx, &v)
func (spq *ShipmentPalletQuery) Select(fields ...string) *ShipmentPalletSelect {
	spq.ctx.Fields = append(spq.ctx.Fields, fields...)
	sbuild := &ShipmentPalletSelect{ShipmentPalletQuery: spq}
	sbuild.label = shipmentpallet.Label
	sbuild.flds, sbuild.scan = &spq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ShipmentPalletSelect configured with the given aggregations.
func (spq *ShipmentPalletQuery) Aggregate(fns ...AggregateFunc) *ShipmentPalletSelect {
	return spq.Select().Aggregate(fns...)
}

func (spq *ShipmentPalletQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range spq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, spq); err != nil {
				return err
			}
		}
	}
	for _, f := range spq.ctx.Fields {
		if !shipmentpallet.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if spq.path != nil {
		prev, err := spq.path(ctx)
		if err != nil {
			return err
		}
		spq.sql = prev
	}
	if shipmentpallet.Policy == nil {
		return errors.New("ent: uninitialized shipmentpallet.Policy (forgotten import ent/runtime?)")
	}
	if err := shipmentpallet.Policy.EvalQuery(ctx, spq); err != nil {
		return err
	}
	return nil
}

func (spq *ShipmentPalletQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ShipmentPallet, error) {
	var (
		nodes       = []*ShipmentPallet{}
		withFKs     = spq.withFKs
		_spec       = spq.querySpec()
		loadedTypes = [4]bool{
			spq.withTenant != nil,
			spq.withPallet != nil,
			spq.withOldPallet != nil,
			spq.withShipment != nil,
		}
	)
	if spq.withPallet != nil || spq.withShipment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentpallet.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ShipmentPallet).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ShipmentPallet{config: spq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(spq.modifiers) > 0 {
		_spec.Modifiers = spq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, spq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := spq.withTenant; query != nil {
		if err := spq.loadTenant(ctx, query, nodes, nil,
			func(n *ShipmentPallet, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withPallet; query != nil {
		if err := spq.loadPallet(ctx, query, nodes, nil,
			func(n *ShipmentPallet, e *Pallet) { n.Edges.Pallet = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withOldPallet; query != nil {
		if err := spq.loadOldPallet(ctx, query, nodes,
			func(n *ShipmentPallet) { n.Edges.OldPallet = []*Pallet{} },
			func(n *ShipmentPallet, e *Pallet) { n.Edges.OldPallet = append(n.Edges.OldPallet, e) }); err != nil {
			return nil, err
		}
	}
	if query := spq.withShipment; query != nil {
		if err := spq.loadShipment(ctx, query, nodes, nil,
			func(n *ShipmentPallet, e *Shipment) { n.Edges.Shipment = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range spq.withNamedOldPallet {
		if err := spq.loadOldPallet(ctx, query, nodes,
			func(n *ShipmentPallet) { n.appendNamedOldPallet(name) },
			func(n *ShipmentPallet, e *Pallet) { n.appendNamedOldPallet(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range spq.loadTotal {
		if err := spq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (spq *ShipmentPalletQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ShipmentPallet, init func(*ShipmentPallet), assign func(*ShipmentPallet, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentPallet)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *ShipmentPalletQuery) loadPallet(ctx context.Context, query *PalletQuery, nodes []*ShipmentPallet, init func(*ShipmentPallet), assign func(*ShipmentPallet, *Pallet)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentPallet)
	for i := range nodes {
		if nodes[i].pallet_shipment_pallet == nil {
			continue
		}
		fk := *nodes[i].pallet_shipment_pallet
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(pallet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "pallet_shipment_pallet" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *ShipmentPalletQuery) loadOldPallet(ctx context.Context, query *PalletQuery, nodes []*ShipmentPallet, init func(*ShipmentPallet), assign func(*ShipmentPallet, *Pallet)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*ShipmentPallet)
	nids := make(map[pulid.ID]map[*ShipmentPallet]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(shipmentpallet.OldPalletTable)
		s.Join(joinT).On(s.C(pallet.FieldID), joinT.C(shipmentpallet.OldPalletPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(shipmentpallet.OldPalletPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(shipmentpallet.OldPalletPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ShipmentPallet]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Pallet](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "old_pallet" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (spq *ShipmentPalletQuery) loadShipment(ctx context.Context, query *ShipmentQuery, nodes []*ShipmentPallet, init func(*ShipmentPallet), assign func(*ShipmentPallet, *Shipment)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentPallet)
	for i := range nodes {
		if nodes[i].shipment_shipment_pallet == nil {
			continue
		}
		fk := *nodes[i].shipment_shipment_pallet
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_shipment_pallet" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (spq *ShipmentPalletQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spq.querySpec()
	if len(spq.modifiers) > 0 {
		_spec.Modifiers = spq.modifiers
	}
	_spec.Node.Columns = spq.ctx.Fields
	if len(spq.ctx.Fields) > 0 {
		_spec.Unique = spq.ctx.Unique != nil && *spq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, spq.driver, _spec)
}

func (spq *ShipmentPalletQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(shipmentpallet.Table, shipmentpallet.Columns, sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString))
	_spec.From = spq.sql
	if unique := spq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if spq.path != nil {
		_spec.Unique = true
	}
	if fields := spq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentpallet.FieldID)
		for i := range fields {
			if fields[i] != shipmentpallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if spq.withTenant != nil {
			_spec.Node.AddColumnOnce(shipmentpallet.FieldTenantID)
		}
	}
	if ps := spq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spq *ShipmentPalletQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spq.driver.Dialect())
	t1 := builder.Table(shipmentpallet.Table)
	columns := spq.ctx.Fields
	if len(columns) == 0 {
		columns = shipmentpallet.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spq.sql != nil {
		selector = spq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if spq.ctx.Unique != nil && *spq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range spq.predicates {
		p(selector)
	}
	for _, p := range spq.order {
		p(selector)
	}
	if offset := spq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedOldPallet tells the query-builder to eager-load the nodes that are connected to the "old_pallet"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentPalletQuery) WithNamedOldPallet(name string, opts ...func(*PalletQuery)) *ShipmentPalletQuery {
	query := (&PalletClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if spq.withNamedOldPallet == nil {
		spq.withNamedOldPallet = make(map[string]*PalletQuery)
	}
	spq.withNamedOldPallet[name] = query
	return spq
}

// ShipmentPalletGroupBy is the group-by builder for ShipmentPallet entities.
type ShipmentPalletGroupBy struct {
	selector
	build *ShipmentPalletQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spgb *ShipmentPalletGroupBy) Aggregate(fns ...AggregateFunc) *ShipmentPalletGroupBy {
	spgb.fns = append(spgb.fns, fns...)
	return spgb
}

// Scan applies the selector query and scans the result into the given value.
func (spgb *ShipmentPalletGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spgb.build.ctx, ent.OpQueryGroupBy)
	if err := spgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentPalletQuery, *ShipmentPalletGroupBy](ctx, spgb.build, spgb, spgb.build.inters, v)
}

func (spgb *ShipmentPalletGroupBy) sqlScan(ctx context.Context, root *ShipmentPalletQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(spgb.fns))
	for _, fn := range spgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*spgb.flds)+len(spgb.fns))
		for _, f := range *spgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*spgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ShipmentPalletSelect is the builder for selecting fields of ShipmentPallet entities.
type ShipmentPalletSelect struct {
	*ShipmentPalletQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sps *ShipmentPalletSelect) Aggregate(fns ...AggregateFunc) *ShipmentPalletSelect {
	sps.fns = append(sps.fns, fns...)
	return sps
}

// Scan applies the selector query and scans the result into the given value.
func (sps *ShipmentPalletSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sps.ctx, ent.OpQuerySelect)
	if err := sps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentPalletQuery, *ShipmentPalletSelect](ctx, sps.ShipmentPalletQuery, sps, sps.inters, v)
}

func (sps *ShipmentPalletSelect) sqlScan(ctx context.Context, root *ShipmentPalletQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sps.fns))
	for _, fn := range sps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
