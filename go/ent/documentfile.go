// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DocumentFile is the model entity for the DocumentFile schema.
type DocumentFile struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// StorageType holds the value of the "storage_type" field.
	StorageType documentfile.StorageType `json:"storage_type,omitempty"`
	// StoragePath holds the value of the "storage_path" field.
	StoragePath string `json:"storage_path,omitempty"`
	// StoragePathZpl holds the value of the "storage_path_zpl" field.
	StoragePathZpl string `json:"storage_path_zpl,omitempty"`
	// DocType holds the value of the "doc_type" field.
	DocType documentfile.DocType `json:"doc_type,omitempty"`
	// DataPdfBase64 holds the value of the "data_pdf_base64" field.
	DataPdfBase64 string `json:"data_pdf_base64,omitempty"`
	// DataZplBase64 holds the value of the "data_zpl_base64" field.
	DataZplBase64 string `json:"data_zpl_base64,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentFileQuery when eager-loading is set.
	Edges                         DocumentFileEdges `json:"edges"`
	colli_document_file           *pulid.ID
	shipment_parcel_document_file *pulid.ID
	selectValues                  sql.SelectValues
}

// DocumentFileEdges holds the relations/edges for other nodes in the graph.
type DocumentFileEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Colli holds the value of the colli edge.
	Colli *Colli `json:"colli,omitempty"`
	// ShipmentParcel holds the value of the shipment_parcel edge.
	ShipmentParcel *ShipmentParcel `json:"shipment_parcel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentFileEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ColliOrErr returns the Colli value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentFileEdges) ColliOrErr() (*Colli, error) {
	if e.Colli != nil {
		return e.Colli, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: colli.Label}
	}
	return nil, &NotLoadedError{edge: "colli"}
}

// ShipmentParcelOrErr returns the ShipmentParcel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentFileEdges) ShipmentParcelOrErr() (*ShipmentParcel, error) {
	if e.ShipmentParcel != nil {
		return e.ShipmentParcel, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: shipmentparcel.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_parcel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DocumentFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case documentfile.FieldID, documentfile.FieldTenantID:
			values[i] = new(pulid.ID)
		case documentfile.FieldStorageType, documentfile.FieldStoragePath, documentfile.FieldStoragePathZpl, documentfile.FieldDocType, documentfile.FieldDataPdfBase64, documentfile.FieldDataZplBase64:
			values[i] = new(sql.NullString)
		case documentfile.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case documentfile.ForeignKeys[0]: // colli_document_file
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case documentfile.ForeignKeys[1]: // shipment_parcel_document_file
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DocumentFile fields.
func (df *DocumentFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case documentfile.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				df.ID = *value
			}
		case documentfile.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				df.TenantID = *value
			}
		case documentfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				df.CreatedAt = value.Time
			}
		case documentfile.FieldStorageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_type", values[i])
			} else if value.Valid {
				df.StorageType = documentfile.StorageType(value.String)
			}
		case documentfile.FieldStoragePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_path", values[i])
			} else if value.Valid {
				df.StoragePath = value.String
			}
		case documentfile.FieldStoragePathZpl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_path_zpl", values[i])
			} else if value.Valid {
				df.StoragePathZpl = value.String
			}
		case documentfile.FieldDocType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field doc_type", values[i])
			} else if value.Valid {
				df.DocType = documentfile.DocType(value.String)
			}
		case documentfile.FieldDataPdfBase64:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_pdf_base64", values[i])
			} else if value.Valid {
				df.DataPdfBase64 = value.String
			}
		case documentfile.FieldDataZplBase64:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_zpl_base64", values[i])
			} else if value.Valid {
				df.DataZplBase64 = value.String
			}
		case documentfile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field colli_document_file", values[i])
			} else if value.Valid {
				df.colli_document_file = new(pulid.ID)
				*df.colli_document_file = *value.S.(*pulid.ID)
			}
		case documentfile.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_parcel_document_file", values[i])
			} else if value.Valid {
				df.shipment_parcel_document_file = new(pulid.ID)
				*df.shipment_parcel_document_file = *value.S.(*pulid.ID)
			}
		default:
			df.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DocumentFile.
// This includes values selected through modifiers, order, etc.
func (df *DocumentFile) Value(name string) (ent.Value, error) {
	return df.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the DocumentFile entity.
func (df *DocumentFile) QueryTenant() *TenantQuery {
	return NewDocumentFileClient(df.config).QueryTenant(df)
}

// QueryColli queries the "colli" edge of the DocumentFile entity.
func (df *DocumentFile) QueryColli() *ColliQuery {
	return NewDocumentFileClient(df.config).QueryColli(df)
}

// QueryShipmentParcel queries the "shipment_parcel" edge of the DocumentFile entity.
func (df *DocumentFile) QueryShipmentParcel() *ShipmentParcelQuery {
	return NewDocumentFileClient(df.config).QueryShipmentParcel(df)
}

// Update returns a builder for updating this DocumentFile.
// Note that you need to call DocumentFile.Unwrap() before calling this method if this DocumentFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (df *DocumentFile) Update() *DocumentFileUpdateOne {
	return NewDocumentFileClient(df.config).UpdateOne(df)
}

// Unwrap unwraps the DocumentFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (df *DocumentFile) Unwrap() *DocumentFile {
	_tx, ok := df.config.driver.(*txDriver)
	if !ok {
		panic("ent: DocumentFile is not a transactional entity")
	}
	df.config.driver = _tx.drv
	return df
}

// String implements the fmt.Stringer.
func (df *DocumentFile) String() string {
	var builder strings.Builder
	builder.WriteString("DocumentFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", df.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", df.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(df.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("storage_type=")
	builder.WriteString(fmt.Sprintf("%v", df.StorageType))
	builder.WriteString(", ")
	builder.WriteString("storage_path=")
	builder.WriteString(df.StoragePath)
	builder.WriteString(", ")
	builder.WriteString("storage_path_zpl=")
	builder.WriteString(df.StoragePathZpl)
	builder.WriteString(", ")
	builder.WriteString("doc_type=")
	builder.WriteString(fmt.Sprintf("%v", df.DocType))
	builder.WriteString(", ")
	builder.WriteString("data_pdf_base64=")
	builder.WriteString(df.DataPdfBase64)
	builder.WriteString(", ")
	builder.WriteString("data_zpl_base64=")
	builder.WriteString(df.DataZplBase64)
	builder.WriteByte(')')
	return builder.String()
}

// DocumentFiles is a parsable slice of DocumentFile.
type DocumentFiles []*DocumentFile
