// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnColliCreate is the builder for creating a ReturnColli entity.
type ReturnColliCreate struct {
	config
	mutation *ReturnColliMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (rcc *ReturnColliCreate) SetTenantID(pu pulid.ID) *ReturnColliCreate {
	rcc.mutation.SetTenantID(pu)
	return rcc
}

// SetExpectedAt sets the "expected_at" field.
func (rcc *ReturnColliCreate) SetExpectedAt(t time.Time) *ReturnColliCreate {
	rcc.mutation.SetExpectedAt(t)
	return rcc
}

// SetNillableExpectedAt sets the "expected_at" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableExpectedAt(t *time.Time) *ReturnColliCreate {
	if t != nil {
		rcc.SetExpectedAt(*t)
	}
	return rcc
}

// SetLabelPdf sets the "label_pdf" field.
func (rcc *ReturnColliCreate) SetLabelPdf(s string) *ReturnColliCreate {
	rcc.mutation.SetLabelPdf(s)
	return rcc
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableLabelPdf(s *string) *ReturnColliCreate {
	if s != nil {
		rcc.SetLabelPdf(*s)
	}
	return rcc
}

// SetLabelPng sets the "label_png" field.
func (rcc *ReturnColliCreate) SetLabelPng(s string) *ReturnColliCreate {
	rcc.mutation.SetLabelPng(s)
	return rcc
}

// SetNillableLabelPng sets the "label_png" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableLabelPng(s *string) *ReturnColliCreate {
	if s != nil {
		rcc.SetLabelPng(*s)
	}
	return rcc
}

// SetQrCodePng sets the "qr_code_png" field.
func (rcc *ReturnColliCreate) SetQrCodePng(s string) *ReturnColliCreate {
	rcc.mutation.SetQrCodePng(s)
	return rcc
}

// SetNillableQrCodePng sets the "qr_code_png" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableQrCodePng(s *string) *ReturnColliCreate {
	if s != nil {
		rcc.SetQrCodePng(*s)
	}
	return rcc
}

// SetComment sets the "comment" field.
func (rcc *ReturnColliCreate) SetComment(s string) *ReturnColliCreate {
	rcc.mutation.SetComment(s)
	return rcc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableComment(s *string) *ReturnColliCreate {
	if s != nil {
		rcc.SetComment(*s)
	}
	return rcc
}

// SetCreatedAt sets the "created_at" field.
func (rcc *ReturnColliCreate) SetCreatedAt(t time.Time) *ReturnColliCreate {
	rcc.mutation.SetCreatedAt(t)
	return rcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableCreatedAt(t *time.Time) *ReturnColliCreate {
	if t != nil {
		rcc.SetCreatedAt(*t)
	}
	return rcc
}

// SetStatus sets the "status" field.
func (rcc *ReturnColliCreate) SetStatus(r returncolli.Status) *ReturnColliCreate {
	rcc.mutation.SetStatus(r)
	return rcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableStatus(r *returncolli.Status) *ReturnColliCreate {
	if r != nil {
		rcc.SetStatus(*r)
	}
	return rcc
}

// SetEmailReceived sets the "email_received" field.
func (rcc *ReturnColliCreate) SetEmailReceived(t time.Time) *ReturnColliCreate {
	rcc.mutation.SetEmailReceived(t)
	return rcc
}

// SetNillableEmailReceived sets the "email_received" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableEmailReceived(t *time.Time) *ReturnColliCreate {
	if t != nil {
		rcc.SetEmailReceived(*t)
	}
	return rcc
}

// SetEmailAccepted sets the "email_accepted" field.
func (rcc *ReturnColliCreate) SetEmailAccepted(t time.Time) *ReturnColliCreate {
	rcc.mutation.SetEmailAccepted(t)
	return rcc
}

// SetNillableEmailAccepted sets the "email_accepted" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableEmailAccepted(t *time.Time) *ReturnColliCreate {
	if t != nil {
		rcc.SetEmailAccepted(*t)
	}
	return rcc
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" field.
func (rcc *ReturnColliCreate) SetEmailConfirmationLabel(t time.Time) *ReturnColliCreate {
	rcc.mutation.SetEmailConfirmationLabel(t)
	return rcc
}

// SetNillableEmailConfirmationLabel sets the "email_confirmation_label" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableEmailConfirmationLabel(t *time.Time) *ReturnColliCreate {
	if t != nil {
		rcc.SetEmailConfirmationLabel(*t)
	}
	return rcc
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" field.
func (rcc *ReturnColliCreate) SetEmailConfirmationQrCode(t time.Time) *ReturnColliCreate {
	rcc.mutation.SetEmailConfirmationQrCode(t)
	return rcc
}

// SetNillableEmailConfirmationQrCode sets the "email_confirmation_qr_code" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableEmailConfirmationQrCode(t *time.Time) *ReturnColliCreate {
	if t != nil {
		rcc.SetEmailConfirmationQrCode(*t)
	}
	return rcc
}

// SetID sets the "id" field.
func (rcc *ReturnColliCreate) SetID(pu pulid.ID) *ReturnColliCreate {
	rcc.mutation.SetID(pu)
	return rcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableID(pu *pulid.ID) *ReturnColliCreate {
	if pu != nil {
		rcc.SetID(*pu)
	}
	return rcc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rcc *ReturnColliCreate) SetTenant(t *Tenant) *ReturnColliCreate {
	return rcc.SetTenantID(t.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (rcc *ReturnColliCreate) SetRecipientID(id pulid.ID) *ReturnColliCreate {
	rcc.mutation.SetRecipientID(id)
	return rcc
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (rcc *ReturnColliCreate) SetRecipient(a *Address) *ReturnColliCreate {
	return rcc.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (rcc *ReturnColliCreate) SetSenderID(id pulid.ID) *ReturnColliCreate {
	rcc.mutation.SetSenderID(id)
	return rcc
}

// SetSender sets the "sender" edge to the Address entity.
func (rcc *ReturnColliCreate) SetSender(a *Address) *ReturnColliCreate {
	return rcc.SetSenderID(a.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (rcc *ReturnColliCreate) SetOrderID(id pulid.ID) *ReturnColliCreate {
	rcc.mutation.SetOrderID(id)
	return rcc
}

// SetOrder sets the "order" edge to the Order entity.
func (rcc *ReturnColliCreate) SetOrder(o *Order) *ReturnColliCreate {
	return rcc.SetOrderID(o.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (rcc *ReturnColliCreate) SetDeliveryOptionID(id pulid.ID) *ReturnColliCreate {
	rcc.mutation.SetDeliveryOptionID(id)
	return rcc
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillableDeliveryOptionID(id *pulid.ID) *ReturnColliCreate {
	if id != nil {
		rcc = rcc.SetDeliveryOptionID(*id)
	}
	return rcc
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (rcc *ReturnColliCreate) SetDeliveryOption(d *DeliveryOption) *ReturnColliCreate {
	return rcc.SetDeliveryOptionID(d.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (rcc *ReturnColliCreate) SetReturnPortalID(id pulid.ID) *ReturnColliCreate {
	rcc.mutation.SetReturnPortalID(id)
	return rcc
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (rcc *ReturnColliCreate) SetReturnPortal(r *ReturnPortal) *ReturnColliCreate {
	return rcc.SetReturnPortalID(r.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (rcc *ReturnColliCreate) SetPackagingID(id pulid.ID) *ReturnColliCreate {
	rcc.mutation.SetPackagingID(id)
	return rcc
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (rcc *ReturnColliCreate) SetNillablePackagingID(id *pulid.ID) *ReturnColliCreate {
	if id != nil {
		rcc = rcc.SetPackagingID(*id)
	}
	return rcc
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (rcc *ReturnColliCreate) SetPackaging(p *Packaging) *ReturnColliCreate {
	return rcc.SetPackagingID(p.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (rcc *ReturnColliCreate) AddReturnOrderLineIDs(ids ...pulid.ID) *ReturnColliCreate {
	rcc.mutation.AddReturnOrderLineIDs(ids...)
	return rcc
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (rcc *ReturnColliCreate) AddReturnOrderLine(r ...*ReturnOrderLine) *ReturnColliCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcc.AddReturnOrderLineIDs(ids...)
}

// AddReturnColliHistoryIDs adds the "return_colli_history" edge to the ReturnColliHistory entity by IDs.
func (rcc *ReturnColliCreate) AddReturnColliHistoryIDs(ids ...pulid.ID) *ReturnColliCreate {
	rcc.mutation.AddReturnColliHistoryIDs(ids...)
	return rcc
}

// AddReturnColliHistory adds the "return_colli_history" edges to the ReturnColliHistory entity.
func (rcc *ReturnColliCreate) AddReturnColliHistory(r ...*ReturnColliHistory) *ReturnColliCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcc.AddReturnColliHistoryIDs(ids...)
}

// Mutation returns the ReturnColliMutation object of the builder.
func (rcc *ReturnColliCreate) Mutation() *ReturnColliMutation {
	return rcc.mutation
}

// Save creates the ReturnColli in the database.
func (rcc *ReturnColliCreate) Save(ctx context.Context) (*ReturnColli, error) {
	if err := rcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *ReturnColliCreate) SaveX(ctx context.Context) *ReturnColli {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *ReturnColliCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *ReturnColliCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *ReturnColliCreate) defaults() error {
	if _, ok := rcc.mutation.ExpectedAt(); !ok {
		if returncolli.DefaultExpectedAt == nil {
			return fmt.Errorf("ent: uninitialized returncolli.DefaultExpectedAt (forgotten import ent/runtime?)")
		}
		v := returncolli.DefaultExpectedAt()
		rcc.mutation.SetExpectedAt(v)
	}
	if _, ok := rcc.mutation.CreatedAt(); !ok {
		if returncolli.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized returncolli.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := returncolli.DefaultCreatedAt()
		rcc.mutation.SetCreatedAt(v)
	}
	if _, ok := rcc.mutation.Status(); !ok {
		v := returncolli.DefaultStatus
		rcc.mutation.SetStatus(v)
	}
	if _, ok := rcc.mutation.ID(); !ok {
		if returncolli.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized returncolli.DefaultID (forgotten import ent/runtime?)")
		}
		v := returncolli.DefaultID()
		rcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rcc *ReturnColliCreate) check() error {
	if _, ok := rcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ReturnColli.tenant_id"`)}
	}
	if _, ok := rcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ReturnColli.created_at"`)}
	}
	if _, ok := rcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ReturnColli.status"`)}
	}
	if v, ok := rcc.mutation.Status(); ok {
		if err := returncolli.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ReturnColli.status": %w`, err)}
		}
	}
	if len(rcc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ReturnColli.tenant"`)}
	}
	if len(rcc.mutation.RecipientIDs()) == 0 {
		return &ValidationError{Name: "recipient", err: errors.New(`ent: missing required edge "ReturnColli.recipient"`)}
	}
	if len(rcc.mutation.SenderIDs()) == 0 {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required edge "ReturnColli.sender"`)}
	}
	if len(rcc.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "ReturnColli.order"`)}
	}
	if len(rcc.mutation.ReturnPortalIDs()) == 0 {
		return &ValidationError{Name: "return_portal", err: errors.New(`ent: missing required edge "ReturnColli.return_portal"`)}
	}
	return nil
}

func (rcc *ReturnColliCreate) sqlSave(ctx context.Context) (*ReturnColli, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *ReturnColliCreate) createSpec() (*ReturnColli, *sqlgraph.CreateSpec) {
	var (
		_node = &ReturnColli{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(returncolli.Table, sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString))
	)
	_spec.OnConflict = rcc.conflict
	if id, ok := rcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rcc.mutation.ExpectedAt(); ok {
		_spec.SetField(returncolli.FieldExpectedAt, field.TypeTime, value)
		_node.ExpectedAt = &value
	}
	if value, ok := rcc.mutation.LabelPdf(); ok {
		_spec.SetField(returncolli.FieldLabelPdf, field.TypeString, value)
		_node.LabelPdf = value
	}
	if value, ok := rcc.mutation.LabelPng(); ok {
		_spec.SetField(returncolli.FieldLabelPng, field.TypeString, value)
		_node.LabelPng = value
	}
	if value, ok := rcc.mutation.QrCodePng(); ok {
		_spec.SetField(returncolli.FieldQrCodePng, field.TypeString, value)
		_node.QrCodePng = value
	}
	if value, ok := rcc.mutation.Comment(); ok {
		_spec.SetField(returncolli.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := rcc.mutation.CreatedAt(); ok {
		_spec.SetField(returncolli.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rcc.mutation.Status(); ok {
		_spec.SetField(returncolli.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := rcc.mutation.EmailReceived(); ok {
		_spec.SetField(returncolli.FieldEmailReceived, field.TypeTime, value)
		_node.EmailReceived = &value
	}
	if value, ok := rcc.mutation.EmailAccepted(); ok {
		_spec.SetField(returncolli.FieldEmailAccepted, field.TypeTime, value)
		_node.EmailAccepted = &value
	}
	if value, ok := rcc.mutation.EmailConfirmationLabel(); ok {
		_spec.SetField(returncolli.FieldEmailConfirmationLabel, field.TypeTime, value)
		_node.EmailConfirmationLabel = &value
	}
	if value, ok := rcc.mutation.EmailConfirmationQrCode(); ok {
		_spec.SetField(returncolli.FieldEmailConfirmationQrCode, field.TypeTime, value)
		_node.EmailConfirmationQrCode = &value
	}
	if nodes := rcc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.TenantTable,
			Columns: []string{returncolli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.RecipientTable,
			Columns: []string{returncolli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_colli_recipient = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.SenderTable,
			Columns: []string{returncolli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_colli_sender = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncolli.OrderTable,
			Columns: []string{returncolli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_return_colli = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.DeliveryOptionTable,
			Columns: []string{returncolli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_colli_delivery_option = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.ReturnPortalTable,
			Columns: []string{returncolli.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_colli_return_portal = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.PackagingTable,
			Columns: []string{returncolli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_colli_packaging = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnOrderLineTable,
			Columns: []string{returncolli.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ReturnColliHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnColliHistoryTable,
			Columns: []string{returncolli.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnColli.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnColliUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rcc *ReturnColliCreate) OnConflict(opts ...sql.ConflictOption) *ReturnColliUpsertOne {
	rcc.conflict = opts
	return &ReturnColliUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnColli.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *ReturnColliCreate) OnConflictColumns(columns ...string) *ReturnColliUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &ReturnColliUpsertOne{
		create: rcc,
	}
}

type (
	// ReturnColliUpsertOne is the builder for "upsert"-ing
	//  one ReturnColli node.
	ReturnColliUpsertOne struct {
		create *ReturnColliCreate
	}

	// ReturnColliUpsert is the "OnConflict" setter.
	ReturnColliUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ReturnColliUpsert) SetTenantID(v pulid.ID) *ReturnColliUpsert {
	u.Set(returncolli.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateTenantID() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldTenantID)
	return u
}

// SetExpectedAt sets the "expected_at" field.
func (u *ReturnColliUpsert) SetExpectedAt(v time.Time) *ReturnColliUpsert {
	u.Set(returncolli.FieldExpectedAt, v)
	return u
}

// UpdateExpectedAt sets the "expected_at" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateExpectedAt() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldExpectedAt)
	return u
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (u *ReturnColliUpsert) ClearExpectedAt() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldExpectedAt)
	return u
}

// SetLabelPdf sets the "label_pdf" field.
func (u *ReturnColliUpsert) SetLabelPdf(v string) *ReturnColliUpsert {
	u.Set(returncolli.FieldLabelPdf, v)
	return u
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateLabelPdf() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldLabelPdf)
	return u
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (u *ReturnColliUpsert) ClearLabelPdf() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldLabelPdf)
	return u
}

// SetLabelPng sets the "label_png" field.
func (u *ReturnColliUpsert) SetLabelPng(v string) *ReturnColliUpsert {
	u.Set(returncolli.FieldLabelPng, v)
	return u
}

// UpdateLabelPng sets the "label_png" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateLabelPng() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldLabelPng)
	return u
}

// ClearLabelPng clears the value of the "label_png" field.
func (u *ReturnColliUpsert) ClearLabelPng() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldLabelPng)
	return u
}

// SetQrCodePng sets the "qr_code_png" field.
func (u *ReturnColliUpsert) SetQrCodePng(v string) *ReturnColliUpsert {
	u.Set(returncolli.FieldQrCodePng, v)
	return u
}

// UpdateQrCodePng sets the "qr_code_png" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateQrCodePng() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldQrCodePng)
	return u
}

// ClearQrCodePng clears the value of the "qr_code_png" field.
func (u *ReturnColliUpsert) ClearQrCodePng() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldQrCodePng)
	return u
}

// SetComment sets the "comment" field.
func (u *ReturnColliUpsert) SetComment(v string) *ReturnColliUpsert {
	u.Set(returncolli.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateComment() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldComment)
	return u
}

// ClearComment clears the value of the "comment" field.
func (u *ReturnColliUpsert) ClearComment() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldComment)
	return u
}

// SetStatus sets the "status" field.
func (u *ReturnColliUpsert) SetStatus(v returncolli.Status) *ReturnColliUpsert {
	u.Set(returncolli.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateStatus() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldStatus)
	return u
}

// SetEmailReceived sets the "email_received" field.
func (u *ReturnColliUpsert) SetEmailReceived(v time.Time) *ReturnColliUpsert {
	u.Set(returncolli.FieldEmailReceived, v)
	return u
}

// UpdateEmailReceived sets the "email_received" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateEmailReceived() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldEmailReceived)
	return u
}

// ClearEmailReceived clears the value of the "email_received" field.
func (u *ReturnColliUpsert) ClearEmailReceived() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldEmailReceived)
	return u
}

// SetEmailAccepted sets the "email_accepted" field.
func (u *ReturnColliUpsert) SetEmailAccepted(v time.Time) *ReturnColliUpsert {
	u.Set(returncolli.FieldEmailAccepted, v)
	return u
}

// UpdateEmailAccepted sets the "email_accepted" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateEmailAccepted() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldEmailAccepted)
	return u
}

// ClearEmailAccepted clears the value of the "email_accepted" field.
func (u *ReturnColliUpsert) ClearEmailAccepted() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldEmailAccepted)
	return u
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" field.
func (u *ReturnColliUpsert) SetEmailConfirmationLabel(v time.Time) *ReturnColliUpsert {
	u.Set(returncolli.FieldEmailConfirmationLabel, v)
	return u
}

// UpdateEmailConfirmationLabel sets the "email_confirmation_label" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateEmailConfirmationLabel() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldEmailConfirmationLabel)
	return u
}

// ClearEmailConfirmationLabel clears the value of the "email_confirmation_label" field.
func (u *ReturnColliUpsert) ClearEmailConfirmationLabel() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldEmailConfirmationLabel)
	return u
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" field.
func (u *ReturnColliUpsert) SetEmailConfirmationQrCode(v time.Time) *ReturnColliUpsert {
	u.Set(returncolli.FieldEmailConfirmationQrCode, v)
	return u
}

// UpdateEmailConfirmationQrCode sets the "email_confirmation_qr_code" field to the value that was provided on create.
func (u *ReturnColliUpsert) UpdateEmailConfirmationQrCode() *ReturnColliUpsert {
	u.SetExcluded(returncolli.FieldEmailConfirmationQrCode)
	return u
}

// ClearEmailConfirmationQrCode clears the value of the "email_confirmation_qr_code" field.
func (u *ReturnColliUpsert) ClearEmailConfirmationQrCode() *ReturnColliUpsert {
	u.SetNull(returncolli.FieldEmailConfirmationQrCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReturnColli.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returncolli.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnColliUpsertOne) UpdateNewValues() *ReturnColliUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(returncolli.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(returncolli.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnColli.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReturnColliUpsertOne) Ignore() *ReturnColliUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnColliUpsertOne) DoNothing() *ReturnColliUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnColliCreate.OnConflict
// documentation for more info.
func (u *ReturnColliUpsertOne) Update(set func(*ReturnColliUpsert)) *ReturnColliUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnColliUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnColliUpsertOne) SetTenantID(v pulid.ID) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateTenantID() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateTenantID()
	})
}

// SetExpectedAt sets the "expected_at" field.
func (u *ReturnColliUpsertOne) SetExpectedAt(v time.Time) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetExpectedAt(v)
	})
}

// UpdateExpectedAt sets the "expected_at" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateExpectedAt() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateExpectedAt()
	})
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (u *ReturnColliUpsertOne) ClearExpectedAt() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearExpectedAt()
	})
}

// SetLabelPdf sets the "label_pdf" field.
func (u *ReturnColliUpsertOne) SetLabelPdf(v string) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetLabelPdf(v)
	})
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateLabelPdf() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateLabelPdf()
	})
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (u *ReturnColliUpsertOne) ClearLabelPdf() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearLabelPdf()
	})
}

// SetLabelPng sets the "label_png" field.
func (u *ReturnColliUpsertOne) SetLabelPng(v string) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetLabelPng(v)
	})
}

// UpdateLabelPng sets the "label_png" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateLabelPng() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateLabelPng()
	})
}

// ClearLabelPng clears the value of the "label_png" field.
func (u *ReturnColliUpsertOne) ClearLabelPng() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearLabelPng()
	})
}

// SetQrCodePng sets the "qr_code_png" field.
func (u *ReturnColliUpsertOne) SetQrCodePng(v string) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetQrCodePng(v)
	})
}

// UpdateQrCodePng sets the "qr_code_png" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateQrCodePng() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateQrCodePng()
	})
}

// ClearQrCodePng clears the value of the "qr_code_png" field.
func (u *ReturnColliUpsertOne) ClearQrCodePng() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearQrCodePng()
	})
}

// SetComment sets the "comment" field.
func (u *ReturnColliUpsertOne) SetComment(v string) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateComment() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *ReturnColliUpsertOne) ClearComment() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearComment()
	})
}

// SetStatus sets the "status" field.
func (u *ReturnColliUpsertOne) SetStatus(v returncolli.Status) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateStatus() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateStatus()
	})
}

// SetEmailReceived sets the "email_received" field.
func (u *ReturnColliUpsertOne) SetEmailReceived(v time.Time) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetEmailReceived(v)
	})
}

// UpdateEmailReceived sets the "email_received" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateEmailReceived() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateEmailReceived()
	})
}

// ClearEmailReceived clears the value of the "email_received" field.
func (u *ReturnColliUpsertOne) ClearEmailReceived() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearEmailReceived()
	})
}

// SetEmailAccepted sets the "email_accepted" field.
func (u *ReturnColliUpsertOne) SetEmailAccepted(v time.Time) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetEmailAccepted(v)
	})
}

// UpdateEmailAccepted sets the "email_accepted" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateEmailAccepted() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateEmailAccepted()
	})
}

// ClearEmailAccepted clears the value of the "email_accepted" field.
func (u *ReturnColliUpsertOne) ClearEmailAccepted() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearEmailAccepted()
	})
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" field.
func (u *ReturnColliUpsertOne) SetEmailConfirmationLabel(v time.Time) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetEmailConfirmationLabel(v)
	})
}

// UpdateEmailConfirmationLabel sets the "email_confirmation_label" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateEmailConfirmationLabel() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateEmailConfirmationLabel()
	})
}

// ClearEmailConfirmationLabel clears the value of the "email_confirmation_label" field.
func (u *ReturnColliUpsertOne) ClearEmailConfirmationLabel() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearEmailConfirmationLabel()
	})
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" field.
func (u *ReturnColliUpsertOne) SetEmailConfirmationQrCode(v time.Time) *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetEmailConfirmationQrCode(v)
	})
}

// UpdateEmailConfirmationQrCode sets the "email_confirmation_qr_code" field to the value that was provided on create.
func (u *ReturnColliUpsertOne) UpdateEmailConfirmationQrCode() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateEmailConfirmationQrCode()
	})
}

// ClearEmailConfirmationQrCode clears the value of the "email_confirmation_qr_code" field.
func (u *ReturnColliUpsertOne) ClearEmailConfirmationQrCode() *ReturnColliUpsertOne {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearEmailConfirmationQrCode()
	})
}

// Exec executes the query.
func (u *ReturnColliUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnColliCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnColliUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReturnColliUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReturnColliUpsertOne.ID is not supported by MySQL driver. Use ReturnColliUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReturnColliUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReturnColliCreateBulk is the builder for creating many ReturnColli entities in bulk.
type ReturnColliCreateBulk struct {
	config
	err      error
	builders []*ReturnColliCreate
	conflict []sql.ConflictOption
}

// Save creates the ReturnColli entities in the database.
func (rccb *ReturnColliCreateBulk) Save(ctx context.Context) ([]*ReturnColli, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*ReturnColli, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReturnColliMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *ReturnColliCreateBulk) SaveX(ctx context.Context) []*ReturnColli {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *ReturnColliCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *ReturnColliCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnColli.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnColliUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rccb *ReturnColliCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReturnColliUpsertBulk {
	rccb.conflict = opts
	return &ReturnColliUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnColli.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *ReturnColliCreateBulk) OnConflictColumns(columns ...string) *ReturnColliUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &ReturnColliUpsertBulk{
		create: rccb,
	}
}

// ReturnColliUpsertBulk is the builder for "upsert"-ing
// a bulk of ReturnColli nodes.
type ReturnColliUpsertBulk struct {
	create *ReturnColliCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReturnColli.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returncolli.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnColliUpsertBulk) UpdateNewValues() *ReturnColliUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(returncolli.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(returncolli.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnColli.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReturnColliUpsertBulk) Ignore() *ReturnColliUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnColliUpsertBulk) DoNothing() *ReturnColliUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnColliCreateBulk.OnConflict
// documentation for more info.
func (u *ReturnColliUpsertBulk) Update(set func(*ReturnColliUpsert)) *ReturnColliUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnColliUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnColliUpsertBulk) SetTenantID(v pulid.ID) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateTenantID() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateTenantID()
	})
}

// SetExpectedAt sets the "expected_at" field.
func (u *ReturnColliUpsertBulk) SetExpectedAt(v time.Time) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetExpectedAt(v)
	})
}

// UpdateExpectedAt sets the "expected_at" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateExpectedAt() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateExpectedAt()
	})
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (u *ReturnColliUpsertBulk) ClearExpectedAt() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearExpectedAt()
	})
}

// SetLabelPdf sets the "label_pdf" field.
func (u *ReturnColliUpsertBulk) SetLabelPdf(v string) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetLabelPdf(v)
	})
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateLabelPdf() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateLabelPdf()
	})
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (u *ReturnColliUpsertBulk) ClearLabelPdf() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearLabelPdf()
	})
}

// SetLabelPng sets the "label_png" field.
func (u *ReturnColliUpsertBulk) SetLabelPng(v string) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetLabelPng(v)
	})
}

// UpdateLabelPng sets the "label_png" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateLabelPng() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateLabelPng()
	})
}

// ClearLabelPng clears the value of the "label_png" field.
func (u *ReturnColliUpsertBulk) ClearLabelPng() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearLabelPng()
	})
}

// SetQrCodePng sets the "qr_code_png" field.
func (u *ReturnColliUpsertBulk) SetQrCodePng(v string) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetQrCodePng(v)
	})
}

// UpdateQrCodePng sets the "qr_code_png" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateQrCodePng() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateQrCodePng()
	})
}

// ClearQrCodePng clears the value of the "qr_code_png" field.
func (u *ReturnColliUpsertBulk) ClearQrCodePng() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearQrCodePng()
	})
}

// SetComment sets the "comment" field.
func (u *ReturnColliUpsertBulk) SetComment(v string) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateComment() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *ReturnColliUpsertBulk) ClearComment() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearComment()
	})
}

// SetStatus sets the "status" field.
func (u *ReturnColliUpsertBulk) SetStatus(v returncolli.Status) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateStatus() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateStatus()
	})
}

// SetEmailReceived sets the "email_received" field.
func (u *ReturnColliUpsertBulk) SetEmailReceived(v time.Time) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetEmailReceived(v)
	})
}

// UpdateEmailReceived sets the "email_received" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateEmailReceived() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateEmailReceived()
	})
}

// ClearEmailReceived clears the value of the "email_received" field.
func (u *ReturnColliUpsertBulk) ClearEmailReceived() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearEmailReceived()
	})
}

// SetEmailAccepted sets the "email_accepted" field.
func (u *ReturnColliUpsertBulk) SetEmailAccepted(v time.Time) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetEmailAccepted(v)
	})
}

// UpdateEmailAccepted sets the "email_accepted" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateEmailAccepted() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateEmailAccepted()
	})
}

// ClearEmailAccepted clears the value of the "email_accepted" field.
func (u *ReturnColliUpsertBulk) ClearEmailAccepted() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearEmailAccepted()
	})
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" field.
func (u *ReturnColliUpsertBulk) SetEmailConfirmationLabel(v time.Time) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetEmailConfirmationLabel(v)
	})
}

// UpdateEmailConfirmationLabel sets the "email_confirmation_label" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateEmailConfirmationLabel() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateEmailConfirmationLabel()
	})
}

// ClearEmailConfirmationLabel clears the value of the "email_confirmation_label" field.
func (u *ReturnColliUpsertBulk) ClearEmailConfirmationLabel() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearEmailConfirmationLabel()
	})
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" field.
func (u *ReturnColliUpsertBulk) SetEmailConfirmationQrCode(v time.Time) *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.SetEmailConfirmationQrCode(v)
	})
}

// UpdateEmailConfirmationQrCode sets the "email_confirmation_qr_code" field to the value that was provided on create.
func (u *ReturnColliUpsertBulk) UpdateEmailConfirmationQrCode() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.UpdateEmailConfirmationQrCode()
	})
}

// ClearEmailConfirmationQrCode clears the value of the "email_confirmation_qr_code" field.
func (u *ReturnColliUpsertBulk) ClearEmailConfirmationQrCode() *ReturnColliUpsertBulk {
	return u.Update(func(s *ReturnColliUpsert) {
		s.ClearEmailConfirmationQrCode()
	})
}

// Exec executes the query.
func (u *ReturnColliUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReturnColliCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnColliCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnColliUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
