// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentDSVUpdate is the builder for updating ShipmentDSV entities.
type ShipmentDSVUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentDSVMutation
}

// Where appends a list predicates to the ShipmentDSVUpdate builder.
func (sdu *ShipmentDSVUpdate) Where(ps ...predicate.ShipmentDSV) *ShipmentDSVUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetTenantID sets the "tenant_id" field.
func (sdu *ShipmentDSVUpdate) SetTenantID(pu pulid.ID) *ShipmentDSVUpdate {
	sdu.mutation.SetTenantID(pu)
	return sdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sdu *ShipmentDSVUpdate) SetNillableTenantID(pu *pulid.ID) *ShipmentDSVUpdate {
	if pu != nil {
		sdu.SetTenantID(*pu)
	}
	return sdu
}

// SetBarcodeID sets the "barcode_id" field.
func (sdu *ShipmentDSVUpdate) SetBarcodeID(s string) *ShipmentDSVUpdate {
	sdu.mutation.SetBarcodeID(s)
	return sdu
}

// SetNillableBarcodeID sets the "barcode_id" field if the given value is not nil.
func (sdu *ShipmentDSVUpdate) SetNillableBarcodeID(s *string) *ShipmentDSVUpdate {
	if s != nil {
		sdu.SetBarcodeID(*s)
	}
	return sdu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sdu *ShipmentDSVUpdate) SetTenant(t *Tenant) *ShipmentDSVUpdate {
	return sdu.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sdu *ShipmentDSVUpdate) SetShipmentID(id pulid.ID) *ShipmentDSVUpdate {
	sdu.mutation.SetShipmentID(id)
	return sdu
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sdu *ShipmentDSVUpdate) SetShipment(s *Shipment) *ShipmentDSVUpdate {
	return sdu.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentDSVMutation object of the builder.
func (sdu *ShipmentDSVUpdate) Mutation() *ShipmentDSVMutation {
	return sdu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sdu *ShipmentDSVUpdate) ClearTenant() *ShipmentDSVUpdate {
	sdu.mutation.ClearTenant()
	return sdu
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (sdu *ShipmentDSVUpdate) ClearShipment() *ShipmentDSVUpdate {
	sdu.mutation.ClearShipment()
	return sdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *ShipmentDSVUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *ShipmentDSVUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *ShipmentDSVUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *ShipmentDSVUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *ShipmentDSVUpdate) check() error {
	if sdu.mutation.TenantCleared() && len(sdu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentDSV.tenant"`)
	}
	if sdu.mutation.ShipmentCleared() && len(sdu.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentDSV.shipment"`)
	}
	return nil
}

func (sdu *ShipmentDSVUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentdsv.Table, shipmentdsv.Columns, sqlgraph.NewFieldSpec(shipmentdsv.FieldID, field.TypeString))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.BarcodeID(); ok {
		_spec.SetField(shipmentdsv.FieldBarcodeID, field.TypeString, value)
	}
	if sdu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentdsv.TenantTable,
			Columns: []string{shipmentdsv.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentdsv.TenantTable,
			Columns: []string{shipmentdsv.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sdu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentdsv.ShipmentTable,
			Columns: []string{shipmentdsv.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentdsv.ShipmentTable,
			Columns: []string{shipmentdsv.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentdsv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// ShipmentDSVUpdateOne is the builder for updating a single ShipmentDSV entity.
type ShipmentDSVUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentDSVMutation
}

// SetTenantID sets the "tenant_id" field.
func (sduo *ShipmentDSVUpdateOne) SetTenantID(pu pulid.ID) *ShipmentDSVUpdateOne {
	sduo.mutation.SetTenantID(pu)
	return sduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sduo *ShipmentDSVUpdateOne) SetNillableTenantID(pu *pulid.ID) *ShipmentDSVUpdateOne {
	if pu != nil {
		sduo.SetTenantID(*pu)
	}
	return sduo
}

// SetBarcodeID sets the "barcode_id" field.
func (sduo *ShipmentDSVUpdateOne) SetBarcodeID(s string) *ShipmentDSVUpdateOne {
	sduo.mutation.SetBarcodeID(s)
	return sduo
}

// SetNillableBarcodeID sets the "barcode_id" field if the given value is not nil.
func (sduo *ShipmentDSVUpdateOne) SetNillableBarcodeID(s *string) *ShipmentDSVUpdateOne {
	if s != nil {
		sduo.SetBarcodeID(*s)
	}
	return sduo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sduo *ShipmentDSVUpdateOne) SetTenant(t *Tenant) *ShipmentDSVUpdateOne {
	return sduo.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sduo *ShipmentDSVUpdateOne) SetShipmentID(id pulid.ID) *ShipmentDSVUpdateOne {
	sduo.mutation.SetShipmentID(id)
	return sduo
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sduo *ShipmentDSVUpdateOne) SetShipment(s *Shipment) *ShipmentDSVUpdateOne {
	return sduo.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentDSVMutation object of the builder.
func (sduo *ShipmentDSVUpdateOne) Mutation() *ShipmentDSVMutation {
	return sduo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sduo *ShipmentDSVUpdateOne) ClearTenant() *ShipmentDSVUpdateOne {
	sduo.mutation.ClearTenant()
	return sduo
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (sduo *ShipmentDSVUpdateOne) ClearShipment() *ShipmentDSVUpdateOne {
	sduo.mutation.ClearShipment()
	return sduo
}

// Where appends a list predicates to the ShipmentDSVUpdate builder.
func (sduo *ShipmentDSVUpdateOne) Where(ps ...predicate.ShipmentDSV) *ShipmentDSVUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *ShipmentDSVUpdateOne) Select(field string, fields ...string) *ShipmentDSVUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated ShipmentDSV entity.
func (sduo *ShipmentDSVUpdateOne) Save(ctx context.Context) (*ShipmentDSV, error) {
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *ShipmentDSVUpdateOne) SaveX(ctx context.Context) *ShipmentDSV {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *ShipmentDSVUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *ShipmentDSVUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *ShipmentDSVUpdateOne) check() error {
	if sduo.mutation.TenantCleared() && len(sduo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentDSV.tenant"`)
	}
	if sduo.mutation.ShipmentCleared() && len(sduo.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentDSV.shipment"`)
	}
	return nil
}

func (sduo *ShipmentDSVUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentDSV, err error) {
	if err := sduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentdsv.Table, shipmentdsv.Columns, sqlgraph.NewFieldSpec(shipmentdsv.FieldID, field.TypeString))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentDSV.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentdsv.FieldID)
		for _, f := range fields {
			if !shipmentdsv.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentdsv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.BarcodeID(); ok {
		_spec.SetField(shipmentdsv.FieldBarcodeID, field.TypeString, value)
	}
	if sduo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentdsv.TenantTable,
			Columns: []string{shipmentdsv.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentdsv.TenantTable,
			Columns: []string{shipmentdsv.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sduo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentdsv.ShipmentTable,
			Columns: []string{shipmentdsv.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentdsv.ShipmentTable,
			Columns: []string{shipmentdsv.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentDSV{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentdsv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
