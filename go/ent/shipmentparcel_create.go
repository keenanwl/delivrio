// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentParcelCreate is the builder for creating a ShipmentParcel entity.
type ShipmentParcelCreate struct {
	config
	mutation *ShipmentParcelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (spc *ShipmentParcelCreate) SetTenantID(pu pulid.ID) *ShipmentParcelCreate {
	spc.mutation.SetTenantID(pu)
	return spc
}

// SetItemID sets the "item_id" field.
func (spc *ShipmentParcelCreate) SetItemID(s string) *ShipmentParcelCreate {
	spc.mutation.SetItemID(s)
	return spc
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillableItemID(s *string) *ShipmentParcelCreate {
	if s != nil {
		spc.SetItemID(*s)
	}
	return spc
}

// SetStatus sets the "status" field.
func (spc *ShipmentParcelCreate) SetStatus(s shipmentparcel.Status) *ShipmentParcelCreate {
	spc.mutation.SetStatus(s)
	return spc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillableStatus(s *shipmentparcel.Status) *ShipmentParcelCreate {
	if s != nil {
		spc.SetStatus(*s)
	}
	return spc
}

// SetCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field.
func (spc *ShipmentParcelCreate) SetCcPickupSignatureUrls(s []string) *ShipmentParcelCreate {
	spc.mutation.SetCcPickupSignatureUrls(s)
	return spc
}

// SetExpectedAt sets the "expected_at" field.
func (spc *ShipmentParcelCreate) SetExpectedAt(t time.Time) *ShipmentParcelCreate {
	spc.mutation.SetExpectedAt(t)
	return spc
}

// SetNillableExpectedAt sets the "expected_at" field if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillableExpectedAt(t *time.Time) *ShipmentParcelCreate {
	if t != nil {
		spc.SetExpectedAt(*t)
	}
	return spc
}

// SetFulfillmentSyncedAt sets the "fulfillment_synced_at" field.
func (spc *ShipmentParcelCreate) SetFulfillmentSyncedAt(t time.Time) *ShipmentParcelCreate {
	spc.mutation.SetFulfillmentSyncedAt(t)
	return spc
}

// SetNillableFulfillmentSyncedAt sets the "fulfillment_synced_at" field if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillableFulfillmentSyncedAt(t *time.Time) *ShipmentParcelCreate {
	if t != nil {
		spc.SetFulfillmentSyncedAt(*t)
	}
	return spc
}

// SetCancelSyncedAt sets the "cancel_synced_at" field.
func (spc *ShipmentParcelCreate) SetCancelSyncedAt(t time.Time) *ShipmentParcelCreate {
	spc.mutation.SetCancelSyncedAt(t)
	return spc
}

// SetNillableCancelSyncedAt sets the "cancel_synced_at" field if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillableCancelSyncedAt(t *time.Time) *ShipmentParcelCreate {
	if t != nil {
		spc.SetCancelSyncedAt(*t)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *ShipmentParcelCreate) SetID(pu pulid.ID) *ShipmentParcelCreate {
	spc.mutation.SetID(pu)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillableID(pu *pulid.ID) *ShipmentParcelCreate {
	if pu != nil {
		spc.SetID(*pu)
	}
	return spc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spc *ShipmentParcelCreate) SetTenant(t *Tenant) *ShipmentParcelCreate {
	return spc.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (spc *ShipmentParcelCreate) SetShipmentID(id pulid.ID) *ShipmentParcelCreate {
	spc.mutation.SetShipmentID(id)
	return spc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (spc *ShipmentParcelCreate) SetShipment(s *Shipment) *ShipmentParcelCreate {
	return spc.SetShipmentID(s.ID)
}

// SetColliID sets the "colli" edge to the Colli entity by ID.
func (spc *ShipmentParcelCreate) SetColliID(id pulid.ID) *ShipmentParcelCreate {
	spc.mutation.SetColliID(id)
	return spc
}

// SetNillableColliID sets the "colli" edge to the Colli entity by ID if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillableColliID(id *pulid.ID) *ShipmentParcelCreate {
	if id != nil {
		spc = spc.SetColliID(*id)
	}
	return spc
}

// SetColli sets the "colli" edge to the Colli entity.
func (spc *ShipmentParcelCreate) SetColli(c *Colli) *ShipmentParcelCreate {
	return spc.SetColliID(c.ID)
}

// AddOldColliIDs adds the "old_colli" edge to the Colli entity by IDs.
func (spc *ShipmentParcelCreate) AddOldColliIDs(ids ...pulid.ID) *ShipmentParcelCreate {
	spc.mutation.AddOldColliIDs(ids...)
	return spc
}

// AddOldColli adds the "old_colli" edges to the Colli entity.
func (spc *ShipmentParcelCreate) AddOldColli(c ...*Colli) *ShipmentParcelCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spc.AddOldColliIDs(ids...)
}

// AddWorkspaceRecentScanIDs adds the "workspace_recent_scan" edge to the WorkspaceRecentScan entity by IDs.
func (spc *ShipmentParcelCreate) AddWorkspaceRecentScanIDs(ids ...pulid.ID) *ShipmentParcelCreate {
	spc.mutation.AddWorkspaceRecentScanIDs(ids...)
	return spc
}

// AddWorkspaceRecentScan adds the "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (spc *ShipmentParcelCreate) AddWorkspaceRecentScan(w ...*WorkspaceRecentScan) *ShipmentParcelCreate {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return spc.AddWorkspaceRecentScanIDs(ids...)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (spc *ShipmentParcelCreate) SetPackagingID(id pulid.ID) *ShipmentParcelCreate {
	spc.mutation.SetPackagingID(id)
	return spc
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillablePackagingID(id *pulid.ID) *ShipmentParcelCreate {
	if id != nil {
		spc = spc.SetPackagingID(*id)
	}
	return spc
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (spc *ShipmentParcelCreate) SetPackaging(p *Packaging) *ShipmentParcelCreate {
	return spc.SetPackagingID(p.ID)
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (spc *ShipmentParcelCreate) AddPrintJobIDs(ids ...pulid.ID) *ShipmentParcelCreate {
	spc.mutation.AddPrintJobIDs(ids...)
	return spc
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (spc *ShipmentParcelCreate) AddPrintJob(p ...*PrintJob) *ShipmentParcelCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spc.AddPrintJobIDs(ids...)
}

// SetDocumentFileID sets the "document_file" edge to the DocumentFile entity by ID.
func (spc *ShipmentParcelCreate) SetDocumentFileID(id pulid.ID) *ShipmentParcelCreate {
	spc.mutation.SetDocumentFileID(id)
	return spc
}

// SetNillableDocumentFileID sets the "document_file" edge to the DocumentFile entity by ID if the given value is not nil.
func (spc *ShipmentParcelCreate) SetNillableDocumentFileID(id *pulid.ID) *ShipmentParcelCreate {
	if id != nil {
		spc = spc.SetDocumentFileID(*id)
	}
	return spc
}

// SetDocumentFile sets the "document_file" edge to the DocumentFile entity.
func (spc *ShipmentParcelCreate) SetDocumentFile(d *DocumentFile) *ShipmentParcelCreate {
	return spc.SetDocumentFileID(d.ID)
}

// Mutation returns the ShipmentParcelMutation object of the builder.
func (spc *ShipmentParcelCreate) Mutation() *ShipmentParcelMutation {
	return spc.mutation
}

// Save creates the ShipmentParcel in the database.
func (spc *ShipmentParcelCreate) Save(ctx context.Context) (*ShipmentParcel, error) {
	if err := spc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *ShipmentParcelCreate) SaveX(ctx context.Context) *ShipmentParcel {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *ShipmentParcelCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *ShipmentParcelCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *ShipmentParcelCreate) defaults() error {
	if _, ok := spc.mutation.Status(); !ok {
		v := shipmentparcel.DefaultStatus
		spc.mutation.SetStatus(v)
	}
	if _, ok := spc.mutation.ID(); !ok {
		if shipmentparcel.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipmentparcel.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipmentparcel.DefaultID()
		spc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spc *ShipmentParcelCreate) check() error {
	if _, ok := spc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ShipmentParcel.tenant_id"`)}
	}
	if _, ok := spc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ShipmentParcel.status"`)}
	}
	if v, ok := spc.mutation.Status(); ok {
		if err := shipmentparcel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentParcel.status": %w`, err)}
		}
	}
	if len(spc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ShipmentParcel.tenant"`)}
	}
	if len(spc.mutation.ShipmentIDs()) == 0 {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentParcel.shipment"`)}
	}
	return nil
}

func (spc *ShipmentParcelCreate) sqlSave(ctx context.Context) (*ShipmentParcel, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *ShipmentParcelCreate) createSpec() (*ShipmentParcel, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentParcel{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentparcel.Table, sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString))
	)
	_spec.OnConflict = spc.conflict
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spc.mutation.ItemID(); ok {
		_spec.SetField(shipmentparcel.FieldItemID, field.TypeString, value)
		_node.ItemID = value
	}
	if value, ok := spc.mutation.Status(); ok {
		_spec.SetField(shipmentparcel.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := spc.mutation.CcPickupSignatureUrls(); ok {
		_spec.SetField(shipmentparcel.FieldCcPickupSignatureUrls, field.TypeJSON, value)
		_node.CcPickupSignatureUrls = value
	}
	if value, ok := spc.mutation.ExpectedAt(); ok {
		_spec.SetField(shipmentparcel.FieldExpectedAt, field.TypeTime, value)
		_node.ExpectedAt = value
	}
	if value, ok := spc.mutation.FulfillmentSyncedAt(); ok {
		_spec.SetField(shipmentparcel.FieldFulfillmentSyncedAt, field.TypeTime, value)
		_node.FulfillmentSyncedAt = value
	}
	if value, ok := spc.mutation.CancelSyncedAt(); ok {
		_spec.SetField(shipmentparcel.FieldCancelSyncedAt, field.TypeTime, value)
		_node.CancelSyncedAt = &value
	}
	if nodes := spc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.TenantTable,
			Columns: []string{shipmentparcel.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentparcel.ShipmentTable,
			Columns: []string{shipmentparcel.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_shipment_parcel = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentparcel.ColliTable,
			Columns: []string{shipmentparcel.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.colli_shipment_parcel = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.OldColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentparcel.OldColliTable,
			Columns: shipmentparcel.OldColliPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.WorkspaceRecentScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.WorkspaceRecentScanTable,
			Columns: []string{shipmentparcel.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.PackagingTable,
			Columns: []string{shipmentparcel.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_parcel_packaging = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.PrintJobTable,
			Columns: []string{shipmentparcel.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.DocumentFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentparcel.DocumentFileTable,
			Columns: []string{shipmentparcel.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentParcel.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentParcelUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (spc *ShipmentParcelCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentParcelUpsertOne {
	spc.conflict = opts
	return &ShipmentParcelUpsertOne{
		create: spc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentParcel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spc *ShipmentParcelCreate) OnConflictColumns(columns ...string) *ShipmentParcelUpsertOne {
	spc.conflict = append(spc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentParcelUpsertOne{
		create: spc,
	}
}

type (
	// ShipmentParcelUpsertOne is the builder for "upsert"-ing
	//  one ShipmentParcel node.
	ShipmentParcelUpsertOne struct {
		create *ShipmentParcelCreate
	}

	// ShipmentParcelUpsert is the "OnConflict" setter.
	ShipmentParcelUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentParcelUpsert) SetTenantID(v pulid.ID) *ShipmentParcelUpsert {
	u.Set(shipmentparcel.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentParcelUpsert) UpdateTenantID() *ShipmentParcelUpsert {
	u.SetExcluded(shipmentparcel.FieldTenantID)
	return u
}

// SetItemID sets the "item_id" field.
func (u *ShipmentParcelUpsert) SetItemID(v string) *ShipmentParcelUpsert {
	u.Set(shipmentparcel.FieldItemID, v)
	return u
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *ShipmentParcelUpsert) UpdateItemID() *ShipmentParcelUpsert {
	u.SetExcluded(shipmentparcel.FieldItemID)
	return u
}

// ClearItemID clears the value of the "item_id" field.
func (u *ShipmentParcelUpsert) ClearItemID() *ShipmentParcelUpsert {
	u.SetNull(shipmentparcel.FieldItemID)
	return u
}

// SetStatus sets the "status" field.
func (u *ShipmentParcelUpsert) SetStatus(v shipmentparcel.Status) *ShipmentParcelUpsert {
	u.Set(shipmentparcel.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentParcelUpsert) UpdateStatus() *ShipmentParcelUpsert {
	u.SetExcluded(shipmentparcel.FieldStatus)
	return u
}

// SetCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field.
func (u *ShipmentParcelUpsert) SetCcPickupSignatureUrls(v []string) *ShipmentParcelUpsert {
	u.Set(shipmentparcel.FieldCcPickupSignatureUrls, v)
	return u
}

// UpdateCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field to the value that was provided on create.
func (u *ShipmentParcelUpsert) UpdateCcPickupSignatureUrls() *ShipmentParcelUpsert {
	u.SetExcluded(shipmentparcel.FieldCcPickupSignatureUrls)
	return u
}

// ClearCcPickupSignatureUrls clears the value of the "cc_pickup_signature_urls" field.
func (u *ShipmentParcelUpsert) ClearCcPickupSignatureUrls() *ShipmentParcelUpsert {
	u.SetNull(shipmentparcel.FieldCcPickupSignatureUrls)
	return u
}

// SetExpectedAt sets the "expected_at" field.
func (u *ShipmentParcelUpsert) SetExpectedAt(v time.Time) *ShipmentParcelUpsert {
	u.Set(shipmentparcel.FieldExpectedAt, v)
	return u
}

// UpdateExpectedAt sets the "expected_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsert) UpdateExpectedAt() *ShipmentParcelUpsert {
	u.SetExcluded(shipmentparcel.FieldExpectedAt)
	return u
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (u *ShipmentParcelUpsert) ClearExpectedAt() *ShipmentParcelUpsert {
	u.SetNull(shipmentparcel.FieldExpectedAt)
	return u
}

// SetFulfillmentSyncedAt sets the "fulfillment_synced_at" field.
func (u *ShipmentParcelUpsert) SetFulfillmentSyncedAt(v time.Time) *ShipmentParcelUpsert {
	u.Set(shipmentparcel.FieldFulfillmentSyncedAt, v)
	return u
}

// UpdateFulfillmentSyncedAt sets the "fulfillment_synced_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsert) UpdateFulfillmentSyncedAt() *ShipmentParcelUpsert {
	u.SetExcluded(shipmentparcel.FieldFulfillmentSyncedAt)
	return u
}

// ClearFulfillmentSyncedAt clears the value of the "fulfillment_synced_at" field.
func (u *ShipmentParcelUpsert) ClearFulfillmentSyncedAt() *ShipmentParcelUpsert {
	u.SetNull(shipmentparcel.FieldFulfillmentSyncedAt)
	return u
}

// SetCancelSyncedAt sets the "cancel_synced_at" field.
func (u *ShipmentParcelUpsert) SetCancelSyncedAt(v time.Time) *ShipmentParcelUpsert {
	u.Set(shipmentparcel.FieldCancelSyncedAt, v)
	return u
}

// UpdateCancelSyncedAt sets the "cancel_synced_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsert) UpdateCancelSyncedAt() *ShipmentParcelUpsert {
	u.SetExcluded(shipmentparcel.FieldCancelSyncedAt)
	return u
}

// ClearCancelSyncedAt clears the value of the "cancel_synced_at" field.
func (u *ShipmentParcelUpsert) ClearCancelSyncedAt() *ShipmentParcelUpsert {
	u.SetNull(shipmentparcel.FieldCancelSyncedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShipmentParcel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentparcel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentParcelUpsertOne) UpdateNewValues() *ShipmentParcelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipmentparcel.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentParcel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentParcelUpsertOne) Ignore() *ShipmentParcelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentParcelUpsertOne) DoNothing() *ShipmentParcelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentParcelCreate.OnConflict
// documentation for more info.
func (u *ShipmentParcelUpsertOne) Update(set func(*ShipmentParcelUpsert)) *ShipmentParcelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentParcelUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentParcelUpsertOne) SetTenantID(v pulid.ID) *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentParcelUpsertOne) UpdateTenantID() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateTenantID()
	})
}

// SetItemID sets the "item_id" field.
func (u *ShipmentParcelUpsertOne) SetItemID(v string) *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *ShipmentParcelUpsertOne) UpdateItemID() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateItemID()
	})
}

// ClearItemID clears the value of the "item_id" field.
func (u *ShipmentParcelUpsertOne) ClearItemID() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearItemID()
	})
}

// SetStatus sets the "status" field.
func (u *ShipmentParcelUpsertOne) SetStatus(v shipmentparcel.Status) *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentParcelUpsertOne) UpdateStatus() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateStatus()
	})
}

// SetCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field.
func (u *ShipmentParcelUpsertOne) SetCcPickupSignatureUrls(v []string) *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetCcPickupSignatureUrls(v)
	})
}

// UpdateCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field to the value that was provided on create.
func (u *ShipmentParcelUpsertOne) UpdateCcPickupSignatureUrls() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateCcPickupSignatureUrls()
	})
}

// ClearCcPickupSignatureUrls clears the value of the "cc_pickup_signature_urls" field.
func (u *ShipmentParcelUpsertOne) ClearCcPickupSignatureUrls() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearCcPickupSignatureUrls()
	})
}

// SetExpectedAt sets the "expected_at" field.
func (u *ShipmentParcelUpsertOne) SetExpectedAt(v time.Time) *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetExpectedAt(v)
	})
}

// UpdateExpectedAt sets the "expected_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsertOne) UpdateExpectedAt() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateExpectedAt()
	})
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (u *ShipmentParcelUpsertOne) ClearExpectedAt() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearExpectedAt()
	})
}

// SetFulfillmentSyncedAt sets the "fulfillment_synced_at" field.
func (u *ShipmentParcelUpsertOne) SetFulfillmentSyncedAt(v time.Time) *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetFulfillmentSyncedAt(v)
	})
}

// UpdateFulfillmentSyncedAt sets the "fulfillment_synced_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsertOne) UpdateFulfillmentSyncedAt() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateFulfillmentSyncedAt()
	})
}

// ClearFulfillmentSyncedAt clears the value of the "fulfillment_synced_at" field.
func (u *ShipmentParcelUpsertOne) ClearFulfillmentSyncedAt() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearFulfillmentSyncedAt()
	})
}

// SetCancelSyncedAt sets the "cancel_synced_at" field.
func (u *ShipmentParcelUpsertOne) SetCancelSyncedAt(v time.Time) *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetCancelSyncedAt(v)
	})
}

// UpdateCancelSyncedAt sets the "cancel_synced_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsertOne) UpdateCancelSyncedAt() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateCancelSyncedAt()
	})
}

// ClearCancelSyncedAt clears the value of the "cancel_synced_at" field.
func (u *ShipmentParcelUpsertOne) ClearCancelSyncedAt() *ShipmentParcelUpsertOne {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearCancelSyncedAt()
	})
}

// Exec executes the query.
func (u *ShipmentParcelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentParcelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentParcelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentParcelUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentParcelUpsertOne.ID is not supported by MySQL driver. Use ShipmentParcelUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentParcelUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentParcelCreateBulk is the builder for creating many ShipmentParcel entities in bulk.
type ShipmentParcelCreateBulk struct {
	config
	err      error
	builders []*ShipmentParcelCreate
	conflict []sql.ConflictOption
}

// Save creates the ShipmentParcel entities in the database.
func (spcb *ShipmentParcelCreateBulk) Save(ctx context.Context) ([]*ShipmentParcel, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*ShipmentParcel, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentParcelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *ShipmentParcelCreateBulk) SaveX(ctx context.Context) []*ShipmentParcel {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *ShipmentParcelCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *ShipmentParcelCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentParcel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentParcelUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (spcb *ShipmentParcelCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentParcelUpsertBulk {
	spcb.conflict = opts
	return &ShipmentParcelUpsertBulk{
		create: spcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentParcel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spcb *ShipmentParcelCreateBulk) OnConflictColumns(columns ...string) *ShipmentParcelUpsertBulk {
	spcb.conflict = append(spcb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentParcelUpsertBulk{
		create: spcb,
	}
}

// ShipmentParcelUpsertBulk is the builder for "upsert"-ing
// a bulk of ShipmentParcel nodes.
type ShipmentParcelUpsertBulk struct {
	create *ShipmentParcelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShipmentParcel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentparcel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentParcelUpsertBulk) UpdateNewValues() *ShipmentParcelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipmentparcel.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentParcel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentParcelUpsertBulk) Ignore() *ShipmentParcelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentParcelUpsertBulk) DoNothing() *ShipmentParcelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentParcelCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentParcelUpsertBulk) Update(set func(*ShipmentParcelUpsert)) *ShipmentParcelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentParcelUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentParcelUpsertBulk) SetTenantID(v pulid.ID) *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentParcelUpsertBulk) UpdateTenantID() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateTenantID()
	})
}

// SetItemID sets the "item_id" field.
func (u *ShipmentParcelUpsertBulk) SetItemID(v string) *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *ShipmentParcelUpsertBulk) UpdateItemID() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateItemID()
	})
}

// ClearItemID clears the value of the "item_id" field.
func (u *ShipmentParcelUpsertBulk) ClearItemID() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearItemID()
	})
}

// SetStatus sets the "status" field.
func (u *ShipmentParcelUpsertBulk) SetStatus(v shipmentparcel.Status) *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentParcelUpsertBulk) UpdateStatus() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateStatus()
	})
}

// SetCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field.
func (u *ShipmentParcelUpsertBulk) SetCcPickupSignatureUrls(v []string) *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetCcPickupSignatureUrls(v)
	})
}

// UpdateCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field to the value that was provided on create.
func (u *ShipmentParcelUpsertBulk) UpdateCcPickupSignatureUrls() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateCcPickupSignatureUrls()
	})
}

// ClearCcPickupSignatureUrls clears the value of the "cc_pickup_signature_urls" field.
func (u *ShipmentParcelUpsertBulk) ClearCcPickupSignatureUrls() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearCcPickupSignatureUrls()
	})
}

// SetExpectedAt sets the "expected_at" field.
func (u *ShipmentParcelUpsertBulk) SetExpectedAt(v time.Time) *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetExpectedAt(v)
	})
}

// UpdateExpectedAt sets the "expected_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsertBulk) UpdateExpectedAt() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateExpectedAt()
	})
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (u *ShipmentParcelUpsertBulk) ClearExpectedAt() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearExpectedAt()
	})
}

// SetFulfillmentSyncedAt sets the "fulfillment_synced_at" field.
func (u *ShipmentParcelUpsertBulk) SetFulfillmentSyncedAt(v time.Time) *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetFulfillmentSyncedAt(v)
	})
}

// UpdateFulfillmentSyncedAt sets the "fulfillment_synced_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsertBulk) UpdateFulfillmentSyncedAt() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateFulfillmentSyncedAt()
	})
}

// ClearFulfillmentSyncedAt clears the value of the "fulfillment_synced_at" field.
func (u *ShipmentParcelUpsertBulk) ClearFulfillmentSyncedAt() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearFulfillmentSyncedAt()
	})
}

// SetCancelSyncedAt sets the "cancel_synced_at" field.
func (u *ShipmentParcelUpsertBulk) SetCancelSyncedAt(v time.Time) *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.SetCancelSyncedAt(v)
	})
}

// UpdateCancelSyncedAt sets the "cancel_synced_at" field to the value that was provided on create.
func (u *ShipmentParcelUpsertBulk) UpdateCancelSyncedAt() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.UpdateCancelSyncedAt()
	})
}

// ClearCancelSyncedAt clears the value of the "cancel_synced_at" field.
func (u *ShipmentParcelUpsertBulk) ClearCancelSyncedAt() *ShipmentParcelUpsertBulk {
	return u.Update(func(s *ShipmentParcelUpsert) {
		s.ClearCancelSyncedAt()
	})
}

// Exec executes the query.
func (u *ShipmentParcelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentParcelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentParcelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentParcelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
