// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierDAOUpdate is the builder for updating CarrierDAO entities.
type CarrierDAOUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierDAOMutation
}

// Where appends a list predicates to the CarrierDAOUpdate builder.
func (cdu *CarrierDAOUpdate) Where(ps ...predicate.CarrierDAO) *CarrierDAOUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetTenantID sets the "tenant_id" field.
func (cdu *CarrierDAOUpdate) SetTenantID(pu pulid.ID) *CarrierDAOUpdate {
	cdu.mutation.SetTenantID(pu)
	return cdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cdu *CarrierDAOUpdate) SetNillableTenantID(pu *pulid.ID) *CarrierDAOUpdate {
	if pu != nil {
		cdu.SetTenantID(*pu)
	}
	return cdu
}

// SetCustomerID sets the "customer_id" field.
func (cdu *CarrierDAOUpdate) SetCustomerID(s string) *CarrierDAOUpdate {
	cdu.mutation.SetCustomerID(s)
	return cdu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cdu *CarrierDAOUpdate) SetNillableCustomerID(s *string) *CarrierDAOUpdate {
	if s != nil {
		cdu.SetCustomerID(*s)
	}
	return cdu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (cdu *CarrierDAOUpdate) ClearCustomerID() *CarrierDAOUpdate {
	cdu.mutation.ClearCustomerID()
	return cdu
}

// SetAPIKey sets the "api_key" field.
func (cdu *CarrierDAOUpdate) SetAPIKey(s string) *CarrierDAOUpdate {
	cdu.mutation.SetAPIKey(s)
	return cdu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cdu *CarrierDAOUpdate) SetNillableAPIKey(s *string) *CarrierDAOUpdate {
	if s != nil {
		cdu.SetAPIKey(*s)
	}
	return cdu
}

// ClearAPIKey clears the value of the "api_key" field.
func (cdu *CarrierDAOUpdate) ClearAPIKey() *CarrierDAOUpdate {
	cdu.mutation.ClearAPIKey()
	return cdu
}

// SetTest sets the "Test" field.
func (cdu *CarrierDAOUpdate) SetTest(b bool) *CarrierDAOUpdate {
	cdu.mutation.SetTest(b)
	return cdu
}

// SetNillableTest sets the "Test" field if the given value is not nil.
func (cdu *CarrierDAOUpdate) SetNillableTest(b *bool) *CarrierDAOUpdate {
	if b != nil {
		cdu.SetTest(*b)
	}
	return cdu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cdu *CarrierDAOUpdate) SetTenant(t *Tenant) *CarrierDAOUpdate {
	return cdu.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cdu *CarrierDAOUpdate) SetCarrierID(id pulid.ID) *CarrierDAOUpdate {
	cdu.mutation.SetCarrierID(id)
	return cdu
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cdu *CarrierDAOUpdate) SetCarrier(c *Carrier) *CarrierDAOUpdate {
	return cdu.SetCarrierID(c.ID)
}

// Mutation returns the CarrierDAOMutation object of the builder.
func (cdu *CarrierDAOUpdate) Mutation() *CarrierDAOMutation {
	return cdu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cdu *CarrierDAOUpdate) ClearTenant() *CarrierDAOUpdate {
	cdu.mutation.ClearTenant()
	return cdu
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cdu *CarrierDAOUpdate) ClearCarrier() *CarrierDAOUpdate {
	cdu.mutation.ClearCarrier()
	return cdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CarrierDAOUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cdu.sqlSave, cdu.mutation, cdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CarrierDAOUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CarrierDAOUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CarrierDAOUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdu *CarrierDAOUpdate) check() error {
	if cdu.mutation.TenantCleared() && len(cdu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierDAO.tenant"`)
	}
	if cdu.mutation.CarrierCleared() && len(cdu.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierDAO.carrier"`)
	}
	return nil
}

func (cdu *CarrierDAOUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierdao.Table, carrierdao.Columns, sqlgraph.NewFieldSpec(carrierdao.FieldID, field.TypeString))
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.CustomerID(); ok {
		_spec.SetField(carrierdao.FieldCustomerID, field.TypeString, value)
	}
	if cdu.mutation.CustomerIDCleared() {
		_spec.ClearField(carrierdao.FieldCustomerID, field.TypeString)
	}
	if value, ok := cdu.mutation.APIKey(); ok {
		_spec.SetField(carrierdao.FieldAPIKey, field.TypeString, value)
	}
	if cdu.mutation.APIKeyCleared() {
		_spec.ClearField(carrierdao.FieldAPIKey, field.TypeString)
	}
	if value, ok := cdu.mutation.Test(); ok {
		_spec.SetField(carrierdao.FieldTest, field.TypeBool, value)
	}
	if cdu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdao.TenantTable,
			Columns: []string{carrierdao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdao.TenantTable,
			Columns: []string{carrierdao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdao.CarrierTable,
			Columns: []string{carrierdao.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdao.CarrierTable,
			Columns: []string{carrierdao.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierdao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdu.mutation.done = true
	return n, nil
}

// CarrierDAOUpdateOne is the builder for updating a single CarrierDAO entity.
type CarrierDAOUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierDAOMutation
}

// SetTenantID sets the "tenant_id" field.
func (cduo *CarrierDAOUpdateOne) SetTenantID(pu pulid.ID) *CarrierDAOUpdateOne {
	cduo.mutation.SetTenantID(pu)
	return cduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cduo *CarrierDAOUpdateOne) SetNillableTenantID(pu *pulid.ID) *CarrierDAOUpdateOne {
	if pu != nil {
		cduo.SetTenantID(*pu)
	}
	return cduo
}

// SetCustomerID sets the "customer_id" field.
func (cduo *CarrierDAOUpdateOne) SetCustomerID(s string) *CarrierDAOUpdateOne {
	cduo.mutation.SetCustomerID(s)
	return cduo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cduo *CarrierDAOUpdateOne) SetNillableCustomerID(s *string) *CarrierDAOUpdateOne {
	if s != nil {
		cduo.SetCustomerID(*s)
	}
	return cduo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (cduo *CarrierDAOUpdateOne) ClearCustomerID() *CarrierDAOUpdateOne {
	cduo.mutation.ClearCustomerID()
	return cduo
}

// SetAPIKey sets the "api_key" field.
func (cduo *CarrierDAOUpdateOne) SetAPIKey(s string) *CarrierDAOUpdateOne {
	cduo.mutation.SetAPIKey(s)
	return cduo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cduo *CarrierDAOUpdateOne) SetNillableAPIKey(s *string) *CarrierDAOUpdateOne {
	if s != nil {
		cduo.SetAPIKey(*s)
	}
	return cduo
}

// ClearAPIKey clears the value of the "api_key" field.
func (cduo *CarrierDAOUpdateOne) ClearAPIKey() *CarrierDAOUpdateOne {
	cduo.mutation.ClearAPIKey()
	return cduo
}

// SetTest sets the "Test" field.
func (cduo *CarrierDAOUpdateOne) SetTest(b bool) *CarrierDAOUpdateOne {
	cduo.mutation.SetTest(b)
	return cduo
}

// SetNillableTest sets the "Test" field if the given value is not nil.
func (cduo *CarrierDAOUpdateOne) SetNillableTest(b *bool) *CarrierDAOUpdateOne {
	if b != nil {
		cduo.SetTest(*b)
	}
	return cduo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cduo *CarrierDAOUpdateOne) SetTenant(t *Tenant) *CarrierDAOUpdateOne {
	return cduo.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cduo *CarrierDAOUpdateOne) SetCarrierID(id pulid.ID) *CarrierDAOUpdateOne {
	cduo.mutation.SetCarrierID(id)
	return cduo
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cduo *CarrierDAOUpdateOne) SetCarrier(c *Carrier) *CarrierDAOUpdateOne {
	return cduo.SetCarrierID(c.ID)
}

// Mutation returns the CarrierDAOMutation object of the builder.
func (cduo *CarrierDAOUpdateOne) Mutation() *CarrierDAOMutation {
	return cduo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cduo *CarrierDAOUpdateOne) ClearTenant() *CarrierDAOUpdateOne {
	cduo.mutation.ClearTenant()
	return cduo
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cduo *CarrierDAOUpdateOne) ClearCarrier() *CarrierDAOUpdateOne {
	cduo.mutation.ClearCarrier()
	return cduo
}

// Where appends a list predicates to the CarrierDAOUpdate builder.
func (cduo *CarrierDAOUpdateOne) Where(ps ...predicate.CarrierDAO) *CarrierDAOUpdateOne {
	cduo.mutation.Where(ps...)
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CarrierDAOUpdateOne) Select(field string, fields ...string) *CarrierDAOUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CarrierDAO entity.
func (cduo *CarrierDAOUpdateOne) Save(ctx context.Context) (*CarrierDAO, error) {
	return withHooks(ctx, cduo.sqlSave, cduo.mutation, cduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CarrierDAOUpdateOne) SaveX(ctx context.Context) *CarrierDAO {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CarrierDAOUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CarrierDAOUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cduo *CarrierDAOUpdateOne) check() error {
	if cduo.mutation.TenantCleared() && len(cduo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierDAO.tenant"`)
	}
	if cduo.mutation.CarrierCleared() && len(cduo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierDAO.carrier"`)
	}
	return nil
}

func (cduo *CarrierDAOUpdateOne) sqlSave(ctx context.Context) (_node *CarrierDAO, err error) {
	if err := cduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierdao.Table, carrierdao.Columns, sqlgraph.NewFieldSpec(carrierdao.FieldID, field.TypeString))
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierDAO.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierdao.FieldID)
		for _, f := range fields {
			if !carrierdao.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierdao.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.CustomerID(); ok {
		_spec.SetField(carrierdao.FieldCustomerID, field.TypeString, value)
	}
	if cduo.mutation.CustomerIDCleared() {
		_spec.ClearField(carrierdao.FieldCustomerID, field.TypeString)
	}
	if value, ok := cduo.mutation.APIKey(); ok {
		_spec.SetField(carrierdao.FieldAPIKey, field.TypeString, value)
	}
	if cduo.mutation.APIKeyCleared() {
		_spec.ClearField(carrierdao.FieldAPIKey, field.TypeString)
	}
	if value, ok := cduo.mutation.Test(); ok {
		_spec.SetField(carrierdao.FieldTest, field.TypeBool, value)
	}
	if cduo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdao.TenantTable,
			Columns: []string{carrierdao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdao.TenantTable,
			Columns: []string{carrierdao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cduo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdao.CarrierTable,
			Columns: []string{carrierdao.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdao.CarrierTable,
			Columns: []string{carrierdao.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierDAO{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierdao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cduo.mutation.done = true
	return _node, nil
}
