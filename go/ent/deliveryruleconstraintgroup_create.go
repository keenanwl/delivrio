// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleConstraintGroupCreate is the builder for creating a DeliveryRuleConstraintGroup entity.
type DeliveryRuleConstraintGroupCreate struct {
	config
	mutation *DeliveryRuleConstraintGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (drcgc *DeliveryRuleConstraintGroupCreate) SetTenantID(pu pulid.ID) *DeliveryRuleConstraintGroupCreate {
	drcgc.mutation.SetTenantID(pu)
	return drcgc
}

// SetConstraintLogic sets the "constraint_logic" field.
func (drcgc *DeliveryRuleConstraintGroupCreate) SetConstraintLogic(dl deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupCreate {
	drcgc.mutation.SetConstraintLogic(dl)
	return drcgc
}

// SetNillableConstraintLogic sets the "constraint_logic" field if the given value is not nil.
func (drcgc *DeliveryRuleConstraintGroupCreate) SetNillableConstraintLogic(dl *deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupCreate {
	if dl != nil {
		drcgc.SetConstraintLogic(*dl)
	}
	return drcgc
}

// SetID sets the "id" field.
func (drcgc *DeliveryRuleConstraintGroupCreate) SetID(pu pulid.ID) *DeliveryRuleConstraintGroupCreate {
	drcgc.mutation.SetID(pu)
	return drcgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (drcgc *DeliveryRuleConstraintGroupCreate) SetNillableID(pu *pulid.ID) *DeliveryRuleConstraintGroupCreate {
	if pu != nil {
		drcgc.SetID(*pu)
	}
	return drcgc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (drcgc *DeliveryRuleConstraintGroupCreate) SetTenant(t *Tenant) *DeliveryRuleConstraintGroupCreate {
	return drcgc.SetTenantID(t.ID)
}

// AddDeliveryRuleConstraintIDs adds the "delivery_rule_constraints" edge to the DeliveryRuleConstraint entity by IDs.
func (drcgc *DeliveryRuleConstraintGroupCreate) AddDeliveryRuleConstraintIDs(ids ...pulid.ID) *DeliveryRuleConstraintGroupCreate {
	drcgc.mutation.AddDeliveryRuleConstraintIDs(ids...)
	return drcgc
}

// AddDeliveryRuleConstraints adds the "delivery_rule_constraints" edges to the DeliveryRuleConstraint entity.
func (drcgc *DeliveryRuleConstraintGroupCreate) AddDeliveryRuleConstraints(d ...*DeliveryRuleConstraint) *DeliveryRuleConstraintGroupCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return drcgc.AddDeliveryRuleConstraintIDs(ids...)
}

// SetDeliveryRuleID sets the "delivery_rule" edge to the DeliveryRule entity by ID.
func (drcgc *DeliveryRuleConstraintGroupCreate) SetDeliveryRuleID(id pulid.ID) *DeliveryRuleConstraintGroupCreate {
	drcgc.mutation.SetDeliveryRuleID(id)
	return drcgc
}

// SetDeliveryRule sets the "delivery_rule" edge to the DeliveryRule entity.
func (drcgc *DeliveryRuleConstraintGroupCreate) SetDeliveryRule(d *DeliveryRule) *DeliveryRuleConstraintGroupCreate {
	return drcgc.SetDeliveryRuleID(d.ID)
}

// Mutation returns the DeliveryRuleConstraintGroupMutation object of the builder.
func (drcgc *DeliveryRuleConstraintGroupCreate) Mutation() *DeliveryRuleConstraintGroupMutation {
	return drcgc.mutation
}

// Save creates the DeliveryRuleConstraintGroup in the database.
func (drcgc *DeliveryRuleConstraintGroupCreate) Save(ctx context.Context) (*DeliveryRuleConstraintGroup, error) {
	if err := drcgc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, drcgc.sqlSave, drcgc.mutation, drcgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drcgc *DeliveryRuleConstraintGroupCreate) SaveX(ctx context.Context) *DeliveryRuleConstraintGroup {
	v, err := drcgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcgc *DeliveryRuleConstraintGroupCreate) Exec(ctx context.Context) error {
	_, err := drcgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcgc *DeliveryRuleConstraintGroupCreate) ExecX(ctx context.Context) {
	if err := drcgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drcgc *DeliveryRuleConstraintGroupCreate) defaults() error {
	if _, ok := drcgc.mutation.ConstraintLogic(); !ok {
		v := deliveryruleconstraintgroup.DefaultConstraintLogic
		drcgc.mutation.SetConstraintLogic(v)
	}
	if _, ok := drcgc.mutation.ID(); !ok {
		if deliveryruleconstraintgroup.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deliveryruleconstraintgroup.DefaultID (forgotten import ent/runtime?)")
		}
		v := deliveryruleconstraintgroup.DefaultID()
		drcgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (drcgc *DeliveryRuleConstraintGroupCreate) check() error {
	if _, ok := drcgc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DeliveryRuleConstraintGroup.tenant_id"`)}
	}
	if _, ok := drcgc.mutation.ConstraintLogic(); !ok {
		return &ValidationError{Name: "constraint_logic", err: errors.New(`ent: missing required field "DeliveryRuleConstraintGroup.constraint_logic"`)}
	}
	if v, ok := drcgc.mutation.ConstraintLogic(); ok {
		if err := deliveryruleconstraintgroup.ConstraintLogicValidator(v); err != nil {
			return &ValidationError{Name: "constraint_logic", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraintGroup.constraint_logic": %w`, err)}
		}
	}
	if len(drcgc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DeliveryRuleConstraintGroup.tenant"`)}
	}
	if len(drcgc.mutation.DeliveryRuleIDs()) == 0 {
		return &ValidationError{Name: "delivery_rule", err: errors.New(`ent: missing required edge "DeliveryRuleConstraintGroup.delivery_rule"`)}
	}
	return nil
}

func (drcgc *DeliveryRuleConstraintGroupCreate) sqlSave(ctx context.Context) (*DeliveryRuleConstraintGroup, error) {
	if err := drcgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drcgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drcgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	drcgc.mutation.id = &_node.ID
	drcgc.mutation.done = true
	return _node, nil
}

func (drcgc *DeliveryRuleConstraintGroupCreate) createSpec() (*DeliveryRuleConstraintGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryRuleConstraintGroup{config: drcgc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryruleconstraintgroup.Table, sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString))
	)
	_spec.OnConflict = drcgc.conflict
	if id, ok := drcgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := drcgc.mutation.ConstraintLogic(); ok {
		_spec.SetField(deliveryruleconstraintgroup.FieldConstraintLogic, field.TypeEnum, value)
		_node.ConstraintLogic = value
	}
	if nodes := drcgc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.TenantTable,
			Columns: []string{deliveryruleconstraintgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drcgc.mutation.DeliveryRuleConstraintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.DeliveryRuleConstraintsTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drcgc.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraintgroup.DeliveryRuleTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_rule_delivery_rule_constraint_group = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryRuleConstraintGroup.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryRuleConstraintGroupUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (drcgc *DeliveryRuleConstraintGroupCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryRuleConstraintGroupUpsertOne {
	drcgc.conflict = opts
	return &DeliveryRuleConstraintGroupUpsertOne{
		create: drcgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraintGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drcgc *DeliveryRuleConstraintGroupCreate) OnConflictColumns(columns ...string) *DeliveryRuleConstraintGroupUpsertOne {
	drcgc.conflict = append(drcgc.conflict, sql.ConflictColumns(columns...))
	return &DeliveryRuleConstraintGroupUpsertOne{
		create: drcgc,
	}
}

type (
	// DeliveryRuleConstraintGroupUpsertOne is the builder for "upsert"-ing
	//  one DeliveryRuleConstraintGroup node.
	DeliveryRuleConstraintGroupUpsertOne struct {
		create *DeliveryRuleConstraintGroupCreate
	}

	// DeliveryRuleConstraintGroupUpsert is the "OnConflict" setter.
	DeliveryRuleConstraintGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleConstraintGroupUpsert) SetTenantID(v pulid.ID) *DeliveryRuleConstraintGroupUpsert {
	u.Set(deliveryruleconstraintgroup.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleConstraintGroupUpsert) UpdateTenantID() *DeliveryRuleConstraintGroupUpsert {
	u.SetExcluded(deliveryruleconstraintgroup.FieldTenantID)
	return u
}

// SetConstraintLogic sets the "constraint_logic" field.
func (u *DeliveryRuleConstraintGroupUpsert) SetConstraintLogic(v deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupUpsert {
	u.Set(deliveryruleconstraintgroup.FieldConstraintLogic, v)
	return u
}

// UpdateConstraintLogic sets the "constraint_logic" field to the value that was provided on create.
func (u *DeliveryRuleConstraintGroupUpsert) UpdateConstraintLogic() *DeliveryRuleConstraintGroupUpsert {
	u.SetExcluded(deliveryruleconstraintgroup.FieldConstraintLogic)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraintGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryruleconstraintgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryRuleConstraintGroupUpsertOne) UpdateNewValues() *DeliveryRuleConstraintGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deliveryruleconstraintgroup.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraintGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryRuleConstraintGroupUpsertOne) Ignore() *DeliveryRuleConstraintGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryRuleConstraintGroupUpsertOne) DoNothing() *DeliveryRuleConstraintGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryRuleConstraintGroupCreate.OnConflict
// documentation for more info.
func (u *DeliveryRuleConstraintGroupUpsertOne) Update(set func(*DeliveryRuleConstraintGroupUpsert)) *DeliveryRuleConstraintGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryRuleConstraintGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleConstraintGroupUpsertOne) SetTenantID(v pulid.ID) *DeliveryRuleConstraintGroupUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintGroupUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleConstraintGroupUpsertOne) UpdateTenantID() *DeliveryRuleConstraintGroupUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintGroupUpsert) {
		s.UpdateTenantID()
	})
}

// SetConstraintLogic sets the "constraint_logic" field.
func (u *DeliveryRuleConstraintGroupUpsertOne) SetConstraintLogic(v deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintGroupUpsert) {
		s.SetConstraintLogic(v)
	})
}

// UpdateConstraintLogic sets the "constraint_logic" field to the value that was provided on create.
func (u *DeliveryRuleConstraintGroupUpsertOne) UpdateConstraintLogic() *DeliveryRuleConstraintGroupUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintGroupUpsert) {
		s.UpdateConstraintLogic()
	})
}

// Exec executes the query.
func (u *DeliveryRuleConstraintGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryRuleConstraintGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryRuleConstraintGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryRuleConstraintGroupUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeliveryRuleConstraintGroupUpsertOne.ID is not supported by MySQL driver. Use DeliveryRuleConstraintGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryRuleConstraintGroupUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryRuleConstraintGroupCreateBulk is the builder for creating many DeliveryRuleConstraintGroup entities in bulk.
type DeliveryRuleConstraintGroupCreateBulk struct {
	config
	err      error
	builders []*DeliveryRuleConstraintGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryRuleConstraintGroup entities in the database.
func (drcgcb *DeliveryRuleConstraintGroupCreateBulk) Save(ctx context.Context) ([]*DeliveryRuleConstraintGroup, error) {
	if drcgcb.err != nil {
		return nil, drcgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcgcb.builders))
	nodes := make([]*DeliveryRuleConstraintGroup, len(drcgcb.builders))
	mutators := make([]Mutator, len(drcgcb.builders))
	for i := range drcgcb.builders {
		func(i int, root context.Context) {
			builder := drcgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryRuleConstraintGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = drcgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcgcb *DeliveryRuleConstraintGroupCreateBulk) SaveX(ctx context.Context) []*DeliveryRuleConstraintGroup {
	v, err := drcgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcgcb *DeliveryRuleConstraintGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := drcgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcgcb *DeliveryRuleConstraintGroupCreateBulk) ExecX(ctx context.Context) {
	if err := drcgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryRuleConstraintGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryRuleConstraintGroupUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (drcgcb *DeliveryRuleConstraintGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryRuleConstraintGroupUpsertBulk {
	drcgcb.conflict = opts
	return &DeliveryRuleConstraintGroupUpsertBulk{
		create: drcgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraintGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drcgcb *DeliveryRuleConstraintGroupCreateBulk) OnConflictColumns(columns ...string) *DeliveryRuleConstraintGroupUpsertBulk {
	drcgcb.conflict = append(drcgcb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryRuleConstraintGroupUpsertBulk{
		create: drcgcb,
	}
}

// DeliveryRuleConstraintGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryRuleConstraintGroup nodes.
type DeliveryRuleConstraintGroupUpsertBulk struct {
	create *DeliveryRuleConstraintGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraintGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryruleconstraintgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryRuleConstraintGroupUpsertBulk) UpdateNewValues() *DeliveryRuleConstraintGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deliveryruleconstraintgroup.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraintGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryRuleConstraintGroupUpsertBulk) Ignore() *DeliveryRuleConstraintGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryRuleConstraintGroupUpsertBulk) DoNothing() *DeliveryRuleConstraintGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryRuleConstraintGroupCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryRuleConstraintGroupUpsertBulk) Update(set func(*DeliveryRuleConstraintGroupUpsert)) *DeliveryRuleConstraintGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryRuleConstraintGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleConstraintGroupUpsertBulk) SetTenantID(v pulid.ID) *DeliveryRuleConstraintGroupUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintGroupUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleConstraintGroupUpsertBulk) UpdateTenantID() *DeliveryRuleConstraintGroupUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintGroupUpsert) {
		s.UpdateTenantID()
	})
}

// SetConstraintLogic sets the "constraint_logic" field.
func (u *DeliveryRuleConstraintGroupUpsertBulk) SetConstraintLogic(v deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintGroupUpsert) {
		s.SetConstraintLogic(v)
	})
}

// UpdateConstraintLogic sets the "constraint_logic" field to the value that was provided on create.
func (u *DeliveryRuleConstraintGroupUpsertBulk) UpdateConstraintLogic() *DeliveryRuleConstraintGroupUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintGroupUpsert) {
		s.UpdateConstraintLogic()
	})
}

// Exec executes the query.
func (u *DeliveryRuleConstraintGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryRuleConstraintGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryRuleConstraintGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryRuleConstraintGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
