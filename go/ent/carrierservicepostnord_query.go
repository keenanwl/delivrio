// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServicePostNordQuery is the builder for querying CarrierServicePostNord entities.
type CarrierServicePostNordQuery struct {
	config
	ctx                             *QueryContext
	order                           []carrierservicepostnord.OrderOption
	inters                          []Interceptor
	predicates                      []predicate.CarrierServicePostNord
	withCarrierService              *CarrierServiceQuery
	withCarrierAddServPostNord      *CarrierAdditionalServicePostNordQuery
	withFKs                         bool
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*CarrierServicePostNord) error
	withNamedCarrierAddServPostNord map[string]*CarrierAdditionalServicePostNordQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierServicePostNordQuery builder.
func (cspnq *CarrierServicePostNordQuery) Where(ps ...predicate.CarrierServicePostNord) *CarrierServicePostNordQuery {
	cspnq.predicates = append(cspnq.predicates, ps...)
	return cspnq
}

// Limit the number of records to be returned by this query.
func (cspnq *CarrierServicePostNordQuery) Limit(limit int) *CarrierServicePostNordQuery {
	cspnq.ctx.Limit = &limit
	return cspnq
}

// Offset to start from.
func (cspnq *CarrierServicePostNordQuery) Offset(offset int) *CarrierServicePostNordQuery {
	cspnq.ctx.Offset = &offset
	return cspnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cspnq *CarrierServicePostNordQuery) Unique(unique bool) *CarrierServicePostNordQuery {
	cspnq.ctx.Unique = &unique
	return cspnq
}

// Order specifies how the records should be ordered.
func (cspnq *CarrierServicePostNordQuery) Order(o ...carrierservicepostnord.OrderOption) *CarrierServicePostNordQuery {
	cspnq.order = append(cspnq.order, o...)
	return cspnq
}

// QueryCarrierService chains the current query on the "carrier_service" edge.
func (cspnq *CarrierServicePostNordQuery) QueryCarrierService() *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: cspnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cspnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cspnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicepostnord.Table, carrierservicepostnord.FieldID, selector),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicepostnord.CarrierServiceTable, carrierservicepostnord.CarrierServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(cspnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAddServPostNord chains the current query on the "carrier_add_serv_post_nord" edge.
func (cspnq *CarrierServicePostNordQuery) QueryCarrierAddServPostNord() *CarrierAdditionalServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cspnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cspnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cspnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicepostnord.Table, carrierservicepostnord.FieldID, selector),
			sqlgraph.To(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierservicepostnord.CarrierAddServPostNordTable, carrierservicepostnord.CarrierAddServPostNordColumn),
		)
		fromU = sqlgraph.SetNeighbors(cspnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierServicePostNord entity from the query.
// Returns a *NotFoundError when no CarrierServicePostNord was found.
func (cspnq *CarrierServicePostNordQuery) First(ctx context.Context) (*CarrierServicePostNord, error) {
	nodes, err := cspnq.Limit(1).All(setContextOp(ctx, cspnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrierservicepostnord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cspnq *CarrierServicePostNordQuery) FirstX(ctx context.Context) *CarrierServicePostNord {
	node, err := cspnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierServicePostNord ID from the query.
// Returns a *NotFoundError when no CarrierServicePostNord ID was found.
func (cspnq *CarrierServicePostNordQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cspnq.Limit(1).IDs(setContextOp(ctx, cspnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrierservicepostnord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cspnq *CarrierServicePostNordQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cspnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierServicePostNord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierServicePostNord entity is found.
// Returns a *NotFoundError when no CarrierServicePostNord entities are found.
func (cspnq *CarrierServicePostNordQuery) Only(ctx context.Context) (*CarrierServicePostNord, error) {
	nodes, err := cspnq.Limit(2).All(setContextOp(ctx, cspnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrierservicepostnord.Label}
	default:
		return nil, &NotSingularError{carrierservicepostnord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cspnq *CarrierServicePostNordQuery) OnlyX(ctx context.Context) *CarrierServicePostNord {
	node, err := cspnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierServicePostNord ID in the query.
// Returns a *NotSingularError when more than one CarrierServicePostNord ID is found.
// Returns a *NotFoundError when no entities are found.
func (cspnq *CarrierServicePostNordQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cspnq.Limit(2).IDs(setContextOp(ctx, cspnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrierservicepostnord.Label}
	default:
		err = &NotSingularError{carrierservicepostnord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cspnq *CarrierServicePostNordQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cspnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierServicePostNords.
func (cspnq *CarrierServicePostNordQuery) All(ctx context.Context) ([]*CarrierServicePostNord, error) {
	ctx = setContextOp(ctx, cspnq.ctx, ent.OpQueryAll)
	if err := cspnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierServicePostNord, *CarrierServicePostNordQuery]()
	return withInterceptors[[]*CarrierServicePostNord](ctx, cspnq, qr, cspnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cspnq *CarrierServicePostNordQuery) AllX(ctx context.Context) []*CarrierServicePostNord {
	nodes, err := cspnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierServicePostNord IDs.
func (cspnq *CarrierServicePostNordQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cspnq.ctx.Unique == nil && cspnq.path != nil {
		cspnq.Unique(true)
	}
	ctx = setContextOp(ctx, cspnq.ctx, ent.OpQueryIDs)
	if err = cspnq.Select(carrierservicepostnord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cspnq *CarrierServicePostNordQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cspnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cspnq *CarrierServicePostNordQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cspnq.ctx, ent.OpQueryCount)
	if err := cspnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cspnq, querierCount[*CarrierServicePostNordQuery](), cspnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cspnq *CarrierServicePostNordQuery) CountX(ctx context.Context) int {
	count, err := cspnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cspnq *CarrierServicePostNordQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cspnq.ctx, ent.OpQueryExist)
	switch _, err := cspnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cspnq *CarrierServicePostNordQuery) ExistX(ctx context.Context) bool {
	exist, err := cspnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierServicePostNordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cspnq *CarrierServicePostNordQuery) Clone() *CarrierServicePostNordQuery {
	if cspnq == nil {
		return nil
	}
	return &CarrierServicePostNordQuery{
		config:                     cspnq.config,
		ctx:                        cspnq.ctx.Clone(),
		order:                      append([]carrierservicepostnord.OrderOption{}, cspnq.order...),
		inters:                     append([]Interceptor{}, cspnq.inters...),
		predicates:                 append([]predicate.CarrierServicePostNord{}, cspnq.predicates...),
		withCarrierService:         cspnq.withCarrierService.Clone(),
		withCarrierAddServPostNord: cspnq.withCarrierAddServPostNord.Clone(),
		// clone intermediate query.
		sql:  cspnq.sql.Clone(),
		path: cspnq.path,
	}
}

// WithCarrierService tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service" edge. The optional arguments are used to configure the query builder of the edge.
func (cspnq *CarrierServicePostNordQuery) WithCarrierService(opts ...func(*CarrierServiceQuery)) *CarrierServicePostNordQuery {
	query := (&CarrierServiceClient{config: cspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cspnq.withCarrierService = query
	return cspnq
}

// WithCarrierAddServPostNord tells the query-builder to eager-load the nodes that are connected to
// the "carrier_add_serv_post_nord" edge. The optional arguments are used to configure the query builder of the edge.
func (cspnq *CarrierServicePostNordQuery) WithCarrierAddServPostNord(opts ...func(*CarrierAdditionalServicePostNordQuery)) *CarrierServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cspnq.withCarrierAddServPostNord = query
	return cspnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierServicePostNord.Query().
//		GroupBy(carrierservicepostnord.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cspnq *CarrierServicePostNordQuery) GroupBy(field string, fields ...string) *CarrierServicePostNordGroupBy {
	cspnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierServicePostNordGroupBy{build: cspnq}
	grbuild.flds = &cspnq.ctx.Fields
	grbuild.label = carrierservicepostnord.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierServicePostNord.Query().
//		Select(carrierservicepostnord.FieldLabel).
//		Scan(ctx, &v)
func (cspnq *CarrierServicePostNordQuery) Select(fields ...string) *CarrierServicePostNordSelect {
	cspnq.ctx.Fields = append(cspnq.ctx.Fields, fields...)
	sbuild := &CarrierServicePostNordSelect{CarrierServicePostNordQuery: cspnq}
	sbuild.label = carrierservicepostnord.Label
	sbuild.flds, sbuild.scan = &cspnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierServicePostNordSelect configured with the given aggregations.
func (cspnq *CarrierServicePostNordQuery) Aggregate(fns ...AggregateFunc) *CarrierServicePostNordSelect {
	return cspnq.Select().Aggregate(fns...)
}

func (cspnq *CarrierServicePostNordQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cspnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cspnq); err != nil {
				return err
			}
		}
	}
	for _, f := range cspnq.ctx.Fields {
		if !carrierservicepostnord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cspnq.path != nil {
		prev, err := cspnq.path(ctx)
		if err != nil {
			return err
		}
		cspnq.sql = prev
	}
	if carrierservicepostnord.Policy == nil {
		return errors.New("ent: uninitialized carrierservicepostnord.Policy (forgotten import ent/runtime?)")
	}
	if err := carrierservicepostnord.Policy.EvalQuery(ctx, cspnq); err != nil {
		return err
	}
	return nil
}

func (cspnq *CarrierServicePostNordQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierServicePostNord, error) {
	var (
		nodes       = []*CarrierServicePostNord{}
		withFKs     = cspnq.withFKs
		_spec       = cspnq.querySpec()
		loadedTypes = [2]bool{
			cspnq.withCarrierService != nil,
			cspnq.withCarrierAddServPostNord != nil,
		}
	)
	if cspnq.withCarrierService != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicepostnord.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierServicePostNord).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierServicePostNord{config: cspnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cspnq.modifiers) > 0 {
		_spec.Modifiers = cspnq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cspnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cspnq.withCarrierService; query != nil {
		if err := cspnq.loadCarrierService(ctx, query, nodes, nil,
			func(n *CarrierServicePostNord, e *CarrierService) { n.Edges.CarrierService = e }); err != nil {
			return nil, err
		}
	}
	if query := cspnq.withCarrierAddServPostNord; query != nil {
		if err := cspnq.loadCarrierAddServPostNord(ctx, query, nodes,
			func(n *CarrierServicePostNord) {
				n.Edges.CarrierAddServPostNord = []*CarrierAdditionalServicePostNord{}
			},
			func(n *CarrierServicePostNord, e *CarrierAdditionalServicePostNord) {
				n.Edges.CarrierAddServPostNord = append(n.Edges.CarrierAddServPostNord, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cspnq.withNamedCarrierAddServPostNord {
		if err := cspnq.loadCarrierAddServPostNord(ctx, query, nodes,
			func(n *CarrierServicePostNord) { n.appendNamedCarrierAddServPostNord(name) },
			func(n *CarrierServicePostNord, e *CarrierAdditionalServicePostNord) {
				n.appendNamedCarrierAddServPostNord(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range cspnq.loadTotal {
		if err := cspnq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cspnq *CarrierServicePostNordQuery) loadCarrierService(ctx context.Context, query *CarrierServiceQuery, nodes []*CarrierServicePostNord, init func(*CarrierServicePostNord), assign func(*CarrierServicePostNord, *CarrierService)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierServicePostNord)
	for i := range nodes {
		if nodes[i].carrier_service_carrier_service_post_nord == nil {
			continue
		}
		fk := *nodes[i].carrier_service_carrier_service_post_nord
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierservice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_service_carrier_service_post_nord" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cspnq *CarrierServicePostNordQuery) loadCarrierAddServPostNord(ctx context.Context, query *CarrierAdditionalServicePostNordQuery, nodes []*CarrierServicePostNord, init func(*CarrierServicePostNord), assign func(*CarrierServicePostNord, *CarrierAdditionalServicePostNord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierServicePostNord)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservicepostnord.CarrierAddServPostNordColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_post_nord_carrier_add_serv_post_nord
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_post_nord_carrier_add_serv_post_nord" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_post_nord_carrier_add_serv_post_nord" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cspnq *CarrierServicePostNordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cspnq.querySpec()
	if len(cspnq.modifiers) > 0 {
		_spec.Modifiers = cspnq.modifiers
	}
	_spec.Node.Columns = cspnq.ctx.Fields
	if len(cspnq.ctx.Fields) > 0 {
		_spec.Unique = cspnq.ctx.Unique != nil && *cspnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cspnq.driver, _spec)
}

func (cspnq *CarrierServicePostNordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrierservicepostnord.Table, carrierservicepostnord.Columns, sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString))
	_spec.From = cspnq.sql
	if unique := cspnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cspnq.path != nil {
		_spec.Unique = true
	}
	if fields := cspnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicepostnord.FieldID)
		for i := range fields {
			if fields[i] != carrierservicepostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cspnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cspnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cspnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cspnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cspnq *CarrierServicePostNordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cspnq.driver.Dialect())
	t1 := builder.Table(carrierservicepostnord.Table)
	columns := cspnq.ctx.Fields
	if len(columns) == 0 {
		columns = carrierservicepostnord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cspnq.sql != nil {
		selector = cspnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cspnq.ctx.Unique != nil && *cspnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cspnq.predicates {
		p(selector)
	}
	for _, p := range cspnq.order {
		p(selector)
	}
	if offset := cspnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cspnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierAddServPostNord tells the query-builder to eager-load the nodes that are connected to the "carrier_add_serv_post_nord"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cspnq *CarrierServicePostNordQuery) WithNamedCarrierAddServPostNord(name string, opts ...func(*CarrierAdditionalServicePostNordQuery)) *CarrierServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cspnq.withNamedCarrierAddServPostNord == nil {
		cspnq.withNamedCarrierAddServPostNord = make(map[string]*CarrierAdditionalServicePostNordQuery)
	}
	cspnq.withNamedCarrierAddServPostNord[name] = query
	return cspnq
}

// CarrierServicePostNordGroupBy is the group-by builder for CarrierServicePostNord entities.
type CarrierServicePostNordGroupBy struct {
	selector
	build *CarrierServicePostNordQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cspngb *CarrierServicePostNordGroupBy) Aggregate(fns ...AggregateFunc) *CarrierServicePostNordGroupBy {
	cspngb.fns = append(cspngb.fns, fns...)
	return cspngb
}

// Scan applies the selector query and scans the result into the given value.
func (cspngb *CarrierServicePostNordGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cspngb.build.ctx, ent.OpQueryGroupBy)
	if err := cspngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServicePostNordQuery, *CarrierServicePostNordGroupBy](ctx, cspngb.build, cspngb, cspngb.build.inters, v)
}

func (cspngb *CarrierServicePostNordGroupBy) sqlScan(ctx context.Context, root *CarrierServicePostNordQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cspngb.fns))
	for _, fn := range cspngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cspngb.flds)+len(cspngb.fns))
		for _, f := range *cspngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cspngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cspngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierServicePostNordSelect is the builder for selecting fields of CarrierServicePostNord entities.
type CarrierServicePostNordSelect struct {
	*CarrierServicePostNordQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cspns *CarrierServicePostNordSelect) Aggregate(fns ...AggregateFunc) *CarrierServicePostNordSelect {
	cspns.fns = append(cspns.fns, fns...)
	return cspns
}

// Scan applies the selector query and scans the result into the given value.
func (cspns *CarrierServicePostNordSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cspns.ctx, ent.OpQuerySelect)
	if err := cspns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServicePostNordQuery, *CarrierServicePostNordSelect](ctx, cspns.CarrierServicePostNordQuery, cspns, cspns.inters, v)
}

func (cspns *CarrierServicePostNordSelect) sqlScan(ctx context.Context, root *CarrierServicePostNordQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cspns.fns))
	for _, fn := range cspns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cspns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cspns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
