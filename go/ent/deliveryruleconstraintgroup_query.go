// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleConstraintGroupQuery is the builder for querying DeliveryRuleConstraintGroup entities.
type DeliveryRuleConstraintGroupQuery struct {
	config
	ctx                              *QueryContext
	order                            []deliveryruleconstraintgroup.OrderOption
	inters                           []Interceptor
	predicates                       []predicate.DeliveryRuleConstraintGroup
	withTenant                       *TenantQuery
	withDeliveryRuleConstraints      *DeliveryRuleConstraintQuery
	withDeliveryRule                 *DeliveryRuleQuery
	withFKs                          bool
	modifiers                        []func(*sql.Selector)
	loadTotal                        []func(context.Context, []*DeliveryRuleConstraintGroup) error
	withNamedDeliveryRuleConstraints map[string]*DeliveryRuleConstraintQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeliveryRuleConstraintGroupQuery builder.
func (drcgq *DeliveryRuleConstraintGroupQuery) Where(ps ...predicate.DeliveryRuleConstraintGroup) *DeliveryRuleConstraintGroupQuery {
	drcgq.predicates = append(drcgq.predicates, ps...)
	return drcgq
}

// Limit the number of records to be returned by this query.
func (drcgq *DeliveryRuleConstraintGroupQuery) Limit(limit int) *DeliveryRuleConstraintGroupQuery {
	drcgq.ctx.Limit = &limit
	return drcgq
}

// Offset to start from.
func (drcgq *DeliveryRuleConstraintGroupQuery) Offset(offset int) *DeliveryRuleConstraintGroupQuery {
	drcgq.ctx.Offset = &offset
	return drcgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drcgq *DeliveryRuleConstraintGroupQuery) Unique(unique bool) *DeliveryRuleConstraintGroupQuery {
	drcgq.ctx.Unique = &unique
	return drcgq
}

// Order specifies how the records should be ordered.
func (drcgq *DeliveryRuleConstraintGroupQuery) Order(o ...deliveryruleconstraintgroup.OrderOption) *DeliveryRuleConstraintGroupQuery {
	drcgq.order = append(drcgq.order, o...)
	return drcgq
}

// QueryTenant chains the current query on the "tenant" edge.
func (drcgq *DeliveryRuleConstraintGroupQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: drcgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drcgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drcgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryruleconstraintgroup.TenantTable, deliveryruleconstraintgroup.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(drcgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryRuleConstraints chains the current query on the "delivery_rule_constraints" edge.
func (drcgq *DeliveryRuleConstraintGroupQuery) QueryDeliveryRuleConstraints() *DeliveryRuleConstraintQuery {
	query := (&DeliveryRuleConstraintClient{config: drcgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drcgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drcgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID, selector),
			sqlgraph.To(deliveryruleconstraint.Table, deliveryruleconstraint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deliveryruleconstraintgroup.DeliveryRuleConstraintsTable, deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn),
		)
		fromU = sqlgraph.SetNeighbors(drcgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryRule chains the current query on the "delivery_rule" edge.
func (drcgq *DeliveryRuleConstraintGroupQuery) QueryDeliveryRule() *DeliveryRuleQuery {
	query := (&DeliveryRuleClient{config: drcgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drcgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drcgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID, selector),
			sqlgraph.To(deliveryrule.Table, deliveryrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryruleconstraintgroup.DeliveryRuleTable, deliveryruleconstraintgroup.DeliveryRuleColumn),
		)
		fromU = sqlgraph.SetNeighbors(drcgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeliveryRuleConstraintGroup entity from the query.
// Returns a *NotFoundError when no DeliveryRuleConstraintGroup was found.
func (drcgq *DeliveryRuleConstraintGroupQuery) First(ctx context.Context) (*DeliveryRuleConstraintGroup, error) {
	nodes, err := drcgq.Limit(1).All(setContextOp(ctx, drcgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deliveryruleconstraintgroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drcgq *DeliveryRuleConstraintGroupQuery) FirstX(ctx context.Context) *DeliveryRuleConstraintGroup {
	node, err := drcgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeliveryRuleConstraintGroup ID from the query.
// Returns a *NotFoundError when no DeliveryRuleConstraintGroup ID was found.
func (drcgq *DeliveryRuleConstraintGroupQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = drcgq.Limit(1).IDs(setContextOp(ctx, drcgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deliveryruleconstraintgroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drcgq *DeliveryRuleConstraintGroupQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := drcgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeliveryRuleConstraintGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeliveryRuleConstraintGroup entity is found.
// Returns a *NotFoundError when no DeliveryRuleConstraintGroup entities are found.
func (drcgq *DeliveryRuleConstraintGroupQuery) Only(ctx context.Context) (*DeliveryRuleConstraintGroup, error) {
	nodes, err := drcgq.Limit(2).All(setContextOp(ctx, drcgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deliveryruleconstraintgroup.Label}
	default:
		return nil, &NotSingularError{deliveryruleconstraintgroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drcgq *DeliveryRuleConstraintGroupQuery) OnlyX(ctx context.Context) *DeliveryRuleConstraintGroup {
	node, err := drcgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeliveryRuleConstraintGroup ID in the query.
// Returns a *NotSingularError when more than one DeliveryRuleConstraintGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (drcgq *DeliveryRuleConstraintGroupQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = drcgq.Limit(2).IDs(setContextOp(ctx, drcgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deliveryruleconstraintgroup.Label}
	default:
		err = &NotSingularError{deliveryruleconstraintgroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drcgq *DeliveryRuleConstraintGroupQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := drcgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeliveryRuleConstraintGroups.
func (drcgq *DeliveryRuleConstraintGroupQuery) All(ctx context.Context) ([]*DeliveryRuleConstraintGroup, error) {
	ctx = setContextOp(ctx, drcgq.ctx, ent.OpQueryAll)
	if err := drcgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeliveryRuleConstraintGroup, *DeliveryRuleConstraintGroupQuery]()
	return withInterceptors[[]*DeliveryRuleConstraintGroup](ctx, drcgq, qr, drcgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drcgq *DeliveryRuleConstraintGroupQuery) AllX(ctx context.Context) []*DeliveryRuleConstraintGroup {
	nodes, err := drcgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeliveryRuleConstraintGroup IDs.
func (drcgq *DeliveryRuleConstraintGroupQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if drcgq.ctx.Unique == nil && drcgq.path != nil {
		drcgq.Unique(true)
	}
	ctx = setContextOp(ctx, drcgq.ctx, ent.OpQueryIDs)
	if err = drcgq.Select(deliveryruleconstraintgroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drcgq *DeliveryRuleConstraintGroupQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := drcgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drcgq *DeliveryRuleConstraintGroupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drcgq.ctx, ent.OpQueryCount)
	if err := drcgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drcgq, querierCount[*DeliveryRuleConstraintGroupQuery](), drcgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drcgq *DeliveryRuleConstraintGroupQuery) CountX(ctx context.Context) int {
	count, err := drcgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drcgq *DeliveryRuleConstraintGroupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drcgq.ctx, ent.OpQueryExist)
	switch _, err := drcgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drcgq *DeliveryRuleConstraintGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := drcgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeliveryRuleConstraintGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drcgq *DeliveryRuleConstraintGroupQuery) Clone() *DeliveryRuleConstraintGroupQuery {
	if drcgq == nil {
		return nil
	}
	return &DeliveryRuleConstraintGroupQuery{
		config:                      drcgq.config,
		ctx:                         drcgq.ctx.Clone(),
		order:                       append([]deliveryruleconstraintgroup.OrderOption{}, drcgq.order...),
		inters:                      append([]Interceptor{}, drcgq.inters...),
		predicates:                  append([]predicate.DeliveryRuleConstraintGroup{}, drcgq.predicates...),
		withTenant:                  drcgq.withTenant.Clone(),
		withDeliveryRuleConstraints: drcgq.withDeliveryRuleConstraints.Clone(),
		withDeliveryRule:            drcgq.withDeliveryRule.Clone(),
		// clone intermediate query.
		sql:  drcgq.sql.Clone(),
		path: drcgq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (drcgq *DeliveryRuleConstraintGroupQuery) WithTenant(opts ...func(*TenantQuery)) *DeliveryRuleConstraintGroupQuery {
	query := (&TenantClient{config: drcgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drcgq.withTenant = query
	return drcgq
}

// WithDeliveryRuleConstraints tells the query-builder to eager-load the nodes that are connected to
// the "delivery_rule_constraints" edge. The optional arguments are used to configure the query builder of the edge.
func (drcgq *DeliveryRuleConstraintGroupQuery) WithDeliveryRuleConstraints(opts ...func(*DeliveryRuleConstraintQuery)) *DeliveryRuleConstraintGroupQuery {
	query := (&DeliveryRuleConstraintClient{config: drcgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drcgq.withDeliveryRuleConstraints = query
	return drcgq
}

// WithDeliveryRule tells the query-builder to eager-load the nodes that are connected to
// the "delivery_rule" edge. The optional arguments are used to configure the query builder of the edge.
func (drcgq *DeliveryRuleConstraintGroupQuery) WithDeliveryRule(opts ...func(*DeliveryRuleQuery)) *DeliveryRuleConstraintGroupQuery {
	query := (&DeliveryRuleClient{config: drcgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drcgq.withDeliveryRule = query
	return drcgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeliveryRuleConstraintGroup.Query().
//		GroupBy(deliveryruleconstraintgroup.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (drcgq *DeliveryRuleConstraintGroupQuery) GroupBy(field string, fields ...string) *DeliveryRuleConstraintGroupGroupBy {
	drcgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeliveryRuleConstraintGroupGroupBy{build: drcgq}
	grbuild.flds = &drcgq.ctx.Fields
	grbuild.label = deliveryruleconstraintgroup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.DeliveryRuleConstraintGroup.Query().
//		Select(deliveryruleconstraintgroup.FieldTenantID).
//		Scan(ctx, &v)
func (drcgq *DeliveryRuleConstraintGroupQuery) Select(fields ...string) *DeliveryRuleConstraintGroupSelect {
	drcgq.ctx.Fields = append(drcgq.ctx.Fields, fields...)
	sbuild := &DeliveryRuleConstraintGroupSelect{DeliveryRuleConstraintGroupQuery: drcgq}
	sbuild.label = deliveryruleconstraintgroup.Label
	sbuild.flds, sbuild.scan = &drcgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeliveryRuleConstraintGroupSelect configured with the given aggregations.
func (drcgq *DeliveryRuleConstraintGroupQuery) Aggregate(fns ...AggregateFunc) *DeliveryRuleConstraintGroupSelect {
	return drcgq.Select().Aggregate(fns...)
}

func (drcgq *DeliveryRuleConstraintGroupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drcgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drcgq); err != nil {
				return err
			}
		}
	}
	for _, f := range drcgq.ctx.Fields {
		if !deliveryruleconstraintgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if drcgq.path != nil {
		prev, err := drcgq.path(ctx)
		if err != nil {
			return err
		}
		drcgq.sql = prev
	}
	if deliveryruleconstraintgroup.Policy == nil {
		return errors.New("ent: uninitialized deliveryruleconstraintgroup.Policy (forgotten import ent/runtime?)")
	}
	if err := deliveryruleconstraintgroup.Policy.EvalQuery(ctx, drcgq); err != nil {
		return err
	}
	return nil
}

func (drcgq *DeliveryRuleConstraintGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeliveryRuleConstraintGroup, error) {
	var (
		nodes       = []*DeliveryRuleConstraintGroup{}
		withFKs     = drcgq.withFKs
		_spec       = drcgq.querySpec()
		loadedTypes = [3]bool{
			drcgq.withTenant != nil,
			drcgq.withDeliveryRuleConstraints != nil,
			drcgq.withDeliveryRule != nil,
		}
	)
	if drcgq.withDeliveryRule != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryruleconstraintgroup.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeliveryRuleConstraintGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeliveryRuleConstraintGroup{config: drcgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(drcgq.modifiers) > 0 {
		_spec.Modifiers = drcgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drcgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drcgq.withTenant; query != nil {
		if err := drcgq.loadTenant(ctx, query, nodes, nil,
			func(n *DeliveryRuleConstraintGroup, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := drcgq.withDeliveryRuleConstraints; query != nil {
		if err := drcgq.loadDeliveryRuleConstraints(ctx, query, nodes,
			func(n *DeliveryRuleConstraintGroup) { n.Edges.DeliveryRuleConstraints = []*DeliveryRuleConstraint{} },
			func(n *DeliveryRuleConstraintGroup, e *DeliveryRuleConstraint) {
				n.Edges.DeliveryRuleConstraints = append(n.Edges.DeliveryRuleConstraints, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := drcgq.withDeliveryRule; query != nil {
		if err := drcgq.loadDeliveryRule(ctx, query, nodes, nil,
			func(n *DeliveryRuleConstraintGroup, e *DeliveryRule) { n.Edges.DeliveryRule = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range drcgq.withNamedDeliveryRuleConstraints {
		if err := drcgq.loadDeliveryRuleConstraints(ctx, query, nodes,
			func(n *DeliveryRuleConstraintGroup) { n.appendNamedDeliveryRuleConstraints(name) },
			func(n *DeliveryRuleConstraintGroup, e *DeliveryRuleConstraint) {
				n.appendNamedDeliveryRuleConstraints(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range drcgq.loadTotal {
		if err := drcgq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drcgq *DeliveryRuleConstraintGroupQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*DeliveryRuleConstraintGroup, init func(*DeliveryRuleConstraintGroup), assign func(*DeliveryRuleConstraintGroup, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryRuleConstraintGroup)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drcgq *DeliveryRuleConstraintGroupQuery) loadDeliveryRuleConstraints(ctx context.Context, query *DeliveryRuleConstraintQuery, nodes []*DeliveryRuleConstraintGroup, init func(*DeliveryRuleConstraintGroup), assign func(*DeliveryRuleConstraintGroup, *DeliveryRuleConstraint)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*DeliveryRuleConstraintGroup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DeliveryRuleConstraint(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.delivery_rule_constraint_group_delivery_rule_constraints
		if fk == nil {
			return fmt.Errorf(`foreign-key "delivery_rule_constraint_group_delivery_rule_constraints" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "delivery_rule_constraint_group_delivery_rule_constraints" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (drcgq *DeliveryRuleConstraintGroupQuery) loadDeliveryRule(ctx context.Context, query *DeliveryRuleQuery, nodes []*DeliveryRuleConstraintGroup, init func(*DeliveryRuleConstraintGroup), assign func(*DeliveryRuleConstraintGroup, *DeliveryRule)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryRuleConstraintGroup)
	for i := range nodes {
		if nodes[i].delivery_rule_delivery_rule_constraint_group == nil {
			continue
		}
		fk := *nodes[i].delivery_rule_delivery_rule_constraint_group
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryrule.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delivery_rule_delivery_rule_constraint_group" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (drcgq *DeliveryRuleConstraintGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drcgq.querySpec()
	if len(drcgq.modifiers) > 0 {
		_spec.Modifiers = drcgq.modifiers
	}
	_spec.Node.Columns = drcgq.ctx.Fields
	if len(drcgq.ctx.Fields) > 0 {
		_spec.Unique = drcgq.ctx.Unique != nil && *drcgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drcgq.driver, _spec)
}

func (drcgq *DeliveryRuleConstraintGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.Columns, sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString))
	_spec.From = drcgq.sql
	if unique := drcgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drcgq.path != nil {
		_spec.Unique = true
	}
	if fields := drcgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryruleconstraintgroup.FieldID)
		for i := range fields {
			if fields[i] != deliveryruleconstraintgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if drcgq.withTenant != nil {
			_spec.Node.AddColumnOnce(deliveryruleconstraintgroup.FieldTenantID)
		}
	}
	if ps := drcgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drcgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drcgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drcgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drcgq *DeliveryRuleConstraintGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drcgq.driver.Dialect())
	t1 := builder.Table(deliveryruleconstraintgroup.Table)
	columns := drcgq.ctx.Fields
	if len(columns) == 0 {
		columns = deliveryruleconstraintgroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drcgq.sql != nil {
		selector = drcgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drcgq.ctx.Unique != nil && *drcgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range drcgq.predicates {
		p(selector)
	}
	for _, p := range drcgq.order {
		p(selector)
	}
	if offset := drcgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drcgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryRuleConstraints tells the query-builder to eager-load the nodes that are connected to the "delivery_rule_constraints"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (drcgq *DeliveryRuleConstraintGroupQuery) WithNamedDeliveryRuleConstraints(name string, opts ...func(*DeliveryRuleConstraintQuery)) *DeliveryRuleConstraintGroupQuery {
	query := (&DeliveryRuleConstraintClient{config: drcgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if drcgq.withNamedDeliveryRuleConstraints == nil {
		drcgq.withNamedDeliveryRuleConstraints = make(map[string]*DeliveryRuleConstraintQuery)
	}
	drcgq.withNamedDeliveryRuleConstraints[name] = query
	return drcgq
}

// DeliveryRuleConstraintGroupGroupBy is the group-by builder for DeliveryRuleConstraintGroup entities.
type DeliveryRuleConstraintGroupGroupBy struct {
	selector
	build *DeliveryRuleConstraintGroupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drcggb *DeliveryRuleConstraintGroupGroupBy) Aggregate(fns ...AggregateFunc) *DeliveryRuleConstraintGroupGroupBy {
	drcggb.fns = append(drcggb.fns, fns...)
	return drcggb
}

// Scan applies the selector query and scans the result into the given value.
func (drcggb *DeliveryRuleConstraintGroupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drcggb.build.ctx, ent.OpQueryGroupBy)
	if err := drcggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryRuleConstraintGroupQuery, *DeliveryRuleConstraintGroupGroupBy](ctx, drcggb.build, drcggb, drcggb.build.inters, v)
}

func (drcggb *DeliveryRuleConstraintGroupGroupBy) sqlScan(ctx context.Context, root *DeliveryRuleConstraintGroupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drcggb.fns))
	for _, fn := range drcggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drcggb.flds)+len(drcggb.fns))
		for _, f := range *drcggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drcggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drcggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeliveryRuleConstraintGroupSelect is the builder for selecting fields of DeliveryRuleConstraintGroup entities.
type DeliveryRuleConstraintGroupSelect struct {
	*DeliveryRuleConstraintGroupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drcgs *DeliveryRuleConstraintGroupSelect) Aggregate(fns ...AggregateFunc) *DeliveryRuleConstraintGroupSelect {
	drcgs.fns = append(drcgs.fns, fns...)
	return drcgs
}

// Scan applies the selector query and scans the result into the given value.
func (drcgs *DeliveryRuleConstraintGroupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drcgs.ctx, ent.OpQuerySelect)
	if err := drcgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryRuleConstraintGroupQuery, *DeliveryRuleConstraintGroupSelect](ctx, drcgs.DeliveryRuleConstraintGroupQuery, drcgs, drcgs.inters, v)
}

func (drcgs *DeliveryRuleConstraintGroupSelect) sqlScan(ctx context.Context, root *DeliveryRuleConstraintGroupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drcgs.fns))
	for _, fn := range drcgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drcgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drcgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
