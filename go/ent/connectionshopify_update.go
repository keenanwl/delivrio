// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ConnectionShopifyUpdate is the builder for updating ConnectionShopify entities.
type ConnectionShopifyUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionShopifyMutation
}

// Where appends a list predicates to the ConnectionShopifyUpdate builder.
func (csu *ConnectionShopifyUpdate) Where(ps ...predicate.ConnectionShopify) *ConnectionShopifyUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetTenantID sets the "tenant_id" field.
func (csu *ConnectionShopifyUpdate) SetTenantID(pu pulid.ID) *ConnectionShopifyUpdate {
	csu.mutation.SetTenantID(pu)
	return csu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (csu *ConnectionShopifyUpdate) SetNillableTenantID(pu *pulid.ID) *ConnectionShopifyUpdate {
	if pu != nil {
		csu.SetTenantID(*pu)
	}
	return csu
}

// SetRateIntegration sets the "rate_integration" field.
func (csu *ConnectionShopifyUpdate) SetRateIntegration(b bool) *ConnectionShopifyUpdate {
	csu.mutation.SetRateIntegration(b)
	return csu
}

// SetNillableRateIntegration sets the "rate_integration" field if the given value is not nil.
func (csu *ConnectionShopifyUpdate) SetNillableRateIntegration(b *bool) *ConnectionShopifyUpdate {
	if b != nil {
		csu.SetRateIntegration(*b)
	}
	return csu
}

// SetStoreURL sets the "store_url" field.
func (csu *ConnectionShopifyUpdate) SetStoreURL(s string) *ConnectionShopifyUpdate {
	csu.mutation.SetStoreURL(s)
	return csu
}

// SetNillableStoreURL sets the "store_url" field if the given value is not nil.
func (csu *ConnectionShopifyUpdate) SetNillableStoreURL(s *string) *ConnectionShopifyUpdate {
	if s != nil {
		csu.SetStoreURL(*s)
	}
	return csu
}

// ClearStoreURL clears the value of the "store_url" field.
func (csu *ConnectionShopifyUpdate) ClearStoreURL() *ConnectionShopifyUpdate {
	csu.mutation.ClearStoreURL()
	return csu
}

// SetAPIKey sets the "api_key" field.
func (csu *ConnectionShopifyUpdate) SetAPIKey(s string) *ConnectionShopifyUpdate {
	csu.mutation.SetAPIKey(s)
	return csu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csu *ConnectionShopifyUpdate) SetNillableAPIKey(s *string) *ConnectionShopifyUpdate {
	if s != nil {
		csu.SetAPIKey(*s)
	}
	return csu
}

// ClearAPIKey clears the value of the "api_key" field.
func (csu *ConnectionShopifyUpdate) ClearAPIKey() *ConnectionShopifyUpdate {
	csu.mutation.ClearAPIKey()
	return csu
}

// SetLookupKey sets the "lookup_key" field.
func (csu *ConnectionShopifyUpdate) SetLookupKey(s string) *ConnectionShopifyUpdate {
	csu.mutation.SetLookupKey(s)
	return csu
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (csu *ConnectionShopifyUpdate) SetNillableLookupKey(s *string) *ConnectionShopifyUpdate {
	if s != nil {
		csu.SetLookupKey(*s)
	}
	return csu
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (csu *ConnectionShopifyUpdate) ClearLookupKey() *ConnectionShopifyUpdate {
	csu.mutation.ClearLookupKey()
	return csu
}

// SetSyncFrom sets the "sync_from" field.
func (csu *ConnectionShopifyUpdate) SetSyncFrom(t time.Time) *ConnectionShopifyUpdate {
	csu.mutation.SetSyncFrom(t)
	return csu
}

// SetNillableSyncFrom sets the "sync_from" field if the given value is not nil.
func (csu *ConnectionShopifyUpdate) SetNillableSyncFrom(t *time.Time) *ConnectionShopifyUpdate {
	if t != nil {
		csu.SetSyncFrom(*t)
	}
	return csu
}

// ClearSyncFrom clears the value of the "sync_from" field.
func (csu *ConnectionShopifyUpdate) ClearSyncFrom() *ConnectionShopifyUpdate {
	csu.mutation.ClearSyncFrom()
	return csu
}

// SetFilterTags sets the "filter_tags" field.
func (csu *ConnectionShopifyUpdate) SetFilterTags(s []string) *ConnectionShopifyUpdate {
	csu.mutation.SetFilterTags(s)
	return csu
}

// AppendFilterTags appends s to the "filter_tags" field.
func (csu *ConnectionShopifyUpdate) AppendFilterTags(s []string) *ConnectionShopifyUpdate {
	csu.mutation.AppendFilterTags(s)
	return csu
}

// ClearFilterTags clears the value of the "filter_tags" field.
func (csu *ConnectionShopifyUpdate) ClearFilterTags() *ConnectionShopifyUpdate {
	csu.mutation.ClearFilterTags()
	return csu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (csu *ConnectionShopifyUpdate) SetTenant(t *Tenant) *ConnectionShopifyUpdate {
	return csu.SetTenantID(t.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (csu *ConnectionShopifyUpdate) SetConnectionID(id pulid.ID) *ConnectionShopifyUpdate {
	csu.mutation.SetConnectionID(id)
	return csu
}

// SetConnection sets the "connection" edge to the Connection entity.
func (csu *ConnectionShopifyUpdate) SetConnection(c *Connection) *ConnectionShopifyUpdate {
	return csu.SetConnectionID(c.ID)
}

// Mutation returns the ConnectionShopifyMutation object of the builder.
func (csu *ConnectionShopifyUpdate) Mutation() *ConnectionShopifyMutation {
	return csu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (csu *ConnectionShopifyUpdate) ClearTenant() *ConnectionShopifyUpdate {
	csu.mutation.ClearTenant()
	return csu
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (csu *ConnectionShopifyUpdate) ClearConnection() *ConnectionShopifyUpdate {
	csu.mutation.ClearConnection()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ConnectionShopifyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ConnectionShopifyUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ConnectionShopifyUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ConnectionShopifyUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *ConnectionShopifyUpdate) check() error {
	if csu.mutation.TenantCleared() && len(csu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionShopify.tenant"`)
	}
	if csu.mutation.ConnectionCleared() && len(csu.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionShopify.connection"`)
	}
	return nil
}

func (csu *ConnectionShopifyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionshopify.Table, connectionshopify.Columns, sqlgraph.NewFieldSpec(connectionshopify.FieldID, field.TypeString))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.RateIntegration(); ok {
		_spec.SetField(connectionshopify.FieldRateIntegration, field.TypeBool, value)
	}
	if value, ok := csu.mutation.StoreURL(); ok {
		_spec.SetField(connectionshopify.FieldStoreURL, field.TypeString, value)
	}
	if csu.mutation.StoreURLCleared() {
		_spec.ClearField(connectionshopify.FieldStoreURL, field.TypeString)
	}
	if value, ok := csu.mutation.APIKey(); ok {
		_spec.SetField(connectionshopify.FieldAPIKey, field.TypeString, value)
	}
	if csu.mutation.APIKeyCleared() {
		_spec.ClearField(connectionshopify.FieldAPIKey, field.TypeString)
	}
	if value, ok := csu.mutation.LookupKey(); ok {
		_spec.SetField(connectionshopify.FieldLookupKey, field.TypeString, value)
	}
	if csu.mutation.LookupKeyCleared() {
		_spec.ClearField(connectionshopify.FieldLookupKey, field.TypeString)
	}
	if value, ok := csu.mutation.SyncFrom(); ok {
		_spec.SetField(connectionshopify.FieldSyncFrom, field.TypeTime, value)
	}
	if csu.mutation.SyncFromCleared() {
		_spec.ClearField(connectionshopify.FieldSyncFrom, field.TypeTime)
	}
	if value, ok := csu.mutation.FilterTags(); ok {
		_spec.SetField(connectionshopify.FieldFilterTags, field.TypeJSON, value)
	}
	if value, ok := csu.mutation.AppendedFilterTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, connectionshopify.FieldFilterTags, value)
		})
	}
	if csu.mutation.FilterTagsCleared() {
		_spec.ClearField(connectionshopify.FieldFilterTags, field.TypeJSON)
	}
	if csu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionshopify.TenantTable,
			Columns: []string{connectionshopify.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionshopify.TenantTable,
			Columns: []string{connectionshopify.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionshopify.ConnectionTable,
			Columns: []string{connectionshopify.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionshopify.ConnectionTable,
			Columns: []string{connectionshopify.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionshopify.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ConnectionShopifyUpdateOne is the builder for updating a single ConnectionShopify entity.
type ConnectionShopifyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionShopifyMutation
}

// SetTenantID sets the "tenant_id" field.
func (csuo *ConnectionShopifyUpdateOne) SetTenantID(pu pulid.ID) *ConnectionShopifyUpdateOne {
	csuo.mutation.SetTenantID(pu)
	return csuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (csuo *ConnectionShopifyUpdateOne) SetNillableTenantID(pu *pulid.ID) *ConnectionShopifyUpdateOne {
	if pu != nil {
		csuo.SetTenantID(*pu)
	}
	return csuo
}

// SetRateIntegration sets the "rate_integration" field.
func (csuo *ConnectionShopifyUpdateOne) SetRateIntegration(b bool) *ConnectionShopifyUpdateOne {
	csuo.mutation.SetRateIntegration(b)
	return csuo
}

// SetNillableRateIntegration sets the "rate_integration" field if the given value is not nil.
func (csuo *ConnectionShopifyUpdateOne) SetNillableRateIntegration(b *bool) *ConnectionShopifyUpdateOne {
	if b != nil {
		csuo.SetRateIntegration(*b)
	}
	return csuo
}

// SetStoreURL sets the "store_url" field.
func (csuo *ConnectionShopifyUpdateOne) SetStoreURL(s string) *ConnectionShopifyUpdateOne {
	csuo.mutation.SetStoreURL(s)
	return csuo
}

// SetNillableStoreURL sets the "store_url" field if the given value is not nil.
func (csuo *ConnectionShopifyUpdateOne) SetNillableStoreURL(s *string) *ConnectionShopifyUpdateOne {
	if s != nil {
		csuo.SetStoreURL(*s)
	}
	return csuo
}

// ClearStoreURL clears the value of the "store_url" field.
func (csuo *ConnectionShopifyUpdateOne) ClearStoreURL() *ConnectionShopifyUpdateOne {
	csuo.mutation.ClearStoreURL()
	return csuo
}

// SetAPIKey sets the "api_key" field.
func (csuo *ConnectionShopifyUpdateOne) SetAPIKey(s string) *ConnectionShopifyUpdateOne {
	csuo.mutation.SetAPIKey(s)
	return csuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csuo *ConnectionShopifyUpdateOne) SetNillableAPIKey(s *string) *ConnectionShopifyUpdateOne {
	if s != nil {
		csuo.SetAPIKey(*s)
	}
	return csuo
}

// ClearAPIKey clears the value of the "api_key" field.
func (csuo *ConnectionShopifyUpdateOne) ClearAPIKey() *ConnectionShopifyUpdateOne {
	csuo.mutation.ClearAPIKey()
	return csuo
}

// SetLookupKey sets the "lookup_key" field.
func (csuo *ConnectionShopifyUpdateOne) SetLookupKey(s string) *ConnectionShopifyUpdateOne {
	csuo.mutation.SetLookupKey(s)
	return csuo
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (csuo *ConnectionShopifyUpdateOne) SetNillableLookupKey(s *string) *ConnectionShopifyUpdateOne {
	if s != nil {
		csuo.SetLookupKey(*s)
	}
	return csuo
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (csuo *ConnectionShopifyUpdateOne) ClearLookupKey() *ConnectionShopifyUpdateOne {
	csuo.mutation.ClearLookupKey()
	return csuo
}

// SetSyncFrom sets the "sync_from" field.
func (csuo *ConnectionShopifyUpdateOne) SetSyncFrom(t time.Time) *ConnectionShopifyUpdateOne {
	csuo.mutation.SetSyncFrom(t)
	return csuo
}

// SetNillableSyncFrom sets the "sync_from" field if the given value is not nil.
func (csuo *ConnectionShopifyUpdateOne) SetNillableSyncFrom(t *time.Time) *ConnectionShopifyUpdateOne {
	if t != nil {
		csuo.SetSyncFrom(*t)
	}
	return csuo
}

// ClearSyncFrom clears the value of the "sync_from" field.
func (csuo *ConnectionShopifyUpdateOne) ClearSyncFrom() *ConnectionShopifyUpdateOne {
	csuo.mutation.ClearSyncFrom()
	return csuo
}

// SetFilterTags sets the "filter_tags" field.
func (csuo *ConnectionShopifyUpdateOne) SetFilterTags(s []string) *ConnectionShopifyUpdateOne {
	csuo.mutation.SetFilterTags(s)
	return csuo
}

// AppendFilterTags appends s to the "filter_tags" field.
func (csuo *ConnectionShopifyUpdateOne) AppendFilterTags(s []string) *ConnectionShopifyUpdateOne {
	csuo.mutation.AppendFilterTags(s)
	return csuo
}

// ClearFilterTags clears the value of the "filter_tags" field.
func (csuo *ConnectionShopifyUpdateOne) ClearFilterTags() *ConnectionShopifyUpdateOne {
	csuo.mutation.ClearFilterTags()
	return csuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (csuo *ConnectionShopifyUpdateOne) SetTenant(t *Tenant) *ConnectionShopifyUpdateOne {
	return csuo.SetTenantID(t.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (csuo *ConnectionShopifyUpdateOne) SetConnectionID(id pulid.ID) *ConnectionShopifyUpdateOne {
	csuo.mutation.SetConnectionID(id)
	return csuo
}

// SetConnection sets the "connection" edge to the Connection entity.
func (csuo *ConnectionShopifyUpdateOne) SetConnection(c *Connection) *ConnectionShopifyUpdateOne {
	return csuo.SetConnectionID(c.ID)
}

// Mutation returns the ConnectionShopifyMutation object of the builder.
func (csuo *ConnectionShopifyUpdateOne) Mutation() *ConnectionShopifyMutation {
	return csuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (csuo *ConnectionShopifyUpdateOne) ClearTenant() *ConnectionShopifyUpdateOne {
	csuo.mutation.ClearTenant()
	return csuo
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (csuo *ConnectionShopifyUpdateOne) ClearConnection() *ConnectionShopifyUpdateOne {
	csuo.mutation.ClearConnection()
	return csuo
}

// Where appends a list predicates to the ConnectionShopifyUpdate builder.
func (csuo *ConnectionShopifyUpdateOne) Where(ps ...predicate.ConnectionShopify) *ConnectionShopifyUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ConnectionShopifyUpdateOne) Select(field string, fields ...string) *ConnectionShopifyUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated ConnectionShopify entity.
func (csuo *ConnectionShopifyUpdateOne) Save(ctx context.Context) (*ConnectionShopify, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ConnectionShopifyUpdateOne) SaveX(ctx context.Context) *ConnectionShopify {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ConnectionShopifyUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ConnectionShopifyUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *ConnectionShopifyUpdateOne) check() error {
	if csuo.mutation.TenantCleared() && len(csuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionShopify.tenant"`)
	}
	if csuo.mutation.ConnectionCleared() && len(csuo.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionShopify.connection"`)
	}
	return nil
}

func (csuo *ConnectionShopifyUpdateOne) sqlSave(ctx context.Context) (_node *ConnectionShopify, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionshopify.Table, connectionshopify.Columns, sqlgraph.NewFieldSpec(connectionshopify.FieldID, field.TypeString))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectionShopify.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectionshopify.FieldID)
		for _, f := range fields {
			if !connectionshopify.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectionshopify.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.RateIntegration(); ok {
		_spec.SetField(connectionshopify.FieldRateIntegration, field.TypeBool, value)
	}
	if value, ok := csuo.mutation.StoreURL(); ok {
		_spec.SetField(connectionshopify.FieldStoreURL, field.TypeString, value)
	}
	if csuo.mutation.StoreURLCleared() {
		_spec.ClearField(connectionshopify.FieldStoreURL, field.TypeString)
	}
	if value, ok := csuo.mutation.APIKey(); ok {
		_spec.SetField(connectionshopify.FieldAPIKey, field.TypeString, value)
	}
	if csuo.mutation.APIKeyCleared() {
		_spec.ClearField(connectionshopify.FieldAPIKey, field.TypeString)
	}
	if value, ok := csuo.mutation.LookupKey(); ok {
		_spec.SetField(connectionshopify.FieldLookupKey, field.TypeString, value)
	}
	if csuo.mutation.LookupKeyCleared() {
		_spec.ClearField(connectionshopify.FieldLookupKey, field.TypeString)
	}
	if value, ok := csuo.mutation.SyncFrom(); ok {
		_spec.SetField(connectionshopify.FieldSyncFrom, field.TypeTime, value)
	}
	if csuo.mutation.SyncFromCleared() {
		_spec.ClearField(connectionshopify.FieldSyncFrom, field.TypeTime)
	}
	if value, ok := csuo.mutation.FilterTags(); ok {
		_spec.SetField(connectionshopify.FieldFilterTags, field.TypeJSON, value)
	}
	if value, ok := csuo.mutation.AppendedFilterTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, connectionshopify.FieldFilterTags, value)
		})
	}
	if csuo.mutation.FilterTagsCleared() {
		_spec.ClearField(connectionshopify.FieldFilterTags, field.TypeJSON)
	}
	if csuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionshopify.TenantTable,
			Columns: []string{connectionshopify.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionshopify.TenantTable,
			Columns: []string{connectionshopify.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionshopify.ConnectionTable,
			Columns: []string{connectionshopify.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionshopify.ConnectionTable,
			Columns: []string{connectionshopify.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConnectionShopify{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionshopify.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
