// Code generated by ent, DO NOT EDIT.

package orderline

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldTenantID, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldUnitPrice, v))
}

// DiscountAllocationAmount applies equality check predicate on the "discount_allocation_amount" field. It's identical to DiscountAllocationAmountEQ.
func DiscountAllocationAmount(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldDiscountAllocationAmount, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldExternalID, v))
}

// Units applies equality check predicate on the "units" field. It's identical to UnitsEQ.
func Units(v int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldUnits, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProductVariantID applies equality check predicate on the "product_variant_id" field. It's identical to ProductVariantIDEQ.
func ProductVariantID(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldProductVariantID, v))
}

// ColliID applies equality check predicate on the "colli_id" field. It's identical to ColliIDEQ.
func ColliID(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldColliID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldContainsFold(FieldTenantID, vc))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldUnitPrice, v))
}

// DiscountAllocationAmountEQ applies the EQ predicate on the "discount_allocation_amount" field.
func DiscountAllocationAmountEQ(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldDiscountAllocationAmount, v))
}

// DiscountAllocationAmountNEQ applies the NEQ predicate on the "discount_allocation_amount" field.
func DiscountAllocationAmountNEQ(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldDiscountAllocationAmount, v))
}

// DiscountAllocationAmountIn applies the In predicate on the "discount_allocation_amount" field.
func DiscountAllocationAmountIn(vs ...float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldDiscountAllocationAmount, vs...))
}

// DiscountAllocationAmountNotIn applies the NotIn predicate on the "discount_allocation_amount" field.
func DiscountAllocationAmountNotIn(vs ...float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldDiscountAllocationAmount, vs...))
}

// DiscountAllocationAmountGT applies the GT predicate on the "discount_allocation_amount" field.
func DiscountAllocationAmountGT(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldDiscountAllocationAmount, v))
}

// DiscountAllocationAmountGTE applies the GTE predicate on the "discount_allocation_amount" field.
func DiscountAllocationAmountGTE(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldDiscountAllocationAmount, v))
}

// DiscountAllocationAmountLT applies the LT predicate on the "discount_allocation_amount" field.
func DiscountAllocationAmountLT(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldDiscountAllocationAmount, v))
}

// DiscountAllocationAmountLTE applies the LTE predicate on the "discount_allocation_amount" field.
func DiscountAllocationAmountLTE(v float64) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldDiscountAllocationAmount, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldContainsFold(FieldExternalID, v))
}

// UnitsEQ applies the EQ predicate on the "units" field.
func UnitsEQ(v int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldUnits, v))
}

// UnitsNEQ applies the NEQ predicate on the "units" field.
func UnitsNEQ(v int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldUnits, v))
}

// UnitsIn applies the In predicate on the "units" field.
func UnitsIn(vs ...int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldUnits, vs...))
}

// UnitsNotIn applies the NotIn predicate on the "units" field.
func UnitsNotIn(vs ...int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldUnits, vs...))
}

// UnitsGT applies the GT predicate on the "units" field.
func UnitsGT(v int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldUnits, v))
}

// UnitsGTE applies the GTE predicate on the "units" field.
func UnitsGTE(v int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldUnits, v))
}

// UnitsLT applies the LT predicate on the "units" field.
func UnitsLT(v int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldUnits, v))
}

// UnitsLTE applies the LTE predicate on the "units" field.
func UnitsLTE(v int) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldUnits, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldUpdatedAt, v))
}

// ProductVariantIDEQ applies the EQ predicate on the "product_variant_id" field.
func ProductVariantIDEQ(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldProductVariantID, v))
}

// ProductVariantIDNEQ applies the NEQ predicate on the "product_variant_id" field.
func ProductVariantIDNEQ(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldProductVariantID, v))
}

// ProductVariantIDIn applies the In predicate on the "product_variant_id" field.
func ProductVariantIDIn(vs ...pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldProductVariantID, vs...))
}

// ProductVariantIDNotIn applies the NotIn predicate on the "product_variant_id" field.
func ProductVariantIDNotIn(vs ...pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldProductVariantID, vs...))
}

// ProductVariantIDGT applies the GT predicate on the "product_variant_id" field.
func ProductVariantIDGT(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldProductVariantID, v))
}

// ProductVariantIDGTE applies the GTE predicate on the "product_variant_id" field.
func ProductVariantIDGTE(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldProductVariantID, v))
}

// ProductVariantIDLT applies the LT predicate on the "product_variant_id" field.
func ProductVariantIDLT(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldProductVariantID, v))
}

// ProductVariantIDLTE applies the LTE predicate on the "product_variant_id" field.
func ProductVariantIDLTE(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldProductVariantID, v))
}

// ProductVariantIDContains applies the Contains predicate on the "product_variant_id" field.
func ProductVariantIDContains(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldContains(FieldProductVariantID, vc))
}

// ProductVariantIDHasPrefix applies the HasPrefix predicate on the "product_variant_id" field.
func ProductVariantIDHasPrefix(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldHasPrefix(FieldProductVariantID, vc))
}

// ProductVariantIDHasSuffix applies the HasSuffix predicate on the "product_variant_id" field.
func ProductVariantIDHasSuffix(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldHasSuffix(FieldProductVariantID, vc))
}

// ProductVariantIDEqualFold applies the EqualFold predicate on the "product_variant_id" field.
func ProductVariantIDEqualFold(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldEqualFold(FieldProductVariantID, vc))
}

// ProductVariantIDContainsFold applies the ContainsFold predicate on the "product_variant_id" field.
func ProductVariantIDContainsFold(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldContainsFold(FieldProductVariantID, vc))
}

// ColliIDEQ applies the EQ predicate on the "colli_id" field.
func ColliIDEQ(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldEQ(FieldColliID, v))
}

// ColliIDNEQ applies the NEQ predicate on the "colli_id" field.
func ColliIDNEQ(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNEQ(FieldColliID, v))
}

// ColliIDIn applies the In predicate on the "colli_id" field.
func ColliIDIn(vs ...pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldIn(FieldColliID, vs...))
}

// ColliIDNotIn applies the NotIn predicate on the "colli_id" field.
func ColliIDNotIn(vs ...pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldNotIn(FieldColliID, vs...))
}

// ColliIDGT applies the GT predicate on the "colli_id" field.
func ColliIDGT(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGT(FieldColliID, v))
}

// ColliIDGTE applies the GTE predicate on the "colli_id" field.
func ColliIDGTE(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldGTE(FieldColliID, v))
}

// ColliIDLT applies the LT predicate on the "colli_id" field.
func ColliIDLT(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLT(FieldColliID, v))
}

// ColliIDLTE applies the LTE predicate on the "colli_id" field.
func ColliIDLTE(v pulid.ID) predicate.OrderLine {
	return predicate.OrderLine(sql.FieldLTE(FieldColliID, v))
}

// ColliIDContains applies the Contains predicate on the "colli_id" field.
func ColliIDContains(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldContains(FieldColliID, vc))
}

// ColliIDHasPrefix applies the HasPrefix predicate on the "colli_id" field.
func ColliIDHasPrefix(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldHasPrefix(FieldColliID, vc))
}

// ColliIDHasSuffix applies the HasSuffix predicate on the "colli_id" field.
func ColliIDHasSuffix(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldHasSuffix(FieldColliID, vc))
}

// ColliIDEqualFold applies the EqualFold predicate on the "colli_id" field.
func ColliIDEqualFold(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldEqualFold(FieldColliID, vc))
}

// ColliIDContainsFold applies the ContainsFold predicate on the "colli_id" field.
func ColliIDContainsFold(v pulid.ID) predicate.OrderLine {
	vc := string(v)
	return predicate.OrderLine(sql.FieldContainsFold(FieldColliID, vc))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductVariant applies the HasEdge predicate on the "product_variant" edge.
func HasProductVariant() predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProductVariantTable, ProductVariantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductVariantWith applies the HasEdge predicate on the "product_variant" edge with a given conditions (other predicates).
func HasProductVariantWith(preds ...predicate.ProductVariant) predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := newProductVariantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasColli applies the HasEdge predicate on the "colli" edge.
func HasColli() predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ColliTable, ColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColliWith applies the HasEdge predicate on the "colli" edge with a given conditions (other predicates).
func HasColliWith(preds ...predicate.Colli) predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := newColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnOrderLine applies the HasEdge predicate on the "return_order_line" edge.
func HasReturnOrderLine() predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnOrderLineTable, ReturnOrderLineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnOrderLineWith applies the HasEdge predicate on the "return_order_line" edge with a given conditions (other predicates).
func HasReturnOrderLineWith(preds ...predicate.ReturnOrderLine) predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := newReturnOrderLineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrency applies the HasEdge predicate on the "currency" edge.
func HasCurrency() predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CurrencyTable, CurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyWith applies the HasEdge predicate on the "currency" edge with a given conditions (other predicates).
func HasCurrencyWith(preds ...predicate.Currency) predicate.OrderLine {
	return predicate.OrderLine(func(s *sql.Selector) {
		step := newCurrencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderLine) predicate.OrderLine {
	return predicate.OrderLine(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderLine) predicate.OrderLine {
	return predicate.OrderLine(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderLine) predicate.OrderLine {
	return predicate.OrderLine(sql.NotPredicates(p))
}
