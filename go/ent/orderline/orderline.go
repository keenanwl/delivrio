// Code generated by ent, DO NOT EDIT.

package orderline

import (
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderline type in the database.
	Label = "order_line"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// FieldDiscountAllocationAmount holds the string denoting the discount_allocation_amount field in the database.
	FieldDiscountAllocationAmount = "discount_allocation_amount"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldUnits holds the string denoting the units field in the database.
	FieldUnits = "units"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProductVariantID holds the string denoting the product_variant_id field in the database.
	FieldProductVariantID = "product_variant_id"
	// FieldColliID holds the string denoting the colli_id field in the database.
	FieldColliID = "colli_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeProductVariant holds the string denoting the product_variant edge name in mutations.
	EdgeProductVariant = "product_variant"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// EdgeReturnOrderLine holds the string denoting the return_order_line edge name in mutations.
	EdgeReturnOrderLine = "return_order_line"
	// EdgeCurrency holds the string denoting the currency edge name in mutations.
	EdgeCurrency = "currency"
	// Table holds the table name of the orderline in the database.
	Table = "order_lines"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "order_lines"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ProductVariantTable is the table that holds the product_variant relation/edge.
	ProductVariantTable = "order_lines"
	// ProductVariantInverseTable is the table name for the ProductVariant entity.
	// It exists in this package in order to avoid circular dependency with the "productvariant" package.
	ProductVariantInverseTable = "product_variants"
	// ProductVariantColumn is the table column denoting the product_variant relation/edge.
	ProductVariantColumn = "product_variant_id"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "order_lines"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "colli_id"
	// ReturnOrderLineTable is the table that holds the return_order_line relation/edge.
	ReturnOrderLineTable = "return_order_lines"
	// ReturnOrderLineInverseTable is the table name for the ReturnOrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "returnorderline" package.
	ReturnOrderLineInverseTable = "return_order_lines"
	// ReturnOrderLineColumn is the table column denoting the return_order_line relation/edge.
	ReturnOrderLineColumn = "return_order_line_order_line"
	// CurrencyTable is the table that holds the currency relation/edge.
	CurrencyTable = "order_lines"
	// CurrencyInverseTable is the table name for the Currency entity.
	// It exists in this package in order to avoid circular dependency with the "currency" package.
	CurrencyInverseTable = "currencies"
	// CurrencyColumn is the table column denoting the currency relation/edge.
	CurrencyColumn = "order_line_currency"
)

// Columns holds all SQL columns for orderline fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldUnitPrice,
	FieldDiscountAllocationAmount,
	FieldExternalID,
	FieldUnits,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProductVariantID,
	FieldColliID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "order_lines"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"order_line_currency",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [4]ent.Hook
	Policy ent.Policy
	// UnitsValidator is a validator for the "units" field. It is called by the builders before save.
	UnitsValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the OrderLine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByUnitPrice orders the results by the unit_price field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByDiscountAllocationAmount orders the results by the discount_allocation_amount field.
func ByDiscountAllocationAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountAllocationAmount, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByUnits orders the results by the units field.
func ByUnits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnits, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProductVariantID orders the results by the product_variant_id field.
func ByProductVariantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductVariantID, opts...).ToFunc()
}

// ByColliID orders the results by the colli_id field.
func ByColliID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColliID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductVariantField orders the results by product_variant field.
func ByProductVariantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductVariantStep(), sql.OrderByField(field, opts...))
	}
}

// ByColliField orders the results by colli field.
func ByColliField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnOrderLineCount orders the results by return_order_line count.
func ByReturnOrderLineCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnOrderLineStep(), opts...)
	}
}

// ByReturnOrderLine orders the results by return_order_line terms.
func ByReturnOrderLine(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnOrderLineStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCurrencyField orders the results by currency field.
func ByCurrencyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newProductVariantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductVariantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProductVariantTable, ProductVariantColumn),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ColliTable, ColliColumn),
	)
}
func newReturnOrderLineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnOrderLineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnOrderLineTable, ReturnOrderLineColumn),
	)
}
func newCurrencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CurrencyTable, CurrencyColumn),
	)
}
