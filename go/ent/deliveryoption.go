// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeliveryOption is the model entity for the DeliveryOption schema.
type DeliveryOption struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ArchivedAt holds the value of the "archived_at" field.
	ArchivedAt time.Time `json:"archived_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// ClickOptionDisplayCount holds the value of the "click_option_display_count" field.
	ClickOptionDisplayCount int `json:"click_option_display_count,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ClickCollect holds the value of the "click_collect" field.
	ClickCollect bool `json:"click_collect,omitempty"`
	// OverrideSenderAddress holds the value of the "override_sender_address" field.
	OverrideSenderAddress bool `json:"override_sender_address,omitempty"`
	// OverrideReturnAddress holds the value of the "override_return_address" field.
	OverrideReturnAddress bool `json:"override_return_address,omitempty"`
	// HideDeliveryOption holds the value of the "hide_delivery_option" field.
	HideDeliveryOption bool `json:"hide_delivery_option,omitempty"`
	// DeliveryEstimateFrom holds the value of the "delivery_estimate_from" field.
	DeliveryEstimateFrom int `json:"delivery_estimate_from,omitempty"`
	// DeliveryEstimateTo holds the value of the "delivery_estimate_to" field.
	DeliveryEstimateTo int `json:"delivery_estimate_to,omitempty"`
	// WebshipperIntegration holds the value of the "webshipper_integration" field.
	WebshipperIntegration bool `json:"webshipper_integration,omitempty"`
	// WebshipperID holds the value of the "webshipper_id" field.
	WebshipperID int `json:"webshipper_id,omitempty"`
	// ShipmondoIntegration holds the value of the "shipmondo_integration" field.
	ShipmondoIntegration bool `json:"shipmondo_integration,omitempty"`
	// May contain placeholders
	ShipmondoDeliveryOption string `json:"shipmondo_delivery_option,omitempty"`
	// Since some services are customs optional
	CustomsEnabled bool `json:"customs_enabled,omitempty"`
	// Who is responsible for signing of custom docs
	CustomsSigner string `json:"customs_signer,omitempty"`
	// Toggle to hide this rate if a company field is not provided.
	HideIfCompanyEmpty bool `json:"hide_if_company_empty,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryOptionQuery when eager-loading is set.
	Edges                                        DeliveryOptionEdges `json:"edges"`
	connection_delivery_option                   *pulid.ID
	connection_default_delivery_option           *pulid.ID
	delivery_option_carrier                      *pulid.ID
	delivery_option_carrier_service              *pulid.ID
	delivery_option_email_click_collect_at_store *pulid.ID
	delivery_option_default_packaging            *pulid.ID
	selectValues                                 sql.SelectValues
}

// DeliveryOptionEdges holds the relations/edges for other nodes in the graph.
type DeliveryOptionEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Carrier holds the value of the carrier edge.
	Carrier *Carrier `json:"carrier,omitempty"`
	// DeliveryRule holds the value of the delivery_rule edge.
	DeliveryRule []*DeliveryRule `json:"delivery_rule,omitempty"`
	// DeliveryOptionDAO holds the value of the delivery_option_dao edge.
	DeliveryOptionDAO *DeliveryOptionDAO `json:"delivery_option_dao,omitempty"`
	// DeliveryOptionDF holds the value of the delivery_option_df edge.
	DeliveryOptionDF *DeliveryOptionDF `json:"delivery_option_df,omitempty"`
	// DeliveryOptionDSV holds the value of the delivery_option_dsv edge.
	DeliveryOptionDSV *DeliveryOptionDSV `json:"delivery_option_dsv,omitempty"`
	// DeliveryOptionEasyPost holds the value of the delivery_option_easy_post edge.
	DeliveryOptionEasyPost *DeliveryOptionEasyPost `json:"delivery_option_easy_post,omitempty"`
	// DeliveryOptionGLS holds the value of the delivery_option_gls edge.
	DeliveryOptionGLS *DeliveryOptionGLS `json:"delivery_option_gls,omitempty"`
	// DeliveryOptionPostNord holds the value of the delivery_option_post_nord edge.
	DeliveryOptionPostNord *DeliveryOptionPostNord `json:"delivery_option_post_nord,omitempty"`
	// DeliveryOptionUSPS holds the value of the delivery_option_usps edge.
	DeliveryOptionUSPS *DeliveryOptionUSPS `json:"delivery_option_usps,omitempty"`
	// DeliveryOptionBring holds the value of the delivery_option_bring edge.
	DeliveryOptionBring *DeliveryOptionBring `json:"delivery_option_bring,omitempty"`
	// ReturnPortals holds the value of the return_portals edge.
	ReturnPortals []*ReturnPortal `json:"return_portals,omitempty"`
	// Colli holds the value of the colli edge.
	Colli []*Colli `json:"colli,omitempty"`
	// ReturnColli holds the value of the return_colli edge.
	ReturnColli []*ReturnColli `json:"return_colli,omitempty"`
	// CarrierService holds the value of the carrier_service edge.
	CarrierService *CarrierService `json:"carrier_service,omitempty"`
	// Connection holds the value of the connection edge.
	Connection *Connection `json:"connection,omitempty"`
	// The default delivery option for the connection. Unique since DO is already pinned to a single connection.
	ConnectionDefault *Connection `json:"connection_default,omitempty"`
	// HypothesisTestDeliveryOptionGroupOne holds the value of the hypothesis_test_delivery_option_group_one edge.
	HypothesisTestDeliveryOptionGroupOne []*HypothesisTestDeliveryOption `json:"hypothesis_test_delivery_option_group_one,omitempty"`
	// HypothesisTestDeliveryOptionGroupTwo holds the value of the hypothesis_test_delivery_option_group_two edge.
	HypothesisTestDeliveryOptionGroupTwo []*HypothesisTestDeliveryOption `json:"hypothesis_test_delivery_option_group_two,omitempty"`
	// HypothesisTestDeliveryOptionLookup holds the value of the hypothesis_test_delivery_option_lookup edge.
	HypothesisTestDeliveryOptionLookup []*HypothesisTestDeliveryOptionLookup `json:"hypothesis_test_delivery_option_lookup,omitempty"`
	// ClickCollectLocation holds the value of the click_collect_location edge.
	ClickCollectLocation []*Location `json:"click_collect_location,omitempty"`
	// EmailClickCollectAtStore holds the value of the email_click_collect_at_store edge.
	EmailClickCollectAtStore *EmailTemplate `json:"email_click_collect_at_store,omitempty"`
	// Consolidation holds the value of the consolidation edge.
	Consolidation []*Consolidation `json:"consolidation,omitempty"`
	// DefaultPackaging holds the value of the default_packaging edge.
	DefaultPackaging *Packaging `json:"default_packaging,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [24]bool
	// totalCount holds the count of the edges above.
	totalCount [24]map[string]int

	namedDeliveryRule                         map[string][]*DeliveryRule
	namedReturnPortals                        map[string][]*ReturnPortal
	namedColli                                map[string][]*Colli
	namedReturnColli                          map[string][]*ReturnColli
	namedHypothesisTestDeliveryOptionGroupOne map[string][]*HypothesisTestDeliveryOption
	namedHypothesisTestDeliveryOptionGroupTwo map[string][]*HypothesisTestDeliveryOption
	namedHypothesisTestDeliveryOptionLookup   map[string][]*HypothesisTestDeliveryOptionLookup
	namedClickCollectLocation                 map[string][]*Location
	namedConsolidation                        map[string][]*Consolidation
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarrierOrErr returns the Carrier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) CarrierOrErr() (*Carrier, error) {
	if e.Carrier != nil {
		return e.Carrier, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrier.Label}
	}
	return nil, &NotLoadedError{edge: "carrier"}
}

// DeliveryRuleOrErr returns the DeliveryRule value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) DeliveryRuleOrErr() ([]*DeliveryRule, error) {
	if e.loadedTypes[2] {
		return e.DeliveryRule, nil
	}
	return nil, &NotLoadedError{edge: "delivery_rule"}
}

// DeliveryOptionDAOOrErr returns the DeliveryOptionDAO value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DeliveryOptionDAOOrErr() (*DeliveryOptionDAO, error) {
	if e.DeliveryOptionDAO != nil {
		return e.DeliveryOptionDAO, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: deliveryoptiondao.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option_dao"}
}

// DeliveryOptionDFOrErr returns the DeliveryOptionDF value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DeliveryOptionDFOrErr() (*DeliveryOptionDF, error) {
	if e.DeliveryOptionDF != nil {
		return e.DeliveryOptionDF, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: deliveryoptiondf.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option_df"}
}

// DeliveryOptionDSVOrErr returns the DeliveryOptionDSV value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DeliveryOptionDSVOrErr() (*DeliveryOptionDSV, error) {
	if e.DeliveryOptionDSV != nil {
		return e.DeliveryOptionDSV, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: deliveryoptiondsv.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option_dsv"}
}

// DeliveryOptionEasyPostOrErr returns the DeliveryOptionEasyPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DeliveryOptionEasyPostOrErr() (*DeliveryOptionEasyPost, error) {
	if e.DeliveryOptionEasyPost != nil {
		return e.DeliveryOptionEasyPost, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: deliveryoptioneasypost.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option_easy_post"}
}

// DeliveryOptionGLSOrErr returns the DeliveryOptionGLS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DeliveryOptionGLSOrErr() (*DeliveryOptionGLS, error) {
	if e.DeliveryOptionGLS != nil {
		return e.DeliveryOptionGLS, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: deliveryoptiongls.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option_gls"}
}

// DeliveryOptionPostNordOrErr returns the DeliveryOptionPostNord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DeliveryOptionPostNordOrErr() (*DeliveryOptionPostNord, error) {
	if e.DeliveryOptionPostNord != nil {
		return e.DeliveryOptionPostNord, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: deliveryoptionpostnord.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option_post_nord"}
}

// DeliveryOptionUSPSOrErr returns the DeliveryOptionUSPS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DeliveryOptionUSPSOrErr() (*DeliveryOptionUSPS, error) {
	if e.DeliveryOptionUSPS != nil {
		return e.DeliveryOptionUSPS, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: deliveryoptionusps.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option_usps"}
}

// DeliveryOptionBringOrErr returns the DeliveryOptionBring value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DeliveryOptionBringOrErr() (*DeliveryOptionBring, error) {
	if e.DeliveryOptionBring != nil {
		return e.DeliveryOptionBring, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: deliveryoptionbring.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option_bring"}
}

// ReturnPortalsOrErr returns the ReturnPortals value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) ReturnPortalsOrErr() ([]*ReturnPortal, error) {
	if e.loadedTypes[11] {
		return e.ReturnPortals, nil
	}
	return nil, &NotLoadedError{edge: "return_portals"}
}

// ColliOrErr returns the Colli value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) ColliOrErr() ([]*Colli, error) {
	if e.loadedTypes[12] {
		return e.Colli, nil
	}
	return nil, &NotLoadedError{edge: "colli"}
}

// ReturnColliOrErr returns the ReturnColli value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) ReturnColliOrErr() ([]*ReturnColli, error) {
	if e.loadedTypes[13] {
		return e.ReturnColli, nil
	}
	return nil, &NotLoadedError{edge: "return_colli"}
}

// CarrierServiceOrErr returns the CarrierService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) CarrierServiceOrErr() (*CarrierService, error) {
	if e.CarrierService != nil {
		return e.CarrierService, nil
	} else if e.loadedTypes[14] {
		return nil, &NotFoundError{label: carrierservice.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service"}
}

// ConnectionOrErr returns the Connection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) ConnectionOrErr() (*Connection, error) {
	if e.Connection != nil {
		return e.Connection, nil
	} else if e.loadedTypes[15] {
		return nil, &NotFoundError{label: connection.Label}
	}
	return nil, &NotLoadedError{edge: "connection"}
}

// ConnectionDefaultOrErr returns the ConnectionDefault value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) ConnectionDefaultOrErr() (*Connection, error) {
	if e.ConnectionDefault != nil {
		return e.ConnectionDefault, nil
	} else if e.loadedTypes[16] {
		return nil, &NotFoundError{label: connection.Label}
	}
	return nil, &NotLoadedError{edge: "connection_default"}
}

// HypothesisTestDeliveryOptionGroupOneOrErr returns the HypothesisTestDeliveryOptionGroupOne value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) HypothesisTestDeliveryOptionGroupOneOrErr() ([]*HypothesisTestDeliveryOption, error) {
	if e.loadedTypes[17] {
		return e.HypothesisTestDeliveryOptionGroupOne, nil
	}
	return nil, &NotLoadedError{edge: "hypothesis_test_delivery_option_group_one"}
}

// HypothesisTestDeliveryOptionGroupTwoOrErr returns the HypothesisTestDeliveryOptionGroupTwo value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) HypothesisTestDeliveryOptionGroupTwoOrErr() ([]*HypothesisTestDeliveryOption, error) {
	if e.loadedTypes[18] {
		return e.HypothesisTestDeliveryOptionGroupTwo, nil
	}
	return nil, &NotLoadedError{edge: "hypothesis_test_delivery_option_group_two"}
}

// HypothesisTestDeliveryOptionLookupOrErr returns the HypothesisTestDeliveryOptionLookup value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) HypothesisTestDeliveryOptionLookupOrErr() ([]*HypothesisTestDeliveryOptionLookup, error) {
	if e.loadedTypes[19] {
		return e.HypothesisTestDeliveryOptionLookup, nil
	}
	return nil, &NotLoadedError{edge: "hypothesis_test_delivery_option_lookup"}
}

// ClickCollectLocationOrErr returns the ClickCollectLocation value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) ClickCollectLocationOrErr() ([]*Location, error) {
	if e.loadedTypes[20] {
		return e.ClickCollectLocation, nil
	}
	return nil, &NotLoadedError{edge: "click_collect_location"}
}

// EmailClickCollectAtStoreOrErr returns the EmailClickCollectAtStore value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) EmailClickCollectAtStoreOrErr() (*EmailTemplate, error) {
	if e.EmailClickCollectAtStore != nil {
		return e.EmailClickCollectAtStore, nil
	} else if e.loadedTypes[21] {
		return nil, &NotFoundError{label: emailtemplate.Label}
	}
	return nil, &NotLoadedError{edge: "email_click_collect_at_store"}
}

// ConsolidationOrErr returns the Consolidation value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionEdges) ConsolidationOrErr() ([]*Consolidation, error) {
	if e.loadedTypes[22] {
		return e.Consolidation, nil
	}
	return nil, &NotLoadedError{edge: "consolidation"}
}

// DefaultPackagingOrErr returns the DefaultPackaging value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionEdges) DefaultPackagingOrErr() (*Packaging, error) {
	if e.DefaultPackaging != nil {
		return e.DefaultPackaging, nil
	} else if e.loadedTypes[23] {
		return nil, &NotFoundError{label: packaging.Label}
	}
	return nil, &NotLoadedError{edge: "default_packaging"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeliveryOption) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliveryoption.FieldID, deliveryoption.FieldTenantID:
			values[i] = new(pulid.ID)
		case deliveryoption.FieldClickCollect, deliveryoption.FieldOverrideSenderAddress, deliveryoption.FieldOverrideReturnAddress, deliveryoption.FieldHideDeliveryOption, deliveryoption.FieldWebshipperIntegration, deliveryoption.FieldShipmondoIntegration, deliveryoption.FieldCustomsEnabled, deliveryoption.FieldHideIfCompanyEmpty:
			values[i] = new(sql.NullBool)
		case deliveryoption.FieldSortOrder, deliveryoption.FieldClickOptionDisplayCount, deliveryoption.FieldDeliveryEstimateFrom, deliveryoption.FieldDeliveryEstimateTo, deliveryoption.FieldWebshipperID:
			values[i] = new(sql.NullInt64)
		case deliveryoption.FieldName, deliveryoption.FieldDescription, deliveryoption.FieldShipmondoDeliveryOption, deliveryoption.FieldCustomsSigner:
			values[i] = new(sql.NullString)
		case deliveryoption.FieldArchivedAt:
			values[i] = new(sql.NullTime)
		case deliveryoption.ForeignKeys[0]: // connection_delivery_option
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case deliveryoption.ForeignKeys[1]: // connection_default_delivery_option
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case deliveryoption.ForeignKeys[2]: // delivery_option_carrier
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case deliveryoption.ForeignKeys[3]: // delivery_option_carrier_service
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case deliveryoption.ForeignKeys[4]: // delivery_option_email_click_collect_at_store
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case deliveryoption.ForeignKeys[5]: // delivery_option_default_packaging
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeliveryOption fields.
func (do *DeliveryOption) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliveryoption.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				do.ID = *value
			}
		case deliveryoption.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				do.TenantID = *value
			}
		case deliveryoption.FieldArchivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[i])
			} else if value.Valid {
				do.ArchivedAt = value.Time
			}
		case deliveryoption.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				do.Name = value.String
			}
		case deliveryoption.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				do.SortOrder = int(value.Int64)
			}
		case deliveryoption.FieldClickOptionDisplayCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field click_option_display_count", values[i])
			} else if value.Valid {
				do.ClickOptionDisplayCount = int(value.Int64)
			}
		case deliveryoption.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				do.Description = value.String
			}
		case deliveryoption.FieldClickCollect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field click_collect", values[i])
			} else if value.Valid {
				do.ClickCollect = value.Bool
			}
		case deliveryoption.FieldOverrideSenderAddress:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field override_sender_address", values[i])
			} else if value.Valid {
				do.OverrideSenderAddress = value.Bool
			}
		case deliveryoption.FieldOverrideReturnAddress:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field override_return_address", values[i])
			} else if value.Valid {
				do.OverrideReturnAddress = value.Bool
			}
		case deliveryoption.FieldHideDeliveryOption:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hide_delivery_option", values[i])
			} else if value.Valid {
				do.HideDeliveryOption = value.Bool
			}
		case deliveryoption.FieldDeliveryEstimateFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_estimate_from", values[i])
			} else if value.Valid {
				do.DeliveryEstimateFrom = int(value.Int64)
			}
		case deliveryoption.FieldDeliveryEstimateTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_estimate_to", values[i])
			} else if value.Valid {
				do.DeliveryEstimateTo = int(value.Int64)
			}
		case deliveryoption.FieldWebshipperIntegration:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field webshipper_integration", values[i])
			} else if value.Valid {
				do.WebshipperIntegration = value.Bool
			}
		case deliveryoption.FieldWebshipperID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field webshipper_id", values[i])
			} else if value.Valid {
				do.WebshipperID = int(value.Int64)
			}
		case deliveryoption.FieldShipmondoIntegration:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field shipmondo_integration", values[i])
			} else if value.Valid {
				do.ShipmondoIntegration = value.Bool
			}
		case deliveryoption.FieldShipmondoDeliveryOption:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipmondo_delivery_option", values[i])
			} else if value.Valid {
				do.ShipmondoDeliveryOption = value.String
			}
		case deliveryoption.FieldCustomsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field customs_enabled", values[i])
			} else if value.Valid {
				do.CustomsEnabled = value.Bool
			}
		case deliveryoption.FieldCustomsSigner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customs_signer", values[i])
			} else if value.Valid {
				do.CustomsSigner = value.String
			}
		case deliveryoption.FieldHideIfCompanyEmpty:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hide_if_company_empty", values[i])
			} else if value.Valid {
				do.HideIfCompanyEmpty = value.Bool
			}
		case deliveryoption.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field connection_delivery_option", values[i])
			} else if value.Valid {
				do.connection_delivery_option = new(pulid.ID)
				*do.connection_delivery_option = *value.S.(*pulid.ID)
			}
		case deliveryoption.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field connection_default_delivery_option", values[i])
			} else if value.Valid {
				do.connection_default_delivery_option = new(pulid.ID)
				*do.connection_default_delivery_option = *value.S.(*pulid.ID)
			}
		case deliveryoption.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_option_carrier", values[i])
			} else if value.Valid {
				do.delivery_option_carrier = new(pulid.ID)
				*do.delivery_option_carrier = *value.S.(*pulid.ID)
			}
		case deliveryoption.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_option_carrier_service", values[i])
			} else if value.Valid {
				do.delivery_option_carrier_service = new(pulid.ID)
				*do.delivery_option_carrier_service = *value.S.(*pulid.ID)
			}
		case deliveryoption.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_option_email_click_collect_at_store", values[i])
			} else if value.Valid {
				do.delivery_option_email_click_collect_at_store = new(pulid.ID)
				*do.delivery_option_email_click_collect_at_store = *value.S.(*pulid.ID)
			}
		case deliveryoption.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_option_default_packaging", values[i])
			} else if value.Valid {
				do.delivery_option_default_packaging = new(pulid.ID)
				*do.delivery_option_default_packaging = *value.S.(*pulid.ID)
			}
		default:
			do.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeliveryOption.
// This includes values selected through modifiers, order, etc.
func (do *DeliveryOption) Value(name string) (ent.Value, error) {
	return do.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryTenant() *TenantQuery {
	return NewDeliveryOptionClient(do.config).QueryTenant(do)
}

// QueryCarrier queries the "carrier" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryCarrier() *CarrierQuery {
	return NewDeliveryOptionClient(do.config).QueryCarrier(do)
}

// QueryDeliveryRule queries the "delivery_rule" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryRule() *DeliveryRuleQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryRule(do)
}

// QueryDeliveryOptionDAO queries the "delivery_option_dao" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryOptionDAO() *DeliveryOptionDAOQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryOptionDAO(do)
}

// QueryDeliveryOptionDF queries the "delivery_option_df" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryOptionDF() *DeliveryOptionDFQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryOptionDF(do)
}

// QueryDeliveryOptionDSV queries the "delivery_option_dsv" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryOptionDSV() *DeliveryOptionDSVQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryOptionDSV(do)
}

// QueryDeliveryOptionEasyPost queries the "delivery_option_easy_post" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryOptionEasyPost() *DeliveryOptionEasyPostQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryOptionEasyPost(do)
}

// QueryDeliveryOptionGLS queries the "delivery_option_gls" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryOptionGLS() *DeliveryOptionGLSQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryOptionGLS(do)
}

// QueryDeliveryOptionPostNord queries the "delivery_option_post_nord" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryOptionPostNord() *DeliveryOptionPostNordQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryOptionPostNord(do)
}

// QueryDeliveryOptionUSPS queries the "delivery_option_usps" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryOptionUSPS() *DeliveryOptionUSPSQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryOptionUSPS(do)
}

// QueryDeliveryOptionBring queries the "delivery_option_bring" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDeliveryOptionBring() *DeliveryOptionBringQuery {
	return NewDeliveryOptionClient(do.config).QueryDeliveryOptionBring(do)
}

// QueryReturnPortals queries the "return_portals" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryReturnPortals() *ReturnPortalQuery {
	return NewDeliveryOptionClient(do.config).QueryReturnPortals(do)
}

// QueryColli queries the "colli" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryColli() *ColliQuery {
	return NewDeliveryOptionClient(do.config).QueryColli(do)
}

// QueryReturnColli queries the "return_colli" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryReturnColli() *ReturnColliQuery {
	return NewDeliveryOptionClient(do.config).QueryReturnColli(do)
}

// QueryCarrierService queries the "carrier_service" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryCarrierService() *CarrierServiceQuery {
	return NewDeliveryOptionClient(do.config).QueryCarrierService(do)
}

// QueryConnection queries the "connection" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryConnection() *ConnectionQuery {
	return NewDeliveryOptionClient(do.config).QueryConnection(do)
}

// QueryConnectionDefault queries the "connection_default" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryConnectionDefault() *ConnectionQuery {
	return NewDeliveryOptionClient(do.config).QueryConnectionDefault(do)
}

// QueryHypothesisTestDeliveryOptionGroupOne queries the "hypothesis_test_delivery_option_group_one" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryHypothesisTestDeliveryOptionGroupOne() *HypothesisTestDeliveryOptionQuery {
	return NewDeliveryOptionClient(do.config).QueryHypothesisTestDeliveryOptionGroupOne(do)
}

// QueryHypothesisTestDeliveryOptionGroupTwo queries the "hypothesis_test_delivery_option_group_two" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryHypothesisTestDeliveryOptionGroupTwo() *HypothesisTestDeliveryOptionQuery {
	return NewDeliveryOptionClient(do.config).QueryHypothesisTestDeliveryOptionGroupTwo(do)
}

// QueryHypothesisTestDeliveryOptionLookup queries the "hypothesis_test_delivery_option_lookup" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryHypothesisTestDeliveryOptionLookup() *HypothesisTestDeliveryOptionLookupQuery {
	return NewDeliveryOptionClient(do.config).QueryHypothesisTestDeliveryOptionLookup(do)
}

// QueryClickCollectLocation queries the "click_collect_location" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryClickCollectLocation() *LocationQuery {
	return NewDeliveryOptionClient(do.config).QueryClickCollectLocation(do)
}

// QueryEmailClickCollectAtStore queries the "email_click_collect_at_store" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryEmailClickCollectAtStore() *EmailTemplateQuery {
	return NewDeliveryOptionClient(do.config).QueryEmailClickCollectAtStore(do)
}

// QueryConsolidation queries the "consolidation" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryConsolidation() *ConsolidationQuery {
	return NewDeliveryOptionClient(do.config).QueryConsolidation(do)
}

// QueryDefaultPackaging queries the "default_packaging" edge of the DeliveryOption entity.
func (do *DeliveryOption) QueryDefaultPackaging() *PackagingQuery {
	return NewDeliveryOptionClient(do.config).QueryDefaultPackaging(do)
}

// Update returns a builder for updating this DeliveryOption.
// Note that you need to call DeliveryOption.Unwrap() before calling this method if this DeliveryOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (do *DeliveryOption) Update() *DeliveryOptionUpdateOne {
	return NewDeliveryOptionClient(do.config).UpdateOne(do)
}

// Unwrap unwraps the DeliveryOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (do *DeliveryOption) Unwrap() *DeliveryOption {
	_tx, ok := do.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeliveryOption is not a transactional entity")
	}
	do.config.driver = _tx.drv
	return do
}

// String implements the fmt.Stringer.
func (do *DeliveryOption) String() string {
	var builder strings.Builder
	builder.WriteString("DeliveryOption(")
	builder.WriteString(fmt.Sprintf("id=%v, ", do.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", do.TenantID))
	builder.WriteString(", ")
	builder.WriteString("archived_at=")
	builder.WriteString(do.ArchivedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(do.Name)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", do.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("click_option_display_count=")
	builder.WriteString(fmt.Sprintf("%v", do.ClickOptionDisplayCount))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(do.Description)
	builder.WriteString(", ")
	builder.WriteString("click_collect=")
	builder.WriteString(fmt.Sprintf("%v", do.ClickCollect))
	builder.WriteString(", ")
	builder.WriteString("override_sender_address=")
	builder.WriteString(fmt.Sprintf("%v", do.OverrideSenderAddress))
	builder.WriteString(", ")
	builder.WriteString("override_return_address=")
	builder.WriteString(fmt.Sprintf("%v", do.OverrideReturnAddress))
	builder.WriteString(", ")
	builder.WriteString("hide_delivery_option=")
	builder.WriteString(fmt.Sprintf("%v", do.HideDeliveryOption))
	builder.WriteString(", ")
	builder.WriteString("delivery_estimate_from=")
	builder.WriteString(fmt.Sprintf("%v", do.DeliveryEstimateFrom))
	builder.WriteString(", ")
	builder.WriteString("delivery_estimate_to=")
	builder.WriteString(fmt.Sprintf("%v", do.DeliveryEstimateTo))
	builder.WriteString(", ")
	builder.WriteString("webshipper_integration=")
	builder.WriteString(fmt.Sprintf("%v", do.WebshipperIntegration))
	builder.WriteString(", ")
	builder.WriteString("webshipper_id=")
	builder.WriteString(fmt.Sprintf("%v", do.WebshipperID))
	builder.WriteString(", ")
	builder.WriteString("shipmondo_integration=")
	builder.WriteString(fmt.Sprintf("%v", do.ShipmondoIntegration))
	builder.WriteString(", ")
	builder.WriteString("shipmondo_delivery_option=")
	builder.WriteString(do.ShipmondoDeliveryOption)
	builder.WriteString(", ")
	builder.WriteString("customs_enabled=")
	builder.WriteString(fmt.Sprintf("%v", do.CustomsEnabled))
	builder.WriteString(", ")
	builder.WriteString("customs_signer=")
	builder.WriteString(do.CustomsSigner)
	builder.WriteString(", ")
	builder.WriteString("hide_if_company_empty=")
	builder.WriteString(fmt.Sprintf("%v", do.HideIfCompanyEmpty))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryRule returns the DeliveryRule named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedDeliveryRule(name string) ([]*DeliveryRule, error) {
	if do.Edges.namedDeliveryRule == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedDeliveryRule[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedDeliveryRule(name string, edges ...*DeliveryRule) {
	if do.Edges.namedDeliveryRule == nil {
		do.Edges.namedDeliveryRule = make(map[string][]*DeliveryRule)
	}
	if len(edges) == 0 {
		do.Edges.namedDeliveryRule[name] = []*DeliveryRule{}
	} else {
		do.Edges.namedDeliveryRule[name] = append(do.Edges.namedDeliveryRule[name], edges...)
	}
}

// NamedReturnPortals returns the ReturnPortals named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedReturnPortals(name string) ([]*ReturnPortal, error) {
	if do.Edges.namedReturnPortals == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedReturnPortals[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedReturnPortals(name string, edges ...*ReturnPortal) {
	if do.Edges.namedReturnPortals == nil {
		do.Edges.namedReturnPortals = make(map[string][]*ReturnPortal)
	}
	if len(edges) == 0 {
		do.Edges.namedReturnPortals[name] = []*ReturnPortal{}
	} else {
		do.Edges.namedReturnPortals[name] = append(do.Edges.namedReturnPortals[name], edges...)
	}
}

// NamedColli returns the Colli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedColli(name string) ([]*Colli, error) {
	if do.Edges.namedColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedColli(name string, edges ...*Colli) {
	if do.Edges.namedColli == nil {
		do.Edges.namedColli = make(map[string][]*Colli)
	}
	if len(edges) == 0 {
		do.Edges.namedColli[name] = []*Colli{}
	} else {
		do.Edges.namedColli[name] = append(do.Edges.namedColli[name], edges...)
	}
}

// NamedReturnColli returns the ReturnColli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedReturnColli(name string) ([]*ReturnColli, error) {
	if do.Edges.namedReturnColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedReturnColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedReturnColli(name string, edges ...*ReturnColli) {
	if do.Edges.namedReturnColli == nil {
		do.Edges.namedReturnColli = make(map[string][]*ReturnColli)
	}
	if len(edges) == 0 {
		do.Edges.namedReturnColli[name] = []*ReturnColli{}
	} else {
		do.Edges.namedReturnColli[name] = append(do.Edges.namedReturnColli[name], edges...)
	}
}

// NamedHypothesisTestDeliveryOptionGroupOne returns the HypothesisTestDeliveryOptionGroupOne named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedHypothesisTestDeliveryOptionGroupOne(name string) ([]*HypothesisTestDeliveryOption, error) {
	if do.Edges.namedHypothesisTestDeliveryOptionGroupOne == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedHypothesisTestDeliveryOptionGroupOne[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedHypothesisTestDeliveryOptionGroupOne(name string, edges ...*HypothesisTestDeliveryOption) {
	if do.Edges.namedHypothesisTestDeliveryOptionGroupOne == nil {
		do.Edges.namedHypothesisTestDeliveryOptionGroupOne = make(map[string][]*HypothesisTestDeliveryOption)
	}
	if len(edges) == 0 {
		do.Edges.namedHypothesisTestDeliveryOptionGroupOne[name] = []*HypothesisTestDeliveryOption{}
	} else {
		do.Edges.namedHypothesisTestDeliveryOptionGroupOne[name] = append(do.Edges.namedHypothesisTestDeliveryOptionGroupOne[name], edges...)
	}
}

// NamedHypothesisTestDeliveryOptionGroupTwo returns the HypothesisTestDeliveryOptionGroupTwo named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedHypothesisTestDeliveryOptionGroupTwo(name string) ([]*HypothesisTestDeliveryOption, error) {
	if do.Edges.namedHypothesisTestDeliveryOptionGroupTwo == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedHypothesisTestDeliveryOptionGroupTwo[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedHypothesisTestDeliveryOptionGroupTwo(name string, edges ...*HypothesisTestDeliveryOption) {
	if do.Edges.namedHypothesisTestDeliveryOptionGroupTwo == nil {
		do.Edges.namedHypothesisTestDeliveryOptionGroupTwo = make(map[string][]*HypothesisTestDeliveryOption)
	}
	if len(edges) == 0 {
		do.Edges.namedHypothesisTestDeliveryOptionGroupTwo[name] = []*HypothesisTestDeliveryOption{}
	} else {
		do.Edges.namedHypothesisTestDeliveryOptionGroupTwo[name] = append(do.Edges.namedHypothesisTestDeliveryOptionGroupTwo[name], edges...)
	}
}

// NamedHypothesisTestDeliveryOptionLookup returns the HypothesisTestDeliveryOptionLookup named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedHypothesisTestDeliveryOptionLookup(name string) ([]*HypothesisTestDeliveryOptionLookup, error) {
	if do.Edges.namedHypothesisTestDeliveryOptionLookup == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedHypothesisTestDeliveryOptionLookup[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedHypothesisTestDeliveryOptionLookup(name string, edges ...*HypothesisTestDeliveryOptionLookup) {
	if do.Edges.namedHypothesisTestDeliveryOptionLookup == nil {
		do.Edges.namedHypothesisTestDeliveryOptionLookup = make(map[string][]*HypothesisTestDeliveryOptionLookup)
	}
	if len(edges) == 0 {
		do.Edges.namedHypothesisTestDeliveryOptionLookup[name] = []*HypothesisTestDeliveryOptionLookup{}
	} else {
		do.Edges.namedHypothesisTestDeliveryOptionLookup[name] = append(do.Edges.namedHypothesisTestDeliveryOptionLookup[name], edges...)
	}
}

// NamedClickCollectLocation returns the ClickCollectLocation named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedClickCollectLocation(name string) ([]*Location, error) {
	if do.Edges.namedClickCollectLocation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedClickCollectLocation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedClickCollectLocation(name string, edges ...*Location) {
	if do.Edges.namedClickCollectLocation == nil {
		do.Edges.namedClickCollectLocation = make(map[string][]*Location)
	}
	if len(edges) == 0 {
		do.Edges.namedClickCollectLocation[name] = []*Location{}
	} else {
		do.Edges.namedClickCollectLocation[name] = append(do.Edges.namedClickCollectLocation[name], edges...)
	}
}

// NamedConsolidation returns the Consolidation named value or an error if the edge was not
// loaded in eager-loading with this name.
func (do *DeliveryOption) NamedConsolidation(name string) ([]*Consolidation, error) {
	if do.Edges.namedConsolidation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := do.Edges.namedConsolidation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (do *DeliveryOption) appendNamedConsolidation(name string, edges ...*Consolidation) {
	if do.Edges.namedConsolidation == nil {
		do.Edges.namedConsolidation = make(map[string][]*Consolidation)
	}
	if len(edges) == 0 {
		do.Edges.namedConsolidation[name] = []*Consolidation{}
	} else {
		do.Edges.namedConsolidation[name] = append(do.Edges.namedConsolidation[name], edges...)
	}
}

// DeliveryOptions is a parsable slice of DeliveryOption.
type DeliveryOptions []*DeliveryOption
