// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierUpdate is the builder for updating Carrier entities.
type CarrierUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierMutation
}

// Where appends a list predicates to the CarrierUpdate builder.
func (cu *CarrierUpdate) Where(ps ...predicate.Carrier) *CarrierUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTenantID sets the "tenant_id" field.
func (cu *CarrierUpdate) SetTenantID(pu pulid.ID) *CarrierUpdate {
	cu.mutation.SetTenantID(pu)
	return cu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cu *CarrierUpdate) SetNillableTenantID(pu *pulid.ID) *CarrierUpdate {
	if pu != nil {
		cu.SetTenantID(*pu)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CarrierUpdate) SetName(s string) *CarrierUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CarrierUpdate) SetNillableName(s *string) *CarrierUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetSyncCancelation sets the "sync_cancelation" field.
func (cu *CarrierUpdate) SetSyncCancelation(b bool) *CarrierUpdate {
	cu.mutation.SetSyncCancelation(b)
	return cu
}

// SetNillableSyncCancelation sets the "sync_cancelation" field if the given value is not nil.
func (cu *CarrierUpdate) SetNillableSyncCancelation(b *bool) *CarrierUpdate {
	if b != nil {
		cu.SetSyncCancelation(*b)
	}
	return cu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cu *CarrierUpdate) SetTenant(t *Tenant) *CarrierUpdate {
	return cu.SetTenantID(t.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (cu *CarrierUpdate) SetCarrierBrandID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierBrandID(id)
	return cu
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (cu *CarrierUpdate) SetCarrierBrand(c *CarrierBrand) *CarrierUpdate {
	return cu.SetCarrierBrandID(c.ID)
}

// SetCarrierDAOID sets the "carrier_dao" edge to the CarrierDAO entity by ID.
func (cu *CarrierUpdate) SetCarrierDAOID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierDAOID(id)
	return cu
}

// SetNillableCarrierDAOID sets the "carrier_dao" edge to the CarrierDAO entity by ID if the given value is not nil.
func (cu *CarrierUpdate) SetNillableCarrierDAOID(id *pulid.ID) *CarrierUpdate {
	if id != nil {
		cu = cu.SetCarrierDAOID(*id)
	}
	return cu
}

// SetCarrierDAO sets the "carrier_dao" edge to the CarrierDAO entity.
func (cu *CarrierUpdate) SetCarrierDAO(c *CarrierDAO) *CarrierUpdate {
	return cu.SetCarrierDAOID(c.ID)
}

// SetCarrierDFID sets the "carrier_df" edge to the CarrierDF entity by ID.
func (cu *CarrierUpdate) SetCarrierDFID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierDFID(id)
	return cu
}

// SetNillableCarrierDFID sets the "carrier_df" edge to the CarrierDF entity by ID if the given value is not nil.
func (cu *CarrierUpdate) SetNillableCarrierDFID(id *pulid.ID) *CarrierUpdate {
	if id != nil {
		cu = cu.SetCarrierDFID(*id)
	}
	return cu
}

// SetCarrierDF sets the "carrier_df" edge to the CarrierDF entity.
func (cu *CarrierUpdate) SetCarrierDF(c *CarrierDF) *CarrierUpdate {
	return cu.SetCarrierDFID(c.ID)
}

// SetCarrierDSVID sets the "carrier_dsv" edge to the CarrierDSV entity by ID.
func (cu *CarrierUpdate) SetCarrierDSVID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierDSVID(id)
	return cu
}

// SetNillableCarrierDSVID sets the "carrier_dsv" edge to the CarrierDSV entity by ID if the given value is not nil.
func (cu *CarrierUpdate) SetNillableCarrierDSVID(id *pulid.ID) *CarrierUpdate {
	if id != nil {
		cu = cu.SetCarrierDSVID(*id)
	}
	return cu
}

// SetCarrierDSV sets the "carrier_dsv" edge to the CarrierDSV entity.
func (cu *CarrierUpdate) SetCarrierDSV(c *CarrierDSV) *CarrierUpdate {
	return cu.SetCarrierDSVID(c.ID)
}

// SetCarrierEasyPostID sets the "carrier_easy_post" edge to the CarrierEasyPost entity by ID.
func (cu *CarrierUpdate) SetCarrierEasyPostID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierEasyPostID(id)
	return cu
}

// SetNillableCarrierEasyPostID sets the "carrier_easy_post" edge to the CarrierEasyPost entity by ID if the given value is not nil.
func (cu *CarrierUpdate) SetNillableCarrierEasyPostID(id *pulid.ID) *CarrierUpdate {
	if id != nil {
		cu = cu.SetCarrierEasyPostID(*id)
	}
	return cu
}

// SetCarrierEasyPost sets the "carrier_easy_post" edge to the CarrierEasyPost entity.
func (cu *CarrierUpdate) SetCarrierEasyPost(c *CarrierEasyPost) *CarrierUpdate {
	return cu.SetCarrierEasyPostID(c.ID)
}

// SetCarrierGLSID sets the "carrier_gls" edge to the CarrierGLS entity by ID.
func (cu *CarrierUpdate) SetCarrierGLSID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierGLSID(id)
	return cu
}

// SetNillableCarrierGLSID sets the "carrier_gls" edge to the CarrierGLS entity by ID if the given value is not nil.
func (cu *CarrierUpdate) SetNillableCarrierGLSID(id *pulid.ID) *CarrierUpdate {
	if id != nil {
		cu = cu.SetCarrierGLSID(*id)
	}
	return cu
}

// SetCarrierGLS sets the "carrier_gls" edge to the CarrierGLS entity.
func (cu *CarrierUpdate) SetCarrierGLS(c *CarrierGLS) *CarrierUpdate {
	return cu.SetCarrierGLSID(c.ID)
}

// SetCarrierPostNordID sets the "carrier_post_nord" edge to the CarrierPostNord entity by ID.
func (cu *CarrierUpdate) SetCarrierPostNordID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierPostNordID(id)
	return cu
}

// SetNillableCarrierPostNordID sets the "carrier_post_nord" edge to the CarrierPostNord entity by ID if the given value is not nil.
func (cu *CarrierUpdate) SetNillableCarrierPostNordID(id *pulid.ID) *CarrierUpdate {
	if id != nil {
		cu = cu.SetCarrierPostNordID(*id)
	}
	return cu
}

// SetCarrierPostNord sets the "carrier_post_nord" edge to the CarrierPostNord entity.
func (cu *CarrierUpdate) SetCarrierPostNord(c *CarrierPostNord) *CarrierUpdate {
	return cu.SetCarrierPostNordID(c.ID)
}

// SetCarrierUSPSID sets the "carrier_usps" edge to the CarrierUSPS entity by ID.
func (cu *CarrierUpdate) SetCarrierUSPSID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierUSPSID(id)
	return cu
}

// SetNillableCarrierUSPSID sets the "carrier_usps" edge to the CarrierUSPS entity by ID if the given value is not nil.
func (cu *CarrierUpdate) SetNillableCarrierUSPSID(id *pulid.ID) *CarrierUpdate {
	if id != nil {
		cu = cu.SetCarrierUSPSID(*id)
	}
	return cu
}

// SetCarrierUSPS sets the "carrier_usps" edge to the CarrierUSPS entity.
func (cu *CarrierUpdate) SetCarrierUSPS(c *CarrierUSPS) *CarrierUpdate {
	return cu.SetCarrierUSPSID(c.ID)
}

// SetCarrierBringID sets the "carrier_bring" edge to the CarrierBring entity by ID.
func (cu *CarrierUpdate) SetCarrierBringID(id pulid.ID) *CarrierUpdate {
	cu.mutation.SetCarrierBringID(id)
	return cu
}

// SetNillableCarrierBringID sets the "carrier_bring" edge to the CarrierBring entity by ID if the given value is not nil.
func (cu *CarrierUpdate) SetNillableCarrierBringID(id *pulid.ID) *CarrierUpdate {
	if id != nil {
		cu = cu.SetCarrierBringID(*id)
	}
	return cu
}

// SetCarrierBring sets the "carrier_bring" edge to the CarrierBring entity.
func (cu *CarrierUpdate) SetCarrierBring(c *CarrierBring) *CarrierUpdate {
	return cu.SetCarrierBringID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (cu *CarrierUpdate) AddDeliveryOptionIDs(ids ...pulid.ID) *CarrierUpdate {
	cu.mutation.AddDeliveryOptionIDs(ids...)
	return cu
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (cu *CarrierUpdate) AddDeliveryOption(d ...*DeliveryOption) *CarrierUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeliveryOptionIDs(ids...)
}

// AddShipmentIDs adds the "shipment" edge to the Shipment entity by IDs.
func (cu *CarrierUpdate) AddShipmentIDs(ids ...pulid.ID) *CarrierUpdate {
	cu.mutation.AddShipmentIDs(ids...)
	return cu
}

// AddShipment adds the "shipment" edges to the Shipment entity.
func (cu *CarrierUpdate) AddShipment(s ...*Shipment) *CarrierUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddShipmentIDs(ids...)
}

// Mutation returns the CarrierMutation object of the builder.
func (cu *CarrierUpdate) Mutation() *CarrierMutation {
	return cu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cu *CarrierUpdate) ClearTenant() *CarrierUpdate {
	cu.mutation.ClearTenant()
	return cu
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (cu *CarrierUpdate) ClearCarrierBrand() *CarrierUpdate {
	cu.mutation.ClearCarrierBrand()
	return cu
}

// ClearCarrierDAO clears the "carrier_dao" edge to the CarrierDAO entity.
func (cu *CarrierUpdate) ClearCarrierDAO() *CarrierUpdate {
	cu.mutation.ClearCarrierDAO()
	return cu
}

// ClearCarrierDF clears the "carrier_df" edge to the CarrierDF entity.
func (cu *CarrierUpdate) ClearCarrierDF() *CarrierUpdate {
	cu.mutation.ClearCarrierDF()
	return cu
}

// ClearCarrierDSV clears the "carrier_dsv" edge to the CarrierDSV entity.
func (cu *CarrierUpdate) ClearCarrierDSV() *CarrierUpdate {
	cu.mutation.ClearCarrierDSV()
	return cu
}

// ClearCarrierEasyPost clears the "carrier_easy_post" edge to the CarrierEasyPost entity.
func (cu *CarrierUpdate) ClearCarrierEasyPost() *CarrierUpdate {
	cu.mutation.ClearCarrierEasyPost()
	return cu
}

// ClearCarrierGLS clears the "carrier_gls" edge to the CarrierGLS entity.
func (cu *CarrierUpdate) ClearCarrierGLS() *CarrierUpdate {
	cu.mutation.ClearCarrierGLS()
	return cu
}

// ClearCarrierPostNord clears the "carrier_post_nord" edge to the CarrierPostNord entity.
func (cu *CarrierUpdate) ClearCarrierPostNord() *CarrierUpdate {
	cu.mutation.ClearCarrierPostNord()
	return cu
}

// ClearCarrierUSPS clears the "carrier_usps" edge to the CarrierUSPS entity.
func (cu *CarrierUpdate) ClearCarrierUSPS() *CarrierUpdate {
	cu.mutation.ClearCarrierUSPS()
	return cu
}

// ClearCarrierBring clears the "carrier_bring" edge to the CarrierBring entity.
func (cu *CarrierUpdate) ClearCarrierBring() *CarrierUpdate {
	cu.mutation.ClearCarrierBring()
	return cu
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (cu *CarrierUpdate) ClearDeliveryOption() *CarrierUpdate {
	cu.mutation.ClearDeliveryOption()
	return cu
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (cu *CarrierUpdate) RemoveDeliveryOptionIDs(ids ...pulid.ID) *CarrierUpdate {
	cu.mutation.RemoveDeliveryOptionIDs(ids...)
	return cu
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (cu *CarrierUpdate) RemoveDeliveryOption(d ...*DeliveryOption) *CarrierUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeliveryOptionIDs(ids...)
}

// ClearShipment clears all "shipment" edges to the Shipment entity.
func (cu *CarrierUpdate) ClearShipment() *CarrierUpdate {
	cu.mutation.ClearShipment()
	return cu
}

// RemoveShipmentIDs removes the "shipment" edge to Shipment entities by IDs.
func (cu *CarrierUpdate) RemoveShipmentIDs(ids ...pulid.ID) *CarrierUpdate {
	cu.mutation.RemoveShipmentIDs(ids...)
	return cu
}

// RemoveShipment removes "shipment" edges to Shipment entities.
func (cu *CarrierUpdate) RemoveShipment(s ...*Shipment) *CarrierUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveShipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CarrierUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CarrierUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CarrierUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CarrierUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CarrierUpdate) check() error {
	if cu.mutation.TenantCleared() && len(cu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Carrier.tenant"`)
	}
	if cu.mutation.CarrierBrandCleared() && len(cu.mutation.CarrierBrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Carrier.carrier_brand"`)
	}
	return nil
}

func (cu *CarrierUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrier.Table, carrier.Columns, sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(carrier.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.SyncCancelation(); ok {
		_spec.SetField(carrier.FieldSyncCancelation, field.TypeBool, value)
	}
	if cu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.TenantTable,
			Columns: []string{carrier.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.TenantTable,
			Columns: []string{carrier.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.CarrierBrandTable,
			Columns: []string{carrier.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.CarrierBrandTable,
			Columns: []string{carrier.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDAOTable,
			Columns: []string{carrier.CarrierDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDAOTable,
			Columns: []string{carrier.CarrierDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDFTable,
			Columns: []string{carrier.CarrierDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDFTable,
			Columns: []string{carrier.CarrierDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDSVTable,
			Columns: []string{carrier.CarrierDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDSVTable,
			Columns: []string{carrier.CarrierDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierEasyPostTable,
			Columns: []string{carrier.CarrierEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierEasyPostTable,
			Columns: []string{carrier.CarrierEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierGLSTable,
			Columns: []string{carrier.CarrierGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriergls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierGLSTable,
			Columns: []string{carrier.CarrierGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriergls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierPostNordTable,
			Columns: []string{carrier.CarrierPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierpostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierPostNordTable,
			Columns: []string{carrier.CarrierPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierUSPSTable,
			Columns: []string{carrier.CarrierUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierUSPSTable,
			Columns: []string{carrier.CarrierUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarrierBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierBringTable,
			Columns: []string{carrier.CarrierBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarrierBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierBringTable,
			Columns: []string{carrier.CarrierBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.DeliveryOptionTable,
			Columns: []string{carrier.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !cu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.DeliveryOptionTable,
			Columns: []string{carrier.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.DeliveryOptionTable,
			Columns: []string{carrier.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.ShipmentTable,
			Columns: []string{carrier.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedShipmentIDs(); len(nodes) > 0 && !cu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.ShipmentTable,
			Columns: []string{carrier.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.ShipmentTable,
			Columns: []string{carrier.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CarrierUpdateOne is the builder for updating a single Carrier entity.
type CarrierUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierMutation
}

// SetTenantID sets the "tenant_id" field.
func (cuo *CarrierUpdateOne) SetTenantID(pu pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetTenantID(pu)
	return cuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableTenantID(pu *pulid.ID) *CarrierUpdateOne {
	if pu != nil {
		cuo.SetTenantID(*pu)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CarrierUpdateOne) SetName(s string) *CarrierUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableName(s *string) *CarrierUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetSyncCancelation sets the "sync_cancelation" field.
func (cuo *CarrierUpdateOne) SetSyncCancelation(b bool) *CarrierUpdateOne {
	cuo.mutation.SetSyncCancelation(b)
	return cuo
}

// SetNillableSyncCancelation sets the "sync_cancelation" field if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableSyncCancelation(b *bool) *CarrierUpdateOne {
	if b != nil {
		cuo.SetSyncCancelation(*b)
	}
	return cuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cuo *CarrierUpdateOne) SetTenant(t *Tenant) *CarrierUpdateOne {
	return cuo.SetTenantID(t.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierBrandID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierBrandID(id)
	return cuo
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (cuo *CarrierUpdateOne) SetCarrierBrand(c *CarrierBrand) *CarrierUpdateOne {
	return cuo.SetCarrierBrandID(c.ID)
}

// SetCarrierDAOID sets the "carrier_dao" edge to the CarrierDAO entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierDAOID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierDAOID(id)
	return cuo
}

// SetNillableCarrierDAOID sets the "carrier_dao" edge to the CarrierDAO entity by ID if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableCarrierDAOID(id *pulid.ID) *CarrierUpdateOne {
	if id != nil {
		cuo = cuo.SetCarrierDAOID(*id)
	}
	return cuo
}

// SetCarrierDAO sets the "carrier_dao" edge to the CarrierDAO entity.
func (cuo *CarrierUpdateOne) SetCarrierDAO(c *CarrierDAO) *CarrierUpdateOne {
	return cuo.SetCarrierDAOID(c.ID)
}

// SetCarrierDFID sets the "carrier_df" edge to the CarrierDF entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierDFID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierDFID(id)
	return cuo
}

// SetNillableCarrierDFID sets the "carrier_df" edge to the CarrierDF entity by ID if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableCarrierDFID(id *pulid.ID) *CarrierUpdateOne {
	if id != nil {
		cuo = cuo.SetCarrierDFID(*id)
	}
	return cuo
}

// SetCarrierDF sets the "carrier_df" edge to the CarrierDF entity.
func (cuo *CarrierUpdateOne) SetCarrierDF(c *CarrierDF) *CarrierUpdateOne {
	return cuo.SetCarrierDFID(c.ID)
}

// SetCarrierDSVID sets the "carrier_dsv" edge to the CarrierDSV entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierDSVID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierDSVID(id)
	return cuo
}

// SetNillableCarrierDSVID sets the "carrier_dsv" edge to the CarrierDSV entity by ID if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableCarrierDSVID(id *pulid.ID) *CarrierUpdateOne {
	if id != nil {
		cuo = cuo.SetCarrierDSVID(*id)
	}
	return cuo
}

// SetCarrierDSV sets the "carrier_dsv" edge to the CarrierDSV entity.
func (cuo *CarrierUpdateOne) SetCarrierDSV(c *CarrierDSV) *CarrierUpdateOne {
	return cuo.SetCarrierDSVID(c.ID)
}

// SetCarrierEasyPostID sets the "carrier_easy_post" edge to the CarrierEasyPost entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierEasyPostID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierEasyPostID(id)
	return cuo
}

// SetNillableCarrierEasyPostID sets the "carrier_easy_post" edge to the CarrierEasyPost entity by ID if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableCarrierEasyPostID(id *pulid.ID) *CarrierUpdateOne {
	if id != nil {
		cuo = cuo.SetCarrierEasyPostID(*id)
	}
	return cuo
}

// SetCarrierEasyPost sets the "carrier_easy_post" edge to the CarrierEasyPost entity.
func (cuo *CarrierUpdateOne) SetCarrierEasyPost(c *CarrierEasyPost) *CarrierUpdateOne {
	return cuo.SetCarrierEasyPostID(c.ID)
}

// SetCarrierGLSID sets the "carrier_gls" edge to the CarrierGLS entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierGLSID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierGLSID(id)
	return cuo
}

// SetNillableCarrierGLSID sets the "carrier_gls" edge to the CarrierGLS entity by ID if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableCarrierGLSID(id *pulid.ID) *CarrierUpdateOne {
	if id != nil {
		cuo = cuo.SetCarrierGLSID(*id)
	}
	return cuo
}

// SetCarrierGLS sets the "carrier_gls" edge to the CarrierGLS entity.
func (cuo *CarrierUpdateOne) SetCarrierGLS(c *CarrierGLS) *CarrierUpdateOne {
	return cuo.SetCarrierGLSID(c.ID)
}

// SetCarrierPostNordID sets the "carrier_post_nord" edge to the CarrierPostNord entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierPostNordID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierPostNordID(id)
	return cuo
}

// SetNillableCarrierPostNordID sets the "carrier_post_nord" edge to the CarrierPostNord entity by ID if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableCarrierPostNordID(id *pulid.ID) *CarrierUpdateOne {
	if id != nil {
		cuo = cuo.SetCarrierPostNordID(*id)
	}
	return cuo
}

// SetCarrierPostNord sets the "carrier_post_nord" edge to the CarrierPostNord entity.
func (cuo *CarrierUpdateOne) SetCarrierPostNord(c *CarrierPostNord) *CarrierUpdateOne {
	return cuo.SetCarrierPostNordID(c.ID)
}

// SetCarrierUSPSID sets the "carrier_usps" edge to the CarrierUSPS entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierUSPSID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierUSPSID(id)
	return cuo
}

// SetNillableCarrierUSPSID sets the "carrier_usps" edge to the CarrierUSPS entity by ID if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableCarrierUSPSID(id *pulid.ID) *CarrierUpdateOne {
	if id != nil {
		cuo = cuo.SetCarrierUSPSID(*id)
	}
	return cuo
}

// SetCarrierUSPS sets the "carrier_usps" edge to the CarrierUSPS entity.
func (cuo *CarrierUpdateOne) SetCarrierUSPS(c *CarrierUSPS) *CarrierUpdateOne {
	return cuo.SetCarrierUSPSID(c.ID)
}

// SetCarrierBringID sets the "carrier_bring" edge to the CarrierBring entity by ID.
func (cuo *CarrierUpdateOne) SetCarrierBringID(id pulid.ID) *CarrierUpdateOne {
	cuo.mutation.SetCarrierBringID(id)
	return cuo
}

// SetNillableCarrierBringID sets the "carrier_bring" edge to the CarrierBring entity by ID if the given value is not nil.
func (cuo *CarrierUpdateOne) SetNillableCarrierBringID(id *pulid.ID) *CarrierUpdateOne {
	if id != nil {
		cuo = cuo.SetCarrierBringID(*id)
	}
	return cuo
}

// SetCarrierBring sets the "carrier_bring" edge to the CarrierBring entity.
func (cuo *CarrierUpdateOne) SetCarrierBring(c *CarrierBring) *CarrierUpdateOne {
	return cuo.SetCarrierBringID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (cuo *CarrierUpdateOne) AddDeliveryOptionIDs(ids ...pulid.ID) *CarrierUpdateOne {
	cuo.mutation.AddDeliveryOptionIDs(ids...)
	return cuo
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (cuo *CarrierUpdateOne) AddDeliveryOption(d ...*DeliveryOption) *CarrierUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeliveryOptionIDs(ids...)
}

// AddShipmentIDs adds the "shipment" edge to the Shipment entity by IDs.
func (cuo *CarrierUpdateOne) AddShipmentIDs(ids ...pulid.ID) *CarrierUpdateOne {
	cuo.mutation.AddShipmentIDs(ids...)
	return cuo
}

// AddShipment adds the "shipment" edges to the Shipment entity.
func (cuo *CarrierUpdateOne) AddShipment(s ...*Shipment) *CarrierUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddShipmentIDs(ids...)
}

// Mutation returns the CarrierMutation object of the builder.
func (cuo *CarrierUpdateOne) Mutation() *CarrierMutation {
	return cuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cuo *CarrierUpdateOne) ClearTenant() *CarrierUpdateOne {
	cuo.mutation.ClearTenant()
	return cuo
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (cuo *CarrierUpdateOne) ClearCarrierBrand() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierBrand()
	return cuo
}

// ClearCarrierDAO clears the "carrier_dao" edge to the CarrierDAO entity.
func (cuo *CarrierUpdateOne) ClearCarrierDAO() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierDAO()
	return cuo
}

// ClearCarrierDF clears the "carrier_df" edge to the CarrierDF entity.
func (cuo *CarrierUpdateOne) ClearCarrierDF() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierDF()
	return cuo
}

// ClearCarrierDSV clears the "carrier_dsv" edge to the CarrierDSV entity.
func (cuo *CarrierUpdateOne) ClearCarrierDSV() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierDSV()
	return cuo
}

// ClearCarrierEasyPost clears the "carrier_easy_post" edge to the CarrierEasyPost entity.
func (cuo *CarrierUpdateOne) ClearCarrierEasyPost() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierEasyPost()
	return cuo
}

// ClearCarrierGLS clears the "carrier_gls" edge to the CarrierGLS entity.
func (cuo *CarrierUpdateOne) ClearCarrierGLS() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierGLS()
	return cuo
}

// ClearCarrierPostNord clears the "carrier_post_nord" edge to the CarrierPostNord entity.
func (cuo *CarrierUpdateOne) ClearCarrierPostNord() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierPostNord()
	return cuo
}

// ClearCarrierUSPS clears the "carrier_usps" edge to the CarrierUSPS entity.
func (cuo *CarrierUpdateOne) ClearCarrierUSPS() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierUSPS()
	return cuo
}

// ClearCarrierBring clears the "carrier_bring" edge to the CarrierBring entity.
func (cuo *CarrierUpdateOne) ClearCarrierBring() *CarrierUpdateOne {
	cuo.mutation.ClearCarrierBring()
	return cuo
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (cuo *CarrierUpdateOne) ClearDeliveryOption() *CarrierUpdateOne {
	cuo.mutation.ClearDeliveryOption()
	return cuo
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (cuo *CarrierUpdateOne) RemoveDeliveryOptionIDs(ids ...pulid.ID) *CarrierUpdateOne {
	cuo.mutation.RemoveDeliveryOptionIDs(ids...)
	return cuo
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (cuo *CarrierUpdateOne) RemoveDeliveryOption(d ...*DeliveryOption) *CarrierUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeliveryOptionIDs(ids...)
}

// ClearShipment clears all "shipment" edges to the Shipment entity.
func (cuo *CarrierUpdateOne) ClearShipment() *CarrierUpdateOne {
	cuo.mutation.ClearShipment()
	return cuo
}

// RemoveShipmentIDs removes the "shipment" edge to Shipment entities by IDs.
func (cuo *CarrierUpdateOne) RemoveShipmentIDs(ids ...pulid.ID) *CarrierUpdateOne {
	cuo.mutation.RemoveShipmentIDs(ids...)
	return cuo
}

// RemoveShipment removes "shipment" edges to Shipment entities.
func (cuo *CarrierUpdateOne) RemoveShipment(s ...*Shipment) *CarrierUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveShipmentIDs(ids...)
}

// Where appends a list predicates to the CarrierUpdate builder.
func (cuo *CarrierUpdateOne) Where(ps ...predicate.Carrier) *CarrierUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CarrierUpdateOne) Select(field string, fields ...string) *CarrierUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Carrier entity.
func (cuo *CarrierUpdateOne) Save(ctx context.Context) (*Carrier, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CarrierUpdateOne) SaveX(ctx context.Context) *Carrier {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CarrierUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CarrierUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CarrierUpdateOne) check() error {
	if cuo.mutation.TenantCleared() && len(cuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Carrier.tenant"`)
	}
	if cuo.mutation.CarrierBrandCleared() && len(cuo.mutation.CarrierBrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Carrier.carrier_brand"`)
	}
	return nil
}

func (cuo *CarrierUpdateOne) sqlSave(ctx context.Context) (_node *Carrier, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrier.Table, carrier.Columns, sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Carrier.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrier.FieldID)
		for _, f := range fields {
			if !carrier.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(carrier.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SyncCancelation(); ok {
		_spec.SetField(carrier.FieldSyncCancelation, field.TypeBool, value)
	}
	if cuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.TenantTable,
			Columns: []string{carrier.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.TenantTable,
			Columns: []string{carrier.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.CarrierBrandTable,
			Columns: []string{carrier.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.CarrierBrandTable,
			Columns: []string{carrier.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDAOTable,
			Columns: []string{carrier.CarrierDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDAOTable,
			Columns: []string{carrier.CarrierDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDFTable,
			Columns: []string{carrier.CarrierDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDFTable,
			Columns: []string{carrier.CarrierDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDSVTable,
			Columns: []string{carrier.CarrierDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDSVTable,
			Columns: []string{carrier.CarrierDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierEasyPostTable,
			Columns: []string{carrier.CarrierEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierEasyPostTable,
			Columns: []string{carrier.CarrierEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierGLSTable,
			Columns: []string{carrier.CarrierGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriergls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierGLSTable,
			Columns: []string{carrier.CarrierGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriergls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierPostNordTable,
			Columns: []string{carrier.CarrierPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierpostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierPostNordTable,
			Columns: []string{carrier.CarrierPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierUSPSTable,
			Columns: []string{carrier.CarrierUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierUSPSTable,
			Columns: []string{carrier.CarrierUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarrierBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierBringTable,
			Columns: []string{carrier.CarrierBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarrierBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierBringTable,
			Columns: []string{carrier.CarrierBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.DeliveryOptionTable,
			Columns: []string{carrier.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !cuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.DeliveryOptionTable,
			Columns: []string{carrier.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.DeliveryOptionTable,
			Columns: []string{carrier.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.ShipmentTable,
			Columns: []string{carrier.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedShipmentIDs(); len(nodes) > 0 && !cuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.ShipmentTable,
			Columns: []string{carrier.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.ShipmentTable,
			Columns: []string{carrier.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Carrier{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
