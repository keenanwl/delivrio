// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopPostNordDelete is the builder for deleting a ParcelShopPostNord entity.
type ParcelShopPostNordDelete struct {
	config
	hooks    []Hook
	mutation *ParcelShopPostNordMutation
}

// Where appends a list predicates to the ParcelShopPostNordDelete builder.
func (pspnd *ParcelShopPostNordDelete) Where(ps ...predicate.ParcelShopPostNord) *ParcelShopPostNordDelete {
	pspnd.mutation.Where(ps...)
	return pspnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pspnd *ParcelShopPostNordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pspnd.sqlExec, pspnd.mutation, pspnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pspnd *ParcelShopPostNordDelete) ExecX(ctx context.Context) int {
	n, err := pspnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pspnd *ParcelShopPostNordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(parcelshoppostnord.Table, sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString))
	if ps := pspnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pspnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pspnd.mutation.done = true
	return affected, err
}

// ParcelShopPostNordDeleteOne is the builder for deleting a single ParcelShopPostNord entity.
type ParcelShopPostNordDeleteOne struct {
	pspnd *ParcelShopPostNordDelete
}

// Where appends a list predicates to the ParcelShopPostNordDelete builder.
func (pspndo *ParcelShopPostNordDeleteOne) Where(ps ...predicate.ParcelShopPostNord) *ParcelShopPostNordDeleteOne {
	pspndo.pspnd.mutation.Where(ps...)
	return pspndo
}

// Exec executes the deletion query.
func (pspndo *ParcelShopPostNordDeleteOne) Exec(ctx context.Context) error {
	n, err := pspndo.pspnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{parcelshoppostnord.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pspndo *ParcelShopPostNordDeleteOne) ExecX(ctx context.Context) {
	if err := pspndo.Exec(ctx); err != nil {
		panic(err)
	}
}
