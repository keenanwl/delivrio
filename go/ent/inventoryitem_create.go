// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryItemCreate is the builder for creating a InventoryItem entity.
type InventoryItemCreate struct {
	config
	mutation *InventoryItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (iic *InventoryItemCreate) SetTenantID(pu pulid.ID) *InventoryItemCreate {
	iic.mutation.SetTenantID(pu)
	return iic
}

// SetExternalID sets the "external_ID" field.
func (iic *InventoryItemCreate) SetExternalID(s string) *InventoryItemCreate {
	iic.mutation.SetExternalID(s)
	return iic
}

// SetNillableExternalID sets the "external_ID" field if the given value is not nil.
func (iic *InventoryItemCreate) SetNillableExternalID(s *string) *InventoryItemCreate {
	if s != nil {
		iic.SetExternalID(*s)
	}
	return iic
}

// SetCode sets the "code" field.
func (iic *InventoryItemCreate) SetCode(s string) *InventoryItemCreate {
	iic.mutation.SetCode(s)
	return iic
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (iic *InventoryItemCreate) SetNillableCode(s *string) *InventoryItemCreate {
	if s != nil {
		iic.SetCode(*s)
	}
	return iic
}

// SetSku sets the "sku" field.
func (iic *InventoryItemCreate) SetSku(s string) *InventoryItemCreate {
	iic.mutation.SetSku(s)
	return iic
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (iic *InventoryItemCreate) SetNillableSku(s *string) *InventoryItemCreate {
	if s != nil {
		iic.SetSku(*s)
	}
	return iic
}

// SetID sets the "id" field.
func (iic *InventoryItemCreate) SetID(pu pulid.ID) *InventoryItemCreate {
	iic.mutation.SetID(pu)
	return iic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iic *InventoryItemCreate) SetNillableID(pu *pulid.ID) *InventoryItemCreate {
	if pu != nil {
		iic.SetID(*pu)
	}
	return iic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iic *InventoryItemCreate) SetTenant(t *Tenant) *InventoryItemCreate {
	return iic.SetTenantID(t.ID)
}

// AddCountryHarmonizedCodeIDs adds the "country_harmonized_code" edge to the CountryHarmonizedCode entity by IDs.
func (iic *InventoryItemCreate) AddCountryHarmonizedCodeIDs(ids ...pulid.ID) *InventoryItemCreate {
	iic.mutation.AddCountryHarmonizedCodeIDs(ids...)
	return iic
}

// AddCountryHarmonizedCode adds the "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (iic *InventoryItemCreate) AddCountryHarmonizedCode(c ...*CountryHarmonizedCode) *InventoryItemCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iic.AddCountryHarmonizedCodeIDs(ids...)
}

// SetCountryOfOriginID sets the "country_of_origin" edge to the Country entity by ID.
func (iic *InventoryItemCreate) SetCountryOfOriginID(id pulid.ID) *InventoryItemCreate {
	iic.mutation.SetCountryOfOriginID(id)
	return iic
}

// SetNillableCountryOfOriginID sets the "country_of_origin" edge to the Country entity by ID if the given value is not nil.
func (iic *InventoryItemCreate) SetNillableCountryOfOriginID(id *pulid.ID) *InventoryItemCreate {
	if id != nil {
		iic = iic.SetCountryOfOriginID(*id)
	}
	return iic
}

// SetCountryOfOrigin sets the "country_of_origin" edge to the Country entity.
func (iic *InventoryItemCreate) SetCountryOfOrigin(c *Country) *InventoryItemCreate {
	return iic.SetCountryOfOriginID(c.ID)
}

// SetProductVariantID sets the "product_variant" edge to the ProductVariant entity by ID.
func (iic *InventoryItemCreate) SetProductVariantID(id pulid.ID) *InventoryItemCreate {
	iic.mutation.SetProductVariantID(id)
	return iic
}

// SetProductVariant sets the "product_variant" edge to the ProductVariant entity.
func (iic *InventoryItemCreate) SetProductVariant(p *ProductVariant) *InventoryItemCreate {
	return iic.SetProductVariantID(p.ID)
}

// Mutation returns the InventoryItemMutation object of the builder.
func (iic *InventoryItemCreate) Mutation() *InventoryItemMutation {
	return iic.mutation
}

// Save creates the InventoryItem in the database.
func (iic *InventoryItemCreate) Save(ctx context.Context) (*InventoryItem, error) {
	if err := iic.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iic.sqlSave, iic.mutation, iic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iic *InventoryItemCreate) SaveX(ctx context.Context) *InventoryItem {
	v, err := iic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iic *InventoryItemCreate) Exec(ctx context.Context) error {
	_, err := iic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iic *InventoryItemCreate) ExecX(ctx context.Context) {
	if err := iic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iic *InventoryItemCreate) defaults() error {
	if _, ok := iic.mutation.ID(); !ok {
		if inventoryitem.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized inventoryitem.DefaultID (forgotten import ent/runtime?)")
		}
		v := inventoryitem.DefaultID()
		iic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iic *InventoryItemCreate) check() error {
	if _, ok := iic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "InventoryItem.tenant_id"`)}
	}
	if len(iic.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "InventoryItem.tenant"`)}
	}
	if len(iic.mutation.ProductVariantIDs()) == 0 {
		return &ValidationError{Name: "product_variant", err: errors.New(`ent: missing required edge "InventoryItem.product_variant"`)}
	}
	return nil
}

func (iic *InventoryItemCreate) sqlSave(ctx context.Context) (*InventoryItem, error) {
	if err := iic.check(); err != nil {
		return nil, err
	}
	_node, _spec := iic.createSpec()
	if err := sqlgraph.CreateNode(ctx, iic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iic.mutation.id = &_node.ID
	iic.mutation.done = true
	return _node, nil
}

func (iic *InventoryItemCreate) createSpec() (*InventoryItem, *sqlgraph.CreateSpec) {
	var (
		_node = &InventoryItem{config: iic.config}
		_spec = sqlgraph.NewCreateSpec(inventoryitem.Table, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString))
	)
	_spec.OnConflict = iic.conflict
	if id, ok := iic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iic.mutation.ExternalID(); ok {
		_spec.SetField(inventoryitem.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := iic.mutation.Code(); ok {
		_spec.SetField(inventoryitem.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := iic.mutation.Sku(); ok {
		_spec.SetField(inventoryitem.FieldSku, field.TypeString, value)
		_node.Sku = &value
	}
	if nodes := iic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.TenantTable,
			Columns: []string{inventoryitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iic.mutation.CountryHarmonizedCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitem.CountryHarmonizedCodeTable,
			Columns: []string{inventoryitem.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iic.mutation.CountryOfOriginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.CountryOfOriginTable,
			Columns: []string{inventoryitem.CountryOfOriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inventory_item_country_of_origin = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iic.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   inventoryitem.ProductVariantTable,
			Columns: []string{inventoryitem.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_variant_inventory_item = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InventoryItem.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InventoryItemUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (iic *InventoryItemCreate) OnConflict(opts ...sql.ConflictOption) *InventoryItemUpsertOne {
	iic.conflict = opts
	return &InventoryItemUpsertOne{
		create: iic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InventoryItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iic *InventoryItemCreate) OnConflictColumns(columns ...string) *InventoryItemUpsertOne {
	iic.conflict = append(iic.conflict, sql.ConflictColumns(columns...))
	return &InventoryItemUpsertOne{
		create: iic,
	}
}

type (
	// InventoryItemUpsertOne is the builder for "upsert"-ing
	//  one InventoryItem node.
	InventoryItemUpsertOne struct {
		create *InventoryItemCreate
	}

	// InventoryItemUpsert is the "OnConflict" setter.
	InventoryItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *InventoryItemUpsert) SetTenantID(v pulid.ID) *InventoryItemUpsert {
	u.Set(inventoryitem.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *InventoryItemUpsert) UpdateTenantID() *InventoryItemUpsert {
	u.SetExcluded(inventoryitem.FieldTenantID)
	return u
}

// SetExternalID sets the "external_ID" field.
func (u *InventoryItemUpsert) SetExternalID(v string) *InventoryItemUpsert {
	u.Set(inventoryitem.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_ID" field to the value that was provided on create.
func (u *InventoryItemUpsert) UpdateExternalID() *InventoryItemUpsert {
	u.SetExcluded(inventoryitem.FieldExternalID)
	return u
}

// ClearExternalID clears the value of the "external_ID" field.
func (u *InventoryItemUpsert) ClearExternalID() *InventoryItemUpsert {
	u.SetNull(inventoryitem.FieldExternalID)
	return u
}

// SetCode sets the "code" field.
func (u *InventoryItemUpsert) SetCode(v string) *InventoryItemUpsert {
	u.Set(inventoryitem.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InventoryItemUpsert) UpdateCode() *InventoryItemUpsert {
	u.SetExcluded(inventoryitem.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *InventoryItemUpsert) ClearCode() *InventoryItemUpsert {
	u.SetNull(inventoryitem.FieldCode)
	return u
}

// SetSku sets the "sku" field.
func (u *InventoryItemUpsert) SetSku(v string) *InventoryItemUpsert {
	u.Set(inventoryitem.FieldSku, v)
	return u
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *InventoryItemUpsert) UpdateSku() *InventoryItemUpsert {
	u.SetExcluded(inventoryitem.FieldSku)
	return u
}

// ClearSku clears the value of the "sku" field.
func (u *InventoryItemUpsert) ClearSku() *InventoryItemUpsert {
	u.SetNull(inventoryitem.FieldSku)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InventoryItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inventoryitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InventoryItemUpsertOne) UpdateNewValues() *InventoryItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(inventoryitem.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InventoryItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InventoryItemUpsertOne) Ignore() *InventoryItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InventoryItemUpsertOne) DoNothing() *InventoryItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InventoryItemCreate.OnConflict
// documentation for more info.
func (u *InventoryItemUpsertOne) Update(set func(*InventoryItemUpsert)) *InventoryItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InventoryItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *InventoryItemUpsertOne) SetTenantID(v pulid.ID) *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *InventoryItemUpsertOne) UpdateTenantID() *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.UpdateTenantID()
	})
}

// SetExternalID sets the "external_ID" field.
func (u *InventoryItemUpsertOne) SetExternalID(v string) *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_ID" field to the value that was provided on create.
func (u *InventoryItemUpsertOne) UpdateExternalID() *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_ID" field.
func (u *InventoryItemUpsertOne) ClearExternalID() *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.ClearExternalID()
	})
}

// SetCode sets the "code" field.
func (u *InventoryItemUpsertOne) SetCode(v string) *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InventoryItemUpsertOne) UpdateCode() *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *InventoryItemUpsertOne) ClearCode() *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.ClearCode()
	})
}

// SetSku sets the "sku" field.
func (u *InventoryItemUpsertOne) SetSku(v string) *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *InventoryItemUpsertOne) UpdateSku() *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.UpdateSku()
	})
}

// ClearSku clears the value of the "sku" field.
func (u *InventoryItemUpsertOne) ClearSku() *InventoryItemUpsertOne {
	return u.Update(func(s *InventoryItemUpsert) {
		s.ClearSku()
	})
}

// Exec executes the query.
func (u *InventoryItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InventoryItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InventoryItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InventoryItemUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InventoryItemUpsertOne.ID is not supported by MySQL driver. Use InventoryItemUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InventoryItemUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InventoryItemCreateBulk is the builder for creating many InventoryItem entities in bulk.
type InventoryItemCreateBulk struct {
	config
	err      error
	builders []*InventoryItemCreate
	conflict []sql.ConflictOption
}

// Save creates the InventoryItem entities in the database.
func (iicb *InventoryItemCreateBulk) Save(ctx context.Context) ([]*InventoryItem, error) {
	if iicb.err != nil {
		return nil, iicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iicb.builders))
	nodes := make([]*InventoryItem, len(iicb.builders))
	mutators := make([]Mutator, len(iicb.builders))
	for i := range iicb.builders {
		func(i int, root context.Context) {
			builder := iicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iicb *InventoryItemCreateBulk) SaveX(ctx context.Context) []*InventoryItem {
	v, err := iicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iicb *InventoryItemCreateBulk) Exec(ctx context.Context) error {
	_, err := iicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iicb *InventoryItemCreateBulk) ExecX(ctx context.Context) {
	if err := iicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InventoryItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InventoryItemUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (iicb *InventoryItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *InventoryItemUpsertBulk {
	iicb.conflict = opts
	return &InventoryItemUpsertBulk{
		create: iicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InventoryItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iicb *InventoryItemCreateBulk) OnConflictColumns(columns ...string) *InventoryItemUpsertBulk {
	iicb.conflict = append(iicb.conflict, sql.ConflictColumns(columns...))
	return &InventoryItemUpsertBulk{
		create: iicb,
	}
}

// InventoryItemUpsertBulk is the builder for "upsert"-ing
// a bulk of InventoryItem nodes.
type InventoryItemUpsertBulk struct {
	create *InventoryItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InventoryItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inventoryitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InventoryItemUpsertBulk) UpdateNewValues() *InventoryItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(inventoryitem.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InventoryItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InventoryItemUpsertBulk) Ignore() *InventoryItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InventoryItemUpsertBulk) DoNothing() *InventoryItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InventoryItemCreateBulk.OnConflict
// documentation for more info.
func (u *InventoryItemUpsertBulk) Update(set func(*InventoryItemUpsert)) *InventoryItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InventoryItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *InventoryItemUpsertBulk) SetTenantID(v pulid.ID) *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *InventoryItemUpsertBulk) UpdateTenantID() *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.UpdateTenantID()
	})
}

// SetExternalID sets the "external_ID" field.
func (u *InventoryItemUpsertBulk) SetExternalID(v string) *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_ID" field to the value that was provided on create.
func (u *InventoryItemUpsertBulk) UpdateExternalID() *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_ID" field.
func (u *InventoryItemUpsertBulk) ClearExternalID() *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.ClearExternalID()
	})
}

// SetCode sets the "code" field.
func (u *InventoryItemUpsertBulk) SetCode(v string) *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InventoryItemUpsertBulk) UpdateCode() *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *InventoryItemUpsertBulk) ClearCode() *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.ClearCode()
	})
}

// SetSku sets the "sku" field.
func (u *InventoryItemUpsertBulk) SetSku(v string) *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.SetSku(v)
	})
}

// UpdateSku sets the "sku" field to the value that was provided on create.
func (u *InventoryItemUpsertBulk) UpdateSku() *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.UpdateSku()
	})
}

// ClearSku clears the value of the "sku" field.
func (u *InventoryItemUpsertBulk) ClearSku() *InventoryItemUpsertBulk {
	return u.Update(func(s *InventoryItemUpsert) {
		s.ClearSku()
	})
}

// Exec executes the query.
func (u *InventoryItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InventoryItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InventoryItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InventoryItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
