// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnPortalClaimUpdate is the builder for updating ReturnPortalClaim entities.
type ReturnPortalClaimUpdate struct {
	config
	hooks    []Hook
	mutation *ReturnPortalClaimMutation
}

// Where appends a list predicates to the ReturnPortalClaimUpdate builder.
func (rpcu *ReturnPortalClaimUpdate) Where(ps ...predicate.ReturnPortalClaim) *ReturnPortalClaimUpdate {
	rpcu.mutation.Where(ps...)
	return rpcu
}

// SetTenantID sets the "tenant_id" field.
func (rpcu *ReturnPortalClaimUpdate) SetTenantID(pu pulid.ID) *ReturnPortalClaimUpdate {
	rpcu.mutation.SetTenantID(pu)
	return rpcu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rpcu *ReturnPortalClaimUpdate) SetNillableTenantID(pu *pulid.ID) *ReturnPortalClaimUpdate {
	if pu != nil {
		rpcu.SetTenantID(*pu)
	}
	return rpcu
}

// SetName sets the "name" field.
func (rpcu *ReturnPortalClaimUpdate) SetName(s string) *ReturnPortalClaimUpdate {
	rpcu.mutation.SetName(s)
	return rpcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpcu *ReturnPortalClaimUpdate) SetNillableName(s *string) *ReturnPortalClaimUpdate {
	if s != nil {
		rpcu.SetName(*s)
	}
	return rpcu
}

// SetDescription sets the "description" field.
func (rpcu *ReturnPortalClaimUpdate) SetDescription(s string) *ReturnPortalClaimUpdate {
	rpcu.mutation.SetDescription(s)
	return rpcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rpcu *ReturnPortalClaimUpdate) SetNillableDescription(s *string) *ReturnPortalClaimUpdate {
	if s != nil {
		rpcu.SetDescription(*s)
	}
	return rpcu
}

// SetRestockable sets the "restockable" field.
func (rpcu *ReturnPortalClaimUpdate) SetRestockable(b bool) *ReturnPortalClaimUpdate {
	rpcu.mutation.SetRestockable(b)
	return rpcu
}

// SetNillableRestockable sets the "restockable" field if the given value is not nil.
func (rpcu *ReturnPortalClaimUpdate) SetNillableRestockable(b *bool) *ReturnPortalClaimUpdate {
	if b != nil {
		rpcu.SetRestockable(*b)
	}
	return rpcu
}

// SetArchived sets the "archived" field.
func (rpcu *ReturnPortalClaimUpdate) SetArchived(b bool) *ReturnPortalClaimUpdate {
	rpcu.mutation.SetArchived(b)
	return rpcu
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (rpcu *ReturnPortalClaimUpdate) SetNillableArchived(b *bool) *ReturnPortalClaimUpdate {
	if b != nil {
		rpcu.SetArchived(*b)
	}
	return rpcu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rpcu *ReturnPortalClaimUpdate) SetTenant(t *Tenant) *ReturnPortalClaimUpdate {
	return rpcu.SetTenantID(t.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (rpcu *ReturnPortalClaimUpdate) SetReturnPortalID(id pulid.ID) *ReturnPortalClaimUpdate {
	rpcu.mutation.SetReturnPortalID(id)
	return rpcu
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (rpcu *ReturnPortalClaimUpdate) SetReturnPortal(r *ReturnPortal) *ReturnPortalClaimUpdate {
	return rpcu.SetReturnPortalID(r.ID)
}

// SetReturnLocationID sets the "return_location" edge to the Location entity by ID.
func (rpcu *ReturnPortalClaimUpdate) SetReturnLocationID(id pulid.ID) *ReturnPortalClaimUpdate {
	rpcu.mutation.SetReturnLocationID(id)
	return rpcu
}

// SetNillableReturnLocationID sets the "return_location" edge to the Location entity by ID if the given value is not nil.
func (rpcu *ReturnPortalClaimUpdate) SetNillableReturnLocationID(id *pulid.ID) *ReturnPortalClaimUpdate {
	if id != nil {
		rpcu = rpcu.SetReturnLocationID(*id)
	}
	return rpcu
}

// SetReturnLocation sets the "return_location" edge to the Location entity.
func (rpcu *ReturnPortalClaimUpdate) SetReturnLocation(l *Location) *ReturnPortalClaimUpdate {
	return rpcu.SetReturnLocationID(l.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (rpcu *ReturnPortalClaimUpdate) AddReturnOrderLineIDs(ids ...pulid.ID) *ReturnPortalClaimUpdate {
	rpcu.mutation.AddReturnOrderLineIDs(ids...)
	return rpcu
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (rpcu *ReturnPortalClaimUpdate) AddReturnOrderLine(r ...*ReturnOrderLine) *ReturnPortalClaimUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpcu.AddReturnOrderLineIDs(ids...)
}

// Mutation returns the ReturnPortalClaimMutation object of the builder.
func (rpcu *ReturnPortalClaimUpdate) Mutation() *ReturnPortalClaimMutation {
	return rpcu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rpcu *ReturnPortalClaimUpdate) ClearTenant() *ReturnPortalClaimUpdate {
	rpcu.mutation.ClearTenant()
	return rpcu
}

// ClearReturnPortal clears the "return_portal" edge to the ReturnPortal entity.
func (rpcu *ReturnPortalClaimUpdate) ClearReturnPortal() *ReturnPortalClaimUpdate {
	rpcu.mutation.ClearReturnPortal()
	return rpcu
}

// ClearReturnLocation clears the "return_location" edge to the Location entity.
func (rpcu *ReturnPortalClaimUpdate) ClearReturnLocation() *ReturnPortalClaimUpdate {
	rpcu.mutation.ClearReturnLocation()
	return rpcu
}

// ClearReturnOrderLine clears all "return_order_line" edges to the ReturnOrderLine entity.
func (rpcu *ReturnPortalClaimUpdate) ClearReturnOrderLine() *ReturnPortalClaimUpdate {
	rpcu.mutation.ClearReturnOrderLine()
	return rpcu
}

// RemoveReturnOrderLineIDs removes the "return_order_line" edge to ReturnOrderLine entities by IDs.
func (rpcu *ReturnPortalClaimUpdate) RemoveReturnOrderLineIDs(ids ...pulid.ID) *ReturnPortalClaimUpdate {
	rpcu.mutation.RemoveReturnOrderLineIDs(ids...)
	return rpcu
}

// RemoveReturnOrderLine removes "return_order_line" edges to ReturnOrderLine entities.
func (rpcu *ReturnPortalClaimUpdate) RemoveReturnOrderLine(r ...*ReturnOrderLine) *ReturnPortalClaimUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpcu.RemoveReturnOrderLineIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpcu *ReturnPortalClaimUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpcu.sqlSave, rpcu.mutation, rpcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpcu *ReturnPortalClaimUpdate) SaveX(ctx context.Context) int {
	affected, err := rpcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpcu *ReturnPortalClaimUpdate) Exec(ctx context.Context) error {
	_, err := rpcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcu *ReturnPortalClaimUpdate) ExecX(ctx context.Context) {
	if err := rpcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpcu *ReturnPortalClaimUpdate) check() error {
	if rpcu.mutation.TenantCleared() && len(rpcu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnPortalClaim.tenant"`)
	}
	if rpcu.mutation.ReturnPortalCleared() && len(rpcu.mutation.ReturnPortalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnPortalClaim.return_portal"`)
	}
	return nil
}

func (rpcu *ReturnPortalClaimUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(returnportalclaim.Table, returnportalclaim.Columns, sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString))
	if ps := rpcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpcu.mutation.Name(); ok {
		_spec.SetField(returnportalclaim.FieldName, field.TypeString, value)
	}
	if value, ok := rpcu.mutation.Description(); ok {
		_spec.SetField(returnportalclaim.FieldDescription, field.TypeString, value)
	}
	if value, ok := rpcu.mutation.Restockable(); ok {
		_spec.SetField(returnportalclaim.FieldRestockable, field.TypeBool, value)
	}
	if value, ok := rpcu.mutation.Archived(); ok {
		_spec.SetField(returnportalclaim.FieldArchived, field.TypeBool, value)
	}
	if rpcu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.TenantTable,
			Columns: []string{returnportalclaim.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.TenantTable,
			Columns: []string{returnportalclaim.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpcu.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnportalclaim.ReturnPortalTable,
			Columns: []string{returnportalclaim.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcu.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnportalclaim.ReturnPortalTable,
			Columns: []string{returnportalclaim.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpcu.mutation.ReturnLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.ReturnLocationTable,
			Columns: []string{returnportalclaim.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcu.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.ReturnLocationTable,
			Columns: []string{returnportalclaim.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpcu.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportalclaim.ReturnOrderLineTable,
			Columns: []string{returnportalclaim.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcu.mutation.RemovedReturnOrderLineIDs(); len(nodes) > 0 && !rpcu.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportalclaim.ReturnOrderLineTable,
			Columns: []string{returnportalclaim.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcu.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportalclaim.ReturnOrderLineTable,
			Columns: []string{returnportalclaim.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returnportalclaim.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpcu.mutation.done = true
	return n, nil
}

// ReturnPortalClaimUpdateOne is the builder for updating a single ReturnPortalClaim entity.
type ReturnPortalClaimUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReturnPortalClaimMutation
}

// SetTenantID sets the "tenant_id" field.
func (rpcuo *ReturnPortalClaimUpdateOne) SetTenantID(pu pulid.ID) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.SetTenantID(pu)
	return rpcuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rpcuo *ReturnPortalClaimUpdateOne) SetNillableTenantID(pu *pulid.ID) *ReturnPortalClaimUpdateOne {
	if pu != nil {
		rpcuo.SetTenantID(*pu)
	}
	return rpcuo
}

// SetName sets the "name" field.
func (rpcuo *ReturnPortalClaimUpdateOne) SetName(s string) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.SetName(s)
	return rpcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpcuo *ReturnPortalClaimUpdateOne) SetNillableName(s *string) *ReturnPortalClaimUpdateOne {
	if s != nil {
		rpcuo.SetName(*s)
	}
	return rpcuo
}

// SetDescription sets the "description" field.
func (rpcuo *ReturnPortalClaimUpdateOne) SetDescription(s string) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.SetDescription(s)
	return rpcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rpcuo *ReturnPortalClaimUpdateOne) SetNillableDescription(s *string) *ReturnPortalClaimUpdateOne {
	if s != nil {
		rpcuo.SetDescription(*s)
	}
	return rpcuo
}

// SetRestockable sets the "restockable" field.
func (rpcuo *ReturnPortalClaimUpdateOne) SetRestockable(b bool) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.SetRestockable(b)
	return rpcuo
}

// SetNillableRestockable sets the "restockable" field if the given value is not nil.
func (rpcuo *ReturnPortalClaimUpdateOne) SetNillableRestockable(b *bool) *ReturnPortalClaimUpdateOne {
	if b != nil {
		rpcuo.SetRestockable(*b)
	}
	return rpcuo
}

// SetArchived sets the "archived" field.
func (rpcuo *ReturnPortalClaimUpdateOne) SetArchived(b bool) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.SetArchived(b)
	return rpcuo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (rpcuo *ReturnPortalClaimUpdateOne) SetNillableArchived(b *bool) *ReturnPortalClaimUpdateOne {
	if b != nil {
		rpcuo.SetArchived(*b)
	}
	return rpcuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rpcuo *ReturnPortalClaimUpdateOne) SetTenant(t *Tenant) *ReturnPortalClaimUpdateOne {
	return rpcuo.SetTenantID(t.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (rpcuo *ReturnPortalClaimUpdateOne) SetReturnPortalID(id pulid.ID) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.SetReturnPortalID(id)
	return rpcuo
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (rpcuo *ReturnPortalClaimUpdateOne) SetReturnPortal(r *ReturnPortal) *ReturnPortalClaimUpdateOne {
	return rpcuo.SetReturnPortalID(r.ID)
}

// SetReturnLocationID sets the "return_location" edge to the Location entity by ID.
func (rpcuo *ReturnPortalClaimUpdateOne) SetReturnLocationID(id pulid.ID) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.SetReturnLocationID(id)
	return rpcuo
}

// SetNillableReturnLocationID sets the "return_location" edge to the Location entity by ID if the given value is not nil.
func (rpcuo *ReturnPortalClaimUpdateOne) SetNillableReturnLocationID(id *pulid.ID) *ReturnPortalClaimUpdateOne {
	if id != nil {
		rpcuo = rpcuo.SetReturnLocationID(*id)
	}
	return rpcuo
}

// SetReturnLocation sets the "return_location" edge to the Location entity.
func (rpcuo *ReturnPortalClaimUpdateOne) SetReturnLocation(l *Location) *ReturnPortalClaimUpdateOne {
	return rpcuo.SetReturnLocationID(l.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (rpcuo *ReturnPortalClaimUpdateOne) AddReturnOrderLineIDs(ids ...pulid.ID) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.AddReturnOrderLineIDs(ids...)
	return rpcuo
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (rpcuo *ReturnPortalClaimUpdateOne) AddReturnOrderLine(r ...*ReturnOrderLine) *ReturnPortalClaimUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpcuo.AddReturnOrderLineIDs(ids...)
}

// Mutation returns the ReturnPortalClaimMutation object of the builder.
func (rpcuo *ReturnPortalClaimUpdateOne) Mutation() *ReturnPortalClaimMutation {
	return rpcuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rpcuo *ReturnPortalClaimUpdateOne) ClearTenant() *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.ClearTenant()
	return rpcuo
}

// ClearReturnPortal clears the "return_portal" edge to the ReturnPortal entity.
func (rpcuo *ReturnPortalClaimUpdateOne) ClearReturnPortal() *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.ClearReturnPortal()
	return rpcuo
}

// ClearReturnLocation clears the "return_location" edge to the Location entity.
func (rpcuo *ReturnPortalClaimUpdateOne) ClearReturnLocation() *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.ClearReturnLocation()
	return rpcuo
}

// ClearReturnOrderLine clears all "return_order_line" edges to the ReturnOrderLine entity.
func (rpcuo *ReturnPortalClaimUpdateOne) ClearReturnOrderLine() *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.ClearReturnOrderLine()
	return rpcuo
}

// RemoveReturnOrderLineIDs removes the "return_order_line" edge to ReturnOrderLine entities by IDs.
func (rpcuo *ReturnPortalClaimUpdateOne) RemoveReturnOrderLineIDs(ids ...pulid.ID) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.RemoveReturnOrderLineIDs(ids...)
	return rpcuo
}

// RemoveReturnOrderLine removes "return_order_line" edges to ReturnOrderLine entities.
func (rpcuo *ReturnPortalClaimUpdateOne) RemoveReturnOrderLine(r ...*ReturnOrderLine) *ReturnPortalClaimUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpcuo.RemoveReturnOrderLineIDs(ids...)
}

// Where appends a list predicates to the ReturnPortalClaimUpdate builder.
func (rpcuo *ReturnPortalClaimUpdateOne) Where(ps ...predicate.ReturnPortalClaim) *ReturnPortalClaimUpdateOne {
	rpcuo.mutation.Where(ps...)
	return rpcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpcuo *ReturnPortalClaimUpdateOne) Select(field string, fields ...string) *ReturnPortalClaimUpdateOne {
	rpcuo.fields = append([]string{field}, fields...)
	return rpcuo
}

// Save executes the query and returns the updated ReturnPortalClaim entity.
func (rpcuo *ReturnPortalClaimUpdateOne) Save(ctx context.Context) (*ReturnPortalClaim, error) {
	return withHooks(ctx, rpcuo.sqlSave, rpcuo.mutation, rpcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpcuo *ReturnPortalClaimUpdateOne) SaveX(ctx context.Context) *ReturnPortalClaim {
	node, err := rpcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpcuo *ReturnPortalClaimUpdateOne) Exec(ctx context.Context) error {
	_, err := rpcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcuo *ReturnPortalClaimUpdateOne) ExecX(ctx context.Context) {
	if err := rpcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpcuo *ReturnPortalClaimUpdateOne) check() error {
	if rpcuo.mutation.TenantCleared() && len(rpcuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnPortalClaim.tenant"`)
	}
	if rpcuo.mutation.ReturnPortalCleared() && len(rpcuo.mutation.ReturnPortalIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnPortalClaim.return_portal"`)
	}
	return nil
}

func (rpcuo *ReturnPortalClaimUpdateOne) sqlSave(ctx context.Context) (_node *ReturnPortalClaim, err error) {
	if err := rpcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(returnportalclaim.Table, returnportalclaim.Columns, sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString))
	id, ok := rpcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReturnPortalClaim.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, returnportalclaim.FieldID)
		for _, f := range fields {
			if !returnportalclaim.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != returnportalclaim.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpcuo.mutation.Name(); ok {
		_spec.SetField(returnportalclaim.FieldName, field.TypeString, value)
	}
	if value, ok := rpcuo.mutation.Description(); ok {
		_spec.SetField(returnportalclaim.FieldDescription, field.TypeString, value)
	}
	if value, ok := rpcuo.mutation.Restockable(); ok {
		_spec.SetField(returnportalclaim.FieldRestockable, field.TypeBool, value)
	}
	if value, ok := rpcuo.mutation.Archived(); ok {
		_spec.SetField(returnportalclaim.FieldArchived, field.TypeBool, value)
	}
	if rpcuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.TenantTable,
			Columns: []string{returnportalclaim.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.TenantTable,
			Columns: []string{returnportalclaim.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpcuo.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnportalclaim.ReturnPortalTable,
			Columns: []string{returnportalclaim.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcuo.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnportalclaim.ReturnPortalTable,
			Columns: []string{returnportalclaim.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpcuo.mutation.ReturnLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.ReturnLocationTable,
			Columns: []string{returnportalclaim.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcuo.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.ReturnLocationTable,
			Columns: []string{returnportalclaim.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpcuo.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportalclaim.ReturnOrderLineTable,
			Columns: []string{returnportalclaim.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcuo.mutation.RemovedReturnOrderLineIDs(); len(nodes) > 0 && !rpcuo.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportalclaim.ReturnOrderLineTable,
			Columns: []string{returnportalclaim.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpcuo.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportalclaim.ReturnOrderLineTable,
			Columns: []string{returnportalclaim.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReturnPortalClaim{config: rpcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returnportalclaim.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpcuo.mutation.done = true
	return _node, nil
}
