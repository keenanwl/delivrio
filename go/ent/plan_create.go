// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (pc *PlanCreate) SetLabel(s string) *PlanCreate {
	pc.mutation.SetLabel(s)
	return pc
}

// SetRank sets the "rank" field.
func (pc *PlanCreate) SetRank(i int) *PlanCreate {
	pc.mutation.SetRank(i)
	return pc
}

// SetPriceDkk sets the "price_dkk" field.
func (pc *PlanCreate) SetPriceDkk(i int) *PlanCreate {
	pc.mutation.SetPriceDkk(i)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlanCreate) SetCreatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCreatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PlanCreate) SetID(pu pulid.ID) *PlanCreate {
	pc.mutation.SetID(pu)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PlanCreate) SetNillableID(pu *pulid.ID) *PlanCreate {
	if pu != nil {
		pc.SetID(*pu)
	}
	return pc
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (pc *PlanCreate) AddTenantIDs(ids ...pulid.ID) *PlanCreate {
	pc.mutation.AddTenantIDs(ids...)
	return pc
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (pc *PlanCreate) AddTenant(t ...*Tenant) *PlanCreate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTenantIDs(ids...)
}

// AddPlanHistoryPlanIDs adds the "plan_history_plan" edge to the PlanHistory entity by IDs.
func (pc *PlanCreate) AddPlanHistoryPlanIDs(ids ...pulid.ID) *PlanCreate {
	pc.mutation.AddPlanHistoryPlanIDs(ids...)
	return pc
}

// AddPlanHistoryPlan adds the "plan_history_plan" edges to the PlanHistory entity.
func (pc *PlanCreate) AddPlanHistoryPlan(p ...*PlanHistory) *PlanCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPlanHistoryPlanIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if plan.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized plan.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := plan.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		if plan.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized plan.DefaultID (forgotten import ent/runtime?)")
		}
		v := plan.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	if _, ok := pc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "Plan.label"`)}
	}
	if _, ok := pc.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "Plan.rank"`)}
	}
	if _, ok := pc.mutation.PriceDkk(); !ok {
		return &ValidationError{Name: "price_dkk", err: errors.New(`ent: missing required field "Plan.price_dkk"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Plan.created_at"`)}
	}
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(plan.Table, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Label(); ok {
		_spec.SetField(plan.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := pc.mutation.Rank(); ok {
		_spec.SetField(plan.FieldRank, field.TypeInt, value)
		_node.Rank = value
	}
	if value, ok := pc.mutation.PriceDkk(); ok {
		_spec.SetField(plan.FieldPriceDkk, field.TypeInt, value)
		_node.PriceDkk = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.TenantTable,
			Columns: []string{plan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PlanHistoryPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PlanHistoryPlanTable,
			Columns: []string{plan.PlanHistoryPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plan.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (pc *PlanCreate) OnConflict(opts ...sql.ConflictOption) *PlanUpsertOne {
	pc.conflict = opts
	return &PlanUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PlanCreate) OnConflictColumns(columns ...string) *PlanUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlanUpsertOne{
		create: pc,
	}
}

type (
	// PlanUpsertOne is the builder for "upsert"-ing
	//  one Plan node.
	PlanUpsertOne struct {
		create *PlanCreate
	}

	// PlanUpsert is the "OnConflict" setter.
	PlanUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *PlanUpsert) SetLabel(v string) *PlanUpsert {
	u.Set(plan.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *PlanUpsert) UpdateLabel() *PlanUpsert {
	u.SetExcluded(plan.FieldLabel)
	return u
}

// SetRank sets the "rank" field.
func (u *PlanUpsert) SetRank(v int) *PlanUpsert {
	u.Set(plan.FieldRank, v)
	return u
}

// UpdateRank sets the "rank" field to the value that was provided on create.
func (u *PlanUpsert) UpdateRank() *PlanUpsert {
	u.SetExcluded(plan.FieldRank)
	return u
}

// AddRank adds v to the "rank" field.
func (u *PlanUpsert) AddRank(v int) *PlanUpsert {
	u.Add(plan.FieldRank, v)
	return u
}

// SetPriceDkk sets the "price_dkk" field.
func (u *PlanUpsert) SetPriceDkk(v int) *PlanUpsert {
	u.Set(plan.FieldPriceDkk, v)
	return u
}

// UpdatePriceDkk sets the "price_dkk" field to the value that was provided on create.
func (u *PlanUpsert) UpdatePriceDkk() *PlanUpsert {
	u.SetExcluded(plan.FieldPriceDkk)
	return u
}

// AddPriceDkk adds v to the "price_dkk" field.
func (u *PlanUpsert) AddPriceDkk(v int) *PlanUpsert {
	u.Add(plan.FieldPriceDkk, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(plan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanUpsertOne) UpdateNewValues() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(plan.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(plan.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlanUpsertOne) Ignore() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanUpsertOne) DoNothing() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanCreate.OnConflict
// documentation for more info.
func (u *PlanUpsertOne) Update(set func(*PlanUpsert)) *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *PlanUpsertOne) SetLabel(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateLabel() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateLabel()
	})
}

// SetRank sets the "rank" field.
func (u *PlanUpsertOne) SetRank(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetRank(v)
	})
}

// AddRank adds v to the "rank" field.
func (u *PlanUpsertOne) AddRank(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddRank(v)
	})
}

// UpdateRank sets the "rank" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateRank() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateRank()
	})
}

// SetPriceDkk sets the "price_dkk" field.
func (u *PlanUpsertOne) SetPriceDkk(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetPriceDkk(v)
	})
}

// AddPriceDkk adds v to the "price_dkk" field.
func (u *PlanUpsertOne) AddPriceDkk(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddPriceDkk(v)
	})
}

// UpdatePriceDkk sets the "price_dkk" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdatePriceDkk() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePriceDkk()
	})
}

// Exec executes the query.
func (u *PlanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlanUpsertOne.ID is not supported by MySQL driver. Use PlanUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	err      error
	builders []*PlanCreate
	conflict []sql.ConflictOption
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (pcb *PlanCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanUpsertBulk {
	pcb.conflict = opts
	return &PlanUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PlanCreateBulk) OnConflictColumns(columns ...string) *PlanUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlanUpsertBulk{
		create: pcb,
	}
}

// PlanUpsertBulk is the builder for "upsert"-ing
// a bulk of Plan nodes.
type PlanUpsertBulk struct {
	create *PlanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(plan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanUpsertBulk) UpdateNewValues() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(plan.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(plan.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlanUpsertBulk) Ignore() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanUpsertBulk) DoNothing() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanCreateBulk.OnConflict
// documentation for more info.
func (u *PlanUpsertBulk) Update(set func(*PlanUpsert)) *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *PlanUpsertBulk) SetLabel(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateLabel() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateLabel()
	})
}

// SetRank sets the "rank" field.
func (u *PlanUpsertBulk) SetRank(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetRank(v)
	})
}

// AddRank adds v to the "rank" field.
func (u *PlanUpsertBulk) AddRank(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddRank(v)
	})
}

// UpdateRank sets the "rank" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateRank() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateRank()
	})
}

// SetPriceDkk sets the "price_dkk" field.
func (u *PlanUpsertBulk) SetPriceDkk(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetPriceDkk(v)
	})
}

// AddPriceDkk adds v to the "price_dkk" field.
func (u *PlanUpsertBulk) AddPriceDkk(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddPriceDkk(v)
	})
}

// UpdatePriceDkk sets the "price_dkk" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdatePriceDkk() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePriceDkk()
	})
}

// Exec executes the query.
func (u *PlanUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
