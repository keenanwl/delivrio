// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Contact is the model entity for the Contact schema.
type Contact struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname string `json:"surname,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactQuery when eager-loading is set.
	Edges        ContactEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContactEdges holds the relations/edges for other nodes in the graph.
type ContactEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// BillingContact holds the value of the billing_contact edge.
	BillingContact []*Tenant `json:"billing_contact,omitempty"`
	// AdminContact holds the value of the admin_contact edge.
	AdminContact []*Tenant `json:"admin_contact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedBillingContact map[string][]*Tenant
	namedAdminContact   map[string][]*Tenant
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// BillingContactOrErr returns the BillingContact value or an error if the edge
// was not loaded in eager-loading.
func (e ContactEdges) BillingContactOrErr() ([]*Tenant, error) {
	if e.loadedTypes[1] {
		return e.BillingContact, nil
	}
	return nil, &NotLoadedError{edge: "billing_contact"}
}

// AdminContactOrErr returns the AdminContact value or an error if the edge
// was not loaded in eager-loading.
func (e ContactEdges) AdminContactOrErr() ([]*Tenant, error) {
	if e.loadedTypes[2] {
		return e.AdminContact, nil
	}
	return nil, &NotLoadedError{edge: "admin_contact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contact.FieldID, contact.FieldTenantID:
			values[i] = new(pulid.ID)
		case contact.FieldName, contact.FieldSurname, contact.FieldEmail, contact.FieldPhoneNumber:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contact fields.
func (c *Contact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contact.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case contact.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				c.TenantID = *value
			}
		case contact.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case contact.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				c.Surname = value.String
			}
		case contact.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				c.Email = value.String
			}
		case contact.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				c.PhoneNumber = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Contact.
// This includes values selected through modifiers, order, etc.
func (c *Contact) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Contact entity.
func (c *Contact) QueryTenant() *TenantQuery {
	return NewContactClient(c.config).QueryTenant(c)
}

// QueryBillingContact queries the "billing_contact" edge of the Contact entity.
func (c *Contact) QueryBillingContact() *TenantQuery {
	return NewContactClient(c.config).QueryBillingContact(c)
}

// QueryAdminContact queries the "admin_contact" edge of the Contact entity.
func (c *Contact) QueryAdminContact() *TenantQuery {
	return NewContactClient(c.config).QueryAdminContact(c)
}

// Update returns a builder for updating this Contact.
// Note that you need to call Contact.Unwrap() before calling this method if this Contact
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contact) Update() *ContactUpdateOne {
	return NewContactClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Contact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Contact) Unwrap() *Contact {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contact is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contact) String() string {
	var builder strings.Builder
	builder.WriteString("Contact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("surname=")
	builder.WriteString(c.Surname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(c.Email)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(c.PhoneNumber)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBillingContact returns the BillingContact named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Contact) NamedBillingContact(name string) ([]*Tenant, error) {
	if c.Edges.namedBillingContact == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedBillingContact[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Contact) appendNamedBillingContact(name string, edges ...*Tenant) {
	if c.Edges.namedBillingContact == nil {
		c.Edges.namedBillingContact = make(map[string][]*Tenant)
	}
	if len(edges) == 0 {
		c.Edges.namedBillingContact[name] = []*Tenant{}
	} else {
		c.Edges.namedBillingContact[name] = append(c.Edges.namedBillingContact[name], edges...)
	}
}

// NamedAdminContact returns the AdminContact named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Contact) NamedAdminContact(name string) ([]*Tenant, error) {
	if c.Edges.namedAdminContact == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedAdminContact[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Contact) appendNamedAdminContact(name string, edges ...*Tenant) {
	if c.Edges.namedAdminContact == nil {
		c.Edges.namedAdminContact = make(map[string][]*Tenant)
	}
	if len(edges) == 0 {
		c.Edges.namedAdminContact[name] = []*Tenant{}
	} else {
		c.Edges.namedAdminContact[name] = append(c.Edges.namedAdminContact[name], edges...)
	}
}

// Contacts is a parsable slice of Contact.
type Contacts []*Contact
