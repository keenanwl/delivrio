// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableName(s *string) *TenantUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetVatNumber sets the "vat_number" field.
func (tu *TenantUpdate) SetVatNumber(s string) *TenantUpdate {
	tu.mutation.SetVatNumber(s)
	return tu
}

// SetNillableVatNumber sets the "vat_number" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableVatNumber(s *string) *TenantUpdate {
	if s != nil {
		tu.SetVatNumber(*s)
	}
	return tu
}

// ClearVatNumber clears the value of the "vat_number" field.
func (tu *TenantUpdate) ClearVatNumber() *TenantUpdate {
	tu.mutation.ClearVatNumber()
	return tu
}

// SetInvoiceReference sets the "invoice_reference" field.
func (tu *TenantUpdate) SetInvoiceReference(s string) *TenantUpdate {
	tu.mutation.SetInvoiceReference(s)
	return tu
}

// SetNillableInvoiceReference sets the "invoice_reference" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableInvoiceReference(s *string) *TenantUpdate {
	if s != nil {
		tu.SetInvoiceReference(*s)
	}
	return tu
}

// ClearInvoiceReference clears the value of the "invoice_reference" field.
func (tu *TenantUpdate) ClearInvoiceReference() *TenantUpdate {
	tu.mutation.ClearInvoiceReference()
	return tu
}

// AddConnectOptionCarrierIDs adds the "connect_option_carriers" edge to the ConnectOptionCarrier entity by IDs.
func (tu *TenantUpdate) AddConnectOptionCarrierIDs(ids ...pulid.ID) *TenantUpdate {
	tu.mutation.AddConnectOptionCarrierIDs(ids...)
	return tu
}

// AddConnectOptionCarriers adds the "connect_option_carriers" edges to the ConnectOptionCarrier entity.
func (tu *TenantUpdate) AddConnectOptionCarriers(c ...*ConnectOptionCarrier) *TenantUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddConnectOptionCarrierIDs(ids...)
}

// AddConnectOptionPlatformIDs adds the "connect_option_platforms" edge to the ConnectOptionPlatform entity by IDs.
func (tu *TenantUpdate) AddConnectOptionPlatformIDs(ids ...pulid.ID) *TenantUpdate {
	tu.mutation.AddConnectOptionPlatformIDs(ids...)
	return tu
}

// AddConnectOptionPlatforms adds the "connect_option_platforms" edges to the ConnectOptionPlatform entity.
func (tu *TenantUpdate) AddConnectOptionPlatforms(c ...*ConnectOptionPlatform) *TenantUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddConnectOptionPlatformIDs(ids...)
}

// SetPlanID sets the "plan" edge to the Plan entity by ID.
func (tu *TenantUpdate) SetPlanID(id pulid.ID) *TenantUpdate {
	tu.mutation.SetPlanID(id)
	return tu
}

// SetPlan sets the "plan" edge to the Plan entity.
func (tu *TenantUpdate) SetPlan(p *Plan) *TenantUpdate {
	return tu.SetPlanID(p.ID)
}

// SetCompanyAddressID sets the "company_address" edge to the Address entity by ID.
func (tu *TenantUpdate) SetCompanyAddressID(id pulid.ID) *TenantUpdate {
	tu.mutation.SetCompanyAddressID(id)
	return tu
}

// SetNillableCompanyAddressID sets the "company_address" edge to the Address entity by ID if the given value is not nil.
func (tu *TenantUpdate) SetNillableCompanyAddressID(id *pulid.ID) *TenantUpdate {
	if id != nil {
		tu = tu.SetCompanyAddressID(*id)
	}
	return tu
}

// SetCompanyAddress sets the "company_address" edge to the Address entity.
func (tu *TenantUpdate) SetCompanyAddress(a *Address) *TenantUpdate {
	return tu.SetCompanyAddressID(a.ID)
}

// SetDefaultLanguageID sets the "default_language" edge to the Language entity by ID.
func (tu *TenantUpdate) SetDefaultLanguageID(id pulid.ID) *TenantUpdate {
	tu.mutation.SetDefaultLanguageID(id)
	return tu
}

// SetDefaultLanguage sets the "default_language" edge to the Language entity.
func (tu *TenantUpdate) SetDefaultLanguage(l *Language) *TenantUpdate {
	return tu.SetDefaultLanguageID(l.ID)
}

// SetBillingContactID sets the "billing_contact" edge to the Contact entity by ID.
func (tu *TenantUpdate) SetBillingContactID(id pulid.ID) *TenantUpdate {
	tu.mutation.SetBillingContactID(id)
	return tu
}

// SetNillableBillingContactID sets the "billing_contact" edge to the Contact entity by ID if the given value is not nil.
func (tu *TenantUpdate) SetNillableBillingContactID(id *pulid.ID) *TenantUpdate {
	if id != nil {
		tu = tu.SetBillingContactID(*id)
	}
	return tu
}

// SetBillingContact sets the "billing_contact" edge to the Contact entity.
func (tu *TenantUpdate) SetBillingContact(c *Contact) *TenantUpdate {
	return tu.SetBillingContactID(c.ID)
}

// SetAdminContactID sets the "admin_contact" edge to the Contact entity by ID.
func (tu *TenantUpdate) SetAdminContactID(id pulid.ID) *TenantUpdate {
	tu.mutation.SetAdminContactID(id)
	return tu
}

// SetNillableAdminContactID sets the "admin_contact" edge to the Contact entity by ID if the given value is not nil.
func (tu *TenantUpdate) SetNillableAdminContactID(id *pulid.ID) *TenantUpdate {
	if id != nil {
		tu = tu.SetAdminContactID(*id)
	}
	return tu
}

// SetAdminContact sets the "admin_contact" edge to the Contact entity.
func (tu *TenantUpdate) SetAdminContact(c *Contact) *TenantUpdate {
	return tu.SetAdminContactID(c.ID)
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// ClearConnectOptionCarriers clears all "connect_option_carriers" edges to the ConnectOptionCarrier entity.
func (tu *TenantUpdate) ClearConnectOptionCarriers() *TenantUpdate {
	tu.mutation.ClearConnectOptionCarriers()
	return tu
}

// RemoveConnectOptionCarrierIDs removes the "connect_option_carriers" edge to ConnectOptionCarrier entities by IDs.
func (tu *TenantUpdate) RemoveConnectOptionCarrierIDs(ids ...pulid.ID) *TenantUpdate {
	tu.mutation.RemoveConnectOptionCarrierIDs(ids...)
	return tu
}

// RemoveConnectOptionCarriers removes "connect_option_carriers" edges to ConnectOptionCarrier entities.
func (tu *TenantUpdate) RemoveConnectOptionCarriers(c ...*ConnectOptionCarrier) *TenantUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveConnectOptionCarrierIDs(ids...)
}

// ClearConnectOptionPlatforms clears all "connect_option_platforms" edges to the ConnectOptionPlatform entity.
func (tu *TenantUpdate) ClearConnectOptionPlatforms() *TenantUpdate {
	tu.mutation.ClearConnectOptionPlatforms()
	return tu
}

// RemoveConnectOptionPlatformIDs removes the "connect_option_platforms" edge to ConnectOptionPlatform entities by IDs.
func (tu *TenantUpdate) RemoveConnectOptionPlatformIDs(ids ...pulid.ID) *TenantUpdate {
	tu.mutation.RemoveConnectOptionPlatformIDs(ids...)
	return tu
}

// RemoveConnectOptionPlatforms removes "connect_option_platforms" edges to ConnectOptionPlatform entities.
func (tu *TenantUpdate) RemoveConnectOptionPlatforms(c ...*ConnectOptionPlatform) *TenantUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveConnectOptionPlatformIDs(ids...)
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (tu *TenantUpdate) ClearPlan() *TenantUpdate {
	tu.mutation.ClearPlan()
	return tu
}

// ClearCompanyAddress clears the "company_address" edge to the Address entity.
func (tu *TenantUpdate) ClearCompanyAddress() *TenantUpdate {
	tu.mutation.ClearCompanyAddress()
	return tu
}

// ClearDefaultLanguage clears the "default_language" edge to the Language entity.
func (tu *TenantUpdate) ClearDefaultLanguage() *TenantUpdate {
	tu.mutation.ClearDefaultLanguage()
	return tu
}

// ClearBillingContact clears the "billing_contact" edge to the Contact entity.
func (tu *TenantUpdate) ClearBillingContact() *TenantUpdate {
	tu.mutation.ClearBillingContact()
	return tu
}

// ClearAdminContact clears the "admin_contact" edge to the Contact entity.
func (tu *TenantUpdate) ClearAdminContact() *TenantUpdate {
	tu.mutation.ClearAdminContact()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TenantUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if tu.mutation.PlanCleared() && len(tu.mutation.PlanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tenant.plan"`)
	}
	if tu.mutation.DefaultLanguageCleared() && len(tu.mutation.DefaultLanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tenant.default_language"`)
	}
	return nil
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.VatNumber(); ok {
		_spec.SetField(tenant.FieldVatNumber, field.TypeString, value)
	}
	if tu.mutation.VatNumberCleared() {
		_spec.ClearField(tenant.FieldVatNumber, field.TypeString)
	}
	if value, ok := tu.mutation.InvoiceReference(); ok {
		_spec.SetField(tenant.FieldInvoiceReference, field.TypeString, value)
	}
	if tu.mutation.InvoiceReferenceCleared() {
		_spec.ClearField(tenant.FieldInvoiceReference, field.TypeString)
	}
	if tu.mutation.ConnectOptionCarriersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionCarriersTable,
			Columns: tenant.ConnectOptionCarriersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedConnectOptionCarriersIDs(); len(nodes) > 0 && !tu.mutation.ConnectOptionCarriersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionCarriersTable,
			Columns: tenant.ConnectOptionCarriersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ConnectOptionCarriersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionCarriersTable,
			Columns: tenant.ConnectOptionCarriersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ConnectOptionPlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionPlatformsTable,
			Columns: tenant.ConnectOptionPlatformsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedConnectOptionPlatformsIDs(); len(nodes) > 0 && !tu.mutation.ConnectOptionPlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionPlatformsTable,
			Columns: tenant.ConnectOptionPlatformsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ConnectOptionPlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionPlatformsTable,
			Columns: tenant.ConnectOptionPlatformsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.PlanTable,
			Columns: []string{tenant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.PlanTable,
			Columns: []string{tenant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CompanyAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.CompanyAddressTable,
			Columns: []string{tenant.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CompanyAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.CompanyAddressTable,
			Columns: []string{tenant.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DefaultLanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.DefaultLanguageTable,
			Columns: []string{tenant.DefaultLanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DefaultLanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.DefaultLanguageTable,
			Columns: []string{tenant.DefaultLanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.BillingContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.BillingContactTable,
			Columns: []string{tenant.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BillingContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.BillingContactTable,
			Columns: []string{tenant.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AdminContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.AdminContactTable,
			Columns: []string{tenant.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AdminContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.AdminContactTable,
			Columns: []string{tenant.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableName(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetVatNumber sets the "vat_number" field.
func (tuo *TenantUpdateOne) SetVatNumber(s string) *TenantUpdateOne {
	tuo.mutation.SetVatNumber(s)
	return tuo
}

// SetNillableVatNumber sets the "vat_number" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableVatNumber(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetVatNumber(*s)
	}
	return tuo
}

// ClearVatNumber clears the value of the "vat_number" field.
func (tuo *TenantUpdateOne) ClearVatNumber() *TenantUpdateOne {
	tuo.mutation.ClearVatNumber()
	return tuo
}

// SetInvoiceReference sets the "invoice_reference" field.
func (tuo *TenantUpdateOne) SetInvoiceReference(s string) *TenantUpdateOne {
	tuo.mutation.SetInvoiceReference(s)
	return tuo
}

// SetNillableInvoiceReference sets the "invoice_reference" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableInvoiceReference(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetInvoiceReference(*s)
	}
	return tuo
}

// ClearInvoiceReference clears the value of the "invoice_reference" field.
func (tuo *TenantUpdateOne) ClearInvoiceReference() *TenantUpdateOne {
	tuo.mutation.ClearInvoiceReference()
	return tuo
}

// AddConnectOptionCarrierIDs adds the "connect_option_carriers" edge to the ConnectOptionCarrier entity by IDs.
func (tuo *TenantUpdateOne) AddConnectOptionCarrierIDs(ids ...pulid.ID) *TenantUpdateOne {
	tuo.mutation.AddConnectOptionCarrierIDs(ids...)
	return tuo
}

// AddConnectOptionCarriers adds the "connect_option_carriers" edges to the ConnectOptionCarrier entity.
func (tuo *TenantUpdateOne) AddConnectOptionCarriers(c ...*ConnectOptionCarrier) *TenantUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddConnectOptionCarrierIDs(ids...)
}

// AddConnectOptionPlatformIDs adds the "connect_option_platforms" edge to the ConnectOptionPlatform entity by IDs.
func (tuo *TenantUpdateOne) AddConnectOptionPlatformIDs(ids ...pulid.ID) *TenantUpdateOne {
	tuo.mutation.AddConnectOptionPlatformIDs(ids...)
	return tuo
}

// AddConnectOptionPlatforms adds the "connect_option_platforms" edges to the ConnectOptionPlatform entity.
func (tuo *TenantUpdateOne) AddConnectOptionPlatforms(c ...*ConnectOptionPlatform) *TenantUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddConnectOptionPlatformIDs(ids...)
}

// SetPlanID sets the "plan" edge to the Plan entity by ID.
func (tuo *TenantUpdateOne) SetPlanID(id pulid.ID) *TenantUpdateOne {
	tuo.mutation.SetPlanID(id)
	return tuo
}

// SetPlan sets the "plan" edge to the Plan entity.
func (tuo *TenantUpdateOne) SetPlan(p *Plan) *TenantUpdateOne {
	return tuo.SetPlanID(p.ID)
}

// SetCompanyAddressID sets the "company_address" edge to the Address entity by ID.
func (tuo *TenantUpdateOne) SetCompanyAddressID(id pulid.ID) *TenantUpdateOne {
	tuo.mutation.SetCompanyAddressID(id)
	return tuo
}

// SetNillableCompanyAddressID sets the "company_address" edge to the Address entity by ID if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableCompanyAddressID(id *pulid.ID) *TenantUpdateOne {
	if id != nil {
		tuo = tuo.SetCompanyAddressID(*id)
	}
	return tuo
}

// SetCompanyAddress sets the "company_address" edge to the Address entity.
func (tuo *TenantUpdateOne) SetCompanyAddress(a *Address) *TenantUpdateOne {
	return tuo.SetCompanyAddressID(a.ID)
}

// SetDefaultLanguageID sets the "default_language" edge to the Language entity by ID.
func (tuo *TenantUpdateOne) SetDefaultLanguageID(id pulid.ID) *TenantUpdateOne {
	tuo.mutation.SetDefaultLanguageID(id)
	return tuo
}

// SetDefaultLanguage sets the "default_language" edge to the Language entity.
func (tuo *TenantUpdateOne) SetDefaultLanguage(l *Language) *TenantUpdateOne {
	return tuo.SetDefaultLanguageID(l.ID)
}

// SetBillingContactID sets the "billing_contact" edge to the Contact entity by ID.
func (tuo *TenantUpdateOne) SetBillingContactID(id pulid.ID) *TenantUpdateOne {
	tuo.mutation.SetBillingContactID(id)
	return tuo
}

// SetNillableBillingContactID sets the "billing_contact" edge to the Contact entity by ID if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableBillingContactID(id *pulid.ID) *TenantUpdateOne {
	if id != nil {
		tuo = tuo.SetBillingContactID(*id)
	}
	return tuo
}

// SetBillingContact sets the "billing_contact" edge to the Contact entity.
func (tuo *TenantUpdateOne) SetBillingContact(c *Contact) *TenantUpdateOne {
	return tuo.SetBillingContactID(c.ID)
}

// SetAdminContactID sets the "admin_contact" edge to the Contact entity by ID.
func (tuo *TenantUpdateOne) SetAdminContactID(id pulid.ID) *TenantUpdateOne {
	tuo.mutation.SetAdminContactID(id)
	return tuo
}

// SetNillableAdminContactID sets the "admin_contact" edge to the Contact entity by ID if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableAdminContactID(id *pulid.ID) *TenantUpdateOne {
	if id != nil {
		tuo = tuo.SetAdminContactID(*id)
	}
	return tuo
}

// SetAdminContact sets the "admin_contact" edge to the Contact entity.
func (tuo *TenantUpdateOne) SetAdminContact(c *Contact) *TenantUpdateOne {
	return tuo.SetAdminContactID(c.ID)
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// ClearConnectOptionCarriers clears all "connect_option_carriers" edges to the ConnectOptionCarrier entity.
func (tuo *TenantUpdateOne) ClearConnectOptionCarriers() *TenantUpdateOne {
	tuo.mutation.ClearConnectOptionCarriers()
	return tuo
}

// RemoveConnectOptionCarrierIDs removes the "connect_option_carriers" edge to ConnectOptionCarrier entities by IDs.
func (tuo *TenantUpdateOne) RemoveConnectOptionCarrierIDs(ids ...pulid.ID) *TenantUpdateOne {
	tuo.mutation.RemoveConnectOptionCarrierIDs(ids...)
	return tuo
}

// RemoveConnectOptionCarriers removes "connect_option_carriers" edges to ConnectOptionCarrier entities.
func (tuo *TenantUpdateOne) RemoveConnectOptionCarriers(c ...*ConnectOptionCarrier) *TenantUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveConnectOptionCarrierIDs(ids...)
}

// ClearConnectOptionPlatforms clears all "connect_option_platforms" edges to the ConnectOptionPlatform entity.
func (tuo *TenantUpdateOne) ClearConnectOptionPlatforms() *TenantUpdateOne {
	tuo.mutation.ClearConnectOptionPlatforms()
	return tuo
}

// RemoveConnectOptionPlatformIDs removes the "connect_option_platforms" edge to ConnectOptionPlatform entities by IDs.
func (tuo *TenantUpdateOne) RemoveConnectOptionPlatformIDs(ids ...pulid.ID) *TenantUpdateOne {
	tuo.mutation.RemoveConnectOptionPlatformIDs(ids...)
	return tuo
}

// RemoveConnectOptionPlatforms removes "connect_option_platforms" edges to ConnectOptionPlatform entities.
func (tuo *TenantUpdateOne) RemoveConnectOptionPlatforms(c ...*ConnectOptionPlatform) *TenantUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveConnectOptionPlatformIDs(ids...)
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (tuo *TenantUpdateOne) ClearPlan() *TenantUpdateOne {
	tuo.mutation.ClearPlan()
	return tuo
}

// ClearCompanyAddress clears the "company_address" edge to the Address entity.
func (tuo *TenantUpdateOne) ClearCompanyAddress() *TenantUpdateOne {
	tuo.mutation.ClearCompanyAddress()
	return tuo
}

// ClearDefaultLanguage clears the "default_language" edge to the Language entity.
func (tuo *TenantUpdateOne) ClearDefaultLanguage() *TenantUpdateOne {
	tuo.mutation.ClearDefaultLanguage()
	return tuo
}

// ClearBillingContact clears the "billing_contact" edge to the Contact entity.
func (tuo *TenantUpdateOne) ClearBillingContact() *TenantUpdateOne {
	tuo.mutation.ClearBillingContact()
	return tuo
}

// ClearAdminContact clears the "admin_contact" edge to the Contact entity.
func (tuo *TenantUpdateOne) ClearAdminContact() *TenantUpdateOne {
	tuo.mutation.ClearAdminContact()
	return tuo
}

// Where appends a list predicates to the TenantUpdate builder.
func (tuo *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TenantUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if tuo.mutation.PlanCleared() && len(tuo.mutation.PlanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tenant.plan"`)
	}
	if tuo.mutation.DefaultLanguageCleared() && len(tuo.mutation.DefaultLanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tenant.default_language"`)
	}
	return nil
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.VatNumber(); ok {
		_spec.SetField(tenant.FieldVatNumber, field.TypeString, value)
	}
	if tuo.mutation.VatNumberCleared() {
		_spec.ClearField(tenant.FieldVatNumber, field.TypeString)
	}
	if value, ok := tuo.mutation.InvoiceReference(); ok {
		_spec.SetField(tenant.FieldInvoiceReference, field.TypeString, value)
	}
	if tuo.mutation.InvoiceReferenceCleared() {
		_spec.ClearField(tenant.FieldInvoiceReference, field.TypeString)
	}
	if tuo.mutation.ConnectOptionCarriersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionCarriersTable,
			Columns: tenant.ConnectOptionCarriersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedConnectOptionCarriersIDs(); len(nodes) > 0 && !tuo.mutation.ConnectOptionCarriersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionCarriersTable,
			Columns: tenant.ConnectOptionCarriersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ConnectOptionCarriersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionCarriersTable,
			Columns: tenant.ConnectOptionCarriersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ConnectOptionPlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionPlatformsTable,
			Columns: tenant.ConnectOptionPlatformsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedConnectOptionPlatformsIDs(); len(nodes) > 0 && !tuo.mutation.ConnectOptionPlatformsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionPlatformsTable,
			Columns: tenant.ConnectOptionPlatformsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ConnectOptionPlatformsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionPlatformsTable,
			Columns: tenant.ConnectOptionPlatformsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.PlanTable,
			Columns: []string{tenant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.PlanTable,
			Columns: []string{tenant.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CompanyAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.CompanyAddressTable,
			Columns: []string{tenant.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CompanyAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.CompanyAddressTable,
			Columns: []string{tenant.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DefaultLanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.DefaultLanguageTable,
			Columns: []string{tenant.DefaultLanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DefaultLanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.DefaultLanguageTable,
			Columns: []string{tenant.DefaultLanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.BillingContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.BillingContactTable,
			Columns: []string{tenant.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BillingContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.BillingContactTable,
			Columns: []string{tenant.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AdminContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.AdminContactTable,
			Columns: []string{tenant.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AdminContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.AdminContactTable,
			Columns: []string{tenant.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
