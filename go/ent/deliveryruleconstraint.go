// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeliveryRuleConstraint is the model entity for the DeliveryRuleConstraint schema.
type DeliveryRuleConstraint struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// PropertyType holds the value of the "property_type" field.
	PropertyType deliveryruleconstraint.PropertyType `json:"property_type,omitempty"`
	// Comparison holds the value of the "comparison" field.
	Comparison deliveryruleconstraint.Comparison `json:"comparison,omitempty"`
	// SelectedValue holds the value of the "selected_value" field.
	SelectedValue *fieldjson.DeliveryRuleConstraintSelectedValue `json:"selected_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryRuleConstraintQuery when eager-loading is set.
	Edges                                                    DeliveryRuleConstraintEdges `json:"edges"`
	delivery_rule_constraint_group_delivery_rule_constraints *pulid.ID
	selectValues                                             sql.SelectValues
}

// DeliveryRuleConstraintEdges holds the relations/edges for other nodes in the graph.
type DeliveryRuleConstraintEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// DeliveryRuleConstraintGroup holds the value of the delivery_rule_constraint_group edge.
	DeliveryRuleConstraintGroup *DeliveryRuleConstraintGroup `json:"delivery_rule_constraint_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryRuleConstraintEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// DeliveryRuleConstraintGroupOrErr returns the DeliveryRuleConstraintGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryRuleConstraintEdges) DeliveryRuleConstraintGroupOrErr() (*DeliveryRuleConstraintGroup, error) {
	if e.DeliveryRuleConstraintGroup != nil {
		return e.DeliveryRuleConstraintGroup, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: deliveryruleconstraintgroup.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_rule_constraint_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeliveryRuleConstraint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliveryruleconstraint.FieldSelectedValue:
			values[i] = new(fieldjson.DeliveryRuleConstraintSelectedValue)
		case deliveryruleconstraint.FieldID, deliveryruleconstraint.FieldTenantID:
			values[i] = new(pulid.ID)
		case deliveryruleconstraint.FieldPropertyType, deliveryruleconstraint.FieldComparison:
			values[i] = new(sql.NullString)
		case deliveryruleconstraint.ForeignKeys[0]: // delivery_rule_constraint_group_delivery_rule_constraints
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeliveryRuleConstraint fields.
func (drc *DeliveryRuleConstraint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliveryruleconstraint.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				drc.ID = *value
			}
		case deliveryruleconstraint.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				drc.TenantID = *value
			}
		case deliveryruleconstraint.FieldPropertyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field property_type", values[i])
			} else if value.Valid {
				drc.PropertyType = deliveryruleconstraint.PropertyType(value.String)
			}
		case deliveryruleconstraint.FieldComparison:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comparison", values[i])
			} else if value.Valid {
				drc.Comparison = deliveryruleconstraint.Comparison(value.String)
			}
		case deliveryruleconstraint.FieldSelectedValue:
			if value, ok := values[i].(*fieldjson.DeliveryRuleConstraintSelectedValue); !ok {
				return fmt.Errorf("unexpected type %T for field selected_value", values[i])
			} else if value != nil {
				drc.SelectedValue = value
			}
		case deliveryruleconstraint.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_rule_constraint_group_delivery_rule_constraints", values[i])
			} else if value.Valid {
				drc.delivery_rule_constraint_group_delivery_rule_constraints = new(pulid.ID)
				*drc.delivery_rule_constraint_group_delivery_rule_constraints = *value.S.(*pulid.ID)
			}
		default:
			drc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeliveryRuleConstraint.
// This includes values selected through modifiers, order, etc.
func (drc *DeliveryRuleConstraint) Value(name string) (ent.Value, error) {
	return drc.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the DeliveryRuleConstraint entity.
func (drc *DeliveryRuleConstraint) QueryTenant() *TenantQuery {
	return NewDeliveryRuleConstraintClient(drc.config).QueryTenant(drc)
}

// QueryDeliveryRuleConstraintGroup queries the "delivery_rule_constraint_group" edge of the DeliveryRuleConstraint entity.
func (drc *DeliveryRuleConstraint) QueryDeliveryRuleConstraintGroup() *DeliveryRuleConstraintGroupQuery {
	return NewDeliveryRuleConstraintClient(drc.config).QueryDeliveryRuleConstraintGroup(drc)
}

// Update returns a builder for updating this DeliveryRuleConstraint.
// Note that you need to call DeliveryRuleConstraint.Unwrap() before calling this method if this DeliveryRuleConstraint
// was returned from a transaction, and the transaction was committed or rolled back.
func (drc *DeliveryRuleConstraint) Update() *DeliveryRuleConstraintUpdateOne {
	return NewDeliveryRuleConstraintClient(drc.config).UpdateOne(drc)
}

// Unwrap unwraps the DeliveryRuleConstraint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (drc *DeliveryRuleConstraint) Unwrap() *DeliveryRuleConstraint {
	_tx, ok := drc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeliveryRuleConstraint is not a transactional entity")
	}
	drc.config.driver = _tx.drv
	return drc
}

// String implements the fmt.Stringer.
func (drc *DeliveryRuleConstraint) String() string {
	var builder strings.Builder
	builder.WriteString("DeliveryRuleConstraint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", drc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", drc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("property_type=")
	builder.WriteString(fmt.Sprintf("%v", drc.PropertyType))
	builder.WriteString(", ")
	builder.WriteString("comparison=")
	builder.WriteString(fmt.Sprintf("%v", drc.Comparison))
	builder.WriteString(", ")
	builder.WriteString("selected_value=")
	builder.WriteString(fmt.Sprintf("%v", drc.SelectedValue))
	builder.WriteByte(')')
	return builder.String()
}

// DeliveryRuleConstraints is a parsable slice of DeliveryRuleConstraint.
type DeliveryRuleConstraints []*DeliveryRuleConstraint
