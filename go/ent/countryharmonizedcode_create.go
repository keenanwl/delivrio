// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CountryHarmonizedCodeCreate is the builder for creating a CountryHarmonizedCode entity.
type CountryHarmonizedCodeCreate struct {
	config
	mutation *CountryHarmonizedCodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (chcc *CountryHarmonizedCodeCreate) SetTenantID(pu pulid.ID) *CountryHarmonizedCodeCreate {
	chcc.mutation.SetTenantID(pu)
	return chcc
}

// SetCode sets the "code" field.
func (chcc *CountryHarmonizedCodeCreate) SetCode(s string) *CountryHarmonizedCodeCreate {
	chcc.mutation.SetCode(s)
	return chcc
}

// SetID sets the "id" field.
func (chcc *CountryHarmonizedCodeCreate) SetID(pu pulid.ID) *CountryHarmonizedCodeCreate {
	chcc.mutation.SetID(pu)
	return chcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (chcc *CountryHarmonizedCodeCreate) SetNillableID(pu *pulid.ID) *CountryHarmonizedCodeCreate {
	if pu != nil {
		chcc.SetID(*pu)
	}
	return chcc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (chcc *CountryHarmonizedCodeCreate) SetTenant(t *Tenant) *CountryHarmonizedCodeCreate {
	return chcc.SetTenantID(t.ID)
}

// SetInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID.
func (chcc *CountryHarmonizedCodeCreate) SetInventoryItemID(id pulid.ID) *CountryHarmonizedCodeCreate {
	chcc.mutation.SetInventoryItemID(id)
	return chcc
}

// SetInventoryItem sets the "inventory_item" edge to the InventoryItem entity.
func (chcc *CountryHarmonizedCodeCreate) SetInventoryItem(i *InventoryItem) *CountryHarmonizedCodeCreate {
	return chcc.SetInventoryItemID(i.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (chcc *CountryHarmonizedCodeCreate) SetCountryID(id pulid.ID) *CountryHarmonizedCodeCreate {
	chcc.mutation.SetCountryID(id)
	return chcc
}

// SetCountry sets the "country" edge to the Country entity.
func (chcc *CountryHarmonizedCodeCreate) SetCountry(c *Country) *CountryHarmonizedCodeCreate {
	return chcc.SetCountryID(c.ID)
}

// Mutation returns the CountryHarmonizedCodeMutation object of the builder.
func (chcc *CountryHarmonizedCodeCreate) Mutation() *CountryHarmonizedCodeMutation {
	return chcc.mutation
}

// Save creates the CountryHarmonizedCode in the database.
func (chcc *CountryHarmonizedCodeCreate) Save(ctx context.Context) (*CountryHarmonizedCode, error) {
	if err := chcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, chcc.sqlSave, chcc.mutation, chcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (chcc *CountryHarmonizedCodeCreate) SaveX(ctx context.Context) *CountryHarmonizedCode {
	v, err := chcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chcc *CountryHarmonizedCodeCreate) Exec(ctx context.Context) error {
	_, err := chcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcc *CountryHarmonizedCodeCreate) ExecX(ctx context.Context) {
	if err := chcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chcc *CountryHarmonizedCodeCreate) defaults() error {
	if _, ok := chcc.mutation.ID(); !ok {
		if countryharmonizedcode.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized countryharmonizedcode.DefaultID (forgotten import ent/runtime?)")
		}
		v := countryharmonizedcode.DefaultID()
		chcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (chcc *CountryHarmonizedCodeCreate) check() error {
	if _, ok := chcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CountryHarmonizedCode.tenant_id"`)}
	}
	if _, ok := chcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "CountryHarmonizedCode.code"`)}
	}
	if len(chcc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CountryHarmonizedCode.tenant"`)}
	}
	if len(chcc.mutation.InventoryItemIDs()) == 0 {
		return &ValidationError{Name: "inventory_item", err: errors.New(`ent: missing required edge "CountryHarmonizedCode.inventory_item"`)}
	}
	if len(chcc.mutation.CountryIDs()) == 0 {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required edge "CountryHarmonizedCode.country"`)}
	}
	return nil
}

func (chcc *CountryHarmonizedCodeCreate) sqlSave(ctx context.Context) (*CountryHarmonizedCode, error) {
	if err := chcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := chcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, chcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	chcc.mutation.id = &_node.ID
	chcc.mutation.done = true
	return _node, nil
}

func (chcc *CountryHarmonizedCodeCreate) createSpec() (*CountryHarmonizedCode, *sqlgraph.CreateSpec) {
	var (
		_node = &CountryHarmonizedCode{config: chcc.config}
		_spec = sqlgraph.NewCreateSpec(countryharmonizedcode.Table, sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString))
	)
	_spec.OnConflict = chcc.conflict
	if id, ok := chcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := chcc.mutation.Code(); ok {
		_spec.SetField(countryharmonizedcode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if nodes := chcc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.TenantTable,
			Columns: []string{countryharmonizedcode.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := chcc.mutation.InventoryItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countryharmonizedcode.InventoryItemTable,
			Columns: []string{countryharmonizedcode.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inventory_item_country_harmonized_code = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := chcc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.CountryTable,
			Columns: []string{countryharmonizedcode.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.country_harmonized_code_country = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CountryHarmonizedCode.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CountryHarmonizedCodeUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (chcc *CountryHarmonizedCodeCreate) OnConflict(opts ...sql.ConflictOption) *CountryHarmonizedCodeUpsertOne {
	chcc.conflict = opts
	return &CountryHarmonizedCodeUpsertOne{
		create: chcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CountryHarmonizedCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (chcc *CountryHarmonizedCodeCreate) OnConflictColumns(columns ...string) *CountryHarmonizedCodeUpsertOne {
	chcc.conflict = append(chcc.conflict, sql.ConflictColumns(columns...))
	return &CountryHarmonizedCodeUpsertOne{
		create: chcc,
	}
}

type (
	// CountryHarmonizedCodeUpsertOne is the builder for "upsert"-ing
	//  one CountryHarmonizedCode node.
	CountryHarmonizedCodeUpsertOne struct {
		create *CountryHarmonizedCodeCreate
	}

	// CountryHarmonizedCodeUpsert is the "OnConflict" setter.
	CountryHarmonizedCodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *CountryHarmonizedCodeUpsert) SetTenantID(v pulid.ID) *CountryHarmonizedCodeUpsert {
	u.Set(countryharmonizedcode.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CountryHarmonizedCodeUpsert) UpdateTenantID() *CountryHarmonizedCodeUpsert {
	u.SetExcluded(countryharmonizedcode.FieldTenantID)
	return u
}

// SetCode sets the "code" field.
func (u *CountryHarmonizedCodeUpsert) SetCode(v string) *CountryHarmonizedCodeUpsert {
	u.Set(countryharmonizedcode.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CountryHarmonizedCodeUpsert) UpdateCode() *CountryHarmonizedCodeUpsert {
	u.SetExcluded(countryharmonizedcode.FieldCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CountryHarmonizedCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(countryharmonizedcode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CountryHarmonizedCodeUpsertOne) UpdateNewValues() *CountryHarmonizedCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(countryharmonizedcode.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CountryHarmonizedCode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CountryHarmonizedCodeUpsertOne) Ignore() *CountryHarmonizedCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CountryHarmonizedCodeUpsertOne) DoNothing() *CountryHarmonizedCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CountryHarmonizedCodeCreate.OnConflict
// documentation for more info.
func (u *CountryHarmonizedCodeUpsertOne) Update(set func(*CountryHarmonizedCodeUpsert)) *CountryHarmonizedCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CountryHarmonizedCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CountryHarmonizedCodeUpsertOne) SetTenantID(v pulid.ID) *CountryHarmonizedCodeUpsertOne {
	return u.Update(func(s *CountryHarmonizedCodeUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CountryHarmonizedCodeUpsertOne) UpdateTenantID() *CountryHarmonizedCodeUpsertOne {
	return u.Update(func(s *CountryHarmonizedCodeUpsert) {
		s.UpdateTenantID()
	})
}

// SetCode sets the "code" field.
func (u *CountryHarmonizedCodeUpsertOne) SetCode(v string) *CountryHarmonizedCodeUpsertOne {
	return u.Update(func(s *CountryHarmonizedCodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CountryHarmonizedCodeUpsertOne) UpdateCode() *CountryHarmonizedCodeUpsertOne {
	return u.Update(func(s *CountryHarmonizedCodeUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *CountryHarmonizedCodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CountryHarmonizedCodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CountryHarmonizedCodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CountryHarmonizedCodeUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CountryHarmonizedCodeUpsertOne.ID is not supported by MySQL driver. Use CountryHarmonizedCodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CountryHarmonizedCodeUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CountryHarmonizedCodeCreateBulk is the builder for creating many CountryHarmonizedCode entities in bulk.
type CountryHarmonizedCodeCreateBulk struct {
	config
	err      error
	builders []*CountryHarmonizedCodeCreate
	conflict []sql.ConflictOption
}

// Save creates the CountryHarmonizedCode entities in the database.
func (chccb *CountryHarmonizedCodeCreateBulk) Save(ctx context.Context) ([]*CountryHarmonizedCode, error) {
	if chccb.err != nil {
		return nil, chccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(chccb.builders))
	nodes := make([]*CountryHarmonizedCode, len(chccb.builders))
	mutators := make([]Mutator, len(chccb.builders))
	for i := range chccb.builders {
		func(i int, root context.Context) {
			builder := chccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CountryHarmonizedCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, chccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = chccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, chccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, chccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (chccb *CountryHarmonizedCodeCreateBulk) SaveX(ctx context.Context) []*CountryHarmonizedCode {
	v, err := chccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chccb *CountryHarmonizedCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := chccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chccb *CountryHarmonizedCodeCreateBulk) ExecX(ctx context.Context) {
	if err := chccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CountryHarmonizedCode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CountryHarmonizedCodeUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (chccb *CountryHarmonizedCodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *CountryHarmonizedCodeUpsertBulk {
	chccb.conflict = opts
	return &CountryHarmonizedCodeUpsertBulk{
		create: chccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CountryHarmonizedCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (chccb *CountryHarmonizedCodeCreateBulk) OnConflictColumns(columns ...string) *CountryHarmonizedCodeUpsertBulk {
	chccb.conflict = append(chccb.conflict, sql.ConflictColumns(columns...))
	return &CountryHarmonizedCodeUpsertBulk{
		create: chccb,
	}
}

// CountryHarmonizedCodeUpsertBulk is the builder for "upsert"-ing
// a bulk of CountryHarmonizedCode nodes.
type CountryHarmonizedCodeUpsertBulk struct {
	create *CountryHarmonizedCodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CountryHarmonizedCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(countryharmonizedcode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CountryHarmonizedCodeUpsertBulk) UpdateNewValues() *CountryHarmonizedCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(countryharmonizedcode.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CountryHarmonizedCode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CountryHarmonizedCodeUpsertBulk) Ignore() *CountryHarmonizedCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CountryHarmonizedCodeUpsertBulk) DoNothing() *CountryHarmonizedCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CountryHarmonizedCodeCreateBulk.OnConflict
// documentation for more info.
func (u *CountryHarmonizedCodeUpsertBulk) Update(set func(*CountryHarmonizedCodeUpsert)) *CountryHarmonizedCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CountryHarmonizedCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CountryHarmonizedCodeUpsertBulk) SetTenantID(v pulid.ID) *CountryHarmonizedCodeUpsertBulk {
	return u.Update(func(s *CountryHarmonizedCodeUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CountryHarmonizedCodeUpsertBulk) UpdateTenantID() *CountryHarmonizedCodeUpsertBulk {
	return u.Update(func(s *CountryHarmonizedCodeUpsert) {
		s.UpdateTenantID()
	})
}

// SetCode sets the "code" field.
func (u *CountryHarmonizedCodeUpsertBulk) SetCode(v string) *CountryHarmonizedCodeUpsertBulk {
	return u.Update(func(s *CountryHarmonizedCodeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CountryHarmonizedCodeUpsertBulk) UpdateCode() *CountryHarmonizedCodeUpsertBulk {
	return u.Update(func(s *CountryHarmonizedCodeUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *CountryHarmonizedCodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CountryHarmonizedCodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CountryHarmonizedCodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CountryHarmonizedCodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
