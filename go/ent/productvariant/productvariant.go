// Code generated by ent, DO NOT EDIT.

package productvariant

import (
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the productvariant type in the database.
	Label = "product_variant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldArchived holds the string denoting the archived field in the database.
	FieldArchived = "archived"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEanNumber holds the string denoting the ean_number field in the database.
	FieldEanNumber = "ean_number"
	// FieldWeightG holds the string denoting the weight_g field in the database.
	FieldWeightG = "weight_g"
	// FieldDimensionLength holds the string denoting the dimension_length field in the database.
	FieldDimensionLength = "dimension_length"
	// FieldDimensionWidth holds the string denoting the dimension_width field in the database.
	FieldDimensionWidth = "dimension_width"
	// FieldDimensionHeight holds the string denoting the dimension_height field in the database.
	FieldDimensionHeight = "dimension_height"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeOrderLines holds the string denoting the order_lines edge name in mutations.
	EdgeOrderLines = "order_lines"
	// EdgeProductImage holds the string denoting the product_image edge name in mutations.
	EdgeProductImage = "product_image"
	// EdgeInventoryItem holds the string denoting the inventory_item edge name in mutations.
	EdgeInventoryItem = "inventory_item"
	// Table holds the table name of the productvariant in the database.
	Table = "product_variants"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "product_variants"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "product_variants"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_product_variant"
	// OrderLinesTable is the table that holds the order_lines relation/edge.
	OrderLinesTable = "order_lines"
	// OrderLinesInverseTable is the table name for the OrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "orderline" package.
	OrderLinesInverseTable = "order_lines"
	// OrderLinesColumn is the table column denoting the order_lines relation/edge.
	OrderLinesColumn = "product_variant_id"
	// ProductImageTable is the table that holds the product_image relation/edge. The primary key declared below.
	ProductImageTable = "product_image_product_variant"
	// ProductImageInverseTable is the table name for the ProductImage entity.
	// It exists in this package in order to avoid circular dependency with the "productimage" package.
	ProductImageInverseTable = "product_images"
	// InventoryItemTable is the table that holds the inventory_item relation/edge.
	InventoryItemTable = "inventory_items"
	// InventoryItemInverseTable is the table name for the InventoryItem entity.
	// It exists in this package in order to avoid circular dependency with the "inventoryitem" package.
	InventoryItemInverseTable = "inventory_items"
	// InventoryItemColumn is the table column denoting the inventory_item relation/edge.
	InventoryItemColumn = "product_variant_inventory_item"
)

// Columns holds all SQL columns for productvariant fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldArchived,
	FieldExternalID,
	FieldDescription,
	FieldEanNumber,
	FieldWeightG,
	FieldDimensionLength,
	FieldDimensionWidth,
	FieldDimensionHeight,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_variants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_product_variant",
}

var (
	// ProductImagePrimaryKey and ProductImageColumn2 are the table columns denoting the
	// primary key for the product_image relation (M2M).
	ProductImagePrimaryKey = []string{"product_image_id", "product_variant_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultArchived holds the default value on creation for the "archived" field.
	DefaultArchived bool
	// DefaultWeightG holds the default value on creation for the "weight_g" field.
	DefaultWeightG int
	// WeightGValidator is a validator for the "weight_g" field. It is called by the builders before save.
	WeightGValidator func(int) error
	// DimensionLengthValidator is a validator for the "dimension_length" field. It is called by the builders before save.
	DimensionLengthValidator func(int) error
	// DimensionWidthValidator is a validator for the "dimension_width" field. It is called by the builders before save.
	DimensionWidthValidator func(int) error
	// DimensionHeightValidator is a validator for the "dimension_height" field. It is called by the builders before save.
	DimensionHeightValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ProductVariant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByArchived orders the results by the archived field.
func ByArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchived, opts...).ToFunc()
}

// ByExternalID orders the results by the external_ID field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEanNumber orders the results by the ean_number field.
func ByEanNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEanNumber, opts...).ToFunc()
}

// ByWeightG orders the results by the weight_g field.
func ByWeightG(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeightG, opts...).ToFunc()
}

// ByDimensionLength orders the results by the dimension_length field.
func ByDimensionLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimensionLength, opts...).ToFunc()
}

// ByDimensionWidth orders the results by the dimension_width field.
func ByDimensionWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimensionWidth, opts...).ToFunc()
}

// ByDimensionHeight orders the results by the dimension_height field.
func ByDimensionHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimensionHeight, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductField orders the results by product field.
func ByProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderLinesCount orders the results by order_lines count.
func ByOrderLinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderLinesStep(), opts...)
	}
}

// ByOrderLines orders the results by order_lines terms.
func ByOrderLines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderLinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductImageCount orders the results by product_image count.
func ByProductImageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductImageStep(), opts...)
	}
}

// ByProductImage orders the results by product_image terms.
func ByProductImage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInventoryItemField orders the results by inventory_item field.
func ByInventoryItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryItemStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
	)
}
func newOrderLinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderLinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrderLinesTable, OrderLinesColumn),
	)
}
func newProductImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProductImageTable, ProductImagePrimaryKey...),
	)
}
func newInventoryItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, InventoryItemTable, InventoryItemColumn),
	)
}
