// Code generated by ent, DO NOT EDIT.

package productvariant

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldTenantID, v))
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldArchived, v))
}

// ExternalID applies equality check predicate on the "external_ID" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldExternalID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldDescription, v))
}

// EanNumber applies equality check predicate on the "ean_number" field. It's identical to EanNumberEQ.
func EanNumber(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldEanNumber, v))
}

// WeightG applies equality check predicate on the "weight_g" field. It's identical to WeightGEQ.
func WeightG(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldWeightG, v))
}

// DimensionLength applies equality check predicate on the "dimension_length" field. It's identical to DimensionLengthEQ.
func DimensionLength(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldDimensionLength, v))
}

// DimensionWidth applies equality check predicate on the "dimension_width" field. It's identical to DimensionWidthEQ.
func DimensionWidth(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldDimensionWidth, v))
}

// DimensionHeight applies equality check predicate on the "dimension_height" field. It's identical to DimensionHeightEQ.
func DimensionHeight(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldDimensionHeight, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.ProductVariant {
	vc := string(v)
	return predicate.ProductVariant(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.ProductVariant {
	vc := string(v)
	return predicate.ProductVariant(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.ProductVariant {
	vc := string(v)
	return predicate.ProductVariant(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.ProductVariant {
	vc := string(v)
	return predicate.ProductVariant(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.ProductVariant {
	vc := string(v)
	return predicate.ProductVariant(sql.FieldContainsFold(FieldTenantID, vc))
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldArchived, v))
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldArchived, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_ID" field.
func ExternalIDEQ(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_ID" field.
func ExternalIDNEQ(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_ID" field.
func ExternalIDIn(vs ...string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_ID" field.
func ExternalIDNotIn(vs ...string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_ID" field.
func ExternalIDGT(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_ID" field.
func ExternalIDGTE(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_ID" field.
func ExternalIDLT(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_ID" field.
func ExternalIDLTE(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_ID" field.
func ExternalIDContains(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_ID" field.
func ExternalIDHasPrefix(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_ID" field.
func ExternalIDHasSuffix(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_ID" field.
func ExternalIDIsNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_ID" field.
func ExternalIDNotNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_ID" field.
func ExternalIDEqualFold(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_ID" field.
func ExternalIDContainsFold(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldContainsFold(FieldExternalID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldContainsFold(FieldDescription, v))
}

// EanNumberEQ applies the EQ predicate on the "ean_number" field.
func EanNumberEQ(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldEanNumber, v))
}

// EanNumberNEQ applies the NEQ predicate on the "ean_number" field.
func EanNumberNEQ(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldEanNumber, v))
}

// EanNumberIn applies the In predicate on the "ean_number" field.
func EanNumberIn(vs ...string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldEanNumber, vs...))
}

// EanNumberNotIn applies the NotIn predicate on the "ean_number" field.
func EanNumberNotIn(vs ...string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldEanNumber, vs...))
}

// EanNumberGT applies the GT predicate on the "ean_number" field.
func EanNumberGT(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldEanNumber, v))
}

// EanNumberGTE applies the GTE predicate on the "ean_number" field.
func EanNumberGTE(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldEanNumber, v))
}

// EanNumberLT applies the LT predicate on the "ean_number" field.
func EanNumberLT(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldEanNumber, v))
}

// EanNumberLTE applies the LTE predicate on the "ean_number" field.
func EanNumberLTE(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldEanNumber, v))
}

// EanNumberContains applies the Contains predicate on the "ean_number" field.
func EanNumberContains(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldContains(FieldEanNumber, v))
}

// EanNumberHasPrefix applies the HasPrefix predicate on the "ean_number" field.
func EanNumberHasPrefix(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldHasPrefix(FieldEanNumber, v))
}

// EanNumberHasSuffix applies the HasSuffix predicate on the "ean_number" field.
func EanNumberHasSuffix(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldHasSuffix(FieldEanNumber, v))
}

// EanNumberIsNil applies the IsNil predicate on the "ean_number" field.
func EanNumberIsNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIsNull(FieldEanNumber))
}

// EanNumberNotNil applies the NotNil predicate on the "ean_number" field.
func EanNumberNotNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotNull(FieldEanNumber))
}

// EanNumberEqualFold applies the EqualFold predicate on the "ean_number" field.
func EanNumberEqualFold(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEqualFold(FieldEanNumber, v))
}

// EanNumberContainsFold applies the ContainsFold predicate on the "ean_number" field.
func EanNumberContainsFold(v string) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldContainsFold(FieldEanNumber, v))
}

// WeightGEQ applies the EQ predicate on the "weight_g" field.
func WeightGEQ(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldWeightG, v))
}

// WeightGNEQ applies the NEQ predicate on the "weight_g" field.
func WeightGNEQ(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldWeightG, v))
}

// WeightGIn applies the In predicate on the "weight_g" field.
func WeightGIn(vs ...int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldWeightG, vs...))
}

// WeightGNotIn applies the NotIn predicate on the "weight_g" field.
func WeightGNotIn(vs ...int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldWeightG, vs...))
}

// WeightGGT applies the GT predicate on the "weight_g" field.
func WeightGGT(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldWeightG, v))
}

// WeightGGTE applies the GTE predicate on the "weight_g" field.
func WeightGGTE(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldWeightG, v))
}

// WeightGLT applies the LT predicate on the "weight_g" field.
func WeightGLT(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldWeightG, v))
}

// WeightGLTE applies the LTE predicate on the "weight_g" field.
func WeightGLTE(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldWeightG, v))
}

// WeightGIsNil applies the IsNil predicate on the "weight_g" field.
func WeightGIsNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIsNull(FieldWeightG))
}

// WeightGNotNil applies the NotNil predicate on the "weight_g" field.
func WeightGNotNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotNull(FieldWeightG))
}

// DimensionLengthEQ applies the EQ predicate on the "dimension_length" field.
func DimensionLengthEQ(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldDimensionLength, v))
}

// DimensionLengthNEQ applies the NEQ predicate on the "dimension_length" field.
func DimensionLengthNEQ(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldDimensionLength, v))
}

// DimensionLengthIn applies the In predicate on the "dimension_length" field.
func DimensionLengthIn(vs ...int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldDimensionLength, vs...))
}

// DimensionLengthNotIn applies the NotIn predicate on the "dimension_length" field.
func DimensionLengthNotIn(vs ...int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldDimensionLength, vs...))
}

// DimensionLengthGT applies the GT predicate on the "dimension_length" field.
func DimensionLengthGT(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldDimensionLength, v))
}

// DimensionLengthGTE applies the GTE predicate on the "dimension_length" field.
func DimensionLengthGTE(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldDimensionLength, v))
}

// DimensionLengthLT applies the LT predicate on the "dimension_length" field.
func DimensionLengthLT(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldDimensionLength, v))
}

// DimensionLengthLTE applies the LTE predicate on the "dimension_length" field.
func DimensionLengthLTE(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldDimensionLength, v))
}

// DimensionLengthIsNil applies the IsNil predicate on the "dimension_length" field.
func DimensionLengthIsNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIsNull(FieldDimensionLength))
}

// DimensionLengthNotNil applies the NotNil predicate on the "dimension_length" field.
func DimensionLengthNotNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotNull(FieldDimensionLength))
}

// DimensionWidthEQ applies the EQ predicate on the "dimension_width" field.
func DimensionWidthEQ(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldDimensionWidth, v))
}

// DimensionWidthNEQ applies the NEQ predicate on the "dimension_width" field.
func DimensionWidthNEQ(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldDimensionWidth, v))
}

// DimensionWidthIn applies the In predicate on the "dimension_width" field.
func DimensionWidthIn(vs ...int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldDimensionWidth, vs...))
}

// DimensionWidthNotIn applies the NotIn predicate on the "dimension_width" field.
func DimensionWidthNotIn(vs ...int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldDimensionWidth, vs...))
}

// DimensionWidthGT applies the GT predicate on the "dimension_width" field.
func DimensionWidthGT(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldDimensionWidth, v))
}

// DimensionWidthGTE applies the GTE predicate on the "dimension_width" field.
func DimensionWidthGTE(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldDimensionWidth, v))
}

// DimensionWidthLT applies the LT predicate on the "dimension_width" field.
func DimensionWidthLT(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldDimensionWidth, v))
}

// DimensionWidthLTE applies the LTE predicate on the "dimension_width" field.
func DimensionWidthLTE(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldDimensionWidth, v))
}

// DimensionWidthIsNil applies the IsNil predicate on the "dimension_width" field.
func DimensionWidthIsNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIsNull(FieldDimensionWidth))
}

// DimensionWidthNotNil applies the NotNil predicate on the "dimension_width" field.
func DimensionWidthNotNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotNull(FieldDimensionWidth))
}

// DimensionHeightEQ applies the EQ predicate on the "dimension_height" field.
func DimensionHeightEQ(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldDimensionHeight, v))
}

// DimensionHeightNEQ applies the NEQ predicate on the "dimension_height" field.
func DimensionHeightNEQ(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldDimensionHeight, v))
}

// DimensionHeightIn applies the In predicate on the "dimension_height" field.
func DimensionHeightIn(vs ...int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldDimensionHeight, vs...))
}

// DimensionHeightNotIn applies the NotIn predicate on the "dimension_height" field.
func DimensionHeightNotIn(vs ...int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldDimensionHeight, vs...))
}

// DimensionHeightGT applies the GT predicate on the "dimension_height" field.
func DimensionHeightGT(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldDimensionHeight, v))
}

// DimensionHeightGTE applies the GTE predicate on the "dimension_height" field.
func DimensionHeightGTE(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldDimensionHeight, v))
}

// DimensionHeightLT applies the LT predicate on the "dimension_height" field.
func DimensionHeightLT(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldDimensionHeight, v))
}

// DimensionHeightLTE applies the LTE predicate on the "dimension_height" field.
func DimensionHeightLTE(v int) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldDimensionHeight, v))
}

// DimensionHeightIsNil applies the IsNil predicate on the "dimension_height" field.
func DimensionHeightIsNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIsNull(FieldDimensionHeight))
}

// DimensionHeightNotNil applies the NotNil predicate on the "dimension_height" field.
func DimensionHeightNotNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotNull(FieldDimensionHeight))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProductVariant {
	return predicate.ProductVariant(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderLines applies the HasEdge predicate on the "order_lines" edge.
func HasOrderLines() predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrderLinesTable, OrderLinesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderLinesWith applies the HasEdge predicate on the "order_lines" edge with a given conditions (other predicates).
func HasOrderLinesWith(preds ...predicate.OrderLine) predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := newOrderLinesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductImage applies the HasEdge predicate on the "product_image" edge.
func HasProductImage() predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProductImageTable, ProductImagePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductImageWith applies the HasEdge predicate on the "product_image" edge with a given conditions (other predicates).
func HasProductImageWith(preds ...predicate.ProductImage) predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := newProductImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInventoryItem applies the HasEdge predicate on the "inventory_item" edge.
func HasInventoryItem() predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, InventoryItemTable, InventoryItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryItemWith applies the HasEdge predicate on the "inventory_item" edge with a given conditions (other predicates).
func HasInventoryItemWith(preds ...predicate.InventoryItem) predicate.ProductVariant {
	return predicate.ProductVariant(func(s *sql.Selector) {
		step := newInventoryItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductVariant) predicate.ProductVariant {
	return predicate.ProductVariant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductVariant) predicate.ProductVariant {
	return predicate.ProductVariant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductVariant) predicate.ProductVariant {
	return predicate.ProductVariant(sql.NotPredicates(p))
}
