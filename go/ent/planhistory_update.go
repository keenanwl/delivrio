// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanHistoryUpdate is the builder for updating PlanHistory entities.
type PlanHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *PlanHistoryMutation
}

// Where appends a list predicates to the PlanHistoryUpdate builder.
func (phu *PlanHistoryUpdate) Where(ps ...predicate.PlanHistory) *PlanHistoryUpdate {
	phu.mutation.Where(ps...)
	return phu
}

// SetTenantID sets the "tenant_id" field.
func (phu *PlanHistoryUpdate) SetTenantID(pu pulid.ID) *PlanHistoryUpdate {
	phu.mutation.SetTenantID(pu)
	return phu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (phu *PlanHistoryUpdate) SetNillableTenantID(pu *pulid.ID) *PlanHistoryUpdate {
	if pu != nil {
		phu.SetTenantID(*pu)
	}
	return phu
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (phu *PlanHistoryUpdate) SetChangeHistoryID(id pulid.ID) *PlanHistoryUpdate {
	phu.mutation.SetChangeHistoryID(id)
	return phu
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (phu *PlanHistoryUpdate) SetChangeHistory(c *ChangeHistory) *PlanHistoryUpdate {
	return phu.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (phu *PlanHistoryUpdate) SetTenant(t *Tenant) *PlanHistoryUpdate {
	return phu.SetTenantID(t.ID)
}

// SetChangedByID sets the "changed_by" edge to the User entity by ID.
func (phu *PlanHistoryUpdate) SetChangedByID(id pulid.ID) *PlanHistoryUpdate {
	phu.mutation.SetChangedByID(id)
	return phu
}

// SetChangedBy sets the "changed_by" edge to the User entity.
func (phu *PlanHistoryUpdate) SetChangedBy(u *User) *PlanHistoryUpdate {
	return phu.SetChangedByID(u.ID)
}

// SetChangedFromID sets the "changed_from" edge to the Plan entity by ID.
func (phu *PlanHistoryUpdate) SetChangedFromID(id pulid.ID) *PlanHistoryUpdate {
	phu.mutation.SetChangedFromID(id)
	return phu
}

// SetChangedFrom sets the "changed_from" edge to the Plan entity.
func (phu *PlanHistoryUpdate) SetChangedFrom(p *Plan) *PlanHistoryUpdate {
	return phu.SetChangedFromID(p.ID)
}

// Mutation returns the PlanHistoryMutation object of the builder.
func (phu *PlanHistoryUpdate) Mutation() *PlanHistoryMutation {
	return phu.mutation
}

// ClearChangeHistory clears the "change_history" edge to the ChangeHistory entity.
func (phu *PlanHistoryUpdate) ClearChangeHistory() *PlanHistoryUpdate {
	phu.mutation.ClearChangeHistory()
	return phu
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (phu *PlanHistoryUpdate) ClearTenant() *PlanHistoryUpdate {
	phu.mutation.ClearTenant()
	return phu
}

// ClearChangedBy clears the "changed_by" edge to the User entity.
func (phu *PlanHistoryUpdate) ClearChangedBy() *PlanHistoryUpdate {
	phu.mutation.ClearChangedBy()
	return phu
}

// ClearChangedFrom clears the "changed_from" edge to the Plan entity.
func (phu *PlanHistoryUpdate) ClearChangedFrom() *PlanHistoryUpdate {
	phu.mutation.ClearChangedFrom()
	return phu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phu *PlanHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, phu.sqlSave, phu.mutation, phu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phu *PlanHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := phu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phu *PlanHistoryUpdate) Exec(ctx context.Context) error {
	_, err := phu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phu *PlanHistoryUpdate) ExecX(ctx context.Context) {
	if err := phu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phu *PlanHistoryUpdate) check() error {
	if phu.mutation.ChangeHistoryCleared() && len(phu.mutation.ChangeHistoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlanHistory.change_history"`)
	}
	if phu.mutation.TenantCleared() && len(phu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlanHistory.tenant"`)
	}
	if phu.mutation.ChangedByCleared() && len(phu.mutation.ChangedByIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlanHistory.changed_by"`)
	}
	if phu.mutation.ChangedFromCleared() && len(phu.mutation.ChangedFromIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlanHistory.changed_from"`)
	}
	return nil
}

func (phu *PlanHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := phu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(planhistory.Table, planhistory.Columns, sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString))
	if ps := phu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phu.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangeHistoryTable,
			Columns: []string{planhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangeHistoryTable,
			Columns: []string{planhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planhistory.TenantTable,
			Columns: []string{planhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planhistory.TenantTable,
			Columns: []string{planhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ChangedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedByTable,
			Columns: []string{planhistory.ChangedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ChangedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedByTable,
			Columns: []string{planhistory.ChangedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ChangedFromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedFromTable,
			Columns: []string{planhistory.ChangedFromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ChangedFromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedFromTable,
			Columns: []string{planhistory.ChangedFromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phu.mutation.done = true
	return n, nil
}

// PlanHistoryUpdateOne is the builder for updating a single PlanHistory entity.
type PlanHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanHistoryMutation
}

// SetTenantID sets the "tenant_id" field.
func (phuo *PlanHistoryUpdateOne) SetTenantID(pu pulid.ID) *PlanHistoryUpdateOne {
	phuo.mutation.SetTenantID(pu)
	return phuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (phuo *PlanHistoryUpdateOne) SetNillableTenantID(pu *pulid.ID) *PlanHistoryUpdateOne {
	if pu != nil {
		phuo.SetTenantID(*pu)
	}
	return phuo
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (phuo *PlanHistoryUpdateOne) SetChangeHistoryID(id pulid.ID) *PlanHistoryUpdateOne {
	phuo.mutation.SetChangeHistoryID(id)
	return phuo
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (phuo *PlanHistoryUpdateOne) SetChangeHistory(c *ChangeHistory) *PlanHistoryUpdateOne {
	return phuo.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (phuo *PlanHistoryUpdateOne) SetTenant(t *Tenant) *PlanHistoryUpdateOne {
	return phuo.SetTenantID(t.ID)
}

// SetChangedByID sets the "changed_by" edge to the User entity by ID.
func (phuo *PlanHistoryUpdateOne) SetChangedByID(id pulid.ID) *PlanHistoryUpdateOne {
	phuo.mutation.SetChangedByID(id)
	return phuo
}

// SetChangedBy sets the "changed_by" edge to the User entity.
func (phuo *PlanHistoryUpdateOne) SetChangedBy(u *User) *PlanHistoryUpdateOne {
	return phuo.SetChangedByID(u.ID)
}

// SetChangedFromID sets the "changed_from" edge to the Plan entity by ID.
func (phuo *PlanHistoryUpdateOne) SetChangedFromID(id pulid.ID) *PlanHistoryUpdateOne {
	phuo.mutation.SetChangedFromID(id)
	return phuo
}

// SetChangedFrom sets the "changed_from" edge to the Plan entity.
func (phuo *PlanHistoryUpdateOne) SetChangedFrom(p *Plan) *PlanHistoryUpdateOne {
	return phuo.SetChangedFromID(p.ID)
}

// Mutation returns the PlanHistoryMutation object of the builder.
func (phuo *PlanHistoryUpdateOne) Mutation() *PlanHistoryMutation {
	return phuo.mutation
}

// ClearChangeHistory clears the "change_history" edge to the ChangeHistory entity.
func (phuo *PlanHistoryUpdateOne) ClearChangeHistory() *PlanHistoryUpdateOne {
	phuo.mutation.ClearChangeHistory()
	return phuo
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (phuo *PlanHistoryUpdateOne) ClearTenant() *PlanHistoryUpdateOne {
	phuo.mutation.ClearTenant()
	return phuo
}

// ClearChangedBy clears the "changed_by" edge to the User entity.
func (phuo *PlanHistoryUpdateOne) ClearChangedBy() *PlanHistoryUpdateOne {
	phuo.mutation.ClearChangedBy()
	return phuo
}

// ClearChangedFrom clears the "changed_from" edge to the Plan entity.
func (phuo *PlanHistoryUpdateOne) ClearChangedFrom() *PlanHistoryUpdateOne {
	phuo.mutation.ClearChangedFrom()
	return phuo
}

// Where appends a list predicates to the PlanHistoryUpdate builder.
func (phuo *PlanHistoryUpdateOne) Where(ps ...predicate.PlanHistory) *PlanHistoryUpdateOne {
	phuo.mutation.Where(ps...)
	return phuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phuo *PlanHistoryUpdateOne) Select(field string, fields ...string) *PlanHistoryUpdateOne {
	phuo.fields = append([]string{field}, fields...)
	return phuo
}

// Save executes the query and returns the updated PlanHistory entity.
func (phuo *PlanHistoryUpdateOne) Save(ctx context.Context) (*PlanHistory, error) {
	return withHooks(ctx, phuo.sqlSave, phuo.mutation, phuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phuo *PlanHistoryUpdateOne) SaveX(ctx context.Context) *PlanHistory {
	node, err := phuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phuo *PlanHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := phuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phuo *PlanHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := phuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phuo *PlanHistoryUpdateOne) check() error {
	if phuo.mutation.ChangeHistoryCleared() && len(phuo.mutation.ChangeHistoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlanHistory.change_history"`)
	}
	if phuo.mutation.TenantCleared() && len(phuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlanHistory.tenant"`)
	}
	if phuo.mutation.ChangedByCleared() && len(phuo.mutation.ChangedByIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlanHistory.changed_by"`)
	}
	if phuo.mutation.ChangedFromCleared() && len(phuo.mutation.ChangedFromIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlanHistory.changed_from"`)
	}
	return nil
}

func (phuo *PlanHistoryUpdateOne) sqlSave(ctx context.Context) (_node *PlanHistory, err error) {
	if err := phuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(planhistory.Table, planhistory.Columns, sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString))
	id, ok := phuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlanHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, planhistory.FieldID)
		for _, f := range fields {
			if !planhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != planhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phuo.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangeHistoryTable,
			Columns: []string{planhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangeHistoryTable,
			Columns: []string{planhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planhistory.TenantTable,
			Columns: []string{planhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planhistory.TenantTable,
			Columns: []string{planhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ChangedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedByTable,
			Columns: []string{planhistory.ChangedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ChangedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedByTable,
			Columns: []string{planhistory.ChangedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ChangedFromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedFromTable,
			Columns: []string{planhistory.ChangedFromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ChangedFromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedFromTable,
			Columns: []string{planhistory.ChangedFromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlanHistory{config: phuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phuo.mutation.done = true
	return _node, nil
}
