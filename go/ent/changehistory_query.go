// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChangeHistoryQuery is the builder for querying ChangeHistory entities.
type ChangeHistoryQuery struct {
	config
	ctx                         *QueryContext
	order                       []changehistory.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.ChangeHistory
	withTenant                  *TenantQuery
	withPlanHistory             *PlanHistoryQuery
	withUser                    *UserQuery
	withOrderHistory            *OrderHistoryQuery
	withShipmentHistory         *ShipmentHistoryQuery
	withReturnColliHistory      *ReturnColliHistoryQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*ChangeHistory) error
	withNamedPlanHistory        map[string]*PlanHistoryQuery
	withNamedOrderHistory       map[string]*OrderHistoryQuery
	withNamedShipmentHistory    map[string]*ShipmentHistoryQuery
	withNamedReturnColliHistory map[string]*ReturnColliHistoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChangeHistoryQuery builder.
func (chq *ChangeHistoryQuery) Where(ps ...predicate.ChangeHistory) *ChangeHistoryQuery {
	chq.predicates = append(chq.predicates, ps...)
	return chq
}

// Limit the number of records to be returned by this query.
func (chq *ChangeHistoryQuery) Limit(limit int) *ChangeHistoryQuery {
	chq.ctx.Limit = &limit
	return chq
}

// Offset to start from.
func (chq *ChangeHistoryQuery) Offset(offset int) *ChangeHistoryQuery {
	chq.ctx.Offset = &offset
	return chq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (chq *ChangeHistoryQuery) Unique(unique bool) *ChangeHistoryQuery {
	chq.ctx.Unique = &unique
	return chq
}

// Order specifies how the records should be ordered.
func (chq *ChangeHistoryQuery) Order(o ...changehistory.OrderOption) *ChangeHistoryQuery {
	chq.order = append(chq.order, o...)
	return chq
}

// QueryTenant chains the current query on the "tenant" edge.
func (chq *ChangeHistoryQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: chq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := chq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, changehistory.TenantTable, changehistory.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(chq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanHistory chains the current query on the "plan_history" edge.
func (chq *ChangeHistoryQuery) QueryPlanHistory() *PlanHistoryQuery {
	query := (&PlanHistoryClient{config: chq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := chq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, selector),
			sqlgraph.To(planhistory.Table, planhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changehistory.PlanHistoryTable, changehistory.PlanHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(chq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (chq *ChangeHistoryQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: chq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := chq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, changehistory.UserTable, changehistory.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(chq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderHistory chains the current query on the "order_history" edge.
func (chq *ChangeHistoryQuery) QueryOrderHistory() *OrderHistoryQuery {
	query := (&OrderHistoryClient{config: chq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := chq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, selector),
			sqlgraph.To(orderhistory.Table, orderhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changehistory.OrderHistoryTable, changehistory.OrderHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(chq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentHistory chains the current query on the "shipment_history" edge.
func (chq *ChangeHistoryQuery) QueryShipmentHistory() *ShipmentHistoryQuery {
	query := (&ShipmentHistoryClient{config: chq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := chq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, selector),
			sqlgraph.To(shipmenthistory.Table, shipmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changehistory.ShipmentHistoryTable, changehistory.ShipmentHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(chq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnColliHistory chains the current query on the "return_colli_history" edge.
func (chq *ChangeHistoryQuery) QueryReturnColliHistory() *ReturnColliHistoryQuery {
	query := (&ReturnColliHistoryClient{config: chq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := chq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, selector),
			sqlgraph.To(returncollihistory.Table, returncollihistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changehistory.ReturnColliHistoryTable, changehistory.ReturnColliHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(chq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChangeHistory entity from the query.
// Returns a *NotFoundError when no ChangeHistory was found.
func (chq *ChangeHistoryQuery) First(ctx context.Context) (*ChangeHistory, error) {
	nodes, err := chq.Limit(1).All(setContextOp(ctx, chq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{changehistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (chq *ChangeHistoryQuery) FirstX(ctx context.Context) *ChangeHistory {
	node, err := chq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChangeHistory ID from the query.
// Returns a *NotFoundError when no ChangeHistory ID was found.
func (chq *ChangeHistoryQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = chq.Limit(1).IDs(setContextOp(ctx, chq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{changehistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (chq *ChangeHistoryQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := chq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChangeHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChangeHistory entity is found.
// Returns a *NotFoundError when no ChangeHistory entities are found.
func (chq *ChangeHistoryQuery) Only(ctx context.Context) (*ChangeHistory, error) {
	nodes, err := chq.Limit(2).All(setContextOp(ctx, chq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{changehistory.Label}
	default:
		return nil, &NotSingularError{changehistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (chq *ChangeHistoryQuery) OnlyX(ctx context.Context) *ChangeHistory {
	node, err := chq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChangeHistory ID in the query.
// Returns a *NotSingularError when more than one ChangeHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (chq *ChangeHistoryQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = chq.Limit(2).IDs(setContextOp(ctx, chq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{changehistory.Label}
	default:
		err = &NotSingularError{changehistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (chq *ChangeHistoryQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := chq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChangeHistories.
func (chq *ChangeHistoryQuery) All(ctx context.Context) ([]*ChangeHistory, error) {
	ctx = setContextOp(ctx, chq.ctx, ent.OpQueryAll)
	if err := chq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ChangeHistory, *ChangeHistoryQuery]()
	return withInterceptors[[]*ChangeHistory](ctx, chq, qr, chq.inters)
}

// AllX is like All, but panics if an error occurs.
func (chq *ChangeHistoryQuery) AllX(ctx context.Context) []*ChangeHistory {
	nodes, err := chq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChangeHistory IDs.
func (chq *ChangeHistoryQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if chq.ctx.Unique == nil && chq.path != nil {
		chq.Unique(true)
	}
	ctx = setContextOp(ctx, chq.ctx, ent.OpQueryIDs)
	if err = chq.Select(changehistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (chq *ChangeHistoryQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := chq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (chq *ChangeHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, chq.ctx, ent.OpQueryCount)
	if err := chq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, chq, querierCount[*ChangeHistoryQuery](), chq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (chq *ChangeHistoryQuery) CountX(ctx context.Context) int {
	count, err := chq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (chq *ChangeHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, chq.ctx, ent.OpQueryExist)
	switch _, err := chq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (chq *ChangeHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := chq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChangeHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (chq *ChangeHistoryQuery) Clone() *ChangeHistoryQuery {
	if chq == nil {
		return nil
	}
	return &ChangeHistoryQuery{
		config:                 chq.config,
		ctx:                    chq.ctx.Clone(),
		order:                  append([]changehistory.OrderOption{}, chq.order...),
		inters:                 append([]Interceptor{}, chq.inters...),
		predicates:             append([]predicate.ChangeHistory{}, chq.predicates...),
		withTenant:             chq.withTenant.Clone(),
		withPlanHistory:        chq.withPlanHistory.Clone(),
		withUser:               chq.withUser.Clone(),
		withOrderHistory:       chq.withOrderHistory.Clone(),
		withShipmentHistory:    chq.withShipmentHistory.Clone(),
		withReturnColliHistory: chq.withReturnColliHistory.Clone(),
		// clone intermediate query.
		sql:  chq.sql.Clone(),
		path: chq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithTenant(opts ...func(*TenantQuery)) *ChangeHistoryQuery {
	query := (&TenantClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	chq.withTenant = query
	return chq
}

// WithPlanHistory tells the query-builder to eager-load the nodes that are connected to
// the "plan_history" edge. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithPlanHistory(opts ...func(*PlanHistoryQuery)) *ChangeHistoryQuery {
	query := (&PlanHistoryClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	chq.withPlanHistory = query
	return chq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithUser(opts ...func(*UserQuery)) *ChangeHistoryQuery {
	query := (&UserClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	chq.withUser = query
	return chq
}

// WithOrderHistory tells the query-builder to eager-load the nodes that are connected to
// the "order_history" edge. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithOrderHistory(opts ...func(*OrderHistoryQuery)) *ChangeHistoryQuery {
	query := (&OrderHistoryClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	chq.withOrderHistory = query
	return chq
}

// WithShipmentHistory tells the query-builder to eager-load the nodes that are connected to
// the "shipment_history" edge. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithShipmentHistory(opts ...func(*ShipmentHistoryQuery)) *ChangeHistoryQuery {
	query := (&ShipmentHistoryClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	chq.withShipmentHistory = query
	return chq
}

// WithReturnColliHistory tells the query-builder to eager-load the nodes that are connected to
// the "return_colli_history" edge. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithReturnColliHistory(opts ...func(*ReturnColliHistoryQuery)) *ChangeHistoryQuery {
	query := (&ReturnColliHistoryClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	chq.withReturnColliHistory = query
	return chq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChangeHistory.Query().
//		GroupBy(changehistory.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (chq *ChangeHistoryQuery) GroupBy(field string, fields ...string) *ChangeHistoryGroupBy {
	chq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ChangeHistoryGroupBy{build: chq}
	grbuild.flds = &chq.ctx.Fields
	grbuild.label = changehistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ChangeHistory.Query().
//		Select(changehistory.FieldTenantID).
//		Scan(ctx, &v)
func (chq *ChangeHistoryQuery) Select(fields ...string) *ChangeHistorySelect {
	chq.ctx.Fields = append(chq.ctx.Fields, fields...)
	sbuild := &ChangeHistorySelect{ChangeHistoryQuery: chq}
	sbuild.label = changehistory.Label
	sbuild.flds, sbuild.scan = &chq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ChangeHistorySelect configured with the given aggregations.
func (chq *ChangeHistoryQuery) Aggregate(fns ...AggregateFunc) *ChangeHistorySelect {
	return chq.Select().Aggregate(fns...)
}

func (chq *ChangeHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range chq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, chq); err != nil {
				return err
			}
		}
	}
	for _, f := range chq.ctx.Fields {
		if !changehistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if chq.path != nil {
		prev, err := chq.path(ctx)
		if err != nil {
			return err
		}
		chq.sql = prev
	}
	if changehistory.Policy == nil {
		return errors.New("ent: uninitialized changehistory.Policy (forgotten import ent/runtime?)")
	}
	if err := changehistory.Policy.EvalQuery(ctx, chq); err != nil {
		return err
	}
	return nil
}

func (chq *ChangeHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChangeHistory, error) {
	var (
		nodes       = []*ChangeHistory{}
		withFKs     = chq.withFKs
		_spec       = chq.querySpec()
		loadedTypes = [6]bool{
			chq.withTenant != nil,
			chq.withPlanHistory != nil,
			chq.withUser != nil,
			chq.withOrderHistory != nil,
			chq.withShipmentHistory != nil,
			chq.withReturnColliHistory != nil,
		}
	)
	if chq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, changehistory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ChangeHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ChangeHistory{config: chq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(chq.modifiers) > 0 {
		_spec.Modifiers = chq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, chq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := chq.withTenant; query != nil {
		if err := chq.loadTenant(ctx, query, nodes, nil,
			func(n *ChangeHistory, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := chq.withPlanHistory; query != nil {
		if err := chq.loadPlanHistory(ctx, query, nodes,
			func(n *ChangeHistory) { n.Edges.PlanHistory = []*PlanHistory{} },
			func(n *ChangeHistory, e *PlanHistory) { n.Edges.PlanHistory = append(n.Edges.PlanHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := chq.withUser; query != nil {
		if err := chq.loadUser(ctx, query, nodes, nil,
			func(n *ChangeHistory, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := chq.withOrderHistory; query != nil {
		if err := chq.loadOrderHistory(ctx, query, nodes,
			func(n *ChangeHistory) { n.Edges.OrderHistory = []*OrderHistory{} },
			func(n *ChangeHistory, e *OrderHistory) { n.Edges.OrderHistory = append(n.Edges.OrderHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := chq.withShipmentHistory; query != nil {
		if err := chq.loadShipmentHistory(ctx, query, nodes,
			func(n *ChangeHistory) { n.Edges.ShipmentHistory = []*ShipmentHistory{} },
			func(n *ChangeHistory, e *ShipmentHistory) {
				n.Edges.ShipmentHistory = append(n.Edges.ShipmentHistory, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := chq.withReturnColliHistory; query != nil {
		if err := chq.loadReturnColliHistory(ctx, query, nodes,
			func(n *ChangeHistory) { n.Edges.ReturnColliHistory = []*ReturnColliHistory{} },
			func(n *ChangeHistory, e *ReturnColliHistory) {
				n.Edges.ReturnColliHistory = append(n.Edges.ReturnColliHistory, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range chq.withNamedPlanHistory {
		if err := chq.loadPlanHistory(ctx, query, nodes,
			func(n *ChangeHistory) { n.appendNamedPlanHistory(name) },
			func(n *ChangeHistory, e *PlanHistory) { n.appendNamedPlanHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range chq.withNamedOrderHistory {
		if err := chq.loadOrderHistory(ctx, query, nodes,
			func(n *ChangeHistory) { n.appendNamedOrderHistory(name) },
			func(n *ChangeHistory, e *OrderHistory) { n.appendNamedOrderHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range chq.withNamedShipmentHistory {
		if err := chq.loadShipmentHistory(ctx, query, nodes,
			func(n *ChangeHistory) { n.appendNamedShipmentHistory(name) },
			func(n *ChangeHistory, e *ShipmentHistory) { n.appendNamedShipmentHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range chq.withNamedReturnColliHistory {
		if err := chq.loadReturnColliHistory(ctx, query, nodes,
			func(n *ChangeHistory) { n.appendNamedReturnColliHistory(name) },
			func(n *ChangeHistory, e *ReturnColliHistory) { n.appendNamedReturnColliHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range chq.loadTotal {
		if err := chq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (chq *ChangeHistoryQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ChangeHistory, init func(*ChangeHistory), assign func(*ChangeHistory, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ChangeHistory)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (chq *ChangeHistoryQuery) loadPlanHistory(ctx context.Context, query *PlanHistoryQuery, nodes []*ChangeHistory, init func(*ChangeHistory), assign func(*ChangeHistory, *PlanHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ChangeHistory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlanHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(changehistory.PlanHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.change_history_plan_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "change_history_plan_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "change_history_plan_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (chq *ChangeHistoryQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ChangeHistory, init func(*ChangeHistory), assign func(*ChangeHistory, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ChangeHistory)
	for i := range nodes {
		if nodes[i].change_history_user == nil {
			continue
		}
		fk := *nodes[i].change_history_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "change_history_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (chq *ChangeHistoryQuery) loadOrderHistory(ctx context.Context, query *OrderHistoryQuery, nodes []*ChangeHistory, init func(*ChangeHistory), assign func(*ChangeHistory, *OrderHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ChangeHistory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.OrderHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(changehistory.OrderHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.change_history_order_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "change_history_order_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "change_history_order_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (chq *ChangeHistoryQuery) loadShipmentHistory(ctx context.Context, query *ShipmentHistoryQuery, nodes []*ChangeHistory, init func(*ChangeHistory), assign func(*ChangeHistory, *ShipmentHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ChangeHistory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ShipmentHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(changehistory.ShipmentHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.change_history_shipment_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "change_history_shipment_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "change_history_shipment_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (chq *ChangeHistoryQuery) loadReturnColliHistory(ctx context.Context, query *ReturnColliHistoryQuery, nodes []*ChangeHistory, init func(*ChangeHistory), assign func(*ChangeHistory, *ReturnColliHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ChangeHistory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnColliHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(changehistory.ReturnColliHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.change_history_return_colli_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "change_history_return_colli_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "change_history_return_colli_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (chq *ChangeHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := chq.querySpec()
	if len(chq.modifiers) > 0 {
		_spec.Modifiers = chq.modifiers
	}
	_spec.Node.Columns = chq.ctx.Fields
	if len(chq.ctx.Fields) > 0 {
		_spec.Unique = chq.ctx.Unique != nil && *chq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, chq.driver, _spec)
}

func (chq *ChangeHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(changehistory.Table, changehistory.Columns, sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString))
	_spec.From = chq.sql
	if unique := chq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if chq.path != nil {
		_spec.Unique = true
	}
	if fields := chq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, changehistory.FieldID)
		for i := range fields {
			if fields[i] != changehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if chq.withTenant != nil {
			_spec.Node.AddColumnOnce(changehistory.FieldTenantID)
		}
	}
	if ps := chq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := chq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := chq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := chq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (chq *ChangeHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(chq.driver.Dialect())
	t1 := builder.Table(changehistory.Table)
	columns := chq.ctx.Fields
	if len(columns) == 0 {
		columns = changehistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if chq.sql != nil {
		selector = chq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if chq.ctx.Unique != nil && *chq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range chq.predicates {
		p(selector)
	}
	for _, p := range chq.order {
		p(selector)
	}
	if offset := chq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := chq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPlanHistory tells the query-builder to eager-load the nodes that are connected to the "plan_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithNamedPlanHistory(name string, opts ...func(*PlanHistoryQuery)) *ChangeHistoryQuery {
	query := (&PlanHistoryClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if chq.withNamedPlanHistory == nil {
		chq.withNamedPlanHistory = make(map[string]*PlanHistoryQuery)
	}
	chq.withNamedPlanHistory[name] = query
	return chq
}

// WithNamedOrderHistory tells the query-builder to eager-load the nodes that are connected to the "order_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithNamedOrderHistory(name string, opts ...func(*OrderHistoryQuery)) *ChangeHistoryQuery {
	query := (&OrderHistoryClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if chq.withNamedOrderHistory == nil {
		chq.withNamedOrderHistory = make(map[string]*OrderHistoryQuery)
	}
	chq.withNamedOrderHistory[name] = query
	return chq
}

// WithNamedShipmentHistory tells the query-builder to eager-load the nodes that are connected to the "shipment_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithNamedShipmentHistory(name string, opts ...func(*ShipmentHistoryQuery)) *ChangeHistoryQuery {
	query := (&ShipmentHistoryClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if chq.withNamedShipmentHistory == nil {
		chq.withNamedShipmentHistory = make(map[string]*ShipmentHistoryQuery)
	}
	chq.withNamedShipmentHistory[name] = query
	return chq
}

// WithNamedReturnColliHistory tells the query-builder to eager-load the nodes that are connected to the "return_colli_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (chq *ChangeHistoryQuery) WithNamedReturnColliHistory(name string, opts ...func(*ReturnColliHistoryQuery)) *ChangeHistoryQuery {
	query := (&ReturnColliHistoryClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if chq.withNamedReturnColliHistory == nil {
		chq.withNamedReturnColliHistory = make(map[string]*ReturnColliHistoryQuery)
	}
	chq.withNamedReturnColliHistory[name] = query
	return chq
}

// ChangeHistoryGroupBy is the group-by builder for ChangeHistory entities.
type ChangeHistoryGroupBy struct {
	selector
	build *ChangeHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (chgb *ChangeHistoryGroupBy) Aggregate(fns ...AggregateFunc) *ChangeHistoryGroupBy {
	chgb.fns = append(chgb.fns, fns...)
	return chgb
}

// Scan applies the selector query and scans the result into the given value.
func (chgb *ChangeHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, chgb.build.ctx, ent.OpQueryGroupBy)
	if err := chgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChangeHistoryQuery, *ChangeHistoryGroupBy](ctx, chgb.build, chgb, chgb.build.inters, v)
}

func (chgb *ChangeHistoryGroupBy) sqlScan(ctx context.Context, root *ChangeHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(chgb.fns))
	for _, fn := range chgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*chgb.flds)+len(chgb.fns))
		for _, f := range *chgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*chgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := chgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ChangeHistorySelect is the builder for selecting fields of ChangeHistory entities.
type ChangeHistorySelect struct {
	*ChangeHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (chs *ChangeHistorySelect) Aggregate(fns ...AggregateFunc) *ChangeHistorySelect {
	chs.fns = append(chs.fns, fns...)
	return chs
}

// Scan applies the selector query and scans the result into the given value.
func (chs *ChangeHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, chs.ctx, ent.OpQuerySelect)
	if err := chs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ChangeHistoryQuery, *ChangeHistorySelect](ctx, chs.ChangeHistoryQuery, chs, chs.inters, v)
}

func (chs *ChangeHistorySelect) sqlScan(ctx context.Context, root *ChangeHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(chs.fns))
	for _, fn := range chs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*chs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := chs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
