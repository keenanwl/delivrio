// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PackagingUSPSProcessingCategory is the model entity for the PackagingUSPSProcessingCategory schema.
type PackagingUSPSProcessingCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ProcessingCategory holds the value of the "processing_category" field.
	ProcessingCategory packaginguspsprocessingcategory.ProcessingCategory `json:"processing_category,omitempty"`
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackagingUSPSProcessingCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packaginguspsprocessingcategory.FieldID:
			values[i] = new(pulid.ID)
		case packaginguspsprocessingcategory.FieldName, packaginguspsprocessingcategory.FieldProcessingCategory:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackagingUSPSProcessingCategory fields.
func (pupc *PackagingUSPSProcessingCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packaginguspsprocessingcategory.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pupc.ID = *value
			}
		case packaginguspsprocessingcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pupc.Name = value.String
			}
		case packaginguspsprocessingcategory.FieldProcessingCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field processing_category", values[i])
			} else if value.Valid {
				pupc.ProcessingCategory = packaginguspsprocessingcategory.ProcessingCategory(value.String)
			}
		default:
			pupc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PackagingUSPSProcessingCategory.
// This includes values selected through modifiers, order, etc.
func (pupc *PackagingUSPSProcessingCategory) Value(name string) (ent.Value, error) {
	return pupc.selectValues.Get(name)
}

// Update returns a builder for updating this PackagingUSPSProcessingCategory.
// Note that you need to call PackagingUSPSProcessingCategory.Unwrap() before calling this method if this PackagingUSPSProcessingCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (pupc *PackagingUSPSProcessingCategory) Update() *PackagingUSPSProcessingCategoryUpdateOne {
	return NewPackagingUSPSProcessingCategoryClient(pupc.config).UpdateOne(pupc)
}

// Unwrap unwraps the PackagingUSPSProcessingCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pupc *PackagingUSPSProcessingCategory) Unwrap() *PackagingUSPSProcessingCategory {
	_tx, ok := pupc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackagingUSPSProcessingCategory is not a transactional entity")
	}
	pupc.config.driver = _tx.drv
	return pupc
}

// String implements the fmt.Stringer.
func (pupc *PackagingUSPSProcessingCategory) String() string {
	var builder strings.Builder
	builder.WriteString("PackagingUSPSProcessingCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pupc.ID))
	builder.WriteString("name=")
	builder.WriteString(pupc.Name)
	builder.WriteString(", ")
	builder.WriteString("processing_category=")
	builder.WriteString(fmt.Sprintf("%v", pupc.ProcessingCategory))
	builder.WriteByte(')')
	return builder.String()
}

// PackagingUSPSProcessingCategories is a parsable slice of PackagingUSPSProcessingCategory.
type PackagingUSPSProcessingCategories []*PackagingUSPSProcessingCategory
