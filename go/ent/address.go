// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// UniquenessID holds the value of the "uniqueness_id" field.
	UniquenessID string `json:"uniqueness_id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Some applications have both mobile and generic
	PhoneNumber2 string `json:"phone_number_2,omitempty"`
	// Electronic customs
	VatNumber string `json:"vat_number,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// AddressOne holds the value of the "address_one" field.
	AddressOne string `json:"address_one,omitempty"`
	// AddressTwo holds the value of the "address_two" field.
	AddressTwo string `json:"address_two,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Zip holds the value of the "zip" field.
	Zip string `json:"zip,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges                   AddressEdges `json:"edges"`
	address_country         *pulid.ID
	consolidation_recipient *pulid.ID
	consolidation_sender    *pulid.ID
	selectValues            sql.SelectValues
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// RecipientColli holds the value of the recipient_colli edge.
	RecipientColli []*Colli `json:"recipient_colli,omitempty"`
	// RecipientConsolidation holds the value of the recipient_consolidation edge.
	RecipientConsolidation *Consolidation `json:"recipient_consolidation,omitempty"`
	// CompanyAddress holds the value of the company_address edge.
	CompanyAddress []*Tenant `json:"company_address,omitempty"`
	// Location holds the value of the location edge.
	Location []*Location `json:"location,omitempty"`
	// SenderColli holds the value of the sender_colli edge.
	SenderColli []*Colli `json:"sender_colli,omitempty"`
	// SenderConsolidation holds the value of the sender_consolidation edge.
	SenderConsolidation *Consolidation `json:"sender_consolidation,omitempty"`
	// ReturnSenderColli holds the value of the return_sender_colli edge.
	ReturnSenderColli []*ReturnColli `json:"return_sender_colli,omitempty"`
	// ReturnRecipientColli holds the value of the return_recipient_colli edge.
	ReturnRecipientColli []*ReturnColli `json:"return_recipient_colli,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
	// totalCount holds the count of the edges above.
	totalCount [10]map[string]int

	namedRecipientColli       map[string][]*Colli
	namedCompanyAddress       map[string][]*Tenant
	namedLocation             map[string][]*Location
	namedSenderColli          map[string][]*Colli
	namedReturnSenderColli    map[string][]*ReturnColli
	namedReturnRecipientColli map[string][]*ReturnColli
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RecipientColliOrErr returns the RecipientColli value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) RecipientColliOrErr() ([]*Colli, error) {
	if e.loadedTypes[1] {
		return e.RecipientColli, nil
	}
	return nil, &NotLoadedError{edge: "recipient_colli"}
}

// RecipientConsolidationOrErr returns the RecipientConsolidation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) RecipientConsolidationOrErr() (*Consolidation, error) {
	if e.RecipientConsolidation != nil {
		return e.RecipientConsolidation, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: consolidation.Label}
	}
	return nil, &NotLoadedError{edge: "recipient_consolidation"}
}

// CompanyAddressOrErr returns the CompanyAddress value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) CompanyAddressOrErr() ([]*Tenant, error) {
	if e.loadedTypes[3] {
		return e.CompanyAddress, nil
	}
	return nil, &NotLoadedError{edge: "company_address"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) LocationOrErr() ([]*Location, error) {
	if e.loadedTypes[4] {
		return e.Location, nil
	}
	return nil, &NotLoadedError{edge: "location"}
}

// SenderColliOrErr returns the SenderColli value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) SenderColliOrErr() ([]*Colli, error) {
	if e.loadedTypes[5] {
		return e.SenderColli, nil
	}
	return nil, &NotLoadedError{edge: "sender_colli"}
}

// SenderConsolidationOrErr returns the SenderConsolidation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) SenderConsolidationOrErr() (*Consolidation, error) {
	if e.SenderConsolidation != nil {
		return e.SenderConsolidation, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: consolidation.Label}
	}
	return nil, &NotLoadedError{edge: "sender_consolidation"}
}

// ReturnSenderColliOrErr returns the ReturnSenderColli value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) ReturnSenderColliOrErr() ([]*ReturnColli, error) {
	if e.loadedTypes[7] {
		return e.ReturnSenderColli, nil
	}
	return nil, &NotLoadedError{edge: "return_sender_colli"}
}

// ReturnRecipientColliOrErr returns the ReturnRecipientColli value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) ReturnRecipientColliOrErr() ([]*ReturnColli, error) {
	if e.loadedTypes[8] {
		return e.ReturnRecipientColli, nil
	}
	return nil, &NotLoadedError{edge: "return_recipient_colli"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) CountryOrErr() (*Country, error) {
	if e.Country != nil {
		return e.Country, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: country.Label}
	}
	return nil, &NotLoadedError{edge: "country"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldID, address.FieldTenantID:
			values[i] = new(pulid.ID)
		case address.FieldUniquenessID, address.FieldFirstName, address.FieldLastName, address.FieldEmail, address.FieldPhoneNumber, address.FieldPhoneNumber2, address.FieldVatNumber, address.FieldCompany, address.FieldAddressOne, address.FieldAddressTwo, address.FieldCity, address.FieldState, address.FieldZip:
			values[i] = new(sql.NullString)
		case address.ForeignKeys[0]: // address_country
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case address.ForeignKeys[1]: // consolidation_recipient
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case address.ForeignKeys[2]: // consolidation_sender
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (a *Address) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case address.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				a.TenantID = *value
			}
		case address.FieldUniquenessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uniqueness_id", values[i])
			} else if value.Valid {
				a.UniquenessID = value.String
			}
		case address.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				a.FirstName = value.String
			}
		case address.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				a.LastName = value.String
			}
		case address.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case address.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				a.PhoneNumber = value.String
			}
		case address.FieldPhoneNumber2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number_2", values[i])
			} else if value.Valid {
				a.PhoneNumber2 = value.String
			}
		case address.FieldVatNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vat_number", values[i])
			} else if value.Valid {
				a.VatNumber = value.String
			}
		case address.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				a.Company = value.String
			}
		case address.FieldAddressOne:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_one", values[i])
			} else if value.Valid {
				a.AddressOne = value.String
			}
		case address.FieldAddressTwo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_two", values[i])
			} else if value.Valid {
				a.AddressTwo = value.String
			}
		case address.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				a.City = value.String
			}
		case address.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				a.State = value.String
			}
		case address.FieldZip:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip", values[i])
			} else if value.Valid {
				a.Zip = value.String
			}
		case address.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field address_country", values[i])
			} else if value.Valid {
				a.address_country = new(pulid.ID)
				*a.address_country = *value.S.(*pulid.ID)
			}
		case address.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field consolidation_recipient", values[i])
			} else if value.Valid {
				a.consolidation_recipient = new(pulid.ID)
				*a.consolidation_recipient = *value.S.(*pulid.ID)
			}
		case address.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field consolidation_sender", values[i])
			} else if value.Valid {
				a.consolidation_sender = new(pulid.ID)
				*a.consolidation_sender = *value.S.(*pulid.ID)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Address.
// This includes values selected through modifiers, order, etc.
func (a *Address) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Address entity.
func (a *Address) QueryTenant() *TenantQuery {
	return NewAddressClient(a.config).QueryTenant(a)
}

// QueryRecipientColli queries the "recipient_colli" edge of the Address entity.
func (a *Address) QueryRecipientColli() *ColliQuery {
	return NewAddressClient(a.config).QueryRecipientColli(a)
}

// QueryRecipientConsolidation queries the "recipient_consolidation" edge of the Address entity.
func (a *Address) QueryRecipientConsolidation() *ConsolidationQuery {
	return NewAddressClient(a.config).QueryRecipientConsolidation(a)
}

// QueryCompanyAddress queries the "company_address" edge of the Address entity.
func (a *Address) QueryCompanyAddress() *TenantQuery {
	return NewAddressClient(a.config).QueryCompanyAddress(a)
}

// QueryLocation queries the "location" edge of the Address entity.
func (a *Address) QueryLocation() *LocationQuery {
	return NewAddressClient(a.config).QueryLocation(a)
}

// QuerySenderColli queries the "sender_colli" edge of the Address entity.
func (a *Address) QuerySenderColli() *ColliQuery {
	return NewAddressClient(a.config).QuerySenderColli(a)
}

// QuerySenderConsolidation queries the "sender_consolidation" edge of the Address entity.
func (a *Address) QuerySenderConsolidation() *ConsolidationQuery {
	return NewAddressClient(a.config).QuerySenderConsolidation(a)
}

// QueryReturnSenderColli queries the "return_sender_colli" edge of the Address entity.
func (a *Address) QueryReturnSenderColli() *ReturnColliQuery {
	return NewAddressClient(a.config).QueryReturnSenderColli(a)
}

// QueryReturnRecipientColli queries the "return_recipient_colli" edge of the Address entity.
func (a *Address) QueryReturnRecipientColli() *ReturnColliQuery {
	return NewAddressClient(a.config).QueryReturnRecipientColli(a)
}

// QueryCountry queries the "country" edge of the Address entity.
func (a *Address) QueryCountry() *CountryQuery {
	return NewAddressClient(a.config).QueryCountry(a)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Address) Update() *AddressUpdateOne {
	return NewAddressClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Address) Unwrap() *Address {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Address is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", a.TenantID))
	builder.WriteString(", ")
	builder.WriteString("uniqueness_id=")
	builder.WriteString(a.UniquenessID)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(a.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(a.LastName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(a.Email)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(a.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("phone_number_2=")
	builder.WriteString(a.PhoneNumber2)
	builder.WriteString(", ")
	builder.WriteString("vat_number=")
	builder.WriteString(a.VatNumber)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(a.Company)
	builder.WriteString(", ")
	builder.WriteString("address_one=")
	builder.WriteString(a.AddressOne)
	builder.WriteString(", ")
	builder.WriteString("address_two=")
	builder.WriteString(a.AddressTwo)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(a.City)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(a.State)
	builder.WriteString(", ")
	builder.WriteString("zip=")
	builder.WriteString(a.Zip)
	builder.WriteByte(')')
	return builder.String()
}

// NamedRecipientColli returns the RecipientColli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Address) NamedRecipientColli(name string) ([]*Colli, error) {
	if a.Edges.namedRecipientColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedRecipientColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Address) appendNamedRecipientColli(name string, edges ...*Colli) {
	if a.Edges.namedRecipientColli == nil {
		a.Edges.namedRecipientColli = make(map[string][]*Colli)
	}
	if len(edges) == 0 {
		a.Edges.namedRecipientColli[name] = []*Colli{}
	} else {
		a.Edges.namedRecipientColli[name] = append(a.Edges.namedRecipientColli[name], edges...)
	}
}

// NamedCompanyAddress returns the CompanyAddress named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Address) NamedCompanyAddress(name string) ([]*Tenant, error) {
	if a.Edges.namedCompanyAddress == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedCompanyAddress[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Address) appendNamedCompanyAddress(name string, edges ...*Tenant) {
	if a.Edges.namedCompanyAddress == nil {
		a.Edges.namedCompanyAddress = make(map[string][]*Tenant)
	}
	if len(edges) == 0 {
		a.Edges.namedCompanyAddress[name] = []*Tenant{}
	} else {
		a.Edges.namedCompanyAddress[name] = append(a.Edges.namedCompanyAddress[name], edges...)
	}
}

// NamedLocation returns the Location named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Address) NamedLocation(name string) ([]*Location, error) {
	if a.Edges.namedLocation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedLocation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Address) appendNamedLocation(name string, edges ...*Location) {
	if a.Edges.namedLocation == nil {
		a.Edges.namedLocation = make(map[string][]*Location)
	}
	if len(edges) == 0 {
		a.Edges.namedLocation[name] = []*Location{}
	} else {
		a.Edges.namedLocation[name] = append(a.Edges.namedLocation[name], edges...)
	}
}

// NamedSenderColli returns the SenderColli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Address) NamedSenderColli(name string) ([]*Colli, error) {
	if a.Edges.namedSenderColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedSenderColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Address) appendNamedSenderColli(name string, edges ...*Colli) {
	if a.Edges.namedSenderColli == nil {
		a.Edges.namedSenderColli = make(map[string][]*Colli)
	}
	if len(edges) == 0 {
		a.Edges.namedSenderColli[name] = []*Colli{}
	} else {
		a.Edges.namedSenderColli[name] = append(a.Edges.namedSenderColli[name], edges...)
	}
}

// NamedReturnSenderColli returns the ReturnSenderColli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Address) NamedReturnSenderColli(name string) ([]*ReturnColli, error) {
	if a.Edges.namedReturnSenderColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedReturnSenderColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Address) appendNamedReturnSenderColli(name string, edges ...*ReturnColli) {
	if a.Edges.namedReturnSenderColli == nil {
		a.Edges.namedReturnSenderColli = make(map[string][]*ReturnColli)
	}
	if len(edges) == 0 {
		a.Edges.namedReturnSenderColli[name] = []*ReturnColli{}
	} else {
		a.Edges.namedReturnSenderColli[name] = append(a.Edges.namedReturnSenderColli[name], edges...)
	}
}

// NamedReturnRecipientColli returns the ReturnRecipientColli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Address) NamedReturnRecipientColli(name string) ([]*ReturnColli, error) {
	if a.Edges.namedReturnRecipientColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedReturnRecipientColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Address) appendNamedReturnRecipientColli(name string, edges ...*ReturnColli) {
	if a.Edges.namedReturnRecipientColli == nil {
		a.Edges.namedReturnRecipientColli = make(map[string][]*ReturnColli)
	}
	if len(edges) == 0 {
		a.Edges.namedReturnRecipientColli[name] = []*ReturnColli{}
	} else {
		a.Edges.namedReturnRecipientColli[name] = append(a.Edges.namedReturnRecipientColli[name], edges...)
	}
}

// Addresses is a parsable slice of Address.
type Addresses []*Address
