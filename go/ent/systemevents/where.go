// Code generated by ent, DO NOT EDIT.

package systemevents

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldTenantID, v))
}

// EventTypeID applies equality check predicate on the "event_type_id" field. It's identical to EventTypeIDEQ.
func EventTypeID(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldEventTypeID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldDescription, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldData, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldCreatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.SystemEvents {
	vc := string(v)
	return predicate.SystemEvents(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.SystemEvents {
	vc := string(v)
	return predicate.SystemEvents(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.SystemEvents {
	vc := string(v)
	return predicate.SystemEvents(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.SystemEvents {
	vc := string(v)
	return predicate.SystemEvents(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.SystemEvents {
	vc := string(v)
	return predicate.SystemEvents(sql.FieldContainsFold(FieldTenantID, vc))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v EventType) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v EventType) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...EventType) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...EventType) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeIDEQ applies the EQ predicate on the "event_type_id" field.
func EventTypeIDEQ(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldEventTypeID, v))
}

// EventTypeIDNEQ applies the NEQ predicate on the "event_type_id" field.
func EventTypeIDNEQ(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldEventTypeID, v))
}

// EventTypeIDIn applies the In predicate on the "event_type_id" field.
func EventTypeIDIn(vs ...string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldEventTypeID, vs...))
}

// EventTypeIDNotIn applies the NotIn predicate on the "event_type_id" field.
func EventTypeIDNotIn(vs ...string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldEventTypeID, vs...))
}

// EventTypeIDGT applies the GT predicate on the "event_type_id" field.
func EventTypeIDGT(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGT(FieldEventTypeID, v))
}

// EventTypeIDGTE applies the GTE predicate on the "event_type_id" field.
func EventTypeIDGTE(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGTE(FieldEventTypeID, v))
}

// EventTypeIDLT applies the LT predicate on the "event_type_id" field.
func EventTypeIDLT(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLT(FieldEventTypeID, v))
}

// EventTypeIDLTE applies the LTE predicate on the "event_type_id" field.
func EventTypeIDLTE(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLTE(FieldEventTypeID, v))
}

// EventTypeIDContains applies the Contains predicate on the "event_type_id" field.
func EventTypeIDContains(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldContains(FieldEventTypeID, v))
}

// EventTypeIDHasPrefix applies the HasPrefix predicate on the "event_type_id" field.
func EventTypeIDHasPrefix(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldHasPrefix(FieldEventTypeID, v))
}

// EventTypeIDHasSuffix applies the HasSuffix predicate on the "event_type_id" field.
func EventTypeIDHasSuffix(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldHasSuffix(FieldEventTypeID, v))
}

// EventTypeIDIsNil applies the IsNil predicate on the "event_type_id" field.
func EventTypeIDIsNil() predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIsNull(FieldEventTypeID))
}

// EventTypeIDNotNil applies the NotNil predicate on the "event_type_id" field.
func EventTypeIDNotNil() predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotNull(FieldEventTypeID))
}

// EventTypeIDEqualFold applies the EqualFold predicate on the "event_type_id" field.
func EventTypeIDEqualFold(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEqualFold(FieldEventTypeID, v))
}

// EventTypeIDContainsFold applies the ContainsFold predicate on the "event_type_id" field.
func EventTypeIDContainsFold(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldContainsFold(FieldEventTypeID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldStatus, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldContainsFold(FieldDescription, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLTE(FieldData, v))
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldContains(FieldData, v))
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldHasPrefix(FieldData, v))
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldHasSuffix(FieldData, v))
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIsNull(FieldData))
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotNull(FieldData))
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEqualFold(FieldData, v))
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldContainsFold(FieldData, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SystemEvents {
	return predicate.SystemEvents(sql.FieldNotNull(FieldCreatedAt))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.SystemEvents {
	return predicate.SystemEvents(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.SystemEvents {
	return predicate.SystemEvents(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SystemEvents) predicate.SystemEvents {
	return predicate.SystemEvents(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SystemEvents) predicate.SystemEvents {
	return predicate.SystemEvents(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SystemEvents) predicate.SystemEvents {
	return predicate.SystemEvents(sql.NotPredicates(p))
}
