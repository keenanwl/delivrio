// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionGLSQuery is the builder for querying DeliveryOptionGLS entities.
type DeliveryOptionGLSQuery struct {
	config
	ctx                                  *QueryContext
	order                                []deliveryoptiongls.OrderOption
	inters                               []Interceptor
	predicates                           []predicate.DeliveryOptionGLS
	withTenant                           *TenantQuery
	withDeliveryOption                   *DeliveryOptionQuery
	withCarrierAdditionalServiceGLS      *CarrierAdditionalServiceGLSQuery
	withFKs                              bool
	modifiers                            []func(*sql.Selector)
	loadTotal                            []func(context.Context, []*DeliveryOptionGLS) error
	withNamedCarrierAdditionalServiceGLS map[string]*CarrierAdditionalServiceGLSQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeliveryOptionGLSQuery builder.
func (dogq *DeliveryOptionGLSQuery) Where(ps ...predicate.DeliveryOptionGLS) *DeliveryOptionGLSQuery {
	dogq.predicates = append(dogq.predicates, ps...)
	return dogq
}

// Limit the number of records to be returned by this query.
func (dogq *DeliveryOptionGLSQuery) Limit(limit int) *DeliveryOptionGLSQuery {
	dogq.ctx.Limit = &limit
	return dogq
}

// Offset to start from.
func (dogq *DeliveryOptionGLSQuery) Offset(offset int) *DeliveryOptionGLSQuery {
	dogq.ctx.Offset = &offset
	return dogq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dogq *DeliveryOptionGLSQuery) Unique(unique bool) *DeliveryOptionGLSQuery {
	dogq.ctx.Unique = &unique
	return dogq
}

// Order specifies how the records should be ordered.
func (dogq *DeliveryOptionGLSQuery) Order(o ...deliveryoptiongls.OrderOption) *DeliveryOptionGLSQuery {
	dogq.order = append(dogq.order, o...)
	return dogq
}

// QueryTenant chains the current query on the "tenant" edge.
func (dogq *DeliveryOptionGLSQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: dogq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dogq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dogq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiongls.Table, deliveryoptiongls.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptiongls.TenantTable, deliveryoptiongls.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(dogq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (dogq *DeliveryOptionGLSQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: dogq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dogq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dogq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiongls.Table, deliveryoptiongls.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptiongls.DeliveryOptionTable, deliveryoptiongls.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(dogq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServiceGLS chains the current query on the "carrier_additional_service_gls" edge.
func (dogq *DeliveryOptionGLSQuery) QueryCarrierAdditionalServiceGLS() *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: dogq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dogq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dogq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiongls.Table, deliveryoptiongls.FieldID, selector),
			sqlgraph.To(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptiongls.CarrierAdditionalServiceGLSTable, deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dogq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeliveryOptionGLS entity from the query.
// Returns a *NotFoundError when no DeliveryOptionGLS was found.
func (dogq *DeliveryOptionGLSQuery) First(ctx context.Context) (*DeliveryOptionGLS, error) {
	nodes, err := dogq.Limit(1).All(setContextOp(ctx, dogq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deliveryoptiongls.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dogq *DeliveryOptionGLSQuery) FirstX(ctx context.Context) *DeliveryOptionGLS {
	node, err := dogq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeliveryOptionGLS ID from the query.
// Returns a *NotFoundError when no DeliveryOptionGLS ID was found.
func (dogq *DeliveryOptionGLSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = dogq.Limit(1).IDs(setContextOp(ctx, dogq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deliveryoptiongls.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dogq *DeliveryOptionGLSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := dogq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeliveryOptionGLS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeliveryOptionGLS entity is found.
// Returns a *NotFoundError when no DeliveryOptionGLS entities are found.
func (dogq *DeliveryOptionGLSQuery) Only(ctx context.Context) (*DeliveryOptionGLS, error) {
	nodes, err := dogq.Limit(2).All(setContextOp(ctx, dogq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deliveryoptiongls.Label}
	default:
		return nil, &NotSingularError{deliveryoptiongls.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dogq *DeliveryOptionGLSQuery) OnlyX(ctx context.Context) *DeliveryOptionGLS {
	node, err := dogq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeliveryOptionGLS ID in the query.
// Returns a *NotSingularError when more than one DeliveryOptionGLS ID is found.
// Returns a *NotFoundError when no entities are found.
func (dogq *DeliveryOptionGLSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = dogq.Limit(2).IDs(setContextOp(ctx, dogq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deliveryoptiongls.Label}
	default:
		err = &NotSingularError{deliveryoptiongls.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dogq *DeliveryOptionGLSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := dogq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeliveryOptionGLSs.
func (dogq *DeliveryOptionGLSQuery) All(ctx context.Context) ([]*DeliveryOptionGLS, error) {
	ctx = setContextOp(ctx, dogq.ctx, ent.OpQueryAll)
	if err := dogq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeliveryOptionGLS, *DeliveryOptionGLSQuery]()
	return withInterceptors[[]*DeliveryOptionGLS](ctx, dogq, qr, dogq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dogq *DeliveryOptionGLSQuery) AllX(ctx context.Context) []*DeliveryOptionGLS {
	nodes, err := dogq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeliveryOptionGLS IDs.
func (dogq *DeliveryOptionGLSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if dogq.ctx.Unique == nil && dogq.path != nil {
		dogq.Unique(true)
	}
	ctx = setContextOp(ctx, dogq.ctx, ent.OpQueryIDs)
	if err = dogq.Select(deliveryoptiongls.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dogq *DeliveryOptionGLSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := dogq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dogq *DeliveryOptionGLSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dogq.ctx, ent.OpQueryCount)
	if err := dogq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dogq, querierCount[*DeliveryOptionGLSQuery](), dogq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dogq *DeliveryOptionGLSQuery) CountX(ctx context.Context) int {
	count, err := dogq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dogq *DeliveryOptionGLSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dogq.ctx, ent.OpQueryExist)
	switch _, err := dogq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dogq *DeliveryOptionGLSQuery) ExistX(ctx context.Context) bool {
	exist, err := dogq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeliveryOptionGLSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dogq *DeliveryOptionGLSQuery) Clone() *DeliveryOptionGLSQuery {
	if dogq == nil {
		return nil
	}
	return &DeliveryOptionGLSQuery{
		config:                          dogq.config,
		ctx:                             dogq.ctx.Clone(),
		order:                           append([]deliveryoptiongls.OrderOption{}, dogq.order...),
		inters:                          append([]Interceptor{}, dogq.inters...),
		predicates:                      append([]predicate.DeliveryOptionGLS{}, dogq.predicates...),
		withTenant:                      dogq.withTenant.Clone(),
		withDeliveryOption:              dogq.withDeliveryOption.Clone(),
		withCarrierAdditionalServiceGLS: dogq.withCarrierAdditionalServiceGLS.Clone(),
		// clone intermediate query.
		sql:  dogq.sql.Clone(),
		path: dogq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (dogq *DeliveryOptionGLSQuery) WithTenant(opts ...func(*TenantQuery)) *DeliveryOptionGLSQuery {
	query := (&TenantClient{config: dogq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dogq.withTenant = query
	return dogq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (dogq *DeliveryOptionGLSQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *DeliveryOptionGLSQuery {
	query := (&DeliveryOptionClient{config: dogq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dogq.withDeliveryOption = query
	return dogq
}

// WithCarrierAdditionalServiceGLS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_gls" edge. The optional arguments are used to configure the query builder of the edge.
func (dogq *DeliveryOptionGLSQuery) WithCarrierAdditionalServiceGLS(opts ...func(*CarrierAdditionalServiceGLSQuery)) *DeliveryOptionGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: dogq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dogq.withCarrierAdditionalServiceGLS = query
	return dogq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeliveryOptionGLS.Query().
//		GroupBy(deliveryoptiongls.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dogq *DeliveryOptionGLSQuery) GroupBy(field string, fields ...string) *DeliveryOptionGLSGroupBy {
	dogq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeliveryOptionGLSGroupBy{build: dogq}
	grbuild.flds = &dogq.ctx.Fields
	grbuild.label = deliveryoptiongls.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.DeliveryOptionGLS.Query().
//		Select(deliveryoptiongls.FieldTenantID).
//		Scan(ctx, &v)
func (dogq *DeliveryOptionGLSQuery) Select(fields ...string) *DeliveryOptionGLSSelect {
	dogq.ctx.Fields = append(dogq.ctx.Fields, fields...)
	sbuild := &DeliveryOptionGLSSelect{DeliveryOptionGLSQuery: dogq}
	sbuild.label = deliveryoptiongls.Label
	sbuild.flds, sbuild.scan = &dogq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeliveryOptionGLSSelect configured with the given aggregations.
func (dogq *DeliveryOptionGLSQuery) Aggregate(fns ...AggregateFunc) *DeliveryOptionGLSSelect {
	return dogq.Select().Aggregate(fns...)
}

func (dogq *DeliveryOptionGLSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dogq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dogq); err != nil {
				return err
			}
		}
	}
	for _, f := range dogq.ctx.Fields {
		if !deliveryoptiongls.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dogq.path != nil {
		prev, err := dogq.path(ctx)
		if err != nil {
			return err
		}
		dogq.sql = prev
	}
	if deliveryoptiongls.Policy == nil {
		return errors.New("ent: uninitialized deliveryoptiongls.Policy (forgotten import ent/runtime?)")
	}
	if err := deliveryoptiongls.Policy.EvalQuery(ctx, dogq); err != nil {
		return err
	}
	return nil
}

func (dogq *DeliveryOptionGLSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeliveryOptionGLS, error) {
	var (
		nodes       = []*DeliveryOptionGLS{}
		withFKs     = dogq.withFKs
		_spec       = dogq.querySpec()
		loadedTypes = [3]bool{
			dogq.withTenant != nil,
			dogq.withDeliveryOption != nil,
			dogq.withCarrierAdditionalServiceGLS != nil,
		}
	)
	if dogq.withDeliveryOption != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptiongls.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeliveryOptionGLS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeliveryOptionGLS{config: dogq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dogq.modifiers) > 0 {
		_spec.Modifiers = dogq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dogq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dogq.withTenant; query != nil {
		if err := dogq.loadTenant(ctx, query, nodes, nil,
			func(n *DeliveryOptionGLS, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := dogq.withDeliveryOption; query != nil {
		if err := dogq.loadDeliveryOption(ctx, query, nodes, nil,
			func(n *DeliveryOptionGLS, e *DeliveryOption) { n.Edges.DeliveryOption = e }); err != nil {
			return nil, err
		}
	}
	if query := dogq.withCarrierAdditionalServiceGLS; query != nil {
		if err := dogq.loadCarrierAdditionalServiceGLS(ctx, query, nodes,
			func(n *DeliveryOptionGLS) { n.Edges.CarrierAdditionalServiceGLS = []*CarrierAdditionalServiceGLS{} },
			func(n *DeliveryOptionGLS, e *CarrierAdditionalServiceGLS) {
				n.Edges.CarrierAdditionalServiceGLS = append(n.Edges.CarrierAdditionalServiceGLS, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range dogq.withNamedCarrierAdditionalServiceGLS {
		if err := dogq.loadCarrierAdditionalServiceGLS(ctx, query, nodes,
			func(n *DeliveryOptionGLS) { n.appendNamedCarrierAdditionalServiceGLS(name) },
			func(n *DeliveryOptionGLS, e *CarrierAdditionalServiceGLS) {
				n.appendNamedCarrierAdditionalServiceGLS(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range dogq.loadTotal {
		if err := dogq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dogq *DeliveryOptionGLSQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*DeliveryOptionGLS, init func(*DeliveryOptionGLS), assign func(*DeliveryOptionGLS, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryOptionGLS)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dogq *DeliveryOptionGLSQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*DeliveryOptionGLS, init func(*DeliveryOptionGLS), assign func(*DeliveryOptionGLS, *DeliveryOption)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryOptionGLS)
	for i := range nodes {
		if nodes[i].delivery_option_delivery_option_gls == nil {
			continue
		}
		fk := *nodes[i].delivery_option_delivery_option_gls
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delivery_option_delivery_option_gls" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dogq *DeliveryOptionGLSQuery) loadCarrierAdditionalServiceGLS(ctx context.Context, query *CarrierAdditionalServiceGLSQuery, nodes []*DeliveryOptionGLS, init func(*DeliveryOptionGLS), assign func(*DeliveryOptionGLS, *CarrierAdditionalServiceGLS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*DeliveryOptionGLS)
	nids := make(map[pulid.ID]map[*DeliveryOptionGLS]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deliveryoptiongls.CarrierAdditionalServiceGLSTable)
		s.Join(joinT).On(s.C(carrieradditionalservicegls.FieldID), joinT.C(deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeliveryOptionGLS]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierAdditionalServiceGLS](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_additional_service_gls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (dogq *DeliveryOptionGLSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dogq.querySpec()
	if len(dogq.modifiers) > 0 {
		_spec.Modifiers = dogq.modifiers
	}
	_spec.Node.Columns = dogq.ctx.Fields
	if len(dogq.ctx.Fields) > 0 {
		_spec.Unique = dogq.ctx.Unique != nil && *dogq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dogq.driver, _spec)
}

func (dogq *DeliveryOptionGLSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deliveryoptiongls.Table, deliveryoptiongls.Columns, sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString))
	_spec.From = dogq.sql
	if unique := dogq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dogq.path != nil {
		_spec.Unique = true
	}
	if fields := dogq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptiongls.FieldID)
		for i := range fields {
			if fields[i] != deliveryoptiongls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if dogq.withTenant != nil {
			_spec.Node.AddColumnOnce(deliveryoptiongls.FieldTenantID)
		}
	}
	if ps := dogq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dogq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dogq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dogq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dogq *DeliveryOptionGLSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dogq.driver.Dialect())
	t1 := builder.Table(deliveryoptiongls.Table)
	columns := dogq.ctx.Fields
	if len(columns) == 0 {
		columns = deliveryoptiongls.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dogq.sql != nil {
		selector = dogq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dogq.ctx.Unique != nil && *dogq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dogq.predicates {
		p(selector)
	}
	for _, p := range dogq.order {
		p(selector)
	}
	if offset := dogq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dogq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierAdditionalServiceGLS tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_gls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (dogq *DeliveryOptionGLSQuery) WithNamedCarrierAdditionalServiceGLS(name string, opts ...func(*CarrierAdditionalServiceGLSQuery)) *DeliveryOptionGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: dogq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if dogq.withNamedCarrierAdditionalServiceGLS == nil {
		dogq.withNamedCarrierAdditionalServiceGLS = make(map[string]*CarrierAdditionalServiceGLSQuery)
	}
	dogq.withNamedCarrierAdditionalServiceGLS[name] = query
	return dogq
}

// DeliveryOptionGLSGroupBy is the group-by builder for DeliveryOptionGLS entities.
type DeliveryOptionGLSGroupBy struct {
	selector
	build *DeliveryOptionGLSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (doggb *DeliveryOptionGLSGroupBy) Aggregate(fns ...AggregateFunc) *DeliveryOptionGLSGroupBy {
	doggb.fns = append(doggb.fns, fns...)
	return doggb
}

// Scan applies the selector query and scans the result into the given value.
func (doggb *DeliveryOptionGLSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, doggb.build.ctx, ent.OpQueryGroupBy)
	if err := doggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryOptionGLSQuery, *DeliveryOptionGLSGroupBy](ctx, doggb.build, doggb, doggb.build.inters, v)
}

func (doggb *DeliveryOptionGLSGroupBy) sqlScan(ctx context.Context, root *DeliveryOptionGLSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(doggb.fns))
	for _, fn := range doggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*doggb.flds)+len(doggb.fns))
		for _, f := range *doggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*doggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := doggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeliveryOptionGLSSelect is the builder for selecting fields of DeliveryOptionGLS entities.
type DeliveryOptionGLSSelect struct {
	*DeliveryOptionGLSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dogs *DeliveryOptionGLSSelect) Aggregate(fns ...AggregateFunc) *DeliveryOptionGLSSelect {
	dogs.fns = append(dogs.fns, fns...)
	return dogs
}

// Scan applies the selector query and scans the result into the given value.
func (dogs *DeliveryOptionGLSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dogs.ctx, ent.OpQuerySelect)
	if err := dogs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryOptionGLSQuery, *DeliveryOptionGLSSelect](ctx, dogs.DeliveryOptionGLSQuery, dogs, dogs.inters, v)
}

func (dogs *DeliveryOptionGLSSelect) sqlScan(ctx context.Context, root *DeliveryOptionGLSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dogs.fns))
	for _, fn := range dogs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dogs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dogs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
