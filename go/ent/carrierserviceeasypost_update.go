// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceEasyPostUpdate is the builder for updating CarrierServiceEasyPost entities.
type CarrierServiceEasyPostUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierServiceEasyPostMutation
}

// Where appends a list predicates to the CarrierServiceEasyPostUpdate builder.
func (csepu *CarrierServiceEasyPostUpdate) Where(ps ...predicate.CarrierServiceEasyPost) *CarrierServiceEasyPostUpdate {
	csepu.mutation.Where(ps...)
	return csepu
}

// SetAPIKey sets the "api_key" field.
func (csepu *CarrierServiceEasyPostUpdate) SetAPIKey(ck carrierserviceeasypost.APIKey) *CarrierServiceEasyPostUpdate {
	csepu.mutation.SetAPIKey(ck)
	return csepu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csepu *CarrierServiceEasyPostUpdate) SetNillableAPIKey(ck *carrierserviceeasypost.APIKey) *CarrierServiceEasyPostUpdate {
	if ck != nil {
		csepu.SetAPIKey(*ck)
	}
	return csepu
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csepu *CarrierServiceEasyPostUpdate) SetCarrierServiceID(id pulid.ID) *CarrierServiceEasyPostUpdate {
	csepu.mutation.SetCarrierServiceID(id)
	return csepu
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csepu *CarrierServiceEasyPostUpdate) SetCarrierService(c *CarrierService) *CarrierServiceEasyPostUpdate {
	return csepu.SetCarrierServiceID(c.ID)
}

// AddCarrierAddServEasyPostIDs adds the "carrier_add_serv_easy_post" edge to the CarrierAdditionalServiceEasyPost entity by IDs.
func (csepu *CarrierServiceEasyPostUpdate) AddCarrierAddServEasyPostIDs(ids ...pulid.ID) *CarrierServiceEasyPostUpdate {
	csepu.mutation.AddCarrierAddServEasyPostIDs(ids...)
	return csepu
}

// AddCarrierAddServEasyPost adds the "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (csepu *CarrierServiceEasyPostUpdate) AddCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *CarrierServiceEasyPostUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csepu.AddCarrierAddServEasyPostIDs(ids...)
}

// Mutation returns the CarrierServiceEasyPostMutation object of the builder.
func (csepu *CarrierServiceEasyPostUpdate) Mutation() *CarrierServiceEasyPostMutation {
	return csepu.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csepu *CarrierServiceEasyPostUpdate) ClearCarrierService() *CarrierServiceEasyPostUpdate {
	csepu.mutation.ClearCarrierService()
	return csepu
}

// ClearCarrierAddServEasyPost clears all "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (csepu *CarrierServiceEasyPostUpdate) ClearCarrierAddServEasyPost() *CarrierServiceEasyPostUpdate {
	csepu.mutation.ClearCarrierAddServEasyPost()
	return csepu
}

// RemoveCarrierAddServEasyPostIDs removes the "carrier_add_serv_easy_post" edge to CarrierAdditionalServiceEasyPost entities by IDs.
func (csepu *CarrierServiceEasyPostUpdate) RemoveCarrierAddServEasyPostIDs(ids ...pulid.ID) *CarrierServiceEasyPostUpdate {
	csepu.mutation.RemoveCarrierAddServEasyPostIDs(ids...)
	return csepu
}

// RemoveCarrierAddServEasyPost removes "carrier_add_serv_easy_post" edges to CarrierAdditionalServiceEasyPost entities.
func (csepu *CarrierServiceEasyPostUpdate) RemoveCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *CarrierServiceEasyPostUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csepu.RemoveCarrierAddServEasyPostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csepu *CarrierServiceEasyPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csepu.sqlSave, csepu.mutation, csepu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csepu *CarrierServiceEasyPostUpdate) SaveX(ctx context.Context) int {
	affected, err := csepu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csepu *CarrierServiceEasyPostUpdate) Exec(ctx context.Context) error {
	_, err := csepu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csepu *CarrierServiceEasyPostUpdate) ExecX(ctx context.Context) {
	if err := csepu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csepu *CarrierServiceEasyPostUpdate) check() error {
	if v, ok := csepu.mutation.APIKey(); ok {
		if err := carrierserviceeasypost.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "CarrierServiceEasyPost.api_key": %w`, err)}
		}
	}
	if csepu.mutation.CarrierServiceCleared() && len(csepu.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceEasyPost.carrier_service"`)
	}
	return nil
}

func (csepu *CarrierServiceEasyPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csepu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierserviceeasypost.Table, carrierserviceeasypost.Columns, sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString))
	if ps := csepu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csepu.mutation.APIKey(); ok {
		_spec.SetField(carrierserviceeasypost.FieldAPIKey, field.TypeEnum, value)
	}
	if csepu.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceeasypost.CarrierServiceTable,
			Columns: []string{carrierserviceeasypost.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csepu.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceeasypost.CarrierServiceTable,
			Columns: []string{carrierserviceeasypost.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csepu.mutation.CarrierAddServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierserviceeasypost.CarrierAddServEasyPostTable,
			Columns: carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csepu.mutation.RemovedCarrierAddServEasyPostIDs(); len(nodes) > 0 && !csepu.mutation.CarrierAddServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierserviceeasypost.CarrierAddServEasyPostTable,
			Columns: carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csepu.mutation.CarrierAddServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierserviceeasypost.CarrierAddServEasyPostTable,
			Columns: carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csepu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierserviceeasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csepu.mutation.done = true
	return n, nil
}

// CarrierServiceEasyPostUpdateOne is the builder for updating a single CarrierServiceEasyPost entity.
type CarrierServiceEasyPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierServiceEasyPostMutation
}

// SetAPIKey sets the "api_key" field.
func (csepuo *CarrierServiceEasyPostUpdateOne) SetAPIKey(ck carrierserviceeasypost.APIKey) *CarrierServiceEasyPostUpdateOne {
	csepuo.mutation.SetAPIKey(ck)
	return csepuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csepuo *CarrierServiceEasyPostUpdateOne) SetNillableAPIKey(ck *carrierserviceeasypost.APIKey) *CarrierServiceEasyPostUpdateOne {
	if ck != nil {
		csepuo.SetAPIKey(*ck)
	}
	return csepuo
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csepuo *CarrierServiceEasyPostUpdateOne) SetCarrierServiceID(id pulid.ID) *CarrierServiceEasyPostUpdateOne {
	csepuo.mutation.SetCarrierServiceID(id)
	return csepuo
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csepuo *CarrierServiceEasyPostUpdateOne) SetCarrierService(c *CarrierService) *CarrierServiceEasyPostUpdateOne {
	return csepuo.SetCarrierServiceID(c.ID)
}

// AddCarrierAddServEasyPostIDs adds the "carrier_add_serv_easy_post" edge to the CarrierAdditionalServiceEasyPost entity by IDs.
func (csepuo *CarrierServiceEasyPostUpdateOne) AddCarrierAddServEasyPostIDs(ids ...pulid.ID) *CarrierServiceEasyPostUpdateOne {
	csepuo.mutation.AddCarrierAddServEasyPostIDs(ids...)
	return csepuo
}

// AddCarrierAddServEasyPost adds the "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (csepuo *CarrierServiceEasyPostUpdateOne) AddCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *CarrierServiceEasyPostUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csepuo.AddCarrierAddServEasyPostIDs(ids...)
}

// Mutation returns the CarrierServiceEasyPostMutation object of the builder.
func (csepuo *CarrierServiceEasyPostUpdateOne) Mutation() *CarrierServiceEasyPostMutation {
	return csepuo.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csepuo *CarrierServiceEasyPostUpdateOne) ClearCarrierService() *CarrierServiceEasyPostUpdateOne {
	csepuo.mutation.ClearCarrierService()
	return csepuo
}

// ClearCarrierAddServEasyPost clears all "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (csepuo *CarrierServiceEasyPostUpdateOne) ClearCarrierAddServEasyPost() *CarrierServiceEasyPostUpdateOne {
	csepuo.mutation.ClearCarrierAddServEasyPost()
	return csepuo
}

// RemoveCarrierAddServEasyPostIDs removes the "carrier_add_serv_easy_post" edge to CarrierAdditionalServiceEasyPost entities by IDs.
func (csepuo *CarrierServiceEasyPostUpdateOne) RemoveCarrierAddServEasyPostIDs(ids ...pulid.ID) *CarrierServiceEasyPostUpdateOne {
	csepuo.mutation.RemoveCarrierAddServEasyPostIDs(ids...)
	return csepuo
}

// RemoveCarrierAddServEasyPost removes "carrier_add_serv_easy_post" edges to CarrierAdditionalServiceEasyPost entities.
func (csepuo *CarrierServiceEasyPostUpdateOne) RemoveCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *CarrierServiceEasyPostUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csepuo.RemoveCarrierAddServEasyPostIDs(ids...)
}

// Where appends a list predicates to the CarrierServiceEasyPostUpdate builder.
func (csepuo *CarrierServiceEasyPostUpdateOne) Where(ps ...predicate.CarrierServiceEasyPost) *CarrierServiceEasyPostUpdateOne {
	csepuo.mutation.Where(ps...)
	return csepuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csepuo *CarrierServiceEasyPostUpdateOne) Select(field string, fields ...string) *CarrierServiceEasyPostUpdateOne {
	csepuo.fields = append([]string{field}, fields...)
	return csepuo
}

// Save executes the query and returns the updated CarrierServiceEasyPost entity.
func (csepuo *CarrierServiceEasyPostUpdateOne) Save(ctx context.Context) (*CarrierServiceEasyPost, error) {
	return withHooks(ctx, csepuo.sqlSave, csepuo.mutation, csepuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csepuo *CarrierServiceEasyPostUpdateOne) SaveX(ctx context.Context) *CarrierServiceEasyPost {
	node, err := csepuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csepuo *CarrierServiceEasyPostUpdateOne) Exec(ctx context.Context) error {
	_, err := csepuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csepuo *CarrierServiceEasyPostUpdateOne) ExecX(ctx context.Context) {
	if err := csepuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csepuo *CarrierServiceEasyPostUpdateOne) check() error {
	if v, ok := csepuo.mutation.APIKey(); ok {
		if err := carrierserviceeasypost.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "CarrierServiceEasyPost.api_key": %w`, err)}
		}
	}
	if csepuo.mutation.CarrierServiceCleared() && len(csepuo.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceEasyPost.carrier_service"`)
	}
	return nil
}

func (csepuo *CarrierServiceEasyPostUpdateOne) sqlSave(ctx context.Context) (_node *CarrierServiceEasyPost, err error) {
	if err := csepuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierserviceeasypost.Table, carrierserviceeasypost.Columns, sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString))
	id, ok := csepuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierServiceEasyPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csepuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierserviceeasypost.FieldID)
		for _, f := range fields {
			if !carrierserviceeasypost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierserviceeasypost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csepuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csepuo.mutation.APIKey(); ok {
		_spec.SetField(carrierserviceeasypost.FieldAPIKey, field.TypeEnum, value)
	}
	if csepuo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceeasypost.CarrierServiceTable,
			Columns: []string{carrierserviceeasypost.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csepuo.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceeasypost.CarrierServiceTable,
			Columns: []string{carrierserviceeasypost.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csepuo.mutation.CarrierAddServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierserviceeasypost.CarrierAddServEasyPostTable,
			Columns: carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csepuo.mutation.RemovedCarrierAddServEasyPostIDs(); len(nodes) > 0 && !csepuo.mutation.CarrierAddServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierserviceeasypost.CarrierAddServEasyPostTable,
			Columns: carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csepuo.mutation.CarrierAddServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierserviceeasypost.CarrierAddServEasyPostTable,
			Columns: carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierServiceEasyPost{config: csepuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csepuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierserviceeasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csepuo.mutation.done = true
	return _node, nil
}
