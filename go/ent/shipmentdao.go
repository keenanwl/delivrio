// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShipmentDAO is the model entity for the ShipmentDAO schema.
type ShipmentDAO struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// BarcodeID holds the value of the "barcode_id" field.
	BarcodeID string `json:"barcode_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentDAOQuery when eager-loading is set.
	Edges                 ShipmentDAOEdges `json:"edges"`
	shipment_shipment_dao *pulid.ID
	selectValues          sql.SelectValues
}

// ShipmentDAOEdges holds the relations/edges for other nodes in the graph.
type ShipmentDAOEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentDAOEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentDAOEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentDAO) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentdao.FieldID, shipmentdao.FieldTenantID:
			values[i] = new(pulid.ID)
		case shipmentdao.FieldBarcodeID:
			values[i] = new(sql.NullString)
		case shipmentdao.ForeignKeys[0]: // shipment_shipment_dao
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentDAO fields.
func (sd *ShipmentDAO) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentdao.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sd.ID = *value
			}
		case shipmentdao.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				sd.TenantID = *value
			}
		case shipmentdao.FieldBarcodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field barcode_id", values[i])
			} else if value.Valid {
				sd.BarcodeID = value.String
			}
		case shipmentdao.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_shipment_dao", values[i])
			} else if value.Valid {
				sd.shipment_shipment_dao = new(pulid.ID)
				*sd.shipment_shipment_dao = *value.S.(*pulid.ID)
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentDAO.
// This includes values selected through modifiers, order, etc.
func (sd *ShipmentDAO) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ShipmentDAO entity.
func (sd *ShipmentDAO) QueryTenant() *TenantQuery {
	return NewShipmentDAOClient(sd.config).QueryTenant(sd)
}

// QueryShipment queries the "shipment" edge of the ShipmentDAO entity.
func (sd *ShipmentDAO) QueryShipment() *ShipmentQuery {
	return NewShipmentDAOClient(sd.config).QueryShipment(sd)
}

// Update returns a builder for updating this ShipmentDAO.
// Note that you need to call ShipmentDAO.Unwrap() before calling this method if this ShipmentDAO
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *ShipmentDAO) Update() *ShipmentDAOUpdateOne {
	return NewShipmentDAOClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the ShipmentDAO entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *ShipmentDAO) Unwrap() *ShipmentDAO {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentDAO is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *ShipmentDAO) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentDAO(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("barcode_id=")
	builder.WriteString(sd.BarcodeID)
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentDAOs is a parsable slice of ShipmentDAO.
type ShipmentDAOs []*ShipmentDAO
