// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeliveryRuleConstraintGroup is the model entity for the DeliveryRuleConstraintGroup schema.
type DeliveryRuleConstraintGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ConstraintLogic holds the value of the "constraint_logic" field.
	ConstraintLogic deliveryruleconstraintgroup.ConstraintLogic `json:"constraint_logic,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryRuleConstraintGroupQuery when eager-loading is set.
	Edges                                        DeliveryRuleConstraintGroupEdges `json:"edges"`
	delivery_rule_delivery_rule_constraint_group *pulid.ID
	selectValues                                 sql.SelectValues
}

// DeliveryRuleConstraintGroupEdges holds the relations/edges for other nodes in the graph.
type DeliveryRuleConstraintGroupEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// DeliveryRuleConstraints holds the value of the delivery_rule_constraints edge.
	DeliveryRuleConstraints []*DeliveryRuleConstraint `json:"delivery_rule_constraints,omitempty"`
	// DeliveryRule holds the value of the delivery_rule edge.
	DeliveryRule *DeliveryRule `json:"delivery_rule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedDeliveryRuleConstraints map[string][]*DeliveryRuleConstraint
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryRuleConstraintGroupEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// DeliveryRuleConstraintsOrErr returns the DeliveryRuleConstraints value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryRuleConstraintGroupEdges) DeliveryRuleConstraintsOrErr() ([]*DeliveryRuleConstraint, error) {
	if e.loadedTypes[1] {
		return e.DeliveryRuleConstraints, nil
	}
	return nil, &NotLoadedError{edge: "delivery_rule_constraints"}
}

// DeliveryRuleOrErr returns the DeliveryRule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryRuleConstraintGroupEdges) DeliveryRuleOrErr() (*DeliveryRule, error) {
	if e.DeliveryRule != nil {
		return e.DeliveryRule, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: deliveryrule.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_rule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeliveryRuleConstraintGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliveryruleconstraintgroup.FieldID, deliveryruleconstraintgroup.FieldTenantID:
			values[i] = new(pulid.ID)
		case deliveryruleconstraintgroup.FieldConstraintLogic:
			values[i] = new(sql.NullString)
		case deliveryruleconstraintgroup.ForeignKeys[0]: // delivery_rule_delivery_rule_constraint_group
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeliveryRuleConstraintGroup fields.
func (drcg *DeliveryRuleConstraintGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliveryruleconstraintgroup.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				drcg.ID = *value
			}
		case deliveryruleconstraintgroup.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				drcg.TenantID = *value
			}
		case deliveryruleconstraintgroup.FieldConstraintLogic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field constraint_logic", values[i])
			} else if value.Valid {
				drcg.ConstraintLogic = deliveryruleconstraintgroup.ConstraintLogic(value.String)
			}
		case deliveryruleconstraintgroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_rule_delivery_rule_constraint_group", values[i])
			} else if value.Valid {
				drcg.delivery_rule_delivery_rule_constraint_group = new(pulid.ID)
				*drcg.delivery_rule_delivery_rule_constraint_group = *value.S.(*pulid.ID)
			}
		default:
			drcg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeliveryRuleConstraintGroup.
// This includes values selected through modifiers, order, etc.
func (drcg *DeliveryRuleConstraintGroup) Value(name string) (ent.Value, error) {
	return drcg.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the DeliveryRuleConstraintGroup entity.
func (drcg *DeliveryRuleConstraintGroup) QueryTenant() *TenantQuery {
	return NewDeliveryRuleConstraintGroupClient(drcg.config).QueryTenant(drcg)
}

// QueryDeliveryRuleConstraints queries the "delivery_rule_constraints" edge of the DeliveryRuleConstraintGroup entity.
func (drcg *DeliveryRuleConstraintGroup) QueryDeliveryRuleConstraints() *DeliveryRuleConstraintQuery {
	return NewDeliveryRuleConstraintGroupClient(drcg.config).QueryDeliveryRuleConstraints(drcg)
}

// QueryDeliveryRule queries the "delivery_rule" edge of the DeliveryRuleConstraintGroup entity.
func (drcg *DeliveryRuleConstraintGroup) QueryDeliveryRule() *DeliveryRuleQuery {
	return NewDeliveryRuleConstraintGroupClient(drcg.config).QueryDeliveryRule(drcg)
}

// Update returns a builder for updating this DeliveryRuleConstraintGroup.
// Note that you need to call DeliveryRuleConstraintGroup.Unwrap() before calling this method if this DeliveryRuleConstraintGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (drcg *DeliveryRuleConstraintGroup) Update() *DeliveryRuleConstraintGroupUpdateOne {
	return NewDeliveryRuleConstraintGroupClient(drcg.config).UpdateOne(drcg)
}

// Unwrap unwraps the DeliveryRuleConstraintGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (drcg *DeliveryRuleConstraintGroup) Unwrap() *DeliveryRuleConstraintGroup {
	_tx, ok := drcg.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeliveryRuleConstraintGroup is not a transactional entity")
	}
	drcg.config.driver = _tx.drv
	return drcg
}

// String implements the fmt.Stringer.
func (drcg *DeliveryRuleConstraintGroup) String() string {
	var builder strings.Builder
	builder.WriteString("DeliveryRuleConstraintGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", drcg.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", drcg.TenantID))
	builder.WriteString(", ")
	builder.WriteString("constraint_logic=")
	builder.WriteString(fmt.Sprintf("%v", drcg.ConstraintLogic))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryRuleConstraints returns the DeliveryRuleConstraints named value or an error if the edge was not
// loaded in eager-loading with this name.
func (drcg *DeliveryRuleConstraintGroup) NamedDeliveryRuleConstraints(name string) ([]*DeliveryRuleConstraint, error) {
	if drcg.Edges.namedDeliveryRuleConstraints == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := drcg.Edges.namedDeliveryRuleConstraints[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (drcg *DeliveryRuleConstraintGroup) appendNamedDeliveryRuleConstraints(name string, edges ...*DeliveryRuleConstraint) {
	if drcg.Edges.namedDeliveryRuleConstraints == nil {
		drcg.Edges.namedDeliveryRuleConstraints = make(map[string][]*DeliveryRuleConstraint)
	}
	if len(edges) == 0 {
		drcg.Edges.namedDeliveryRuleConstraints[name] = []*DeliveryRuleConstraint{}
	} else {
		drcg.Edges.namedDeliveryRuleConstraints[name] = append(drcg.Edges.namedDeliveryRuleConstraints[name], edges...)
	}
}

// DeliveryRuleConstraintGroups is a parsable slice of DeliveryRuleConstraintGroup.
type DeliveryRuleConstraintGroups []*DeliveryRuleConstraintGroup
