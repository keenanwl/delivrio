// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceDSVUpdate is the builder for updating CarrierAdditionalServiceDSV entities.
type CarrierAdditionalServiceDSVUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierAdditionalServiceDSVMutation
}

// Where appends a list predicates to the CarrierAdditionalServiceDSVUpdate builder.
func (casdu *CarrierAdditionalServiceDSVUpdate) Where(ps ...predicate.CarrierAdditionalServiceDSV) *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.Where(ps...)
	return casdu
}

// SetLabel sets the "label" field.
func (casdu *CarrierAdditionalServiceDSVUpdate) SetLabel(s string) *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.SetLabel(s)
	return casdu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casdu *CarrierAdditionalServiceDSVUpdate) SetNillableLabel(s *string) *CarrierAdditionalServiceDSVUpdate {
	if s != nil {
		casdu.SetLabel(*s)
	}
	return casdu
}

// SetAPICode sets the "api_code" field.
func (casdu *CarrierAdditionalServiceDSVUpdate) SetAPICode(s string) *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.SetAPICode(s)
	return casdu
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (casdu *CarrierAdditionalServiceDSVUpdate) SetNillableAPICode(s *string) *CarrierAdditionalServiceDSVUpdate {
	if s != nil {
		casdu.SetAPICode(*s)
	}
	return casdu
}

// AddCarrierServiceDSVIDs adds the "carrier_service_dsv" edge to the CarrierServiceDSV entity by IDs.
func (casdu *CarrierAdditionalServiceDSVUpdate) AddCarrierServiceDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.AddCarrierServiceDSVIDs(ids...)
	return casdu
}

// AddCarrierServiceDSV adds the "carrier_service_dsv" edges to the CarrierServiceDSV entity.
func (casdu *CarrierAdditionalServiceDSVUpdate) AddCarrierServiceDSV(c ...*CarrierServiceDSV) *CarrierAdditionalServiceDSVUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casdu.AddCarrierServiceDSVIDs(ids...)
}

// AddDeliveryOptionDSVIDs adds the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by IDs.
func (casdu *CarrierAdditionalServiceDSVUpdate) AddDeliveryOptionDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.AddDeliveryOptionDSVIDs(ids...)
	return casdu
}

// AddDeliveryOptionDSV adds the "delivery_option_dsv" edges to the DeliveryOptionDSV entity.
func (casdu *CarrierAdditionalServiceDSVUpdate) AddDeliveryOptionDSV(d ...*DeliveryOptionDSV) *CarrierAdditionalServiceDSVUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casdu.AddDeliveryOptionDSVIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceDSVMutation object of the builder.
func (casdu *CarrierAdditionalServiceDSVUpdate) Mutation() *CarrierAdditionalServiceDSVMutation {
	return casdu.mutation
}

// ClearCarrierServiceDSV clears all "carrier_service_dsv" edges to the CarrierServiceDSV entity.
func (casdu *CarrierAdditionalServiceDSVUpdate) ClearCarrierServiceDSV() *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.ClearCarrierServiceDSV()
	return casdu
}

// RemoveCarrierServiceDSVIDs removes the "carrier_service_dsv" edge to CarrierServiceDSV entities by IDs.
func (casdu *CarrierAdditionalServiceDSVUpdate) RemoveCarrierServiceDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.RemoveCarrierServiceDSVIDs(ids...)
	return casdu
}

// RemoveCarrierServiceDSV removes "carrier_service_dsv" edges to CarrierServiceDSV entities.
func (casdu *CarrierAdditionalServiceDSVUpdate) RemoveCarrierServiceDSV(c ...*CarrierServiceDSV) *CarrierAdditionalServiceDSVUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casdu.RemoveCarrierServiceDSVIDs(ids...)
}

// ClearDeliveryOptionDSV clears all "delivery_option_dsv" edges to the DeliveryOptionDSV entity.
func (casdu *CarrierAdditionalServiceDSVUpdate) ClearDeliveryOptionDSV() *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.ClearDeliveryOptionDSV()
	return casdu
}

// RemoveDeliveryOptionDSVIDs removes the "delivery_option_dsv" edge to DeliveryOptionDSV entities by IDs.
func (casdu *CarrierAdditionalServiceDSVUpdate) RemoveDeliveryOptionDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVUpdate {
	casdu.mutation.RemoveDeliveryOptionDSVIDs(ids...)
	return casdu
}

// RemoveDeliveryOptionDSV removes "delivery_option_dsv" edges to DeliveryOptionDSV entities.
func (casdu *CarrierAdditionalServiceDSVUpdate) RemoveDeliveryOptionDSV(d ...*DeliveryOptionDSV) *CarrierAdditionalServiceDSVUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casdu.RemoveDeliveryOptionDSVIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (casdu *CarrierAdditionalServiceDSVUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, casdu.sqlSave, casdu.mutation, casdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casdu *CarrierAdditionalServiceDSVUpdate) SaveX(ctx context.Context) int {
	affected, err := casdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (casdu *CarrierAdditionalServiceDSVUpdate) Exec(ctx context.Context) error {
	_, err := casdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casdu *CarrierAdditionalServiceDSVUpdate) ExecX(ctx context.Context) {
	if err := casdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casdu *CarrierAdditionalServiceDSVUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicedsv.Table, carrieradditionalservicedsv.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString))
	if ps := casdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casdu.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicedsv.FieldLabel, field.TypeString, value)
	}
	if value, ok := casdu.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicedsv.FieldAPICode, field.TypeString, value)
	}
	if casdu.mutation.CarrierServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.CarrierServiceDSVTable,
			Columns: carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.RemovedCarrierServiceDSVIDs(); len(nodes) > 0 && !casdu.mutation.CarrierServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.CarrierServiceDSVTable,
			Columns: carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.CarrierServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.CarrierServiceDSVTable,
			Columns: carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casdu.mutation.DeliveryOptionDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.DeliveryOptionDSVTable,
			Columns: carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.RemovedDeliveryOptionDSVIDs(); len(nodes) > 0 && !casdu.mutation.DeliveryOptionDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.DeliveryOptionDSVTable,
			Columns: carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.DeliveryOptionDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.DeliveryOptionDSVTable,
			Columns: carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, casdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicedsv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	casdu.mutation.done = true
	return n, nil
}

// CarrierAdditionalServiceDSVUpdateOne is the builder for updating a single CarrierAdditionalServiceDSV entity.
type CarrierAdditionalServiceDSVUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierAdditionalServiceDSVMutation
}

// SetLabel sets the "label" field.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) SetLabel(s string) *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.SetLabel(s)
	return casduo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) SetNillableLabel(s *string) *CarrierAdditionalServiceDSVUpdateOne {
	if s != nil {
		casduo.SetLabel(*s)
	}
	return casduo
}

// SetAPICode sets the "api_code" field.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) SetAPICode(s string) *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.SetAPICode(s)
	return casduo
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) SetNillableAPICode(s *string) *CarrierAdditionalServiceDSVUpdateOne {
	if s != nil {
		casduo.SetAPICode(*s)
	}
	return casduo
}

// AddCarrierServiceDSVIDs adds the "carrier_service_dsv" edge to the CarrierServiceDSV entity by IDs.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) AddCarrierServiceDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.AddCarrierServiceDSVIDs(ids...)
	return casduo
}

// AddCarrierServiceDSV adds the "carrier_service_dsv" edges to the CarrierServiceDSV entity.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) AddCarrierServiceDSV(c ...*CarrierServiceDSV) *CarrierAdditionalServiceDSVUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casduo.AddCarrierServiceDSVIDs(ids...)
}

// AddDeliveryOptionDSVIDs adds the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by IDs.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) AddDeliveryOptionDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.AddDeliveryOptionDSVIDs(ids...)
	return casduo
}

// AddDeliveryOptionDSV adds the "delivery_option_dsv" edges to the DeliveryOptionDSV entity.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) AddDeliveryOptionDSV(d ...*DeliveryOptionDSV) *CarrierAdditionalServiceDSVUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casduo.AddDeliveryOptionDSVIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceDSVMutation object of the builder.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) Mutation() *CarrierAdditionalServiceDSVMutation {
	return casduo.mutation
}

// ClearCarrierServiceDSV clears all "carrier_service_dsv" edges to the CarrierServiceDSV entity.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) ClearCarrierServiceDSV() *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.ClearCarrierServiceDSV()
	return casduo
}

// RemoveCarrierServiceDSVIDs removes the "carrier_service_dsv" edge to CarrierServiceDSV entities by IDs.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) RemoveCarrierServiceDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.RemoveCarrierServiceDSVIDs(ids...)
	return casduo
}

// RemoveCarrierServiceDSV removes "carrier_service_dsv" edges to CarrierServiceDSV entities.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) RemoveCarrierServiceDSV(c ...*CarrierServiceDSV) *CarrierAdditionalServiceDSVUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casduo.RemoveCarrierServiceDSVIDs(ids...)
}

// ClearDeliveryOptionDSV clears all "delivery_option_dsv" edges to the DeliveryOptionDSV entity.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) ClearDeliveryOptionDSV() *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.ClearDeliveryOptionDSV()
	return casduo
}

// RemoveDeliveryOptionDSVIDs removes the "delivery_option_dsv" edge to DeliveryOptionDSV entities by IDs.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) RemoveDeliveryOptionDSVIDs(ids ...pulid.ID) *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.RemoveDeliveryOptionDSVIDs(ids...)
	return casduo
}

// RemoveDeliveryOptionDSV removes "delivery_option_dsv" edges to DeliveryOptionDSV entities.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) RemoveDeliveryOptionDSV(d ...*DeliveryOptionDSV) *CarrierAdditionalServiceDSVUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casduo.RemoveDeliveryOptionDSVIDs(ids...)
}

// Where appends a list predicates to the CarrierAdditionalServiceDSVUpdate builder.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) Where(ps ...predicate.CarrierAdditionalServiceDSV) *CarrierAdditionalServiceDSVUpdateOne {
	casduo.mutation.Where(ps...)
	return casduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) Select(field string, fields ...string) *CarrierAdditionalServiceDSVUpdateOne {
	casduo.fields = append([]string{field}, fields...)
	return casduo
}

// Save executes the query and returns the updated CarrierAdditionalServiceDSV entity.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) Save(ctx context.Context) (*CarrierAdditionalServiceDSV, error) {
	return withHooks(ctx, casduo.sqlSave, casduo.mutation, casduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) SaveX(ctx context.Context) *CarrierAdditionalServiceDSV {
	node, err := casduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) Exec(ctx context.Context) error {
	_, err := casduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casduo *CarrierAdditionalServiceDSVUpdateOne) ExecX(ctx context.Context) {
	if err := casduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casduo *CarrierAdditionalServiceDSVUpdateOne) sqlSave(ctx context.Context) (_node *CarrierAdditionalServiceDSV, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicedsv.Table, carrieradditionalservicedsv.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString))
	id, ok := casduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierAdditionalServiceDSV.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := casduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicedsv.FieldID)
		for _, f := range fields {
			if !carrieradditionalservicedsv.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrieradditionalservicedsv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := casduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casduo.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicedsv.FieldLabel, field.TypeString, value)
	}
	if value, ok := casduo.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicedsv.FieldAPICode, field.TypeString, value)
	}
	if casduo.mutation.CarrierServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.CarrierServiceDSVTable,
			Columns: carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.RemovedCarrierServiceDSVIDs(); len(nodes) > 0 && !casduo.mutation.CarrierServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.CarrierServiceDSVTable,
			Columns: carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.CarrierServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.CarrierServiceDSVTable,
			Columns: carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casduo.mutation.DeliveryOptionDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.DeliveryOptionDSVTable,
			Columns: carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.RemovedDeliveryOptionDSVIDs(); len(nodes) > 0 && !casduo.mutation.DeliveryOptionDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.DeliveryOptionDSVTable,
			Columns: carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.DeliveryOptionDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.DeliveryOptionDSVTable,
			Columns: carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierAdditionalServiceDSV{config: casduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, casduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicedsv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	casduo.mutation.done = true
	return _node, nil
}
