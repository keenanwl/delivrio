// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierBrandCreate is the builder for creating a CarrierBrand entity.
type CarrierBrandCreate struct {
	config
	mutation *CarrierBrandMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (cbc *CarrierBrandCreate) SetLabel(s string) *CarrierBrandCreate {
	cbc.mutation.SetLabel(s)
	return cbc
}

// SetLabelShort sets the "label_short" field.
func (cbc *CarrierBrandCreate) SetLabelShort(s string) *CarrierBrandCreate {
	cbc.mutation.SetLabelShort(s)
	return cbc
}

// SetInternalID sets the "internal_id" field.
func (cbc *CarrierBrandCreate) SetInternalID(ci carrierbrand.InternalID) *CarrierBrandCreate {
	cbc.mutation.SetInternalID(ci)
	return cbc
}

// SetLogoURL sets the "logo_url" field.
func (cbc *CarrierBrandCreate) SetLogoURL(s string) *CarrierBrandCreate {
	cbc.mutation.SetLogoURL(s)
	return cbc
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (cbc *CarrierBrandCreate) SetNillableLogoURL(s *string) *CarrierBrandCreate {
	if s != nil {
		cbc.SetLogoURL(*s)
	}
	return cbc
}

// SetTextColor sets the "text_color" field.
func (cbc *CarrierBrandCreate) SetTextColor(s string) *CarrierBrandCreate {
	cbc.mutation.SetTextColor(s)
	return cbc
}

// SetNillableTextColor sets the "text_color" field if the given value is not nil.
func (cbc *CarrierBrandCreate) SetNillableTextColor(s *string) *CarrierBrandCreate {
	if s != nil {
		cbc.SetTextColor(*s)
	}
	return cbc
}

// SetBackgroundColor sets the "background_color" field.
func (cbc *CarrierBrandCreate) SetBackgroundColor(s string) *CarrierBrandCreate {
	cbc.mutation.SetBackgroundColor(s)
	return cbc
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (cbc *CarrierBrandCreate) SetNillableBackgroundColor(s *string) *CarrierBrandCreate {
	if s != nil {
		cbc.SetBackgroundColor(*s)
	}
	return cbc
}

// SetID sets the "id" field.
func (cbc *CarrierBrandCreate) SetID(pu pulid.ID) *CarrierBrandCreate {
	cbc.mutation.SetID(pu)
	return cbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cbc *CarrierBrandCreate) SetNillableID(pu *pulid.ID) *CarrierBrandCreate {
	if pu != nil {
		cbc.SetID(*pu)
	}
	return cbc
}

// AddCarrierServiceIDs adds the "carrier_service" edge to the CarrierService entity by IDs.
func (cbc *CarrierBrandCreate) AddCarrierServiceIDs(ids ...pulid.ID) *CarrierBrandCreate {
	cbc.mutation.AddCarrierServiceIDs(ids...)
	return cbc
}

// AddCarrierService adds the "carrier_service" edges to the CarrierService entity.
func (cbc *CarrierBrandCreate) AddCarrierService(c ...*CarrierService) *CarrierBrandCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbc.AddCarrierServiceIDs(ids...)
}

// AddCarrierIDs adds the "carrier" edge to the Carrier entity by IDs.
func (cbc *CarrierBrandCreate) AddCarrierIDs(ids ...pulid.ID) *CarrierBrandCreate {
	cbc.mutation.AddCarrierIDs(ids...)
	return cbc
}

// AddCarrier adds the "carrier" edges to the Carrier entity.
func (cbc *CarrierBrandCreate) AddCarrier(c ...*Carrier) *CarrierBrandCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbc.AddCarrierIDs(ids...)
}

// AddParcelShopIDs adds the "parcel_shop" edge to the ParcelShop entity by IDs.
func (cbc *CarrierBrandCreate) AddParcelShopIDs(ids ...pulid.ID) *CarrierBrandCreate {
	cbc.mutation.AddParcelShopIDs(ids...)
	return cbc
}

// AddParcelShop adds the "parcel_shop" edges to the ParcelShop entity.
func (cbc *CarrierBrandCreate) AddParcelShop(p ...*ParcelShop) *CarrierBrandCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbc.AddParcelShopIDs(ids...)
}

// AddPackagingIDs adds the "packaging" edge to the Packaging entity by IDs.
func (cbc *CarrierBrandCreate) AddPackagingIDs(ids ...pulid.ID) *CarrierBrandCreate {
	cbc.mutation.AddPackagingIDs(ids...)
	return cbc
}

// AddPackaging adds the "packaging" edges to the Packaging entity.
func (cbc *CarrierBrandCreate) AddPackaging(p ...*Packaging) *CarrierBrandCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbc.AddPackagingIDs(ids...)
}

// AddDocumentIDs adds the "document" edge to the Document entity by IDs.
func (cbc *CarrierBrandCreate) AddDocumentIDs(ids ...pulid.ID) *CarrierBrandCreate {
	cbc.mutation.AddDocumentIDs(ids...)
	return cbc
}

// AddDocument adds the "document" edges to the Document entity.
func (cbc *CarrierBrandCreate) AddDocument(d ...*Document) *CarrierBrandCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cbc.AddDocumentIDs(ids...)
}

// Mutation returns the CarrierBrandMutation object of the builder.
func (cbc *CarrierBrandCreate) Mutation() *CarrierBrandMutation {
	return cbc.mutation
}

// Save creates the CarrierBrand in the database.
func (cbc *CarrierBrandCreate) Save(ctx context.Context) (*CarrierBrand, error) {
	if err := cbc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cbc.sqlSave, cbc.mutation, cbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cbc *CarrierBrandCreate) SaveX(ctx context.Context) *CarrierBrand {
	v, err := cbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbc *CarrierBrandCreate) Exec(ctx context.Context) error {
	_, err := cbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbc *CarrierBrandCreate) ExecX(ctx context.Context) {
	if err := cbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbc *CarrierBrandCreate) defaults() error {
	if _, ok := cbc.mutation.TextColor(); !ok {
		v := carrierbrand.DefaultTextColor
		cbc.mutation.SetTextColor(v)
	}
	if _, ok := cbc.mutation.BackgroundColor(); !ok {
		v := carrierbrand.DefaultBackgroundColor
		cbc.mutation.SetBackgroundColor(v)
	}
	if _, ok := cbc.mutation.ID(); !ok {
		if carrierbrand.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierbrand.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierbrand.DefaultID()
		cbc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cbc *CarrierBrandCreate) check() error {
	if _, ok := cbc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "CarrierBrand.label"`)}
	}
	if _, ok := cbc.mutation.LabelShort(); !ok {
		return &ValidationError{Name: "label_short", err: errors.New(`ent: missing required field "CarrierBrand.label_short"`)}
	}
	if _, ok := cbc.mutation.InternalID(); !ok {
		return &ValidationError{Name: "internal_id", err: errors.New(`ent: missing required field "CarrierBrand.internal_id"`)}
	}
	if v, ok := cbc.mutation.InternalID(); ok {
		if err := carrierbrand.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "CarrierBrand.internal_id": %w`, err)}
		}
	}
	return nil
}

func (cbc *CarrierBrandCreate) sqlSave(ctx context.Context) (*CarrierBrand, error) {
	if err := cbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cbc.mutation.id = &_node.ID
	cbc.mutation.done = true
	return _node, nil
}

func (cbc *CarrierBrandCreate) createSpec() (*CarrierBrand, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierBrand{config: cbc.config}
		_spec = sqlgraph.NewCreateSpec(carrierbrand.Table, sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString))
	)
	_spec.OnConflict = cbc.conflict
	if id, ok := cbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cbc.mutation.Label(); ok {
		_spec.SetField(carrierbrand.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := cbc.mutation.LabelShort(); ok {
		_spec.SetField(carrierbrand.FieldLabelShort, field.TypeString, value)
		_node.LabelShort = value
	}
	if value, ok := cbc.mutation.InternalID(); ok {
		_spec.SetField(carrierbrand.FieldInternalID, field.TypeEnum, value)
		_node.InternalID = value
	}
	if value, ok := cbc.mutation.LogoURL(); ok {
		_spec.SetField(carrierbrand.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := cbc.mutation.TextColor(); ok {
		_spec.SetField(carrierbrand.FieldTextColor, field.TypeString, value)
		_node.TextColor = value
	}
	if value, ok := cbc.mutation.BackgroundColor(); ok {
		_spec.SetField(carrierbrand.FieldBackgroundColor, field.TypeString, value)
		_node.BackgroundColor = value
	}
	if nodes := cbc.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierbrand.CarrierServiceTable,
			Columns: []string{carrierbrand.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.CarrierTable,
			Columns: []string{carrierbrand.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.ParcelShopTable,
			Columns: []string{carrierbrand.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.PackagingTable,
			Columns: []string{carrierbrand.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.DocumentTable,
			Columns: []string{carrierbrand.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierBrand.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierBrandUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (cbc *CarrierBrandCreate) OnConflict(opts ...sql.ConflictOption) *CarrierBrandUpsertOne {
	cbc.conflict = opts
	return &CarrierBrandUpsertOne{
		create: cbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierBrand.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cbc *CarrierBrandCreate) OnConflictColumns(columns ...string) *CarrierBrandUpsertOne {
	cbc.conflict = append(cbc.conflict, sql.ConflictColumns(columns...))
	return &CarrierBrandUpsertOne{
		create: cbc,
	}
}

type (
	// CarrierBrandUpsertOne is the builder for "upsert"-ing
	//  one CarrierBrand node.
	CarrierBrandUpsertOne struct {
		create *CarrierBrandCreate
	}

	// CarrierBrandUpsert is the "OnConflict" setter.
	CarrierBrandUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *CarrierBrandUpsert) SetLabel(v string) *CarrierBrandUpsert {
	u.Set(carrierbrand.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierBrandUpsert) UpdateLabel() *CarrierBrandUpsert {
	u.SetExcluded(carrierbrand.FieldLabel)
	return u
}

// SetLabelShort sets the "label_short" field.
func (u *CarrierBrandUpsert) SetLabelShort(v string) *CarrierBrandUpsert {
	u.Set(carrierbrand.FieldLabelShort, v)
	return u
}

// UpdateLabelShort sets the "label_short" field to the value that was provided on create.
func (u *CarrierBrandUpsert) UpdateLabelShort() *CarrierBrandUpsert {
	u.SetExcluded(carrierbrand.FieldLabelShort)
	return u
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierBrandUpsert) SetInternalID(v carrierbrand.InternalID) *CarrierBrandUpsert {
	u.Set(carrierbrand.FieldInternalID, v)
	return u
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierBrandUpsert) UpdateInternalID() *CarrierBrandUpsert {
	u.SetExcluded(carrierbrand.FieldInternalID)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *CarrierBrandUpsert) SetLogoURL(v string) *CarrierBrandUpsert {
	u.Set(carrierbrand.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *CarrierBrandUpsert) UpdateLogoURL() *CarrierBrandUpsert {
	u.SetExcluded(carrierbrand.FieldLogoURL)
	return u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *CarrierBrandUpsert) ClearLogoURL() *CarrierBrandUpsert {
	u.SetNull(carrierbrand.FieldLogoURL)
	return u
}

// SetTextColor sets the "text_color" field.
func (u *CarrierBrandUpsert) SetTextColor(v string) *CarrierBrandUpsert {
	u.Set(carrierbrand.FieldTextColor, v)
	return u
}

// UpdateTextColor sets the "text_color" field to the value that was provided on create.
func (u *CarrierBrandUpsert) UpdateTextColor() *CarrierBrandUpsert {
	u.SetExcluded(carrierbrand.FieldTextColor)
	return u
}

// ClearTextColor clears the value of the "text_color" field.
func (u *CarrierBrandUpsert) ClearTextColor() *CarrierBrandUpsert {
	u.SetNull(carrierbrand.FieldTextColor)
	return u
}

// SetBackgroundColor sets the "background_color" field.
func (u *CarrierBrandUpsert) SetBackgroundColor(v string) *CarrierBrandUpsert {
	u.Set(carrierbrand.FieldBackgroundColor, v)
	return u
}

// UpdateBackgroundColor sets the "background_color" field to the value that was provided on create.
func (u *CarrierBrandUpsert) UpdateBackgroundColor() *CarrierBrandUpsert {
	u.SetExcluded(carrierbrand.FieldBackgroundColor)
	return u
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (u *CarrierBrandUpsert) ClearBackgroundColor() *CarrierBrandUpsert {
	u.SetNull(carrierbrand.FieldBackgroundColor)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierBrand.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierbrand.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierBrandUpsertOne) UpdateNewValues() *CarrierBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierbrand.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierBrand.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierBrandUpsertOne) Ignore() *CarrierBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierBrandUpsertOne) DoNothing() *CarrierBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierBrandCreate.OnConflict
// documentation for more info.
func (u *CarrierBrandUpsertOne) Update(set func(*CarrierBrandUpsert)) *CarrierBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierBrandUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierBrandUpsertOne) SetLabel(v string) *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierBrandUpsertOne) UpdateLabel() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateLabel()
	})
}

// SetLabelShort sets the "label_short" field.
func (u *CarrierBrandUpsertOne) SetLabelShort(v string) *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetLabelShort(v)
	})
}

// UpdateLabelShort sets the "label_short" field to the value that was provided on create.
func (u *CarrierBrandUpsertOne) UpdateLabelShort() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateLabelShort()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierBrandUpsertOne) SetInternalID(v carrierbrand.InternalID) *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierBrandUpsertOne) UpdateInternalID() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateInternalID()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *CarrierBrandUpsertOne) SetLogoURL(v string) *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *CarrierBrandUpsertOne) UpdateLogoURL() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *CarrierBrandUpsertOne) ClearLogoURL() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.ClearLogoURL()
	})
}

// SetTextColor sets the "text_color" field.
func (u *CarrierBrandUpsertOne) SetTextColor(v string) *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetTextColor(v)
	})
}

// UpdateTextColor sets the "text_color" field to the value that was provided on create.
func (u *CarrierBrandUpsertOne) UpdateTextColor() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateTextColor()
	})
}

// ClearTextColor clears the value of the "text_color" field.
func (u *CarrierBrandUpsertOne) ClearTextColor() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.ClearTextColor()
	})
}

// SetBackgroundColor sets the "background_color" field.
func (u *CarrierBrandUpsertOne) SetBackgroundColor(v string) *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetBackgroundColor(v)
	})
}

// UpdateBackgroundColor sets the "background_color" field to the value that was provided on create.
func (u *CarrierBrandUpsertOne) UpdateBackgroundColor() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateBackgroundColor()
	})
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (u *CarrierBrandUpsertOne) ClearBackgroundColor() *CarrierBrandUpsertOne {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.ClearBackgroundColor()
	})
}

// Exec executes the query.
func (u *CarrierBrandUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierBrandCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierBrandUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierBrandUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierBrandUpsertOne.ID is not supported by MySQL driver. Use CarrierBrandUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierBrandUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierBrandCreateBulk is the builder for creating many CarrierBrand entities in bulk.
type CarrierBrandCreateBulk struct {
	config
	err      error
	builders []*CarrierBrandCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierBrand entities in the database.
func (cbcb *CarrierBrandCreateBulk) Save(ctx context.Context) ([]*CarrierBrand, error) {
	if cbcb.err != nil {
		return nil, cbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cbcb.builders))
	nodes := make([]*CarrierBrand, len(cbcb.builders))
	mutators := make([]Mutator, len(cbcb.builders))
	for i := range cbcb.builders {
		func(i int, root context.Context) {
			builder := cbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierBrandMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cbcb *CarrierBrandCreateBulk) SaveX(ctx context.Context) []*CarrierBrand {
	v, err := cbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbcb *CarrierBrandCreateBulk) Exec(ctx context.Context) error {
	_, err := cbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbcb *CarrierBrandCreateBulk) ExecX(ctx context.Context) {
	if err := cbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierBrand.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierBrandUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (cbcb *CarrierBrandCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierBrandUpsertBulk {
	cbcb.conflict = opts
	return &CarrierBrandUpsertBulk{
		create: cbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierBrand.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cbcb *CarrierBrandCreateBulk) OnConflictColumns(columns ...string) *CarrierBrandUpsertBulk {
	cbcb.conflict = append(cbcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierBrandUpsertBulk{
		create: cbcb,
	}
}

// CarrierBrandUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierBrand nodes.
type CarrierBrandUpsertBulk struct {
	create *CarrierBrandCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierBrand.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierbrand.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierBrandUpsertBulk) UpdateNewValues() *CarrierBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierbrand.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierBrand.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierBrandUpsertBulk) Ignore() *CarrierBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierBrandUpsertBulk) DoNothing() *CarrierBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierBrandCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierBrandUpsertBulk) Update(set func(*CarrierBrandUpsert)) *CarrierBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierBrandUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierBrandUpsertBulk) SetLabel(v string) *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierBrandUpsertBulk) UpdateLabel() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateLabel()
	})
}

// SetLabelShort sets the "label_short" field.
func (u *CarrierBrandUpsertBulk) SetLabelShort(v string) *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetLabelShort(v)
	})
}

// UpdateLabelShort sets the "label_short" field to the value that was provided on create.
func (u *CarrierBrandUpsertBulk) UpdateLabelShort() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateLabelShort()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierBrandUpsertBulk) SetInternalID(v carrierbrand.InternalID) *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierBrandUpsertBulk) UpdateInternalID() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateInternalID()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *CarrierBrandUpsertBulk) SetLogoURL(v string) *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *CarrierBrandUpsertBulk) UpdateLogoURL() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *CarrierBrandUpsertBulk) ClearLogoURL() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.ClearLogoURL()
	})
}

// SetTextColor sets the "text_color" field.
func (u *CarrierBrandUpsertBulk) SetTextColor(v string) *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetTextColor(v)
	})
}

// UpdateTextColor sets the "text_color" field to the value that was provided on create.
func (u *CarrierBrandUpsertBulk) UpdateTextColor() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateTextColor()
	})
}

// ClearTextColor clears the value of the "text_color" field.
func (u *CarrierBrandUpsertBulk) ClearTextColor() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.ClearTextColor()
	})
}

// SetBackgroundColor sets the "background_color" field.
func (u *CarrierBrandUpsertBulk) SetBackgroundColor(v string) *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.SetBackgroundColor(v)
	})
}

// UpdateBackgroundColor sets the "background_color" field to the value that was provided on create.
func (u *CarrierBrandUpsertBulk) UpdateBackgroundColor() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.UpdateBackgroundColor()
	})
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (u *CarrierBrandUpsertBulk) ClearBackgroundColor() *CarrierBrandUpsertBulk {
	return u.Update(func(s *CarrierBrandUpsert) {
		s.ClearBackgroundColor()
	})
}

// Exec executes the query.
func (u *CarrierBrandUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierBrandCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierBrandCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierBrandUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
