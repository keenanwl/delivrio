// Code generated by ent, DO NOT EDIT.

package connectionlookup

import (
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the connectionlookup type in the database.
	Label = "connection_lookup"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldOptionsOutputCount holds the string denoting the options_output_count field in the database.
	FieldOptionsOutputCount = "options_output_count"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeConnections holds the string denoting the connections edge name in mutations.
	EdgeConnections = "connections"
	// Table holds the table name of the connectionlookup in the database.
	Table = "connection_lookups"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "connection_lookups"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ConnectionsTable is the table that holds the connections relation/edge.
	ConnectionsTable = "connection_lookups"
	// ConnectionsInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionsInverseTable = "connections"
	// ConnectionsColumn is the table column denoting the connections relation/edge.
	ConnectionsColumn = "connection_lookup_connections"
)

// Columns holds all SQL columns for connectionlookup fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldPayload,
	FieldOptionsOutputCount,
	FieldError,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "connection_lookups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"connection_lookup_connections",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ConnectionLookup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByPayload orders the results by the payload field.
func ByPayload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayload, opts...).ToFunc()
}

// ByOptionsOutputCount orders the results by the options_output_count field.
func ByOptionsOutputCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionsOutputCount, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByConnectionsField orders the results by connections field.
func ByConnectionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionsStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newConnectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ConnectionsTable, ConnectionsColumn),
	)
}
