// Code generated by ent, DO NOT EDIT.

package connectionlookup

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldTenantID, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldPayload, v))
}

// OptionsOutputCount applies equality check predicate on the "options_output_count" field. It's identical to OptionsOutputCountEQ.
func OptionsOutputCount(v int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldOptionsOutputCount, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldError, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldCreatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.ConnectionLookup {
	vc := string(v)
	return predicate.ConnectionLookup(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.ConnectionLookup {
	vc := string(v)
	return predicate.ConnectionLookup(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.ConnectionLookup {
	vc := string(v)
	return predicate.ConnectionLookup(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.ConnectionLookup {
	vc := string(v)
	return predicate.ConnectionLookup(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.ConnectionLookup {
	vc := string(v)
	return predicate.ConnectionLookup(sql.FieldContainsFold(FieldTenantID, vc))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLTE(FieldPayload, v))
}

// PayloadContains applies the Contains predicate on the "payload" field.
func PayloadContains(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldContains(FieldPayload, v))
}

// PayloadHasPrefix applies the HasPrefix predicate on the "payload" field.
func PayloadHasPrefix(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldHasPrefix(FieldPayload, v))
}

// PayloadHasSuffix applies the HasSuffix predicate on the "payload" field.
func PayloadHasSuffix(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldHasSuffix(FieldPayload, v))
}

// PayloadEqualFold applies the EqualFold predicate on the "payload" field.
func PayloadEqualFold(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEqualFold(FieldPayload, v))
}

// PayloadContainsFold applies the ContainsFold predicate on the "payload" field.
func PayloadContainsFold(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldContainsFold(FieldPayload, v))
}

// OptionsOutputCountEQ applies the EQ predicate on the "options_output_count" field.
func OptionsOutputCountEQ(v int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldOptionsOutputCount, v))
}

// OptionsOutputCountNEQ applies the NEQ predicate on the "options_output_count" field.
func OptionsOutputCountNEQ(v int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNEQ(FieldOptionsOutputCount, v))
}

// OptionsOutputCountIn applies the In predicate on the "options_output_count" field.
func OptionsOutputCountIn(vs ...int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldIn(FieldOptionsOutputCount, vs...))
}

// OptionsOutputCountNotIn applies the NotIn predicate on the "options_output_count" field.
func OptionsOutputCountNotIn(vs ...int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNotIn(FieldOptionsOutputCount, vs...))
}

// OptionsOutputCountGT applies the GT predicate on the "options_output_count" field.
func OptionsOutputCountGT(v int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGT(FieldOptionsOutputCount, v))
}

// OptionsOutputCountGTE applies the GTE predicate on the "options_output_count" field.
func OptionsOutputCountGTE(v int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGTE(FieldOptionsOutputCount, v))
}

// OptionsOutputCountLT applies the LT predicate on the "options_output_count" field.
func OptionsOutputCountLT(v int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLT(FieldOptionsOutputCount, v))
}

// OptionsOutputCountLTE applies the LTE predicate on the "options_output_count" field.
func OptionsOutputCountLTE(v int) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLTE(FieldOptionsOutputCount, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldContainsFold(FieldError, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ConnectionLookup {
	return predicate.ConnectionLookup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnections applies the HasEdge predicate on the "connections" edge.
func HasConnections() predicate.ConnectionLookup {
	return predicate.ConnectionLookup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ConnectionsTable, ConnectionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionsWith applies the HasEdge predicate on the "connections" edge with a given conditions (other predicates).
func HasConnectionsWith(preds ...predicate.Connection) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(func(s *sql.Selector) {
		step := newConnectionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConnectionLookup) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConnectionLookup) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConnectionLookup) predicate.ConnectionLookup {
	return predicate.ConnectionLookup(sql.NotPredicates(p))
}
