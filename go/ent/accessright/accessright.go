// Code generated by ent, DO NOT EDIT.

package accessright

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the accessright type in the database.
	Label = "access_right"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldInternalID holds the string denoting the internal_id field in the database.
	FieldInternalID = "internal_id"
	// EdgeAssignedAccessRight holds the string denoting the assigned_access_right edge name in mutations.
	EdgeAssignedAccessRight = "assigned_access_right"
	// EdgeSeatGroupAccessRight holds the string denoting the seat_group_access_right edge name in mutations.
	EdgeSeatGroupAccessRight = "seat_group_access_right"
	// Table holds the table name of the accessright in the database.
	Table = "access_rights"
	// AssignedAccessRightTable is the table that holds the assigned_access_right relation/edge. The primary key declared below.
	AssignedAccessRightTable = "seat_group_access_rights"
	// AssignedAccessRightInverseTable is the table name for the SeatGroup entity.
	// It exists in this package in order to avoid circular dependency with the "seatgroup" package.
	AssignedAccessRightInverseTable = "seat_groups"
	// SeatGroupAccessRightTable is the table that holds the seat_group_access_right relation/edge.
	SeatGroupAccessRightTable = "seat_group_access_rights"
	// SeatGroupAccessRightInverseTable is the table name for the SeatGroupAccessRight entity.
	// It exists in this package in order to avoid circular dependency with the "seatgroupaccessright" package.
	SeatGroupAccessRightInverseTable = "seat_group_access_rights"
	// SeatGroupAccessRightColumn is the table column denoting the seat_group_access_right relation/edge.
	SeatGroupAccessRightColumn = "access_right_id"
)

// Columns holds all SQL columns for accessright fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldInternalID,
}

var (
	// AssignedAccessRightPrimaryKey and AssignedAccessRightColumn2 are the table columns denoting the
	// primary key for the assigned_access_right relation (M2M).
	AssignedAccessRightPrimaryKey = []string{"seat_group_id", "access_right_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the AccessRight queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByInternalID orders the results by the internal_id field.
func ByInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalID, opts...).ToFunc()
}

// ByAssignedAccessRightCount orders the results by assigned_access_right count.
func ByAssignedAccessRightCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignedAccessRightStep(), opts...)
	}
}

// ByAssignedAccessRight orders the results by assigned_access_right terms.
func ByAssignedAccessRight(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedAccessRightStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySeatGroupAccessRightCount orders the results by seat_group_access_right count.
func BySeatGroupAccessRightCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeatGroupAccessRightStep(), opts...)
	}
}

// BySeatGroupAccessRight orders the results by seat_group_access_right terms.
func BySeatGroupAccessRight(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeatGroupAccessRightStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAssignedAccessRightStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedAccessRightInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AssignedAccessRightTable, AssignedAccessRightPrimaryKey...),
	)
}
func newSeatGroupAccessRightStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeatGroupAccessRightInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SeatGroupAccessRightTable, SeatGroupAccessRightColumn),
	)
}
