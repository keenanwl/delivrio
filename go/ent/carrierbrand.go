// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierBrand is the model entity for the CarrierBrand schema.
type CarrierBrand struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Accommodation for PostNord to become PN
	LabelShort string `json:"label_short,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID carrierbrand.InternalID `json:"internal_id,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// TextColor holds the value of the "text_color" field.
	TextColor string `json:"text_color,omitempty"`
	// BackgroundColor holds the value of the "background_color" field.
	BackgroundColor string `json:"background_color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierBrandQuery when eager-loading is set.
	Edges        CarrierBrandEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarrierBrandEdges holds the relations/edges for other nodes in the graph.
type CarrierBrandEdges struct {
	// CarrierService holds the value of the carrier_service edge.
	CarrierService []*CarrierService `json:"carrier_service,omitempty"`
	// Carrier holds the value of the carrier edge.
	Carrier []*Carrier `json:"carrier,omitempty"`
	// ParcelShop holds the value of the parcel_shop edge.
	ParcelShop []*ParcelShop `json:"parcel_shop,omitempty"`
	// Packaging holds the value of the packaging edge.
	Packaging []*Packaging `json:"packaging,omitempty"`
	// Document holds the value of the document edge.
	Document []*Document `json:"document,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedCarrierService map[string][]*CarrierService
	namedCarrier        map[string][]*Carrier
	namedParcelShop     map[string][]*ParcelShop
	namedPackaging      map[string][]*Packaging
	namedDocument       map[string][]*Document
}

// CarrierServiceOrErr returns the CarrierService value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierBrandEdges) CarrierServiceOrErr() ([]*CarrierService, error) {
	if e.loadedTypes[0] {
		return e.CarrierService, nil
	}
	return nil, &NotLoadedError{edge: "carrier_service"}
}

// CarrierOrErr returns the Carrier value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierBrandEdges) CarrierOrErr() ([]*Carrier, error) {
	if e.loadedTypes[1] {
		return e.Carrier, nil
	}
	return nil, &NotLoadedError{edge: "carrier"}
}

// ParcelShopOrErr returns the ParcelShop value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierBrandEdges) ParcelShopOrErr() ([]*ParcelShop, error) {
	if e.loadedTypes[2] {
		return e.ParcelShop, nil
	}
	return nil, &NotLoadedError{edge: "parcel_shop"}
}

// PackagingOrErr returns the Packaging value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierBrandEdges) PackagingOrErr() ([]*Packaging, error) {
	if e.loadedTypes[3] {
		return e.Packaging, nil
	}
	return nil, &NotLoadedError{edge: "packaging"}
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierBrandEdges) DocumentOrErr() ([]*Document, error) {
	if e.loadedTypes[4] {
		return e.Document, nil
	}
	return nil, &NotLoadedError{edge: "document"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierBrand) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierbrand.FieldID:
			values[i] = new(pulid.ID)
		case carrierbrand.FieldLabel, carrierbrand.FieldLabelShort, carrierbrand.FieldInternalID, carrierbrand.FieldLogoURL, carrierbrand.FieldTextColor, carrierbrand.FieldBackgroundColor:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierBrand fields.
func (cb *CarrierBrand) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierbrand.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cb.ID = *value
			}
		case carrierbrand.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				cb.Label = value.String
			}
		case carrierbrand.FieldLabelShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_short", values[i])
			} else if value.Valid {
				cb.LabelShort = value.String
			}
		case carrierbrand.FieldInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				cb.InternalID = carrierbrand.InternalID(value.String)
			}
		case carrierbrand.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				cb.LogoURL = value.String
			}
		case carrierbrand.FieldTextColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_color", values[i])
			} else if value.Valid {
				cb.TextColor = value.String
			}
		case carrierbrand.FieldBackgroundColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background_color", values[i])
			} else if value.Valid {
				cb.BackgroundColor = value.String
			}
		default:
			cb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierBrand.
// This includes values selected through modifiers, order, etc.
func (cb *CarrierBrand) Value(name string) (ent.Value, error) {
	return cb.selectValues.Get(name)
}

// QueryCarrierService queries the "carrier_service" edge of the CarrierBrand entity.
func (cb *CarrierBrand) QueryCarrierService() *CarrierServiceQuery {
	return NewCarrierBrandClient(cb.config).QueryCarrierService(cb)
}

// QueryCarrier queries the "carrier" edge of the CarrierBrand entity.
func (cb *CarrierBrand) QueryCarrier() *CarrierQuery {
	return NewCarrierBrandClient(cb.config).QueryCarrier(cb)
}

// QueryParcelShop queries the "parcel_shop" edge of the CarrierBrand entity.
func (cb *CarrierBrand) QueryParcelShop() *ParcelShopQuery {
	return NewCarrierBrandClient(cb.config).QueryParcelShop(cb)
}

// QueryPackaging queries the "packaging" edge of the CarrierBrand entity.
func (cb *CarrierBrand) QueryPackaging() *PackagingQuery {
	return NewCarrierBrandClient(cb.config).QueryPackaging(cb)
}

// QueryDocument queries the "document" edge of the CarrierBrand entity.
func (cb *CarrierBrand) QueryDocument() *DocumentQuery {
	return NewCarrierBrandClient(cb.config).QueryDocument(cb)
}

// Update returns a builder for updating this CarrierBrand.
// Note that you need to call CarrierBrand.Unwrap() before calling this method if this CarrierBrand
// was returned from a transaction, and the transaction was committed or rolled back.
func (cb *CarrierBrand) Update() *CarrierBrandUpdateOne {
	return NewCarrierBrandClient(cb.config).UpdateOne(cb)
}

// Unwrap unwraps the CarrierBrand entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cb *CarrierBrand) Unwrap() *CarrierBrand {
	_tx, ok := cb.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierBrand is not a transactional entity")
	}
	cb.config.driver = _tx.drv
	return cb
}

// String implements the fmt.Stringer.
func (cb *CarrierBrand) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierBrand(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cb.ID))
	builder.WriteString("label=")
	builder.WriteString(cb.Label)
	builder.WriteString(", ")
	builder.WriteString("label_short=")
	builder.WriteString(cb.LabelShort)
	builder.WriteString(", ")
	builder.WriteString("internal_id=")
	builder.WriteString(fmt.Sprintf("%v", cb.InternalID))
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(cb.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("text_color=")
	builder.WriteString(cb.TextColor)
	builder.WriteString(", ")
	builder.WriteString("background_color=")
	builder.WriteString(cb.BackgroundColor)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierService returns the CarrierService named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cb *CarrierBrand) NamedCarrierService(name string) ([]*CarrierService, error) {
	if cb.Edges.namedCarrierService == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cb.Edges.namedCarrierService[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cb *CarrierBrand) appendNamedCarrierService(name string, edges ...*CarrierService) {
	if cb.Edges.namedCarrierService == nil {
		cb.Edges.namedCarrierService = make(map[string][]*CarrierService)
	}
	if len(edges) == 0 {
		cb.Edges.namedCarrierService[name] = []*CarrierService{}
	} else {
		cb.Edges.namedCarrierService[name] = append(cb.Edges.namedCarrierService[name], edges...)
	}
}

// NamedCarrier returns the Carrier named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cb *CarrierBrand) NamedCarrier(name string) ([]*Carrier, error) {
	if cb.Edges.namedCarrier == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cb.Edges.namedCarrier[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cb *CarrierBrand) appendNamedCarrier(name string, edges ...*Carrier) {
	if cb.Edges.namedCarrier == nil {
		cb.Edges.namedCarrier = make(map[string][]*Carrier)
	}
	if len(edges) == 0 {
		cb.Edges.namedCarrier[name] = []*Carrier{}
	} else {
		cb.Edges.namedCarrier[name] = append(cb.Edges.namedCarrier[name], edges...)
	}
}

// NamedParcelShop returns the ParcelShop named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cb *CarrierBrand) NamedParcelShop(name string) ([]*ParcelShop, error) {
	if cb.Edges.namedParcelShop == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cb.Edges.namedParcelShop[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cb *CarrierBrand) appendNamedParcelShop(name string, edges ...*ParcelShop) {
	if cb.Edges.namedParcelShop == nil {
		cb.Edges.namedParcelShop = make(map[string][]*ParcelShop)
	}
	if len(edges) == 0 {
		cb.Edges.namedParcelShop[name] = []*ParcelShop{}
	} else {
		cb.Edges.namedParcelShop[name] = append(cb.Edges.namedParcelShop[name], edges...)
	}
}

// NamedPackaging returns the Packaging named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cb *CarrierBrand) NamedPackaging(name string) ([]*Packaging, error) {
	if cb.Edges.namedPackaging == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cb.Edges.namedPackaging[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cb *CarrierBrand) appendNamedPackaging(name string, edges ...*Packaging) {
	if cb.Edges.namedPackaging == nil {
		cb.Edges.namedPackaging = make(map[string][]*Packaging)
	}
	if len(edges) == 0 {
		cb.Edges.namedPackaging[name] = []*Packaging{}
	} else {
		cb.Edges.namedPackaging[name] = append(cb.Edges.namedPackaging[name], edges...)
	}
}

// NamedDocument returns the Document named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cb *CarrierBrand) NamedDocument(name string) ([]*Document, error) {
	if cb.Edges.namedDocument == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cb.Edges.namedDocument[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cb *CarrierBrand) appendNamedDocument(name string, edges ...*Document) {
	if cb.Edges.namedDocument == nil {
		cb.Edges.namedDocument = make(map[string][]*Document)
	}
	if len(edges) == 0 {
		cb.Edges.namedDocument[name] = []*Document{}
	} else {
		cb.Edges.namedDocument[name] = append(cb.Edges.namedDocument[name], edges...)
	}
}

// CarrierBrands is a parsable slice of CarrierBrand.
type CarrierBrands []*CarrierBrand
