// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CountryQuery is the builder for querying Country entities.
type CountryQuery struct {
	config
	ctx                                                *QueryContext
	order                                              []country.OrderOption
	inters                                             []Interceptor
	predicates                                         []predicate.Country
	withDeliveryRule                                   *DeliveryRuleQuery
	withAddress                                        *AddressQuery
	withAddressGlobal                                  *AddressGlobalQuery
	withCarrierAdditionalServicePostNordConsignee      *CarrierAdditionalServicePostNordQuery
	withCarrierAdditionalServicePostNordConsignor      *CarrierAdditionalServicePostNordQuery
	withCarrierAdditionalServiceGLSConsignee           *CarrierAdditionalServiceGLSQuery
	withCarrierAdditionalServiceGLSConsignor           *CarrierAdditionalServiceGLSQuery
	withCountryHarmonizedCode                          *CountryHarmonizedCodeQuery
	withInventoryItem                                  *InventoryItemQuery
	modifiers                                          []func(*sql.Selector)
	loadTotal                                          []func(context.Context, []*Country) error
	withNamedDeliveryRule                              map[string]*DeliveryRuleQuery
	withNamedAddress                                   map[string]*AddressQuery
	withNamedAddressGlobal                             map[string]*AddressGlobalQuery
	withNamedCarrierAdditionalServicePostNordConsignee map[string]*CarrierAdditionalServicePostNordQuery
	withNamedCarrierAdditionalServicePostNordConsignor map[string]*CarrierAdditionalServicePostNordQuery
	withNamedCarrierAdditionalServiceGLSConsignee      map[string]*CarrierAdditionalServiceGLSQuery
	withNamedCarrierAdditionalServiceGLSConsignor      map[string]*CarrierAdditionalServiceGLSQuery
	withNamedCountryHarmonizedCode                     map[string]*CountryHarmonizedCodeQuery
	withNamedInventoryItem                             map[string]*InventoryItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CountryQuery builder.
func (cq *CountryQuery) Where(ps ...predicate.Country) *CountryQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *CountryQuery) Limit(limit int) *CountryQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *CountryQuery) Offset(offset int) *CountryQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CountryQuery) Unique(unique bool) *CountryQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *CountryQuery) Order(o ...country.OrderOption) *CountryQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryDeliveryRule chains the current query on the "delivery_rule" edge.
func (cq *CountryQuery) QueryDeliveryRule() *DeliveryRuleQuery {
	query := (&DeliveryRuleClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(deliveryrule.Table, deliveryrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, country.DeliveryRuleTable, country.DeliveryRulePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddress chains the current query on the "address" edge.
func (cq *CountryQuery) QueryAddress() *AddressQuery {
	query := (&AddressClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, country.AddressTable, country.AddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddressGlobal chains the current query on the "address_global" edge.
func (cq *CountryQuery) QueryAddressGlobal() *AddressGlobalQuery {
	query := (&AddressGlobalClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(addressglobal.Table, addressglobal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, country.AddressGlobalTable, country.AddressGlobalColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServicePostNordConsignee chains the current query on the "carrier_additional_service_post_nord_consignee" edge.
func (cq *CountryQuery) QueryCarrierAdditionalServicePostNordConsignee() *CarrierAdditionalServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, country.CarrierAdditionalServicePostNordConsigneeTable, country.CarrierAdditionalServicePostNordConsigneePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServicePostNordConsignor chains the current query on the "carrier_additional_service_post_nord_consignor" edge.
func (cq *CountryQuery) QueryCarrierAdditionalServicePostNordConsignor() *CarrierAdditionalServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, country.CarrierAdditionalServicePostNordConsignorTable, country.CarrierAdditionalServicePostNordConsignorPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServiceGLSConsignee chains the current query on the "carrier_additional_service_gls_consignee" edge.
func (cq *CountryQuery) QueryCarrierAdditionalServiceGLSConsignee() *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, country.CarrierAdditionalServiceGLSConsigneeTable, country.CarrierAdditionalServiceGLSConsigneePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServiceGLSConsignor chains the current query on the "carrier_additional_service_gls_consignor" edge.
func (cq *CountryQuery) QueryCarrierAdditionalServiceGLSConsignor() *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, country.CarrierAdditionalServiceGLSConsignorTable, country.CarrierAdditionalServiceGLSConsignorPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountryHarmonizedCode chains the current query on the "country_harmonized_code" edge.
func (cq *CountryQuery) QueryCountryHarmonizedCode() *CountryHarmonizedCodeQuery {
	query := (&CountryHarmonizedCodeClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(countryharmonizedcode.Table, countryharmonizedcode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, country.CountryHarmonizedCodeTable, country.CountryHarmonizedCodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventoryItem chains the current query on the "inventory_item" edge.
func (cq *CountryQuery) QueryInventoryItem() *InventoryItemQuery {
	query := (&InventoryItemClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, selector),
			sqlgraph.To(inventoryitem.Table, inventoryitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, country.InventoryItemTable, country.InventoryItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Country entity from the query.
// Returns a *NotFoundError when no Country was found.
func (cq *CountryQuery) First(ctx context.Context) (*Country, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{country.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CountryQuery) FirstX(ctx context.Context) *Country {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Country ID from the query.
// Returns a *NotFoundError when no Country ID was found.
func (cq *CountryQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{country.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CountryQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Country entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Country entity is found.
// Returns a *NotFoundError when no Country entities are found.
func (cq *CountryQuery) Only(ctx context.Context) (*Country, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{country.Label}
	default:
		return nil, &NotSingularError{country.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CountryQuery) OnlyX(ctx context.Context) *Country {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Country ID in the query.
// Returns a *NotSingularError when more than one Country ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CountryQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{country.Label}
	default:
		err = &NotSingularError{country.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CountryQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Countries.
func (cq *CountryQuery) All(ctx context.Context) ([]*Country, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Country, *CountryQuery]()
	return withInterceptors[[]*Country](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *CountryQuery) AllX(ctx context.Context) []*Country {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Country IDs.
func (cq *CountryQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(country.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CountryQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CountryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*CountryQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CountryQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CountryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CountryQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CountryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CountryQuery) Clone() *CountryQuery {
	if cq == nil {
		return nil
	}
	return &CountryQuery{
		config:            cq.config,
		ctx:               cq.ctx.Clone(),
		order:             append([]country.OrderOption{}, cq.order...),
		inters:            append([]Interceptor{}, cq.inters...),
		predicates:        append([]predicate.Country{}, cq.predicates...),
		withDeliveryRule:  cq.withDeliveryRule.Clone(),
		withAddress:       cq.withAddress.Clone(),
		withAddressGlobal: cq.withAddressGlobal.Clone(),
		withCarrierAdditionalServicePostNordConsignee: cq.withCarrierAdditionalServicePostNordConsignee.Clone(),
		withCarrierAdditionalServicePostNordConsignor: cq.withCarrierAdditionalServicePostNordConsignor.Clone(),
		withCarrierAdditionalServiceGLSConsignee:      cq.withCarrierAdditionalServiceGLSConsignee.Clone(),
		withCarrierAdditionalServiceGLSConsignor:      cq.withCarrierAdditionalServiceGLSConsignor.Clone(),
		withCountryHarmonizedCode:                     cq.withCountryHarmonizedCode.Clone(),
		withInventoryItem:                             cq.withInventoryItem.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithDeliveryRule tells the query-builder to eager-load the nodes that are connected to
// the "delivery_rule" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithDeliveryRule(opts ...func(*DeliveryRuleQuery)) *CountryQuery {
	query := (&DeliveryRuleClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDeliveryRule = query
	return cq
}

// WithAddress tells the query-builder to eager-load the nodes that are connected to
// the "address" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithAddress(opts ...func(*AddressQuery)) *CountryQuery {
	query := (&AddressClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withAddress = query
	return cq
}

// WithAddressGlobal tells the query-builder to eager-load the nodes that are connected to
// the "address_global" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithAddressGlobal(opts ...func(*AddressGlobalQuery)) *CountryQuery {
	query := (&AddressGlobalClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withAddressGlobal = query
	return cq
}

// WithCarrierAdditionalServicePostNordConsignee tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_post_nord_consignee" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithCarrierAdditionalServicePostNordConsignee(opts ...func(*CarrierAdditionalServicePostNordQuery)) *CountryQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierAdditionalServicePostNordConsignee = query
	return cq
}

// WithCarrierAdditionalServicePostNordConsignor tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_post_nord_consignor" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithCarrierAdditionalServicePostNordConsignor(opts ...func(*CarrierAdditionalServicePostNordQuery)) *CountryQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierAdditionalServicePostNordConsignor = query
	return cq
}

// WithCarrierAdditionalServiceGLSConsignee tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_gls_consignee" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithCarrierAdditionalServiceGLSConsignee(opts ...func(*CarrierAdditionalServiceGLSQuery)) *CountryQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierAdditionalServiceGLSConsignee = query
	return cq
}

// WithCarrierAdditionalServiceGLSConsignor tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_gls_consignor" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithCarrierAdditionalServiceGLSConsignor(opts ...func(*CarrierAdditionalServiceGLSQuery)) *CountryQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCarrierAdditionalServiceGLSConsignor = query
	return cq
}

// WithCountryHarmonizedCode tells the query-builder to eager-load the nodes that are connected to
// the "country_harmonized_code" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithCountryHarmonizedCode(opts ...func(*CountryHarmonizedCodeQuery)) *CountryQuery {
	query := (&CountryHarmonizedCodeClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCountryHarmonizedCode = query
	return cq
}

// WithInventoryItem tells the query-builder to eager-load the nodes that are connected to
// the "inventory_item" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithInventoryItem(opts ...func(*InventoryItemQuery)) *CountryQuery {
	query := (&InventoryItemClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withInventoryItem = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Country.Query().
//		GroupBy(country.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *CountryQuery) GroupBy(field string, fields ...string) *CountryGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CountryGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = country.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.Country.Query().
//		Select(country.FieldLabel).
//		Scan(ctx, &v)
func (cq *CountryQuery) Select(fields ...string) *CountrySelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &CountrySelect{CountryQuery: cq}
	sbuild.label = country.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CountrySelect configured with the given aggregations.
func (cq *CountryQuery) Aggregate(fns ...AggregateFunc) *CountrySelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *CountryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !country.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	if country.Policy == nil {
		return errors.New("ent: uninitialized country.Policy (forgotten import ent/runtime?)")
	}
	if err := country.Policy.EvalQuery(ctx, cq); err != nil {
		return err
	}
	return nil
}

func (cq *CountryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Country, error) {
	var (
		nodes       = []*Country{}
		_spec       = cq.querySpec()
		loadedTypes = [9]bool{
			cq.withDeliveryRule != nil,
			cq.withAddress != nil,
			cq.withAddressGlobal != nil,
			cq.withCarrierAdditionalServicePostNordConsignee != nil,
			cq.withCarrierAdditionalServicePostNordConsignor != nil,
			cq.withCarrierAdditionalServiceGLSConsignee != nil,
			cq.withCarrierAdditionalServiceGLSConsignor != nil,
			cq.withCountryHarmonizedCode != nil,
			cq.withInventoryItem != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Country).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Country{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withDeliveryRule; query != nil {
		if err := cq.loadDeliveryRule(ctx, query, nodes,
			func(n *Country) { n.Edges.DeliveryRule = []*DeliveryRule{} },
			func(n *Country, e *DeliveryRule) { n.Edges.DeliveryRule = append(n.Edges.DeliveryRule, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withAddress; query != nil {
		if err := cq.loadAddress(ctx, query, nodes,
			func(n *Country) { n.Edges.Address = []*Address{} },
			func(n *Country, e *Address) { n.Edges.Address = append(n.Edges.Address, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withAddressGlobal; query != nil {
		if err := cq.loadAddressGlobal(ctx, query, nodes,
			func(n *Country) { n.Edges.AddressGlobal = []*AddressGlobal{} },
			func(n *Country, e *AddressGlobal) { n.Edges.AddressGlobal = append(n.Edges.AddressGlobal, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierAdditionalServicePostNordConsignee; query != nil {
		if err := cq.loadCarrierAdditionalServicePostNordConsignee(ctx, query, nodes,
			func(n *Country) {
				n.Edges.CarrierAdditionalServicePostNordConsignee = []*CarrierAdditionalServicePostNord{}
			},
			func(n *Country, e *CarrierAdditionalServicePostNord) {
				n.Edges.CarrierAdditionalServicePostNordConsignee = append(n.Edges.CarrierAdditionalServicePostNordConsignee, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierAdditionalServicePostNordConsignor; query != nil {
		if err := cq.loadCarrierAdditionalServicePostNordConsignor(ctx, query, nodes,
			func(n *Country) {
				n.Edges.CarrierAdditionalServicePostNordConsignor = []*CarrierAdditionalServicePostNord{}
			},
			func(n *Country, e *CarrierAdditionalServicePostNord) {
				n.Edges.CarrierAdditionalServicePostNordConsignor = append(n.Edges.CarrierAdditionalServicePostNordConsignor, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierAdditionalServiceGLSConsignee; query != nil {
		if err := cq.loadCarrierAdditionalServiceGLSConsignee(ctx, query, nodes,
			func(n *Country) { n.Edges.CarrierAdditionalServiceGLSConsignee = []*CarrierAdditionalServiceGLS{} },
			func(n *Country, e *CarrierAdditionalServiceGLS) {
				n.Edges.CarrierAdditionalServiceGLSConsignee = append(n.Edges.CarrierAdditionalServiceGLSConsignee, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withCarrierAdditionalServiceGLSConsignor; query != nil {
		if err := cq.loadCarrierAdditionalServiceGLSConsignor(ctx, query, nodes,
			func(n *Country) { n.Edges.CarrierAdditionalServiceGLSConsignor = []*CarrierAdditionalServiceGLS{} },
			func(n *Country, e *CarrierAdditionalServiceGLS) {
				n.Edges.CarrierAdditionalServiceGLSConsignor = append(n.Edges.CarrierAdditionalServiceGLSConsignor, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withCountryHarmonizedCode; query != nil {
		if err := cq.loadCountryHarmonizedCode(ctx, query, nodes,
			func(n *Country) { n.Edges.CountryHarmonizedCode = []*CountryHarmonizedCode{} },
			func(n *Country, e *CountryHarmonizedCode) {
				n.Edges.CountryHarmonizedCode = append(n.Edges.CountryHarmonizedCode, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withInventoryItem; query != nil {
		if err := cq.loadInventoryItem(ctx, query, nodes,
			func(n *Country) { n.Edges.InventoryItem = []*InventoryItem{} },
			func(n *Country, e *InventoryItem) { n.Edges.InventoryItem = append(n.Edges.InventoryItem, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDeliveryRule {
		if err := cq.loadDeliveryRule(ctx, query, nodes,
			func(n *Country) { n.appendNamedDeliveryRule(name) },
			func(n *Country, e *DeliveryRule) { n.appendNamedDeliveryRule(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedAddress {
		if err := cq.loadAddress(ctx, query, nodes,
			func(n *Country) { n.appendNamedAddress(name) },
			func(n *Country, e *Address) { n.appendNamedAddress(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedAddressGlobal {
		if err := cq.loadAddressGlobal(ctx, query, nodes,
			func(n *Country) { n.appendNamedAddressGlobal(name) },
			func(n *Country, e *AddressGlobal) { n.appendNamedAddressGlobal(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCarrierAdditionalServicePostNordConsignee {
		if err := cq.loadCarrierAdditionalServicePostNordConsignee(ctx, query, nodes,
			func(n *Country) { n.appendNamedCarrierAdditionalServicePostNordConsignee(name) },
			func(n *Country, e *CarrierAdditionalServicePostNord) {
				n.appendNamedCarrierAdditionalServicePostNordConsignee(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCarrierAdditionalServicePostNordConsignor {
		if err := cq.loadCarrierAdditionalServicePostNordConsignor(ctx, query, nodes,
			func(n *Country) { n.appendNamedCarrierAdditionalServicePostNordConsignor(name) },
			func(n *Country, e *CarrierAdditionalServicePostNord) {
				n.appendNamedCarrierAdditionalServicePostNordConsignor(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCarrierAdditionalServiceGLSConsignee {
		if err := cq.loadCarrierAdditionalServiceGLSConsignee(ctx, query, nodes,
			func(n *Country) { n.appendNamedCarrierAdditionalServiceGLSConsignee(name) },
			func(n *Country, e *CarrierAdditionalServiceGLS) {
				n.appendNamedCarrierAdditionalServiceGLSConsignee(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCarrierAdditionalServiceGLSConsignor {
		if err := cq.loadCarrierAdditionalServiceGLSConsignor(ctx, query, nodes,
			func(n *Country) { n.appendNamedCarrierAdditionalServiceGLSConsignor(name) },
			func(n *Country, e *CarrierAdditionalServiceGLS) {
				n.appendNamedCarrierAdditionalServiceGLSConsignor(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCountryHarmonizedCode {
		if err := cq.loadCountryHarmonizedCode(ctx, query, nodes,
			func(n *Country) { n.appendNamedCountryHarmonizedCode(name) },
			func(n *Country, e *CountryHarmonizedCode) { n.appendNamedCountryHarmonizedCode(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedInventoryItem {
		if err := cq.loadInventoryItem(ctx, query, nodes,
			func(n *Country) { n.appendNamedInventoryItem(name) },
			func(n *Country, e *InventoryItem) { n.appendNamedInventoryItem(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CountryQuery) loadDeliveryRule(ctx context.Context, query *DeliveryRuleQuery, nodes []*Country, init func(*Country), assign func(*Country, *DeliveryRule)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Country)
	nids := make(map[pulid.ID]map[*Country]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(country.DeliveryRuleTable)
		s.Join(joinT).On(s.C(deliveryrule.FieldID), joinT.C(country.DeliveryRulePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(country.DeliveryRulePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(country.DeliveryRulePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Country]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryRule](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_rule" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CountryQuery) loadAddress(ctx context.Context, query *AddressQuery, nodes []*Country, init func(*Country), assign func(*Country, *Address)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Country)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Address(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(country.AddressColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.address_country
		if fk == nil {
			return fmt.Errorf(`foreign-key "address_country" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "address_country" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CountryQuery) loadAddressGlobal(ctx context.Context, query *AddressGlobalQuery, nodes []*Country, init func(*Country), assign func(*Country, *AddressGlobal)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Country)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AddressGlobal(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(country.AddressGlobalColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.address_global_country
		if fk == nil {
			return fmt.Errorf(`foreign-key "address_global_country" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "address_global_country" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CountryQuery) loadCarrierAdditionalServicePostNordConsignee(ctx context.Context, query *CarrierAdditionalServicePostNordQuery, nodes []*Country, init func(*Country), assign func(*Country, *CarrierAdditionalServicePostNord)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Country)
	nids := make(map[pulid.ID]map[*Country]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(country.CarrierAdditionalServicePostNordConsigneeTable)
		s.Join(joinT).On(s.C(carrieradditionalservicepostnord.FieldID), joinT.C(country.CarrierAdditionalServicePostNordConsigneePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(country.CarrierAdditionalServicePostNordConsigneePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(country.CarrierAdditionalServicePostNordConsigneePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Country]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierAdditionalServicePostNord](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_additional_service_post_nord_consignee" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CountryQuery) loadCarrierAdditionalServicePostNordConsignor(ctx context.Context, query *CarrierAdditionalServicePostNordQuery, nodes []*Country, init func(*Country), assign func(*Country, *CarrierAdditionalServicePostNord)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Country)
	nids := make(map[pulid.ID]map[*Country]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(country.CarrierAdditionalServicePostNordConsignorTable)
		s.Join(joinT).On(s.C(carrieradditionalservicepostnord.FieldID), joinT.C(country.CarrierAdditionalServicePostNordConsignorPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(country.CarrierAdditionalServicePostNordConsignorPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(country.CarrierAdditionalServicePostNordConsignorPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Country]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierAdditionalServicePostNord](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_additional_service_post_nord_consignor" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CountryQuery) loadCarrierAdditionalServiceGLSConsignee(ctx context.Context, query *CarrierAdditionalServiceGLSQuery, nodes []*Country, init func(*Country), assign func(*Country, *CarrierAdditionalServiceGLS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Country)
	nids := make(map[pulid.ID]map[*Country]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(country.CarrierAdditionalServiceGLSConsigneeTable)
		s.Join(joinT).On(s.C(carrieradditionalservicegls.FieldID), joinT.C(country.CarrierAdditionalServiceGLSConsigneePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(country.CarrierAdditionalServiceGLSConsigneePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(country.CarrierAdditionalServiceGLSConsigneePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Country]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierAdditionalServiceGLS](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_additional_service_gls_consignee" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CountryQuery) loadCarrierAdditionalServiceGLSConsignor(ctx context.Context, query *CarrierAdditionalServiceGLSQuery, nodes []*Country, init func(*Country), assign func(*Country, *CarrierAdditionalServiceGLS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Country)
	nids := make(map[pulid.ID]map[*Country]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(country.CarrierAdditionalServiceGLSConsignorTable)
		s.Join(joinT).On(s.C(carrieradditionalservicegls.FieldID), joinT.C(country.CarrierAdditionalServiceGLSConsignorPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(country.CarrierAdditionalServiceGLSConsignorPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(country.CarrierAdditionalServiceGLSConsignorPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Country]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierAdditionalServiceGLS](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_additional_service_gls_consignor" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CountryQuery) loadCountryHarmonizedCode(ctx context.Context, query *CountryHarmonizedCodeQuery, nodes []*Country, init func(*Country), assign func(*Country, *CountryHarmonizedCode)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Country)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CountryHarmonizedCode(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(country.CountryHarmonizedCodeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.country_harmonized_code_country
		if fk == nil {
			return fmt.Errorf(`foreign-key "country_harmonized_code_country" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "country_harmonized_code_country" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CountryQuery) loadInventoryItem(ctx context.Context, query *InventoryItemQuery, nodes []*Country, init func(*Country), assign func(*Country, *InventoryItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Country)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InventoryItem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(country.InventoryItemColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.inventory_item_country_of_origin
		if fk == nil {
			return fmt.Errorf(`foreign-key "inventory_item_country_of_origin" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "inventory_item_country_of_origin" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *CountryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CountryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeString))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, country.FieldID)
		for i := range fields {
			if fields[i] != country.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CountryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(country.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = country.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryRule tells the query-builder to eager-load the nodes that are connected to the "delivery_rule"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedDeliveryRule(name string, opts ...func(*DeliveryRuleQuery)) *CountryQuery {
	query := (&DeliveryRuleClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDeliveryRule == nil {
		cq.withNamedDeliveryRule = make(map[string]*DeliveryRuleQuery)
	}
	cq.withNamedDeliveryRule[name] = query
	return cq
}

// WithNamedAddress tells the query-builder to eager-load the nodes that are connected to the "address"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedAddress(name string, opts ...func(*AddressQuery)) *CountryQuery {
	query := (&AddressClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedAddress == nil {
		cq.withNamedAddress = make(map[string]*AddressQuery)
	}
	cq.withNamedAddress[name] = query
	return cq
}

// WithNamedAddressGlobal tells the query-builder to eager-load the nodes that are connected to the "address_global"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedAddressGlobal(name string, opts ...func(*AddressGlobalQuery)) *CountryQuery {
	query := (&AddressGlobalClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedAddressGlobal == nil {
		cq.withNamedAddressGlobal = make(map[string]*AddressGlobalQuery)
	}
	cq.withNamedAddressGlobal[name] = query
	return cq
}

// WithNamedCarrierAdditionalServicePostNordConsignee tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_post_nord_consignee"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedCarrierAdditionalServicePostNordConsignee(name string, opts ...func(*CarrierAdditionalServicePostNordQuery)) *CountryQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCarrierAdditionalServicePostNordConsignee == nil {
		cq.withNamedCarrierAdditionalServicePostNordConsignee = make(map[string]*CarrierAdditionalServicePostNordQuery)
	}
	cq.withNamedCarrierAdditionalServicePostNordConsignee[name] = query
	return cq
}

// WithNamedCarrierAdditionalServicePostNordConsignor tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_post_nord_consignor"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedCarrierAdditionalServicePostNordConsignor(name string, opts ...func(*CarrierAdditionalServicePostNordQuery)) *CountryQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCarrierAdditionalServicePostNordConsignor == nil {
		cq.withNamedCarrierAdditionalServicePostNordConsignor = make(map[string]*CarrierAdditionalServicePostNordQuery)
	}
	cq.withNamedCarrierAdditionalServicePostNordConsignor[name] = query
	return cq
}

// WithNamedCarrierAdditionalServiceGLSConsignee tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_gls_consignee"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedCarrierAdditionalServiceGLSConsignee(name string, opts ...func(*CarrierAdditionalServiceGLSQuery)) *CountryQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCarrierAdditionalServiceGLSConsignee == nil {
		cq.withNamedCarrierAdditionalServiceGLSConsignee = make(map[string]*CarrierAdditionalServiceGLSQuery)
	}
	cq.withNamedCarrierAdditionalServiceGLSConsignee[name] = query
	return cq
}

// WithNamedCarrierAdditionalServiceGLSConsignor tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_gls_consignor"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedCarrierAdditionalServiceGLSConsignor(name string, opts ...func(*CarrierAdditionalServiceGLSQuery)) *CountryQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCarrierAdditionalServiceGLSConsignor == nil {
		cq.withNamedCarrierAdditionalServiceGLSConsignor = make(map[string]*CarrierAdditionalServiceGLSQuery)
	}
	cq.withNamedCarrierAdditionalServiceGLSConsignor[name] = query
	return cq
}

// WithNamedCountryHarmonizedCode tells the query-builder to eager-load the nodes that are connected to the "country_harmonized_code"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedCountryHarmonizedCode(name string, opts ...func(*CountryHarmonizedCodeQuery)) *CountryQuery {
	query := (&CountryHarmonizedCodeClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCountryHarmonizedCode == nil {
		cq.withNamedCountryHarmonizedCode = make(map[string]*CountryHarmonizedCodeQuery)
	}
	cq.withNamedCountryHarmonizedCode[name] = query
	return cq
}

// WithNamedInventoryItem tells the query-builder to eager-load the nodes that are connected to the "inventory_item"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CountryQuery) WithNamedInventoryItem(name string, opts ...func(*InventoryItemQuery)) *CountryQuery {
	query := (&InventoryItemClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedInventoryItem == nil {
		cq.withNamedInventoryItem = make(map[string]*InventoryItemQuery)
	}
	cq.withNamedInventoryItem[name] = query
	return cq
}

// CountryGroupBy is the group-by builder for Country entities.
type CountryGroupBy struct {
	selector
	build *CountryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CountryGroupBy) Aggregate(fns ...AggregateFunc) *CountryGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *CountryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CountryQuery, *CountryGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *CountryGroupBy) sqlScan(ctx context.Context, root *CountryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CountrySelect is the builder for selecting fields of Country entities.
type CountrySelect struct {
	*CountryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *CountrySelect) Aggregate(fns ...AggregateFunc) *CountrySelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CountrySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CountryQuery, *CountrySelect](ctx, cs.CountryQuery, cs, cs.inters, v)
}

func (cs *CountrySelect) sqlScan(ctx context.Context, root *CountryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
