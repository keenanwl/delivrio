// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnPortalCreate is the builder for creating a ReturnPortal entity.
type ReturnPortalCreate struct {
	config
	mutation *ReturnPortalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (rpc *ReturnPortalCreate) SetTenantID(pu pulid.ID) *ReturnPortalCreate {
	rpc.mutation.SetTenantID(pu)
	return rpc
}

// SetName sets the "name" field.
func (rpc *ReturnPortalCreate) SetName(s string) *ReturnPortalCreate {
	rpc.mutation.SetName(s)
	return rpc
}

// SetReturnOpenHours sets the "return_open_hours" field.
func (rpc *ReturnPortalCreate) SetReturnOpenHours(i int) *ReturnPortalCreate {
	rpc.mutation.SetReturnOpenHours(i)
	return rpc
}

// SetNillableReturnOpenHours sets the "return_open_hours" field if the given value is not nil.
func (rpc *ReturnPortalCreate) SetNillableReturnOpenHours(i *int) *ReturnPortalCreate {
	if i != nil {
		rpc.SetReturnOpenHours(*i)
	}
	return rpc
}

// SetAutomaticallyAccept sets the "automatically_accept" field.
func (rpc *ReturnPortalCreate) SetAutomaticallyAccept(b bool) *ReturnPortalCreate {
	rpc.mutation.SetAutomaticallyAccept(b)
	return rpc
}

// SetNillableAutomaticallyAccept sets the "automatically_accept" field if the given value is not nil.
func (rpc *ReturnPortalCreate) SetNillableAutomaticallyAccept(b *bool) *ReturnPortalCreate {
	if b != nil {
		rpc.SetAutomaticallyAccept(*b)
	}
	return rpc
}

// SetID sets the "id" field.
func (rpc *ReturnPortalCreate) SetID(pu pulid.ID) *ReturnPortalCreate {
	rpc.mutation.SetID(pu)
	return rpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rpc *ReturnPortalCreate) SetNillableID(pu *pulid.ID) *ReturnPortalCreate {
	if pu != nil {
		rpc.SetID(*pu)
	}
	return rpc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rpc *ReturnPortalCreate) SetTenant(t *Tenant) *ReturnPortalCreate {
	return rpc.SetTenantID(t.ID)
}

// AddReturnPortalClaimIDs adds the "return_portal_claim" edge to the ReturnPortalClaim entity by IDs.
func (rpc *ReturnPortalCreate) AddReturnPortalClaimIDs(ids ...pulid.ID) *ReturnPortalCreate {
	rpc.mutation.AddReturnPortalClaimIDs(ids...)
	return rpc
}

// AddReturnPortalClaim adds the "return_portal_claim" edges to the ReturnPortalClaim entity.
func (rpc *ReturnPortalCreate) AddReturnPortalClaim(r ...*ReturnPortalClaim) *ReturnPortalCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpc.AddReturnPortalClaimIDs(ids...)
}

// AddReturnLocationIDs adds the "return_location" edge to the Location entity by IDs.
func (rpc *ReturnPortalCreate) AddReturnLocationIDs(ids ...pulid.ID) *ReturnPortalCreate {
	rpc.mutation.AddReturnLocationIDs(ids...)
	return rpc
}

// AddReturnLocation adds the "return_location" edges to the Location entity.
func (rpc *ReturnPortalCreate) AddReturnLocation(l ...*Location) *ReturnPortalCreate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rpc.AddReturnLocationIDs(ids...)
}

// AddDeliveryOptionIDs adds the "delivery_options" edge to the DeliveryOption entity by IDs.
func (rpc *ReturnPortalCreate) AddDeliveryOptionIDs(ids ...pulid.ID) *ReturnPortalCreate {
	rpc.mutation.AddDeliveryOptionIDs(ids...)
	return rpc
}

// AddDeliveryOptions adds the "delivery_options" edges to the DeliveryOption entity.
func (rpc *ReturnPortalCreate) AddDeliveryOptions(d ...*DeliveryOption) *ReturnPortalCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rpc.AddDeliveryOptionIDs(ids...)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (rpc *ReturnPortalCreate) SetConnectionID(id pulid.ID) *ReturnPortalCreate {
	rpc.mutation.SetConnectionID(id)
	return rpc
}

// SetNillableConnectionID sets the "connection" edge to the Connection entity by ID if the given value is not nil.
func (rpc *ReturnPortalCreate) SetNillableConnectionID(id *pulid.ID) *ReturnPortalCreate {
	if id != nil {
		rpc = rpc.SetConnectionID(*id)
	}
	return rpc
}

// SetConnection sets the "connection" edge to the Connection entity.
func (rpc *ReturnPortalCreate) SetConnection(c *Connection) *ReturnPortalCreate {
	return rpc.SetConnectionID(c.ID)
}

// SetEmailConfirmationLabelID sets the "email_confirmation_label" edge to the EmailTemplate entity by ID.
func (rpc *ReturnPortalCreate) SetEmailConfirmationLabelID(id pulid.ID) *ReturnPortalCreate {
	rpc.mutation.SetEmailConfirmationLabelID(id)
	return rpc
}

// SetNillableEmailConfirmationLabelID sets the "email_confirmation_label" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpc *ReturnPortalCreate) SetNillableEmailConfirmationLabelID(id *pulid.ID) *ReturnPortalCreate {
	if id != nil {
		rpc = rpc.SetEmailConfirmationLabelID(*id)
	}
	return rpc
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" edge to the EmailTemplate entity.
func (rpc *ReturnPortalCreate) SetEmailConfirmationLabel(e *EmailTemplate) *ReturnPortalCreate {
	return rpc.SetEmailConfirmationLabelID(e.ID)
}

// SetEmailConfirmationQrCodeID sets the "email_confirmation_qr_code" edge to the EmailTemplate entity by ID.
func (rpc *ReturnPortalCreate) SetEmailConfirmationQrCodeID(id pulid.ID) *ReturnPortalCreate {
	rpc.mutation.SetEmailConfirmationQrCodeID(id)
	return rpc
}

// SetNillableEmailConfirmationQrCodeID sets the "email_confirmation_qr_code" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpc *ReturnPortalCreate) SetNillableEmailConfirmationQrCodeID(id *pulid.ID) *ReturnPortalCreate {
	if id != nil {
		rpc = rpc.SetEmailConfirmationQrCodeID(*id)
	}
	return rpc
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" edge to the EmailTemplate entity.
func (rpc *ReturnPortalCreate) SetEmailConfirmationQrCode(e *EmailTemplate) *ReturnPortalCreate {
	return rpc.SetEmailConfirmationQrCodeID(e.ID)
}

// SetEmailReceivedID sets the "email_received" edge to the EmailTemplate entity by ID.
func (rpc *ReturnPortalCreate) SetEmailReceivedID(id pulid.ID) *ReturnPortalCreate {
	rpc.mutation.SetEmailReceivedID(id)
	return rpc
}

// SetNillableEmailReceivedID sets the "email_received" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpc *ReturnPortalCreate) SetNillableEmailReceivedID(id *pulid.ID) *ReturnPortalCreate {
	if id != nil {
		rpc = rpc.SetEmailReceivedID(*id)
	}
	return rpc
}

// SetEmailReceived sets the "email_received" edge to the EmailTemplate entity.
func (rpc *ReturnPortalCreate) SetEmailReceived(e *EmailTemplate) *ReturnPortalCreate {
	return rpc.SetEmailReceivedID(e.ID)
}

// SetEmailAcceptedID sets the "email_accepted" edge to the EmailTemplate entity by ID.
func (rpc *ReturnPortalCreate) SetEmailAcceptedID(id pulid.ID) *ReturnPortalCreate {
	rpc.mutation.SetEmailAcceptedID(id)
	return rpc
}

// SetNillableEmailAcceptedID sets the "email_accepted" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpc *ReturnPortalCreate) SetNillableEmailAcceptedID(id *pulid.ID) *ReturnPortalCreate {
	if id != nil {
		rpc = rpc.SetEmailAcceptedID(*id)
	}
	return rpc
}

// SetEmailAccepted sets the "email_accepted" edge to the EmailTemplate entity.
func (rpc *ReturnPortalCreate) SetEmailAccepted(e *EmailTemplate) *ReturnPortalCreate {
	return rpc.SetEmailAcceptedID(e.ID)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (rpc *ReturnPortalCreate) AddReturnColliIDs(ids ...pulid.ID) *ReturnPortalCreate {
	rpc.mutation.AddReturnColliIDs(ids...)
	return rpc
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (rpc *ReturnPortalCreate) AddReturnColli(r ...*ReturnColli) *ReturnPortalCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpc.AddReturnColliIDs(ids...)
}

// Mutation returns the ReturnPortalMutation object of the builder.
func (rpc *ReturnPortalCreate) Mutation() *ReturnPortalMutation {
	return rpc.mutation
}

// Save creates the ReturnPortal in the database.
func (rpc *ReturnPortalCreate) Save(ctx context.Context) (*ReturnPortal, error) {
	if err := rpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rpc.sqlSave, rpc.mutation, rpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *ReturnPortalCreate) SaveX(ctx context.Context) *ReturnPortal {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpc *ReturnPortalCreate) Exec(ctx context.Context) error {
	_, err := rpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpc *ReturnPortalCreate) ExecX(ctx context.Context) {
	if err := rpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpc *ReturnPortalCreate) defaults() error {
	if _, ok := rpc.mutation.ReturnOpenHours(); !ok {
		v := returnportal.DefaultReturnOpenHours
		rpc.mutation.SetReturnOpenHours(v)
	}
	if _, ok := rpc.mutation.AutomaticallyAccept(); !ok {
		v := returnportal.DefaultAutomaticallyAccept
		rpc.mutation.SetAutomaticallyAccept(v)
	}
	if _, ok := rpc.mutation.ID(); !ok {
		if returnportal.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized returnportal.DefaultID (forgotten import ent/runtime?)")
		}
		v := returnportal.DefaultID()
		rpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rpc *ReturnPortalCreate) check() error {
	if _, ok := rpc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ReturnPortal.tenant_id"`)}
	}
	if _, ok := rpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ReturnPortal.name"`)}
	}
	if _, ok := rpc.mutation.ReturnOpenHours(); !ok {
		return &ValidationError{Name: "return_open_hours", err: errors.New(`ent: missing required field "ReturnPortal.return_open_hours"`)}
	}
	if _, ok := rpc.mutation.AutomaticallyAccept(); !ok {
		return &ValidationError{Name: "automatically_accept", err: errors.New(`ent: missing required field "ReturnPortal.automatically_accept"`)}
	}
	if len(rpc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ReturnPortal.tenant"`)}
	}
	return nil
}

func (rpc *ReturnPortalCreate) sqlSave(ctx context.Context) (*ReturnPortal, error) {
	if err := rpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rpc.mutation.id = &_node.ID
	rpc.mutation.done = true
	return _node, nil
}

func (rpc *ReturnPortalCreate) createSpec() (*ReturnPortal, *sqlgraph.CreateSpec) {
	var (
		_node = &ReturnPortal{config: rpc.config}
		_spec = sqlgraph.NewCreateSpec(returnportal.Table, sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString))
	)
	_spec.OnConflict = rpc.conflict
	if id, ok := rpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rpc.mutation.Name(); ok {
		_spec.SetField(returnportal.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rpc.mutation.ReturnOpenHours(); ok {
		_spec.SetField(returnportal.FieldReturnOpenHours, field.TypeInt, value)
		_node.ReturnOpenHours = value
	}
	if value, ok := rpc.mutation.AutomaticallyAccept(); ok {
		_spec.SetField(returnportal.FieldAutomaticallyAccept, field.TypeBool, value)
		_node.AutomaticallyAccept = value
	}
	if nodes := rpc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.TenantTable,
			Columns: []string{returnportal.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.ReturnPortalClaimIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returnportal.ReturnPortalClaimTable,
			Columns: []string{returnportal.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.ReturnLocationTable,
			Columns: returnportal.ReturnLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.DeliveryOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.DeliveryOptionsTable,
			Columns: returnportal.DeliveryOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   returnportal.ConnectionTable,
			Columns: []string{returnportal.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.EmailConfirmationLabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationLabelTable,
			Columns: []string{returnportal.EmailConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_portal_email_confirmation_label = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.EmailConfirmationQrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationQrCodeTable,
			Columns: []string{returnportal.EmailConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_portal_email_confirmation_qr_code = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.EmailReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailReceivedTable,
			Columns: []string{returnportal.EmailReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_portal_email_received = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.EmailAcceptedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailAcceptedTable,
			Columns: []string{returnportal.EmailAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_portal_email_accepted = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportal.ReturnColliTable,
			Columns: []string{returnportal.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnPortal.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnPortalUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rpc *ReturnPortalCreate) OnConflict(opts ...sql.ConflictOption) *ReturnPortalUpsertOne {
	rpc.conflict = opts
	return &ReturnPortalUpsertOne{
		create: rpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnPortal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpc *ReturnPortalCreate) OnConflictColumns(columns ...string) *ReturnPortalUpsertOne {
	rpc.conflict = append(rpc.conflict, sql.ConflictColumns(columns...))
	return &ReturnPortalUpsertOne{
		create: rpc,
	}
}

type (
	// ReturnPortalUpsertOne is the builder for "upsert"-ing
	//  one ReturnPortal node.
	ReturnPortalUpsertOne struct {
		create *ReturnPortalCreate
	}

	// ReturnPortalUpsert is the "OnConflict" setter.
	ReturnPortalUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ReturnPortalUpsert) SetTenantID(v pulid.ID) *ReturnPortalUpsert {
	u.Set(returnportal.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnPortalUpsert) UpdateTenantID() *ReturnPortalUpsert {
	u.SetExcluded(returnportal.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *ReturnPortalUpsert) SetName(v string) *ReturnPortalUpsert {
	u.Set(returnportal.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReturnPortalUpsert) UpdateName() *ReturnPortalUpsert {
	u.SetExcluded(returnportal.FieldName)
	return u
}

// SetReturnOpenHours sets the "return_open_hours" field.
func (u *ReturnPortalUpsert) SetReturnOpenHours(v int) *ReturnPortalUpsert {
	u.Set(returnportal.FieldReturnOpenHours, v)
	return u
}

// UpdateReturnOpenHours sets the "return_open_hours" field to the value that was provided on create.
func (u *ReturnPortalUpsert) UpdateReturnOpenHours() *ReturnPortalUpsert {
	u.SetExcluded(returnportal.FieldReturnOpenHours)
	return u
}

// AddReturnOpenHours adds v to the "return_open_hours" field.
func (u *ReturnPortalUpsert) AddReturnOpenHours(v int) *ReturnPortalUpsert {
	u.Add(returnportal.FieldReturnOpenHours, v)
	return u
}

// SetAutomaticallyAccept sets the "automatically_accept" field.
func (u *ReturnPortalUpsert) SetAutomaticallyAccept(v bool) *ReturnPortalUpsert {
	u.Set(returnportal.FieldAutomaticallyAccept, v)
	return u
}

// UpdateAutomaticallyAccept sets the "automatically_accept" field to the value that was provided on create.
func (u *ReturnPortalUpsert) UpdateAutomaticallyAccept() *ReturnPortalUpsert {
	u.SetExcluded(returnportal.FieldAutomaticallyAccept)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReturnPortal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returnportal.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnPortalUpsertOne) UpdateNewValues() *ReturnPortalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(returnportal.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnPortal.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReturnPortalUpsertOne) Ignore() *ReturnPortalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnPortalUpsertOne) DoNothing() *ReturnPortalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnPortalCreate.OnConflict
// documentation for more info.
func (u *ReturnPortalUpsertOne) Update(set func(*ReturnPortalUpsert)) *ReturnPortalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnPortalUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnPortalUpsertOne) SetTenantID(v pulid.ID) *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnPortalUpsertOne) UpdateTenantID() *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *ReturnPortalUpsertOne) SetName(v string) *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReturnPortalUpsertOne) UpdateName() *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.UpdateName()
	})
}

// SetReturnOpenHours sets the "return_open_hours" field.
func (u *ReturnPortalUpsertOne) SetReturnOpenHours(v int) *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.SetReturnOpenHours(v)
	})
}

// AddReturnOpenHours adds v to the "return_open_hours" field.
func (u *ReturnPortalUpsertOne) AddReturnOpenHours(v int) *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.AddReturnOpenHours(v)
	})
}

// UpdateReturnOpenHours sets the "return_open_hours" field to the value that was provided on create.
func (u *ReturnPortalUpsertOne) UpdateReturnOpenHours() *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.UpdateReturnOpenHours()
	})
}

// SetAutomaticallyAccept sets the "automatically_accept" field.
func (u *ReturnPortalUpsertOne) SetAutomaticallyAccept(v bool) *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.SetAutomaticallyAccept(v)
	})
}

// UpdateAutomaticallyAccept sets the "automatically_accept" field to the value that was provided on create.
func (u *ReturnPortalUpsertOne) UpdateAutomaticallyAccept() *ReturnPortalUpsertOne {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.UpdateAutomaticallyAccept()
	})
}

// Exec executes the query.
func (u *ReturnPortalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnPortalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnPortalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReturnPortalUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReturnPortalUpsertOne.ID is not supported by MySQL driver. Use ReturnPortalUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReturnPortalUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReturnPortalCreateBulk is the builder for creating many ReturnPortal entities in bulk.
type ReturnPortalCreateBulk struct {
	config
	err      error
	builders []*ReturnPortalCreate
	conflict []sql.ConflictOption
}

// Save creates the ReturnPortal entities in the database.
func (rpcb *ReturnPortalCreateBulk) Save(ctx context.Context) ([]*ReturnPortal, error) {
	if rpcb.err != nil {
		return nil, rpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*ReturnPortal, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReturnPortalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *ReturnPortalCreateBulk) SaveX(ctx context.Context) []*ReturnPortal {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcb *ReturnPortalCreateBulk) Exec(ctx context.Context) error {
	_, err := rpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcb *ReturnPortalCreateBulk) ExecX(ctx context.Context) {
	if err := rpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnPortal.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnPortalUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rpcb *ReturnPortalCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReturnPortalUpsertBulk {
	rpcb.conflict = opts
	return &ReturnPortalUpsertBulk{
		create: rpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnPortal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpcb *ReturnPortalCreateBulk) OnConflictColumns(columns ...string) *ReturnPortalUpsertBulk {
	rpcb.conflict = append(rpcb.conflict, sql.ConflictColumns(columns...))
	return &ReturnPortalUpsertBulk{
		create: rpcb,
	}
}

// ReturnPortalUpsertBulk is the builder for "upsert"-ing
// a bulk of ReturnPortal nodes.
type ReturnPortalUpsertBulk struct {
	create *ReturnPortalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReturnPortal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returnportal.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnPortalUpsertBulk) UpdateNewValues() *ReturnPortalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(returnportal.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnPortal.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReturnPortalUpsertBulk) Ignore() *ReturnPortalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnPortalUpsertBulk) DoNothing() *ReturnPortalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnPortalCreateBulk.OnConflict
// documentation for more info.
func (u *ReturnPortalUpsertBulk) Update(set func(*ReturnPortalUpsert)) *ReturnPortalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnPortalUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnPortalUpsertBulk) SetTenantID(v pulid.ID) *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnPortalUpsertBulk) UpdateTenantID() *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *ReturnPortalUpsertBulk) SetName(v string) *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReturnPortalUpsertBulk) UpdateName() *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.UpdateName()
	})
}

// SetReturnOpenHours sets the "return_open_hours" field.
func (u *ReturnPortalUpsertBulk) SetReturnOpenHours(v int) *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.SetReturnOpenHours(v)
	})
}

// AddReturnOpenHours adds v to the "return_open_hours" field.
func (u *ReturnPortalUpsertBulk) AddReturnOpenHours(v int) *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.AddReturnOpenHours(v)
	})
}

// UpdateReturnOpenHours sets the "return_open_hours" field to the value that was provided on create.
func (u *ReturnPortalUpsertBulk) UpdateReturnOpenHours() *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.UpdateReturnOpenHours()
	})
}

// SetAutomaticallyAccept sets the "automatically_accept" field.
func (u *ReturnPortalUpsertBulk) SetAutomaticallyAccept(v bool) *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.SetAutomaticallyAccept(v)
	})
}

// UpdateAutomaticallyAccept sets the "automatically_accept" field to the value that was provided on create.
func (u *ReturnPortalUpsertBulk) UpdateAutomaticallyAccept() *ReturnPortalUpsertBulk {
	return u.Update(func(s *ReturnPortalUpsert) {
		s.UpdateAutomaticallyAccept()
	})
}

// Exec executes the query.
func (u *ReturnPortalUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReturnPortalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnPortalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnPortalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
