// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tenant is the model entity for the Tenant schema.
type Tenant struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// VatNumber holds the value of the "vat_number" field.
	VatNumber string `json:"vat_number,omitempty"`
	// InvoiceReference holds the value of the "invoice_reference" field.
	InvoiceReference string `json:"invoice_reference,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenantQuery when eager-loading is set.
	Edges                   TenantEdges `json:"edges"`
	plan_tenant             *pulid.ID
	tenant_company_address  *pulid.ID
	tenant_default_language *pulid.ID
	tenant_billing_contact  *pulid.ID
	tenant_admin_contact    *pulid.ID
	selectValues            sql.SelectValues
}

// TenantEdges holds the relations/edges for other nodes in the graph.
type TenantEdges struct {
	// ConnectOptionCarriers holds the value of the connect_option_carriers edge.
	ConnectOptionCarriers []*ConnectOptionCarrier `json:"connect_option_carriers,omitempty"`
	// ConnectOptionPlatforms holds the value of the connect_option_platforms edge.
	ConnectOptionPlatforms []*ConnectOptionPlatform `json:"connect_option_platforms,omitempty"`
	// Plan holds the value of the plan edge.
	Plan *Plan `json:"plan,omitempty"`
	// CompanyAddress holds the value of the company_address edge.
	CompanyAddress *Address `json:"company_address,omitempty"`
	// DefaultLanguage holds the value of the default_language edge.
	DefaultLanguage *Language `json:"default_language,omitempty"`
	// BillingContact holds the value of the billing_contact edge.
	BillingContact *Contact `json:"billing_contact,omitempty"`
	// AdminContact holds the value of the admin_contact edge.
	AdminContact *Contact `json:"admin_contact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedConnectOptionCarriers  map[string][]*ConnectOptionCarrier
	namedConnectOptionPlatforms map[string][]*ConnectOptionPlatform
}

// ConnectOptionCarriersOrErr returns the ConnectOptionCarriers value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) ConnectOptionCarriersOrErr() ([]*ConnectOptionCarrier, error) {
	if e.loadedTypes[0] {
		return e.ConnectOptionCarriers, nil
	}
	return nil, &NotLoadedError{edge: "connect_option_carriers"}
}

// ConnectOptionPlatformsOrErr returns the ConnectOptionPlatforms value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) ConnectOptionPlatformsOrErr() ([]*ConnectOptionPlatform, error) {
	if e.loadedTypes[1] {
		return e.ConnectOptionPlatforms, nil
	}
	return nil, &NotLoadedError{edge: "connect_option_platforms"}
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantEdges) PlanOrErr() (*Plan, error) {
	if e.Plan != nil {
		return e.Plan, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: plan.Label}
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// CompanyAddressOrErr returns the CompanyAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantEdges) CompanyAddressOrErr() (*Address, error) {
	if e.CompanyAddress != nil {
		return e.CompanyAddress, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "company_address"}
}

// DefaultLanguageOrErr returns the DefaultLanguage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantEdges) DefaultLanguageOrErr() (*Language, error) {
	if e.DefaultLanguage != nil {
		return e.DefaultLanguage, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "default_language"}
}

// BillingContactOrErr returns the BillingContact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantEdges) BillingContactOrErr() (*Contact, error) {
	if e.BillingContact != nil {
		return e.BillingContact, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: contact.Label}
	}
	return nil, &NotLoadedError{edge: "billing_contact"}
}

// AdminContactOrErr returns the AdminContact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantEdges) AdminContactOrErr() (*Contact, error) {
	if e.AdminContact != nil {
		return e.AdminContact, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: contact.Label}
	}
	return nil, &NotLoadedError{edge: "admin_contact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			values[i] = new(pulid.ID)
		case tenant.FieldName, tenant.FieldVatNumber, tenant.FieldInvoiceReference:
			values[i] = new(sql.NullString)
		case tenant.ForeignKeys[0]: // plan_tenant
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case tenant.ForeignKeys[1]: // tenant_company_address
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case tenant.ForeignKeys[2]: // tenant_default_language
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case tenant.ForeignKeys[3]: // tenant_billing_contact
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case tenant.ForeignKeys[4]: // tenant_admin_contact
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenant fields.
func (t *Tenant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tenant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tenant.FieldVatNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vat_number", values[i])
			} else if value.Valid {
				t.VatNumber = value.String
			}
		case tenant.FieldInvoiceReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_reference", values[i])
			} else if value.Valid {
				t.InvoiceReference = value.String
			}
		case tenant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plan_tenant", values[i])
			} else if value.Valid {
				t.plan_tenant = new(pulid.ID)
				*t.plan_tenant = *value.S.(*pulid.ID)
			}
		case tenant.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_company_address", values[i])
			} else if value.Valid {
				t.tenant_company_address = new(pulid.ID)
				*t.tenant_company_address = *value.S.(*pulid.ID)
			}
		case tenant.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_default_language", values[i])
			} else if value.Valid {
				t.tenant_default_language = new(pulid.ID)
				*t.tenant_default_language = *value.S.(*pulid.ID)
			}
		case tenant.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_billing_contact", values[i])
			} else if value.Valid {
				t.tenant_billing_contact = new(pulid.ID)
				*t.tenant_billing_contact = *value.S.(*pulid.ID)
			}
		case tenant.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_admin_contact", values[i])
			} else if value.Valid {
				t.tenant_admin_contact = new(pulid.ID)
				*t.tenant_admin_contact = *value.S.(*pulid.ID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tenant.
// This includes values selected through modifiers, order, etc.
func (t *Tenant) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryConnectOptionCarriers queries the "connect_option_carriers" edge of the Tenant entity.
func (t *Tenant) QueryConnectOptionCarriers() *ConnectOptionCarrierQuery {
	return NewTenantClient(t.config).QueryConnectOptionCarriers(t)
}

// QueryConnectOptionPlatforms queries the "connect_option_platforms" edge of the Tenant entity.
func (t *Tenant) QueryConnectOptionPlatforms() *ConnectOptionPlatformQuery {
	return NewTenantClient(t.config).QueryConnectOptionPlatforms(t)
}

// QueryPlan queries the "plan" edge of the Tenant entity.
func (t *Tenant) QueryPlan() *PlanQuery {
	return NewTenantClient(t.config).QueryPlan(t)
}

// QueryCompanyAddress queries the "company_address" edge of the Tenant entity.
func (t *Tenant) QueryCompanyAddress() *AddressQuery {
	return NewTenantClient(t.config).QueryCompanyAddress(t)
}

// QueryDefaultLanguage queries the "default_language" edge of the Tenant entity.
func (t *Tenant) QueryDefaultLanguage() *LanguageQuery {
	return NewTenantClient(t.config).QueryDefaultLanguage(t)
}

// QueryBillingContact queries the "billing_contact" edge of the Tenant entity.
func (t *Tenant) QueryBillingContact() *ContactQuery {
	return NewTenantClient(t.config).QueryBillingContact(t)
}

// QueryAdminContact queries the "admin_contact" edge of the Tenant entity.
func (t *Tenant) QueryAdminContact() *ContactQuery {
	return NewTenantClient(t.config).QueryAdminContact(t)
}

// Update returns a builder for updating this Tenant.
// Note that you need to call Tenant.Unwrap() before calling this method if this Tenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tenant) Update() *TenantUpdateOne {
	return NewTenantClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tenant) Unwrap() *Tenant {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tenant is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tenant) String() string {
	var builder strings.Builder
	builder.WriteString("Tenant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("vat_number=")
	builder.WriteString(t.VatNumber)
	builder.WriteString(", ")
	builder.WriteString("invoice_reference=")
	builder.WriteString(t.InvoiceReference)
	builder.WriteByte(')')
	return builder.String()
}

// NamedConnectOptionCarriers returns the ConnectOptionCarriers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tenant) NamedConnectOptionCarriers(name string) ([]*ConnectOptionCarrier, error) {
	if t.Edges.namedConnectOptionCarriers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedConnectOptionCarriers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tenant) appendNamedConnectOptionCarriers(name string, edges ...*ConnectOptionCarrier) {
	if t.Edges.namedConnectOptionCarriers == nil {
		t.Edges.namedConnectOptionCarriers = make(map[string][]*ConnectOptionCarrier)
	}
	if len(edges) == 0 {
		t.Edges.namedConnectOptionCarriers[name] = []*ConnectOptionCarrier{}
	} else {
		t.Edges.namedConnectOptionCarriers[name] = append(t.Edges.namedConnectOptionCarriers[name], edges...)
	}
}

// NamedConnectOptionPlatforms returns the ConnectOptionPlatforms named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tenant) NamedConnectOptionPlatforms(name string) ([]*ConnectOptionPlatform, error) {
	if t.Edges.namedConnectOptionPlatforms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedConnectOptionPlatforms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tenant) appendNamedConnectOptionPlatforms(name string, edges ...*ConnectOptionPlatform) {
	if t.Edges.namedConnectOptionPlatforms == nil {
		t.Edges.namedConnectOptionPlatforms = make(map[string][]*ConnectOptionPlatform)
	}
	if len(edges) == 0 {
		t.Edges.namedConnectOptionPlatforms[name] = []*ConnectOptionPlatform{}
	} else {
		t.Edges.namedConnectOptionPlatforms[name] = append(t.Edges.namedConnectOptionPlatforms[name], edges...)
	}
}

// Tenants is a parsable slice of Tenant.
type Tenants []*Tenant
