// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AddressGlobal is the model entity for the AddressGlobal schema.
type AddressGlobal struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// UniquenessID holds the value of the "uniqueness_id" field.
	UniquenessID string `json:"uniqueness_id,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// AddressOne holds the value of the "address_one" field.
	AddressOne string `json:"address_one,omitempty"`
	// AddressTwo holds the value of the "address_two" field.
	AddressTwo string `json:"address_two,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Zip holds the value of the "zip" field.
	Zip string `json:"zip,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressGlobalQuery when eager-loading is set.
	Edges                                  AddressGlobalEdges `json:"edges"`
	address_global_country                 *pulid.ID
	parcel_shop_address                    *pulid.ID
	parcel_shop_bring_address_delivery     *pulid.ID
	parcel_shop_post_nord_address_delivery *pulid.ID
	selectValues                           sql.SelectValues
}

// AddressGlobalEdges holds the relations/edges for other nodes in the graph.
type AddressGlobalEdges struct {
	// ParcelShopPostNordDelivery holds the value of the parcel_shop_post_nord_delivery edge.
	ParcelShopPostNordDelivery *ParcelShopPostNord `json:"parcel_shop_post_nord_delivery,omitempty"`
	// ParcelShopBringDelivery holds the value of the parcel_shop_bring_delivery edge.
	ParcelShopBringDelivery *ParcelShopBring `json:"parcel_shop_bring_delivery,omitempty"`
	// ParcelShop holds the value of the parcel_shop edge.
	ParcelShop *ParcelShop `json:"parcel_shop,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// ParcelShopPostNordDeliveryOrErr returns the ParcelShopPostNordDelivery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressGlobalEdges) ParcelShopPostNordDeliveryOrErr() (*ParcelShopPostNord, error) {
	if e.ParcelShopPostNordDelivery != nil {
		return e.ParcelShopPostNordDelivery, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: parcelshoppostnord.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop_post_nord_delivery"}
}

// ParcelShopBringDeliveryOrErr returns the ParcelShopBringDelivery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressGlobalEdges) ParcelShopBringDeliveryOrErr() (*ParcelShopBring, error) {
	if e.ParcelShopBringDelivery != nil {
		return e.ParcelShopBringDelivery, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: parcelshopbring.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop_bring_delivery"}
}

// ParcelShopOrErr returns the ParcelShop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressGlobalEdges) ParcelShopOrErr() (*ParcelShop, error) {
	if e.ParcelShop != nil {
		return e.ParcelShop, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: parcelshop.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressGlobalEdges) CountryOrErr() (*Country, error) {
	if e.Country != nil {
		return e.Country, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: country.Label}
	}
	return nil, &NotLoadedError{edge: "country"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AddressGlobal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case addressglobal.FieldID:
			values[i] = new(pulid.ID)
		case addressglobal.FieldLatitude, addressglobal.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case addressglobal.FieldUniquenessID, addressglobal.FieldCompany, addressglobal.FieldAddressOne, addressglobal.FieldAddressTwo, addressglobal.FieldCity, addressglobal.FieldState, addressglobal.FieldZip:
			values[i] = new(sql.NullString)
		case addressglobal.ForeignKeys[0]: // address_global_country
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case addressglobal.ForeignKeys[1]: // parcel_shop_address
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case addressglobal.ForeignKeys[2]: // parcel_shop_bring_address_delivery
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case addressglobal.ForeignKeys[3]: // parcel_shop_post_nord_address_delivery
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AddressGlobal fields.
func (ag *AddressGlobal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case addressglobal.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ag.ID = *value
			}
		case addressglobal.FieldUniquenessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uniqueness_id", values[i])
			} else if value.Valid {
				ag.UniquenessID = value.String
			}
		case addressglobal.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				ag.Company = value.String
			}
		case addressglobal.FieldAddressOne:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_one", values[i])
			} else if value.Valid {
				ag.AddressOne = value.String
			}
		case addressglobal.FieldAddressTwo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_two", values[i])
			} else if value.Valid {
				ag.AddressTwo = value.String
			}
		case addressglobal.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ag.City = value.String
			}
		case addressglobal.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ag.State = value.String
			}
		case addressglobal.FieldZip:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip", values[i])
			} else if value.Valid {
				ag.Zip = value.String
			}
		case addressglobal.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				ag.Latitude = value.Float64
			}
		case addressglobal.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				ag.Longitude = value.Float64
			}
		case addressglobal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field address_global_country", values[i])
			} else if value.Valid {
				ag.address_global_country = new(pulid.ID)
				*ag.address_global_country = *value.S.(*pulid.ID)
			}
		case addressglobal.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parcel_shop_address", values[i])
			} else if value.Valid {
				ag.parcel_shop_address = new(pulid.ID)
				*ag.parcel_shop_address = *value.S.(*pulid.ID)
			}
		case addressglobal.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parcel_shop_bring_address_delivery", values[i])
			} else if value.Valid {
				ag.parcel_shop_bring_address_delivery = new(pulid.ID)
				*ag.parcel_shop_bring_address_delivery = *value.S.(*pulid.ID)
			}
		case addressglobal.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parcel_shop_post_nord_address_delivery", values[i])
			} else if value.Valid {
				ag.parcel_shop_post_nord_address_delivery = new(pulid.ID)
				*ag.parcel_shop_post_nord_address_delivery = *value.S.(*pulid.ID)
			}
		default:
			ag.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AddressGlobal.
// This includes values selected through modifiers, order, etc.
func (ag *AddressGlobal) Value(name string) (ent.Value, error) {
	return ag.selectValues.Get(name)
}

// QueryParcelShopPostNordDelivery queries the "parcel_shop_post_nord_delivery" edge of the AddressGlobal entity.
func (ag *AddressGlobal) QueryParcelShopPostNordDelivery() *ParcelShopPostNordQuery {
	return NewAddressGlobalClient(ag.config).QueryParcelShopPostNordDelivery(ag)
}

// QueryParcelShopBringDelivery queries the "parcel_shop_bring_delivery" edge of the AddressGlobal entity.
func (ag *AddressGlobal) QueryParcelShopBringDelivery() *ParcelShopBringQuery {
	return NewAddressGlobalClient(ag.config).QueryParcelShopBringDelivery(ag)
}

// QueryParcelShop queries the "parcel_shop" edge of the AddressGlobal entity.
func (ag *AddressGlobal) QueryParcelShop() *ParcelShopQuery {
	return NewAddressGlobalClient(ag.config).QueryParcelShop(ag)
}

// QueryCountry queries the "country" edge of the AddressGlobal entity.
func (ag *AddressGlobal) QueryCountry() *CountryQuery {
	return NewAddressGlobalClient(ag.config).QueryCountry(ag)
}

// Update returns a builder for updating this AddressGlobal.
// Note that you need to call AddressGlobal.Unwrap() before calling this method if this AddressGlobal
// was returned from a transaction, and the transaction was committed or rolled back.
func (ag *AddressGlobal) Update() *AddressGlobalUpdateOne {
	return NewAddressGlobalClient(ag.config).UpdateOne(ag)
}

// Unwrap unwraps the AddressGlobal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ag *AddressGlobal) Unwrap() *AddressGlobal {
	_tx, ok := ag.config.driver.(*txDriver)
	if !ok {
		panic("ent: AddressGlobal is not a transactional entity")
	}
	ag.config.driver = _tx.drv
	return ag
}

// String implements the fmt.Stringer.
func (ag *AddressGlobal) String() string {
	var builder strings.Builder
	builder.WriteString("AddressGlobal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ag.ID))
	builder.WriteString("uniqueness_id=")
	builder.WriteString(ag.UniquenessID)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(ag.Company)
	builder.WriteString(", ")
	builder.WriteString("address_one=")
	builder.WriteString(ag.AddressOne)
	builder.WriteString(", ")
	builder.WriteString("address_two=")
	builder.WriteString(ag.AddressTwo)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(ag.City)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(ag.State)
	builder.WriteString(", ")
	builder.WriteString("zip=")
	builder.WriteString(ag.Zip)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", ag.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", ag.Longitude))
	builder.WriteByte(')')
	return builder.String()
}

// AddressGlobals is a parsable slice of AddressGlobal.
type AddressGlobals []*AddressGlobal
