// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactUpdate is the builder for updating Contact entities.
type ContactUpdate struct {
	config
	hooks    []Hook
	mutation *ContactMutation
}

// Where appends a list predicates to the ContactUpdate builder.
func (cu *ContactUpdate) Where(ps ...predicate.Contact) *ContactUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTenantID sets the "tenant_id" field.
func (cu *ContactUpdate) SetTenantID(pu pulid.ID) *ContactUpdate {
	cu.mutation.SetTenantID(pu)
	return cu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableTenantID(pu *pulid.ID) *ContactUpdate {
	if pu != nil {
		cu.SetTenantID(*pu)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ContactUpdate) SetName(s string) *ContactUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableName(s *string) *ContactUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetSurname sets the "surname" field.
func (cu *ContactUpdate) SetSurname(s string) *ContactUpdate {
	cu.mutation.SetSurname(s)
	return cu
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableSurname(s *string) *ContactUpdate {
	if s != nil {
		cu.SetSurname(*s)
	}
	return cu
}

// SetEmail sets the "email" field.
func (cu *ContactUpdate) SetEmail(s string) *ContactUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *ContactUpdate) SetNillableEmail(s *string) *ContactUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// SetPhoneNumber sets the "phone_number" field.
func (cu *ContactUpdate) SetPhoneNumber(s string) *ContactUpdate {
	cu.mutation.SetPhoneNumber(s)
	return cu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cu *ContactUpdate) SetNillablePhoneNumber(s *string) *ContactUpdate {
	if s != nil {
		cu.SetPhoneNumber(*s)
	}
	return cu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cu *ContactUpdate) SetTenant(t *Tenant) *ContactUpdate {
	return cu.SetTenantID(t.ID)
}

// AddBillingContactIDs adds the "billing_contact" edge to the Tenant entity by IDs.
func (cu *ContactUpdate) AddBillingContactIDs(ids ...pulid.ID) *ContactUpdate {
	cu.mutation.AddBillingContactIDs(ids...)
	return cu
}

// AddBillingContact adds the "billing_contact" edges to the Tenant entity.
func (cu *ContactUpdate) AddBillingContact(t ...*Tenant) *ContactUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddBillingContactIDs(ids...)
}

// AddAdminContactIDs adds the "admin_contact" edge to the Tenant entity by IDs.
func (cu *ContactUpdate) AddAdminContactIDs(ids ...pulid.ID) *ContactUpdate {
	cu.mutation.AddAdminContactIDs(ids...)
	return cu
}

// AddAdminContact adds the "admin_contact" edges to the Tenant entity.
func (cu *ContactUpdate) AddAdminContact(t ...*Tenant) *ContactUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddAdminContactIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (cu *ContactUpdate) Mutation() *ContactMutation {
	return cu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cu *ContactUpdate) ClearTenant() *ContactUpdate {
	cu.mutation.ClearTenant()
	return cu
}

// ClearBillingContact clears all "billing_contact" edges to the Tenant entity.
func (cu *ContactUpdate) ClearBillingContact() *ContactUpdate {
	cu.mutation.ClearBillingContact()
	return cu
}

// RemoveBillingContactIDs removes the "billing_contact" edge to Tenant entities by IDs.
func (cu *ContactUpdate) RemoveBillingContactIDs(ids ...pulid.ID) *ContactUpdate {
	cu.mutation.RemoveBillingContactIDs(ids...)
	return cu
}

// RemoveBillingContact removes "billing_contact" edges to Tenant entities.
func (cu *ContactUpdate) RemoveBillingContact(t ...*Tenant) *ContactUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveBillingContactIDs(ids...)
}

// ClearAdminContact clears all "admin_contact" edges to the Tenant entity.
func (cu *ContactUpdate) ClearAdminContact() *ContactUpdate {
	cu.mutation.ClearAdminContact()
	return cu
}

// RemoveAdminContactIDs removes the "admin_contact" edge to Tenant entities by IDs.
func (cu *ContactUpdate) RemoveAdminContactIDs(ids ...pulid.ID) *ContactUpdate {
	cu.mutation.RemoveAdminContactIDs(ids...)
	return cu
}

// RemoveAdminContact removes "admin_contact" edges to Tenant entities.
func (cu *ContactUpdate) RemoveAdminContact(t ...*Tenant) *ContactUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveAdminContactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContactUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContactUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContactUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContactUpdate) check() error {
	if cu.mutation.TenantCleared() && len(cu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Contact.tenant"`)
	}
	return nil
}

func (cu *ContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(contact.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Surname(); ok {
		_spec.SetField(contact.FieldSurname, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.PhoneNumber(); ok {
		_spec.SetField(contact.FieldPhoneNumber, field.TypeString, value)
	}
	if cu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.TenantTable,
			Columns: []string{contact.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.TenantTable,
			Columns: []string{contact.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BillingContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.BillingContactTable,
			Columns: []string{contact.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBillingContactIDs(); len(nodes) > 0 && !cu.mutation.BillingContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.BillingContactTable,
			Columns: []string{contact.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BillingContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.BillingContactTable,
			Columns: []string{contact.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AdminContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.AdminContactTable,
			Columns: []string{contact.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAdminContactIDs(); len(nodes) > 0 && !cu.mutation.AdminContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.AdminContactTable,
			Columns: []string{contact.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AdminContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.AdminContactTable,
			Columns: []string{contact.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContactUpdateOne is the builder for updating a single Contact entity.
type ContactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactMutation
}

// SetTenantID sets the "tenant_id" field.
func (cuo *ContactUpdateOne) SetTenantID(pu pulid.ID) *ContactUpdateOne {
	cuo.mutation.SetTenantID(pu)
	return cuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableTenantID(pu *pulid.ID) *ContactUpdateOne {
	if pu != nil {
		cuo.SetTenantID(*pu)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ContactUpdateOne) SetName(s string) *ContactUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableName(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetSurname sets the "surname" field.
func (cuo *ContactUpdateOne) SetSurname(s string) *ContactUpdateOne {
	cuo.mutation.SetSurname(s)
	return cuo
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableSurname(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetSurname(*s)
	}
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *ContactUpdateOne) SetEmail(s string) *ContactUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableEmail(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cuo *ContactUpdateOne) SetPhoneNumber(s string) *ContactUpdateOne {
	cuo.mutation.SetPhoneNumber(s)
	return cuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillablePhoneNumber(s *string) *ContactUpdateOne {
	if s != nil {
		cuo.SetPhoneNumber(*s)
	}
	return cuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cuo *ContactUpdateOne) SetTenant(t *Tenant) *ContactUpdateOne {
	return cuo.SetTenantID(t.ID)
}

// AddBillingContactIDs adds the "billing_contact" edge to the Tenant entity by IDs.
func (cuo *ContactUpdateOne) AddBillingContactIDs(ids ...pulid.ID) *ContactUpdateOne {
	cuo.mutation.AddBillingContactIDs(ids...)
	return cuo
}

// AddBillingContact adds the "billing_contact" edges to the Tenant entity.
func (cuo *ContactUpdateOne) AddBillingContact(t ...*Tenant) *ContactUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddBillingContactIDs(ids...)
}

// AddAdminContactIDs adds the "admin_contact" edge to the Tenant entity by IDs.
func (cuo *ContactUpdateOne) AddAdminContactIDs(ids ...pulid.ID) *ContactUpdateOne {
	cuo.mutation.AddAdminContactIDs(ids...)
	return cuo
}

// AddAdminContact adds the "admin_contact" edges to the Tenant entity.
func (cuo *ContactUpdateOne) AddAdminContact(t ...*Tenant) *ContactUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddAdminContactIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (cuo *ContactUpdateOne) Mutation() *ContactMutation {
	return cuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cuo *ContactUpdateOne) ClearTenant() *ContactUpdateOne {
	cuo.mutation.ClearTenant()
	return cuo
}

// ClearBillingContact clears all "billing_contact" edges to the Tenant entity.
func (cuo *ContactUpdateOne) ClearBillingContact() *ContactUpdateOne {
	cuo.mutation.ClearBillingContact()
	return cuo
}

// RemoveBillingContactIDs removes the "billing_contact" edge to Tenant entities by IDs.
func (cuo *ContactUpdateOne) RemoveBillingContactIDs(ids ...pulid.ID) *ContactUpdateOne {
	cuo.mutation.RemoveBillingContactIDs(ids...)
	return cuo
}

// RemoveBillingContact removes "billing_contact" edges to Tenant entities.
func (cuo *ContactUpdateOne) RemoveBillingContact(t ...*Tenant) *ContactUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveBillingContactIDs(ids...)
}

// ClearAdminContact clears all "admin_contact" edges to the Tenant entity.
func (cuo *ContactUpdateOne) ClearAdminContact() *ContactUpdateOne {
	cuo.mutation.ClearAdminContact()
	return cuo
}

// RemoveAdminContactIDs removes the "admin_contact" edge to Tenant entities by IDs.
func (cuo *ContactUpdateOne) RemoveAdminContactIDs(ids ...pulid.ID) *ContactUpdateOne {
	cuo.mutation.RemoveAdminContactIDs(ids...)
	return cuo
}

// RemoveAdminContact removes "admin_contact" edges to Tenant entities.
func (cuo *ContactUpdateOne) RemoveAdminContact(t ...*Tenant) *ContactUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveAdminContactIDs(ids...)
}

// Where appends a list predicates to the ContactUpdate builder.
func (cuo *ContactUpdateOne) Where(ps ...predicate.Contact) *ContactUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContactUpdateOne) Select(field string, fields ...string) *ContactUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contact entity.
func (cuo *ContactUpdateOne) Save(ctx context.Context) (*Contact, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContactUpdateOne) SaveX(ctx context.Context) *Contact {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContactUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContactUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContactUpdateOne) check() error {
	if cuo.mutation.TenantCleared() && len(cuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Contact.tenant"`)
	}
	return nil
}

func (cuo *ContactUpdateOne) sqlSave(ctx context.Context) (_node *Contact, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contact.Table, contact.Columns, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contact.FieldID)
		for _, f := range fields {
			if !contact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(contact.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Surname(); ok {
		_spec.SetField(contact.FieldSurname, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PhoneNumber(); ok {
		_spec.SetField(contact.FieldPhoneNumber, field.TypeString, value)
	}
	if cuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.TenantTable,
			Columns: []string{contact.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.TenantTable,
			Columns: []string{contact.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BillingContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.BillingContactTable,
			Columns: []string{contact.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBillingContactIDs(); len(nodes) > 0 && !cuo.mutation.BillingContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.BillingContactTable,
			Columns: []string{contact.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BillingContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.BillingContactTable,
			Columns: []string{contact.BillingContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AdminContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.AdminContactTable,
			Columns: []string{contact.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAdminContactIDs(); len(nodes) > 0 && !cuo.mutation.AdminContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.AdminContactTable,
			Columns: []string{contact.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AdminContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.AdminContactTable,
			Columns: []string{contact.AdminContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Contact{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
