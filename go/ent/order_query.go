// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderQuery is the builder for querying Order entities.
type OrderQuery struct {
	config
	ctx                                     *QueryContext
	order                                   []order.OrderOption
	inters                                  []Interceptor
	predicates                              []predicate.Order
	withTenant                              *TenantQuery
	withOrderHistory                        *OrderHistoryQuery
	withConnection                          *ConnectionQuery
	withColli                               *ColliQuery
	withReturnColli                         *ReturnColliQuery
	withHypothesisTestDeliveryOptionRequest *HypothesisTestDeliveryOptionRequestQuery
	withPallet                              *PalletQuery
	withConsolidation                       *ConsolidationQuery
	withFKs                                 bool
	modifiers                               []func(*sql.Selector)
	loadTotal                               []func(context.Context, []*Order) error
	withNamedOrderHistory                   map[string]*OrderHistoryQuery
	withNamedColli                          map[string]*ColliQuery
	withNamedReturnColli                    map[string]*ReturnColliQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderQuery builder.
func (oq *OrderQuery) Where(ps ...predicate.Order) *OrderQuery {
	oq.predicates = append(oq.predicates, ps...)
	return oq
}

// Limit the number of records to be returned by this query.
func (oq *OrderQuery) Limit(limit int) *OrderQuery {
	oq.ctx.Limit = &limit
	return oq
}

// Offset to start from.
func (oq *OrderQuery) Offset(offset int) *OrderQuery {
	oq.ctx.Offset = &offset
	return oq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oq *OrderQuery) Unique(unique bool) *OrderQuery {
	oq.ctx.Unique = &unique
	return oq
}

// Order specifies how the records should be ordered.
func (oq *OrderQuery) Order(o ...order.OrderOption) *OrderQuery {
	oq.order = append(oq.order, o...)
	return oq
}

// QueryTenant chains the current query on the "tenant" edge.
func (oq *OrderQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.TenantTable, order.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderHistory chains the current query on the "order_history" edge.
func (oq *OrderQuery) QueryOrderHistory() *OrderHistoryQuery {
	query := (&OrderHistoryClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(orderhistory.Table, orderhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderHistoryTable, order.OrderHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnection chains the current query on the "connection" edge.
func (oq *OrderQuery) QueryConnection() *ConnectionQuery {
	query := (&ConnectionClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.ConnectionTable, order.ConnectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryColli chains the current query on the "colli" edge.
func (oq *OrderQuery) QueryColli() *ColliQuery {
	query := (&ColliClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.ColliTable, order.ColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnColli chains the current query on the "return_colli" edge.
func (oq *OrderQuery) QueryReturnColli() *ReturnColliQuery {
	query := (&ReturnColliClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.ReturnColliTable, order.ReturnColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionRequest chains the current query on the "hypothesis_test_delivery_option_request" edge.
func (oq *OrderQuery) QueryHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, order.HypothesisTestDeliveryOptionRequestTable, order.HypothesisTestDeliveryOptionRequestColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPallet chains the current query on the "pallet" edge.
func (oq *OrderQuery) QueryPallet() *PalletQuery {
	query := (&PalletClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.PalletTable, order.PalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConsolidation chains the current query on the "consolidation" edge.
func (oq *OrderQuery) QueryConsolidation() *ConsolidationQuery {
	query := (&ConsolidationClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.ConsolidationTable, order.ConsolidationColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Order entity from the query.
// Returns a *NotFoundError when no Order was found.
func (oq *OrderQuery) First(ctx context.Context) (*Order, error) {
	nodes, err := oq.Limit(1).All(setContextOp(ctx, oq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{order.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oq *OrderQuery) FirstX(ctx context.Context) *Order {
	node, err := oq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Order ID from the query.
// Returns a *NotFoundError when no Order ID was found.
func (oq *OrderQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = oq.Limit(1).IDs(setContextOp(ctx, oq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{order.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oq *OrderQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := oq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Order entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Order entity is found.
// Returns a *NotFoundError when no Order entities are found.
func (oq *OrderQuery) Only(ctx context.Context) (*Order, error) {
	nodes, err := oq.Limit(2).All(setContextOp(ctx, oq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{order.Label}
	default:
		return nil, &NotSingularError{order.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oq *OrderQuery) OnlyX(ctx context.Context) *Order {
	node, err := oq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Order ID in the query.
// Returns a *NotSingularError when more than one Order ID is found.
// Returns a *NotFoundError when no entities are found.
func (oq *OrderQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = oq.Limit(2).IDs(setContextOp(ctx, oq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{order.Label}
	default:
		err = &NotSingularError{order.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oq *OrderQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := oq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Orders.
func (oq *OrderQuery) All(ctx context.Context) ([]*Order, error) {
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryAll)
	if err := oq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Order, *OrderQuery]()
	return withInterceptors[[]*Order](ctx, oq, qr, oq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oq *OrderQuery) AllX(ctx context.Context) []*Order {
	nodes, err := oq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Order IDs.
func (oq *OrderQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if oq.ctx.Unique == nil && oq.path != nil {
		oq.Unique(true)
	}
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryIDs)
	if err = oq.Select(order.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oq *OrderQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := oq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oq *OrderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryCount)
	if err := oq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oq, querierCount[*OrderQuery](), oq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oq *OrderQuery) CountX(ctx context.Context) int {
	count, err := oq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oq *OrderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryExist)
	switch _, err := oq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oq *OrderQuery) ExistX(ctx context.Context) bool {
	exist, err := oq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oq *OrderQuery) Clone() *OrderQuery {
	if oq == nil {
		return nil
	}
	return &OrderQuery{
		config:                                  oq.config,
		ctx:                                     oq.ctx.Clone(),
		order:                                   append([]order.OrderOption{}, oq.order...),
		inters:                                  append([]Interceptor{}, oq.inters...),
		predicates:                              append([]predicate.Order{}, oq.predicates...),
		withTenant:                              oq.withTenant.Clone(),
		withOrderHistory:                        oq.withOrderHistory.Clone(),
		withConnection:                          oq.withConnection.Clone(),
		withColli:                               oq.withColli.Clone(),
		withReturnColli:                         oq.withReturnColli.Clone(),
		withHypothesisTestDeliveryOptionRequest: oq.withHypothesisTestDeliveryOptionRequest.Clone(),
		withPallet:                              oq.withPallet.Clone(),
		withConsolidation:                       oq.withConsolidation.Clone(),
		// clone intermediate query.
		sql:  oq.sql.Clone(),
		path: oq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithTenant(opts ...func(*TenantQuery)) *OrderQuery {
	query := (&TenantClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withTenant = query
	return oq
}

// WithOrderHistory tells the query-builder to eager-load the nodes that are connected to
// the "order_history" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithOrderHistory(opts ...func(*OrderHistoryQuery)) *OrderQuery {
	query := (&OrderHistoryClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withOrderHistory = query
	return oq
}

// WithConnection tells the query-builder to eager-load the nodes that are connected to
// the "connection" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithConnection(opts ...func(*ConnectionQuery)) *OrderQuery {
	query := (&ConnectionClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withConnection = query
	return oq
}

// WithColli tells the query-builder to eager-load the nodes that are connected to
// the "colli" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithColli(opts ...func(*ColliQuery)) *OrderQuery {
	query := (&ColliClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withColli = query
	return oq
}

// WithReturnColli tells the query-builder to eager-load the nodes that are connected to
// the "return_colli" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithReturnColli(opts ...func(*ReturnColliQuery)) *OrderQuery {
	query := (&ReturnColliClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withReturnColli = query
	return oq
}

// WithHypothesisTestDeliveryOptionRequest tells the query-builder to eager-load the nodes that are connected to
// the "hypothesis_test_delivery_option_request" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithHypothesisTestDeliveryOptionRequest(opts ...func(*HypothesisTestDeliveryOptionRequestQuery)) *OrderQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withHypothesisTestDeliveryOptionRequest = query
	return oq
}

// WithPallet tells the query-builder to eager-load the nodes that are connected to
// the "pallet" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithPallet(opts ...func(*PalletQuery)) *OrderQuery {
	query := (&PalletClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withPallet = query
	return oq
}

// WithConsolidation tells the query-builder to eager-load the nodes that are connected to
// the "consolidation" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithConsolidation(opts ...func(*ConsolidationQuery)) *OrderQuery {
	query := (&ConsolidationClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withConsolidation = query
	return oq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Order.Query().
//		GroupBy(order.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oq *OrderQuery) GroupBy(field string, fields ...string) *OrderGroupBy {
	oq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrderGroupBy{build: oq}
	grbuild.flds = &oq.ctx.Fields
	grbuild.label = order.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Order.Query().
//		Select(order.FieldTenantID).
//		Scan(ctx, &v)
func (oq *OrderQuery) Select(fields ...string) *OrderSelect {
	oq.ctx.Fields = append(oq.ctx.Fields, fields...)
	sbuild := &OrderSelect{OrderQuery: oq}
	sbuild.label = order.Label
	sbuild.flds, sbuild.scan = &oq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrderSelect configured with the given aggregations.
func (oq *OrderQuery) Aggregate(fns ...AggregateFunc) *OrderSelect {
	return oq.Select().Aggregate(fns...)
}

func (oq *OrderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oq); err != nil {
				return err
			}
		}
	}
	for _, f := range oq.ctx.Fields {
		if !order.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oq.path != nil {
		prev, err := oq.path(ctx)
		if err != nil {
			return err
		}
		oq.sql = prev
	}
	if order.Policy == nil {
		return errors.New("ent: uninitialized order.Policy (forgotten import ent/runtime?)")
	}
	if err := order.Policy.EvalQuery(ctx, oq); err != nil {
		return err
	}
	return nil
}

func (oq *OrderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Order, error) {
	var (
		nodes       = []*Order{}
		withFKs     = oq.withFKs
		_spec       = oq.querySpec()
		loadedTypes = [8]bool{
			oq.withTenant != nil,
			oq.withOrderHistory != nil,
			oq.withConnection != nil,
			oq.withColli != nil,
			oq.withReturnColli != nil,
			oq.withHypothesisTestDeliveryOptionRequest != nil,
			oq.withPallet != nil,
			oq.withConsolidation != nil,
		}
	)
	if oq.withConnection != nil || oq.withHypothesisTestDeliveryOptionRequest != nil || oq.withPallet != nil || oq.withConsolidation != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, order.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Order).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Order{config: oq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oq.modifiers) > 0 {
		_spec.Modifiers = oq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oq.withTenant; query != nil {
		if err := oq.loadTenant(ctx, query, nodes, nil,
			func(n *Order, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withOrderHistory; query != nil {
		if err := oq.loadOrderHistory(ctx, query, nodes,
			func(n *Order) { n.Edges.OrderHistory = []*OrderHistory{} },
			func(n *Order, e *OrderHistory) { n.Edges.OrderHistory = append(n.Edges.OrderHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withConnection; query != nil {
		if err := oq.loadConnection(ctx, query, nodes, nil,
			func(n *Order, e *Connection) { n.Edges.Connection = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withColli; query != nil {
		if err := oq.loadColli(ctx, query, nodes,
			func(n *Order) { n.Edges.Colli = []*Colli{} },
			func(n *Order, e *Colli) { n.Edges.Colli = append(n.Edges.Colli, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withReturnColli; query != nil {
		if err := oq.loadReturnColli(ctx, query, nodes,
			func(n *Order) { n.Edges.ReturnColli = []*ReturnColli{} },
			func(n *Order, e *ReturnColli) { n.Edges.ReturnColli = append(n.Edges.ReturnColli, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withHypothesisTestDeliveryOptionRequest; query != nil {
		if err := oq.loadHypothesisTestDeliveryOptionRequest(ctx, query, nodes, nil,
			func(n *Order, e *HypothesisTestDeliveryOptionRequest) {
				n.Edges.HypothesisTestDeliveryOptionRequest = e
			}); err != nil {
			return nil, err
		}
	}
	if query := oq.withPallet; query != nil {
		if err := oq.loadPallet(ctx, query, nodes, nil,
			func(n *Order, e *Pallet) { n.Edges.Pallet = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withConsolidation; query != nil {
		if err := oq.loadConsolidation(ctx, query, nodes, nil,
			func(n *Order, e *Consolidation) { n.Edges.Consolidation = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedOrderHistory {
		if err := oq.loadOrderHistory(ctx, query, nodes,
			func(n *Order) { n.appendNamedOrderHistory(name) },
			func(n *Order, e *OrderHistory) { n.appendNamedOrderHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedColli {
		if err := oq.loadColli(ctx, query, nodes,
			func(n *Order) { n.appendNamedColli(name) },
			func(n *Order, e *Colli) { n.appendNamedColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedReturnColli {
		if err := oq.loadReturnColli(ctx, query, nodes,
			func(n *Order) { n.appendNamedReturnColli(name) },
			func(n *Order, e *ReturnColli) { n.appendNamedReturnColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range oq.loadTotal {
		if err := oq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oq *OrderQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Order, init func(*Order), assign func(*Order, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Order)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadOrderHistory(ctx context.Context, query *OrderHistoryQuery, nodes []*Order, init func(*Order), assign func(*Order, *OrderHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Order)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.OrderHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(order.OrderHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.order_order_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "order_order_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "order_order_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrderQuery) loadConnection(ctx context.Context, query *ConnectionQuery, nodes []*Order, init func(*Order), assign func(*Order, *Connection)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Order)
	for i := range nodes {
		if nodes[i].connection_orders == nil {
			continue
		}
		fk := *nodes[i].connection_orders
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(connection.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_orders" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadColli(ctx context.Context, query *ColliQuery, nodes []*Order, init func(*Order), assign func(*Order, *Colli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Order)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Colli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(order.ColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.order_colli
		if fk == nil {
			return fmt.Errorf(`foreign-key "order_colli" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "order_colli" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrderQuery) loadReturnColli(ctx context.Context, query *ReturnColliQuery, nodes []*Order, init func(*Order), assign func(*Order, *ReturnColli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Order)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnColli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(order.ReturnColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.order_return_colli
		if fk == nil {
			return fmt.Errorf(`foreign-key "order_return_colli" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "order_return_colli" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrderQuery) loadHypothesisTestDeliveryOptionRequest(ctx context.Context, query *HypothesisTestDeliveryOptionRequestQuery, nodes []*Order, init func(*Order), assign func(*Order, *HypothesisTestDeliveryOptionRequest)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Order)
	for i := range nodes {
		if nodes[i].hypothesis_test_delivery_option_request_order == nil {
			continue
		}
		fk := *nodes[i].hypothesis_test_delivery_option_request_order
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hypothesistestdeliveryoptionrequest.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hypothesis_test_delivery_option_request_order" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadPallet(ctx context.Context, query *PalletQuery, nodes []*Order, init func(*Order), assign func(*Order, *Pallet)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Order)
	for i := range nodes {
		if nodes[i].pallet_orders == nil {
			continue
		}
		fk := *nodes[i].pallet_orders
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(pallet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "pallet_orders" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadConsolidation(ctx context.Context, query *ConsolidationQuery, nodes []*Order, init func(*Order), assign func(*Order, *Consolidation)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Order)
	for i := range nodes {
		if nodes[i].consolidation_orders == nil {
			continue
		}
		fk := *nodes[i].consolidation_orders
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(consolidation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "consolidation_orders" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oq *OrderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oq.querySpec()
	if len(oq.modifiers) > 0 {
		_spec.Modifiers = oq.modifiers
	}
	_spec.Node.Columns = oq.ctx.Fields
	if len(oq.ctx.Fields) > 0 {
		_spec.Unique = oq.ctx.Unique != nil && *oq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oq.driver, _spec)
}

func (oq *OrderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeString))
	_spec.From = oq.sql
	if unique := oq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oq.path != nil {
		_spec.Unique = true
	}
	if fields := oq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for i := range fields {
			if fields[i] != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oq.withTenant != nil {
			_spec.Node.AddColumnOnce(order.FieldTenantID)
		}
	}
	if ps := oq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oq *OrderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oq.driver.Dialect())
	t1 := builder.Table(order.Table)
	columns := oq.ctx.Fields
	if len(columns) == 0 {
		columns = order.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oq.sql != nil {
		selector = oq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oq.ctx.Unique != nil && *oq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range oq.predicates {
		p(selector)
	}
	for _, p := range oq.order {
		p(selector)
	}
	if offset := oq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedOrderHistory tells the query-builder to eager-load the nodes that are connected to the "order_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithNamedOrderHistory(name string, opts ...func(*OrderHistoryQuery)) *OrderQuery {
	query := (&OrderHistoryClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedOrderHistory == nil {
		oq.withNamedOrderHistory = make(map[string]*OrderHistoryQuery)
	}
	oq.withNamedOrderHistory[name] = query
	return oq
}

// WithNamedColli tells the query-builder to eager-load the nodes that are connected to the "colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithNamedColli(name string, opts ...func(*ColliQuery)) *OrderQuery {
	query := (&ColliClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedColli == nil {
		oq.withNamedColli = make(map[string]*ColliQuery)
	}
	oq.withNamedColli[name] = query
	return oq
}

// WithNamedReturnColli tells the query-builder to eager-load the nodes that are connected to the "return_colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithNamedReturnColli(name string, opts ...func(*ReturnColliQuery)) *OrderQuery {
	query := (&ReturnColliClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedReturnColli == nil {
		oq.withNamedReturnColli = make(map[string]*ReturnColliQuery)
	}
	oq.withNamedReturnColli[name] = query
	return oq
}

// OrderGroupBy is the group-by builder for Order entities.
type OrderGroupBy struct {
	selector
	build *OrderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ogb *OrderGroupBy) Aggregate(fns ...AggregateFunc) *OrderGroupBy {
	ogb.fns = append(ogb.fns, fns...)
	return ogb
}

// Scan applies the selector query and scans the result into the given value.
func (ogb *OrderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ogb.build.ctx, ent.OpQueryGroupBy)
	if err := ogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderQuery, *OrderGroupBy](ctx, ogb.build, ogb, ogb.build.inters, v)
}

func (ogb *OrderGroupBy) sqlScan(ctx context.Context, root *OrderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ogb.fns))
	for _, fn := range ogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ogb.flds)+len(ogb.fns))
		for _, f := range *ogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrderSelect is the builder for selecting fields of Order entities.
type OrderSelect struct {
	*OrderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (os *OrderSelect) Aggregate(fns ...AggregateFunc) *OrderSelect {
	os.fns = append(os.fns, fns...)
	return os
}

// Scan applies the selector query and scans the result into the given value.
func (os *OrderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, os.ctx, ent.OpQuerySelect)
	if err := os.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderQuery, *OrderSelect](ctx, os.OrderQuery, os, os.inters, v)
}

func (os *OrderSelect) sqlScan(ctx context.Context, root *OrderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(os.fns))
	for _, fn := range os.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*os.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := os.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
