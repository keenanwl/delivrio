// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldName, v))
}

// VatNumber applies equality check predicate on the "vat_number" field. It's identical to VatNumberEQ.
func VatNumber(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldVatNumber, v))
}

// InvoiceReference applies equality check predicate on the "invoice_reference" field. It's identical to InvoiceReferenceEQ.
func InvoiceReference(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldInvoiceReference, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldName, v))
}

// VatNumberEQ applies the EQ predicate on the "vat_number" field.
func VatNumberEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldVatNumber, v))
}

// VatNumberNEQ applies the NEQ predicate on the "vat_number" field.
func VatNumberNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldVatNumber, v))
}

// VatNumberIn applies the In predicate on the "vat_number" field.
func VatNumberIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldVatNumber, vs...))
}

// VatNumberNotIn applies the NotIn predicate on the "vat_number" field.
func VatNumberNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldVatNumber, vs...))
}

// VatNumberGT applies the GT predicate on the "vat_number" field.
func VatNumberGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldVatNumber, v))
}

// VatNumberGTE applies the GTE predicate on the "vat_number" field.
func VatNumberGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldVatNumber, v))
}

// VatNumberLT applies the LT predicate on the "vat_number" field.
func VatNumberLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldVatNumber, v))
}

// VatNumberLTE applies the LTE predicate on the "vat_number" field.
func VatNumberLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldVatNumber, v))
}

// VatNumberContains applies the Contains predicate on the "vat_number" field.
func VatNumberContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldVatNumber, v))
}

// VatNumberHasPrefix applies the HasPrefix predicate on the "vat_number" field.
func VatNumberHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldVatNumber, v))
}

// VatNumberHasSuffix applies the HasSuffix predicate on the "vat_number" field.
func VatNumberHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldVatNumber, v))
}

// VatNumberIsNil applies the IsNil predicate on the "vat_number" field.
func VatNumberIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldVatNumber))
}

// VatNumberNotNil applies the NotNil predicate on the "vat_number" field.
func VatNumberNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldVatNumber))
}

// VatNumberEqualFold applies the EqualFold predicate on the "vat_number" field.
func VatNumberEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldVatNumber, v))
}

// VatNumberContainsFold applies the ContainsFold predicate on the "vat_number" field.
func VatNumberContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldVatNumber, v))
}

// InvoiceReferenceEQ applies the EQ predicate on the "invoice_reference" field.
func InvoiceReferenceEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEQ(FieldInvoiceReference, v))
}

// InvoiceReferenceNEQ applies the NEQ predicate on the "invoice_reference" field.
func InvoiceReferenceNEQ(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNEQ(FieldInvoiceReference, v))
}

// InvoiceReferenceIn applies the In predicate on the "invoice_reference" field.
func InvoiceReferenceIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldIn(FieldInvoiceReference, vs...))
}

// InvoiceReferenceNotIn applies the NotIn predicate on the "invoice_reference" field.
func InvoiceReferenceNotIn(vs ...string) predicate.Tenant {
	return predicate.Tenant(sql.FieldNotIn(FieldInvoiceReference, vs...))
}

// InvoiceReferenceGT applies the GT predicate on the "invoice_reference" field.
func InvoiceReferenceGT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGT(FieldInvoiceReference, v))
}

// InvoiceReferenceGTE applies the GTE predicate on the "invoice_reference" field.
func InvoiceReferenceGTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldGTE(FieldInvoiceReference, v))
}

// InvoiceReferenceLT applies the LT predicate on the "invoice_reference" field.
func InvoiceReferenceLT(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLT(FieldInvoiceReference, v))
}

// InvoiceReferenceLTE applies the LTE predicate on the "invoice_reference" field.
func InvoiceReferenceLTE(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldLTE(FieldInvoiceReference, v))
}

// InvoiceReferenceContains applies the Contains predicate on the "invoice_reference" field.
func InvoiceReferenceContains(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContains(FieldInvoiceReference, v))
}

// InvoiceReferenceHasPrefix applies the HasPrefix predicate on the "invoice_reference" field.
func InvoiceReferenceHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasPrefix(FieldInvoiceReference, v))
}

// InvoiceReferenceHasSuffix applies the HasSuffix predicate on the "invoice_reference" field.
func InvoiceReferenceHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldHasSuffix(FieldInvoiceReference, v))
}

// InvoiceReferenceIsNil applies the IsNil predicate on the "invoice_reference" field.
func InvoiceReferenceIsNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldIsNull(FieldInvoiceReference))
}

// InvoiceReferenceNotNil applies the NotNil predicate on the "invoice_reference" field.
func InvoiceReferenceNotNil() predicate.Tenant {
	return predicate.Tenant(sql.FieldNotNull(FieldInvoiceReference))
}

// InvoiceReferenceEqualFold applies the EqualFold predicate on the "invoice_reference" field.
func InvoiceReferenceEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldEqualFold(FieldInvoiceReference, v))
}

// InvoiceReferenceContainsFold applies the ContainsFold predicate on the "invoice_reference" field.
func InvoiceReferenceContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(sql.FieldContainsFold(FieldInvoiceReference, v))
}

// HasConnectOptionCarriers applies the HasEdge predicate on the "connect_option_carriers" edge.
func HasConnectOptionCarriers() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ConnectOptionCarriersTable, ConnectOptionCarriersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectOptionCarriersWith applies the HasEdge predicate on the "connect_option_carriers" edge with a given conditions (other predicates).
func HasConnectOptionCarriersWith(preds ...predicate.ConnectOptionCarrier) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := newConnectOptionCarriersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnectOptionPlatforms applies the HasEdge predicate on the "connect_option_platforms" edge.
func HasConnectOptionPlatforms() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ConnectOptionPlatformsTable, ConnectOptionPlatformsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectOptionPlatformsWith applies the HasEdge predicate on the "connect_option_platforms" edge with a given conditions (other predicates).
func HasConnectOptionPlatformsWith(preds ...predicate.ConnectOptionPlatform) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := newConnectOptionPlatformsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlan applies the HasEdge predicate on the "plan" edge.
func HasPlan() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanWith applies the HasEdge predicate on the "plan" edge with a given conditions (other predicates).
func HasPlanWith(preds ...predicate.Plan) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := newPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompanyAddress applies the HasEdge predicate on the "company_address" edge.
func HasCompanyAddress() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompanyAddressTable, CompanyAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyAddressWith applies the HasEdge predicate on the "company_address" edge with a given conditions (other predicates).
func HasCompanyAddressWith(preds ...predicate.Address) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := newCompanyAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultLanguage applies the HasEdge predicate on the "default_language" edge.
func HasDefaultLanguage() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DefaultLanguageTable, DefaultLanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultLanguageWith applies the HasEdge predicate on the "default_language" edge with a given conditions (other predicates).
func HasDefaultLanguageWith(preds ...predicate.Language) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := newDefaultLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBillingContact applies the HasEdge predicate on the "billing_contact" edge.
func HasBillingContact() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BillingContactTable, BillingContactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillingContactWith applies the HasEdge predicate on the "billing_contact" edge with a given conditions (other predicates).
func HasBillingContactWith(preds ...predicate.Contact) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := newBillingContactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdminContact applies the HasEdge predicate on the "admin_contact" edge.
func HasAdminContact() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AdminContactTable, AdminContactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminContactWith applies the HasEdge predicate on the "admin_contact" edge with a given conditions (other predicates).
func HasAdminContactWith(preds ...predicate.Contact) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := newAdminContactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(sql.NotPredicates(p))
}
