// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tenant type in the database.
	Label = "tenant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVatNumber holds the string denoting the vat_number field in the database.
	FieldVatNumber = "vat_number"
	// FieldInvoiceReference holds the string denoting the invoice_reference field in the database.
	FieldInvoiceReference = "invoice_reference"
	// EdgeConnectOptionCarriers holds the string denoting the connect_option_carriers edge name in mutations.
	EdgeConnectOptionCarriers = "connect_option_carriers"
	// EdgeConnectOptionPlatforms holds the string denoting the connect_option_platforms edge name in mutations.
	EdgeConnectOptionPlatforms = "connect_option_platforms"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// EdgeCompanyAddress holds the string denoting the company_address edge name in mutations.
	EdgeCompanyAddress = "company_address"
	// EdgeDefaultLanguage holds the string denoting the default_language edge name in mutations.
	EdgeDefaultLanguage = "default_language"
	// EdgeBillingContact holds the string denoting the billing_contact edge name in mutations.
	EdgeBillingContact = "billing_contact"
	// EdgeAdminContact holds the string denoting the admin_contact edge name in mutations.
	EdgeAdminContact = "admin_contact"
	// Table holds the table name of the tenant in the database.
	Table = "tenants"
	// ConnectOptionCarriersTable is the table that holds the connect_option_carriers relation/edge. The primary key declared below.
	ConnectOptionCarriersTable = "tenant_connect_option_carriers"
	// ConnectOptionCarriersInverseTable is the table name for the ConnectOptionCarrier entity.
	// It exists in this package in order to avoid circular dependency with the "connectoptioncarrier" package.
	ConnectOptionCarriersInverseTable = "connect_option_carriers"
	// ConnectOptionPlatformsTable is the table that holds the connect_option_platforms relation/edge. The primary key declared below.
	ConnectOptionPlatformsTable = "tenant_connect_option_platforms"
	// ConnectOptionPlatformsInverseTable is the table name for the ConnectOptionPlatform entity.
	// It exists in this package in order to avoid circular dependency with the "connectoptionplatform" package.
	ConnectOptionPlatformsInverseTable = "connect_option_platforms"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "tenants"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plans"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "plan_tenant"
	// CompanyAddressTable is the table that holds the company_address relation/edge.
	CompanyAddressTable = "tenants"
	// CompanyAddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	CompanyAddressInverseTable = "addresses"
	// CompanyAddressColumn is the table column denoting the company_address relation/edge.
	CompanyAddressColumn = "tenant_company_address"
	// DefaultLanguageTable is the table that holds the default_language relation/edge.
	DefaultLanguageTable = "tenants"
	// DefaultLanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	DefaultLanguageInverseTable = "languages"
	// DefaultLanguageColumn is the table column denoting the default_language relation/edge.
	DefaultLanguageColumn = "tenant_default_language"
	// BillingContactTable is the table that holds the billing_contact relation/edge.
	BillingContactTable = "tenants"
	// BillingContactInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	BillingContactInverseTable = "contacts"
	// BillingContactColumn is the table column denoting the billing_contact relation/edge.
	BillingContactColumn = "tenant_billing_contact"
	// AdminContactTable is the table that holds the admin_contact relation/edge.
	AdminContactTable = "tenants"
	// AdminContactInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	AdminContactInverseTable = "contacts"
	// AdminContactColumn is the table column denoting the admin_contact relation/edge.
	AdminContactColumn = "tenant_admin_contact"
)

// Columns holds all SQL columns for tenant fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldVatNumber,
	FieldInvoiceReference,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tenants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plan_tenant",
	"tenant_company_address",
	"tenant_default_language",
	"tenant_billing_contact",
	"tenant_admin_contact",
}

var (
	// ConnectOptionCarriersPrimaryKey and ConnectOptionCarriersColumn2 are the table columns denoting the
	// primary key for the connect_option_carriers relation (M2M).
	ConnectOptionCarriersPrimaryKey = []string{"tenant_id", "connect_option_carrier_id"}
	// ConnectOptionPlatformsPrimaryKey and ConnectOptionPlatformsColumn2 are the table columns denoting the
	// primary key for the connect_option_platforms relation (M2M).
	ConnectOptionPlatformsPrimaryKey = []string{"tenant_id", "connect_option_platform_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Tenant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVatNumber orders the results by the vat_number field.
func ByVatNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVatNumber, opts...).ToFunc()
}

// ByInvoiceReference orders the results by the invoice_reference field.
func ByInvoiceReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceReference, opts...).ToFunc()
}

// ByConnectOptionCarriersCount orders the results by connect_option_carriers count.
func ByConnectOptionCarriersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConnectOptionCarriersStep(), opts...)
	}
}

// ByConnectOptionCarriers orders the results by connect_option_carriers terms.
func ByConnectOptionCarriers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectOptionCarriersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConnectOptionPlatformsCount orders the results by connect_option_platforms count.
func ByConnectOptionPlatformsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConnectOptionPlatformsStep(), opts...)
	}
}

// ByConnectOptionPlatforms orders the results by connect_option_platforms terms.
func ByConnectOptionPlatforms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectOptionPlatformsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlanField orders the results by plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompanyAddressField orders the results by company_address field.
func ByCompanyAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyAddressStep(), sql.OrderByField(field, opts...))
	}
}

// ByDefaultLanguageField orders the results by default_language field.
func ByDefaultLanguageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDefaultLanguageStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingContactField orders the results by billing_contact field.
func ByBillingContactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingContactStep(), sql.OrderByField(field, opts...))
	}
}

// ByAdminContactField orders the results by admin_contact field.
func ByAdminContactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminContactStep(), sql.OrderByField(field, opts...))
	}
}
func newConnectOptionCarriersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectOptionCarriersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ConnectOptionCarriersTable, ConnectOptionCarriersPrimaryKey...),
	)
}
func newConnectOptionPlatformsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectOptionPlatformsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ConnectOptionPlatformsTable, ConnectOptionPlatformsPrimaryKey...),
	)
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
	)
}
func newCompanyAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CompanyAddressTable, CompanyAddressColumn),
	)
}
func newDefaultLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DefaultLanguageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DefaultLanguageTable, DefaultLanguageColumn),
	)
}
func newBillingContactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingContactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BillingContactTable, BillingContactColumn),
	)
}
func newAdminContactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminContactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AdminContactTable, AdminContactColumn),
	)
}
