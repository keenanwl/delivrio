// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceQuery is the builder for querying CarrierService entities.
type CarrierServiceQuery struct {
	config
	ctx                        *QueryContext
	order                      []carrierservice.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.CarrierService
	withCarrierServicePostNord *CarrierServicePostNordQuery
	withCarrierServiceDAO      *CarrierServiceDAOQuery
	withCarrierServiceDF       *CarrierServiceDFQuery
	withCarrierServiceDSV      *CarrierServiceDSVQuery
	withCarrierServEasyPost    *CarrierServiceEasyPostQuery
	withCarrierServiceGLS      *CarrierServiceGLSQuery
	withCarrierServiceUSPS     *CarrierServiceUSPSQuery
	withCarrierServiceBring    *CarrierServiceBringQuery
	withCarrierBrand           *CarrierBrandQuery
	withDeliveryOption         *DeliveryOptionQuery
	withFKs                    bool
	modifiers                  []func(*sql.Selector)
	loadTotal                  []func(context.Context, []*CarrierService) error
	withNamedDeliveryOption    map[string]*DeliveryOptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierServiceQuery builder.
func (csq *CarrierServiceQuery) Where(ps ...predicate.CarrierService) *CarrierServiceQuery {
	csq.predicates = append(csq.predicates, ps...)
	return csq
}

// Limit the number of records to be returned by this query.
func (csq *CarrierServiceQuery) Limit(limit int) *CarrierServiceQuery {
	csq.ctx.Limit = &limit
	return csq
}

// Offset to start from.
func (csq *CarrierServiceQuery) Offset(offset int) *CarrierServiceQuery {
	csq.ctx.Offset = &offset
	return csq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (csq *CarrierServiceQuery) Unique(unique bool) *CarrierServiceQuery {
	csq.ctx.Unique = &unique
	return csq
}

// Order specifies how the records should be ordered.
func (csq *CarrierServiceQuery) Order(o ...carrierservice.OrderOption) *CarrierServiceQuery {
	csq.order = append(csq.order, o...)
	return csq
}

// QueryCarrierServicePostNord chains the current query on the "carrier_service_post_nord" edge.
func (csq *CarrierServiceQuery) QueryCarrierServicePostNord() *CarrierServicePostNordQuery {
	query := (&CarrierServicePostNordClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierservicepostnord.Table, carrierservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServicePostNordTable, carrierservice.CarrierServicePostNordColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierServiceDAO chains the current query on the "carrier_service_dao" edge.
func (csq *CarrierServiceQuery) QueryCarrierServiceDAO() *CarrierServiceDAOQuery {
	query := (&CarrierServiceDAOClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierservicedao.Table, carrierservicedao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceDAOTable, carrierservice.CarrierServiceDAOColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierServiceDF chains the current query on the "carrier_service_df" edge.
func (csq *CarrierServiceQuery) QueryCarrierServiceDF() *CarrierServiceDFQuery {
	query := (&CarrierServiceDFClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierservicedf.Table, carrierservicedf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceDFTable, carrierservice.CarrierServiceDFColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierServiceDSV chains the current query on the "carrier_service_dsv" edge.
func (csq *CarrierServiceQuery) QueryCarrierServiceDSV() *CarrierServiceDSVQuery {
	query := (&CarrierServiceDSVClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierservicedsv.Table, carrierservicedsv.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceDSVTable, carrierservice.CarrierServiceDSVColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierServEasyPost chains the current query on the "carrier_serv_easy_post" edge.
func (csq *CarrierServiceQuery) QueryCarrierServEasyPost() *CarrierServiceEasyPostQuery {
	query := (&CarrierServiceEasyPostClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierserviceeasypost.Table, carrierserviceeasypost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServEasyPostTable, carrierservice.CarrierServEasyPostColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierServiceGLS chains the current query on the "carrier_service_gls" edge.
func (csq *CarrierServiceQuery) QueryCarrierServiceGLS() *CarrierServiceGLSQuery {
	query := (&CarrierServiceGLSClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierservicegls.Table, carrierservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceGLSTable, carrierservice.CarrierServiceGLSColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierServiceUSPS chains the current query on the "carrier_service_usps" edge.
func (csq *CarrierServiceQuery) QueryCarrierServiceUSPS() *CarrierServiceUSPSQuery {
	query := (&CarrierServiceUSPSClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierserviceusps.Table, carrierserviceusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceUSPSTable, carrierservice.CarrierServiceUSPSColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierServiceBring chains the current query on the "carrier_service_bring" edge.
func (csq *CarrierServiceQuery) QueryCarrierServiceBring() *CarrierServiceBringQuery {
	query := (&CarrierServiceBringClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierservicebring.Table, carrierservicebring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceBringTable, carrierservice.CarrierServiceBringColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierBrand chains the current query on the "carrier_brand" edge.
func (csq *CarrierServiceQuery) QueryCarrierBrand() *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrierservice.CarrierBrandTable, carrierservice.CarrierBrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (csq *CarrierServiceQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: csq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierservice.DeliveryOptionTable, carrierservice.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(csq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierService entity from the query.
// Returns a *NotFoundError when no CarrierService was found.
func (csq *CarrierServiceQuery) First(ctx context.Context) (*CarrierService, error) {
	nodes, err := csq.Limit(1).All(setContextOp(ctx, csq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrierservice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (csq *CarrierServiceQuery) FirstX(ctx context.Context) *CarrierService {
	node, err := csq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierService ID from the query.
// Returns a *NotFoundError when no CarrierService ID was found.
func (csq *CarrierServiceQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = csq.Limit(1).IDs(setContextOp(ctx, csq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrierservice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (csq *CarrierServiceQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := csq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierService entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierService entity is found.
// Returns a *NotFoundError when no CarrierService entities are found.
func (csq *CarrierServiceQuery) Only(ctx context.Context) (*CarrierService, error) {
	nodes, err := csq.Limit(2).All(setContextOp(ctx, csq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrierservice.Label}
	default:
		return nil, &NotSingularError{carrierservice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (csq *CarrierServiceQuery) OnlyX(ctx context.Context) *CarrierService {
	node, err := csq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierService ID in the query.
// Returns a *NotSingularError when more than one CarrierService ID is found.
// Returns a *NotFoundError when no entities are found.
func (csq *CarrierServiceQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = csq.Limit(2).IDs(setContextOp(ctx, csq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrierservice.Label}
	default:
		err = &NotSingularError{carrierservice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (csq *CarrierServiceQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := csq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierServices.
func (csq *CarrierServiceQuery) All(ctx context.Context) ([]*CarrierService, error) {
	ctx = setContextOp(ctx, csq.ctx, ent.OpQueryAll)
	if err := csq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierService, *CarrierServiceQuery]()
	return withInterceptors[[]*CarrierService](ctx, csq, qr, csq.inters)
}

// AllX is like All, but panics if an error occurs.
func (csq *CarrierServiceQuery) AllX(ctx context.Context) []*CarrierService {
	nodes, err := csq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierService IDs.
func (csq *CarrierServiceQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if csq.ctx.Unique == nil && csq.path != nil {
		csq.Unique(true)
	}
	ctx = setContextOp(ctx, csq.ctx, ent.OpQueryIDs)
	if err = csq.Select(carrierservice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (csq *CarrierServiceQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := csq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (csq *CarrierServiceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, csq.ctx, ent.OpQueryCount)
	if err := csq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, csq, querierCount[*CarrierServiceQuery](), csq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (csq *CarrierServiceQuery) CountX(ctx context.Context) int {
	count, err := csq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (csq *CarrierServiceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, csq.ctx, ent.OpQueryExist)
	switch _, err := csq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (csq *CarrierServiceQuery) ExistX(ctx context.Context) bool {
	exist, err := csq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierServiceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (csq *CarrierServiceQuery) Clone() *CarrierServiceQuery {
	if csq == nil {
		return nil
	}
	return &CarrierServiceQuery{
		config:                     csq.config,
		ctx:                        csq.ctx.Clone(),
		order:                      append([]carrierservice.OrderOption{}, csq.order...),
		inters:                     append([]Interceptor{}, csq.inters...),
		predicates:                 append([]predicate.CarrierService{}, csq.predicates...),
		withCarrierServicePostNord: csq.withCarrierServicePostNord.Clone(),
		withCarrierServiceDAO:      csq.withCarrierServiceDAO.Clone(),
		withCarrierServiceDF:       csq.withCarrierServiceDF.Clone(),
		withCarrierServiceDSV:      csq.withCarrierServiceDSV.Clone(),
		withCarrierServEasyPost:    csq.withCarrierServEasyPost.Clone(),
		withCarrierServiceGLS:      csq.withCarrierServiceGLS.Clone(),
		withCarrierServiceUSPS:     csq.withCarrierServiceUSPS.Clone(),
		withCarrierServiceBring:    csq.withCarrierServiceBring.Clone(),
		withCarrierBrand:           csq.withCarrierBrand.Clone(),
		withDeliveryOption:         csq.withDeliveryOption.Clone(),
		// clone intermediate query.
		sql:  csq.sql.Clone(),
		path: csq.path,
	}
}

// WithCarrierServicePostNord tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_post_nord" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierServicePostNord(opts ...func(*CarrierServicePostNordQuery)) *CarrierServiceQuery {
	query := (&CarrierServicePostNordClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierServicePostNord = query
	return csq
}

// WithCarrierServiceDAO tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_dao" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierServiceDAO(opts ...func(*CarrierServiceDAOQuery)) *CarrierServiceQuery {
	query := (&CarrierServiceDAOClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierServiceDAO = query
	return csq
}

// WithCarrierServiceDF tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_df" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierServiceDF(opts ...func(*CarrierServiceDFQuery)) *CarrierServiceQuery {
	query := (&CarrierServiceDFClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierServiceDF = query
	return csq
}

// WithCarrierServiceDSV tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_dsv" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierServiceDSV(opts ...func(*CarrierServiceDSVQuery)) *CarrierServiceQuery {
	query := (&CarrierServiceDSVClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierServiceDSV = query
	return csq
}

// WithCarrierServEasyPost tells the query-builder to eager-load the nodes that are connected to
// the "carrier_serv_easy_post" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierServEasyPost(opts ...func(*CarrierServiceEasyPostQuery)) *CarrierServiceQuery {
	query := (&CarrierServiceEasyPostClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierServEasyPost = query
	return csq
}

// WithCarrierServiceGLS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_gls" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierServiceGLS(opts ...func(*CarrierServiceGLSQuery)) *CarrierServiceQuery {
	query := (&CarrierServiceGLSClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierServiceGLS = query
	return csq
}

// WithCarrierServiceUSPS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierServiceUSPS(opts ...func(*CarrierServiceUSPSQuery)) *CarrierServiceQuery {
	query := (&CarrierServiceUSPSClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierServiceUSPS = query
	return csq
}

// WithCarrierServiceBring tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_bring" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierServiceBring(opts ...func(*CarrierServiceBringQuery)) *CarrierServiceQuery {
	query := (&CarrierServiceBringClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierServiceBring = query
	return csq
}

// WithCarrierBrand tells the query-builder to eager-load the nodes that are connected to
// the "carrier_brand" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithCarrierBrand(opts ...func(*CarrierBrandQuery)) *CarrierServiceQuery {
	query := (&CarrierBrandClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withCarrierBrand = query
	return csq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *CarrierServiceQuery {
	query := (&DeliveryOptionClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csq.withDeliveryOption = query
	return csq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierService.Query().
//		GroupBy(carrierservice.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (csq *CarrierServiceQuery) GroupBy(field string, fields ...string) *CarrierServiceGroupBy {
	csq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierServiceGroupBy{build: csq}
	grbuild.flds = &csq.ctx.Fields
	grbuild.label = carrierservice.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierService.Query().
//		Select(carrierservice.FieldLabel).
//		Scan(ctx, &v)
func (csq *CarrierServiceQuery) Select(fields ...string) *CarrierServiceSelect {
	csq.ctx.Fields = append(csq.ctx.Fields, fields...)
	sbuild := &CarrierServiceSelect{CarrierServiceQuery: csq}
	sbuild.label = carrierservice.Label
	sbuild.flds, sbuild.scan = &csq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierServiceSelect configured with the given aggregations.
func (csq *CarrierServiceQuery) Aggregate(fns ...AggregateFunc) *CarrierServiceSelect {
	return csq.Select().Aggregate(fns...)
}

func (csq *CarrierServiceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range csq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, csq); err != nil {
				return err
			}
		}
	}
	for _, f := range csq.ctx.Fields {
		if !carrierservice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if csq.path != nil {
		prev, err := csq.path(ctx)
		if err != nil {
			return err
		}
		csq.sql = prev
	}
	if carrierservice.Policy == nil {
		return errors.New("ent: uninitialized carrierservice.Policy (forgotten import ent/runtime?)")
	}
	if err := carrierservice.Policy.EvalQuery(ctx, csq); err != nil {
		return err
	}
	return nil
}

func (csq *CarrierServiceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierService, error) {
	var (
		nodes       = []*CarrierService{}
		withFKs     = csq.withFKs
		_spec       = csq.querySpec()
		loadedTypes = [10]bool{
			csq.withCarrierServicePostNord != nil,
			csq.withCarrierServiceDAO != nil,
			csq.withCarrierServiceDF != nil,
			csq.withCarrierServiceDSV != nil,
			csq.withCarrierServEasyPost != nil,
			csq.withCarrierServiceGLS != nil,
			csq.withCarrierServiceUSPS != nil,
			csq.withCarrierServiceBring != nil,
			csq.withCarrierBrand != nil,
			csq.withDeliveryOption != nil,
		}
	)
	if csq.withCarrierBrand != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservice.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierService).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierService{config: csq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(csq.modifiers) > 0 {
		_spec.Modifiers = csq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, csq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := csq.withCarrierServicePostNord; query != nil {
		if err := csq.loadCarrierServicePostNord(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierServicePostNord) { n.Edges.CarrierServicePostNord = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withCarrierServiceDAO; query != nil {
		if err := csq.loadCarrierServiceDAO(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierServiceDAO) { n.Edges.CarrierServiceDAO = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withCarrierServiceDF; query != nil {
		if err := csq.loadCarrierServiceDF(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierServiceDF) { n.Edges.CarrierServiceDF = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withCarrierServiceDSV; query != nil {
		if err := csq.loadCarrierServiceDSV(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierServiceDSV) { n.Edges.CarrierServiceDSV = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withCarrierServEasyPost; query != nil {
		if err := csq.loadCarrierServEasyPost(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierServiceEasyPost) { n.Edges.CarrierServEasyPost = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withCarrierServiceGLS; query != nil {
		if err := csq.loadCarrierServiceGLS(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierServiceGLS) { n.Edges.CarrierServiceGLS = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withCarrierServiceUSPS; query != nil {
		if err := csq.loadCarrierServiceUSPS(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierServiceUSPS) { n.Edges.CarrierServiceUSPS = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withCarrierServiceBring; query != nil {
		if err := csq.loadCarrierServiceBring(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierServiceBring) { n.Edges.CarrierServiceBring = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withCarrierBrand; query != nil {
		if err := csq.loadCarrierBrand(ctx, query, nodes, nil,
			func(n *CarrierService, e *CarrierBrand) { n.Edges.CarrierBrand = e }); err != nil {
			return nil, err
		}
	}
	if query := csq.withDeliveryOption; query != nil {
		if err := csq.loadDeliveryOption(ctx, query, nodes,
			func(n *CarrierService) { n.Edges.DeliveryOption = []*DeliveryOption{} },
			func(n *CarrierService, e *DeliveryOption) { n.Edges.DeliveryOption = append(n.Edges.DeliveryOption, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range csq.withNamedDeliveryOption {
		if err := csq.loadDeliveryOption(ctx, query, nodes,
			func(n *CarrierService) { n.appendNamedDeliveryOption(name) },
			func(n *CarrierService, e *DeliveryOption) { n.appendNamedDeliveryOption(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range csq.loadTotal {
		if err := csq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (csq *CarrierServiceQuery) loadCarrierServicePostNord(ctx context.Context, query *CarrierServicePostNordQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierServicePostNord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierServicePostNord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.CarrierServicePostNordColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_carrier_service_post_nord
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_carrier_service_post_nord" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_carrier_service_post_nord" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csq *CarrierServiceQuery) loadCarrierServiceDAO(ctx context.Context, query *CarrierServiceDAOQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierServiceDAO)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierServiceDAO(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.CarrierServiceDAOColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_carrier_service_dao
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_carrier_service_dao" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_carrier_service_dao" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csq *CarrierServiceQuery) loadCarrierServiceDF(ctx context.Context, query *CarrierServiceDFQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierServiceDF)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierServiceDF(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.CarrierServiceDFColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_carrier_service_df
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_carrier_service_df" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_carrier_service_df" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csq *CarrierServiceQuery) loadCarrierServiceDSV(ctx context.Context, query *CarrierServiceDSVQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierServiceDSV)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierServiceDSV(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.CarrierServiceDSVColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_carrier_service_dsv
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_carrier_service_dsv" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_carrier_service_dsv" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csq *CarrierServiceQuery) loadCarrierServEasyPost(ctx context.Context, query *CarrierServiceEasyPostQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierServiceEasyPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierServiceEasyPost(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.CarrierServEasyPostColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_carrier_serv_easy_post
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_carrier_serv_easy_post" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_carrier_serv_easy_post" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csq *CarrierServiceQuery) loadCarrierServiceGLS(ctx context.Context, query *CarrierServiceGLSQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierServiceGLS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierServiceGLS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.CarrierServiceGLSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_carrier_service_gls
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_carrier_service_gls" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_carrier_service_gls" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csq *CarrierServiceQuery) loadCarrierServiceUSPS(ctx context.Context, query *CarrierServiceUSPSQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierServiceUSPS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierServiceUSPS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.CarrierServiceUSPSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_carrier_service_usps
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_carrier_service_usps" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_carrier_service_usps" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csq *CarrierServiceQuery) loadCarrierServiceBring(ctx context.Context, query *CarrierServiceBringQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierServiceBring)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.CarrierServiceBring(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.CarrierServiceBringColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_carrier_service_bring
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_carrier_service_bring" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_carrier_service_bring" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csq *CarrierServiceQuery) loadCarrierBrand(ctx context.Context, query *CarrierBrandQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *CarrierBrand)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierService)
	for i := range nodes {
		if nodes[i].carrier_brand_carrier_service == nil {
			continue
		}
		fk := *nodes[i].carrier_brand_carrier_service
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierbrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_brand_carrier_service" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (csq *CarrierServiceQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*CarrierService, init func(*CarrierService), assign func(*CarrierService, *DeliveryOption)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DeliveryOption(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservice.DeliveryOptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.delivery_option_carrier_service
		if fk == nil {
			return fmt.Errorf(`foreign-key "delivery_option_carrier_service" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "delivery_option_carrier_service" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (csq *CarrierServiceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := csq.querySpec()
	if len(csq.modifiers) > 0 {
		_spec.Modifiers = csq.modifiers
	}
	_spec.Node.Columns = csq.ctx.Fields
	if len(csq.ctx.Fields) > 0 {
		_spec.Unique = csq.ctx.Unique != nil && *csq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, csq.driver, _spec)
}

func (csq *CarrierServiceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrierservice.Table, carrierservice.Columns, sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString))
	_spec.From = csq.sql
	if unique := csq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if csq.path != nil {
		_spec.Unique = true
	}
	if fields := csq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservice.FieldID)
		for i := range fields {
			if fields[i] != carrierservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := csq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := csq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := csq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := csq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (csq *CarrierServiceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(csq.driver.Dialect())
	t1 := builder.Table(carrierservice.Table)
	columns := csq.ctx.Fields
	if len(columns) == 0 {
		columns = carrierservice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if csq.sql != nil {
		selector = csq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if csq.ctx.Unique != nil && *csq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range csq.predicates {
		p(selector)
	}
	for _, p := range csq.order {
		p(selector)
	}
	if offset := csq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := csq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryOption tells the query-builder to eager-load the nodes that are connected to the "delivery_option"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (csq *CarrierServiceQuery) WithNamedDeliveryOption(name string, opts ...func(*DeliveryOptionQuery)) *CarrierServiceQuery {
	query := (&DeliveryOptionClient{config: csq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if csq.withNamedDeliveryOption == nil {
		csq.withNamedDeliveryOption = make(map[string]*DeliveryOptionQuery)
	}
	csq.withNamedDeliveryOption[name] = query
	return csq
}

// CarrierServiceGroupBy is the group-by builder for CarrierService entities.
type CarrierServiceGroupBy struct {
	selector
	build *CarrierServiceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (csgb *CarrierServiceGroupBy) Aggregate(fns ...AggregateFunc) *CarrierServiceGroupBy {
	csgb.fns = append(csgb.fns, fns...)
	return csgb
}

// Scan applies the selector query and scans the result into the given value.
func (csgb *CarrierServiceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csgb.build.ctx, ent.OpQueryGroupBy)
	if err := csgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServiceQuery, *CarrierServiceGroupBy](ctx, csgb.build, csgb, csgb.build.inters, v)
}

func (csgb *CarrierServiceGroupBy) sqlScan(ctx context.Context, root *CarrierServiceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(csgb.fns))
	for _, fn := range csgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*csgb.flds)+len(csgb.fns))
		for _, f := range *csgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*csgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierServiceSelect is the builder for selecting fields of CarrierService entities.
type CarrierServiceSelect struct {
	*CarrierServiceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (css *CarrierServiceSelect) Aggregate(fns ...AggregateFunc) *CarrierServiceSelect {
	css.fns = append(css.fns, fns...)
	return css
}

// Scan applies the selector query and scans the result into the given value.
func (css *CarrierServiceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, css.ctx, ent.OpQuerySelect)
	if err := css.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServiceQuery, *CarrierServiceSelect](ctx, css.CarrierServiceQuery, css, css.inters, v)
}

func (css *CarrierServiceSelect) sqlScan(ctx context.Context, root *CarrierServiceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(css.fns))
	for _, fn := range css.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*css.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := css.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
