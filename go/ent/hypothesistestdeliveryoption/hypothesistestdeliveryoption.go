// Code generated by ent, DO NOT EDIT.

package hypothesistestdeliveryoption

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hypothesistestdeliveryoption type in the database.
	Label = "hypothesis_test_delivery_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldRandomizeWithinGroupSort holds the string denoting the randomize_within_group_sort field in the database.
	FieldRandomizeWithinGroupSort = "randomize_within_group_sort"
	// FieldByIntervalRotation holds the string denoting the by_interval_rotation field in the database.
	FieldByIntervalRotation = "by_interval_rotation"
	// FieldRotationIntervalHours holds the string denoting the rotation_interval_hours field in the database.
	FieldRotationIntervalHours = "rotation_interval_hours"
	// FieldByOrder holds the string denoting the by_order field in the database.
	FieldByOrder = "by_order"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeHypothesisTest holds the string denoting the hypothesis_test edge name in mutations.
	EdgeHypothesisTest = "hypothesis_test"
	// EdgeHypothesisTestDeliveryOptionRequest holds the string denoting the hypothesis_test_delivery_option_request edge name in mutations.
	EdgeHypothesisTestDeliveryOptionRequest = "hypothesis_test_delivery_option_request"
	// EdgeDeliveryOptionGroupOne holds the string denoting the delivery_option_group_one edge name in mutations.
	EdgeDeliveryOptionGroupOne = "delivery_option_group_one"
	// EdgeDeliveryOptionGroupTwo holds the string denoting the delivery_option_group_two edge name in mutations.
	EdgeDeliveryOptionGroupTwo = "delivery_option_group_two"
	// Table holds the table name of the hypothesistestdeliveryoption in the database.
	Table = "hypothesis_test_delivery_options"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "hypothesis_test_delivery_options"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// HypothesisTestTable is the table that holds the hypothesis_test relation/edge.
	HypothesisTestTable = "hypothesis_test_delivery_options"
	// HypothesisTestInverseTable is the table name for the HypothesisTest entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistest" package.
	HypothesisTestInverseTable = "hypothesis_tests"
	// HypothesisTestColumn is the table column denoting the hypothesis_test relation/edge.
	HypothesisTestColumn = "hypothesis_test_hypothesis_test_delivery_option"
	// HypothesisTestDeliveryOptionRequestTable is the table that holds the hypothesis_test_delivery_option_request relation/edge.
	HypothesisTestDeliveryOptionRequestTable = "hypothesis_test_delivery_option_requests"
	// HypothesisTestDeliveryOptionRequestInverseTable is the table name for the HypothesisTestDeliveryOptionRequest entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistestdeliveryoptionrequest" package.
	HypothesisTestDeliveryOptionRequestInverseTable = "hypothesis_test_delivery_option_requests"
	// HypothesisTestDeliveryOptionRequestColumn is the table column denoting the hypothesis_test_delivery_option_request relation/edge.
	HypothesisTestDeliveryOptionRequestColumn = "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option"
	// DeliveryOptionGroupOneTable is the table that holds the delivery_option_group_one relation/edge. The primary key declared below.
	DeliveryOptionGroupOneTable = "hypothesis_test_delivery_option_delivery_option_group_one"
	// DeliveryOptionGroupOneInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionGroupOneInverseTable = "delivery_options"
	// DeliveryOptionGroupTwoTable is the table that holds the delivery_option_group_two relation/edge. The primary key declared below.
	DeliveryOptionGroupTwoTable = "hypothesis_test_delivery_option_delivery_option_group_two"
	// DeliveryOptionGroupTwoInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionGroupTwoInverseTable = "delivery_options"
)

// Columns holds all SQL columns for hypothesistestdeliveryoption fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldRandomizeWithinGroupSort,
	FieldByIntervalRotation,
	FieldRotationIntervalHours,
	FieldByOrder,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hypothesis_test_delivery_options"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hypothesis_test_hypothesis_test_delivery_option",
}

var (
	// DeliveryOptionGroupOnePrimaryKey and DeliveryOptionGroupOneColumn2 are the table columns denoting the
	// primary key for the delivery_option_group_one relation (M2M).
	DeliveryOptionGroupOnePrimaryKey = []string{"hypothesis_test_delivery_option_id", "delivery_option_id"}
	// DeliveryOptionGroupTwoPrimaryKey and DeliveryOptionGroupTwoColumn2 are the table columns denoting the
	// primary key for the delivery_option_group_two relation (M2M).
	DeliveryOptionGroupTwoPrimaryKey = []string{"hypothesis_test_delivery_option_id", "delivery_option_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultRandomizeWithinGroupSort holds the default value on creation for the "randomize_within_group_sort" field.
	DefaultRandomizeWithinGroupSort bool
	// DefaultByIntervalRotation holds the default value on creation for the "by_interval_rotation" field.
	DefaultByIntervalRotation bool
	// DefaultRotationIntervalHours holds the default value on creation for the "rotation_interval_hours" field.
	DefaultRotationIntervalHours int
	// DefaultByOrder holds the default value on creation for the "by_order" field.
	DefaultByOrder bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the HypothesisTestDeliveryOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByRandomizeWithinGroupSort orders the results by the randomize_within_group_sort field.
func ByRandomizeWithinGroupSort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRandomizeWithinGroupSort, opts...).ToFunc()
}

// ByByIntervalRotation orders the results by the by_interval_rotation field.
func ByByIntervalRotation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldByIntervalRotation, opts...).ToFunc()
}

// ByRotationIntervalHours orders the results by the rotation_interval_hours field.
func ByRotationIntervalHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRotationIntervalHours, opts...).ToFunc()
}

// ByByOrder orders the results by the by_order field.
func ByByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldByOrder, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByHypothesisTestField orders the results by hypothesis_test field.
func ByHypothesisTestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestStep(), sql.OrderByField(field, opts...))
	}
}

// ByHypothesisTestDeliveryOptionRequestCount orders the results by hypothesis_test_delivery_option_request count.
func ByHypothesisTestDeliveryOptionRequestCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHypothesisTestDeliveryOptionRequestStep(), opts...)
	}
}

// ByHypothesisTestDeliveryOptionRequest orders the results by hypothesis_test_delivery_option_request terms.
func ByHypothesisTestDeliveryOptionRequest(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestDeliveryOptionRequestStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionGroupOneCount orders the results by delivery_option_group_one count.
func ByDeliveryOptionGroupOneCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionGroupOneStep(), opts...)
	}
}

// ByDeliveryOptionGroupOne orders the results by delivery_option_group_one terms.
func ByDeliveryOptionGroupOne(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionGroupOneStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionGroupTwoCount orders the results by delivery_option_group_two count.
func ByDeliveryOptionGroupTwoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionGroupTwoStep(), opts...)
	}
}

// ByDeliveryOptionGroupTwo orders the results by delivery_option_group_two terms.
func ByDeliveryOptionGroupTwo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionGroupTwoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newHypothesisTestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, HypothesisTestTable, HypothesisTestColumn),
	)
}
func newHypothesisTestDeliveryOptionRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestDeliveryOptionRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HypothesisTestDeliveryOptionRequestTable, HypothesisTestDeliveryOptionRequestColumn),
	)
}
func newDeliveryOptionGroupOneStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionGroupOneInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DeliveryOptionGroupOneTable, DeliveryOptionGroupOnePrimaryKey...),
	)
}
func newDeliveryOptionGroupTwoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionGroupTwoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DeliveryOptionGroupTwoTable, DeliveryOptionGroupTwoPrimaryKey...),
	)
}
