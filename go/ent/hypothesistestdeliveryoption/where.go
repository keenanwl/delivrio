// Code generated by ent, DO NOT EDIT.

package hypothesistestdeliveryoption

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldTenantID, v))
}

// RandomizeWithinGroupSort applies equality check predicate on the "randomize_within_group_sort" field. It's identical to RandomizeWithinGroupSortEQ.
func RandomizeWithinGroupSort(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldRandomizeWithinGroupSort, v))
}

// ByIntervalRotation applies equality check predicate on the "by_interval_rotation" field. It's identical to ByIntervalRotationEQ.
func ByIntervalRotation(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldByIntervalRotation, v))
}

// RotationIntervalHours applies equality check predicate on the "rotation_interval_hours" field. It's identical to RotationIntervalHoursEQ.
func RotationIntervalHours(v int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldRotationIntervalHours, v))
}

// ByOrder applies equality check predicate on the "by_order" field. It's identical to ByOrderEQ.
func ByOrder(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldByOrder, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOption(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOption(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOption(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOption(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.HypothesisTestDeliveryOption {
	vc := string(v)
	return predicate.HypothesisTestDeliveryOption(sql.FieldContainsFold(FieldTenantID, vc))
}

// RandomizeWithinGroupSortEQ applies the EQ predicate on the "randomize_within_group_sort" field.
func RandomizeWithinGroupSortEQ(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldRandomizeWithinGroupSort, v))
}

// RandomizeWithinGroupSortNEQ applies the NEQ predicate on the "randomize_within_group_sort" field.
func RandomizeWithinGroupSortNEQ(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNEQ(FieldRandomizeWithinGroupSort, v))
}

// ByIntervalRotationEQ applies the EQ predicate on the "by_interval_rotation" field.
func ByIntervalRotationEQ(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldByIntervalRotation, v))
}

// ByIntervalRotationNEQ applies the NEQ predicate on the "by_interval_rotation" field.
func ByIntervalRotationNEQ(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNEQ(FieldByIntervalRotation, v))
}

// RotationIntervalHoursEQ applies the EQ predicate on the "rotation_interval_hours" field.
func RotationIntervalHoursEQ(v int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldRotationIntervalHours, v))
}

// RotationIntervalHoursNEQ applies the NEQ predicate on the "rotation_interval_hours" field.
func RotationIntervalHoursNEQ(v int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNEQ(FieldRotationIntervalHours, v))
}

// RotationIntervalHoursIn applies the In predicate on the "rotation_interval_hours" field.
func RotationIntervalHoursIn(vs ...int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldIn(FieldRotationIntervalHours, vs...))
}

// RotationIntervalHoursNotIn applies the NotIn predicate on the "rotation_interval_hours" field.
func RotationIntervalHoursNotIn(vs ...int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNotIn(FieldRotationIntervalHours, vs...))
}

// RotationIntervalHoursGT applies the GT predicate on the "rotation_interval_hours" field.
func RotationIntervalHoursGT(v int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldGT(FieldRotationIntervalHours, v))
}

// RotationIntervalHoursGTE applies the GTE predicate on the "rotation_interval_hours" field.
func RotationIntervalHoursGTE(v int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldGTE(FieldRotationIntervalHours, v))
}

// RotationIntervalHoursLT applies the LT predicate on the "rotation_interval_hours" field.
func RotationIntervalHoursLT(v int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldLT(FieldRotationIntervalHours, v))
}

// RotationIntervalHoursLTE applies the LTE predicate on the "rotation_interval_hours" field.
func RotationIntervalHoursLTE(v int) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldLTE(FieldRotationIntervalHours, v))
}

// ByOrderEQ applies the EQ predicate on the "by_order" field.
func ByOrderEQ(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldEQ(FieldByOrder, v))
}

// ByOrderNEQ applies the NEQ predicate on the "by_order" field.
func ByOrderNEQ(v bool) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.FieldNEQ(FieldByOrder, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHypothesisTest applies the HasEdge predicate on the "hypothesis_test" edge.
func HasHypothesisTest() predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, HypothesisTestTable, HypothesisTestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHypothesisTestWith applies the HasEdge predicate on the "hypothesis_test" edge with a given conditions (other predicates).
func HasHypothesisTestWith(preds ...predicate.HypothesisTest) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := newHypothesisTestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHypothesisTestDeliveryOptionRequest applies the HasEdge predicate on the "hypothesis_test_delivery_option_request" edge.
func HasHypothesisTestDeliveryOptionRequest() predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HypothesisTestDeliveryOptionRequestTable, HypothesisTestDeliveryOptionRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHypothesisTestDeliveryOptionRequestWith applies the HasEdge predicate on the "hypothesis_test_delivery_option_request" edge with a given conditions (other predicates).
func HasHypothesisTestDeliveryOptionRequestWith(preds ...predicate.HypothesisTestDeliveryOptionRequest) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := newHypothesisTestDeliveryOptionRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionGroupOne applies the HasEdge predicate on the "delivery_option_group_one" edge.
func HasDeliveryOptionGroupOne() predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DeliveryOptionGroupOneTable, DeliveryOptionGroupOnePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionGroupOneWith applies the HasEdge predicate on the "delivery_option_group_one" edge with a given conditions (other predicates).
func HasDeliveryOptionGroupOneWith(preds ...predicate.DeliveryOption) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionGroupOneStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionGroupTwo applies the HasEdge predicate on the "delivery_option_group_two" edge.
func HasDeliveryOptionGroupTwo() predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DeliveryOptionGroupTwoTable, DeliveryOptionGroupTwoPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionGroupTwoWith applies the HasEdge predicate on the "delivery_option_group_two" edge with a given conditions (other predicates).
func HasDeliveryOptionGroupTwoWith(preds ...predicate.DeliveryOption) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(func(s *sql.Selector) {
		step := newDeliveryOptionGroupTwoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HypothesisTestDeliveryOption) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HypothesisTestDeliveryOption) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HypothesisTestDeliveryOption) predicate.HypothesisTestDeliveryOption {
	return predicate.HypothesisTestDeliveryOption(sql.NotPredicates(p))
}
