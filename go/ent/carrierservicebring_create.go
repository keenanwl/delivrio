// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceBringCreate is the builder for creating a CarrierServiceBring entity.
type CarrierServiceBringCreate struct {
	config
	mutation *CarrierServiceBringMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAPIServiceCode sets the "api_service_code" field.
func (csbc *CarrierServiceBringCreate) SetAPIServiceCode(s string) *CarrierServiceBringCreate {
	csbc.mutation.SetAPIServiceCode(s)
	return csbc
}

// SetAPIRequest sets the "api_request" field.
func (csbc *CarrierServiceBringCreate) SetAPIRequest(s string) *CarrierServiceBringCreate {
	csbc.mutation.SetAPIRequest(s)
	return csbc
}

// SetID sets the "id" field.
func (csbc *CarrierServiceBringCreate) SetID(pu pulid.ID) *CarrierServiceBringCreate {
	csbc.mutation.SetID(pu)
	return csbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csbc *CarrierServiceBringCreate) SetNillableID(pu *pulid.ID) *CarrierServiceBringCreate {
	if pu != nil {
		csbc.SetID(*pu)
	}
	return csbc
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csbc *CarrierServiceBringCreate) SetCarrierServiceID(id pulid.ID) *CarrierServiceBringCreate {
	csbc.mutation.SetCarrierServiceID(id)
	return csbc
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csbc *CarrierServiceBringCreate) SetCarrierService(c *CarrierService) *CarrierServiceBringCreate {
	return csbc.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceBringIDs adds the "carrier_additional_service_bring" edge to the CarrierAdditionalServiceBring entity by IDs.
func (csbc *CarrierServiceBringCreate) AddCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *CarrierServiceBringCreate {
	csbc.mutation.AddCarrierAdditionalServiceBringIDs(ids...)
	return csbc
}

// AddCarrierAdditionalServiceBring adds the "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (csbc *CarrierServiceBringCreate) AddCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *CarrierServiceBringCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csbc.AddCarrierAdditionalServiceBringIDs(ids...)
}

// Mutation returns the CarrierServiceBringMutation object of the builder.
func (csbc *CarrierServiceBringCreate) Mutation() *CarrierServiceBringMutation {
	return csbc.mutation
}

// Save creates the CarrierServiceBring in the database.
func (csbc *CarrierServiceBringCreate) Save(ctx context.Context) (*CarrierServiceBring, error) {
	if err := csbc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csbc.sqlSave, csbc.mutation, csbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csbc *CarrierServiceBringCreate) SaveX(ctx context.Context) *CarrierServiceBring {
	v, err := csbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csbc *CarrierServiceBringCreate) Exec(ctx context.Context) error {
	_, err := csbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csbc *CarrierServiceBringCreate) ExecX(ctx context.Context) {
	if err := csbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csbc *CarrierServiceBringCreate) defaults() error {
	if _, ok := csbc.mutation.ID(); !ok {
		if carrierservicebring.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierservicebring.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierservicebring.DefaultID()
		csbc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csbc *CarrierServiceBringCreate) check() error {
	if _, ok := csbc.mutation.APIServiceCode(); !ok {
		return &ValidationError{Name: "api_service_code", err: errors.New(`ent: missing required field "CarrierServiceBring.api_service_code"`)}
	}
	if _, ok := csbc.mutation.APIRequest(); !ok {
		return &ValidationError{Name: "api_request", err: errors.New(`ent: missing required field "CarrierServiceBring.api_request"`)}
	}
	if len(csbc.mutation.CarrierServiceIDs()) == 0 {
		return &ValidationError{Name: "carrier_service", err: errors.New(`ent: missing required edge "CarrierServiceBring.carrier_service"`)}
	}
	return nil
}

func (csbc *CarrierServiceBringCreate) sqlSave(ctx context.Context) (*CarrierServiceBring, error) {
	if err := csbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csbc.mutation.id = &_node.ID
	csbc.mutation.done = true
	return _node, nil
}

func (csbc *CarrierServiceBringCreate) createSpec() (*CarrierServiceBring, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierServiceBring{config: csbc.config}
		_spec = sqlgraph.NewCreateSpec(carrierservicebring.Table, sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString))
	)
	_spec.OnConflict = csbc.conflict
	if id, ok := csbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csbc.mutation.APIServiceCode(); ok {
		_spec.SetField(carrierservicebring.FieldAPIServiceCode, field.TypeString, value)
		_node.APIServiceCode = value
	}
	if value, ok := csbc.mutation.APIRequest(); ok {
		_spec.SetField(carrierservicebring.FieldAPIRequest, field.TypeString, value)
		_node.APIRequest = value
	}
	if nodes := csbc.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicebring.CarrierServiceTable,
			Columns: []string{carrierservicebring.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_service_carrier_service_bring = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csbc.mutation.CarrierAdditionalServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicebring.CarrierAdditionalServiceBringTable,
			Columns: []string{carrierservicebring.CarrierAdditionalServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierServiceBring.Create().
//		SetAPIServiceCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierServiceBringUpsert) {
//			SetAPIServiceCode(v+v).
//		}).
//		Exec(ctx)
func (csbc *CarrierServiceBringCreate) OnConflict(opts ...sql.ConflictOption) *CarrierServiceBringUpsertOne {
	csbc.conflict = opts
	return &CarrierServiceBringUpsertOne{
		create: csbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierServiceBring.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csbc *CarrierServiceBringCreate) OnConflictColumns(columns ...string) *CarrierServiceBringUpsertOne {
	csbc.conflict = append(csbc.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceBringUpsertOne{
		create: csbc,
	}
}

type (
	// CarrierServiceBringUpsertOne is the builder for "upsert"-ing
	//  one CarrierServiceBring node.
	CarrierServiceBringUpsertOne struct {
		create *CarrierServiceBringCreate
	}

	// CarrierServiceBringUpsert is the "OnConflict" setter.
	CarrierServiceBringUpsert struct {
		*sql.UpdateSet
	}
)

// SetAPIServiceCode sets the "api_service_code" field.
func (u *CarrierServiceBringUpsert) SetAPIServiceCode(v string) *CarrierServiceBringUpsert {
	u.Set(carrierservicebring.FieldAPIServiceCode, v)
	return u
}

// UpdateAPIServiceCode sets the "api_service_code" field to the value that was provided on create.
func (u *CarrierServiceBringUpsert) UpdateAPIServiceCode() *CarrierServiceBringUpsert {
	u.SetExcluded(carrierservicebring.FieldAPIServiceCode)
	return u
}

// SetAPIRequest sets the "api_request" field.
func (u *CarrierServiceBringUpsert) SetAPIRequest(v string) *CarrierServiceBringUpsert {
	u.Set(carrierservicebring.FieldAPIRequest, v)
	return u
}

// UpdateAPIRequest sets the "api_request" field to the value that was provided on create.
func (u *CarrierServiceBringUpsert) UpdateAPIRequest() *CarrierServiceBringUpsert {
	u.SetExcluded(carrierservicebring.FieldAPIRequest)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierServiceBring.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierservicebring.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceBringUpsertOne) UpdateNewValues() *CarrierServiceBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierservicebring.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierServiceBring.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierServiceBringUpsertOne) Ignore() *CarrierServiceBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceBringUpsertOne) DoNothing() *CarrierServiceBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceBringCreate.OnConflict
// documentation for more info.
func (u *CarrierServiceBringUpsertOne) Update(set func(*CarrierServiceBringUpsert)) *CarrierServiceBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceBringUpsert{UpdateSet: update})
	}))
	return u
}

// SetAPIServiceCode sets the "api_service_code" field.
func (u *CarrierServiceBringUpsertOne) SetAPIServiceCode(v string) *CarrierServiceBringUpsertOne {
	return u.Update(func(s *CarrierServiceBringUpsert) {
		s.SetAPIServiceCode(v)
	})
}

// UpdateAPIServiceCode sets the "api_service_code" field to the value that was provided on create.
func (u *CarrierServiceBringUpsertOne) UpdateAPIServiceCode() *CarrierServiceBringUpsertOne {
	return u.Update(func(s *CarrierServiceBringUpsert) {
		s.UpdateAPIServiceCode()
	})
}

// SetAPIRequest sets the "api_request" field.
func (u *CarrierServiceBringUpsertOne) SetAPIRequest(v string) *CarrierServiceBringUpsertOne {
	return u.Update(func(s *CarrierServiceBringUpsert) {
		s.SetAPIRequest(v)
	})
}

// UpdateAPIRequest sets the "api_request" field to the value that was provided on create.
func (u *CarrierServiceBringUpsertOne) UpdateAPIRequest() *CarrierServiceBringUpsertOne {
	return u.Update(func(s *CarrierServiceBringUpsert) {
		s.UpdateAPIRequest()
	})
}

// Exec executes the query.
func (u *CarrierServiceBringUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceBringCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceBringUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierServiceBringUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierServiceBringUpsertOne.ID is not supported by MySQL driver. Use CarrierServiceBringUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierServiceBringUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierServiceBringCreateBulk is the builder for creating many CarrierServiceBring entities in bulk.
type CarrierServiceBringCreateBulk struct {
	config
	err      error
	builders []*CarrierServiceBringCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierServiceBring entities in the database.
func (csbcb *CarrierServiceBringCreateBulk) Save(ctx context.Context) ([]*CarrierServiceBring, error) {
	if csbcb.err != nil {
		return nil, csbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(csbcb.builders))
	nodes := make([]*CarrierServiceBring, len(csbcb.builders))
	mutators := make([]Mutator, len(csbcb.builders))
	for i := range csbcb.builders {
		func(i int, root context.Context) {
			builder := csbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierServiceBringMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = csbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csbcb *CarrierServiceBringCreateBulk) SaveX(ctx context.Context) []*CarrierServiceBring {
	v, err := csbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csbcb *CarrierServiceBringCreateBulk) Exec(ctx context.Context) error {
	_, err := csbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csbcb *CarrierServiceBringCreateBulk) ExecX(ctx context.Context) {
	if err := csbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierServiceBring.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierServiceBringUpsert) {
//			SetAPIServiceCode(v+v).
//		}).
//		Exec(ctx)
func (csbcb *CarrierServiceBringCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierServiceBringUpsertBulk {
	csbcb.conflict = opts
	return &CarrierServiceBringUpsertBulk{
		create: csbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierServiceBring.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csbcb *CarrierServiceBringCreateBulk) OnConflictColumns(columns ...string) *CarrierServiceBringUpsertBulk {
	csbcb.conflict = append(csbcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceBringUpsertBulk{
		create: csbcb,
	}
}

// CarrierServiceBringUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierServiceBring nodes.
type CarrierServiceBringUpsertBulk struct {
	create *CarrierServiceBringCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierServiceBring.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierservicebring.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceBringUpsertBulk) UpdateNewValues() *CarrierServiceBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierservicebring.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierServiceBring.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierServiceBringUpsertBulk) Ignore() *CarrierServiceBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceBringUpsertBulk) DoNothing() *CarrierServiceBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceBringCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierServiceBringUpsertBulk) Update(set func(*CarrierServiceBringUpsert)) *CarrierServiceBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceBringUpsert{UpdateSet: update})
	}))
	return u
}

// SetAPIServiceCode sets the "api_service_code" field.
func (u *CarrierServiceBringUpsertBulk) SetAPIServiceCode(v string) *CarrierServiceBringUpsertBulk {
	return u.Update(func(s *CarrierServiceBringUpsert) {
		s.SetAPIServiceCode(v)
	})
}

// UpdateAPIServiceCode sets the "api_service_code" field to the value that was provided on create.
func (u *CarrierServiceBringUpsertBulk) UpdateAPIServiceCode() *CarrierServiceBringUpsertBulk {
	return u.Update(func(s *CarrierServiceBringUpsert) {
		s.UpdateAPIServiceCode()
	})
}

// SetAPIRequest sets the "api_request" field.
func (u *CarrierServiceBringUpsertBulk) SetAPIRequest(v string) *CarrierServiceBringUpsertBulk {
	return u.Update(func(s *CarrierServiceBringUpsert) {
		s.SetAPIRequest(v)
	})
}

// UpdateAPIRequest sets the "api_request" field to the value that was provided on create.
func (u *CarrierServiceBringUpsertBulk) UpdateAPIRequest() *CarrierServiceBringUpsertBulk {
	return u.Update(func(s *CarrierServiceBringUpsert) {
		s.UpdateAPIRequest()
	})
}

// Exec executes the query.
func (u *CarrierServiceBringUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierServiceBringCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceBringCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceBringUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
