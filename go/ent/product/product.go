// Code generated by ent, DO NOT EDIT.

package product

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldBodyHTML holds the string denoting the body_html field in the database.
	FieldBodyHTML = "body_html"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeProductTags holds the string denoting the product_tags edge name in mutations.
	EdgeProductTags = "product_tags"
	// EdgeProductVariant holds the string denoting the product_variant edge name in mutations.
	EdgeProductVariant = "product_variant"
	// EdgeProductImage holds the string denoting the product_image edge name in mutations.
	EdgeProductImage = "product_image"
	// Table holds the table name of the product in the database.
	Table = "products"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "products"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ProductTagsTable is the table that holds the product_tags relation/edge. The primary key declared below.
	ProductTagsTable = "product_tag_products"
	// ProductTagsInverseTable is the table name for the ProductTag entity.
	// It exists in this package in order to avoid circular dependency with the "producttag" package.
	ProductTagsInverseTable = "product_tags"
	// ProductVariantTable is the table that holds the product_variant relation/edge.
	ProductVariantTable = "product_variants"
	// ProductVariantInverseTable is the table name for the ProductVariant entity.
	// It exists in this package in order to avoid circular dependency with the "productvariant" package.
	ProductVariantInverseTable = "product_variants"
	// ProductVariantColumn is the table column denoting the product_variant relation/edge.
	ProductVariantColumn = "product_product_variant"
	// ProductImageTable is the table that holds the product_image relation/edge.
	ProductImageTable = "product_images"
	// ProductImageInverseTable is the table name for the ProductImage entity.
	// It exists in this package in order to avoid circular dependency with the "productimage" package.
	ProductImageInverseTable = "product_images"
	// ProductImageColumn is the table column denoting the product_image relation/edge.
	ProductImageColumn = "product_image_product"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldExternalID,
	FieldTitle,
	FieldBodyHTML,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// ProductTagsPrimaryKey and ProductTagsColumn2 are the table columns denoting the
	// primary key for the product_tags relation (M2M).
	ProductTagsPrimaryKey = []string{"product_tag_id", "product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [3]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive   Status = "active"
	StatusArchived Status = "archived"
	StatusDraft    Status = "draft"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusArchived, StatusDraft:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByBodyHTML orders the results by the body_html field.
func ByBodyHTML(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBodyHTML, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductTagsCount orders the results by product_tags count.
func ByProductTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductTagsStep(), opts...)
	}
}

// ByProductTags orders the results by product_tags terms.
func ByProductTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductVariantCount orders the results by product_variant count.
func ByProductVariantCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductVariantStep(), opts...)
	}
}

// ByProductVariant orders the results by product_variant terms.
func ByProductVariant(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductVariantStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductImageCount orders the results by product_image count.
func ByProductImageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductImageStep(), opts...)
	}
}

// ByProductImage orders the results by product_image terms.
func ByProductImage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newProductTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductTagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProductTagsTable, ProductTagsPrimaryKey...),
	)
}
func newProductVariantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductVariantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductVariantTable, ProductVariantColumn),
	)
}
func newProductImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ProductImageTable, ProductImageColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
