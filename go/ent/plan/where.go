// Code generated by ent, DO NOT EDIT.

package plan

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldID, id))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRank, v))
}

// PriceDkk applies equality check predicate on the "price_dkk" field. It's identical to PriceDkkEQ.
func PriceDkk(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPriceDkk, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCreatedAt, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldLabel, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldRank, v))
}

// PriceDkkEQ applies the EQ predicate on the "price_dkk" field.
func PriceDkkEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPriceDkk, v))
}

// PriceDkkNEQ applies the NEQ predicate on the "price_dkk" field.
func PriceDkkNEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldPriceDkk, v))
}

// PriceDkkIn applies the In predicate on the "price_dkk" field.
func PriceDkkIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldPriceDkk, vs...))
}

// PriceDkkNotIn applies the NotIn predicate on the "price_dkk" field.
func PriceDkkNotIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldPriceDkk, vs...))
}

// PriceDkkGT applies the GT predicate on the "price_dkk" field.
func PriceDkkGT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldPriceDkk, v))
}

// PriceDkkGTE applies the GTE predicate on the "price_dkk" field.
func PriceDkkGTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldPriceDkk, v))
}

// PriceDkkLT applies the LT predicate on the "price_dkk" field.
func PriceDkkLT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldPriceDkk, v))
}

// PriceDkkLTE applies the LTE predicate on the "price_dkk" field.
func PriceDkkLTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldPriceDkk, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlanHistoryPlan applies the HasEdge predicate on the "plan_history_plan" edge.
func HasPlanHistoryPlan() predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlanHistoryPlanTable, PlanHistoryPlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanHistoryPlanWith applies the HasEdge predicate on the "plan_history_plan" edge with a given conditions (other predicates).
func HasPlanHistoryPlanWith(preds ...predicate.PlanHistory) predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := newPlanHistoryPlanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.NotPredicates(p))
}
