// Code generated by ent, DO NOT EDIT.

package plan

import (
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldPriceDkk holds the string denoting the price_dkk field in the database.
	FieldPriceDkk = "price_dkk"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePlanHistoryPlan holds the string denoting the plan_history_plan edge name in mutations.
	EdgePlanHistoryPlan = "plan_history_plan"
	// Table holds the table name of the plan in the database.
	Table = "plans"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "tenants"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "plan_tenant"
	// PlanHistoryPlanTable is the table that holds the plan_history_plan relation/edge.
	PlanHistoryPlanTable = "plan_histories"
	// PlanHistoryPlanInverseTable is the table name for the PlanHistory entity.
	// It exists in this package in order to avoid circular dependency with the "planhistory" package.
	PlanHistoryPlanInverseTable = "plan_histories"
	// PlanHistoryPlanColumn is the table column denoting the plan_history_plan relation/edge.
	PlanHistoryPlanColumn = "plan_plan_history_plan"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldRank,
	FieldPriceDkk,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByPriceDkk orders the results by the price_dkk field.
func ByPriceDkk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceDkk, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTenantCount orders the results by tenant count.
func ByTenantCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTenantStep(), opts...)
	}
}

// ByTenant orders the results by tenant terms.
func ByTenant(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlanHistoryPlanCount orders the results by plan_history_plan count.
func ByPlanHistoryPlanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlanHistoryPlanStep(), opts...)
	}
}

// ByPlanHistoryPlan orders the results by plan_history_plan terms.
func ByPlanHistoryPlan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanHistoryPlanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TenantTable, TenantColumn),
	)
}
func newPlanHistoryPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanHistoryPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlanHistoryPlanTable, PlanHistoryPlanColumn),
	)
}
