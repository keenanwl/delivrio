// Code generated by ent, DO NOT EDIT.

package country

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldID, id))
}

// Alpha2 applies equality check predicate on the "alpha_2" field. It's identical to Alpha2EQ.
func Alpha2(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldAlpha2, v))
}

// Alpha3 applies equality check predicate on the "alpha_3" field. It's identical to Alpha3EQ.
func Alpha3(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldAlpha3, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldCode, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldLabel, v))
}

// Alpha2EQ applies the EQ predicate on the "alpha_2" field.
func Alpha2EQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldAlpha2, v))
}

// Alpha2NEQ applies the NEQ predicate on the "alpha_2" field.
func Alpha2NEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldAlpha2, v))
}

// Alpha2In applies the In predicate on the "alpha_2" field.
func Alpha2In(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldAlpha2, vs...))
}

// Alpha2NotIn applies the NotIn predicate on the "alpha_2" field.
func Alpha2NotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldAlpha2, vs...))
}

// Alpha2GT applies the GT predicate on the "alpha_2" field.
func Alpha2GT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldAlpha2, v))
}

// Alpha2GTE applies the GTE predicate on the "alpha_2" field.
func Alpha2GTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldAlpha2, v))
}

// Alpha2LT applies the LT predicate on the "alpha_2" field.
func Alpha2LT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldAlpha2, v))
}

// Alpha2LTE applies the LTE predicate on the "alpha_2" field.
func Alpha2LTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldAlpha2, v))
}

// Alpha2Contains applies the Contains predicate on the "alpha_2" field.
func Alpha2Contains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldAlpha2, v))
}

// Alpha2HasPrefix applies the HasPrefix predicate on the "alpha_2" field.
func Alpha2HasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldAlpha2, v))
}

// Alpha2HasSuffix applies the HasSuffix predicate on the "alpha_2" field.
func Alpha2HasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldAlpha2, v))
}

// Alpha2EqualFold applies the EqualFold predicate on the "alpha_2" field.
func Alpha2EqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldAlpha2, v))
}

// Alpha2ContainsFold applies the ContainsFold predicate on the "alpha_2" field.
func Alpha2ContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldAlpha2, v))
}

// Alpha3EQ applies the EQ predicate on the "alpha_3" field.
func Alpha3EQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldAlpha3, v))
}

// Alpha3NEQ applies the NEQ predicate on the "alpha_3" field.
func Alpha3NEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldAlpha3, v))
}

// Alpha3In applies the In predicate on the "alpha_3" field.
func Alpha3In(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldAlpha3, vs...))
}

// Alpha3NotIn applies the NotIn predicate on the "alpha_3" field.
func Alpha3NotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldAlpha3, vs...))
}

// Alpha3GT applies the GT predicate on the "alpha_3" field.
func Alpha3GT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldAlpha3, v))
}

// Alpha3GTE applies the GTE predicate on the "alpha_3" field.
func Alpha3GTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldAlpha3, v))
}

// Alpha3LT applies the LT predicate on the "alpha_3" field.
func Alpha3LT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldAlpha3, v))
}

// Alpha3LTE applies the LTE predicate on the "alpha_3" field.
func Alpha3LTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldAlpha3, v))
}

// Alpha3Contains applies the Contains predicate on the "alpha_3" field.
func Alpha3Contains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldAlpha3, v))
}

// Alpha3HasPrefix applies the HasPrefix predicate on the "alpha_3" field.
func Alpha3HasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldAlpha3, v))
}

// Alpha3HasSuffix applies the HasSuffix predicate on the "alpha_3" field.
func Alpha3HasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldAlpha3, v))
}

// Alpha3EqualFold applies the EqualFold predicate on the "alpha_3" field.
func Alpha3EqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldAlpha3, v))
}

// Alpha3ContainsFold applies the ContainsFold predicate on the "alpha_3" field.
func Alpha3ContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldAlpha3, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Country {
	return predicate.Country(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Country {
	return predicate.Country(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Country {
	return predicate.Country(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Country {
	return predicate.Country(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Country {
	return predicate.Country(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Country {
	return predicate.Country(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Country {
	return predicate.Country(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Country {
	return predicate.Country(sql.FieldContainsFold(FieldCode, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v Region) predicate.Country {
	return predicate.Country(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v Region) predicate.Country {
	return predicate.Country(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...Region) predicate.Country {
	return predicate.Country(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...Region) predicate.Country {
	return predicate.Country(sql.FieldNotIn(FieldRegion, vs...))
}

// HasDeliveryRule applies the HasEdge predicate on the "delivery_rule" edge.
func HasDeliveryRule() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DeliveryRuleTable, DeliveryRulePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryRuleWith applies the HasEdge predicate on the "delivery_rule" edge with a given conditions (other predicates).
func HasDeliveryRuleWith(preds ...predicate.DeliveryRule) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newDeliveryRuleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddress applies the HasEdge predicate on the "address" edge.
func HasAddress() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AddressTable, AddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressWith applies the HasEdge predicate on the "address" edge with a given conditions (other predicates).
func HasAddressWith(preds ...predicate.Address) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddressGlobal applies the HasEdge predicate on the "address_global" edge.
func HasAddressGlobal() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AddressGlobalTable, AddressGlobalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressGlobalWith applies the HasEdge predicate on the "address_global" edge with a given conditions (other predicates).
func HasAddressGlobalWith(preds ...predicate.AddressGlobal) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newAddressGlobalStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierAdditionalServicePostNordConsignee applies the HasEdge predicate on the "carrier_additional_service_post_nord_consignee" edge.
func HasCarrierAdditionalServicePostNordConsignee() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CarrierAdditionalServicePostNordConsigneeTable, CarrierAdditionalServicePostNordConsigneePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierAdditionalServicePostNordConsigneeWith applies the HasEdge predicate on the "carrier_additional_service_post_nord_consignee" edge with a given conditions (other predicates).
func HasCarrierAdditionalServicePostNordConsigneeWith(preds ...predicate.CarrierAdditionalServicePostNord) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newCarrierAdditionalServicePostNordConsigneeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierAdditionalServicePostNordConsignor applies the HasEdge predicate on the "carrier_additional_service_post_nord_consignor" edge.
func HasCarrierAdditionalServicePostNordConsignor() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CarrierAdditionalServicePostNordConsignorTable, CarrierAdditionalServicePostNordConsignorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierAdditionalServicePostNordConsignorWith applies the HasEdge predicate on the "carrier_additional_service_post_nord_consignor" edge with a given conditions (other predicates).
func HasCarrierAdditionalServicePostNordConsignorWith(preds ...predicate.CarrierAdditionalServicePostNord) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newCarrierAdditionalServicePostNordConsignorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierAdditionalServiceGLSConsignee applies the HasEdge predicate on the "carrier_additional_service_gls_consignee" edge.
func HasCarrierAdditionalServiceGLSConsignee() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CarrierAdditionalServiceGLSConsigneeTable, CarrierAdditionalServiceGLSConsigneePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierAdditionalServiceGLSConsigneeWith applies the HasEdge predicate on the "carrier_additional_service_gls_consignee" edge with a given conditions (other predicates).
func HasCarrierAdditionalServiceGLSConsigneeWith(preds ...predicate.CarrierAdditionalServiceGLS) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newCarrierAdditionalServiceGLSConsigneeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierAdditionalServiceGLSConsignor applies the HasEdge predicate on the "carrier_additional_service_gls_consignor" edge.
func HasCarrierAdditionalServiceGLSConsignor() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CarrierAdditionalServiceGLSConsignorTable, CarrierAdditionalServiceGLSConsignorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierAdditionalServiceGLSConsignorWith applies the HasEdge predicate on the "carrier_additional_service_gls_consignor" edge with a given conditions (other predicates).
func HasCarrierAdditionalServiceGLSConsignorWith(preds ...predicate.CarrierAdditionalServiceGLS) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newCarrierAdditionalServiceGLSConsignorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountryHarmonizedCode applies the HasEdge predicate on the "country_harmonized_code" edge.
func HasCountryHarmonizedCode() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CountryHarmonizedCodeTable, CountryHarmonizedCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryHarmonizedCodeWith applies the HasEdge predicate on the "country_harmonized_code" edge with a given conditions (other predicates).
func HasCountryHarmonizedCodeWith(preds ...predicate.CountryHarmonizedCode) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newCountryHarmonizedCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInventoryItem applies the HasEdge predicate on the "inventory_item" edge.
func HasInventoryItem() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InventoryItemTable, InventoryItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryItemWith applies the HasEdge predicate on the "inventory_item" edge with a given conditions (other predicates).
func HasInventoryItemWith(preds ...predicate.InventoryItem) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := newInventoryItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Country) predicate.Country {
	return predicate.Country(sql.NotPredicates(p))
}
