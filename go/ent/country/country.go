// Code generated by ent, DO NOT EDIT.

package country

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the country type in the database.
	Label = "country"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldAlpha2 holds the string denoting the alpha_2 field in the database.
	FieldAlpha2 = "alpha_2"
	// FieldAlpha3 holds the string denoting the alpha_3 field in the database.
	FieldAlpha3 = "alpha_3"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// EdgeDeliveryRule holds the string denoting the delivery_rule edge name in mutations.
	EdgeDeliveryRule = "delivery_rule"
	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "address"
	// EdgeAddressGlobal holds the string denoting the address_global edge name in mutations.
	EdgeAddressGlobal = "address_global"
	// EdgeCarrierAdditionalServicePostNordConsignee holds the string denoting the carrier_additional_service_post_nord_consignee edge name in mutations.
	EdgeCarrierAdditionalServicePostNordConsignee = "carrier_additional_service_post_nord_consignee"
	// EdgeCarrierAdditionalServicePostNordConsignor holds the string denoting the carrier_additional_service_post_nord_consignor edge name in mutations.
	EdgeCarrierAdditionalServicePostNordConsignor = "carrier_additional_service_post_nord_consignor"
	// EdgeCarrierAdditionalServiceGLSConsignee holds the string denoting the carrier_additional_service_gls_consignee edge name in mutations.
	EdgeCarrierAdditionalServiceGLSConsignee = "carrier_additional_service_gls_consignee"
	// EdgeCarrierAdditionalServiceGLSConsignor holds the string denoting the carrier_additional_service_gls_consignor edge name in mutations.
	EdgeCarrierAdditionalServiceGLSConsignor = "carrier_additional_service_gls_consignor"
	// EdgeCountryHarmonizedCode holds the string denoting the country_harmonized_code edge name in mutations.
	EdgeCountryHarmonizedCode = "country_harmonized_code"
	// EdgeInventoryItem holds the string denoting the inventory_item edge name in mutations.
	EdgeInventoryItem = "inventory_item"
	// Table holds the table name of the country in the database.
	Table = "countries"
	// DeliveryRuleTable is the table that holds the delivery_rule relation/edge. The primary key declared below.
	DeliveryRuleTable = "country_delivery_rule"
	// DeliveryRuleInverseTable is the table name for the DeliveryRule entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryrule" package.
	DeliveryRuleInverseTable = "delivery_rules"
	// AddressTable is the table that holds the address relation/edge.
	AddressTable = "addresses"
	// AddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressInverseTable = "addresses"
	// AddressColumn is the table column denoting the address relation/edge.
	AddressColumn = "address_country"
	// AddressGlobalTable is the table that holds the address_global relation/edge.
	AddressGlobalTable = "address_globals"
	// AddressGlobalInverseTable is the table name for the AddressGlobal entity.
	// It exists in this package in order to avoid circular dependency with the "addressglobal" package.
	AddressGlobalInverseTable = "address_globals"
	// AddressGlobalColumn is the table column denoting the address_global relation/edge.
	AddressGlobalColumn = "address_global_country"
	// CarrierAdditionalServicePostNordConsigneeTable is the table that holds the carrier_additional_service_post_nord_consignee relation/edge. The primary key declared below.
	CarrierAdditionalServicePostNordConsigneeTable = "carrier_additional_service_post_nord_countries_consignee"
	// CarrierAdditionalServicePostNordConsigneeInverseTable is the table name for the CarrierAdditionalServicePostNord entity.
	// It exists in this package in order to avoid circular dependency with the "carrieradditionalservicepostnord" package.
	CarrierAdditionalServicePostNordConsigneeInverseTable = "carrier_additional_service_post_nords"
	// CarrierAdditionalServicePostNordConsignorTable is the table that holds the carrier_additional_service_post_nord_consignor relation/edge. The primary key declared below.
	CarrierAdditionalServicePostNordConsignorTable = "carrier_additional_service_post_nord_countries_consignor"
	// CarrierAdditionalServicePostNordConsignorInverseTable is the table name for the CarrierAdditionalServicePostNord entity.
	// It exists in this package in order to avoid circular dependency with the "carrieradditionalservicepostnord" package.
	CarrierAdditionalServicePostNordConsignorInverseTable = "carrier_additional_service_post_nords"
	// CarrierAdditionalServiceGLSConsigneeTable is the table that holds the carrier_additional_service_gls_consignee relation/edge. The primary key declared below.
	CarrierAdditionalServiceGLSConsigneeTable = "carrier_additional_service_gls_countries_consignee"
	// CarrierAdditionalServiceGLSConsigneeInverseTable is the table name for the CarrierAdditionalServiceGLS entity.
	// It exists in this package in order to avoid circular dependency with the "carrieradditionalservicegls" package.
	CarrierAdditionalServiceGLSConsigneeInverseTable = "carrier_additional_service_gl_ss"
	// CarrierAdditionalServiceGLSConsignorTable is the table that holds the carrier_additional_service_gls_consignor relation/edge. The primary key declared below.
	CarrierAdditionalServiceGLSConsignorTable = "carrier_additional_service_gls_countries_consignor"
	// CarrierAdditionalServiceGLSConsignorInverseTable is the table name for the CarrierAdditionalServiceGLS entity.
	// It exists in this package in order to avoid circular dependency with the "carrieradditionalservicegls" package.
	CarrierAdditionalServiceGLSConsignorInverseTable = "carrier_additional_service_gl_ss"
	// CountryHarmonizedCodeTable is the table that holds the country_harmonized_code relation/edge.
	CountryHarmonizedCodeTable = "country_harmonized_codes"
	// CountryHarmonizedCodeInverseTable is the table name for the CountryHarmonizedCode entity.
	// It exists in this package in order to avoid circular dependency with the "countryharmonizedcode" package.
	CountryHarmonizedCodeInverseTable = "country_harmonized_codes"
	// CountryHarmonizedCodeColumn is the table column denoting the country_harmonized_code relation/edge.
	CountryHarmonizedCodeColumn = "country_harmonized_code_country"
	// InventoryItemTable is the table that holds the inventory_item relation/edge.
	InventoryItemTable = "inventory_items"
	// InventoryItemInverseTable is the table name for the InventoryItem entity.
	// It exists in this package in order to avoid circular dependency with the "inventoryitem" package.
	InventoryItemInverseTable = "inventory_items"
	// InventoryItemColumn is the table column denoting the inventory_item relation/edge.
	InventoryItemColumn = "inventory_item_country_of_origin"
)

// Columns holds all SQL columns for country fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldAlpha2,
	FieldAlpha3,
	FieldCode,
	FieldRegion,
}

var (
	// DeliveryRulePrimaryKey and DeliveryRuleColumn2 are the table columns denoting the
	// primary key for the delivery_rule relation (M2M).
	DeliveryRulePrimaryKey = []string{"country_id", "delivery_rule_id"}
	// CarrierAdditionalServicePostNordConsigneePrimaryKey and CarrierAdditionalServicePostNordConsigneeColumn2 are the table columns denoting the
	// primary key for the carrier_additional_service_post_nord_consignee relation (M2M).
	CarrierAdditionalServicePostNordConsigneePrimaryKey = []string{"carrier_additional_service_post_nord_id", "country_id"}
	// CarrierAdditionalServicePostNordConsignorPrimaryKey and CarrierAdditionalServicePostNordConsignorColumn2 are the table columns denoting the
	// primary key for the carrier_additional_service_post_nord_consignor relation (M2M).
	CarrierAdditionalServicePostNordConsignorPrimaryKey = []string{"carrier_additional_service_post_nord_id", "country_id"}
	// CarrierAdditionalServiceGLSConsigneePrimaryKey and CarrierAdditionalServiceGLSConsigneeColumn2 are the table columns denoting the
	// primary key for the carrier_additional_service_gls_consignee relation (M2M).
	CarrierAdditionalServiceGLSConsigneePrimaryKey = []string{"carrier_additional_service_gls_id", "country_id"}
	// CarrierAdditionalServiceGLSConsignorPrimaryKey and CarrierAdditionalServiceGLSConsignorColumn2 are the table columns denoting the
	// primary key for the carrier_additional_service_gls_consignor relation (M2M).
	CarrierAdditionalServiceGLSConsignorPrimaryKey = []string{"carrier_additional_service_gls_id", "country_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// Alpha2Validator is a validator for the "alpha_2" field. It is called by the builders before save.
	Alpha2Validator func(string) error
	// Alpha3Validator is a validator for the "alpha_3" field. It is called by the builders before save.
	Alpha3Validator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Region defines the type for the "region" enum field.
type Region string

// Region values.
const (
	RegionAsia     Region = "Asia"
	RegionEurope   Region = "Europe"
	RegionOceania  Region = "Oceania"
	RegionAmericas Region = "Americas"
	RegionAfrica   Region = "Africa"
)

func (r Region) String() string {
	return string(r)
}

// RegionValidator is a validator for the "region" field enum values. It is called by the builders before save.
func RegionValidator(r Region) error {
	switch r {
	case RegionAsia, RegionEurope, RegionOceania, RegionAmericas, RegionAfrica:
		return nil
	default:
		return fmt.Errorf("country: invalid enum value for region field: %q", r)
	}
}

// OrderOption defines the ordering options for the Country queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByAlpha2 orders the results by the alpha_2 field.
func ByAlpha2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlpha2, opts...).ToFunc()
}

// ByAlpha3 orders the results by the alpha_3 field.
func ByAlpha3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlpha3, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByDeliveryRuleCount orders the results by delivery_rule count.
func ByDeliveryRuleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryRuleStep(), opts...)
	}
}

// ByDeliveryRule orders the results by delivery_rule terms.
func ByDeliveryRule(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryRuleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAddressCount orders the results by address count.
func ByAddressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddressStep(), opts...)
	}
}

// ByAddress orders the results by address terms.
func ByAddress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAddressGlobalCount orders the results by address_global count.
func ByAddressGlobalCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddressGlobalStep(), opts...)
	}
}

// ByAddressGlobal orders the results by address_global terms.
func ByAddressGlobal(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressGlobalStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarrierAdditionalServicePostNordConsigneeCount orders the results by carrier_additional_service_post_nord_consignee count.
func ByCarrierAdditionalServicePostNordConsigneeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierAdditionalServicePostNordConsigneeStep(), opts...)
	}
}

// ByCarrierAdditionalServicePostNordConsignee orders the results by carrier_additional_service_post_nord_consignee terms.
func ByCarrierAdditionalServicePostNordConsignee(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierAdditionalServicePostNordConsigneeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarrierAdditionalServicePostNordConsignorCount orders the results by carrier_additional_service_post_nord_consignor count.
func ByCarrierAdditionalServicePostNordConsignorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierAdditionalServicePostNordConsignorStep(), opts...)
	}
}

// ByCarrierAdditionalServicePostNordConsignor orders the results by carrier_additional_service_post_nord_consignor terms.
func ByCarrierAdditionalServicePostNordConsignor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierAdditionalServicePostNordConsignorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarrierAdditionalServiceGLSConsigneeCount orders the results by carrier_additional_service_gls_consignee count.
func ByCarrierAdditionalServiceGLSConsigneeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierAdditionalServiceGLSConsigneeStep(), opts...)
	}
}

// ByCarrierAdditionalServiceGLSConsignee orders the results by carrier_additional_service_gls_consignee terms.
func ByCarrierAdditionalServiceGLSConsignee(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierAdditionalServiceGLSConsigneeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarrierAdditionalServiceGLSConsignorCount orders the results by carrier_additional_service_gls_consignor count.
func ByCarrierAdditionalServiceGLSConsignorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierAdditionalServiceGLSConsignorStep(), opts...)
	}
}

// ByCarrierAdditionalServiceGLSConsignor orders the results by carrier_additional_service_gls_consignor terms.
func ByCarrierAdditionalServiceGLSConsignor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierAdditionalServiceGLSConsignorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCountryHarmonizedCodeCount orders the results by country_harmonized_code count.
func ByCountryHarmonizedCodeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCountryHarmonizedCodeStep(), opts...)
	}
}

// ByCountryHarmonizedCode orders the results by country_harmonized_code terms.
func ByCountryHarmonizedCode(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryHarmonizedCodeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInventoryItemCount orders the results by inventory_item count.
func ByInventoryItemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInventoryItemStep(), opts...)
	}
}

// ByInventoryItem orders the results by inventory_item terms.
func ByInventoryItem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryItemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeliveryRuleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryRuleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DeliveryRuleTable, DeliveryRulePrimaryKey...),
	)
}
func newAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AddressTable, AddressColumn),
	)
}
func newAddressGlobalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressGlobalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AddressGlobalTable, AddressGlobalColumn),
	)
}
func newCarrierAdditionalServicePostNordConsigneeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierAdditionalServicePostNordConsigneeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CarrierAdditionalServicePostNordConsigneeTable, CarrierAdditionalServicePostNordConsigneePrimaryKey...),
	)
}
func newCarrierAdditionalServicePostNordConsignorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierAdditionalServicePostNordConsignorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CarrierAdditionalServicePostNordConsignorTable, CarrierAdditionalServicePostNordConsignorPrimaryKey...),
	)
}
func newCarrierAdditionalServiceGLSConsigneeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierAdditionalServiceGLSConsigneeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CarrierAdditionalServiceGLSConsigneeTable, CarrierAdditionalServiceGLSConsigneePrimaryKey...),
	)
}
func newCarrierAdditionalServiceGLSConsignorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierAdditionalServiceGLSConsignorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CarrierAdditionalServiceGLSConsignorTable, CarrierAdditionalServiceGLSConsignorPrimaryKey...),
	)
}
func newCountryHarmonizedCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryHarmonizedCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CountryHarmonizedCodeTable, CountryHarmonizedCodeColumn),
	)
}
func newInventoryItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, InventoryItemTable, InventoryItemColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Region) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Region) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Region(str)
	if err := RegionValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Region", str)
	}
	return nil
}
