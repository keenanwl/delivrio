// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectionBrandUpdate is the builder for updating ConnectionBrand entities.
type ConnectionBrandUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionBrandMutation
}

// Where appends a list predicates to the ConnectionBrandUpdate builder.
func (cbu *ConnectionBrandUpdate) Where(ps ...predicate.ConnectionBrand) *ConnectionBrandUpdate {
	cbu.mutation.Where(ps...)
	return cbu
}

// SetLabel sets the "label" field.
func (cbu *ConnectionBrandUpdate) SetLabel(s string) *ConnectionBrandUpdate {
	cbu.mutation.SetLabel(s)
	return cbu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cbu *ConnectionBrandUpdate) SetNillableLabel(s *string) *ConnectionBrandUpdate {
	if s != nil {
		cbu.SetLabel(*s)
	}
	return cbu
}

// SetInternalID sets the "internal_id" field.
func (cbu *ConnectionBrandUpdate) SetInternalID(ci connectionbrand.InternalID) *ConnectionBrandUpdate {
	cbu.mutation.SetInternalID(ci)
	return cbu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (cbu *ConnectionBrandUpdate) SetNillableInternalID(ci *connectionbrand.InternalID) *ConnectionBrandUpdate {
	if ci != nil {
		cbu.SetInternalID(*ci)
	}
	return cbu
}

// SetLogoURL sets the "logo_url" field.
func (cbu *ConnectionBrandUpdate) SetLogoURL(s string) *ConnectionBrandUpdate {
	cbu.mutation.SetLogoURL(s)
	return cbu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (cbu *ConnectionBrandUpdate) SetNillableLogoURL(s *string) *ConnectionBrandUpdate {
	if s != nil {
		cbu.SetLogoURL(*s)
	}
	return cbu
}

// ClearLogoURL clears the value of the "logo_url" field.
func (cbu *ConnectionBrandUpdate) ClearLogoURL() *ConnectionBrandUpdate {
	cbu.mutation.ClearLogoURL()
	return cbu
}

// AddConnectionIDs adds the "connection" edge to the Connection entity by IDs.
func (cbu *ConnectionBrandUpdate) AddConnectionIDs(ids ...pulid.ID) *ConnectionBrandUpdate {
	cbu.mutation.AddConnectionIDs(ids...)
	return cbu
}

// AddConnection adds the "connection" edges to the Connection entity.
func (cbu *ConnectionBrandUpdate) AddConnection(c ...*Connection) *ConnectionBrandUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbu.AddConnectionIDs(ids...)
}

// Mutation returns the ConnectionBrandMutation object of the builder.
func (cbu *ConnectionBrandUpdate) Mutation() *ConnectionBrandMutation {
	return cbu.mutation
}

// ClearConnection clears all "connection" edges to the Connection entity.
func (cbu *ConnectionBrandUpdate) ClearConnection() *ConnectionBrandUpdate {
	cbu.mutation.ClearConnection()
	return cbu
}

// RemoveConnectionIDs removes the "connection" edge to Connection entities by IDs.
func (cbu *ConnectionBrandUpdate) RemoveConnectionIDs(ids ...pulid.ID) *ConnectionBrandUpdate {
	cbu.mutation.RemoveConnectionIDs(ids...)
	return cbu
}

// RemoveConnection removes "connection" edges to Connection entities.
func (cbu *ConnectionBrandUpdate) RemoveConnection(c ...*Connection) *ConnectionBrandUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbu.RemoveConnectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cbu *ConnectionBrandUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cbu.sqlSave, cbu.mutation, cbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbu *ConnectionBrandUpdate) SaveX(ctx context.Context) int {
	affected, err := cbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cbu *ConnectionBrandUpdate) Exec(ctx context.Context) error {
	_, err := cbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbu *ConnectionBrandUpdate) ExecX(ctx context.Context) {
	if err := cbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbu *ConnectionBrandUpdate) check() error {
	if v, ok := cbu.mutation.InternalID(); ok {
		if err := connectionbrand.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "ConnectionBrand.internal_id": %w`, err)}
		}
	}
	return nil
}

func (cbu *ConnectionBrandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionbrand.Table, connectionbrand.Columns, sqlgraph.NewFieldSpec(connectionbrand.FieldID, field.TypeString))
	if ps := cbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbu.mutation.Label(); ok {
		_spec.SetField(connectionbrand.FieldLabel, field.TypeString, value)
	}
	if value, ok := cbu.mutation.InternalID(); ok {
		_spec.SetField(connectionbrand.FieldInternalID, field.TypeEnum, value)
	}
	if value, ok := cbu.mutation.LogoURL(); ok {
		_spec.SetField(connectionbrand.FieldLogoURL, field.TypeString, value)
	}
	if cbu.mutation.LogoURLCleared() {
		_spec.ClearField(connectionbrand.FieldLogoURL, field.TypeString)
	}
	if cbu.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connectionbrand.ConnectionTable,
			Columns: []string{connectionbrand.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.RemovedConnectionIDs(); len(nodes) > 0 && !cbu.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connectionbrand.ConnectionTable,
			Columns: []string{connectionbrand.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connectionbrand.ConnectionTable,
			Columns: []string{connectionbrand.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionbrand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cbu.mutation.done = true
	return n, nil
}

// ConnectionBrandUpdateOne is the builder for updating a single ConnectionBrand entity.
type ConnectionBrandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionBrandMutation
}

// SetLabel sets the "label" field.
func (cbuo *ConnectionBrandUpdateOne) SetLabel(s string) *ConnectionBrandUpdateOne {
	cbuo.mutation.SetLabel(s)
	return cbuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cbuo *ConnectionBrandUpdateOne) SetNillableLabel(s *string) *ConnectionBrandUpdateOne {
	if s != nil {
		cbuo.SetLabel(*s)
	}
	return cbuo
}

// SetInternalID sets the "internal_id" field.
func (cbuo *ConnectionBrandUpdateOne) SetInternalID(ci connectionbrand.InternalID) *ConnectionBrandUpdateOne {
	cbuo.mutation.SetInternalID(ci)
	return cbuo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (cbuo *ConnectionBrandUpdateOne) SetNillableInternalID(ci *connectionbrand.InternalID) *ConnectionBrandUpdateOne {
	if ci != nil {
		cbuo.SetInternalID(*ci)
	}
	return cbuo
}

// SetLogoURL sets the "logo_url" field.
func (cbuo *ConnectionBrandUpdateOne) SetLogoURL(s string) *ConnectionBrandUpdateOne {
	cbuo.mutation.SetLogoURL(s)
	return cbuo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (cbuo *ConnectionBrandUpdateOne) SetNillableLogoURL(s *string) *ConnectionBrandUpdateOne {
	if s != nil {
		cbuo.SetLogoURL(*s)
	}
	return cbuo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (cbuo *ConnectionBrandUpdateOne) ClearLogoURL() *ConnectionBrandUpdateOne {
	cbuo.mutation.ClearLogoURL()
	return cbuo
}

// AddConnectionIDs adds the "connection" edge to the Connection entity by IDs.
func (cbuo *ConnectionBrandUpdateOne) AddConnectionIDs(ids ...pulid.ID) *ConnectionBrandUpdateOne {
	cbuo.mutation.AddConnectionIDs(ids...)
	return cbuo
}

// AddConnection adds the "connection" edges to the Connection entity.
func (cbuo *ConnectionBrandUpdateOne) AddConnection(c ...*Connection) *ConnectionBrandUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbuo.AddConnectionIDs(ids...)
}

// Mutation returns the ConnectionBrandMutation object of the builder.
func (cbuo *ConnectionBrandUpdateOne) Mutation() *ConnectionBrandMutation {
	return cbuo.mutation
}

// ClearConnection clears all "connection" edges to the Connection entity.
func (cbuo *ConnectionBrandUpdateOne) ClearConnection() *ConnectionBrandUpdateOne {
	cbuo.mutation.ClearConnection()
	return cbuo
}

// RemoveConnectionIDs removes the "connection" edge to Connection entities by IDs.
func (cbuo *ConnectionBrandUpdateOne) RemoveConnectionIDs(ids ...pulid.ID) *ConnectionBrandUpdateOne {
	cbuo.mutation.RemoveConnectionIDs(ids...)
	return cbuo
}

// RemoveConnection removes "connection" edges to Connection entities.
func (cbuo *ConnectionBrandUpdateOne) RemoveConnection(c ...*Connection) *ConnectionBrandUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbuo.RemoveConnectionIDs(ids...)
}

// Where appends a list predicates to the ConnectionBrandUpdate builder.
func (cbuo *ConnectionBrandUpdateOne) Where(ps ...predicate.ConnectionBrand) *ConnectionBrandUpdateOne {
	cbuo.mutation.Where(ps...)
	return cbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cbuo *ConnectionBrandUpdateOne) Select(field string, fields ...string) *ConnectionBrandUpdateOne {
	cbuo.fields = append([]string{field}, fields...)
	return cbuo
}

// Save executes the query and returns the updated ConnectionBrand entity.
func (cbuo *ConnectionBrandUpdateOne) Save(ctx context.Context) (*ConnectionBrand, error) {
	return withHooks(ctx, cbuo.sqlSave, cbuo.mutation, cbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbuo *ConnectionBrandUpdateOne) SaveX(ctx context.Context) *ConnectionBrand {
	node, err := cbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cbuo *ConnectionBrandUpdateOne) Exec(ctx context.Context) error {
	_, err := cbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbuo *ConnectionBrandUpdateOne) ExecX(ctx context.Context) {
	if err := cbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbuo *ConnectionBrandUpdateOne) check() error {
	if v, ok := cbuo.mutation.InternalID(); ok {
		if err := connectionbrand.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "ConnectionBrand.internal_id": %w`, err)}
		}
	}
	return nil
}

func (cbuo *ConnectionBrandUpdateOne) sqlSave(ctx context.Context) (_node *ConnectionBrand, err error) {
	if err := cbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionbrand.Table, connectionbrand.Columns, sqlgraph.NewFieldSpec(connectionbrand.FieldID, field.TypeString))
	id, ok := cbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectionBrand.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectionbrand.FieldID)
		for _, f := range fields {
			if !connectionbrand.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectionbrand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbuo.mutation.Label(); ok {
		_spec.SetField(connectionbrand.FieldLabel, field.TypeString, value)
	}
	if value, ok := cbuo.mutation.InternalID(); ok {
		_spec.SetField(connectionbrand.FieldInternalID, field.TypeEnum, value)
	}
	if value, ok := cbuo.mutation.LogoURL(); ok {
		_spec.SetField(connectionbrand.FieldLogoURL, field.TypeString, value)
	}
	if cbuo.mutation.LogoURLCleared() {
		_spec.ClearField(connectionbrand.FieldLogoURL, field.TypeString)
	}
	if cbuo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connectionbrand.ConnectionTable,
			Columns: []string{connectionbrand.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.RemovedConnectionIDs(); len(nodes) > 0 && !cbuo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connectionbrand.ConnectionTable,
			Columns: []string{connectionbrand.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connectionbrand.ConnectionTable,
			Columns: []string{connectionbrand.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConnectionBrand{config: cbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionbrand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cbuo.mutation.done = true
	return _node, nil
}
