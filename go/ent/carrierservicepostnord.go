// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierServicePostNord is the model entity for the CarrierServicePostNord schema.
type CarrierServicePostNord struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID string `json:"internal_id,omitempty"`
	// APICode holds the value of the "api_code" field.
	APICode string `json:"api_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierServicePostNordQuery when eager-loading is set.
	Edges                                     CarrierServicePostNordEdges `json:"edges"`
	carrier_service_carrier_service_post_nord *pulid.ID
	selectValues                              sql.SelectValues
}

// CarrierServicePostNordEdges holds the relations/edges for other nodes in the graph.
type CarrierServicePostNordEdges struct {
	// CarrierService holds the value of the carrier_service edge.
	CarrierService *CarrierService `json:"carrier_service,omitempty"`
	// CarrierAddServPostNord holds the value of the carrier_add_serv_post_nord edge.
	CarrierAddServPostNord []*CarrierAdditionalServicePostNord `json:"carrier_add_serv_post_nord,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCarrierAddServPostNord map[string][]*CarrierAdditionalServicePostNord
}

// CarrierServiceOrErr returns the CarrierService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServicePostNordEdges) CarrierServiceOrErr() (*CarrierService, error) {
	if e.CarrierService != nil {
		return e.CarrierService, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierservice.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service"}
}

// CarrierAddServPostNordOrErr returns the CarrierAddServPostNord value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierServicePostNordEdges) CarrierAddServPostNordOrErr() ([]*CarrierAdditionalServicePostNord, error) {
	if e.loadedTypes[1] {
		return e.CarrierAddServPostNord, nil
	}
	return nil, &NotLoadedError{edge: "carrier_add_serv_post_nord"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierServicePostNord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierservicepostnord.FieldID:
			values[i] = new(pulid.ID)
		case carrierservicepostnord.FieldLabel, carrierservicepostnord.FieldInternalID, carrierservicepostnord.FieldAPICode:
			values[i] = new(sql.NullString)
		case carrierservicepostnord.ForeignKeys[0]: // carrier_service_carrier_service_post_nord
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierServicePostNord fields.
func (cspn *CarrierServicePostNord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierservicepostnord.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cspn.ID = *value
			}
		case carrierservicepostnord.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				cspn.Label = value.String
			}
		case carrierservicepostnord.FieldInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				cspn.InternalID = value.String
			}
		case carrierservicepostnord.FieldAPICode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_code", values[i])
			} else if value.Valid {
				cspn.APICode = value.String
			}
		case carrierservicepostnord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_service_carrier_service_post_nord", values[i])
			} else if value.Valid {
				cspn.carrier_service_carrier_service_post_nord = new(pulid.ID)
				*cspn.carrier_service_carrier_service_post_nord = *value.S.(*pulid.ID)
			}
		default:
			cspn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierServicePostNord.
// This includes values selected through modifiers, order, etc.
func (cspn *CarrierServicePostNord) Value(name string) (ent.Value, error) {
	return cspn.selectValues.Get(name)
}

// QueryCarrierService queries the "carrier_service" edge of the CarrierServicePostNord entity.
func (cspn *CarrierServicePostNord) QueryCarrierService() *CarrierServiceQuery {
	return NewCarrierServicePostNordClient(cspn.config).QueryCarrierService(cspn)
}

// QueryCarrierAddServPostNord queries the "carrier_add_serv_post_nord" edge of the CarrierServicePostNord entity.
func (cspn *CarrierServicePostNord) QueryCarrierAddServPostNord() *CarrierAdditionalServicePostNordQuery {
	return NewCarrierServicePostNordClient(cspn.config).QueryCarrierAddServPostNord(cspn)
}

// Update returns a builder for updating this CarrierServicePostNord.
// Note that you need to call CarrierServicePostNord.Unwrap() before calling this method if this CarrierServicePostNord
// was returned from a transaction, and the transaction was committed or rolled back.
func (cspn *CarrierServicePostNord) Update() *CarrierServicePostNordUpdateOne {
	return NewCarrierServicePostNordClient(cspn.config).UpdateOne(cspn)
}

// Unwrap unwraps the CarrierServicePostNord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cspn *CarrierServicePostNord) Unwrap() *CarrierServicePostNord {
	_tx, ok := cspn.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierServicePostNord is not a transactional entity")
	}
	cspn.config.driver = _tx.drv
	return cspn
}

// String implements the fmt.Stringer.
func (cspn *CarrierServicePostNord) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierServicePostNord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cspn.ID))
	builder.WriteString("label=")
	builder.WriteString(cspn.Label)
	builder.WriteString(", ")
	builder.WriteString("internal_id=")
	builder.WriteString(cspn.InternalID)
	builder.WriteString(", ")
	builder.WriteString("api_code=")
	builder.WriteString(cspn.APICode)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierAddServPostNord returns the CarrierAddServPostNord named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cspn *CarrierServicePostNord) NamedCarrierAddServPostNord(name string) ([]*CarrierAdditionalServicePostNord, error) {
	if cspn.Edges.namedCarrierAddServPostNord == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cspn.Edges.namedCarrierAddServPostNord[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cspn *CarrierServicePostNord) appendNamedCarrierAddServPostNord(name string, edges ...*CarrierAdditionalServicePostNord) {
	if cspn.Edges.namedCarrierAddServPostNord == nil {
		cspn.Edges.namedCarrierAddServPostNord = make(map[string][]*CarrierAdditionalServicePostNord)
	}
	if len(edges) == 0 {
		cspn.Edges.namedCarrierAddServPostNord[name] = []*CarrierAdditionalServicePostNord{}
	} else {
		cspn.Edges.namedCarrierAddServPostNord[name] = append(cspn.Edges.namedCarrierAddServPostNord[name], edges...)
	}
}

// CarrierServicePostNords is a parsable slice of CarrierServicePostNord.
type CarrierServicePostNords []*CarrierServicePostNord
