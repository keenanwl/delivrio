// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/systemevents"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemEventsCreate is the builder for creating a SystemEvents entity.
type SystemEventsCreate struct {
	config
	mutation *SystemEventsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (sec *SystemEventsCreate) SetTenantID(pu pulid.ID) *SystemEventsCreate {
	sec.mutation.SetTenantID(pu)
	return sec
}

// SetEventType sets the "event_type" field.
func (sec *SystemEventsCreate) SetEventType(st systemevents.EventType) *SystemEventsCreate {
	sec.mutation.SetEventType(st)
	return sec
}

// SetEventTypeID sets the "event_type_id" field.
func (sec *SystemEventsCreate) SetEventTypeID(s string) *SystemEventsCreate {
	sec.mutation.SetEventTypeID(s)
	return sec
}

// SetNillableEventTypeID sets the "event_type_id" field if the given value is not nil.
func (sec *SystemEventsCreate) SetNillableEventTypeID(s *string) *SystemEventsCreate {
	if s != nil {
		sec.SetEventTypeID(*s)
	}
	return sec
}

// SetStatus sets the "status" field.
func (sec *SystemEventsCreate) SetStatus(s systemevents.Status) *SystemEventsCreate {
	sec.mutation.SetStatus(s)
	return sec
}

// SetDescription sets the "description" field.
func (sec *SystemEventsCreate) SetDescription(s string) *SystemEventsCreate {
	sec.mutation.SetDescription(s)
	return sec
}

// SetData sets the "data" field.
func (sec *SystemEventsCreate) SetData(s string) *SystemEventsCreate {
	sec.mutation.SetData(s)
	return sec
}

// SetNillableData sets the "data" field if the given value is not nil.
func (sec *SystemEventsCreate) SetNillableData(s *string) *SystemEventsCreate {
	if s != nil {
		sec.SetData(*s)
	}
	return sec
}

// SetUpdatedAt sets the "updated_at" field.
func (sec *SystemEventsCreate) SetUpdatedAt(t time.Time) *SystemEventsCreate {
	sec.mutation.SetUpdatedAt(t)
	return sec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sec *SystemEventsCreate) SetNillableUpdatedAt(t *time.Time) *SystemEventsCreate {
	if t != nil {
		sec.SetUpdatedAt(*t)
	}
	return sec
}

// SetCreatedAt sets the "created_at" field.
func (sec *SystemEventsCreate) SetCreatedAt(t time.Time) *SystemEventsCreate {
	sec.mutation.SetCreatedAt(t)
	return sec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sec *SystemEventsCreate) SetNillableCreatedAt(t *time.Time) *SystemEventsCreate {
	if t != nil {
		sec.SetCreatedAt(*t)
	}
	return sec
}

// SetID sets the "id" field.
func (sec *SystemEventsCreate) SetID(pu pulid.ID) *SystemEventsCreate {
	sec.mutation.SetID(pu)
	return sec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sec *SystemEventsCreate) SetNillableID(pu *pulid.ID) *SystemEventsCreate {
	if pu != nil {
		sec.SetID(*pu)
	}
	return sec
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sec *SystemEventsCreate) SetTenant(t *Tenant) *SystemEventsCreate {
	return sec.SetTenantID(t.ID)
}

// Mutation returns the SystemEventsMutation object of the builder.
func (sec *SystemEventsCreate) Mutation() *SystemEventsMutation {
	return sec.mutation
}

// Save creates the SystemEvents in the database.
func (sec *SystemEventsCreate) Save(ctx context.Context) (*SystemEvents, error) {
	if err := sec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SystemEventsCreate) SaveX(ctx context.Context) *SystemEvents {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SystemEventsCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SystemEventsCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sec *SystemEventsCreate) defaults() error {
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		if systemevents.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemevents.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := systemevents.DefaultUpdatedAt()
		sec.mutation.SetUpdatedAt(v)
	}
	if _, ok := sec.mutation.CreatedAt(); !ok {
		if systemevents.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized systemevents.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := systemevents.DefaultCreatedAt()
		sec.mutation.SetCreatedAt(v)
	}
	if _, ok := sec.mutation.ID(); !ok {
		if systemevents.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized systemevents.DefaultID (forgotten import ent/runtime?)")
		}
		v := systemevents.DefaultID()
		sec.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sec *SystemEventsCreate) check() error {
	if _, ok := sec.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SystemEvents.tenant_id"`)}
	}
	if _, ok := sec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "SystemEvents.event_type"`)}
	}
	if v, ok := sec.mutation.EventType(); ok {
		if err := systemevents.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "SystemEvents.event_type": %w`, err)}
		}
	}
	if _, ok := sec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SystemEvents.status"`)}
	}
	if v, ok := sec.mutation.Status(); ok {
		if err := systemevents.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemEvents.status": %w`, err)}
		}
	}
	if _, ok := sec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "SystemEvents.description"`)}
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SystemEvents.updated_at"`)}
	}
	if len(sec.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "SystemEvents.tenant"`)}
	}
	return nil
}

func (sec *SystemEventsCreate) sqlSave(ctx context.Context) (*SystemEvents, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SystemEventsCreate) createSpec() (*SystemEvents, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemEvents{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(systemevents.Table, sqlgraph.NewFieldSpec(systemevents.FieldID, field.TypeString))
	)
	_spec.OnConflict = sec.conflict
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sec.mutation.EventType(); ok {
		_spec.SetField(systemevents.FieldEventType, field.TypeEnum, value)
		_node.EventType = value
	}
	if value, ok := sec.mutation.EventTypeID(); ok {
		_spec.SetField(systemevents.FieldEventTypeID, field.TypeString, value)
		_node.EventTypeID = value
	}
	if value, ok := sec.mutation.Status(); ok {
		_spec.SetField(systemevents.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sec.mutation.Description(); ok {
		_spec.SetField(systemevents.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sec.mutation.Data(); ok {
		_spec.SetField(systemevents.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := sec.mutation.UpdatedAt(); ok {
		_spec.SetField(systemevents.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sec.mutation.CreatedAt(); ok {
		_spec.SetField(systemevents.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sec.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemevents.TenantTable,
			Columns: []string{systemevents.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemEvents.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemEventsUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sec *SystemEventsCreate) OnConflict(opts ...sql.ConflictOption) *SystemEventsUpsertOne {
	sec.conflict = opts
	return &SystemEventsUpsertOne{
		create: sec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemEvents.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sec *SystemEventsCreate) OnConflictColumns(columns ...string) *SystemEventsUpsertOne {
	sec.conflict = append(sec.conflict, sql.ConflictColumns(columns...))
	return &SystemEventsUpsertOne{
		create: sec,
	}
}

type (
	// SystemEventsUpsertOne is the builder for "upsert"-ing
	//  one SystemEvents node.
	SystemEventsUpsertOne struct {
		create *SystemEventsCreate
	}

	// SystemEventsUpsert is the "OnConflict" setter.
	SystemEventsUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *SystemEventsUpsert) SetTenantID(v pulid.ID) *SystemEventsUpsert {
	u.Set(systemevents.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SystemEventsUpsert) UpdateTenantID() *SystemEventsUpsert {
	u.SetExcluded(systemevents.FieldTenantID)
	return u
}

// SetEventType sets the "event_type" field.
func (u *SystemEventsUpsert) SetEventType(v systemevents.EventType) *SystemEventsUpsert {
	u.Set(systemevents.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *SystemEventsUpsert) UpdateEventType() *SystemEventsUpsert {
	u.SetExcluded(systemevents.FieldEventType)
	return u
}

// SetEventTypeID sets the "event_type_id" field.
func (u *SystemEventsUpsert) SetEventTypeID(v string) *SystemEventsUpsert {
	u.Set(systemevents.FieldEventTypeID, v)
	return u
}

// UpdateEventTypeID sets the "event_type_id" field to the value that was provided on create.
func (u *SystemEventsUpsert) UpdateEventTypeID() *SystemEventsUpsert {
	u.SetExcluded(systemevents.FieldEventTypeID)
	return u
}

// ClearEventTypeID clears the value of the "event_type_id" field.
func (u *SystemEventsUpsert) ClearEventTypeID() *SystemEventsUpsert {
	u.SetNull(systemevents.FieldEventTypeID)
	return u
}

// SetStatus sets the "status" field.
func (u *SystemEventsUpsert) SetStatus(v systemevents.Status) *SystemEventsUpsert {
	u.Set(systemevents.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemEventsUpsert) UpdateStatus() *SystemEventsUpsert {
	u.SetExcluded(systemevents.FieldStatus)
	return u
}

// SetDescription sets the "description" field.
func (u *SystemEventsUpsert) SetDescription(v string) *SystemEventsUpsert {
	u.Set(systemevents.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemEventsUpsert) UpdateDescription() *SystemEventsUpsert {
	u.SetExcluded(systemevents.FieldDescription)
	return u
}

// SetData sets the "data" field.
func (u *SystemEventsUpsert) SetData(v string) *SystemEventsUpsert {
	u.Set(systemevents.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *SystemEventsUpsert) UpdateData() *SystemEventsUpsert {
	u.SetExcluded(systemevents.FieldData)
	return u
}

// ClearData clears the value of the "data" field.
func (u *SystemEventsUpsert) ClearData() *SystemEventsUpsert {
	u.SetNull(systemevents.FieldData)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemEventsUpsert) SetUpdatedAt(v time.Time) *SystemEventsUpsert {
	u.Set(systemevents.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemEventsUpsert) UpdateUpdatedAt() *SystemEventsUpsert {
	u.SetExcluded(systemevents.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemEvents.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemevents.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemEventsUpsertOne) UpdateNewValues() *SystemEventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemevents.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(systemevents.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemEvents.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemEventsUpsertOne) Ignore() *SystemEventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemEventsUpsertOne) DoNothing() *SystemEventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemEventsCreate.OnConflict
// documentation for more info.
func (u *SystemEventsUpsertOne) Update(set func(*SystemEventsUpsert)) *SystemEventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemEventsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *SystemEventsUpsertOne) SetTenantID(v pulid.ID) *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SystemEventsUpsertOne) UpdateTenantID() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateTenantID()
	})
}

// SetEventType sets the "event_type" field.
func (u *SystemEventsUpsertOne) SetEventType(v systemevents.EventType) *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *SystemEventsUpsertOne) UpdateEventType() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateEventType()
	})
}

// SetEventTypeID sets the "event_type_id" field.
func (u *SystemEventsUpsertOne) SetEventTypeID(v string) *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetEventTypeID(v)
	})
}

// UpdateEventTypeID sets the "event_type_id" field to the value that was provided on create.
func (u *SystemEventsUpsertOne) UpdateEventTypeID() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateEventTypeID()
	})
}

// ClearEventTypeID clears the value of the "event_type_id" field.
func (u *SystemEventsUpsertOne) ClearEventTypeID() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.ClearEventTypeID()
	})
}

// SetStatus sets the "status" field.
func (u *SystemEventsUpsertOne) SetStatus(v systemevents.Status) *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemEventsUpsertOne) UpdateStatus() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateStatus()
	})
}

// SetDescription sets the "description" field.
func (u *SystemEventsUpsertOne) SetDescription(v string) *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemEventsUpsertOne) UpdateDescription() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateDescription()
	})
}

// SetData sets the "data" field.
func (u *SystemEventsUpsertOne) SetData(v string) *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *SystemEventsUpsertOne) UpdateData() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *SystemEventsUpsertOne) ClearData() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.ClearData()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemEventsUpsertOne) SetUpdatedAt(v time.Time) *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemEventsUpsertOne) UpdateUpdatedAt() *SystemEventsUpsertOne {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SystemEventsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemEventsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemEventsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemEventsUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SystemEventsUpsertOne.ID is not supported by MySQL driver. Use SystemEventsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemEventsUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemEventsCreateBulk is the builder for creating many SystemEvents entities in bulk.
type SystemEventsCreateBulk struct {
	config
	err      error
	builders []*SystemEventsCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemEvents entities in the database.
func (secb *SystemEventsCreateBulk) Save(ctx context.Context) ([]*SystemEvents, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SystemEvents, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemEventsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = secb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SystemEventsCreateBulk) SaveX(ctx context.Context) []*SystemEvents {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SystemEventsCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SystemEventsCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemEvents.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemEventsUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (secb *SystemEventsCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemEventsUpsertBulk {
	secb.conflict = opts
	return &SystemEventsUpsertBulk{
		create: secb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemEvents.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (secb *SystemEventsCreateBulk) OnConflictColumns(columns ...string) *SystemEventsUpsertBulk {
	secb.conflict = append(secb.conflict, sql.ConflictColumns(columns...))
	return &SystemEventsUpsertBulk{
		create: secb,
	}
}

// SystemEventsUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemEvents nodes.
type SystemEventsUpsertBulk struct {
	create *SystemEventsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemEvents.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemevents.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SystemEventsUpsertBulk) UpdateNewValues() *SystemEventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemevents.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(systemevents.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemEvents.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemEventsUpsertBulk) Ignore() *SystemEventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemEventsUpsertBulk) DoNothing() *SystemEventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemEventsCreateBulk.OnConflict
// documentation for more info.
func (u *SystemEventsUpsertBulk) Update(set func(*SystemEventsUpsert)) *SystemEventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemEventsUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *SystemEventsUpsertBulk) SetTenantID(v pulid.ID) *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SystemEventsUpsertBulk) UpdateTenantID() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateTenantID()
	})
}

// SetEventType sets the "event_type" field.
func (u *SystemEventsUpsertBulk) SetEventType(v systemevents.EventType) *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *SystemEventsUpsertBulk) UpdateEventType() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateEventType()
	})
}

// SetEventTypeID sets the "event_type_id" field.
func (u *SystemEventsUpsertBulk) SetEventTypeID(v string) *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetEventTypeID(v)
	})
}

// UpdateEventTypeID sets the "event_type_id" field to the value that was provided on create.
func (u *SystemEventsUpsertBulk) UpdateEventTypeID() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateEventTypeID()
	})
}

// ClearEventTypeID clears the value of the "event_type_id" field.
func (u *SystemEventsUpsertBulk) ClearEventTypeID() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.ClearEventTypeID()
	})
}

// SetStatus sets the "status" field.
func (u *SystemEventsUpsertBulk) SetStatus(v systemevents.Status) *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemEventsUpsertBulk) UpdateStatus() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateStatus()
	})
}

// SetDescription sets the "description" field.
func (u *SystemEventsUpsertBulk) SetDescription(v string) *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SystemEventsUpsertBulk) UpdateDescription() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateDescription()
	})
}

// SetData sets the "data" field.
func (u *SystemEventsUpsertBulk) SetData(v string) *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *SystemEventsUpsertBulk) UpdateData() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *SystemEventsUpsertBulk) ClearData() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.ClearData()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemEventsUpsertBulk) SetUpdatedAt(v time.Time) *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemEventsUpsertBulk) UpdateUpdatedAt() *SystemEventsUpsertBulk {
	return u.Update(func(s *SystemEventsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SystemEventsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemEventsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemEventsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemEventsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
