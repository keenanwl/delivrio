// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatGroupAccessRightCreate is the builder for creating a SeatGroupAccessRight entity.
type SeatGroupAccessRightCreate struct {
	config
	mutation *SeatGroupAccessRightMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (sgarc *SeatGroupAccessRightCreate) SetTenantID(pu pulid.ID) *SeatGroupAccessRightCreate {
	sgarc.mutation.SetTenantID(pu)
	return sgarc
}

// SetLevel sets the "level" field.
func (sgarc *SeatGroupAccessRightCreate) SetLevel(s seatgroupaccessright.Level) *SeatGroupAccessRightCreate {
	sgarc.mutation.SetLevel(s)
	return sgarc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (sgarc *SeatGroupAccessRightCreate) SetNillableLevel(s *seatgroupaccessright.Level) *SeatGroupAccessRightCreate {
	if s != nil {
		sgarc.SetLevel(*s)
	}
	return sgarc
}

// SetAccessRightID sets the "access_right_id" field.
func (sgarc *SeatGroupAccessRightCreate) SetAccessRightID(pu pulid.ID) *SeatGroupAccessRightCreate {
	sgarc.mutation.SetAccessRightID(pu)
	return sgarc
}

// SetSeatGroupID sets the "seat_group_id" field.
func (sgarc *SeatGroupAccessRightCreate) SetSeatGroupID(pu pulid.ID) *SeatGroupAccessRightCreate {
	sgarc.mutation.SetSeatGroupID(pu)
	return sgarc
}

// SetID sets the "id" field.
func (sgarc *SeatGroupAccessRightCreate) SetID(pu pulid.ID) *SeatGroupAccessRightCreate {
	sgarc.mutation.SetID(pu)
	return sgarc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sgarc *SeatGroupAccessRightCreate) SetNillableID(pu *pulid.ID) *SeatGroupAccessRightCreate {
	if pu != nil {
		sgarc.SetID(*pu)
	}
	return sgarc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sgarc *SeatGroupAccessRightCreate) SetTenant(t *Tenant) *SeatGroupAccessRightCreate {
	return sgarc.SetTenantID(t.ID)
}

// SetAccessRight sets the "access_right" edge to the AccessRight entity.
func (sgarc *SeatGroupAccessRightCreate) SetAccessRight(a *AccessRight) *SeatGroupAccessRightCreate {
	return sgarc.SetAccessRightID(a.ID)
}

// SetSeatGroup sets the "seat_group" edge to the SeatGroup entity.
func (sgarc *SeatGroupAccessRightCreate) SetSeatGroup(s *SeatGroup) *SeatGroupAccessRightCreate {
	return sgarc.SetSeatGroupID(s.ID)
}

// Mutation returns the SeatGroupAccessRightMutation object of the builder.
func (sgarc *SeatGroupAccessRightCreate) Mutation() *SeatGroupAccessRightMutation {
	return sgarc.mutation
}

// Save creates the SeatGroupAccessRight in the database.
func (sgarc *SeatGroupAccessRightCreate) Save(ctx context.Context) (*SeatGroupAccessRight, error) {
	if err := sgarc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sgarc.sqlSave, sgarc.mutation, sgarc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sgarc *SeatGroupAccessRightCreate) SaveX(ctx context.Context) *SeatGroupAccessRight {
	v, err := sgarc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgarc *SeatGroupAccessRightCreate) Exec(ctx context.Context) error {
	_, err := sgarc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgarc *SeatGroupAccessRightCreate) ExecX(ctx context.Context) {
	if err := sgarc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgarc *SeatGroupAccessRightCreate) defaults() error {
	if _, ok := sgarc.mutation.Level(); !ok {
		v := seatgroupaccessright.DefaultLevel
		sgarc.mutation.SetLevel(v)
	}
	if _, ok := sgarc.mutation.ID(); !ok {
		if seatgroupaccessright.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized seatgroupaccessright.DefaultID (forgotten import ent/runtime?)")
		}
		v := seatgroupaccessright.DefaultID()
		sgarc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sgarc *SeatGroupAccessRightCreate) check() error {
	if _, ok := sgarc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SeatGroupAccessRight.tenant_id"`)}
	}
	if _, ok := sgarc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "SeatGroupAccessRight.level"`)}
	}
	if v, ok := sgarc.mutation.Level(); ok {
		if err := seatgroupaccessright.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SeatGroupAccessRight.level": %w`, err)}
		}
	}
	if _, ok := sgarc.mutation.AccessRightID(); !ok {
		return &ValidationError{Name: "access_right_id", err: errors.New(`ent: missing required field "SeatGroupAccessRight.access_right_id"`)}
	}
	if _, ok := sgarc.mutation.SeatGroupID(); !ok {
		return &ValidationError{Name: "seat_group_id", err: errors.New(`ent: missing required field "SeatGroupAccessRight.seat_group_id"`)}
	}
	if len(sgarc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "SeatGroupAccessRight.tenant"`)}
	}
	if len(sgarc.mutation.AccessRightIDs()) == 0 {
		return &ValidationError{Name: "access_right", err: errors.New(`ent: missing required edge "SeatGroupAccessRight.access_right"`)}
	}
	if len(sgarc.mutation.SeatGroupIDs()) == 0 {
		return &ValidationError{Name: "seat_group", err: errors.New(`ent: missing required edge "SeatGroupAccessRight.seat_group"`)}
	}
	return nil
}

func (sgarc *SeatGroupAccessRightCreate) sqlSave(ctx context.Context) (*SeatGroupAccessRight, error) {
	if err := sgarc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sgarc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgarc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sgarc.mutation.id = &_node.ID
	sgarc.mutation.done = true
	return _node, nil
}

func (sgarc *SeatGroupAccessRightCreate) createSpec() (*SeatGroupAccessRight, *sqlgraph.CreateSpec) {
	var (
		_node = &SeatGroupAccessRight{config: sgarc.config}
		_spec = sqlgraph.NewCreateSpec(seatgroupaccessright.Table, sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString))
	)
	_spec.OnConflict = sgarc.conflict
	if id, ok := sgarc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sgarc.mutation.Level(); ok {
		_spec.SetField(seatgroupaccessright.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if nodes := sgarc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.TenantTable,
			Columns: []string{seatgroupaccessright.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgarc.mutation.AccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.AccessRightTable,
			Columns: []string{seatgroupaccessright.AccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccessRightID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgarc.mutation.SeatGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.SeatGroupTable,
			Columns: []string{seatgroupaccessright.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SeatGroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeatGroupAccessRight.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeatGroupAccessRightUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sgarc *SeatGroupAccessRightCreate) OnConflict(opts ...sql.ConflictOption) *SeatGroupAccessRightUpsertOne {
	sgarc.conflict = opts
	return &SeatGroupAccessRightUpsertOne{
		create: sgarc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeatGroupAccessRight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgarc *SeatGroupAccessRightCreate) OnConflictColumns(columns ...string) *SeatGroupAccessRightUpsertOne {
	sgarc.conflict = append(sgarc.conflict, sql.ConflictColumns(columns...))
	return &SeatGroupAccessRightUpsertOne{
		create: sgarc,
	}
}

type (
	// SeatGroupAccessRightUpsertOne is the builder for "upsert"-ing
	//  one SeatGroupAccessRight node.
	SeatGroupAccessRightUpsertOne struct {
		create *SeatGroupAccessRightCreate
	}

	// SeatGroupAccessRightUpsert is the "OnConflict" setter.
	SeatGroupAccessRightUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *SeatGroupAccessRightUpsert) SetTenantID(v pulid.ID) *SeatGroupAccessRightUpsert {
	u.Set(seatgroupaccessright.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsert) UpdateTenantID() *SeatGroupAccessRightUpsert {
	u.SetExcluded(seatgroupaccessright.FieldTenantID)
	return u
}

// SetLevel sets the "level" field.
func (u *SeatGroupAccessRightUpsert) SetLevel(v seatgroupaccessright.Level) *SeatGroupAccessRightUpsert {
	u.Set(seatgroupaccessright.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsert) UpdateLevel() *SeatGroupAccessRightUpsert {
	u.SetExcluded(seatgroupaccessright.FieldLevel)
	return u
}

// SetAccessRightID sets the "access_right_id" field.
func (u *SeatGroupAccessRightUpsert) SetAccessRightID(v pulid.ID) *SeatGroupAccessRightUpsert {
	u.Set(seatgroupaccessright.FieldAccessRightID, v)
	return u
}

// UpdateAccessRightID sets the "access_right_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsert) UpdateAccessRightID() *SeatGroupAccessRightUpsert {
	u.SetExcluded(seatgroupaccessright.FieldAccessRightID)
	return u
}

// SetSeatGroupID sets the "seat_group_id" field.
func (u *SeatGroupAccessRightUpsert) SetSeatGroupID(v pulid.ID) *SeatGroupAccessRightUpsert {
	u.Set(seatgroupaccessright.FieldSeatGroupID, v)
	return u
}

// UpdateSeatGroupID sets the "seat_group_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsert) UpdateSeatGroupID() *SeatGroupAccessRightUpsert {
	u.SetExcluded(seatgroupaccessright.FieldSeatGroupID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SeatGroupAccessRight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(seatgroupaccessright.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SeatGroupAccessRightUpsertOne) UpdateNewValues() *SeatGroupAccessRightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(seatgroupaccessright.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeatGroupAccessRight.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SeatGroupAccessRightUpsertOne) Ignore() *SeatGroupAccessRightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeatGroupAccessRightUpsertOne) DoNothing() *SeatGroupAccessRightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeatGroupAccessRightCreate.OnConflict
// documentation for more info.
func (u *SeatGroupAccessRightUpsertOne) Update(set func(*SeatGroupAccessRightUpsert)) *SeatGroupAccessRightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeatGroupAccessRightUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *SeatGroupAccessRightUpsertOne) SetTenantID(v pulid.ID) *SeatGroupAccessRightUpsertOne {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsertOne) UpdateTenantID() *SeatGroupAccessRightUpsertOne {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.UpdateTenantID()
	})
}

// SetLevel sets the "level" field.
func (u *SeatGroupAccessRightUpsertOne) SetLevel(v seatgroupaccessright.Level) *SeatGroupAccessRightUpsertOne {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsertOne) UpdateLevel() *SeatGroupAccessRightUpsertOne {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.UpdateLevel()
	})
}

// SetAccessRightID sets the "access_right_id" field.
func (u *SeatGroupAccessRightUpsertOne) SetAccessRightID(v pulid.ID) *SeatGroupAccessRightUpsertOne {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.SetAccessRightID(v)
	})
}

// UpdateAccessRightID sets the "access_right_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsertOne) UpdateAccessRightID() *SeatGroupAccessRightUpsertOne {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.UpdateAccessRightID()
	})
}

// SetSeatGroupID sets the "seat_group_id" field.
func (u *SeatGroupAccessRightUpsertOne) SetSeatGroupID(v pulid.ID) *SeatGroupAccessRightUpsertOne {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.SetSeatGroupID(v)
	})
}

// UpdateSeatGroupID sets the "seat_group_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsertOne) UpdateSeatGroupID() *SeatGroupAccessRightUpsertOne {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.UpdateSeatGroupID()
	})
}

// Exec executes the query.
func (u *SeatGroupAccessRightUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeatGroupAccessRightCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeatGroupAccessRightUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SeatGroupAccessRightUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SeatGroupAccessRightUpsertOne.ID is not supported by MySQL driver. Use SeatGroupAccessRightUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SeatGroupAccessRightUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SeatGroupAccessRightCreateBulk is the builder for creating many SeatGroupAccessRight entities in bulk.
type SeatGroupAccessRightCreateBulk struct {
	config
	err      error
	builders []*SeatGroupAccessRightCreate
	conflict []sql.ConflictOption
}

// Save creates the SeatGroupAccessRight entities in the database.
func (sgarcb *SeatGroupAccessRightCreateBulk) Save(ctx context.Context) ([]*SeatGroupAccessRight, error) {
	if sgarcb.err != nil {
		return nil, sgarcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sgarcb.builders))
	nodes := make([]*SeatGroupAccessRight, len(sgarcb.builders))
	mutators := make([]Mutator, len(sgarcb.builders))
	for i := range sgarcb.builders {
		func(i int, root context.Context) {
			builder := sgarcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeatGroupAccessRightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgarcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sgarcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgarcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgarcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgarcb *SeatGroupAccessRightCreateBulk) SaveX(ctx context.Context) []*SeatGroupAccessRight {
	v, err := sgarcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgarcb *SeatGroupAccessRightCreateBulk) Exec(ctx context.Context) error {
	_, err := sgarcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgarcb *SeatGroupAccessRightCreateBulk) ExecX(ctx context.Context) {
	if err := sgarcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeatGroupAccessRight.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeatGroupAccessRightUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sgarcb *SeatGroupAccessRightCreateBulk) OnConflict(opts ...sql.ConflictOption) *SeatGroupAccessRightUpsertBulk {
	sgarcb.conflict = opts
	return &SeatGroupAccessRightUpsertBulk{
		create: sgarcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeatGroupAccessRight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgarcb *SeatGroupAccessRightCreateBulk) OnConflictColumns(columns ...string) *SeatGroupAccessRightUpsertBulk {
	sgarcb.conflict = append(sgarcb.conflict, sql.ConflictColumns(columns...))
	return &SeatGroupAccessRightUpsertBulk{
		create: sgarcb,
	}
}

// SeatGroupAccessRightUpsertBulk is the builder for "upsert"-ing
// a bulk of SeatGroupAccessRight nodes.
type SeatGroupAccessRightUpsertBulk struct {
	create *SeatGroupAccessRightCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SeatGroupAccessRight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(seatgroupaccessright.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SeatGroupAccessRightUpsertBulk) UpdateNewValues() *SeatGroupAccessRightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(seatgroupaccessright.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeatGroupAccessRight.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SeatGroupAccessRightUpsertBulk) Ignore() *SeatGroupAccessRightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeatGroupAccessRightUpsertBulk) DoNothing() *SeatGroupAccessRightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeatGroupAccessRightCreateBulk.OnConflict
// documentation for more info.
func (u *SeatGroupAccessRightUpsertBulk) Update(set func(*SeatGroupAccessRightUpsert)) *SeatGroupAccessRightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeatGroupAccessRightUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *SeatGroupAccessRightUpsertBulk) SetTenantID(v pulid.ID) *SeatGroupAccessRightUpsertBulk {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsertBulk) UpdateTenantID() *SeatGroupAccessRightUpsertBulk {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.UpdateTenantID()
	})
}

// SetLevel sets the "level" field.
func (u *SeatGroupAccessRightUpsertBulk) SetLevel(v seatgroupaccessright.Level) *SeatGroupAccessRightUpsertBulk {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsertBulk) UpdateLevel() *SeatGroupAccessRightUpsertBulk {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.UpdateLevel()
	})
}

// SetAccessRightID sets the "access_right_id" field.
func (u *SeatGroupAccessRightUpsertBulk) SetAccessRightID(v pulid.ID) *SeatGroupAccessRightUpsertBulk {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.SetAccessRightID(v)
	})
}

// UpdateAccessRightID sets the "access_right_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsertBulk) UpdateAccessRightID() *SeatGroupAccessRightUpsertBulk {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.UpdateAccessRightID()
	})
}

// SetSeatGroupID sets the "seat_group_id" field.
func (u *SeatGroupAccessRightUpsertBulk) SetSeatGroupID(v pulid.ID) *SeatGroupAccessRightUpsertBulk {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.SetSeatGroupID(v)
	})
}

// UpdateSeatGroupID sets the "seat_group_id" field to the value that was provided on create.
func (u *SeatGroupAccessRightUpsertBulk) UpdateSeatGroupID() *SeatGroupAccessRightUpsertBulk {
	return u.Update(func(s *SeatGroupAccessRightUpsert) {
		s.UpdateSeatGroupID()
	})
}

// Exec executes the query.
func (u *SeatGroupAccessRightUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SeatGroupAccessRightCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeatGroupAccessRightCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeatGroupAccessRightUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
