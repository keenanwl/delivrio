// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierServiceBring is the model entity for the CarrierServiceBring schema.
type CarrierServiceBring struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// APIServiceCode holds the value of the "api_service_code" field.
	APIServiceCode string `json:"api_service_code,omitempty"`
	// APIRequest holds the value of the "api_request" field.
	APIRequest string `json:"api_request,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierServiceBringQuery when eager-loading is set.
	Edges                                 CarrierServiceBringEdges `json:"edges"`
	carrier_service_carrier_service_bring *pulid.ID
	selectValues                          sql.SelectValues
}

// CarrierServiceBringEdges holds the relations/edges for other nodes in the graph.
type CarrierServiceBringEdges struct {
	// CarrierService holds the value of the carrier_service edge.
	CarrierService *CarrierService `json:"carrier_service,omitempty"`
	// CarrierAdditionalServiceBring holds the value of the carrier_additional_service_bring edge.
	CarrierAdditionalServiceBring []*CarrierAdditionalServiceBring `json:"carrier_additional_service_bring,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCarrierAdditionalServiceBring map[string][]*CarrierAdditionalServiceBring
}

// CarrierServiceOrErr returns the CarrierService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceBringEdges) CarrierServiceOrErr() (*CarrierService, error) {
	if e.CarrierService != nil {
		return e.CarrierService, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierservice.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service"}
}

// CarrierAdditionalServiceBringOrErr returns the CarrierAdditionalServiceBring value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierServiceBringEdges) CarrierAdditionalServiceBringOrErr() ([]*CarrierAdditionalServiceBring, error) {
	if e.loadedTypes[1] {
		return e.CarrierAdditionalServiceBring, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_bring"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierServiceBring) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierservicebring.FieldID:
			values[i] = new(pulid.ID)
		case carrierservicebring.FieldAPIServiceCode, carrierservicebring.FieldAPIRequest:
			values[i] = new(sql.NullString)
		case carrierservicebring.ForeignKeys[0]: // carrier_service_carrier_service_bring
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierServiceBring fields.
func (csb *CarrierServiceBring) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierservicebring.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				csb.ID = *value
			}
		case carrierservicebring.FieldAPIServiceCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_service_code", values[i])
			} else if value.Valid {
				csb.APIServiceCode = value.String
			}
		case carrierservicebring.FieldAPIRequest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_request", values[i])
			} else if value.Valid {
				csb.APIRequest = value.String
			}
		case carrierservicebring.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_service_carrier_service_bring", values[i])
			} else if value.Valid {
				csb.carrier_service_carrier_service_bring = new(pulid.ID)
				*csb.carrier_service_carrier_service_bring = *value.S.(*pulid.ID)
			}
		default:
			csb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierServiceBring.
// This includes values selected through modifiers, order, etc.
func (csb *CarrierServiceBring) Value(name string) (ent.Value, error) {
	return csb.selectValues.Get(name)
}

// QueryCarrierService queries the "carrier_service" edge of the CarrierServiceBring entity.
func (csb *CarrierServiceBring) QueryCarrierService() *CarrierServiceQuery {
	return NewCarrierServiceBringClient(csb.config).QueryCarrierService(csb)
}

// QueryCarrierAdditionalServiceBring queries the "carrier_additional_service_bring" edge of the CarrierServiceBring entity.
func (csb *CarrierServiceBring) QueryCarrierAdditionalServiceBring() *CarrierAdditionalServiceBringQuery {
	return NewCarrierServiceBringClient(csb.config).QueryCarrierAdditionalServiceBring(csb)
}

// Update returns a builder for updating this CarrierServiceBring.
// Note that you need to call CarrierServiceBring.Unwrap() before calling this method if this CarrierServiceBring
// was returned from a transaction, and the transaction was committed or rolled back.
func (csb *CarrierServiceBring) Update() *CarrierServiceBringUpdateOne {
	return NewCarrierServiceBringClient(csb.config).UpdateOne(csb)
}

// Unwrap unwraps the CarrierServiceBring entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csb *CarrierServiceBring) Unwrap() *CarrierServiceBring {
	_tx, ok := csb.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierServiceBring is not a transactional entity")
	}
	csb.config.driver = _tx.drv
	return csb
}

// String implements the fmt.Stringer.
func (csb *CarrierServiceBring) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierServiceBring(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csb.ID))
	builder.WriteString("api_service_code=")
	builder.WriteString(csb.APIServiceCode)
	builder.WriteString(", ")
	builder.WriteString("api_request=")
	builder.WriteString(csb.APIRequest)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierAdditionalServiceBring returns the CarrierAdditionalServiceBring named value or an error if the edge was not
// loaded in eager-loading with this name.
func (csb *CarrierServiceBring) NamedCarrierAdditionalServiceBring(name string) ([]*CarrierAdditionalServiceBring, error) {
	if csb.Edges.namedCarrierAdditionalServiceBring == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := csb.Edges.namedCarrierAdditionalServiceBring[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (csb *CarrierServiceBring) appendNamedCarrierAdditionalServiceBring(name string, edges ...*CarrierAdditionalServiceBring) {
	if csb.Edges.namedCarrierAdditionalServiceBring == nil {
		csb.Edges.namedCarrierAdditionalServiceBring = make(map[string][]*CarrierAdditionalServiceBring)
	}
	if len(edges) == 0 {
		csb.Edges.namedCarrierAdditionalServiceBring[name] = []*CarrierAdditionalServiceBring{}
	} else {
		csb.Edges.namedCarrierAdditionalServiceBring[name] = append(csb.Edges.namedCarrierAdditionalServiceBring[name], edges...)
	}
}

// CarrierServiceBrings is a parsable slice of CarrierServiceBring.
type CarrierServiceBrings []*CarrierServiceBring
