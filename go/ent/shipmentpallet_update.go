// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentPalletUpdate is the builder for updating ShipmentPallet entities.
type ShipmentPalletUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentPalletMutation
}

// Where appends a list predicates to the ShipmentPalletUpdate builder.
func (spu *ShipmentPalletUpdate) Where(ps ...predicate.ShipmentPallet) *ShipmentPalletUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetTenantID sets the "tenant_id" field.
func (spu *ShipmentPalletUpdate) SetTenantID(pu pulid.ID) *ShipmentPalletUpdate {
	spu.mutation.SetTenantID(pu)
	return spu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (spu *ShipmentPalletUpdate) SetNillableTenantID(pu *pulid.ID) *ShipmentPalletUpdate {
	if pu != nil {
		spu.SetTenantID(*pu)
	}
	return spu
}

// SetBarcode sets the "barcode" field.
func (spu *ShipmentPalletUpdate) SetBarcode(s string) *ShipmentPalletUpdate {
	spu.mutation.SetBarcode(s)
	return spu
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (spu *ShipmentPalletUpdate) SetNillableBarcode(s *string) *ShipmentPalletUpdate {
	if s != nil {
		spu.SetBarcode(*s)
	}
	return spu
}

// SetColliNumber sets the "colli_number" field.
func (spu *ShipmentPalletUpdate) SetColliNumber(s string) *ShipmentPalletUpdate {
	spu.mutation.SetColliNumber(s)
	return spu
}

// SetNillableColliNumber sets the "colli_number" field if the given value is not nil.
func (spu *ShipmentPalletUpdate) SetNillableColliNumber(s *string) *ShipmentPalletUpdate {
	if s != nil {
		spu.SetColliNumber(*s)
	}
	return spu
}

// SetCarrierID sets the "carrier_id" field.
func (spu *ShipmentPalletUpdate) SetCarrierID(s string) *ShipmentPalletUpdate {
	spu.mutation.SetCarrierID(s)
	return spu
}

// SetNillableCarrierID sets the "carrier_id" field if the given value is not nil.
func (spu *ShipmentPalletUpdate) SetNillableCarrierID(s *string) *ShipmentPalletUpdate {
	if s != nil {
		spu.SetCarrierID(*s)
	}
	return spu
}

// SetLabelPdf sets the "label_pdf" field.
func (spu *ShipmentPalletUpdate) SetLabelPdf(s string) *ShipmentPalletUpdate {
	spu.mutation.SetLabelPdf(s)
	return spu
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (spu *ShipmentPalletUpdate) SetNillableLabelPdf(s *string) *ShipmentPalletUpdate {
	if s != nil {
		spu.SetLabelPdf(*s)
	}
	return spu
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (spu *ShipmentPalletUpdate) ClearLabelPdf() *ShipmentPalletUpdate {
	spu.mutation.ClearLabelPdf()
	return spu
}

// SetLabelZpl sets the "label_zpl" field.
func (spu *ShipmentPalletUpdate) SetLabelZpl(s string) *ShipmentPalletUpdate {
	spu.mutation.SetLabelZpl(s)
	return spu
}

// SetNillableLabelZpl sets the "label_zpl" field if the given value is not nil.
func (spu *ShipmentPalletUpdate) SetNillableLabelZpl(s *string) *ShipmentPalletUpdate {
	if s != nil {
		spu.SetLabelZpl(*s)
	}
	return spu
}

// ClearLabelZpl clears the value of the "label_zpl" field.
func (spu *ShipmentPalletUpdate) ClearLabelZpl() *ShipmentPalletUpdate {
	spu.mutation.ClearLabelZpl()
	return spu
}

// SetStatus sets the "status" field.
func (spu *ShipmentPalletUpdate) SetStatus(s shipmentpallet.Status) *ShipmentPalletUpdate {
	spu.mutation.SetStatus(s)
	return spu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spu *ShipmentPalletUpdate) SetNillableStatus(s *shipmentpallet.Status) *ShipmentPalletUpdate {
	if s != nil {
		spu.SetStatus(*s)
	}
	return spu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spu *ShipmentPalletUpdate) SetTenant(t *Tenant) *ShipmentPalletUpdate {
	return spu.SetTenantID(t.ID)
}

// SetPalletID sets the "pallet" edge to the Pallet entity by ID.
func (spu *ShipmentPalletUpdate) SetPalletID(id pulid.ID) *ShipmentPalletUpdate {
	spu.mutation.SetPalletID(id)
	return spu
}

// SetNillablePalletID sets the "pallet" edge to the Pallet entity by ID if the given value is not nil.
func (spu *ShipmentPalletUpdate) SetNillablePalletID(id *pulid.ID) *ShipmentPalletUpdate {
	if id != nil {
		spu = spu.SetPalletID(*id)
	}
	return spu
}

// SetPallet sets the "pallet" edge to the Pallet entity.
func (spu *ShipmentPalletUpdate) SetPallet(p *Pallet) *ShipmentPalletUpdate {
	return spu.SetPalletID(p.ID)
}

// AddOldPalletIDs adds the "old_pallet" edge to the Pallet entity by IDs.
func (spu *ShipmentPalletUpdate) AddOldPalletIDs(ids ...pulid.ID) *ShipmentPalletUpdate {
	spu.mutation.AddOldPalletIDs(ids...)
	return spu
}

// AddOldPallet adds the "old_pallet" edges to the Pallet entity.
func (spu *ShipmentPalletUpdate) AddOldPallet(p ...*Pallet) *ShipmentPalletUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spu.AddOldPalletIDs(ids...)
}

// Mutation returns the ShipmentPalletMutation object of the builder.
func (spu *ShipmentPalletUpdate) Mutation() *ShipmentPalletMutation {
	return spu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (spu *ShipmentPalletUpdate) ClearTenant() *ShipmentPalletUpdate {
	spu.mutation.ClearTenant()
	return spu
}

// ClearPallet clears the "pallet" edge to the Pallet entity.
func (spu *ShipmentPalletUpdate) ClearPallet() *ShipmentPalletUpdate {
	spu.mutation.ClearPallet()
	return spu
}

// ClearOldPallet clears all "old_pallet" edges to the Pallet entity.
func (spu *ShipmentPalletUpdate) ClearOldPallet() *ShipmentPalletUpdate {
	spu.mutation.ClearOldPallet()
	return spu
}

// RemoveOldPalletIDs removes the "old_pallet" edge to Pallet entities by IDs.
func (spu *ShipmentPalletUpdate) RemoveOldPalletIDs(ids ...pulid.ID) *ShipmentPalletUpdate {
	spu.mutation.RemoveOldPalletIDs(ids...)
	return spu
}

// RemoveOldPallet removes "old_pallet" edges to Pallet entities.
func (spu *ShipmentPalletUpdate) RemoveOldPallet(p ...*Pallet) *ShipmentPalletUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spu.RemoveOldPalletIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *ShipmentPalletUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *ShipmentPalletUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *ShipmentPalletUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *ShipmentPalletUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *ShipmentPalletUpdate) check() error {
	if v, ok := spu.mutation.Status(); ok {
		if err := shipmentpallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentPallet.status": %w`, err)}
		}
	}
	if spu.mutation.TenantCleared() && len(spu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentPallet.tenant"`)
	}
	if spu.mutation.ShipmentCleared() && len(spu.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentPallet.shipment"`)
	}
	return nil
}

func (spu *ShipmentPalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentpallet.Table, shipmentpallet.Columns, sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Barcode(); ok {
		_spec.SetField(shipmentpallet.FieldBarcode, field.TypeString, value)
	}
	if value, ok := spu.mutation.ColliNumber(); ok {
		_spec.SetField(shipmentpallet.FieldColliNumber, field.TypeString, value)
	}
	if value, ok := spu.mutation.CarrierID(); ok {
		_spec.SetField(shipmentpallet.FieldCarrierID, field.TypeString, value)
	}
	if value, ok := spu.mutation.LabelPdf(); ok {
		_spec.SetField(shipmentpallet.FieldLabelPdf, field.TypeString, value)
	}
	if spu.mutation.LabelPdfCleared() {
		_spec.ClearField(shipmentpallet.FieldLabelPdf, field.TypeString)
	}
	if value, ok := spu.mutation.LabelZpl(); ok {
		_spec.SetField(shipmentpallet.FieldLabelZpl, field.TypeString, value)
	}
	if spu.mutation.LabelZplCleared() {
		_spec.ClearField(shipmentpallet.FieldLabelZpl, field.TypeString)
	}
	if value, ok := spu.mutation.Status(); ok {
		_spec.SetField(shipmentpallet.FieldStatus, field.TypeEnum, value)
	}
	if spu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpallet.TenantTable,
			Columns: []string{shipmentpallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpallet.TenantTable,
			Columns: []string{shipmentpallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.PalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpallet.PalletTable,
			Columns: []string{shipmentpallet.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpallet.PalletTable,
			Columns: []string{shipmentpallet.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.OldPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentpallet.OldPalletTable,
			Columns: shipmentpallet.OldPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedOldPalletIDs(); len(nodes) > 0 && !spu.mutation.OldPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentpallet.OldPalletTable,
			Columns: shipmentpallet.OldPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.OldPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentpallet.OldPalletTable,
			Columns: shipmentpallet.OldPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentpallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// ShipmentPalletUpdateOne is the builder for updating a single ShipmentPallet entity.
type ShipmentPalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentPalletMutation
}

// SetTenantID sets the "tenant_id" field.
func (spuo *ShipmentPalletUpdateOne) SetTenantID(pu pulid.ID) *ShipmentPalletUpdateOne {
	spuo.mutation.SetTenantID(pu)
	return spuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (spuo *ShipmentPalletUpdateOne) SetNillableTenantID(pu *pulid.ID) *ShipmentPalletUpdateOne {
	if pu != nil {
		spuo.SetTenantID(*pu)
	}
	return spuo
}

// SetBarcode sets the "barcode" field.
func (spuo *ShipmentPalletUpdateOne) SetBarcode(s string) *ShipmentPalletUpdateOne {
	spuo.mutation.SetBarcode(s)
	return spuo
}

// SetNillableBarcode sets the "barcode" field if the given value is not nil.
func (spuo *ShipmentPalletUpdateOne) SetNillableBarcode(s *string) *ShipmentPalletUpdateOne {
	if s != nil {
		spuo.SetBarcode(*s)
	}
	return spuo
}

// SetColliNumber sets the "colli_number" field.
func (spuo *ShipmentPalletUpdateOne) SetColliNumber(s string) *ShipmentPalletUpdateOne {
	spuo.mutation.SetColliNumber(s)
	return spuo
}

// SetNillableColliNumber sets the "colli_number" field if the given value is not nil.
func (spuo *ShipmentPalletUpdateOne) SetNillableColliNumber(s *string) *ShipmentPalletUpdateOne {
	if s != nil {
		spuo.SetColliNumber(*s)
	}
	return spuo
}

// SetCarrierID sets the "carrier_id" field.
func (spuo *ShipmentPalletUpdateOne) SetCarrierID(s string) *ShipmentPalletUpdateOne {
	spuo.mutation.SetCarrierID(s)
	return spuo
}

// SetNillableCarrierID sets the "carrier_id" field if the given value is not nil.
func (spuo *ShipmentPalletUpdateOne) SetNillableCarrierID(s *string) *ShipmentPalletUpdateOne {
	if s != nil {
		spuo.SetCarrierID(*s)
	}
	return spuo
}

// SetLabelPdf sets the "label_pdf" field.
func (spuo *ShipmentPalletUpdateOne) SetLabelPdf(s string) *ShipmentPalletUpdateOne {
	spuo.mutation.SetLabelPdf(s)
	return spuo
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (spuo *ShipmentPalletUpdateOne) SetNillableLabelPdf(s *string) *ShipmentPalletUpdateOne {
	if s != nil {
		spuo.SetLabelPdf(*s)
	}
	return spuo
}

// ClearLabelPdf clears the value of the "label_pdf" field.
func (spuo *ShipmentPalletUpdateOne) ClearLabelPdf() *ShipmentPalletUpdateOne {
	spuo.mutation.ClearLabelPdf()
	return spuo
}

// SetLabelZpl sets the "label_zpl" field.
func (spuo *ShipmentPalletUpdateOne) SetLabelZpl(s string) *ShipmentPalletUpdateOne {
	spuo.mutation.SetLabelZpl(s)
	return spuo
}

// SetNillableLabelZpl sets the "label_zpl" field if the given value is not nil.
func (spuo *ShipmentPalletUpdateOne) SetNillableLabelZpl(s *string) *ShipmentPalletUpdateOne {
	if s != nil {
		spuo.SetLabelZpl(*s)
	}
	return spuo
}

// ClearLabelZpl clears the value of the "label_zpl" field.
func (spuo *ShipmentPalletUpdateOne) ClearLabelZpl() *ShipmentPalletUpdateOne {
	spuo.mutation.ClearLabelZpl()
	return spuo
}

// SetStatus sets the "status" field.
func (spuo *ShipmentPalletUpdateOne) SetStatus(s shipmentpallet.Status) *ShipmentPalletUpdateOne {
	spuo.mutation.SetStatus(s)
	return spuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spuo *ShipmentPalletUpdateOne) SetNillableStatus(s *shipmentpallet.Status) *ShipmentPalletUpdateOne {
	if s != nil {
		spuo.SetStatus(*s)
	}
	return spuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spuo *ShipmentPalletUpdateOne) SetTenant(t *Tenant) *ShipmentPalletUpdateOne {
	return spuo.SetTenantID(t.ID)
}

// SetPalletID sets the "pallet" edge to the Pallet entity by ID.
func (spuo *ShipmentPalletUpdateOne) SetPalletID(id pulid.ID) *ShipmentPalletUpdateOne {
	spuo.mutation.SetPalletID(id)
	return spuo
}

// SetNillablePalletID sets the "pallet" edge to the Pallet entity by ID if the given value is not nil.
func (spuo *ShipmentPalletUpdateOne) SetNillablePalletID(id *pulid.ID) *ShipmentPalletUpdateOne {
	if id != nil {
		spuo = spuo.SetPalletID(*id)
	}
	return spuo
}

// SetPallet sets the "pallet" edge to the Pallet entity.
func (spuo *ShipmentPalletUpdateOne) SetPallet(p *Pallet) *ShipmentPalletUpdateOne {
	return spuo.SetPalletID(p.ID)
}

// AddOldPalletIDs adds the "old_pallet" edge to the Pallet entity by IDs.
func (spuo *ShipmentPalletUpdateOne) AddOldPalletIDs(ids ...pulid.ID) *ShipmentPalletUpdateOne {
	spuo.mutation.AddOldPalletIDs(ids...)
	return spuo
}

// AddOldPallet adds the "old_pallet" edges to the Pallet entity.
func (spuo *ShipmentPalletUpdateOne) AddOldPallet(p ...*Pallet) *ShipmentPalletUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spuo.AddOldPalletIDs(ids...)
}

// Mutation returns the ShipmentPalletMutation object of the builder.
func (spuo *ShipmentPalletUpdateOne) Mutation() *ShipmentPalletMutation {
	return spuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (spuo *ShipmentPalletUpdateOne) ClearTenant() *ShipmentPalletUpdateOne {
	spuo.mutation.ClearTenant()
	return spuo
}

// ClearPallet clears the "pallet" edge to the Pallet entity.
func (spuo *ShipmentPalletUpdateOne) ClearPallet() *ShipmentPalletUpdateOne {
	spuo.mutation.ClearPallet()
	return spuo
}

// ClearOldPallet clears all "old_pallet" edges to the Pallet entity.
func (spuo *ShipmentPalletUpdateOne) ClearOldPallet() *ShipmentPalletUpdateOne {
	spuo.mutation.ClearOldPallet()
	return spuo
}

// RemoveOldPalletIDs removes the "old_pallet" edge to Pallet entities by IDs.
func (spuo *ShipmentPalletUpdateOne) RemoveOldPalletIDs(ids ...pulid.ID) *ShipmentPalletUpdateOne {
	spuo.mutation.RemoveOldPalletIDs(ids...)
	return spuo
}

// RemoveOldPallet removes "old_pallet" edges to Pallet entities.
func (spuo *ShipmentPalletUpdateOne) RemoveOldPallet(p ...*Pallet) *ShipmentPalletUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spuo.RemoveOldPalletIDs(ids...)
}

// Where appends a list predicates to the ShipmentPalletUpdate builder.
func (spuo *ShipmentPalletUpdateOne) Where(ps ...predicate.ShipmentPallet) *ShipmentPalletUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *ShipmentPalletUpdateOne) Select(field string, fields ...string) *ShipmentPalletUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated ShipmentPallet entity.
func (spuo *ShipmentPalletUpdateOne) Save(ctx context.Context) (*ShipmentPallet, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *ShipmentPalletUpdateOne) SaveX(ctx context.Context) *ShipmentPallet {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *ShipmentPalletUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *ShipmentPalletUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *ShipmentPalletUpdateOne) check() error {
	if v, ok := spuo.mutation.Status(); ok {
		if err := shipmentpallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentPallet.status": %w`, err)}
		}
	}
	if spuo.mutation.TenantCleared() && len(spuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentPallet.tenant"`)
	}
	if spuo.mutation.ShipmentCleared() && len(spuo.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentPallet.shipment"`)
	}
	return nil
}

func (spuo *ShipmentPalletUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentPallet, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentpallet.Table, shipmentpallet.Columns, sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentPallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentpallet.FieldID)
		for _, f := range fields {
			if !shipmentpallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentpallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Barcode(); ok {
		_spec.SetField(shipmentpallet.FieldBarcode, field.TypeString, value)
	}
	if value, ok := spuo.mutation.ColliNumber(); ok {
		_spec.SetField(shipmentpallet.FieldColliNumber, field.TypeString, value)
	}
	if value, ok := spuo.mutation.CarrierID(); ok {
		_spec.SetField(shipmentpallet.FieldCarrierID, field.TypeString, value)
	}
	if value, ok := spuo.mutation.LabelPdf(); ok {
		_spec.SetField(shipmentpallet.FieldLabelPdf, field.TypeString, value)
	}
	if spuo.mutation.LabelPdfCleared() {
		_spec.ClearField(shipmentpallet.FieldLabelPdf, field.TypeString)
	}
	if value, ok := spuo.mutation.LabelZpl(); ok {
		_spec.SetField(shipmentpallet.FieldLabelZpl, field.TypeString, value)
	}
	if spuo.mutation.LabelZplCleared() {
		_spec.ClearField(shipmentpallet.FieldLabelZpl, field.TypeString)
	}
	if value, ok := spuo.mutation.Status(); ok {
		_spec.SetField(shipmentpallet.FieldStatus, field.TypeEnum, value)
	}
	if spuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpallet.TenantTable,
			Columns: []string{shipmentpallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpallet.TenantTable,
			Columns: []string{shipmentpallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.PalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpallet.PalletTable,
			Columns: []string{shipmentpallet.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpallet.PalletTable,
			Columns: []string{shipmentpallet.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.OldPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentpallet.OldPalletTable,
			Columns: shipmentpallet.OldPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedOldPalletIDs(); len(nodes) > 0 && !spuo.mutation.OldPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentpallet.OldPalletTable,
			Columns: shipmentpallet.OldPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.OldPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentpallet.OldPalletTable,
			Columns: shipmentpallet.OldPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentPallet{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentpallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
