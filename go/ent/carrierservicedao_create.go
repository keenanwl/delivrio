// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceDAOCreate is the builder for creating a CarrierServiceDAO entity.
type CarrierServiceDAOCreate struct {
	config
	mutation *CarrierServiceDAOMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetID sets the "id" field.
func (csdc *CarrierServiceDAOCreate) SetID(pu pulid.ID) *CarrierServiceDAOCreate {
	csdc.mutation.SetID(pu)
	return csdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csdc *CarrierServiceDAOCreate) SetNillableID(pu *pulid.ID) *CarrierServiceDAOCreate {
	if pu != nil {
		csdc.SetID(*pu)
	}
	return csdc
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csdc *CarrierServiceDAOCreate) SetCarrierServiceID(id pulid.ID) *CarrierServiceDAOCreate {
	csdc.mutation.SetCarrierServiceID(id)
	return csdc
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csdc *CarrierServiceDAOCreate) SetCarrierService(c *CarrierService) *CarrierServiceDAOCreate {
	return csdc.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceDAOIDs adds the "carrier_additional_service_dao" edge to the CarrierAdditionalServiceDAO entity by IDs.
func (csdc *CarrierServiceDAOCreate) AddCarrierAdditionalServiceDAOIDs(ids ...pulid.ID) *CarrierServiceDAOCreate {
	csdc.mutation.AddCarrierAdditionalServiceDAOIDs(ids...)
	return csdc
}

// AddCarrierAdditionalServiceDAO adds the "carrier_additional_service_dao" edges to the CarrierAdditionalServiceDAO entity.
func (csdc *CarrierServiceDAOCreate) AddCarrierAdditionalServiceDAO(c ...*CarrierAdditionalServiceDAO) *CarrierServiceDAOCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csdc.AddCarrierAdditionalServiceDAOIDs(ids...)
}

// Mutation returns the CarrierServiceDAOMutation object of the builder.
func (csdc *CarrierServiceDAOCreate) Mutation() *CarrierServiceDAOMutation {
	return csdc.mutation
}

// Save creates the CarrierServiceDAO in the database.
func (csdc *CarrierServiceDAOCreate) Save(ctx context.Context) (*CarrierServiceDAO, error) {
	if err := csdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csdc.sqlSave, csdc.mutation, csdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csdc *CarrierServiceDAOCreate) SaveX(ctx context.Context) *CarrierServiceDAO {
	v, err := csdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csdc *CarrierServiceDAOCreate) Exec(ctx context.Context) error {
	_, err := csdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csdc *CarrierServiceDAOCreate) ExecX(ctx context.Context) {
	if err := csdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csdc *CarrierServiceDAOCreate) defaults() error {
	if _, ok := csdc.mutation.ID(); !ok {
		if carrierservicedao.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierservicedao.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierservicedao.DefaultID()
		csdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csdc *CarrierServiceDAOCreate) check() error {
	if len(csdc.mutation.CarrierServiceIDs()) == 0 {
		return &ValidationError{Name: "carrier_service", err: errors.New(`ent: missing required edge "CarrierServiceDAO.carrier_service"`)}
	}
	return nil
}

func (csdc *CarrierServiceDAOCreate) sqlSave(ctx context.Context) (*CarrierServiceDAO, error) {
	if err := csdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csdc.mutation.id = &_node.ID
	csdc.mutation.done = true
	return _node, nil
}

func (csdc *CarrierServiceDAOCreate) createSpec() (*CarrierServiceDAO, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierServiceDAO{config: csdc.config}
		_spec = sqlgraph.NewCreateSpec(carrierservicedao.Table, sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString))
	)
	_spec.OnConflict = csdc.conflict
	if id, ok := csdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := csdc.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicedao.CarrierServiceTable,
			Columns: []string{carrierservicedao.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_service_carrier_service_dao = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csdc.mutation.CarrierAdditionalServiceDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedao.CarrierAdditionalServiceDAOTable,
			Columns: carrierservicedao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierServiceDAO.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (csdc *CarrierServiceDAOCreate) OnConflict(opts ...sql.ConflictOption) *CarrierServiceDAOUpsertOne {
	csdc.conflict = opts
	return &CarrierServiceDAOUpsertOne{
		create: csdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierServiceDAO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csdc *CarrierServiceDAOCreate) OnConflictColumns(columns ...string) *CarrierServiceDAOUpsertOne {
	csdc.conflict = append(csdc.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceDAOUpsertOne{
		create: csdc,
	}
}

type (
	// CarrierServiceDAOUpsertOne is the builder for "upsert"-ing
	//  one CarrierServiceDAO node.
	CarrierServiceDAOUpsertOne struct {
		create *CarrierServiceDAOCreate
	}

	// CarrierServiceDAOUpsert is the "OnConflict" setter.
	CarrierServiceDAOUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierServiceDAO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierservicedao.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceDAOUpsertOne) UpdateNewValues() *CarrierServiceDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierservicedao.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierServiceDAO.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierServiceDAOUpsertOne) Ignore() *CarrierServiceDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceDAOUpsertOne) DoNothing() *CarrierServiceDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceDAOCreate.OnConflict
// documentation for more info.
func (u *CarrierServiceDAOUpsertOne) Update(set func(*CarrierServiceDAOUpsert)) *CarrierServiceDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceDAOUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *CarrierServiceDAOUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceDAOCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceDAOUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierServiceDAOUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierServiceDAOUpsertOne.ID is not supported by MySQL driver. Use CarrierServiceDAOUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierServiceDAOUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierServiceDAOCreateBulk is the builder for creating many CarrierServiceDAO entities in bulk.
type CarrierServiceDAOCreateBulk struct {
	config
	err      error
	builders []*CarrierServiceDAOCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierServiceDAO entities in the database.
func (csdcb *CarrierServiceDAOCreateBulk) Save(ctx context.Context) ([]*CarrierServiceDAO, error) {
	if csdcb.err != nil {
		return nil, csdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(csdcb.builders))
	nodes := make([]*CarrierServiceDAO, len(csdcb.builders))
	mutators := make([]Mutator, len(csdcb.builders))
	for i := range csdcb.builders {
		func(i int, root context.Context) {
			builder := csdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierServiceDAOMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, csdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = csdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, csdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, csdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (csdcb *CarrierServiceDAOCreateBulk) SaveX(ctx context.Context) []*CarrierServiceDAO {
	v, err := csdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csdcb *CarrierServiceDAOCreateBulk) Exec(ctx context.Context) error {
	_, err := csdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csdcb *CarrierServiceDAOCreateBulk) ExecX(ctx context.Context) {
	if err := csdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierServiceDAO.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (csdcb *CarrierServiceDAOCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierServiceDAOUpsertBulk {
	csdcb.conflict = opts
	return &CarrierServiceDAOUpsertBulk{
		create: csdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierServiceDAO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csdcb *CarrierServiceDAOCreateBulk) OnConflictColumns(columns ...string) *CarrierServiceDAOUpsertBulk {
	csdcb.conflict = append(csdcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceDAOUpsertBulk{
		create: csdcb,
	}
}

// CarrierServiceDAOUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierServiceDAO nodes.
type CarrierServiceDAOUpsertBulk struct {
	create *CarrierServiceDAOCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierServiceDAO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierservicedao.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceDAOUpsertBulk) UpdateNewValues() *CarrierServiceDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierservicedao.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierServiceDAO.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierServiceDAOUpsertBulk) Ignore() *CarrierServiceDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceDAOUpsertBulk) DoNothing() *CarrierServiceDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceDAOCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierServiceDAOUpsertBulk) Update(set func(*CarrierServiceDAOUpsert)) *CarrierServiceDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceDAOUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *CarrierServiceDAOUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierServiceDAOCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceDAOCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceDAOUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
