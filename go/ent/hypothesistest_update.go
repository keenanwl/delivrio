// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestUpdate is the builder for updating HypothesisTest entities.
type HypothesisTestUpdate struct {
	config
	hooks    []Hook
	mutation *HypothesisTestMutation
}

// Where appends a list predicates to the HypothesisTestUpdate builder.
func (htu *HypothesisTestUpdate) Where(ps ...predicate.HypothesisTest) *HypothesisTestUpdate {
	htu.mutation.Where(ps...)
	return htu
}

// SetTenantID sets the "tenant_id" field.
func (htu *HypothesisTestUpdate) SetTenantID(pu pulid.ID) *HypothesisTestUpdate {
	htu.mutation.SetTenantID(pu)
	return htu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (htu *HypothesisTestUpdate) SetNillableTenantID(pu *pulid.ID) *HypothesisTestUpdate {
	if pu != nil {
		htu.SetTenantID(*pu)
	}
	return htu
}

// SetName sets the "name" field.
func (htu *HypothesisTestUpdate) SetName(s string) *HypothesisTestUpdate {
	htu.mutation.SetName(s)
	return htu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (htu *HypothesisTestUpdate) SetNillableName(s *string) *HypothesisTestUpdate {
	if s != nil {
		htu.SetName(*s)
	}
	return htu
}

// SetActive sets the "active" field.
func (htu *HypothesisTestUpdate) SetActive(b bool) *HypothesisTestUpdate {
	htu.mutation.SetActive(b)
	return htu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (htu *HypothesisTestUpdate) SetNillableActive(b *bool) *HypothesisTestUpdate {
	if b != nil {
		htu.SetActive(*b)
	}
	return htu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htu *HypothesisTestUpdate) SetTenant(t *Tenant) *HypothesisTestUpdate {
	return htu.SetTenantID(t.ID)
}

// SetHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID.
func (htu *HypothesisTestUpdate) SetHypothesisTestDeliveryOptionID(id pulid.ID) *HypothesisTestUpdate {
	htu.mutation.SetHypothesisTestDeliveryOptionID(id)
	return htu
}

// SetNillableHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID if the given value is not nil.
func (htu *HypothesisTestUpdate) SetNillableHypothesisTestDeliveryOptionID(id *pulid.ID) *HypothesisTestUpdate {
	if id != nil {
		htu = htu.SetHypothesisTestDeliveryOptionID(*id)
	}
	return htu
}

// SetHypothesisTestDeliveryOption sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htu *HypothesisTestUpdate) SetHypothesisTestDeliveryOption(h *HypothesisTestDeliveryOption) *HypothesisTestUpdate {
	return htu.SetHypothesisTestDeliveryOptionID(h.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (htu *HypothesisTestUpdate) SetConnectionID(id pulid.ID) *HypothesisTestUpdate {
	htu.mutation.SetConnectionID(id)
	return htu
}

// SetConnection sets the "connection" edge to the Connection entity.
func (htu *HypothesisTestUpdate) SetConnection(c *Connection) *HypothesisTestUpdate {
	return htu.SetConnectionID(c.ID)
}

// Mutation returns the HypothesisTestMutation object of the builder.
func (htu *HypothesisTestUpdate) Mutation() *HypothesisTestMutation {
	return htu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (htu *HypothesisTestUpdate) ClearTenant() *HypothesisTestUpdate {
	htu.mutation.ClearTenant()
	return htu
}

// ClearHypothesisTestDeliveryOption clears the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htu *HypothesisTestUpdate) ClearHypothesisTestDeliveryOption() *HypothesisTestUpdate {
	htu.mutation.ClearHypothesisTestDeliveryOption()
	return htu
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (htu *HypothesisTestUpdate) ClearConnection() *HypothesisTestUpdate {
	htu.mutation.ClearConnection()
	return htu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htu *HypothesisTestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, htu.sqlSave, htu.mutation, htu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htu *HypothesisTestUpdate) SaveX(ctx context.Context) int {
	affected, err := htu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htu *HypothesisTestUpdate) Exec(ctx context.Context) error {
	_, err := htu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htu *HypothesisTestUpdate) ExecX(ctx context.Context) {
	if err := htu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htu *HypothesisTestUpdate) check() error {
	if htu.mutation.TenantCleared() && len(htu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTest.tenant"`)
	}
	if htu.mutation.ConnectionCleared() && len(htu.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTest.connection"`)
	}
	return nil
}

func (htu *HypothesisTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := htu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hypothesistest.Table, hypothesistest.Columns, sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString))
	if ps := htu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htu.mutation.Name(); ok {
		_spec.SetField(hypothesistest.FieldName, field.TypeString, value)
	}
	if value, ok := htu.mutation.Active(); ok {
		_spec.SetField(hypothesistest.FieldActive, field.TypeBool, value)
	}
	if htu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.TenantTable,
			Columns: []string{hypothesistest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.TenantTable,
			Columns: []string{hypothesistest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htu.mutation.HypothesisTestDeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htu.mutation.HypothesisTestDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htu.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.ConnectionTable,
			Columns: []string{hypothesistest.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htu.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.ConnectionTable,
			Columns: []string{hypothesistest.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hypothesistest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	htu.mutation.done = true
	return n, nil
}

// HypothesisTestUpdateOne is the builder for updating a single HypothesisTest entity.
type HypothesisTestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HypothesisTestMutation
}

// SetTenantID sets the "tenant_id" field.
func (htuo *HypothesisTestUpdateOne) SetTenantID(pu pulid.ID) *HypothesisTestUpdateOne {
	htuo.mutation.SetTenantID(pu)
	return htuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (htuo *HypothesisTestUpdateOne) SetNillableTenantID(pu *pulid.ID) *HypothesisTestUpdateOne {
	if pu != nil {
		htuo.SetTenantID(*pu)
	}
	return htuo
}

// SetName sets the "name" field.
func (htuo *HypothesisTestUpdateOne) SetName(s string) *HypothesisTestUpdateOne {
	htuo.mutation.SetName(s)
	return htuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (htuo *HypothesisTestUpdateOne) SetNillableName(s *string) *HypothesisTestUpdateOne {
	if s != nil {
		htuo.SetName(*s)
	}
	return htuo
}

// SetActive sets the "active" field.
func (htuo *HypothesisTestUpdateOne) SetActive(b bool) *HypothesisTestUpdateOne {
	htuo.mutation.SetActive(b)
	return htuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (htuo *HypothesisTestUpdateOne) SetNillableActive(b *bool) *HypothesisTestUpdateOne {
	if b != nil {
		htuo.SetActive(*b)
	}
	return htuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htuo *HypothesisTestUpdateOne) SetTenant(t *Tenant) *HypothesisTestUpdateOne {
	return htuo.SetTenantID(t.ID)
}

// SetHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID.
func (htuo *HypothesisTestUpdateOne) SetHypothesisTestDeliveryOptionID(id pulid.ID) *HypothesisTestUpdateOne {
	htuo.mutation.SetHypothesisTestDeliveryOptionID(id)
	return htuo
}

// SetNillableHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID if the given value is not nil.
func (htuo *HypothesisTestUpdateOne) SetNillableHypothesisTestDeliveryOptionID(id *pulid.ID) *HypothesisTestUpdateOne {
	if id != nil {
		htuo = htuo.SetHypothesisTestDeliveryOptionID(*id)
	}
	return htuo
}

// SetHypothesisTestDeliveryOption sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htuo *HypothesisTestUpdateOne) SetHypothesisTestDeliveryOption(h *HypothesisTestDeliveryOption) *HypothesisTestUpdateOne {
	return htuo.SetHypothesisTestDeliveryOptionID(h.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (htuo *HypothesisTestUpdateOne) SetConnectionID(id pulid.ID) *HypothesisTestUpdateOne {
	htuo.mutation.SetConnectionID(id)
	return htuo
}

// SetConnection sets the "connection" edge to the Connection entity.
func (htuo *HypothesisTestUpdateOne) SetConnection(c *Connection) *HypothesisTestUpdateOne {
	return htuo.SetConnectionID(c.ID)
}

// Mutation returns the HypothesisTestMutation object of the builder.
func (htuo *HypothesisTestUpdateOne) Mutation() *HypothesisTestMutation {
	return htuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (htuo *HypothesisTestUpdateOne) ClearTenant() *HypothesisTestUpdateOne {
	htuo.mutation.ClearTenant()
	return htuo
}

// ClearHypothesisTestDeliveryOption clears the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htuo *HypothesisTestUpdateOne) ClearHypothesisTestDeliveryOption() *HypothesisTestUpdateOne {
	htuo.mutation.ClearHypothesisTestDeliveryOption()
	return htuo
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (htuo *HypothesisTestUpdateOne) ClearConnection() *HypothesisTestUpdateOne {
	htuo.mutation.ClearConnection()
	return htuo
}

// Where appends a list predicates to the HypothesisTestUpdate builder.
func (htuo *HypothesisTestUpdateOne) Where(ps ...predicate.HypothesisTest) *HypothesisTestUpdateOne {
	htuo.mutation.Where(ps...)
	return htuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htuo *HypothesisTestUpdateOne) Select(field string, fields ...string) *HypothesisTestUpdateOne {
	htuo.fields = append([]string{field}, fields...)
	return htuo
}

// Save executes the query and returns the updated HypothesisTest entity.
func (htuo *HypothesisTestUpdateOne) Save(ctx context.Context) (*HypothesisTest, error) {
	return withHooks(ctx, htuo.sqlSave, htuo.mutation, htuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htuo *HypothesisTestUpdateOne) SaveX(ctx context.Context) *HypothesisTest {
	node, err := htuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htuo *HypothesisTestUpdateOne) Exec(ctx context.Context) error {
	_, err := htuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htuo *HypothesisTestUpdateOne) ExecX(ctx context.Context) {
	if err := htuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htuo *HypothesisTestUpdateOne) check() error {
	if htuo.mutation.TenantCleared() && len(htuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTest.tenant"`)
	}
	if htuo.mutation.ConnectionCleared() && len(htuo.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTest.connection"`)
	}
	return nil
}

func (htuo *HypothesisTestUpdateOne) sqlSave(ctx context.Context) (_node *HypothesisTest, err error) {
	if err := htuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hypothesistest.Table, hypothesistest.Columns, sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString))
	id, ok := htuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HypothesisTest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistest.FieldID)
		for _, f := range fields {
			if !hypothesistest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hypothesistest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htuo.mutation.Name(); ok {
		_spec.SetField(hypothesistest.FieldName, field.TypeString, value)
	}
	if value, ok := htuo.mutation.Active(); ok {
		_spec.SetField(hypothesistest.FieldActive, field.TypeBool, value)
	}
	if htuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.TenantTable,
			Columns: []string{hypothesistest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.TenantTable,
			Columns: []string{hypothesistest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htuo.mutation.HypothesisTestDeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htuo.mutation.HypothesisTestDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htuo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.ConnectionTable,
			Columns: []string{hypothesistest.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htuo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.ConnectionTable,
			Columns: []string{hypothesistest.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HypothesisTest{config: htuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hypothesistest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	htuo.mutation.done = true
	return _node, nil
}
