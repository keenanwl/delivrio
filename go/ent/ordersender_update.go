// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/ordersender"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderSenderUpdate is the builder for updating OrderSender entities.
type OrderSenderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderSenderMutation
}

// Where appends a list predicates to the OrderSenderUpdate builder.
func (osu *OrderSenderUpdate) Where(ps ...predicate.OrderSender) *OrderSenderUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetTenantID sets the "tenant_id" field.
func (osu *OrderSenderUpdate) SetTenantID(pu pulid.ID) *OrderSenderUpdate {
	osu.mutation.SetTenantID(pu)
	return osu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (osu *OrderSenderUpdate) SetNillableTenantID(pu *pulid.ID) *OrderSenderUpdate {
	if pu != nil {
		osu.SetTenantID(*pu)
	}
	return osu
}

// SetUniquenessID sets the "uniqueness_id" field.
func (osu *OrderSenderUpdate) SetUniquenessID(s string) *OrderSenderUpdate {
	osu.mutation.SetUniquenessID(s)
	return osu
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (osu *OrderSenderUpdate) SetNillableUniquenessID(s *string) *OrderSenderUpdate {
	if s != nil {
		osu.SetUniquenessID(*s)
	}
	return osu
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (osu *OrderSenderUpdate) ClearUniquenessID() *OrderSenderUpdate {
	osu.mutation.ClearUniquenessID()
	return osu
}

// SetFirstName sets the "first_name" field.
func (osu *OrderSenderUpdate) SetFirstName(s string) *OrderSenderUpdate {
	osu.mutation.SetFirstName(s)
	return osu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (osu *OrderSenderUpdate) SetNillableFirstName(s *string) *OrderSenderUpdate {
	if s != nil {
		osu.SetFirstName(*s)
	}
	return osu
}

// SetLastName sets the "last_name" field.
func (osu *OrderSenderUpdate) SetLastName(s string) *OrderSenderUpdate {
	osu.mutation.SetLastName(s)
	return osu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (osu *OrderSenderUpdate) SetNillableLastName(s *string) *OrderSenderUpdate {
	if s != nil {
		osu.SetLastName(*s)
	}
	return osu
}

// SetEmail sets the "email" field.
func (osu *OrderSenderUpdate) SetEmail(s string) *OrderSenderUpdate {
	osu.mutation.SetEmail(s)
	return osu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (osu *OrderSenderUpdate) SetNillableEmail(s *string) *OrderSenderUpdate {
	if s != nil {
		osu.SetEmail(*s)
	}
	return osu
}

// SetPhoneNumber sets the "phone_number" field.
func (osu *OrderSenderUpdate) SetPhoneNumber(s string) *OrderSenderUpdate {
	osu.mutation.SetPhoneNumber(s)
	return osu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (osu *OrderSenderUpdate) SetNillablePhoneNumber(s *string) *OrderSenderUpdate {
	if s != nil {
		osu.SetPhoneNumber(*s)
	}
	return osu
}

// SetVatNumber sets the "vat_number" field.
func (osu *OrderSenderUpdate) SetVatNumber(s string) *OrderSenderUpdate {
	osu.mutation.SetVatNumber(s)
	return osu
}

// SetNillableVatNumber sets the "vat_number" field if the given value is not nil.
func (osu *OrderSenderUpdate) SetNillableVatNumber(s *string) *OrderSenderUpdate {
	if s != nil {
		osu.SetVatNumber(*s)
	}
	return osu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (osu *OrderSenderUpdate) SetTenant(t *Tenant) *OrderSenderUpdate {
	return osu.SetTenantID(t.ID)
}

// Mutation returns the OrderSenderMutation object of the builder.
func (osu *OrderSenderUpdate) Mutation() *OrderSenderMutation {
	return osu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (osu *OrderSenderUpdate) ClearTenant() *OrderSenderUpdate {
	osu.mutation.ClearTenant()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrderSenderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrderSenderUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrderSenderUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrderSenderUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OrderSenderUpdate) check() error {
	if osu.mutation.TenantCleared() && len(osu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderSender.tenant"`)
	}
	return nil
}

func (osu *OrderSenderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ordersender.Table, ordersender.Columns, sqlgraph.NewFieldSpec(ordersender.FieldID, field.TypeString))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.UniquenessID(); ok {
		_spec.SetField(ordersender.FieldUniquenessID, field.TypeString, value)
	}
	if osu.mutation.UniquenessIDCleared() {
		_spec.ClearField(ordersender.FieldUniquenessID, field.TypeString)
	}
	if value, ok := osu.mutation.FirstName(); ok {
		_spec.SetField(ordersender.FieldFirstName, field.TypeString, value)
	}
	if value, ok := osu.mutation.LastName(); ok {
		_spec.SetField(ordersender.FieldLastName, field.TypeString, value)
	}
	if value, ok := osu.mutation.Email(); ok {
		_spec.SetField(ordersender.FieldEmail, field.TypeString, value)
	}
	if value, ok := osu.mutation.PhoneNumber(); ok {
		_spec.SetField(ordersender.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := osu.mutation.VatNumber(); ok {
		_spec.SetField(ordersender.FieldVatNumber, field.TypeString, value)
	}
	if osu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordersender.TenantTable,
			Columns: []string{ordersender.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordersender.TenantTable,
			Columns: []string{ordersender.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersender.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrderSenderUpdateOne is the builder for updating a single OrderSender entity.
type OrderSenderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderSenderMutation
}

// SetTenantID sets the "tenant_id" field.
func (osuo *OrderSenderUpdateOne) SetTenantID(pu pulid.ID) *OrderSenderUpdateOne {
	osuo.mutation.SetTenantID(pu)
	return osuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (osuo *OrderSenderUpdateOne) SetNillableTenantID(pu *pulid.ID) *OrderSenderUpdateOne {
	if pu != nil {
		osuo.SetTenantID(*pu)
	}
	return osuo
}

// SetUniquenessID sets the "uniqueness_id" field.
func (osuo *OrderSenderUpdateOne) SetUniquenessID(s string) *OrderSenderUpdateOne {
	osuo.mutation.SetUniquenessID(s)
	return osuo
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (osuo *OrderSenderUpdateOne) SetNillableUniquenessID(s *string) *OrderSenderUpdateOne {
	if s != nil {
		osuo.SetUniquenessID(*s)
	}
	return osuo
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (osuo *OrderSenderUpdateOne) ClearUniquenessID() *OrderSenderUpdateOne {
	osuo.mutation.ClearUniquenessID()
	return osuo
}

// SetFirstName sets the "first_name" field.
func (osuo *OrderSenderUpdateOne) SetFirstName(s string) *OrderSenderUpdateOne {
	osuo.mutation.SetFirstName(s)
	return osuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (osuo *OrderSenderUpdateOne) SetNillableFirstName(s *string) *OrderSenderUpdateOne {
	if s != nil {
		osuo.SetFirstName(*s)
	}
	return osuo
}

// SetLastName sets the "last_name" field.
func (osuo *OrderSenderUpdateOne) SetLastName(s string) *OrderSenderUpdateOne {
	osuo.mutation.SetLastName(s)
	return osuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (osuo *OrderSenderUpdateOne) SetNillableLastName(s *string) *OrderSenderUpdateOne {
	if s != nil {
		osuo.SetLastName(*s)
	}
	return osuo
}

// SetEmail sets the "email" field.
func (osuo *OrderSenderUpdateOne) SetEmail(s string) *OrderSenderUpdateOne {
	osuo.mutation.SetEmail(s)
	return osuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (osuo *OrderSenderUpdateOne) SetNillableEmail(s *string) *OrderSenderUpdateOne {
	if s != nil {
		osuo.SetEmail(*s)
	}
	return osuo
}

// SetPhoneNumber sets the "phone_number" field.
func (osuo *OrderSenderUpdateOne) SetPhoneNumber(s string) *OrderSenderUpdateOne {
	osuo.mutation.SetPhoneNumber(s)
	return osuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (osuo *OrderSenderUpdateOne) SetNillablePhoneNumber(s *string) *OrderSenderUpdateOne {
	if s != nil {
		osuo.SetPhoneNumber(*s)
	}
	return osuo
}

// SetVatNumber sets the "vat_number" field.
func (osuo *OrderSenderUpdateOne) SetVatNumber(s string) *OrderSenderUpdateOne {
	osuo.mutation.SetVatNumber(s)
	return osuo
}

// SetNillableVatNumber sets the "vat_number" field if the given value is not nil.
func (osuo *OrderSenderUpdateOne) SetNillableVatNumber(s *string) *OrderSenderUpdateOne {
	if s != nil {
		osuo.SetVatNumber(*s)
	}
	return osuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (osuo *OrderSenderUpdateOne) SetTenant(t *Tenant) *OrderSenderUpdateOne {
	return osuo.SetTenantID(t.ID)
}

// Mutation returns the OrderSenderMutation object of the builder.
func (osuo *OrderSenderUpdateOne) Mutation() *OrderSenderMutation {
	return osuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (osuo *OrderSenderUpdateOne) ClearTenant() *OrderSenderUpdateOne {
	osuo.mutation.ClearTenant()
	return osuo
}

// Where appends a list predicates to the OrderSenderUpdate builder.
func (osuo *OrderSenderUpdateOne) Where(ps ...predicate.OrderSender) *OrderSenderUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrderSenderUpdateOne) Select(field string, fields ...string) *OrderSenderUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrderSender entity.
func (osuo *OrderSenderUpdateOne) Save(ctx context.Context) (*OrderSender, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrderSenderUpdateOne) SaveX(ctx context.Context) *OrderSender {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrderSenderUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrderSenderUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OrderSenderUpdateOne) check() error {
	if osuo.mutation.TenantCleared() && len(osuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderSender.tenant"`)
	}
	return nil
}

func (osuo *OrderSenderUpdateOne) sqlSave(ctx context.Context) (_node *OrderSender, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ordersender.Table, ordersender.Columns, sqlgraph.NewFieldSpec(ordersender.FieldID, field.TypeString))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderSender.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordersender.FieldID)
		for _, f := range fields {
			if !ordersender.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordersender.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.UniquenessID(); ok {
		_spec.SetField(ordersender.FieldUniquenessID, field.TypeString, value)
	}
	if osuo.mutation.UniquenessIDCleared() {
		_spec.ClearField(ordersender.FieldUniquenessID, field.TypeString)
	}
	if value, ok := osuo.mutation.FirstName(); ok {
		_spec.SetField(ordersender.FieldFirstName, field.TypeString, value)
	}
	if value, ok := osuo.mutation.LastName(); ok {
		_spec.SetField(ordersender.FieldLastName, field.TypeString, value)
	}
	if value, ok := osuo.mutation.Email(); ok {
		_spec.SetField(ordersender.FieldEmail, field.TypeString, value)
	}
	if value, ok := osuo.mutation.PhoneNumber(); ok {
		_spec.SetField(ordersender.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := osuo.mutation.VatNumber(); ok {
		_spec.SetField(ordersender.FieldVatNumber, field.TypeString, value)
	}
	if osuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordersender.TenantTable,
			Columns: []string{ordersender.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordersender.TenantTable,
			Columns: []string{ordersender.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderSender{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersender.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
