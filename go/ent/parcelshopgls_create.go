// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopGLSCreate is the builder for creating a ParcelShopGLS entity.
type ParcelShopGLSCreate struct {
	config
	mutation *ParcelShopGLSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGLSParcelShopID sets the "gls_parcel_shop_id" field.
func (psgc *ParcelShopGLSCreate) SetGLSParcelShopID(s string) *ParcelShopGLSCreate {
	psgc.mutation.SetGLSParcelShopID(s)
	return psgc
}

// SetPartnerID sets the "partner_id" field.
func (psgc *ParcelShopGLSCreate) SetPartnerID(s string) *ParcelShopGLSCreate {
	psgc.mutation.SetPartnerID(s)
	return psgc
}

// SetNillablePartnerID sets the "partner_id" field if the given value is not nil.
func (psgc *ParcelShopGLSCreate) SetNillablePartnerID(s *string) *ParcelShopGLSCreate {
	if s != nil {
		psgc.SetPartnerID(*s)
	}
	return psgc
}

// SetType sets the "type" field.
func (psgc *ParcelShopGLSCreate) SetType(s string) *ParcelShopGLSCreate {
	psgc.mutation.SetType(s)
	return psgc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (psgc *ParcelShopGLSCreate) SetNillableType(s *string) *ParcelShopGLSCreate {
	if s != nil {
		psgc.SetType(*s)
	}
	return psgc
}

// SetID sets the "id" field.
func (psgc *ParcelShopGLSCreate) SetID(pu pulid.ID) *ParcelShopGLSCreate {
	psgc.mutation.SetID(pu)
	return psgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psgc *ParcelShopGLSCreate) SetNillableID(pu *pulid.ID) *ParcelShopGLSCreate {
	if pu != nil {
		psgc.SetID(*pu)
	}
	return psgc
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psgc *ParcelShopGLSCreate) SetParcelShopID(id pulid.ID) *ParcelShopGLSCreate {
	psgc.mutation.SetParcelShopID(id)
	return psgc
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psgc *ParcelShopGLSCreate) SetParcelShop(p *ParcelShop) *ParcelShopGLSCreate {
	return psgc.SetParcelShopID(p.ID)
}

// Mutation returns the ParcelShopGLSMutation object of the builder.
func (psgc *ParcelShopGLSCreate) Mutation() *ParcelShopGLSMutation {
	return psgc.mutation
}

// Save creates the ParcelShopGLS in the database.
func (psgc *ParcelShopGLSCreate) Save(ctx context.Context) (*ParcelShopGLS, error) {
	if err := psgc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, psgc.sqlSave, psgc.mutation, psgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psgc *ParcelShopGLSCreate) SaveX(ctx context.Context) *ParcelShopGLS {
	v, err := psgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psgc *ParcelShopGLSCreate) Exec(ctx context.Context) error {
	_, err := psgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psgc *ParcelShopGLSCreate) ExecX(ctx context.Context) {
	if err := psgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psgc *ParcelShopGLSCreate) defaults() error {
	if _, ok := psgc.mutation.ID(); !ok {
		if parcelshopgls.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized parcelshopgls.DefaultID (forgotten import ent/runtime?)")
		}
		v := parcelshopgls.DefaultID()
		psgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (psgc *ParcelShopGLSCreate) check() error {
	if _, ok := psgc.mutation.GLSParcelShopID(); !ok {
		return &ValidationError{Name: "gls_parcel_shop_id", err: errors.New(`ent: missing required field "ParcelShopGLS.gls_parcel_shop_id"`)}
	}
	if len(psgc.mutation.ParcelShopIDs()) == 0 {
		return &ValidationError{Name: "parcel_shop", err: errors.New(`ent: missing required edge "ParcelShopGLS.parcel_shop"`)}
	}
	return nil
}

func (psgc *ParcelShopGLSCreate) sqlSave(ctx context.Context) (*ParcelShopGLS, error) {
	if err := psgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	psgc.mutation.id = &_node.ID
	psgc.mutation.done = true
	return _node, nil
}

func (psgc *ParcelShopGLSCreate) createSpec() (*ParcelShopGLS, *sqlgraph.CreateSpec) {
	var (
		_node = &ParcelShopGLS{config: psgc.config}
		_spec = sqlgraph.NewCreateSpec(parcelshopgls.Table, sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString))
	)
	_spec.OnConflict = psgc.conflict
	if id, ok := psgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := psgc.mutation.GLSParcelShopID(); ok {
		_spec.SetField(parcelshopgls.FieldGLSParcelShopID, field.TypeString, value)
		_node.GLSParcelShopID = value
	}
	if value, ok := psgc.mutation.PartnerID(); ok {
		_spec.SetField(parcelshopgls.FieldPartnerID, field.TypeString, value)
		_node.PartnerID = value
	}
	if value, ok := psgc.mutation.GetType(); ok {
		_spec.SetField(parcelshopgls.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := psgc.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopgls.ParcelShopTable,
			Columns: []string{parcelshopgls.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_parcel_shop_gls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShopGLS.Create().
//		SetGLSParcelShopID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopGLSUpsert) {
//			SetGLSParcelShopID(v+v).
//		}).
//		Exec(ctx)
func (psgc *ParcelShopGLSCreate) OnConflict(opts ...sql.ConflictOption) *ParcelShopGLSUpsertOne {
	psgc.conflict = opts
	return &ParcelShopGLSUpsertOne{
		create: psgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShopGLS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psgc *ParcelShopGLSCreate) OnConflictColumns(columns ...string) *ParcelShopGLSUpsertOne {
	psgc.conflict = append(psgc.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopGLSUpsertOne{
		create: psgc,
	}
}

type (
	// ParcelShopGLSUpsertOne is the builder for "upsert"-ing
	//  one ParcelShopGLS node.
	ParcelShopGLSUpsertOne struct {
		create *ParcelShopGLSCreate
	}

	// ParcelShopGLSUpsert is the "OnConflict" setter.
	ParcelShopGLSUpsert struct {
		*sql.UpdateSet
	}
)

// SetGLSParcelShopID sets the "gls_parcel_shop_id" field.
func (u *ParcelShopGLSUpsert) SetGLSParcelShopID(v string) *ParcelShopGLSUpsert {
	u.Set(parcelshopgls.FieldGLSParcelShopID, v)
	return u
}

// UpdateGLSParcelShopID sets the "gls_parcel_shop_id" field to the value that was provided on create.
func (u *ParcelShopGLSUpsert) UpdateGLSParcelShopID() *ParcelShopGLSUpsert {
	u.SetExcluded(parcelshopgls.FieldGLSParcelShopID)
	return u
}

// SetPartnerID sets the "partner_id" field.
func (u *ParcelShopGLSUpsert) SetPartnerID(v string) *ParcelShopGLSUpsert {
	u.Set(parcelshopgls.FieldPartnerID, v)
	return u
}

// UpdatePartnerID sets the "partner_id" field to the value that was provided on create.
func (u *ParcelShopGLSUpsert) UpdatePartnerID() *ParcelShopGLSUpsert {
	u.SetExcluded(parcelshopgls.FieldPartnerID)
	return u
}

// ClearPartnerID clears the value of the "partner_id" field.
func (u *ParcelShopGLSUpsert) ClearPartnerID() *ParcelShopGLSUpsert {
	u.SetNull(parcelshopgls.FieldPartnerID)
	return u
}

// SetType sets the "type" field.
func (u *ParcelShopGLSUpsert) SetType(v string) *ParcelShopGLSUpsert {
	u.Set(parcelshopgls.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ParcelShopGLSUpsert) UpdateType() *ParcelShopGLSUpsert {
	u.SetExcluded(parcelshopgls.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *ParcelShopGLSUpsert) ClearType() *ParcelShopGLSUpsert {
	u.SetNull(parcelshopgls.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ParcelShopGLS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshopgls.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopGLSUpsertOne) UpdateNewValues() *ParcelShopGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(parcelshopgls.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShopGLS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ParcelShopGLSUpsertOne) Ignore() *ParcelShopGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopGLSUpsertOne) DoNothing() *ParcelShopGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopGLSCreate.OnConflict
// documentation for more info.
func (u *ParcelShopGLSUpsertOne) Update(set func(*ParcelShopGLSUpsert)) *ParcelShopGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopGLSUpsert{UpdateSet: update})
	}))
	return u
}

// SetGLSParcelShopID sets the "gls_parcel_shop_id" field.
func (u *ParcelShopGLSUpsertOne) SetGLSParcelShopID(v string) *ParcelShopGLSUpsertOne {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.SetGLSParcelShopID(v)
	})
}

// UpdateGLSParcelShopID sets the "gls_parcel_shop_id" field to the value that was provided on create.
func (u *ParcelShopGLSUpsertOne) UpdateGLSParcelShopID() *ParcelShopGLSUpsertOne {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.UpdateGLSParcelShopID()
	})
}

// SetPartnerID sets the "partner_id" field.
func (u *ParcelShopGLSUpsertOne) SetPartnerID(v string) *ParcelShopGLSUpsertOne {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.SetPartnerID(v)
	})
}

// UpdatePartnerID sets the "partner_id" field to the value that was provided on create.
func (u *ParcelShopGLSUpsertOne) UpdatePartnerID() *ParcelShopGLSUpsertOne {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.UpdatePartnerID()
	})
}

// ClearPartnerID clears the value of the "partner_id" field.
func (u *ParcelShopGLSUpsertOne) ClearPartnerID() *ParcelShopGLSUpsertOne {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.ClearPartnerID()
	})
}

// SetType sets the "type" field.
func (u *ParcelShopGLSUpsertOne) SetType(v string) *ParcelShopGLSUpsertOne {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ParcelShopGLSUpsertOne) UpdateType() *ParcelShopGLSUpsertOne {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *ParcelShopGLSUpsertOne) ClearType() *ParcelShopGLSUpsertOne {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *ParcelShopGLSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopGLSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopGLSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ParcelShopGLSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ParcelShopGLSUpsertOne.ID is not supported by MySQL driver. Use ParcelShopGLSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ParcelShopGLSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ParcelShopGLSCreateBulk is the builder for creating many ParcelShopGLS entities in bulk.
type ParcelShopGLSCreateBulk struct {
	config
	err      error
	builders []*ParcelShopGLSCreate
	conflict []sql.ConflictOption
}

// Save creates the ParcelShopGLS entities in the database.
func (psgcb *ParcelShopGLSCreateBulk) Save(ctx context.Context) ([]*ParcelShopGLS, error) {
	if psgcb.err != nil {
		return nil, psgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(psgcb.builders))
	nodes := make([]*ParcelShopGLS, len(psgcb.builders))
	mutators := make([]Mutator, len(psgcb.builders))
	for i := range psgcb.builders {
		func(i int, root context.Context) {
			builder := psgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParcelShopGLSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, psgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = psgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, psgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, psgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (psgcb *ParcelShopGLSCreateBulk) SaveX(ctx context.Context) []*ParcelShopGLS {
	v, err := psgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psgcb *ParcelShopGLSCreateBulk) Exec(ctx context.Context) error {
	_, err := psgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psgcb *ParcelShopGLSCreateBulk) ExecX(ctx context.Context) {
	if err := psgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShopGLS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopGLSUpsert) {
//			SetGLSParcelShopID(v+v).
//		}).
//		Exec(ctx)
func (psgcb *ParcelShopGLSCreateBulk) OnConflict(opts ...sql.ConflictOption) *ParcelShopGLSUpsertBulk {
	psgcb.conflict = opts
	return &ParcelShopGLSUpsertBulk{
		create: psgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShopGLS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psgcb *ParcelShopGLSCreateBulk) OnConflictColumns(columns ...string) *ParcelShopGLSUpsertBulk {
	psgcb.conflict = append(psgcb.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopGLSUpsertBulk{
		create: psgcb,
	}
}

// ParcelShopGLSUpsertBulk is the builder for "upsert"-ing
// a bulk of ParcelShopGLS nodes.
type ParcelShopGLSUpsertBulk struct {
	create *ParcelShopGLSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ParcelShopGLS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshopgls.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopGLSUpsertBulk) UpdateNewValues() *ParcelShopGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(parcelshopgls.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShopGLS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ParcelShopGLSUpsertBulk) Ignore() *ParcelShopGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopGLSUpsertBulk) DoNothing() *ParcelShopGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopGLSCreateBulk.OnConflict
// documentation for more info.
func (u *ParcelShopGLSUpsertBulk) Update(set func(*ParcelShopGLSUpsert)) *ParcelShopGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopGLSUpsert{UpdateSet: update})
	}))
	return u
}

// SetGLSParcelShopID sets the "gls_parcel_shop_id" field.
func (u *ParcelShopGLSUpsertBulk) SetGLSParcelShopID(v string) *ParcelShopGLSUpsertBulk {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.SetGLSParcelShopID(v)
	})
}

// UpdateGLSParcelShopID sets the "gls_parcel_shop_id" field to the value that was provided on create.
func (u *ParcelShopGLSUpsertBulk) UpdateGLSParcelShopID() *ParcelShopGLSUpsertBulk {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.UpdateGLSParcelShopID()
	})
}

// SetPartnerID sets the "partner_id" field.
func (u *ParcelShopGLSUpsertBulk) SetPartnerID(v string) *ParcelShopGLSUpsertBulk {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.SetPartnerID(v)
	})
}

// UpdatePartnerID sets the "partner_id" field to the value that was provided on create.
func (u *ParcelShopGLSUpsertBulk) UpdatePartnerID() *ParcelShopGLSUpsertBulk {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.UpdatePartnerID()
	})
}

// ClearPartnerID clears the value of the "partner_id" field.
func (u *ParcelShopGLSUpsertBulk) ClearPartnerID() *ParcelShopGLSUpsertBulk {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.ClearPartnerID()
	})
}

// SetType sets the "type" field.
func (u *ParcelShopGLSUpsertBulk) SetType(v string) *ParcelShopGLSUpsertBulk {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ParcelShopGLSUpsertBulk) UpdateType() *ParcelShopGLSUpsertBulk {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *ParcelShopGLSUpsertBulk) ClearType() *ParcelShopGLSUpsertBulk {
	return u.Update(func(s *ParcelShopGLSUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *ParcelShopGLSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ParcelShopGLSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopGLSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopGLSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
