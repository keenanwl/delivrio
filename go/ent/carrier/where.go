// Code generated by ent, DO NOT EDIT.

package carrier

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldEQ(FieldName, v))
}

// SyncCancelation applies equality check predicate on the "sync_cancelation" field. It's identical to SyncCancelationEQ.
func SyncCancelation(v bool) predicate.Carrier {
	return predicate.Carrier(sql.FieldEQ(FieldSyncCancelation, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Carrier {
	return predicate.Carrier(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Carrier {
	vc := string(v)
	return predicate.Carrier(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Carrier {
	vc := string(v)
	return predicate.Carrier(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Carrier {
	vc := string(v)
	return predicate.Carrier(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Carrier {
	vc := string(v)
	return predicate.Carrier(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Carrier {
	vc := string(v)
	return predicate.Carrier(sql.FieldContainsFold(FieldTenantID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Carrier {
	return predicate.Carrier(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Carrier {
	return predicate.Carrier(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Carrier {
	return predicate.Carrier(sql.FieldContainsFold(FieldName, v))
}

// SyncCancelationEQ applies the EQ predicate on the "sync_cancelation" field.
func SyncCancelationEQ(v bool) predicate.Carrier {
	return predicate.Carrier(sql.FieldEQ(FieldSyncCancelation, v))
}

// SyncCancelationNEQ applies the NEQ predicate on the "sync_cancelation" field.
func SyncCancelationNEQ(v bool) predicate.Carrier {
	return predicate.Carrier(sql.FieldNEQ(FieldSyncCancelation, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierBrand applies the HasEdge predicate on the "carrier_brand" edge.
func HasCarrierBrand() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CarrierBrandTable, CarrierBrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierBrandWith applies the HasEdge predicate on the "carrier_brand" edge with a given conditions (other predicates).
func HasCarrierBrandWith(preds ...predicate.CarrierBrand) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierDAO applies the HasEdge predicate on the "carrier_dao" edge.
func HasCarrierDAO() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierDAOTable, CarrierDAOColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierDAOWith applies the HasEdge predicate on the "carrier_dao" edge with a given conditions (other predicates).
func HasCarrierDAOWith(preds ...predicate.CarrierDAO) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierDAOStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierDF applies the HasEdge predicate on the "carrier_df" edge.
func HasCarrierDF() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierDFTable, CarrierDFColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierDFWith applies the HasEdge predicate on the "carrier_df" edge with a given conditions (other predicates).
func HasCarrierDFWith(preds ...predicate.CarrierDF) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierDFStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierDSV applies the HasEdge predicate on the "carrier_dsv" edge.
func HasCarrierDSV() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierDSVTable, CarrierDSVColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierDSVWith applies the HasEdge predicate on the "carrier_dsv" edge with a given conditions (other predicates).
func HasCarrierDSVWith(preds ...predicate.CarrierDSV) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierDSVStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierEasyPost applies the HasEdge predicate on the "carrier_easy_post" edge.
func HasCarrierEasyPost() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierEasyPostTable, CarrierEasyPostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierEasyPostWith applies the HasEdge predicate on the "carrier_easy_post" edge with a given conditions (other predicates).
func HasCarrierEasyPostWith(preds ...predicate.CarrierEasyPost) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierEasyPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierGLS applies the HasEdge predicate on the "carrier_gls" edge.
func HasCarrierGLS() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierGLSTable, CarrierGLSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierGLSWith applies the HasEdge predicate on the "carrier_gls" edge with a given conditions (other predicates).
func HasCarrierGLSWith(preds ...predicate.CarrierGLS) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierGLSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierPostNord applies the HasEdge predicate on the "carrier_post_nord" edge.
func HasCarrierPostNord() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierPostNordTable, CarrierPostNordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierPostNordWith applies the HasEdge predicate on the "carrier_post_nord" edge with a given conditions (other predicates).
func HasCarrierPostNordWith(preds ...predicate.CarrierPostNord) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierPostNordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierUSPS applies the HasEdge predicate on the "carrier_usps" edge.
func HasCarrierUSPS() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierUSPSTable, CarrierUSPSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierUSPSWith applies the HasEdge predicate on the "carrier_usps" edge with a given conditions (other predicates).
func HasCarrierUSPSWith(preds ...predicate.CarrierUSPS) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierUSPSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierBring applies the HasEdge predicate on the "carrier_bring" edge.
func HasCarrierBring() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierBringTable, CarrierBringColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierBringWith applies the HasEdge predicate on the "carrier_bring" edge with a given conditions (other predicates).
func HasCarrierBringWith(preds ...predicate.CarrierBring) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newCarrierBringStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOption applies the HasEdge predicate on the "delivery_option" edge.
func HasDeliveryOption() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeliveryOptionTable, DeliveryOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionWith applies the HasEdge predicate on the "delivery_option" edge with a given conditions (other predicates).
func HasDeliveryOptionWith(preds ...predicate.DeliveryOption) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newDeliveryOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipment applies the HasEdge predicate on the "shipment" edge.
func HasShipment() predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ShipmentTable, ShipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentWith applies the HasEdge predicate on the "shipment" edge with a given conditions (other predicates).
func HasShipmentWith(preds ...predicate.Shipment) predicate.Carrier {
	return predicate.Carrier(func(s *sql.Selector) {
		step := newShipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Carrier) predicate.Carrier {
	return predicate.Carrier(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Carrier) predicate.Carrier {
	return predicate.Carrier(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Carrier) predicate.Carrier {
	return predicate.Carrier(sql.NotPredicates(p))
}
