// Code generated by ent, DO NOT EDIT.

package carrier

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrier type in the database.
	Label = "carrier"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSyncCancelation holds the string denoting the sync_cancelation field in the database.
	FieldSyncCancelation = "sync_cancelation"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCarrierBrand holds the string denoting the carrier_brand edge name in mutations.
	EdgeCarrierBrand = "carrier_brand"
	// EdgeCarrierDAO holds the string denoting the carrier_dao edge name in mutations.
	EdgeCarrierDAO = "carrier_dao"
	// EdgeCarrierDF holds the string denoting the carrier_df edge name in mutations.
	EdgeCarrierDF = "carrier_df"
	// EdgeCarrierDSV holds the string denoting the carrier_dsv edge name in mutations.
	EdgeCarrierDSV = "carrier_dsv"
	// EdgeCarrierEasyPost holds the string denoting the carrier_easy_post edge name in mutations.
	EdgeCarrierEasyPost = "carrier_easy_post"
	// EdgeCarrierGLS holds the string denoting the carrier_gls edge name in mutations.
	EdgeCarrierGLS = "carrier_gls"
	// EdgeCarrierPostNord holds the string denoting the carrier_post_nord edge name in mutations.
	EdgeCarrierPostNord = "carrier_post_nord"
	// EdgeCarrierUSPS holds the string denoting the carrier_usps edge name in mutations.
	EdgeCarrierUSPS = "carrier_usps"
	// EdgeCarrierBring holds the string denoting the carrier_bring edge name in mutations.
	EdgeCarrierBring = "carrier_bring"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// EdgeShipment holds the string denoting the shipment edge name in mutations.
	EdgeShipment = "shipment"
	// Table holds the table name of the carrier in the database.
	Table = "carriers"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "carriers"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CarrierBrandTable is the table that holds the carrier_brand relation/edge.
	CarrierBrandTable = "carriers"
	// CarrierBrandInverseTable is the table name for the CarrierBrand entity.
	// It exists in this package in order to avoid circular dependency with the "carrierbrand" package.
	CarrierBrandInverseTable = "carrier_brands"
	// CarrierBrandColumn is the table column denoting the carrier_brand relation/edge.
	CarrierBrandColumn = "carrier_carrier_brand"
	// CarrierDAOTable is the table that holds the carrier_dao relation/edge.
	CarrierDAOTable = "carrier_da_os"
	// CarrierDAOInverseTable is the table name for the CarrierDAO entity.
	// It exists in this package in order to avoid circular dependency with the "carrierdao" package.
	CarrierDAOInverseTable = "carrier_da_os"
	// CarrierDAOColumn is the table column denoting the carrier_dao relation/edge.
	CarrierDAOColumn = "carrier_carrier_dao"
	// CarrierDFTable is the table that holds the carrier_df relation/edge.
	CarrierDFTable = "carrier_dfs"
	// CarrierDFInverseTable is the table name for the CarrierDF entity.
	// It exists in this package in order to avoid circular dependency with the "carrierdf" package.
	CarrierDFInverseTable = "carrier_dfs"
	// CarrierDFColumn is the table column denoting the carrier_df relation/edge.
	CarrierDFColumn = "carrier_carrier_df"
	// CarrierDSVTable is the table that holds the carrier_dsv relation/edge.
	CarrierDSVTable = "carrier_ds_vs"
	// CarrierDSVInverseTable is the table name for the CarrierDSV entity.
	// It exists in this package in order to avoid circular dependency with the "carrierdsv" package.
	CarrierDSVInverseTable = "carrier_ds_vs"
	// CarrierDSVColumn is the table column denoting the carrier_dsv relation/edge.
	CarrierDSVColumn = "carrier_carrier_dsv"
	// CarrierEasyPostTable is the table that holds the carrier_easy_post relation/edge.
	CarrierEasyPostTable = "carrier_easy_posts"
	// CarrierEasyPostInverseTable is the table name for the CarrierEasyPost entity.
	// It exists in this package in order to avoid circular dependency with the "carriereasypost" package.
	CarrierEasyPostInverseTable = "carrier_easy_posts"
	// CarrierEasyPostColumn is the table column denoting the carrier_easy_post relation/edge.
	CarrierEasyPostColumn = "carrier_carrier_easy_post"
	// CarrierGLSTable is the table that holds the carrier_gls relation/edge.
	CarrierGLSTable = "carrier_gl_ss"
	// CarrierGLSInverseTable is the table name for the CarrierGLS entity.
	// It exists in this package in order to avoid circular dependency with the "carriergls" package.
	CarrierGLSInverseTable = "carrier_gl_ss"
	// CarrierGLSColumn is the table column denoting the carrier_gls relation/edge.
	CarrierGLSColumn = "carrier_carrier_gls"
	// CarrierPostNordTable is the table that holds the carrier_post_nord relation/edge.
	CarrierPostNordTable = "carrier_post_nords"
	// CarrierPostNordInverseTable is the table name for the CarrierPostNord entity.
	// It exists in this package in order to avoid circular dependency with the "carrierpostnord" package.
	CarrierPostNordInverseTable = "carrier_post_nords"
	// CarrierPostNordColumn is the table column denoting the carrier_post_nord relation/edge.
	CarrierPostNordColumn = "carrier_carrier_post_nord"
	// CarrierUSPSTable is the table that holds the carrier_usps relation/edge.
	CarrierUSPSTable = "carrier_usp_ss"
	// CarrierUSPSInverseTable is the table name for the CarrierUSPS entity.
	// It exists in this package in order to avoid circular dependency with the "carrierusps" package.
	CarrierUSPSInverseTable = "carrier_usp_ss"
	// CarrierUSPSColumn is the table column denoting the carrier_usps relation/edge.
	CarrierUSPSColumn = "carrier_carrier_usps"
	// CarrierBringTable is the table that holds the carrier_bring relation/edge.
	CarrierBringTable = "carrier_brings"
	// CarrierBringInverseTable is the table name for the CarrierBring entity.
	// It exists in this package in order to avoid circular dependency with the "carrierbring" package.
	CarrierBringInverseTable = "carrier_brings"
	// CarrierBringColumn is the table column denoting the carrier_bring relation/edge.
	CarrierBringColumn = "carrier_carrier_bring"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge.
	DeliveryOptionTable = "delivery_options"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// DeliveryOptionColumn is the table column denoting the delivery_option relation/edge.
	DeliveryOptionColumn = "delivery_option_carrier"
	// ShipmentTable is the table that holds the shipment relation/edge.
	ShipmentTable = "shipments"
	// ShipmentInverseTable is the table name for the Shipment entity.
	// It exists in this package in order to avoid circular dependency with the "shipment" package.
	ShipmentInverseTable = "shipments"
	// ShipmentColumn is the table column denoting the shipment relation/edge.
	ShipmentColumn = "shipment_carrier"
)

// Columns holds all SQL columns for carrier fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldSyncCancelation,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carriers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_carrier_brand",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultSyncCancelation holds the default value on creation for the "sync_cancelation" field.
	DefaultSyncCancelation bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Carrier queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySyncCancelation orders the results by the sync_cancelation field.
func BySyncCancelation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSyncCancelation, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierBrandField orders the results by carrier_brand field.
func ByCarrierBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierDAOField orders the results by carrier_dao field.
func ByCarrierDAOField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierDAOStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierDFField orders the results by carrier_df field.
func ByCarrierDFField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierDFStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierDSVField orders the results by carrier_dsv field.
func ByCarrierDSVField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierDSVStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierEasyPostField orders the results by carrier_easy_post field.
func ByCarrierEasyPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierEasyPostStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierGLSField orders the results by carrier_gls field.
func ByCarrierGLSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierGLSStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierPostNordField orders the results by carrier_post_nord field.
func ByCarrierPostNordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierPostNordStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierUSPSField orders the results by carrier_usps field.
func ByCarrierUSPSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierUSPSStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierBringField orders the results by carrier_bring field.
func ByCarrierBringField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierBringStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionCount orders the results by delivery_option count.
func ByDeliveryOptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionStep(), opts...)
	}
}

// ByDeliveryOption orders the results by delivery_option terms.
func ByDeliveryOption(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentCount orders the results by shipment count.
func ByShipmentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentStep(), opts...)
	}
}

// ByShipment orders the results by shipment terms.
func ByShipment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newCarrierBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierBrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CarrierBrandTable, CarrierBrandColumn),
	)
}
func newCarrierDAOStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierDAOInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierDAOTable, CarrierDAOColumn),
	)
}
func newCarrierDFStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierDFInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierDFTable, CarrierDFColumn),
	)
}
func newCarrierDSVStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierDSVInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierDSVTable, CarrierDSVColumn),
	)
}
func newCarrierEasyPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierEasyPostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierEasyPostTable, CarrierEasyPostColumn),
	)
}
func newCarrierGLSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierGLSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierGLSTable, CarrierGLSColumn),
	)
}
func newCarrierPostNordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierPostNordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierPostNordTable, CarrierPostNordColumn),
	)
}
func newCarrierUSPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierUSPSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierUSPSTable, CarrierUSPSColumn),
	)
}
func newCarrierBringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierBringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierBringTable, CarrierBringColumn),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeliveryOptionTable, DeliveryOptionColumn),
	)
}
func newShipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ShipmentTable, ShipmentColumn),
	)
}
