// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionDSVQuery is the builder for querying DeliveryOptionDSV entities.
type DeliveryOptionDSVQuery struct {
	config
	ctx                                  *QueryContext
	order                                []deliveryoptiondsv.OrderOption
	inters                               []Interceptor
	predicates                           []predicate.DeliveryOptionDSV
	withTenant                           *TenantQuery
	withDeliveryOption                   *DeliveryOptionQuery
	withCarrierAdditionalServiceDSV      *CarrierAdditionalServiceDSVQuery
	withFKs                              bool
	modifiers                            []func(*sql.Selector)
	loadTotal                            []func(context.Context, []*DeliveryOptionDSV) error
	withNamedCarrierAdditionalServiceDSV map[string]*CarrierAdditionalServiceDSVQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeliveryOptionDSVQuery builder.
func (dodq *DeliveryOptionDSVQuery) Where(ps ...predicate.DeliveryOptionDSV) *DeliveryOptionDSVQuery {
	dodq.predicates = append(dodq.predicates, ps...)
	return dodq
}

// Limit the number of records to be returned by this query.
func (dodq *DeliveryOptionDSVQuery) Limit(limit int) *DeliveryOptionDSVQuery {
	dodq.ctx.Limit = &limit
	return dodq
}

// Offset to start from.
func (dodq *DeliveryOptionDSVQuery) Offset(offset int) *DeliveryOptionDSVQuery {
	dodq.ctx.Offset = &offset
	return dodq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dodq *DeliveryOptionDSVQuery) Unique(unique bool) *DeliveryOptionDSVQuery {
	dodq.ctx.Unique = &unique
	return dodq
}

// Order specifies how the records should be ordered.
func (dodq *DeliveryOptionDSVQuery) Order(o ...deliveryoptiondsv.OrderOption) *DeliveryOptionDSVQuery {
	dodq.order = append(dodq.order, o...)
	return dodq
}

// QueryTenant chains the current query on the "tenant" edge.
func (dodq *DeliveryOptionDSVQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: dodq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dodq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dodq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondsv.Table, deliveryoptiondsv.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptiondsv.TenantTable, deliveryoptiondsv.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(dodq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (dodq *DeliveryOptionDSVQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: dodq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dodq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dodq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondsv.Table, deliveryoptiondsv.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptiondsv.DeliveryOptionTable, deliveryoptiondsv.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(dodq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServiceDSV chains the current query on the "carrier_additional_service_dsv" edge.
func (dodq *DeliveryOptionDSVQuery) QueryCarrierAdditionalServiceDSV() *CarrierAdditionalServiceDSVQuery {
	query := (&CarrierAdditionalServiceDSVClient{config: dodq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dodq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dodq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondsv.Table, deliveryoptiondsv.FieldID, selector),
			sqlgraph.To(carrieradditionalservicedsv.Table, carrieradditionalservicedsv.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptiondsv.CarrierAdditionalServiceDSVTable, deliveryoptiondsv.CarrierAdditionalServiceDSVPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dodq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeliveryOptionDSV entity from the query.
// Returns a *NotFoundError when no DeliveryOptionDSV was found.
func (dodq *DeliveryOptionDSVQuery) First(ctx context.Context) (*DeliveryOptionDSV, error) {
	nodes, err := dodq.Limit(1).All(setContextOp(ctx, dodq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deliveryoptiondsv.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dodq *DeliveryOptionDSVQuery) FirstX(ctx context.Context) *DeliveryOptionDSV {
	node, err := dodq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeliveryOptionDSV ID from the query.
// Returns a *NotFoundError when no DeliveryOptionDSV ID was found.
func (dodq *DeliveryOptionDSVQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = dodq.Limit(1).IDs(setContextOp(ctx, dodq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deliveryoptiondsv.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dodq *DeliveryOptionDSVQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := dodq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeliveryOptionDSV entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeliveryOptionDSV entity is found.
// Returns a *NotFoundError when no DeliveryOptionDSV entities are found.
func (dodq *DeliveryOptionDSVQuery) Only(ctx context.Context) (*DeliveryOptionDSV, error) {
	nodes, err := dodq.Limit(2).All(setContextOp(ctx, dodq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deliveryoptiondsv.Label}
	default:
		return nil, &NotSingularError{deliveryoptiondsv.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dodq *DeliveryOptionDSVQuery) OnlyX(ctx context.Context) *DeliveryOptionDSV {
	node, err := dodq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeliveryOptionDSV ID in the query.
// Returns a *NotSingularError when more than one DeliveryOptionDSV ID is found.
// Returns a *NotFoundError when no entities are found.
func (dodq *DeliveryOptionDSVQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = dodq.Limit(2).IDs(setContextOp(ctx, dodq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deliveryoptiondsv.Label}
	default:
		err = &NotSingularError{deliveryoptiondsv.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dodq *DeliveryOptionDSVQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := dodq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeliveryOptionDSVs.
func (dodq *DeliveryOptionDSVQuery) All(ctx context.Context) ([]*DeliveryOptionDSV, error) {
	ctx = setContextOp(ctx, dodq.ctx, ent.OpQueryAll)
	if err := dodq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeliveryOptionDSV, *DeliveryOptionDSVQuery]()
	return withInterceptors[[]*DeliveryOptionDSV](ctx, dodq, qr, dodq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dodq *DeliveryOptionDSVQuery) AllX(ctx context.Context) []*DeliveryOptionDSV {
	nodes, err := dodq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeliveryOptionDSV IDs.
func (dodq *DeliveryOptionDSVQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if dodq.ctx.Unique == nil && dodq.path != nil {
		dodq.Unique(true)
	}
	ctx = setContextOp(ctx, dodq.ctx, ent.OpQueryIDs)
	if err = dodq.Select(deliveryoptiondsv.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dodq *DeliveryOptionDSVQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := dodq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dodq *DeliveryOptionDSVQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dodq.ctx, ent.OpQueryCount)
	if err := dodq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dodq, querierCount[*DeliveryOptionDSVQuery](), dodq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dodq *DeliveryOptionDSVQuery) CountX(ctx context.Context) int {
	count, err := dodq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dodq *DeliveryOptionDSVQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dodq.ctx, ent.OpQueryExist)
	switch _, err := dodq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dodq *DeliveryOptionDSVQuery) ExistX(ctx context.Context) bool {
	exist, err := dodq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeliveryOptionDSVQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dodq *DeliveryOptionDSVQuery) Clone() *DeliveryOptionDSVQuery {
	if dodq == nil {
		return nil
	}
	return &DeliveryOptionDSVQuery{
		config:                          dodq.config,
		ctx:                             dodq.ctx.Clone(),
		order:                           append([]deliveryoptiondsv.OrderOption{}, dodq.order...),
		inters:                          append([]Interceptor{}, dodq.inters...),
		predicates:                      append([]predicate.DeliveryOptionDSV{}, dodq.predicates...),
		withTenant:                      dodq.withTenant.Clone(),
		withDeliveryOption:              dodq.withDeliveryOption.Clone(),
		withCarrierAdditionalServiceDSV: dodq.withCarrierAdditionalServiceDSV.Clone(),
		// clone intermediate query.
		sql:  dodq.sql.Clone(),
		path: dodq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (dodq *DeliveryOptionDSVQuery) WithTenant(opts ...func(*TenantQuery)) *DeliveryOptionDSVQuery {
	query := (&TenantClient{config: dodq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dodq.withTenant = query
	return dodq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (dodq *DeliveryOptionDSVQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *DeliveryOptionDSVQuery {
	query := (&DeliveryOptionClient{config: dodq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dodq.withDeliveryOption = query
	return dodq
}

// WithCarrierAdditionalServiceDSV tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_dsv" edge. The optional arguments are used to configure the query builder of the edge.
func (dodq *DeliveryOptionDSVQuery) WithCarrierAdditionalServiceDSV(opts ...func(*CarrierAdditionalServiceDSVQuery)) *DeliveryOptionDSVQuery {
	query := (&CarrierAdditionalServiceDSVClient{config: dodq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dodq.withCarrierAdditionalServiceDSV = query
	return dodq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeliveryOptionDSV.Query().
//		GroupBy(deliveryoptiondsv.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dodq *DeliveryOptionDSVQuery) GroupBy(field string, fields ...string) *DeliveryOptionDSVGroupBy {
	dodq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeliveryOptionDSVGroupBy{build: dodq}
	grbuild.flds = &dodq.ctx.Fields
	grbuild.label = deliveryoptiondsv.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.DeliveryOptionDSV.Query().
//		Select(deliveryoptiondsv.FieldTenantID).
//		Scan(ctx, &v)
func (dodq *DeliveryOptionDSVQuery) Select(fields ...string) *DeliveryOptionDSVSelect {
	dodq.ctx.Fields = append(dodq.ctx.Fields, fields...)
	sbuild := &DeliveryOptionDSVSelect{DeliveryOptionDSVQuery: dodq}
	sbuild.label = deliveryoptiondsv.Label
	sbuild.flds, sbuild.scan = &dodq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeliveryOptionDSVSelect configured with the given aggregations.
func (dodq *DeliveryOptionDSVQuery) Aggregate(fns ...AggregateFunc) *DeliveryOptionDSVSelect {
	return dodq.Select().Aggregate(fns...)
}

func (dodq *DeliveryOptionDSVQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dodq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dodq); err != nil {
				return err
			}
		}
	}
	for _, f := range dodq.ctx.Fields {
		if !deliveryoptiondsv.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dodq.path != nil {
		prev, err := dodq.path(ctx)
		if err != nil {
			return err
		}
		dodq.sql = prev
	}
	if deliveryoptiondsv.Policy == nil {
		return errors.New("ent: uninitialized deliveryoptiondsv.Policy (forgotten import ent/runtime?)")
	}
	if err := deliveryoptiondsv.Policy.EvalQuery(ctx, dodq); err != nil {
		return err
	}
	return nil
}

func (dodq *DeliveryOptionDSVQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeliveryOptionDSV, error) {
	var (
		nodes       = []*DeliveryOptionDSV{}
		withFKs     = dodq.withFKs
		_spec       = dodq.querySpec()
		loadedTypes = [3]bool{
			dodq.withTenant != nil,
			dodq.withDeliveryOption != nil,
			dodq.withCarrierAdditionalServiceDSV != nil,
		}
	)
	if dodq.withDeliveryOption != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptiondsv.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeliveryOptionDSV).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeliveryOptionDSV{config: dodq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dodq.modifiers) > 0 {
		_spec.Modifiers = dodq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dodq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dodq.withTenant; query != nil {
		if err := dodq.loadTenant(ctx, query, nodes, nil,
			func(n *DeliveryOptionDSV, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := dodq.withDeliveryOption; query != nil {
		if err := dodq.loadDeliveryOption(ctx, query, nodes, nil,
			func(n *DeliveryOptionDSV, e *DeliveryOption) { n.Edges.DeliveryOption = e }); err != nil {
			return nil, err
		}
	}
	if query := dodq.withCarrierAdditionalServiceDSV; query != nil {
		if err := dodq.loadCarrierAdditionalServiceDSV(ctx, query, nodes,
			func(n *DeliveryOptionDSV) { n.Edges.CarrierAdditionalServiceDSV = []*CarrierAdditionalServiceDSV{} },
			func(n *DeliveryOptionDSV, e *CarrierAdditionalServiceDSV) {
				n.Edges.CarrierAdditionalServiceDSV = append(n.Edges.CarrierAdditionalServiceDSV, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range dodq.withNamedCarrierAdditionalServiceDSV {
		if err := dodq.loadCarrierAdditionalServiceDSV(ctx, query, nodes,
			func(n *DeliveryOptionDSV) { n.appendNamedCarrierAdditionalServiceDSV(name) },
			func(n *DeliveryOptionDSV, e *CarrierAdditionalServiceDSV) {
				n.appendNamedCarrierAdditionalServiceDSV(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range dodq.loadTotal {
		if err := dodq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dodq *DeliveryOptionDSVQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*DeliveryOptionDSV, init func(*DeliveryOptionDSV), assign func(*DeliveryOptionDSV, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryOptionDSV)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dodq *DeliveryOptionDSVQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*DeliveryOptionDSV, init func(*DeliveryOptionDSV), assign func(*DeliveryOptionDSV, *DeliveryOption)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryOptionDSV)
	for i := range nodes {
		if nodes[i].delivery_option_delivery_option_dsv == nil {
			continue
		}
		fk := *nodes[i].delivery_option_delivery_option_dsv
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delivery_option_delivery_option_dsv" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dodq *DeliveryOptionDSVQuery) loadCarrierAdditionalServiceDSV(ctx context.Context, query *CarrierAdditionalServiceDSVQuery, nodes []*DeliveryOptionDSV, init func(*DeliveryOptionDSV), assign func(*DeliveryOptionDSV, *CarrierAdditionalServiceDSV)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*DeliveryOptionDSV)
	nids := make(map[pulid.ID]map[*DeliveryOptionDSV]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deliveryoptiondsv.CarrierAdditionalServiceDSVTable)
		s.Join(joinT).On(s.C(carrieradditionalservicedsv.FieldID), joinT.C(deliveryoptiondsv.CarrierAdditionalServiceDSVPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(deliveryoptiondsv.CarrierAdditionalServiceDSVPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deliveryoptiondsv.CarrierAdditionalServiceDSVPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeliveryOptionDSV]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierAdditionalServiceDSV](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_additional_service_dsv" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (dodq *DeliveryOptionDSVQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dodq.querySpec()
	if len(dodq.modifiers) > 0 {
		_spec.Modifiers = dodq.modifiers
	}
	_spec.Node.Columns = dodq.ctx.Fields
	if len(dodq.ctx.Fields) > 0 {
		_spec.Unique = dodq.ctx.Unique != nil && *dodq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dodq.driver, _spec)
}

func (dodq *DeliveryOptionDSVQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deliveryoptiondsv.Table, deliveryoptiondsv.Columns, sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString))
	_spec.From = dodq.sql
	if unique := dodq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dodq.path != nil {
		_spec.Unique = true
	}
	if fields := dodq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptiondsv.FieldID)
		for i := range fields {
			if fields[i] != deliveryoptiondsv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if dodq.withTenant != nil {
			_spec.Node.AddColumnOnce(deliveryoptiondsv.FieldTenantID)
		}
	}
	if ps := dodq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dodq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dodq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dodq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dodq *DeliveryOptionDSVQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dodq.driver.Dialect())
	t1 := builder.Table(deliveryoptiondsv.Table)
	columns := dodq.ctx.Fields
	if len(columns) == 0 {
		columns = deliveryoptiondsv.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dodq.sql != nil {
		selector = dodq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dodq.ctx.Unique != nil && *dodq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dodq.predicates {
		p(selector)
	}
	for _, p := range dodq.order {
		p(selector)
	}
	if offset := dodq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dodq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierAdditionalServiceDSV tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_dsv"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (dodq *DeliveryOptionDSVQuery) WithNamedCarrierAdditionalServiceDSV(name string, opts ...func(*CarrierAdditionalServiceDSVQuery)) *DeliveryOptionDSVQuery {
	query := (&CarrierAdditionalServiceDSVClient{config: dodq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if dodq.withNamedCarrierAdditionalServiceDSV == nil {
		dodq.withNamedCarrierAdditionalServiceDSV = make(map[string]*CarrierAdditionalServiceDSVQuery)
	}
	dodq.withNamedCarrierAdditionalServiceDSV[name] = query
	return dodq
}

// DeliveryOptionDSVGroupBy is the group-by builder for DeliveryOptionDSV entities.
type DeliveryOptionDSVGroupBy struct {
	selector
	build *DeliveryOptionDSVQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dodgb *DeliveryOptionDSVGroupBy) Aggregate(fns ...AggregateFunc) *DeliveryOptionDSVGroupBy {
	dodgb.fns = append(dodgb.fns, fns...)
	return dodgb
}

// Scan applies the selector query and scans the result into the given value.
func (dodgb *DeliveryOptionDSVGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dodgb.build.ctx, ent.OpQueryGroupBy)
	if err := dodgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryOptionDSVQuery, *DeliveryOptionDSVGroupBy](ctx, dodgb.build, dodgb, dodgb.build.inters, v)
}

func (dodgb *DeliveryOptionDSVGroupBy) sqlScan(ctx context.Context, root *DeliveryOptionDSVQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dodgb.fns))
	for _, fn := range dodgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dodgb.flds)+len(dodgb.fns))
		for _, f := range *dodgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dodgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dodgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeliveryOptionDSVSelect is the builder for selecting fields of DeliveryOptionDSV entities.
type DeliveryOptionDSVSelect struct {
	*DeliveryOptionDSVQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dods *DeliveryOptionDSVSelect) Aggregate(fns ...AggregateFunc) *DeliveryOptionDSVSelect {
	dods.fns = append(dods.fns, fns...)
	return dods
}

// Scan applies the selector query and scans the result into the given value.
func (dods *DeliveryOptionDSVSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dods.ctx, ent.OpQuerySelect)
	if err := dods.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryOptionDSVQuery, *DeliveryOptionDSVSelect](ctx, dods.DeliveryOptionDSVQuery, dods, dods.inters, v)
}

func (dods *DeliveryOptionDSVSelect) sqlScan(ctx context.Context, root *DeliveryOptionDSVQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dods.fns))
	for _, fn := range dods.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dods.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dods.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
