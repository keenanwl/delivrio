// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceRecentScanCreate is the builder for creating a WorkspaceRecentScan entity.
type WorkspaceRecentScanCreate struct {
	config
	mutation *WorkspaceRecentScanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (wrsc *WorkspaceRecentScanCreate) SetTenantID(pu pulid.ID) *WorkspaceRecentScanCreate {
	wrsc.mutation.SetTenantID(pu)
	return wrsc
}

// SetCreatedAt sets the "created_at" field.
func (wrsc *WorkspaceRecentScanCreate) SetCreatedAt(t time.Time) *WorkspaceRecentScanCreate {
	wrsc.mutation.SetCreatedAt(t)
	return wrsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wrsc *WorkspaceRecentScanCreate) SetNillableCreatedAt(t *time.Time) *WorkspaceRecentScanCreate {
	if t != nil {
		wrsc.SetCreatedAt(*t)
	}
	return wrsc
}

// SetID sets the "id" field.
func (wrsc *WorkspaceRecentScanCreate) SetID(pu pulid.ID) *WorkspaceRecentScanCreate {
	wrsc.mutation.SetID(pu)
	return wrsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wrsc *WorkspaceRecentScanCreate) SetNillableID(pu *pulid.ID) *WorkspaceRecentScanCreate {
	if pu != nil {
		wrsc.SetID(*pu)
	}
	return wrsc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (wrsc *WorkspaceRecentScanCreate) SetTenant(t *Tenant) *WorkspaceRecentScanCreate {
	return wrsc.SetTenantID(t.ID)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (wrsc *WorkspaceRecentScanCreate) SetShipmentParcelID(id pulid.ID) *WorkspaceRecentScanCreate {
	wrsc.mutation.SetShipmentParcelID(id)
	return wrsc
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (wrsc *WorkspaceRecentScanCreate) SetNillableShipmentParcelID(id *pulid.ID) *WorkspaceRecentScanCreate {
	if id != nil {
		wrsc = wrsc.SetShipmentParcelID(*id)
	}
	return wrsc
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (wrsc *WorkspaceRecentScanCreate) SetShipmentParcel(s *ShipmentParcel) *WorkspaceRecentScanCreate {
	return wrsc.SetShipmentParcelID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wrsc *WorkspaceRecentScanCreate) SetUserID(id pulid.ID) *WorkspaceRecentScanCreate {
	wrsc.mutation.SetUserID(id)
	return wrsc
}

// SetUser sets the "user" edge to the User entity.
func (wrsc *WorkspaceRecentScanCreate) SetUser(u *User) *WorkspaceRecentScanCreate {
	return wrsc.SetUserID(u.ID)
}

// Mutation returns the WorkspaceRecentScanMutation object of the builder.
func (wrsc *WorkspaceRecentScanCreate) Mutation() *WorkspaceRecentScanMutation {
	return wrsc.mutation
}

// Save creates the WorkspaceRecentScan in the database.
func (wrsc *WorkspaceRecentScanCreate) Save(ctx context.Context) (*WorkspaceRecentScan, error) {
	if err := wrsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wrsc.sqlSave, wrsc.mutation, wrsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wrsc *WorkspaceRecentScanCreate) SaveX(ctx context.Context) *WorkspaceRecentScan {
	v, err := wrsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrsc *WorkspaceRecentScanCreate) Exec(ctx context.Context) error {
	_, err := wrsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrsc *WorkspaceRecentScanCreate) ExecX(ctx context.Context) {
	if err := wrsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wrsc *WorkspaceRecentScanCreate) defaults() error {
	if _, ok := wrsc.mutation.CreatedAt(); !ok {
		if workspacerecentscan.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized workspacerecentscan.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := workspacerecentscan.DefaultCreatedAt()
		wrsc.mutation.SetCreatedAt(v)
	}
	if _, ok := wrsc.mutation.ID(); !ok {
		if workspacerecentscan.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized workspacerecentscan.DefaultID (forgotten import ent/runtime?)")
		}
		v := workspacerecentscan.DefaultID()
		wrsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wrsc *WorkspaceRecentScanCreate) check() error {
	if _, ok := wrsc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "WorkspaceRecentScan.tenant_id"`)}
	}
	if _, ok := wrsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkspaceRecentScan.created_at"`)}
	}
	if len(wrsc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "WorkspaceRecentScan.tenant"`)}
	}
	if len(wrsc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "WorkspaceRecentScan.user"`)}
	}
	return nil
}

func (wrsc *WorkspaceRecentScanCreate) sqlSave(ctx context.Context) (*WorkspaceRecentScan, error) {
	if err := wrsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wrsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wrsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wrsc.mutation.id = &_node.ID
	wrsc.mutation.done = true
	return _node, nil
}

func (wrsc *WorkspaceRecentScanCreate) createSpec() (*WorkspaceRecentScan, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkspaceRecentScan{config: wrsc.config}
		_spec = sqlgraph.NewCreateSpec(workspacerecentscan.Table, sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString))
	)
	_spec.OnConflict = wrsc.conflict
	if id, ok := wrsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wrsc.mutation.CreatedAt(); ok {
		_spec.SetField(workspacerecentscan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := wrsc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.TenantTable,
			Columns: []string{workspacerecentscan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrsc.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.ShipmentParcelTable,
			Columns: []string{workspacerecentscan.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workspace_recent_scan_shipment_parcel = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.UserTable,
			Columns: []string{workspacerecentscan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workspace_recent_scan_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceRecentScan.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceRecentScanUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (wrsc *WorkspaceRecentScanCreate) OnConflict(opts ...sql.ConflictOption) *WorkspaceRecentScanUpsertOne {
	wrsc.conflict = opts
	return &WorkspaceRecentScanUpsertOne{
		create: wrsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceRecentScan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wrsc *WorkspaceRecentScanCreate) OnConflictColumns(columns ...string) *WorkspaceRecentScanUpsertOne {
	wrsc.conflict = append(wrsc.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceRecentScanUpsertOne{
		create: wrsc,
	}
}

type (
	// WorkspaceRecentScanUpsertOne is the builder for "upsert"-ing
	//  one WorkspaceRecentScan node.
	WorkspaceRecentScanUpsertOne struct {
		create *WorkspaceRecentScanCreate
	}

	// WorkspaceRecentScanUpsert is the "OnConflict" setter.
	WorkspaceRecentScanUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *WorkspaceRecentScanUpsert) SetTenantID(v pulid.ID) *WorkspaceRecentScanUpsert {
	u.Set(workspacerecentscan.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WorkspaceRecentScanUpsert) UpdateTenantID() *WorkspaceRecentScanUpsert {
	u.SetExcluded(workspacerecentscan.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkspaceRecentScan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspacerecentscan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkspaceRecentScanUpsertOne) UpdateNewValues() *WorkspaceRecentScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workspacerecentscan.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(workspacerecentscan.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkspaceRecentScan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkspaceRecentScanUpsertOne) Ignore() *WorkspaceRecentScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceRecentScanUpsertOne) DoNothing() *WorkspaceRecentScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceRecentScanCreate.OnConflict
// documentation for more info.
func (u *WorkspaceRecentScanUpsertOne) Update(set func(*WorkspaceRecentScanUpsert)) *WorkspaceRecentScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceRecentScanUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *WorkspaceRecentScanUpsertOne) SetTenantID(v pulid.ID) *WorkspaceRecentScanUpsertOne {
	return u.Update(func(s *WorkspaceRecentScanUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WorkspaceRecentScanUpsertOne) UpdateTenantID() *WorkspaceRecentScanUpsertOne {
	return u.Update(func(s *WorkspaceRecentScanUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *WorkspaceRecentScanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceRecentScanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceRecentScanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkspaceRecentScanUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WorkspaceRecentScanUpsertOne.ID is not supported by MySQL driver. Use WorkspaceRecentScanUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkspaceRecentScanUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkspaceRecentScanCreateBulk is the builder for creating many WorkspaceRecentScan entities in bulk.
type WorkspaceRecentScanCreateBulk struct {
	config
	err      error
	builders []*WorkspaceRecentScanCreate
	conflict []sql.ConflictOption
}

// Save creates the WorkspaceRecentScan entities in the database.
func (wrscb *WorkspaceRecentScanCreateBulk) Save(ctx context.Context) ([]*WorkspaceRecentScan, error) {
	if wrscb.err != nil {
		return nil, wrscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wrscb.builders))
	nodes := make([]*WorkspaceRecentScan, len(wrscb.builders))
	mutators := make([]Mutator, len(wrscb.builders))
	for i := range wrscb.builders {
		func(i int, root context.Context) {
			builder := wrscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkspaceRecentScanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wrscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wrscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wrscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wrscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wrscb *WorkspaceRecentScanCreateBulk) SaveX(ctx context.Context) []*WorkspaceRecentScan {
	v, err := wrscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrscb *WorkspaceRecentScanCreateBulk) Exec(ctx context.Context) error {
	_, err := wrscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrscb *WorkspaceRecentScanCreateBulk) ExecX(ctx context.Context) {
	if err := wrscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceRecentScan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceRecentScanUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (wrscb *WorkspaceRecentScanCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkspaceRecentScanUpsertBulk {
	wrscb.conflict = opts
	return &WorkspaceRecentScanUpsertBulk{
		create: wrscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceRecentScan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wrscb *WorkspaceRecentScanCreateBulk) OnConflictColumns(columns ...string) *WorkspaceRecentScanUpsertBulk {
	wrscb.conflict = append(wrscb.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceRecentScanUpsertBulk{
		create: wrscb,
	}
}

// WorkspaceRecentScanUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkspaceRecentScan nodes.
type WorkspaceRecentScanUpsertBulk struct {
	create *WorkspaceRecentScanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkspaceRecentScan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspacerecentscan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkspaceRecentScanUpsertBulk) UpdateNewValues() *WorkspaceRecentScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workspacerecentscan.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(workspacerecentscan.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkspaceRecentScan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkspaceRecentScanUpsertBulk) Ignore() *WorkspaceRecentScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceRecentScanUpsertBulk) DoNothing() *WorkspaceRecentScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceRecentScanCreateBulk.OnConflict
// documentation for more info.
func (u *WorkspaceRecentScanUpsertBulk) Update(set func(*WorkspaceRecentScanUpsert)) *WorkspaceRecentScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceRecentScanUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *WorkspaceRecentScanUpsertBulk) SetTenantID(v pulid.ID) *WorkspaceRecentScanUpsertBulk {
	return u.Update(func(s *WorkspaceRecentScanUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WorkspaceRecentScanUpsertBulk) UpdateTenantID() *WorkspaceRecentScanUpsertBulk {
	return u.Update(func(s *WorkspaceRecentScanUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *WorkspaceRecentScanUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkspaceRecentScanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceRecentScanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceRecentScanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
