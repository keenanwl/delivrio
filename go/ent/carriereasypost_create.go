// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierEasyPostCreate is the builder for creating a CarrierEasyPost entity.
type CarrierEasyPostCreate struct {
	config
	mutation *CarrierEasyPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cepc *CarrierEasyPostCreate) SetTenantID(pu pulid.ID) *CarrierEasyPostCreate {
	cepc.mutation.SetTenantID(pu)
	return cepc
}

// SetAPIKey sets the "api_key" field.
func (cepc *CarrierEasyPostCreate) SetAPIKey(s string) *CarrierEasyPostCreate {
	cepc.mutation.SetAPIKey(s)
	return cepc
}

// SetTest sets the "test" field.
func (cepc *CarrierEasyPostCreate) SetTest(b bool) *CarrierEasyPostCreate {
	cepc.mutation.SetTest(b)
	return cepc
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cepc *CarrierEasyPostCreate) SetNillableTest(b *bool) *CarrierEasyPostCreate {
	if b != nil {
		cepc.SetTest(*b)
	}
	return cepc
}

// SetCarrierAccounts sets the "carrier_accounts" field.
func (cepc *CarrierEasyPostCreate) SetCarrierAccounts(s []string) *CarrierEasyPostCreate {
	cepc.mutation.SetCarrierAccounts(s)
	return cepc
}

// SetID sets the "id" field.
func (cepc *CarrierEasyPostCreate) SetID(pu pulid.ID) *CarrierEasyPostCreate {
	cepc.mutation.SetID(pu)
	return cepc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cepc *CarrierEasyPostCreate) SetNillableID(pu *pulid.ID) *CarrierEasyPostCreate {
	if pu != nil {
		cepc.SetID(*pu)
	}
	return cepc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cepc *CarrierEasyPostCreate) SetTenant(t *Tenant) *CarrierEasyPostCreate {
	return cepc.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cepc *CarrierEasyPostCreate) SetCarrierID(id pulid.ID) *CarrierEasyPostCreate {
	cepc.mutation.SetCarrierID(id)
	return cepc
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cepc *CarrierEasyPostCreate) SetCarrier(c *Carrier) *CarrierEasyPostCreate {
	return cepc.SetCarrierID(c.ID)
}

// Mutation returns the CarrierEasyPostMutation object of the builder.
func (cepc *CarrierEasyPostCreate) Mutation() *CarrierEasyPostMutation {
	return cepc.mutation
}

// Save creates the CarrierEasyPost in the database.
func (cepc *CarrierEasyPostCreate) Save(ctx context.Context) (*CarrierEasyPost, error) {
	if err := cepc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cepc.sqlSave, cepc.mutation, cepc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cepc *CarrierEasyPostCreate) SaveX(ctx context.Context) *CarrierEasyPost {
	v, err := cepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cepc *CarrierEasyPostCreate) Exec(ctx context.Context) error {
	_, err := cepc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cepc *CarrierEasyPostCreate) ExecX(ctx context.Context) {
	if err := cepc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cepc *CarrierEasyPostCreate) defaults() error {
	if _, ok := cepc.mutation.Test(); !ok {
		v := carriereasypost.DefaultTest
		cepc.mutation.SetTest(v)
	}
	if _, ok := cepc.mutation.CarrierAccounts(); !ok {
		v := carriereasypost.DefaultCarrierAccounts
		cepc.mutation.SetCarrierAccounts(v)
	}
	if _, ok := cepc.mutation.ID(); !ok {
		if carriereasypost.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carriereasypost.DefaultID (forgotten import ent/runtime?)")
		}
		v := carriereasypost.DefaultID()
		cepc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cepc *CarrierEasyPostCreate) check() error {
	if _, ok := cepc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CarrierEasyPost.tenant_id"`)}
	}
	if _, ok := cepc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`ent: missing required field "CarrierEasyPost.api_key"`)}
	}
	if _, ok := cepc.mutation.Test(); !ok {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required field "CarrierEasyPost.test"`)}
	}
	if _, ok := cepc.mutation.CarrierAccounts(); !ok {
		return &ValidationError{Name: "carrier_accounts", err: errors.New(`ent: missing required field "CarrierEasyPost.carrier_accounts"`)}
	}
	if len(cepc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CarrierEasyPost.tenant"`)}
	}
	if len(cepc.mutation.CarrierIDs()) == 0 {
		return &ValidationError{Name: "carrier", err: errors.New(`ent: missing required edge "CarrierEasyPost.carrier"`)}
	}
	return nil
}

func (cepc *CarrierEasyPostCreate) sqlSave(ctx context.Context) (*CarrierEasyPost, error) {
	if err := cepc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cepc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cepc.mutation.id = &_node.ID
	cepc.mutation.done = true
	return _node, nil
}

func (cepc *CarrierEasyPostCreate) createSpec() (*CarrierEasyPost, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierEasyPost{config: cepc.config}
		_spec = sqlgraph.NewCreateSpec(carriereasypost.Table, sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString))
	)
	_spec.OnConflict = cepc.conflict
	if id, ok := cepc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cepc.mutation.APIKey(); ok {
		_spec.SetField(carriereasypost.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := cepc.mutation.Test(); ok {
		_spec.SetField(carriereasypost.FieldTest, field.TypeBool, value)
		_node.Test = value
	}
	if value, ok := cepc.mutation.CarrierAccounts(); ok {
		_spec.SetField(carriereasypost.FieldCarrierAccounts, field.TypeJSON, value)
		_node.CarrierAccounts = value
	}
	if nodes := cepc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriereasypost.TenantTable,
			Columns: []string{carriereasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cepc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriereasypost.CarrierTable,
			Columns: []string{carriereasypost.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_carrier_easy_post = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierEasyPost.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierEasyPostUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cepc *CarrierEasyPostCreate) OnConflict(opts ...sql.ConflictOption) *CarrierEasyPostUpsertOne {
	cepc.conflict = opts
	return &CarrierEasyPostUpsertOne{
		create: cepc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cepc *CarrierEasyPostCreate) OnConflictColumns(columns ...string) *CarrierEasyPostUpsertOne {
	cepc.conflict = append(cepc.conflict, sql.ConflictColumns(columns...))
	return &CarrierEasyPostUpsertOne{
		create: cepc,
	}
}

type (
	// CarrierEasyPostUpsertOne is the builder for "upsert"-ing
	//  one CarrierEasyPost node.
	CarrierEasyPostUpsertOne struct {
		create *CarrierEasyPostCreate
	}

	// CarrierEasyPostUpsert is the "OnConflict" setter.
	CarrierEasyPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *CarrierEasyPostUpsert) SetTenantID(v pulid.ID) *CarrierEasyPostUpsert {
	u.Set(carriereasypost.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierEasyPostUpsert) UpdateTenantID() *CarrierEasyPostUpsert {
	u.SetExcluded(carriereasypost.FieldTenantID)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierEasyPostUpsert) SetAPIKey(v string) *CarrierEasyPostUpsert {
	u.Set(carriereasypost.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierEasyPostUpsert) UpdateAPIKey() *CarrierEasyPostUpsert {
	u.SetExcluded(carriereasypost.FieldAPIKey)
	return u
}

// SetTest sets the "test" field.
func (u *CarrierEasyPostUpsert) SetTest(v bool) *CarrierEasyPostUpsert {
	u.Set(carriereasypost.FieldTest, v)
	return u
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierEasyPostUpsert) UpdateTest() *CarrierEasyPostUpsert {
	u.SetExcluded(carriereasypost.FieldTest)
	return u
}

// SetCarrierAccounts sets the "carrier_accounts" field.
func (u *CarrierEasyPostUpsert) SetCarrierAccounts(v []string) *CarrierEasyPostUpsert {
	u.Set(carriereasypost.FieldCarrierAccounts, v)
	return u
}

// UpdateCarrierAccounts sets the "carrier_accounts" field to the value that was provided on create.
func (u *CarrierEasyPostUpsert) UpdateCarrierAccounts() *CarrierEasyPostUpsert {
	u.SetExcluded(carriereasypost.FieldCarrierAccounts)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carriereasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierEasyPostUpsertOne) UpdateNewValues() *CarrierEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carriereasypost.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierEasyPost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierEasyPostUpsertOne) Ignore() *CarrierEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierEasyPostUpsertOne) DoNothing() *CarrierEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierEasyPostCreate.OnConflict
// documentation for more info.
func (u *CarrierEasyPostUpsertOne) Update(set func(*CarrierEasyPostUpsert)) *CarrierEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierEasyPostUpsertOne) SetTenantID(v pulid.ID) *CarrierEasyPostUpsertOne {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierEasyPostUpsertOne) UpdateTenantID() *CarrierEasyPostUpsertOne {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.UpdateTenantID()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierEasyPostUpsertOne) SetAPIKey(v string) *CarrierEasyPostUpsertOne {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierEasyPostUpsertOne) UpdateAPIKey() *CarrierEasyPostUpsertOne {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.UpdateAPIKey()
	})
}

// SetTest sets the "test" field.
func (u *CarrierEasyPostUpsertOne) SetTest(v bool) *CarrierEasyPostUpsertOne {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierEasyPostUpsertOne) UpdateTest() *CarrierEasyPostUpsertOne {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.UpdateTest()
	})
}

// SetCarrierAccounts sets the "carrier_accounts" field.
func (u *CarrierEasyPostUpsertOne) SetCarrierAccounts(v []string) *CarrierEasyPostUpsertOne {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.SetCarrierAccounts(v)
	})
}

// UpdateCarrierAccounts sets the "carrier_accounts" field to the value that was provided on create.
func (u *CarrierEasyPostUpsertOne) UpdateCarrierAccounts() *CarrierEasyPostUpsertOne {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.UpdateCarrierAccounts()
	})
}

// Exec executes the query.
func (u *CarrierEasyPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierEasyPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierEasyPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierEasyPostUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierEasyPostUpsertOne.ID is not supported by MySQL driver. Use CarrierEasyPostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierEasyPostUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierEasyPostCreateBulk is the builder for creating many CarrierEasyPost entities in bulk.
type CarrierEasyPostCreateBulk struct {
	config
	err      error
	builders []*CarrierEasyPostCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierEasyPost entities in the database.
func (cepcb *CarrierEasyPostCreateBulk) Save(ctx context.Context) ([]*CarrierEasyPost, error) {
	if cepcb.err != nil {
		return nil, cepcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cepcb.builders))
	nodes := make([]*CarrierEasyPost, len(cepcb.builders))
	mutators := make([]Mutator, len(cepcb.builders))
	for i := range cepcb.builders {
		func(i int, root context.Context) {
			builder := cepcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierEasyPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cepcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cepcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cepcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cepcb *CarrierEasyPostCreateBulk) SaveX(ctx context.Context) []*CarrierEasyPost {
	v, err := cepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cepcb *CarrierEasyPostCreateBulk) Exec(ctx context.Context) error {
	_, err := cepcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cepcb *CarrierEasyPostCreateBulk) ExecX(ctx context.Context) {
	if err := cepcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierEasyPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierEasyPostUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cepcb *CarrierEasyPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierEasyPostUpsertBulk {
	cepcb.conflict = opts
	return &CarrierEasyPostUpsertBulk{
		create: cepcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cepcb *CarrierEasyPostCreateBulk) OnConflictColumns(columns ...string) *CarrierEasyPostUpsertBulk {
	cepcb.conflict = append(cepcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierEasyPostUpsertBulk{
		create: cepcb,
	}
}

// CarrierEasyPostUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierEasyPost nodes.
type CarrierEasyPostUpsertBulk struct {
	create *CarrierEasyPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carriereasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierEasyPostUpsertBulk) UpdateNewValues() *CarrierEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carriereasypost.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierEasyPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierEasyPostUpsertBulk) Ignore() *CarrierEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierEasyPostUpsertBulk) DoNothing() *CarrierEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierEasyPostCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierEasyPostUpsertBulk) Update(set func(*CarrierEasyPostUpsert)) *CarrierEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierEasyPostUpsertBulk) SetTenantID(v pulid.ID) *CarrierEasyPostUpsertBulk {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierEasyPostUpsertBulk) UpdateTenantID() *CarrierEasyPostUpsertBulk {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.UpdateTenantID()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierEasyPostUpsertBulk) SetAPIKey(v string) *CarrierEasyPostUpsertBulk {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierEasyPostUpsertBulk) UpdateAPIKey() *CarrierEasyPostUpsertBulk {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.UpdateAPIKey()
	})
}

// SetTest sets the "test" field.
func (u *CarrierEasyPostUpsertBulk) SetTest(v bool) *CarrierEasyPostUpsertBulk {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierEasyPostUpsertBulk) UpdateTest() *CarrierEasyPostUpsertBulk {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.UpdateTest()
	})
}

// SetCarrierAccounts sets the "carrier_accounts" field.
func (u *CarrierEasyPostUpsertBulk) SetCarrierAccounts(v []string) *CarrierEasyPostUpsertBulk {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.SetCarrierAccounts(v)
	})
}

// UpdateCarrierAccounts sets the "carrier_accounts" field to the value that was provided on create.
func (u *CarrierEasyPostUpsertBulk) UpdateCarrierAccounts() *CarrierEasyPostUpsertBulk {
	return u.Update(func(s *CarrierEasyPostUpsert) {
		s.UpdateCarrierAccounts()
	})
}

// Exec executes the query.
func (u *CarrierEasyPostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierEasyPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierEasyPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierEasyPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
