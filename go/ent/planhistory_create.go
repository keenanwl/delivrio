// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanHistoryCreate is the builder for creating a PlanHistory entity.
type PlanHistoryCreate struct {
	config
	mutation *PlanHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (phc *PlanHistoryCreate) SetTenantID(pu pulid.ID) *PlanHistoryCreate {
	phc.mutation.SetTenantID(pu)
	return phc
}

// SetCreatedAt sets the "created_at" field.
func (phc *PlanHistoryCreate) SetCreatedAt(t time.Time) *PlanHistoryCreate {
	phc.mutation.SetCreatedAt(t)
	return phc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (phc *PlanHistoryCreate) SetNillableCreatedAt(t *time.Time) *PlanHistoryCreate {
	if t != nil {
		phc.SetCreatedAt(*t)
	}
	return phc
}

// SetID sets the "id" field.
func (phc *PlanHistoryCreate) SetID(pu pulid.ID) *PlanHistoryCreate {
	phc.mutation.SetID(pu)
	return phc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (phc *PlanHistoryCreate) SetNillableID(pu *pulid.ID) *PlanHistoryCreate {
	if pu != nil {
		phc.SetID(*pu)
	}
	return phc
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (phc *PlanHistoryCreate) SetChangeHistoryID(id pulid.ID) *PlanHistoryCreate {
	phc.mutation.SetChangeHistoryID(id)
	return phc
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (phc *PlanHistoryCreate) SetChangeHistory(c *ChangeHistory) *PlanHistoryCreate {
	return phc.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (phc *PlanHistoryCreate) SetTenant(t *Tenant) *PlanHistoryCreate {
	return phc.SetTenantID(t.ID)
}

// SetChangedByID sets the "changed_by" edge to the User entity by ID.
func (phc *PlanHistoryCreate) SetChangedByID(id pulid.ID) *PlanHistoryCreate {
	phc.mutation.SetChangedByID(id)
	return phc
}

// SetChangedBy sets the "changed_by" edge to the User entity.
func (phc *PlanHistoryCreate) SetChangedBy(u *User) *PlanHistoryCreate {
	return phc.SetChangedByID(u.ID)
}

// SetChangedFromID sets the "changed_from" edge to the Plan entity by ID.
func (phc *PlanHistoryCreate) SetChangedFromID(id pulid.ID) *PlanHistoryCreate {
	phc.mutation.SetChangedFromID(id)
	return phc
}

// SetChangedFrom sets the "changed_from" edge to the Plan entity.
func (phc *PlanHistoryCreate) SetChangedFrom(p *Plan) *PlanHistoryCreate {
	return phc.SetChangedFromID(p.ID)
}

// Mutation returns the PlanHistoryMutation object of the builder.
func (phc *PlanHistoryCreate) Mutation() *PlanHistoryMutation {
	return phc.mutation
}

// Save creates the PlanHistory in the database.
func (phc *PlanHistoryCreate) Save(ctx context.Context) (*PlanHistory, error) {
	if err := phc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, phc.sqlSave, phc.mutation, phc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (phc *PlanHistoryCreate) SaveX(ctx context.Context) *PlanHistory {
	v, err := phc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phc *PlanHistoryCreate) Exec(ctx context.Context) error {
	_, err := phc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phc *PlanHistoryCreate) ExecX(ctx context.Context) {
	if err := phc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phc *PlanHistoryCreate) defaults() error {
	if _, ok := phc.mutation.CreatedAt(); !ok {
		if planhistory.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized planhistory.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := planhistory.DefaultCreatedAt()
		phc.mutation.SetCreatedAt(v)
	}
	if _, ok := phc.mutation.ID(); !ok {
		if planhistory.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized planhistory.DefaultID (forgotten import ent/runtime?)")
		}
		v := planhistory.DefaultID()
		phc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (phc *PlanHistoryCreate) check() error {
	if _, ok := phc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "PlanHistory.tenant_id"`)}
	}
	if _, ok := phc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PlanHistory.created_at"`)}
	}
	if len(phc.mutation.ChangeHistoryIDs()) == 0 {
		return &ValidationError{Name: "change_history", err: errors.New(`ent: missing required edge "PlanHistory.change_history"`)}
	}
	if len(phc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "PlanHistory.tenant"`)}
	}
	if len(phc.mutation.ChangedByIDs()) == 0 {
		return &ValidationError{Name: "changed_by", err: errors.New(`ent: missing required edge "PlanHistory.changed_by"`)}
	}
	if len(phc.mutation.ChangedFromIDs()) == 0 {
		return &ValidationError{Name: "changed_from", err: errors.New(`ent: missing required edge "PlanHistory.changed_from"`)}
	}
	return nil
}

func (phc *PlanHistoryCreate) sqlSave(ctx context.Context) (*PlanHistory, error) {
	if err := phc.check(); err != nil {
		return nil, err
	}
	_node, _spec := phc.createSpec()
	if err := sqlgraph.CreateNode(ctx, phc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	phc.mutation.id = &_node.ID
	phc.mutation.done = true
	return _node, nil
}

func (phc *PlanHistoryCreate) createSpec() (*PlanHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &PlanHistory{config: phc.config}
		_spec = sqlgraph.NewCreateSpec(planhistory.Table, sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString))
	)
	_spec.OnConflict = phc.conflict
	if id, ok := phc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := phc.mutation.CreatedAt(); ok {
		_spec.SetField(planhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := phc.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangeHistoryTable,
			Columns: []string{planhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.change_history_plan_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planhistory.TenantTable,
			Columns: []string{planhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phc.mutation.ChangedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedByTable,
			Columns: []string{planhistory.ChangedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_plan_history_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phc.mutation.ChangedFromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedFromTable,
			Columns: []string{planhistory.ChangedFromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plan_plan_history_plan = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanHistory.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanHistoryUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (phc *PlanHistoryCreate) OnConflict(opts ...sql.ConflictOption) *PlanHistoryUpsertOne {
	phc.conflict = opts
	return &PlanHistoryUpsertOne{
		create: phc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (phc *PlanHistoryCreate) OnConflictColumns(columns ...string) *PlanHistoryUpsertOne {
	phc.conflict = append(phc.conflict, sql.ConflictColumns(columns...))
	return &PlanHistoryUpsertOne{
		create: phc,
	}
}

type (
	// PlanHistoryUpsertOne is the builder for "upsert"-ing
	//  one PlanHistory node.
	PlanHistoryUpsertOne struct {
		create *PlanHistoryCreate
	}

	// PlanHistoryUpsert is the "OnConflict" setter.
	PlanHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *PlanHistoryUpsert) SetTenantID(v pulid.ID) *PlanHistoryUpsert {
	u.Set(planhistory.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PlanHistoryUpsert) UpdateTenantID() *PlanHistoryUpsert {
	u.SetExcluded(planhistory.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PlanHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(planhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanHistoryUpsertOne) UpdateNewValues() *PlanHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(planhistory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(planhistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlanHistoryUpsertOne) Ignore() *PlanHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanHistoryUpsertOne) DoNothing() *PlanHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanHistoryCreate.OnConflict
// documentation for more info.
func (u *PlanHistoryUpsertOne) Update(set func(*PlanHistoryUpsert)) *PlanHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PlanHistoryUpsertOne) SetTenantID(v pulid.ID) *PlanHistoryUpsertOne {
	return u.Update(func(s *PlanHistoryUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PlanHistoryUpsertOne) UpdateTenantID() *PlanHistoryUpsertOne {
	return u.Update(func(s *PlanHistoryUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *PlanHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanHistoryUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlanHistoryUpsertOne.ID is not supported by MySQL driver. Use PlanHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanHistoryUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanHistoryCreateBulk is the builder for creating many PlanHistory entities in bulk.
type PlanHistoryCreateBulk struct {
	config
	err      error
	builders []*PlanHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the PlanHistory entities in the database.
func (phcb *PlanHistoryCreateBulk) Save(ctx context.Context) ([]*PlanHistory, error) {
	if phcb.err != nil {
		return nil, phcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(phcb.builders))
	nodes := make([]*PlanHistory, len(phcb.builders))
	mutators := make([]Mutator, len(phcb.builders))
	for i := range phcb.builders {
		func(i int, root context.Context) {
			builder := phcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, phcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = phcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, phcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, phcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (phcb *PlanHistoryCreateBulk) SaveX(ctx context.Context) []*PlanHistory {
	v, err := phcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phcb *PlanHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := phcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phcb *PlanHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := phcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanHistoryUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (phcb *PlanHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanHistoryUpsertBulk {
	phcb.conflict = opts
	return &PlanHistoryUpsertBulk{
		create: phcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (phcb *PlanHistoryCreateBulk) OnConflictColumns(columns ...string) *PlanHistoryUpsertBulk {
	phcb.conflict = append(phcb.conflict, sql.ConflictColumns(columns...))
	return &PlanHistoryUpsertBulk{
		create: phcb,
	}
}

// PlanHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of PlanHistory nodes.
type PlanHistoryUpsertBulk struct {
	create *PlanHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlanHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(planhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanHistoryUpsertBulk) UpdateNewValues() *PlanHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(planhistory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(planhistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlanHistoryUpsertBulk) Ignore() *PlanHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanHistoryUpsertBulk) DoNothing() *PlanHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *PlanHistoryUpsertBulk) Update(set func(*PlanHistoryUpsert)) *PlanHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PlanHistoryUpsertBulk) SetTenantID(v pulid.ID) *PlanHistoryUpsertBulk {
	return u.Update(func(s *PlanHistoryUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PlanHistoryUpsertBulk) UpdateTenantID() *PlanHistoryUpsertBulk {
	return u.Update(func(s *PlanHistoryUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *PlanHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlanHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
