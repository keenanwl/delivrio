// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// HypothesisTestDeliveryOptionRequest is the model entity for the HypothesisTestDeliveryOptionRequest schema.
type HypothesisTestDeliveryOptionRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// OrderHash holds the value of the "order_hash" field.
	OrderHash string `json:"order_hash,omitempty"`
	// ShippingAddressHash holds the value of the "shipping_address_hash" field.
	ShippingAddressHash string `json:"shipping_address_hash,omitempty"`
	// IsControlGroup holds the value of the "is_control_group" field.
	IsControlGroup bool `json:"is_control_group,omitempty"`
	// RequestCount holds the value of the "request_count" field.
	RequestCount uint `json:"request_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastRequestedAt holds the value of the "last_requested_at" field.
	LastRequestedAt time.Time `json:"last_requested_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HypothesisTestDeliveryOptionRequestQuery when eager-loading is set.
	Edges                                                                   HypothesisTestDeliveryOptionRequestEdges `json:"edges"`
	hypothesis_test_delivery_option_request_hypothesis_test_delivery_option *pulid.ID
	selectValues                                                            sql.SelectValues
}

// HypothesisTestDeliveryOptionRequestEdges holds the relations/edges for other nodes in the graph.
type HypothesisTestDeliveryOptionRequestEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// HypothesisTestDeliveryOption holds the value of the hypothesis_test_delivery_option edge.
	HypothesisTestDeliveryOption *HypothesisTestDeliveryOption `json:"hypothesis_test_delivery_option,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// HypothesisTestDeliveryOptionLookup holds the value of the hypothesis_test_delivery_option_lookup edge.
	HypothesisTestDeliveryOptionLookup []*HypothesisTestDeliveryOptionLookup `json:"hypothesis_test_delivery_option_lookup,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedHypothesisTestDeliveryOptionLookup map[string][]*HypothesisTestDeliveryOptionLookup
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HypothesisTestDeliveryOptionRequestEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// HypothesisTestDeliveryOptionOrErr returns the HypothesisTestDeliveryOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HypothesisTestDeliveryOptionRequestEdges) HypothesisTestDeliveryOptionOrErr() (*HypothesisTestDeliveryOption, error) {
	if e.HypothesisTestDeliveryOption != nil {
		return e.HypothesisTestDeliveryOption, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: hypothesistestdeliveryoption.Label}
	}
	return nil, &NotLoadedError{edge: "hypothesis_test_delivery_option"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HypothesisTestDeliveryOptionRequestEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// HypothesisTestDeliveryOptionLookupOrErr returns the HypothesisTestDeliveryOptionLookup value or an error if the edge
// was not loaded in eager-loading.
func (e HypothesisTestDeliveryOptionRequestEdges) HypothesisTestDeliveryOptionLookupOrErr() ([]*HypothesisTestDeliveryOptionLookup, error) {
	if e.loadedTypes[3] {
		return e.HypothesisTestDeliveryOptionLookup, nil
	}
	return nil, &NotLoadedError{edge: "hypothesis_test_delivery_option_lookup"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HypothesisTestDeliveryOptionRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hypothesistestdeliveryoptionrequest.FieldID, hypothesistestdeliveryoptionrequest.FieldTenantID:
			values[i] = new(pulid.ID)
		case hypothesistestdeliveryoptionrequest.FieldIsControlGroup:
			values[i] = new(sql.NullBool)
		case hypothesistestdeliveryoptionrequest.FieldRequestCount:
			values[i] = new(sql.NullInt64)
		case hypothesistestdeliveryoptionrequest.FieldOrderHash, hypothesistestdeliveryoptionrequest.FieldShippingAddressHash:
			values[i] = new(sql.NullString)
		case hypothesistestdeliveryoptionrequest.FieldCreatedAt, hypothesistestdeliveryoptionrequest.FieldLastRequestedAt:
			values[i] = new(sql.NullTime)
		case hypothesistestdeliveryoptionrequest.ForeignKeys[0]: // hypothesis_test_delivery_option_request_hypothesis_test_delivery_option
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HypothesisTestDeliveryOptionRequest fields.
func (htdor *HypothesisTestDeliveryOptionRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hypothesistestdeliveryoptionrequest.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				htdor.ID = *value
			}
		case hypothesistestdeliveryoptionrequest.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				htdor.TenantID = *value
			}
		case hypothesistestdeliveryoptionrequest.FieldOrderHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_hash", values[i])
			} else if value.Valid {
				htdor.OrderHash = value.String
			}
		case hypothesistestdeliveryoptionrequest.FieldShippingAddressHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_address_hash", values[i])
			} else if value.Valid {
				htdor.ShippingAddressHash = value.String
			}
		case hypothesistestdeliveryoptionrequest.FieldIsControlGroup:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_control_group", values[i])
			} else if value.Valid {
				htdor.IsControlGroup = value.Bool
			}
		case hypothesistestdeliveryoptionrequest.FieldRequestCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_count", values[i])
			} else if value.Valid {
				htdor.RequestCount = uint(value.Int64)
			}
		case hypothesistestdeliveryoptionrequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				htdor.CreatedAt = value.Time
			}
		case hypothesistestdeliveryoptionrequest.FieldLastRequestedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_requested_at", values[i])
			} else if value.Valid {
				htdor.LastRequestedAt = value.Time
			}
		case hypothesistestdeliveryoptionrequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field hypothesis_test_delivery_option_request_hypothesis_test_delivery_option", values[i])
			} else if value.Valid {
				htdor.hypothesis_test_delivery_option_request_hypothesis_test_delivery_option = new(pulid.ID)
				*htdor.hypothesis_test_delivery_option_request_hypothesis_test_delivery_option = *value.S.(*pulid.ID)
			}
		default:
			htdor.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HypothesisTestDeliveryOptionRequest.
// This includes values selected through modifiers, order, etc.
func (htdor *HypothesisTestDeliveryOptionRequest) Value(name string) (ent.Value, error) {
	return htdor.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the HypothesisTestDeliveryOptionRequest entity.
func (htdor *HypothesisTestDeliveryOptionRequest) QueryTenant() *TenantQuery {
	return NewHypothesisTestDeliveryOptionRequestClient(htdor.config).QueryTenant(htdor)
}

// QueryHypothesisTestDeliveryOption queries the "hypothesis_test_delivery_option" edge of the HypothesisTestDeliveryOptionRequest entity.
func (htdor *HypothesisTestDeliveryOptionRequest) QueryHypothesisTestDeliveryOption() *HypothesisTestDeliveryOptionQuery {
	return NewHypothesisTestDeliveryOptionRequestClient(htdor.config).QueryHypothesisTestDeliveryOption(htdor)
}

// QueryOrder queries the "order" edge of the HypothesisTestDeliveryOptionRequest entity.
func (htdor *HypothesisTestDeliveryOptionRequest) QueryOrder() *OrderQuery {
	return NewHypothesisTestDeliveryOptionRequestClient(htdor.config).QueryOrder(htdor)
}

// QueryHypothesisTestDeliveryOptionLookup queries the "hypothesis_test_delivery_option_lookup" edge of the HypothesisTestDeliveryOptionRequest entity.
func (htdor *HypothesisTestDeliveryOptionRequest) QueryHypothesisTestDeliveryOptionLookup() *HypothesisTestDeliveryOptionLookupQuery {
	return NewHypothesisTestDeliveryOptionRequestClient(htdor.config).QueryHypothesisTestDeliveryOptionLookup(htdor)
}

// Update returns a builder for updating this HypothesisTestDeliveryOptionRequest.
// Note that you need to call HypothesisTestDeliveryOptionRequest.Unwrap() before calling this method if this HypothesisTestDeliveryOptionRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (htdor *HypothesisTestDeliveryOptionRequest) Update() *HypothesisTestDeliveryOptionRequestUpdateOne {
	return NewHypothesisTestDeliveryOptionRequestClient(htdor.config).UpdateOne(htdor)
}

// Unwrap unwraps the HypothesisTestDeliveryOptionRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (htdor *HypothesisTestDeliveryOptionRequest) Unwrap() *HypothesisTestDeliveryOptionRequest {
	_tx, ok := htdor.config.driver.(*txDriver)
	if !ok {
		panic("ent: HypothesisTestDeliveryOptionRequest is not a transactional entity")
	}
	htdor.config.driver = _tx.drv
	return htdor
}

// String implements the fmt.Stringer.
func (htdor *HypothesisTestDeliveryOptionRequest) String() string {
	var builder strings.Builder
	builder.WriteString("HypothesisTestDeliveryOptionRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", htdor.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", htdor.TenantID))
	builder.WriteString(", ")
	builder.WriteString("order_hash=")
	builder.WriteString(htdor.OrderHash)
	builder.WriteString(", ")
	builder.WriteString("shipping_address_hash=")
	builder.WriteString(htdor.ShippingAddressHash)
	builder.WriteString(", ")
	builder.WriteString("is_control_group=")
	builder.WriteString(fmt.Sprintf("%v", htdor.IsControlGroup))
	builder.WriteString(", ")
	builder.WriteString("request_count=")
	builder.WriteString(fmt.Sprintf("%v", htdor.RequestCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(htdor.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_requested_at=")
	builder.WriteString(htdor.LastRequestedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedHypothesisTestDeliveryOptionLookup returns the HypothesisTestDeliveryOptionLookup named value or an error if the edge was not
// loaded in eager-loading with this name.
func (htdor *HypothesisTestDeliveryOptionRequest) NamedHypothesisTestDeliveryOptionLookup(name string) ([]*HypothesisTestDeliveryOptionLookup, error) {
	if htdor.Edges.namedHypothesisTestDeliveryOptionLookup == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := htdor.Edges.namedHypothesisTestDeliveryOptionLookup[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (htdor *HypothesisTestDeliveryOptionRequest) appendNamedHypothesisTestDeliveryOptionLookup(name string, edges ...*HypothesisTestDeliveryOptionLookup) {
	if htdor.Edges.namedHypothesisTestDeliveryOptionLookup == nil {
		htdor.Edges.namedHypothesisTestDeliveryOptionLookup = make(map[string][]*HypothesisTestDeliveryOptionLookup)
	}
	if len(edges) == 0 {
		htdor.Edges.namedHypothesisTestDeliveryOptionLookup[name] = []*HypothesisTestDeliveryOptionLookup{}
	} else {
		htdor.Edges.namedHypothesisTestDeliveryOptionLookup[name] = append(htdor.Edges.namedHypothesisTestDeliveryOptionLookup[name], edges...)
	}
}

// HypothesisTestDeliveryOptionRequests is a parsable slice of HypothesisTestDeliveryOptionRequest.
type HypothesisTestDeliveryOptionRequests []*HypothesisTestDeliveryOptionRequest
