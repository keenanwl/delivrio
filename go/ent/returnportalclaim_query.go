// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnPortalClaimQuery is the builder for querying ReturnPortalClaim entities.
type ReturnPortalClaimQuery struct {
	config
	ctx                      *QueryContext
	order                    []returnportalclaim.OrderOption
	inters                   []Interceptor
	predicates               []predicate.ReturnPortalClaim
	withTenant               *TenantQuery
	withReturnPortal         *ReturnPortalQuery
	withReturnLocation       *LocationQuery
	withReturnOrderLine      *ReturnOrderLineQuery
	withFKs                  bool
	modifiers                []func(*sql.Selector)
	loadTotal                []func(context.Context, []*ReturnPortalClaim) error
	withNamedReturnOrderLine map[string]*ReturnOrderLineQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ReturnPortalClaimQuery builder.
func (rpcq *ReturnPortalClaimQuery) Where(ps ...predicate.ReturnPortalClaim) *ReturnPortalClaimQuery {
	rpcq.predicates = append(rpcq.predicates, ps...)
	return rpcq
}

// Limit the number of records to be returned by this query.
func (rpcq *ReturnPortalClaimQuery) Limit(limit int) *ReturnPortalClaimQuery {
	rpcq.ctx.Limit = &limit
	return rpcq
}

// Offset to start from.
func (rpcq *ReturnPortalClaimQuery) Offset(offset int) *ReturnPortalClaimQuery {
	rpcq.ctx.Offset = &offset
	return rpcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rpcq *ReturnPortalClaimQuery) Unique(unique bool) *ReturnPortalClaimQuery {
	rpcq.ctx.Unique = &unique
	return rpcq
}

// Order specifies how the records should be ordered.
func (rpcq *ReturnPortalClaimQuery) Order(o ...returnportalclaim.OrderOption) *ReturnPortalClaimQuery {
	rpcq.order = append(rpcq.order, o...)
	return rpcq
}

// QueryTenant chains the current query on the "tenant" edge.
func (rpcq *ReturnPortalClaimQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: rpcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportalclaim.Table, returnportalclaim.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportalclaim.TenantTable, returnportalclaim.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnPortal chains the current query on the "return_portal" edge.
func (rpcq *ReturnPortalClaimQuery) QueryReturnPortal() *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: rpcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportalclaim.Table, returnportalclaim.FieldID, selector),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returnportalclaim.ReturnPortalTable, returnportalclaim.ReturnPortalColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnLocation chains the current query on the "return_location" edge.
func (rpcq *ReturnPortalClaimQuery) QueryReturnLocation() *LocationQuery {
	query := (&LocationClient{config: rpcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportalclaim.Table, returnportalclaim.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportalclaim.ReturnLocationTable, returnportalclaim.ReturnLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnOrderLine chains the current query on the "return_order_line" edge.
func (rpcq *ReturnPortalClaimQuery) QueryReturnOrderLine() *ReturnOrderLineQuery {
	query := (&ReturnOrderLineClient{config: rpcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportalclaim.Table, returnportalclaim.FieldID, selector),
			sqlgraph.To(returnorderline.Table, returnorderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, returnportalclaim.ReturnOrderLineTable, returnportalclaim.ReturnOrderLineColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ReturnPortalClaim entity from the query.
// Returns a *NotFoundError when no ReturnPortalClaim was found.
func (rpcq *ReturnPortalClaimQuery) First(ctx context.Context) (*ReturnPortalClaim, error) {
	nodes, err := rpcq.Limit(1).All(setContextOp(ctx, rpcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{returnportalclaim.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rpcq *ReturnPortalClaimQuery) FirstX(ctx context.Context) *ReturnPortalClaim {
	node, err := rpcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReturnPortalClaim ID from the query.
// Returns a *NotFoundError when no ReturnPortalClaim ID was found.
func (rpcq *ReturnPortalClaimQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = rpcq.Limit(1).IDs(setContextOp(ctx, rpcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{returnportalclaim.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rpcq *ReturnPortalClaimQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := rpcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ReturnPortalClaim entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ReturnPortalClaim entity is found.
// Returns a *NotFoundError when no ReturnPortalClaim entities are found.
func (rpcq *ReturnPortalClaimQuery) Only(ctx context.Context) (*ReturnPortalClaim, error) {
	nodes, err := rpcq.Limit(2).All(setContextOp(ctx, rpcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{returnportalclaim.Label}
	default:
		return nil, &NotSingularError{returnportalclaim.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rpcq *ReturnPortalClaimQuery) OnlyX(ctx context.Context) *ReturnPortalClaim {
	node, err := rpcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ReturnPortalClaim ID in the query.
// Returns a *NotSingularError when more than one ReturnPortalClaim ID is found.
// Returns a *NotFoundError when no entities are found.
func (rpcq *ReturnPortalClaimQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = rpcq.Limit(2).IDs(setContextOp(ctx, rpcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{returnportalclaim.Label}
	default:
		err = &NotSingularError{returnportalclaim.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rpcq *ReturnPortalClaimQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := rpcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReturnPortalClaims.
func (rpcq *ReturnPortalClaimQuery) All(ctx context.Context) ([]*ReturnPortalClaim, error) {
	ctx = setContextOp(ctx, rpcq.ctx, ent.OpQueryAll)
	if err := rpcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ReturnPortalClaim, *ReturnPortalClaimQuery]()
	return withInterceptors[[]*ReturnPortalClaim](ctx, rpcq, qr, rpcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rpcq *ReturnPortalClaimQuery) AllX(ctx context.Context) []*ReturnPortalClaim {
	nodes, err := rpcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReturnPortalClaim IDs.
func (rpcq *ReturnPortalClaimQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if rpcq.ctx.Unique == nil && rpcq.path != nil {
		rpcq.Unique(true)
	}
	ctx = setContextOp(ctx, rpcq.ctx, ent.OpQueryIDs)
	if err = rpcq.Select(returnportalclaim.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rpcq *ReturnPortalClaimQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := rpcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rpcq *ReturnPortalClaimQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rpcq.ctx, ent.OpQueryCount)
	if err := rpcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rpcq, querierCount[*ReturnPortalClaimQuery](), rpcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rpcq *ReturnPortalClaimQuery) CountX(ctx context.Context) int {
	count, err := rpcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rpcq *ReturnPortalClaimQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rpcq.ctx, ent.OpQueryExist)
	switch _, err := rpcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rpcq *ReturnPortalClaimQuery) ExistX(ctx context.Context) bool {
	exist, err := rpcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ReturnPortalClaimQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rpcq *ReturnPortalClaimQuery) Clone() *ReturnPortalClaimQuery {
	if rpcq == nil {
		return nil
	}
	return &ReturnPortalClaimQuery{
		config:              rpcq.config,
		ctx:                 rpcq.ctx.Clone(),
		order:               append([]returnportalclaim.OrderOption{}, rpcq.order...),
		inters:              append([]Interceptor{}, rpcq.inters...),
		predicates:          append([]predicate.ReturnPortalClaim{}, rpcq.predicates...),
		withTenant:          rpcq.withTenant.Clone(),
		withReturnPortal:    rpcq.withReturnPortal.Clone(),
		withReturnLocation:  rpcq.withReturnLocation.Clone(),
		withReturnOrderLine: rpcq.withReturnOrderLine.Clone(),
		// clone intermediate query.
		sql:  rpcq.sql.Clone(),
		path: rpcq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (rpcq *ReturnPortalClaimQuery) WithTenant(opts ...func(*TenantQuery)) *ReturnPortalClaimQuery {
	query := (&TenantClient{config: rpcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpcq.withTenant = query
	return rpcq
}

// WithReturnPortal tells the query-builder to eager-load the nodes that are connected to
// the "return_portal" edge. The optional arguments are used to configure the query builder of the edge.
func (rpcq *ReturnPortalClaimQuery) WithReturnPortal(opts ...func(*ReturnPortalQuery)) *ReturnPortalClaimQuery {
	query := (&ReturnPortalClient{config: rpcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpcq.withReturnPortal = query
	return rpcq
}

// WithReturnLocation tells the query-builder to eager-load the nodes that are connected to
// the "return_location" edge. The optional arguments are used to configure the query builder of the edge.
func (rpcq *ReturnPortalClaimQuery) WithReturnLocation(opts ...func(*LocationQuery)) *ReturnPortalClaimQuery {
	query := (&LocationClient{config: rpcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpcq.withReturnLocation = query
	return rpcq
}

// WithReturnOrderLine tells the query-builder to eager-load the nodes that are connected to
// the "return_order_line" edge. The optional arguments are used to configure the query builder of the edge.
func (rpcq *ReturnPortalClaimQuery) WithReturnOrderLine(opts ...func(*ReturnOrderLineQuery)) *ReturnPortalClaimQuery {
	query := (&ReturnOrderLineClient{config: rpcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpcq.withReturnOrderLine = query
	return rpcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ReturnPortalClaim.Query().
//		GroupBy(returnportalclaim.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rpcq *ReturnPortalClaimQuery) GroupBy(field string, fields ...string) *ReturnPortalClaimGroupBy {
	rpcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ReturnPortalClaimGroupBy{build: rpcq}
	grbuild.flds = &rpcq.ctx.Fields
	grbuild.label = returnportalclaim.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ReturnPortalClaim.Query().
//		Select(returnportalclaim.FieldTenantID).
//		Scan(ctx, &v)
func (rpcq *ReturnPortalClaimQuery) Select(fields ...string) *ReturnPortalClaimSelect {
	rpcq.ctx.Fields = append(rpcq.ctx.Fields, fields...)
	sbuild := &ReturnPortalClaimSelect{ReturnPortalClaimQuery: rpcq}
	sbuild.label = returnportalclaim.Label
	sbuild.flds, sbuild.scan = &rpcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ReturnPortalClaimSelect configured with the given aggregations.
func (rpcq *ReturnPortalClaimQuery) Aggregate(fns ...AggregateFunc) *ReturnPortalClaimSelect {
	return rpcq.Select().Aggregate(fns...)
}

func (rpcq *ReturnPortalClaimQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rpcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rpcq); err != nil {
				return err
			}
		}
	}
	for _, f := range rpcq.ctx.Fields {
		if !returnportalclaim.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rpcq.path != nil {
		prev, err := rpcq.path(ctx)
		if err != nil {
			return err
		}
		rpcq.sql = prev
	}
	if returnportalclaim.Policy == nil {
		return errors.New("ent: uninitialized returnportalclaim.Policy (forgotten import ent/runtime?)")
	}
	if err := returnportalclaim.Policy.EvalQuery(ctx, rpcq); err != nil {
		return err
	}
	return nil
}

func (rpcq *ReturnPortalClaimQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ReturnPortalClaim, error) {
	var (
		nodes       = []*ReturnPortalClaim{}
		withFKs     = rpcq.withFKs
		_spec       = rpcq.querySpec()
		loadedTypes = [4]bool{
			rpcq.withTenant != nil,
			rpcq.withReturnPortal != nil,
			rpcq.withReturnLocation != nil,
			rpcq.withReturnOrderLine != nil,
		}
	)
	if rpcq.withReturnPortal != nil || rpcq.withReturnLocation != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, returnportalclaim.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ReturnPortalClaim).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ReturnPortalClaim{config: rpcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rpcq.modifiers) > 0 {
		_spec.Modifiers = rpcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rpcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rpcq.withTenant; query != nil {
		if err := rpcq.loadTenant(ctx, query, nodes, nil,
			func(n *ReturnPortalClaim, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := rpcq.withReturnPortal; query != nil {
		if err := rpcq.loadReturnPortal(ctx, query, nodes, nil,
			func(n *ReturnPortalClaim, e *ReturnPortal) { n.Edges.ReturnPortal = e }); err != nil {
			return nil, err
		}
	}
	if query := rpcq.withReturnLocation; query != nil {
		if err := rpcq.loadReturnLocation(ctx, query, nodes, nil,
			func(n *ReturnPortalClaim, e *Location) { n.Edges.ReturnLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := rpcq.withReturnOrderLine; query != nil {
		if err := rpcq.loadReturnOrderLine(ctx, query, nodes,
			func(n *ReturnPortalClaim) { n.Edges.ReturnOrderLine = []*ReturnOrderLine{} },
			func(n *ReturnPortalClaim, e *ReturnOrderLine) {
				n.Edges.ReturnOrderLine = append(n.Edges.ReturnOrderLine, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range rpcq.withNamedReturnOrderLine {
		if err := rpcq.loadReturnOrderLine(ctx, query, nodes,
			func(n *ReturnPortalClaim) { n.appendNamedReturnOrderLine(name) },
			func(n *ReturnPortalClaim, e *ReturnOrderLine) { n.appendNamedReturnOrderLine(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range rpcq.loadTotal {
		if err := rpcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rpcq *ReturnPortalClaimQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ReturnPortalClaim, init func(*ReturnPortalClaim), assign func(*ReturnPortalClaim, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnPortalClaim)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpcq *ReturnPortalClaimQuery) loadReturnPortal(ctx context.Context, query *ReturnPortalQuery, nodes []*ReturnPortalClaim, init func(*ReturnPortalClaim), assign func(*ReturnPortalClaim, *ReturnPortal)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnPortalClaim)
	for i := range nodes {
		if nodes[i].return_portal_return_portal_claim == nil {
			continue
		}
		fk := *nodes[i].return_portal_return_portal_claim
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(returnportal.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_portal_return_portal_claim" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpcq *ReturnPortalClaimQuery) loadReturnLocation(ctx context.Context, query *LocationQuery, nodes []*ReturnPortalClaim, init func(*ReturnPortalClaim), assign func(*ReturnPortalClaim, *Location)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnPortalClaim)
	for i := range nodes {
		if nodes[i].return_portal_claim_return_location == nil {
			continue
		}
		fk := *nodes[i].return_portal_claim_return_location
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_portal_claim_return_location" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpcq *ReturnPortalClaimQuery) loadReturnOrderLine(ctx context.Context, query *ReturnOrderLineQuery, nodes []*ReturnPortalClaim, init func(*ReturnPortalClaim), assign func(*ReturnPortalClaim, *ReturnOrderLine)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ReturnPortalClaim)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnOrderLine(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(returnportalclaim.ReturnOrderLineColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_order_line_return_portal_claim
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_order_line_return_portal_claim" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_order_line_return_portal_claim" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rpcq *ReturnPortalClaimQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rpcq.querySpec()
	if len(rpcq.modifiers) > 0 {
		_spec.Modifiers = rpcq.modifiers
	}
	_spec.Node.Columns = rpcq.ctx.Fields
	if len(rpcq.ctx.Fields) > 0 {
		_spec.Unique = rpcq.ctx.Unique != nil && *rpcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rpcq.driver, _spec)
}

func (rpcq *ReturnPortalClaimQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(returnportalclaim.Table, returnportalclaim.Columns, sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString))
	_spec.From = rpcq.sql
	if unique := rpcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rpcq.path != nil {
		_spec.Unique = true
	}
	if fields := rpcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, returnportalclaim.FieldID)
		for i := range fields {
			if fields[i] != returnportalclaim.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rpcq.withTenant != nil {
			_spec.Node.AddColumnOnce(returnportalclaim.FieldTenantID)
		}
	}
	if ps := rpcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rpcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rpcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rpcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rpcq *ReturnPortalClaimQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rpcq.driver.Dialect())
	t1 := builder.Table(returnportalclaim.Table)
	columns := rpcq.ctx.Fields
	if len(columns) == 0 {
		columns = returnportalclaim.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rpcq.sql != nil {
		selector = rpcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rpcq.ctx.Unique != nil && *rpcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rpcq.predicates {
		p(selector)
	}
	for _, p := range rpcq.order {
		p(selector)
	}
	if offset := rpcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rpcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedReturnOrderLine tells the query-builder to eager-load the nodes that are connected to the "return_order_line"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rpcq *ReturnPortalClaimQuery) WithNamedReturnOrderLine(name string, opts ...func(*ReturnOrderLineQuery)) *ReturnPortalClaimQuery {
	query := (&ReturnOrderLineClient{config: rpcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rpcq.withNamedReturnOrderLine == nil {
		rpcq.withNamedReturnOrderLine = make(map[string]*ReturnOrderLineQuery)
	}
	rpcq.withNamedReturnOrderLine[name] = query
	return rpcq
}

// ReturnPortalClaimGroupBy is the group-by builder for ReturnPortalClaim entities.
type ReturnPortalClaimGroupBy struct {
	selector
	build *ReturnPortalClaimQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rpcgb *ReturnPortalClaimGroupBy) Aggregate(fns ...AggregateFunc) *ReturnPortalClaimGroupBy {
	rpcgb.fns = append(rpcgb.fns, fns...)
	return rpcgb
}

// Scan applies the selector query and scans the result into the given value.
func (rpcgb *ReturnPortalClaimGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rpcgb.build.ctx, ent.OpQueryGroupBy)
	if err := rpcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReturnPortalClaimQuery, *ReturnPortalClaimGroupBy](ctx, rpcgb.build, rpcgb, rpcgb.build.inters, v)
}

func (rpcgb *ReturnPortalClaimGroupBy) sqlScan(ctx context.Context, root *ReturnPortalClaimQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rpcgb.fns))
	for _, fn := range rpcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rpcgb.flds)+len(rpcgb.fns))
		for _, f := range *rpcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rpcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ReturnPortalClaimSelect is the builder for selecting fields of ReturnPortalClaim entities.
type ReturnPortalClaimSelect struct {
	*ReturnPortalClaimQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rpcs *ReturnPortalClaimSelect) Aggregate(fns ...AggregateFunc) *ReturnPortalClaimSelect {
	rpcs.fns = append(rpcs.fns, fns...)
	return rpcs
}

// Scan applies the selector query and scans the result into the given value.
func (rpcs *ReturnPortalClaimSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rpcs.ctx, ent.OpQuerySelect)
	if err := rpcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReturnPortalClaimQuery, *ReturnPortalClaimSelect](ctx, rpcs.ReturnPortalClaimQuery, rpcs, rpcs.inters, v)
}

func (rpcs *ReturnPortalClaimSelect) sqlScan(ctx context.Context, root *ReturnPortalClaimQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rpcs.fns))
	for _, fn := range rpcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rpcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
