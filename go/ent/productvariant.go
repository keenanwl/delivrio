// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductVariant is the model entity for the ProductVariant schema.
type ProductVariant struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// ExternalID holds the value of the "external_ID" field.
	ExternalID string `json:"external_ID,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// EanNumber holds the value of the "ean_number" field.
	EanNumber *string `json:"ean_number,omitempty"`
	// WeightG holds the value of the "weight_g" field.
	WeightG *int `json:"weight_g,omitempty"`
	// DimensionLength holds the value of the "dimension_length" field.
	DimensionLength *int `json:"dimension_length,omitempty"`
	// DimensionWidth holds the value of the "dimension_width" field.
	DimensionWidth *int `json:"dimension_width,omitempty"`
	// DimensionHeight holds the value of the "dimension_height" field.
	DimensionHeight *int `json:"dimension_height,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductVariantQuery when eager-loading is set.
	Edges                   ProductVariantEdges `json:"edges"`
	product_product_variant *pulid.ID
	selectValues            sql.SelectValues
}

// ProductVariantEdges holds the relations/edges for other nodes in the graph.
type ProductVariantEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// OrderLines holds the value of the order_lines edge.
	OrderLines []*OrderLine `json:"order_lines,omitempty"`
	// ProductImage holds the value of the product_image edge.
	ProductImage []*ProductImage `json:"product_image,omitempty"`
	// InventoryItem holds the value of the inventory_item edge.
	InventoryItem *InventoryItem `json:"inventory_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedOrderLines   map[string][]*OrderLine
	namedProductImage map[string][]*ProductImage
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductVariantEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductVariantEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// OrderLinesOrErr returns the OrderLines value or an error if the edge
// was not loaded in eager-loading.
func (e ProductVariantEdges) OrderLinesOrErr() ([]*OrderLine, error) {
	if e.loadedTypes[2] {
		return e.OrderLines, nil
	}
	return nil, &NotLoadedError{edge: "order_lines"}
}

// ProductImageOrErr returns the ProductImage value or an error if the edge
// was not loaded in eager-loading.
func (e ProductVariantEdges) ProductImageOrErr() ([]*ProductImage, error) {
	if e.loadedTypes[3] {
		return e.ProductImage, nil
	}
	return nil, &NotLoadedError{edge: "product_image"}
}

// InventoryItemOrErr returns the InventoryItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductVariantEdges) InventoryItemOrErr() (*InventoryItem, error) {
	if e.InventoryItem != nil {
		return e.InventoryItem, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: inventoryitem.Label}
	}
	return nil, &NotLoadedError{edge: "inventory_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductVariant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productvariant.FieldID, productvariant.FieldTenantID:
			values[i] = new(pulid.ID)
		case productvariant.FieldArchived:
			values[i] = new(sql.NullBool)
		case productvariant.FieldWeightG, productvariant.FieldDimensionLength, productvariant.FieldDimensionWidth, productvariant.FieldDimensionHeight:
			values[i] = new(sql.NullInt64)
		case productvariant.FieldExternalID, productvariant.FieldDescription, productvariant.FieldEanNumber:
			values[i] = new(sql.NullString)
		case productvariant.FieldCreatedAt, productvariant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case productvariant.ForeignKeys[0]: // product_product_variant
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductVariant fields.
func (pv *ProductVariant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productvariant.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pv.ID = *value
			}
		case productvariant.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pv.TenantID = *value
			}
		case productvariant.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				pv.Archived = value.Bool
			}
		case productvariant.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_ID", values[i])
			} else if value.Valid {
				pv.ExternalID = value.String
			}
		case productvariant.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pv.Description = value.String
			}
		case productvariant.FieldEanNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ean_number", values[i])
			} else if value.Valid {
				pv.EanNumber = new(string)
				*pv.EanNumber = value.String
			}
		case productvariant.FieldWeightG:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_g", values[i])
			} else if value.Valid {
				pv.WeightG = new(int)
				*pv.WeightG = int(value.Int64)
			}
		case productvariant.FieldDimensionLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dimension_length", values[i])
			} else if value.Valid {
				pv.DimensionLength = new(int)
				*pv.DimensionLength = int(value.Int64)
			}
		case productvariant.FieldDimensionWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dimension_width", values[i])
			} else if value.Valid {
				pv.DimensionWidth = new(int)
				*pv.DimensionWidth = int(value.Int64)
			}
		case productvariant.FieldDimensionHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dimension_height", values[i])
			} else if value.Valid {
				pv.DimensionHeight = new(int)
				*pv.DimensionHeight = int(value.Int64)
			}
		case productvariant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pv.CreatedAt = value.Time
			}
		case productvariant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pv.UpdatedAt = value.Time
			}
		case productvariant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_product_variant", values[i])
			} else if value.Valid {
				pv.product_product_variant = new(pulid.ID)
				*pv.product_product_variant = *value.S.(*pulid.ID)
			}
		default:
			pv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductVariant.
// This includes values selected through modifiers, order, etc.
func (pv *ProductVariant) Value(name string) (ent.Value, error) {
	return pv.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ProductVariant entity.
func (pv *ProductVariant) QueryTenant() *TenantQuery {
	return NewProductVariantClient(pv.config).QueryTenant(pv)
}

// QueryProduct queries the "product" edge of the ProductVariant entity.
func (pv *ProductVariant) QueryProduct() *ProductQuery {
	return NewProductVariantClient(pv.config).QueryProduct(pv)
}

// QueryOrderLines queries the "order_lines" edge of the ProductVariant entity.
func (pv *ProductVariant) QueryOrderLines() *OrderLineQuery {
	return NewProductVariantClient(pv.config).QueryOrderLines(pv)
}

// QueryProductImage queries the "product_image" edge of the ProductVariant entity.
func (pv *ProductVariant) QueryProductImage() *ProductImageQuery {
	return NewProductVariantClient(pv.config).QueryProductImage(pv)
}

// QueryInventoryItem queries the "inventory_item" edge of the ProductVariant entity.
func (pv *ProductVariant) QueryInventoryItem() *InventoryItemQuery {
	return NewProductVariantClient(pv.config).QueryInventoryItem(pv)
}

// Update returns a builder for updating this ProductVariant.
// Note that you need to call ProductVariant.Unwrap() before calling this method if this ProductVariant
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *ProductVariant) Update() *ProductVariantUpdateOne {
	return NewProductVariantClient(pv.config).UpdateOne(pv)
}

// Unwrap unwraps the ProductVariant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *ProductVariant) Unwrap() *ProductVariant {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductVariant is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *ProductVariant) String() string {
	var builder strings.Builder
	builder.WriteString("ProductVariant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pv.TenantID))
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", pv.Archived))
	builder.WriteString(", ")
	builder.WriteString("external_ID=")
	builder.WriteString(pv.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pv.Description)
	builder.WriteString(", ")
	if v := pv.EanNumber; v != nil {
		builder.WriteString("ean_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pv.WeightG; v != nil {
		builder.WriteString("weight_g=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pv.DimensionLength; v != nil {
		builder.WriteString("dimension_length=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pv.DimensionWidth; v != nil {
		builder.WriteString("dimension_width=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pv.DimensionHeight; v != nil {
		builder.WriteString("dimension_height=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrderLines returns the OrderLines named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *ProductVariant) NamedOrderLines(name string) ([]*OrderLine, error) {
	if pv.Edges.namedOrderLines == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedOrderLines[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *ProductVariant) appendNamedOrderLines(name string, edges ...*OrderLine) {
	if pv.Edges.namedOrderLines == nil {
		pv.Edges.namedOrderLines = make(map[string][]*OrderLine)
	}
	if len(edges) == 0 {
		pv.Edges.namedOrderLines[name] = []*OrderLine{}
	} else {
		pv.Edges.namedOrderLines[name] = append(pv.Edges.namedOrderLines[name], edges...)
	}
}

// NamedProductImage returns the ProductImage named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pv *ProductVariant) NamedProductImage(name string) ([]*ProductImage, error) {
	if pv.Edges.namedProductImage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pv.Edges.namedProductImage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pv *ProductVariant) appendNamedProductImage(name string, edges ...*ProductImage) {
	if pv.Edges.namedProductImage == nil {
		pv.Edges.namedProductImage = make(map[string][]*ProductImage)
	}
	if len(edges) == 0 {
		pv.Edges.namedProductImage[name] = []*ProductImage{}
	} else {
		pv.Edges.namedProductImage[name] = append(pv.Edges.namedProductImage[name], edges...)
	}
}

// ProductVariants is a parsable slice of ProductVariant.
type ProductVariants []*ProductVariant
