// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnColliHistoryUpdate is the builder for updating ReturnColliHistory entities.
type ReturnColliHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ReturnColliHistoryMutation
}

// Where appends a list predicates to the ReturnColliHistoryUpdate builder.
func (rchu *ReturnColliHistoryUpdate) Where(ps ...predicate.ReturnColliHistory) *ReturnColliHistoryUpdate {
	rchu.mutation.Where(ps...)
	return rchu
}

// SetTenantID sets the "tenant_id" field.
func (rchu *ReturnColliHistoryUpdate) SetTenantID(pu pulid.ID) *ReturnColliHistoryUpdate {
	rchu.mutation.SetTenantID(pu)
	return rchu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rchu *ReturnColliHistoryUpdate) SetNillableTenantID(pu *pulid.ID) *ReturnColliHistoryUpdate {
	if pu != nil {
		rchu.SetTenantID(*pu)
	}
	return rchu
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (rchu *ReturnColliHistoryUpdate) SetChangeHistoryID(id pulid.ID) *ReturnColliHistoryUpdate {
	rchu.mutation.SetChangeHistoryID(id)
	return rchu
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (rchu *ReturnColliHistoryUpdate) SetChangeHistory(c *ChangeHistory) *ReturnColliHistoryUpdate {
	return rchu.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rchu *ReturnColliHistoryUpdate) SetTenant(t *Tenant) *ReturnColliHistoryUpdate {
	return rchu.SetTenantID(t.ID)
}

// SetReturnColliID sets the "return_colli" edge to the ReturnColli entity by ID.
func (rchu *ReturnColliHistoryUpdate) SetReturnColliID(id pulid.ID) *ReturnColliHistoryUpdate {
	rchu.mutation.SetReturnColliID(id)
	return rchu
}

// SetReturnColli sets the "return_colli" edge to the ReturnColli entity.
func (rchu *ReturnColliHistoryUpdate) SetReturnColli(r *ReturnColli) *ReturnColliHistoryUpdate {
	return rchu.SetReturnColliID(r.ID)
}

// Mutation returns the ReturnColliHistoryMutation object of the builder.
func (rchu *ReturnColliHistoryUpdate) Mutation() *ReturnColliHistoryMutation {
	return rchu.mutation
}

// ClearChangeHistory clears the "change_history" edge to the ChangeHistory entity.
func (rchu *ReturnColliHistoryUpdate) ClearChangeHistory() *ReturnColliHistoryUpdate {
	rchu.mutation.ClearChangeHistory()
	return rchu
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rchu *ReturnColliHistoryUpdate) ClearTenant() *ReturnColliHistoryUpdate {
	rchu.mutation.ClearTenant()
	return rchu
}

// ClearReturnColli clears the "return_colli" edge to the ReturnColli entity.
func (rchu *ReturnColliHistoryUpdate) ClearReturnColli() *ReturnColliHistoryUpdate {
	rchu.mutation.ClearReturnColli()
	return rchu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rchu *ReturnColliHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rchu.sqlSave, rchu.mutation, rchu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rchu *ReturnColliHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := rchu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rchu *ReturnColliHistoryUpdate) Exec(ctx context.Context) error {
	_, err := rchu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rchu *ReturnColliHistoryUpdate) ExecX(ctx context.Context) {
	if err := rchu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rchu *ReturnColliHistoryUpdate) check() error {
	if rchu.mutation.ChangeHistoryCleared() && len(rchu.mutation.ChangeHistoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColliHistory.change_history"`)
	}
	if rchu.mutation.TenantCleared() && len(rchu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColliHistory.tenant"`)
	}
	if rchu.mutation.ReturnColliCleared() && len(rchu.mutation.ReturnColliIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColliHistory.return_colli"`)
	}
	return nil
}

func (rchu *ReturnColliHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rchu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(returncollihistory.Table, returncollihistory.Columns, sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString))
	if ps := rchu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rchu.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ChangeHistoryTable,
			Columns: []string{returncollihistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rchu.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ChangeHistoryTable,
			Columns: []string{returncollihistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rchu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncollihistory.TenantTable,
			Columns: []string{returncollihistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rchu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncollihistory.TenantTable,
			Columns: []string{returncollihistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rchu.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ReturnColliTable,
			Columns: []string{returncollihistory.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rchu.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ReturnColliTable,
			Columns: []string{returncollihistory.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rchu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returncollihistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rchu.mutation.done = true
	return n, nil
}

// ReturnColliHistoryUpdateOne is the builder for updating a single ReturnColliHistory entity.
type ReturnColliHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReturnColliHistoryMutation
}

// SetTenantID sets the "tenant_id" field.
func (rchuo *ReturnColliHistoryUpdateOne) SetTenantID(pu pulid.ID) *ReturnColliHistoryUpdateOne {
	rchuo.mutation.SetTenantID(pu)
	return rchuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rchuo *ReturnColliHistoryUpdateOne) SetNillableTenantID(pu *pulid.ID) *ReturnColliHistoryUpdateOne {
	if pu != nil {
		rchuo.SetTenantID(*pu)
	}
	return rchuo
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (rchuo *ReturnColliHistoryUpdateOne) SetChangeHistoryID(id pulid.ID) *ReturnColliHistoryUpdateOne {
	rchuo.mutation.SetChangeHistoryID(id)
	return rchuo
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (rchuo *ReturnColliHistoryUpdateOne) SetChangeHistory(c *ChangeHistory) *ReturnColliHistoryUpdateOne {
	return rchuo.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rchuo *ReturnColliHistoryUpdateOne) SetTenant(t *Tenant) *ReturnColliHistoryUpdateOne {
	return rchuo.SetTenantID(t.ID)
}

// SetReturnColliID sets the "return_colli" edge to the ReturnColli entity by ID.
func (rchuo *ReturnColliHistoryUpdateOne) SetReturnColliID(id pulid.ID) *ReturnColliHistoryUpdateOne {
	rchuo.mutation.SetReturnColliID(id)
	return rchuo
}

// SetReturnColli sets the "return_colli" edge to the ReturnColli entity.
func (rchuo *ReturnColliHistoryUpdateOne) SetReturnColli(r *ReturnColli) *ReturnColliHistoryUpdateOne {
	return rchuo.SetReturnColliID(r.ID)
}

// Mutation returns the ReturnColliHistoryMutation object of the builder.
func (rchuo *ReturnColliHistoryUpdateOne) Mutation() *ReturnColliHistoryMutation {
	return rchuo.mutation
}

// ClearChangeHistory clears the "change_history" edge to the ChangeHistory entity.
func (rchuo *ReturnColliHistoryUpdateOne) ClearChangeHistory() *ReturnColliHistoryUpdateOne {
	rchuo.mutation.ClearChangeHistory()
	return rchuo
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rchuo *ReturnColliHistoryUpdateOne) ClearTenant() *ReturnColliHistoryUpdateOne {
	rchuo.mutation.ClearTenant()
	return rchuo
}

// ClearReturnColli clears the "return_colli" edge to the ReturnColli entity.
func (rchuo *ReturnColliHistoryUpdateOne) ClearReturnColli() *ReturnColliHistoryUpdateOne {
	rchuo.mutation.ClearReturnColli()
	return rchuo
}

// Where appends a list predicates to the ReturnColliHistoryUpdate builder.
func (rchuo *ReturnColliHistoryUpdateOne) Where(ps ...predicate.ReturnColliHistory) *ReturnColliHistoryUpdateOne {
	rchuo.mutation.Where(ps...)
	return rchuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rchuo *ReturnColliHistoryUpdateOne) Select(field string, fields ...string) *ReturnColliHistoryUpdateOne {
	rchuo.fields = append([]string{field}, fields...)
	return rchuo
}

// Save executes the query and returns the updated ReturnColliHistory entity.
func (rchuo *ReturnColliHistoryUpdateOne) Save(ctx context.Context) (*ReturnColliHistory, error) {
	return withHooks(ctx, rchuo.sqlSave, rchuo.mutation, rchuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rchuo *ReturnColliHistoryUpdateOne) SaveX(ctx context.Context) *ReturnColliHistory {
	node, err := rchuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rchuo *ReturnColliHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := rchuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rchuo *ReturnColliHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := rchuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rchuo *ReturnColliHistoryUpdateOne) check() error {
	if rchuo.mutation.ChangeHistoryCleared() && len(rchuo.mutation.ChangeHistoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColliHistory.change_history"`)
	}
	if rchuo.mutation.TenantCleared() && len(rchuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColliHistory.tenant"`)
	}
	if rchuo.mutation.ReturnColliCleared() && len(rchuo.mutation.ReturnColliIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnColliHistory.return_colli"`)
	}
	return nil
}

func (rchuo *ReturnColliHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ReturnColliHistory, err error) {
	if err := rchuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(returncollihistory.Table, returncollihistory.Columns, sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString))
	id, ok := rchuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReturnColliHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rchuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, returncollihistory.FieldID)
		for _, f := range fields {
			if !returncollihistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != returncollihistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rchuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rchuo.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ChangeHistoryTable,
			Columns: []string{returncollihistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rchuo.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ChangeHistoryTable,
			Columns: []string{returncollihistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rchuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncollihistory.TenantTable,
			Columns: []string{returncollihistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rchuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncollihistory.TenantTable,
			Columns: []string{returncollihistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rchuo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ReturnColliTable,
			Columns: []string{returncollihistory.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rchuo.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ReturnColliTable,
			Columns: []string{returncollihistory.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReturnColliHistory{config: rchuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rchuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returncollihistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rchuo.mutation.done = true
	return _node, nil
}
