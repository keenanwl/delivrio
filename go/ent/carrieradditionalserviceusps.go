// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierAdditionalServiceUSPS is the model entity for the CarrierAdditionalServiceUSPS schema.
type CarrierAdditionalServiceUSPS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// For filtering away rarely used options in the UI
	CommonlyUsed bool `json:"commonly_used,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID carrieradditionalserviceusps.InternalID `json:"internal_id,omitempty"`
	// ServiceID to be included in XML payload
	APICode string `json:"api_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierAdditionalServiceUSPSQuery when eager-loading is set.
	Edges                                                CarrierAdditionalServiceUSPSEdges `json:"edges"`
	carrier_service_usps_carrier_additional_service_usps *pulid.ID
	selectValues                                         sql.SelectValues
}

// CarrierAdditionalServiceUSPSEdges holds the relations/edges for other nodes in the graph.
type CarrierAdditionalServiceUSPSEdges struct {
	// CarrierServiceUSPS holds the value of the carrier_service_usps edge.
	CarrierServiceUSPS *CarrierServiceUSPS `json:"carrier_service_usps,omitempty"`
	// DeliveryOptionUSPS holds the value of the delivery_option_usps edge.
	DeliveryOptionUSPS []*DeliveryOptionUSPS `json:"delivery_option_usps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedDeliveryOptionUSPS map[string][]*DeliveryOptionUSPS
}

// CarrierServiceUSPSOrErr returns the CarrierServiceUSPS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierAdditionalServiceUSPSEdges) CarrierServiceUSPSOrErr() (*CarrierServiceUSPS, error) {
	if e.CarrierServiceUSPS != nil {
		return e.CarrierServiceUSPS, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierserviceusps.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_usps"}
}

// DeliveryOptionUSPSOrErr returns the DeliveryOptionUSPS value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceUSPSEdges) DeliveryOptionUSPSOrErr() ([]*DeliveryOptionUSPS, error) {
	if e.loadedTypes[1] {
		return e.DeliveryOptionUSPS, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option_usps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierAdditionalServiceUSPS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrieradditionalserviceusps.FieldID:
			values[i] = new(pulid.ID)
		case carrieradditionalserviceusps.FieldCommonlyUsed:
			values[i] = new(sql.NullBool)
		case carrieradditionalserviceusps.FieldLabel, carrieradditionalserviceusps.FieldInternalID, carrieradditionalserviceusps.FieldAPICode:
			values[i] = new(sql.NullString)
		case carrieradditionalserviceusps.ForeignKeys[0]: // carrier_service_usps_carrier_additional_service_usps
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierAdditionalServiceUSPS fields.
func (casu *CarrierAdditionalServiceUSPS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrieradditionalserviceusps.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				casu.ID = *value
			}
		case carrieradditionalserviceusps.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				casu.Label = value.String
			}
		case carrieradditionalserviceusps.FieldCommonlyUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field commonly_used", values[i])
			} else if value.Valid {
				casu.CommonlyUsed = value.Bool
			}
		case carrieradditionalserviceusps.FieldInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				casu.InternalID = carrieradditionalserviceusps.InternalID(value.String)
			}
		case carrieradditionalserviceusps.FieldAPICode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_code", values[i])
			} else if value.Valid {
				casu.APICode = value.String
			}
		case carrieradditionalserviceusps.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_service_usps_carrier_additional_service_usps", values[i])
			} else if value.Valid {
				casu.carrier_service_usps_carrier_additional_service_usps = new(pulid.ID)
				*casu.carrier_service_usps_carrier_additional_service_usps = *value.S.(*pulid.ID)
			}
		default:
			casu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierAdditionalServiceUSPS.
// This includes values selected through modifiers, order, etc.
func (casu *CarrierAdditionalServiceUSPS) Value(name string) (ent.Value, error) {
	return casu.selectValues.Get(name)
}

// QueryCarrierServiceUSPS queries the "carrier_service_usps" edge of the CarrierAdditionalServiceUSPS entity.
func (casu *CarrierAdditionalServiceUSPS) QueryCarrierServiceUSPS() *CarrierServiceUSPSQuery {
	return NewCarrierAdditionalServiceUSPSClient(casu.config).QueryCarrierServiceUSPS(casu)
}

// QueryDeliveryOptionUSPS queries the "delivery_option_usps" edge of the CarrierAdditionalServiceUSPS entity.
func (casu *CarrierAdditionalServiceUSPS) QueryDeliveryOptionUSPS() *DeliveryOptionUSPSQuery {
	return NewCarrierAdditionalServiceUSPSClient(casu.config).QueryDeliveryOptionUSPS(casu)
}

// Update returns a builder for updating this CarrierAdditionalServiceUSPS.
// Note that you need to call CarrierAdditionalServiceUSPS.Unwrap() before calling this method if this CarrierAdditionalServiceUSPS
// was returned from a transaction, and the transaction was committed or rolled back.
func (casu *CarrierAdditionalServiceUSPS) Update() *CarrierAdditionalServiceUSPSUpdateOne {
	return NewCarrierAdditionalServiceUSPSClient(casu.config).UpdateOne(casu)
}

// Unwrap unwraps the CarrierAdditionalServiceUSPS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (casu *CarrierAdditionalServiceUSPS) Unwrap() *CarrierAdditionalServiceUSPS {
	_tx, ok := casu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierAdditionalServiceUSPS is not a transactional entity")
	}
	casu.config.driver = _tx.drv
	return casu
}

// String implements the fmt.Stringer.
func (casu *CarrierAdditionalServiceUSPS) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierAdditionalServiceUSPS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", casu.ID))
	builder.WriteString("label=")
	builder.WriteString(casu.Label)
	builder.WriteString(", ")
	builder.WriteString("commonly_used=")
	builder.WriteString(fmt.Sprintf("%v", casu.CommonlyUsed))
	builder.WriteString(", ")
	builder.WriteString("internal_id=")
	builder.WriteString(fmt.Sprintf("%v", casu.InternalID))
	builder.WriteString(", ")
	builder.WriteString("api_code=")
	builder.WriteString(casu.APICode)
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryOptionUSPS returns the DeliveryOptionUSPS named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casu *CarrierAdditionalServiceUSPS) NamedDeliveryOptionUSPS(name string) ([]*DeliveryOptionUSPS, error) {
	if casu.Edges.namedDeliveryOptionUSPS == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casu.Edges.namedDeliveryOptionUSPS[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casu *CarrierAdditionalServiceUSPS) appendNamedDeliveryOptionUSPS(name string, edges ...*DeliveryOptionUSPS) {
	if casu.Edges.namedDeliveryOptionUSPS == nil {
		casu.Edges.namedDeliveryOptionUSPS = make(map[string][]*DeliveryOptionUSPS)
	}
	if len(edges) == 0 {
		casu.Edges.namedDeliveryOptionUSPS[name] = []*DeliveryOptionUSPS{}
	} else {
		casu.Edges.namedDeliveryOptionUSPS[name] = append(casu.Edges.namedDeliveryOptionUSPS[name], edges...)
	}
}

// CarrierAdditionalServiceUSPSs is a parsable slice of CarrierAdditionalServiceUSPS.
type CarrierAdditionalServiceUSPSs []*CarrierAdditionalServiceUSPS
