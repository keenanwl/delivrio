// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceGLSQuery is the builder for querying CarrierServiceGLS entities.
type CarrierServiceGLSQuery struct {
	config
	ctx                                  *QueryContext
	order                                []carrierservicegls.OrderOption
	inters                               []Interceptor
	predicates                           []predicate.CarrierServiceGLS
	withCarrierService                   *CarrierServiceQuery
	withCarrierAdditionalServiceGLS      *CarrierAdditionalServiceGLSQuery
	withFKs                              bool
	modifiers                            []func(*sql.Selector)
	loadTotal                            []func(context.Context, []*CarrierServiceGLS) error
	withNamedCarrierAdditionalServiceGLS map[string]*CarrierAdditionalServiceGLSQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierServiceGLSQuery builder.
func (csgq *CarrierServiceGLSQuery) Where(ps ...predicate.CarrierServiceGLS) *CarrierServiceGLSQuery {
	csgq.predicates = append(csgq.predicates, ps...)
	return csgq
}

// Limit the number of records to be returned by this query.
func (csgq *CarrierServiceGLSQuery) Limit(limit int) *CarrierServiceGLSQuery {
	csgq.ctx.Limit = &limit
	return csgq
}

// Offset to start from.
func (csgq *CarrierServiceGLSQuery) Offset(offset int) *CarrierServiceGLSQuery {
	csgq.ctx.Offset = &offset
	return csgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (csgq *CarrierServiceGLSQuery) Unique(unique bool) *CarrierServiceGLSQuery {
	csgq.ctx.Unique = &unique
	return csgq
}

// Order specifies how the records should be ordered.
func (csgq *CarrierServiceGLSQuery) Order(o ...carrierservicegls.OrderOption) *CarrierServiceGLSQuery {
	csgq.order = append(csgq.order, o...)
	return csgq
}

// QueryCarrierService chains the current query on the "carrier_service" edge.
func (csgq *CarrierServiceGLSQuery) QueryCarrierService() *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: csgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicegls.Table, carrierservicegls.FieldID, selector),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicegls.CarrierServiceTable, carrierservicegls.CarrierServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(csgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServiceGLS chains the current query on the "carrier_additional_service_gls" edge.
func (csgq *CarrierServiceGLSQuery) QueryCarrierAdditionalServiceGLS() *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: csgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicegls.Table, carrierservicegls.FieldID, selector),
			sqlgraph.To(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierservicegls.CarrierAdditionalServiceGLSTable, carrierservicegls.CarrierAdditionalServiceGLSColumn),
		)
		fromU = sqlgraph.SetNeighbors(csgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierServiceGLS entity from the query.
// Returns a *NotFoundError when no CarrierServiceGLS was found.
func (csgq *CarrierServiceGLSQuery) First(ctx context.Context) (*CarrierServiceGLS, error) {
	nodes, err := csgq.Limit(1).All(setContextOp(ctx, csgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrierservicegls.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (csgq *CarrierServiceGLSQuery) FirstX(ctx context.Context) *CarrierServiceGLS {
	node, err := csgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierServiceGLS ID from the query.
// Returns a *NotFoundError when no CarrierServiceGLS ID was found.
func (csgq *CarrierServiceGLSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = csgq.Limit(1).IDs(setContextOp(ctx, csgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrierservicegls.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (csgq *CarrierServiceGLSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := csgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierServiceGLS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierServiceGLS entity is found.
// Returns a *NotFoundError when no CarrierServiceGLS entities are found.
func (csgq *CarrierServiceGLSQuery) Only(ctx context.Context) (*CarrierServiceGLS, error) {
	nodes, err := csgq.Limit(2).All(setContextOp(ctx, csgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrierservicegls.Label}
	default:
		return nil, &NotSingularError{carrierservicegls.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (csgq *CarrierServiceGLSQuery) OnlyX(ctx context.Context) *CarrierServiceGLS {
	node, err := csgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierServiceGLS ID in the query.
// Returns a *NotSingularError when more than one CarrierServiceGLS ID is found.
// Returns a *NotFoundError when no entities are found.
func (csgq *CarrierServiceGLSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = csgq.Limit(2).IDs(setContextOp(ctx, csgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrierservicegls.Label}
	default:
		err = &NotSingularError{carrierservicegls.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (csgq *CarrierServiceGLSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := csgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierServiceGLSs.
func (csgq *CarrierServiceGLSQuery) All(ctx context.Context) ([]*CarrierServiceGLS, error) {
	ctx = setContextOp(ctx, csgq.ctx, ent.OpQueryAll)
	if err := csgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierServiceGLS, *CarrierServiceGLSQuery]()
	return withInterceptors[[]*CarrierServiceGLS](ctx, csgq, qr, csgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (csgq *CarrierServiceGLSQuery) AllX(ctx context.Context) []*CarrierServiceGLS {
	nodes, err := csgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierServiceGLS IDs.
func (csgq *CarrierServiceGLSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if csgq.ctx.Unique == nil && csgq.path != nil {
		csgq.Unique(true)
	}
	ctx = setContextOp(ctx, csgq.ctx, ent.OpQueryIDs)
	if err = csgq.Select(carrierservicegls.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (csgq *CarrierServiceGLSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := csgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (csgq *CarrierServiceGLSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, csgq.ctx, ent.OpQueryCount)
	if err := csgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, csgq, querierCount[*CarrierServiceGLSQuery](), csgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (csgq *CarrierServiceGLSQuery) CountX(ctx context.Context) int {
	count, err := csgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (csgq *CarrierServiceGLSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, csgq.ctx, ent.OpQueryExist)
	switch _, err := csgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (csgq *CarrierServiceGLSQuery) ExistX(ctx context.Context) bool {
	exist, err := csgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierServiceGLSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (csgq *CarrierServiceGLSQuery) Clone() *CarrierServiceGLSQuery {
	if csgq == nil {
		return nil
	}
	return &CarrierServiceGLSQuery{
		config:                          csgq.config,
		ctx:                             csgq.ctx.Clone(),
		order:                           append([]carrierservicegls.OrderOption{}, csgq.order...),
		inters:                          append([]Interceptor{}, csgq.inters...),
		predicates:                      append([]predicate.CarrierServiceGLS{}, csgq.predicates...),
		withCarrierService:              csgq.withCarrierService.Clone(),
		withCarrierAdditionalServiceGLS: csgq.withCarrierAdditionalServiceGLS.Clone(),
		// clone intermediate query.
		sql:  csgq.sql.Clone(),
		path: csgq.path,
	}
}

// WithCarrierService tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service" edge. The optional arguments are used to configure the query builder of the edge.
func (csgq *CarrierServiceGLSQuery) WithCarrierService(opts ...func(*CarrierServiceQuery)) *CarrierServiceGLSQuery {
	query := (&CarrierServiceClient{config: csgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csgq.withCarrierService = query
	return csgq
}

// WithCarrierAdditionalServiceGLS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_gls" edge. The optional arguments are used to configure the query builder of the edge.
func (csgq *CarrierServiceGLSQuery) WithCarrierAdditionalServiceGLS(opts ...func(*CarrierAdditionalServiceGLSQuery)) *CarrierServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: csgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csgq.withCarrierAdditionalServiceGLS = query
	return csgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		APIKey string `json:"api_key,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierServiceGLS.Query().
//		GroupBy(carrierservicegls.FieldAPIKey).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (csgq *CarrierServiceGLSQuery) GroupBy(field string, fields ...string) *CarrierServiceGLSGroupBy {
	csgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierServiceGLSGroupBy{build: csgq}
	grbuild.flds = &csgq.ctx.Fields
	grbuild.label = carrierservicegls.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		APIKey string `json:"api_key,omitempty"`
//	}
//
//	client.CarrierServiceGLS.Query().
//		Select(carrierservicegls.FieldAPIKey).
//		Scan(ctx, &v)
func (csgq *CarrierServiceGLSQuery) Select(fields ...string) *CarrierServiceGLSSelect {
	csgq.ctx.Fields = append(csgq.ctx.Fields, fields...)
	sbuild := &CarrierServiceGLSSelect{CarrierServiceGLSQuery: csgq}
	sbuild.label = carrierservicegls.Label
	sbuild.flds, sbuild.scan = &csgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierServiceGLSSelect configured with the given aggregations.
func (csgq *CarrierServiceGLSQuery) Aggregate(fns ...AggregateFunc) *CarrierServiceGLSSelect {
	return csgq.Select().Aggregate(fns...)
}

func (csgq *CarrierServiceGLSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range csgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, csgq); err != nil {
				return err
			}
		}
	}
	for _, f := range csgq.ctx.Fields {
		if !carrierservicegls.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if csgq.path != nil {
		prev, err := csgq.path(ctx)
		if err != nil {
			return err
		}
		csgq.sql = prev
	}
	if carrierservicegls.Policy == nil {
		return errors.New("ent: uninitialized carrierservicegls.Policy (forgotten import ent/runtime?)")
	}
	if err := carrierservicegls.Policy.EvalQuery(ctx, csgq); err != nil {
		return err
	}
	return nil
}

func (csgq *CarrierServiceGLSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierServiceGLS, error) {
	var (
		nodes       = []*CarrierServiceGLS{}
		withFKs     = csgq.withFKs
		_spec       = csgq.querySpec()
		loadedTypes = [2]bool{
			csgq.withCarrierService != nil,
			csgq.withCarrierAdditionalServiceGLS != nil,
		}
	)
	if csgq.withCarrierService != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicegls.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierServiceGLS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierServiceGLS{config: csgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(csgq.modifiers) > 0 {
		_spec.Modifiers = csgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, csgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := csgq.withCarrierService; query != nil {
		if err := csgq.loadCarrierService(ctx, query, nodes, nil,
			func(n *CarrierServiceGLS, e *CarrierService) { n.Edges.CarrierService = e }); err != nil {
			return nil, err
		}
	}
	if query := csgq.withCarrierAdditionalServiceGLS; query != nil {
		if err := csgq.loadCarrierAdditionalServiceGLS(ctx, query, nodes,
			func(n *CarrierServiceGLS) { n.Edges.CarrierAdditionalServiceGLS = []*CarrierAdditionalServiceGLS{} },
			func(n *CarrierServiceGLS, e *CarrierAdditionalServiceGLS) {
				n.Edges.CarrierAdditionalServiceGLS = append(n.Edges.CarrierAdditionalServiceGLS, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range csgq.withNamedCarrierAdditionalServiceGLS {
		if err := csgq.loadCarrierAdditionalServiceGLS(ctx, query, nodes,
			func(n *CarrierServiceGLS) { n.appendNamedCarrierAdditionalServiceGLS(name) },
			func(n *CarrierServiceGLS, e *CarrierAdditionalServiceGLS) {
				n.appendNamedCarrierAdditionalServiceGLS(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range csgq.loadTotal {
		if err := csgq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (csgq *CarrierServiceGLSQuery) loadCarrierService(ctx context.Context, query *CarrierServiceQuery, nodes []*CarrierServiceGLS, init func(*CarrierServiceGLS), assign func(*CarrierServiceGLS, *CarrierService)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierServiceGLS)
	for i := range nodes {
		if nodes[i].carrier_service_carrier_service_gls == nil {
			continue
		}
		fk := *nodes[i].carrier_service_carrier_service_gls
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierservice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_service_carrier_service_gls" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (csgq *CarrierServiceGLSQuery) loadCarrierAdditionalServiceGLS(ctx context.Context, query *CarrierAdditionalServiceGLSQuery, nodes []*CarrierServiceGLS, init func(*CarrierServiceGLS), assign func(*CarrierServiceGLS, *CarrierAdditionalServiceGLS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierServiceGLS)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CarrierAdditionalServiceGLS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierservicegls.CarrierAdditionalServiceGLSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_gls_carrier_additional_service_gls
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_gls_carrier_additional_service_gls" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_gls_carrier_additional_service_gls" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (csgq *CarrierServiceGLSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := csgq.querySpec()
	if len(csgq.modifiers) > 0 {
		_spec.Modifiers = csgq.modifiers
	}
	_spec.Node.Columns = csgq.ctx.Fields
	if len(csgq.ctx.Fields) > 0 {
		_spec.Unique = csgq.ctx.Unique != nil && *csgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, csgq.driver, _spec)
}

func (csgq *CarrierServiceGLSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrierservicegls.Table, carrierservicegls.Columns, sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString))
	_spec.From = csgq.sql
	if unique := csgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if csgq.path != nil {
		_spec.Unique = true
	}
	if fields := csgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicegls.FieldID)
		for i := range fields {
			if fields[i] != carrierservicegls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := csgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := csgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := csgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := csgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (csgq *CarrierServiceGLSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(csgq.driver.Dialect())
	t1 := builder.Table(carrierservicegls.Table)
	columns := csgq.ctx.Fields
	if len(columns) == 0 {
		columns = carrierservicegls.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if csgq.sql != nil {
		selector = csgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if csgq.ctx.Unique != nil && *csgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range csgq.predicates {
		p(selector)
	}
	for _, p := range csgq.order {
		p(selector)
	}
	if offset := csgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := csgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierAdditionalServiceGLS tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_gls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (csgq *CarrierServiceGLSQuery) WithNamedCarrierAdditionalServiceGLS(name string, opts ...func(*CarrierAdditionalServiceGLSQuery)) *CarrierServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: csgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if csgq.withNamedCarrierAdditionalServiceGLS == nil {
		csgq.withNamedCarrierAdditionalServiceGLS = make(map[string]*CarrierAdditionalServiceGLSQuery)
	}
	csgq.withNamedCarrierAdditionalServiceGLS[name] = query
	return csgq
}

// CarrierServiceGLSGroupBy is the group-by builder for CarrierServiceGLS entities.
type CarrierServiceGLSGroupBy struct {
	selector
	build *CarrierServiceGLSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (csggb *CarrierServiceGLSGroupBy) Aggregate(fns ...AggregateFunc) *CarrierServiceGLSGroupBy {
	csggb.fns = append(csggb.fns, fns...)
	return csggb
}

// Scan applies the selector query and scans the result into the given value.
func (csggb *CarrierServiceGLSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csggb.build.ctx, ent.OpQueryGroupBy)
	if err := csggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServiceGLSQuery, *CarrierServiceGLSGroupBy](ctx, csggb.build, csggb, csggb.build.inters, v)
}

func (csggb *CarrierServiceGLSGroupBy) sqlScan(ctx context.Context, root *CarrierServiceGLSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(csggb.fns))
	for _, fn := range csggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*csggb.flds)+len(csggb.fns))
		for _, f := range *csggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*csggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierServiceGLSSelect is the builder for selecting fields of CarrierServiceGLS entities.
type CarrierServiceGLSSelect struct {
	*CarrierServiceGLSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (csgs *CarrierServiceGLSSelect) Aggregate(fns ...AggregateFunc) *CarrierServiceGLSSelect {
	csgs.fns = append(csgs.fns, fns...)
	return csgs
}

// Scan applies the selector query and scans the result into the given value.
func (csgs *CarrierServiceGLSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csgs.ctx, ent.OpQuerySelect)
	if err := csgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServiceGLSQuery, *CarrierServiceGLSSelect](ctx, csgs.CarrierServiceGLSQuery, csgs, csgs.inters, v)
}

func (csgs *CarrierServiceGLSSelect) sqlScan(ctx context.Context, root *CarrierServiceGLSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(csgs.fns))
	for _, fn := range csgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*csgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
