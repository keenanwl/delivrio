// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceGLSQuery is the builder for querying CarrierAdditionalServiceGLS entities.
type CarrierAdditionalServiceGLSQuery struct {
	config
	ctx                         *QueryContext
	order                       []carrieradditionalservicegls.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.CarrierAdditionalServiceGLS
	withCarrierServiceGLS       *CarrierServiceGLSQuery
	withDeliveryOptionGLS       *DeliveryOptionGLSQuery
	withCountriesConsignee      *CountryQuery
	withCountriesConsignor      *CountryQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*CarrierAdditionalServiceGLS) error
	withNamedDeliveryOptionGLS  map[string]*DeliveryOptionGLSQuery
	withNamedCountriesConsignee map[string]*CountryQuery
	withNamedCountriesConsignor map[string]*CountryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierAdditionalServiceGLSQuery builder.
func (casgq *CarrierAdditionalServiceGLSQuery) Where(ps ...predicate.CarrierAdditionalServiceGLS) *CarrierAdditionalServiceGLSQuery {
	casgq.predicates = append(casgq.predicates, ps...)
	return casgq
}

// Limit the number of records to be returned by this query.
func (casgq *CarrierAdditionalServiceGLSQuery) Limit(limit int) *CarrierAdditionalServiceGLSQuery {
	casgq.ctx.Limit = &limit
	return casgq
}

// Offset to start from.
func (casgq *CarrierAdditionalServiceGLSQuery) Offset(offset int) *CarrierAdditionalServiceGLSQuery {
	casgq.ctx.Offset = &offset
	return casgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (casgq *CarrierAdditionalServiceGLSQuery) Unique(unique bool) *CarrierAdditionalServiceGLSQuery {
	casgq.ctx.Unique = &unique
	return casgq
}

// Order specifies how the records should be ordered.
func (casgq *CarrierAdditionalServiceGLSQuery) Order(o ...carrieradditionalservicegls.OrderOption) *CarrierAdditionalServiceGLSQuery {
	casgq.order = append(casgq.order, o...)
	return casgq
}

// QueryCarrierServiceGLS chains the current query on the "carrier_service_gls" edge.
func (casgq *CarrierAdditionalServiceGLSQuery) QueryCarrierServiceGLS() *CarrierServiceGLSQuery {
	query := (&CarrierServiceGLSClient{config: casgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID, selector),
			sqlgraph.To(carrierservicegls.Table, carrierservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrieradditionalservicegls.CarrierServiceGLSTable, carrieradditionalservicegls.CarrierServiceGLSColumn),
		)
		fromU = sqlgraph.SetNeighbors(casgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptionGLS chains the current query on the "delivery_option_gls" edge.
func (casgq *CarrierAdditionalServiceGLSQuery) QueryDeliveryOptionGLS() *DeliveryOptionGLSQuery {
	query := (&DeliveryOptionGLSClient{config: casgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID, selector),
			sqlgraph.To(deliveryoptiongls.Table, deliveryoptiongls.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicegls.DeliveryOptionGLSTable, carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountriesConsignee chains the current query on the "countries_consignee" edge.
func (casgq *CarrierAdditionalServiceGLSQuery) QueryCountriesConsignee() *CountryQuery {
	query := (&CountryClient{config: casgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrieradditionalservicegls.CountriesConsigneeTable, carrieradditionalservicegls.CountriesConsigneePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountriesConsignor chains the current query on the "countries_consignor" edge.
func (casgq *CarrierAdditionalServiceGLSQuery) QueryCountriesConsignor() *CountryQuery {
	query := (&CountryClient{config: casgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrieradditionalservicegls.CountriesConsignorTable, carrieradditionalservicegls.CountriesConsignorPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierAdditionalServiceGLS entity from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceGLS was found.
func (casgq *CarrierAdditionalServiceGLSQuery) First(ctx context.Context) (*CarrierAdditionalServiceGLS, error) {
	nodes, err := casgq.Limit(1).All(setContextOp(ctx, casgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrieradditionalservicegls.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (casgq *CarrierAdditionalServiceGLSQuery) FirstX(ctx context.Context) *CarrierAdditionalServiceGLS {
	node, err := casgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierAdditionalServiceGLS ID from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceGLS ID was found.
func (casgq *CarrierAdditionalServiceGLSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casgq.Limit(1).IDs(setContextOp(ctx, casgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrieradditionalservicegls.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (casgq *CarrierAdditionalServiceGLSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := casgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierAdditionalServiceGLS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceGLS entity is found.
// Returns a *NotFoundError when no CarrierAdditionalServiceGLS entities are found.
func (casgq *CarrierAdditionalServiceGLSQuery) Only(ctx context.Context) (*CarrierAdditionalServiceGLS, error) {
	nodes, err := casgq.Limit(2).All(setContextOp(ctx, casgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrieradditionalservicegls.Label}
	default:
		return nil, &NotSingularError{carrieradditionalservicegls.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (casgq *CarrierAdditionalServiceGLSQuery) OnlyX(ctx context.Context) *CarrierAdditionalServiceGLS {
	node, err := casgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierAdditionalServiceGLS ID in the query.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceGLS ID is found.
// Returns a *NotFoundError when no entities are found.
func (casgq *CarrierAdditionalServiceGLSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casgq.Limit(2).IDs(setContextOp(ctx, casgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrieradditionalservicegls.Label}
	default:
		err = &NotSingularError{carrieradditionalservicegls.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (casgq *CarrierAdditionalServiceGLSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := casgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierAdditionalServiceGLSs.
func (casgq *CarrierAdditionalServiceGLSQuery) All(ctx context.Context) ([]*CarrierAdditionalServiceGLS, error) {
	ctx = setContextOp(ctx, casgq.ctx, ent.OpQueryAll)
	if err := casgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierAdditionalServiceGLS, *CarrierAdditionalServiceGLSQuery]()
	return withInterceptors[[]*CarrierAdditionalServiceGLS](ctx, casgq, qr, casgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (casgq *CarrierAdditionalServiceGLSQuery) AllX(ctx context.Context) []*CarrierAdditionalServiceGLS {
	nodes, err := casgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierAdditionalServiceGLS IDs.
func (casgq *CarrierAdditionalServiceGLSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if casgq.ctx.Unique == nil && casgq.path != nil {
		casgq.Unique(true)
	}
	ctx = setContextOp(ctx, casgq.ctx, ent.OpQueryIDs)
	if err = casgq.Select(carrieradditionalservicegls.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (casgq *CarrierAdditionalServiceGLSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := casgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (casgq *CarrierAdditionalServiceGLSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, casgq.ctx, ent.OpQueryCount)
	if err := casgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, casgq, querierCount[*CarrierAdditionalServiceGLSQuery](), casgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (casgq *CarrierAdditionalServiceGLSQuery) CountX(ctx context.Context) int {
	count, err := casgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (casgq *CarrierAdditionalServiceGLSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, casgq.ctx, ent.OpQueryExist)
	switch _, err := casgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (casgq *CarrierAdditionalServiceGLSQuery) ExistX(ctx context.Context) bool {
	exist, err := casgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierAdditionalServiceGLSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (casgq *CarrierAdditionalServiceGLSQuery) Clone() *CarrierAdditionalServiceGLSQuery {
	if casgq == nil {
		return nil
	}
	return &CarrierAdditionalServiceGLSQuery{
		config:                 casgq.config,
		ctx:                    casgq.ctx.Clone(),
		order:                  append([]carrieradditionalservicegls.OrderOption{}, casgq.order...),
		inters:                 append([]Interceptor{}, casgq.inters...),
		predicates:             append([]predicate.CarrierAdditionalServiceGLS{}, casgq.predicates...),
		withCarrierServiceGLS:  casgq.withCarrierServiceGLS.Clone(),
		withDeliveryOptionGLS:  casgq.withDeliveryOptionGLS.Clone(),
		withCountriesConsignee: casgq.withCountriesConsignee.Clone(),
		withCountriesConsignor: casgq.withCountriesConsignor.Clone(),
		// clone intermediate query.
		sql:  casgq.sql.Clone(),
		path: casgq.path,
	}
}

// WithCarrierServiceGLS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_gls" edge. The optional arguments are used to configure the query builder of the edge.
func (casgq *CarrierAdditionalServiceGLSQuery) WithCarrierServiceGLS(opts ...func(*CarrierServiceGLSQuery)) *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierServiceGLSClient{config: casgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casgq.withCarrierServiceGLS = query
	return casgq
}

// WithDeliveryOptionGLS tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option_gls" edge. The optional arguments are used to configure the query builder of the edge.
func (casgq *CarrierAdditionalServiceGLSQuery) WithDeliveryOptionGLS(opts ...func(*DeliveryOptionGLSQuery)) *CarrierAdditionalServiceGLSQuery {
	query := (&DeliveryOptionGLSClient{config: casgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casgq.withDeliveryOptionGLS = query
	return casgq
}

// WithCountriesConsignee tells the query-builder to eager-load the nodes that are connected to
// the "countries_consignee" edge. The optional arguments are used to configure the query builder of the edge.
func (casgq *CarrierAdditionalServiceGLSQuery) WithCountriesConsignee(opts ...func(*CountryQuery)) *CarrierAdditionalServiceGLSQuery {
	query := (&CountryClient{config: casgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casgq.withCountriesConsignee = query
	return casgq
}

// WithCountriesConsignor tells the query-builder to eager-load the nodes that are connected to
// the "countries_consignor" edge. The optional arguments are used to configure the query builder of the edge.
func (casgq *CarrierAdditionalServiceGLSQuery) WithCountriesConsignor(opts ...func(*CountryQuery)) *CarrierAdditionalServiceGLSQuery {
	query := (&CountryClient{config: casgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casgq.withCountriesConsignor = query
	return casgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceGLS.Query().
//		GroupBy(carrieradditionalservicegls.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (casgq *CarrierAdditionalServiceGLSQuery) GroupBy(field string, fields ...string) *CarrierAdditionalServiceGLSGroupBy {
	casgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierAdditionalServiceGLSGroupBy{build: casgq}
	grbuild.flds = &casgq.ctx.Fields
	grbuild.label = carrieradditionalservicegls.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceGLS.Query().
//		Select(carrieradditionalservicegls.FieldLabel).
//		Scan(ctx, &v)
func (casgq *CarrierAdditionalServiceGLSQuery) Select(fields ...string) *CarrierAdditionalServiceGLSSelect {
	casgq.ctx.Fields = append(casgq.ctx.Fields, fields...)
	sbuild := &CarrierAdditionalServiceGLSSelect{CarrierAdditionalServiceGLSQuery: casgq}
	sbuild.label = carrieradditionalservicegls.Label
	sbuild.flds, sbuild.scan = &casgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierAdditionalServiceGLSSelect configured with the given aggregations.
func (casgq *CarrierAdditionalServiceGLSQuery) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceGLSSelect {
	return casgq.Select().Aggregate(fns...)
}

func (casgq *CarrierAdditionalServiceGLSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range casgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, casgq); err != nil {
				return err
			}
		}
	}
	for _, f := range casgq.ctx.Fields {
		if !carrieradditionalservicegls.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if casgq.path != nil {
		prev, err := casgq.path(ctx)
		if err != nil {
			return err
		}
		casgq.sql = prev
	}
	if carrieradditionalservicegls.Policy == nil {
		return errors.New("ent: uninitialized carrieradditionalservicegls.Policy (forgotten import ent/runtime?)")
	}
	if err := carrieradditionalservicegls.Policy.EvalQuery(ctx, casgq); err != nil {
		return err
	}
	return nil
}

func (casgq *CarrierAdditionalServiceGLSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierAdditionalServiceGLS, error) {
	var (
		nodes       = []*CarrierAdditionalServiceGLS{}
		withFKs     = casgq.withFKs
		_spec       = casgq.querySpec()
		loadedTypes = [4]bool{
			casgq.withCarrierServiceGLS != nil,
			casgq.withDeliveryOptionGLS != nil,
			casgq.withCountriesConsignee != nil,
			casgq.withCountriesConsignor != nil,
		}
	)
	if casgq.withCarrierServiceGLS != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicegls.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierAdditionalServiceGLS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierAdditionalServiceGLS{config: casgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(casgq.modifiers) > 0 {
		_spec.Modifiers = casgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, casgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := casgq.withCarrierServiceGLS; query != nil {
		if err := casgq.loadCarrierServiceGLS(ctx, query, nodes, nil,
			func(n *CarrierAdditionalServiceGLS, e *CarrierServiceGLS) { n.Edges.CarrierServiceGLS = e }); err != nil {
			return nil, err
		}
	}
	if query := casgq.withDeliveryOptionGLS; query != nil {
		if err := casgq.loadDeliveryOptionGLS(ctx, query, nodes,
			func(n *CarrierAdditionalServiceGLS) { n.Edges.DeliveryOptionGLS = []*DeliveryOptionGLS{} },
			func(n *CarrierAdditionalServiceGLS, e *DeliveryOptionGLS) {
				n.Edges.DeliveryOptionGLS = append(n.Edges.DeliveryOptionGLS, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := casgq.withCountriesConsignee; query != nil {
		if err := casgq.loadCountriesConsignee(ctx, query, nodes,
			func(n *CarrierAdditionalServiceGLS) { n.Edges.CountriesConsignee = []*Country{} },
			func(n *CarrierAdditionalServiceGLS, e *Country) {
				n.Edges.CountriesConsignee = append(n.Edges.CountriesConsignee, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := casgq.withCountriesConsignor; query != nil {
		if err := casgq.loadCountriesConsignor(ctx, query, nodes,
			func(n *CarrierAdditionalServiceGLS) { n.Edges.CountriesConsignor = []*Country{} },
			func(n *CarrierAdditionalServiceGLS, e *Country) {
				n.Edges.CountriesConsignor = append(n.Edges.CountriesConsignor, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range casgq.withNamedDeliveryOptionGLS {
		if err := casgq.loadDeliveryOptionGLS(ctx, query, nodes,
			func(n *CarrierAdditionalServiceGLS) { n.appendNamedDeliveryOptionGLS(name) },
			func(n *CarrierAdditionalServiceGLS, e *DeliveryOptionGLS) { n.appendNamedDeliveryOptionGLS(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range casgq.withNamedCountriesConsignee {
		if err := casgq.loadCountriesConsignee(ctx, query, nodes,
			func(n *CarrierAdditionalServiceGLS) { n.appendNamedCountriesConsignee(name) },
			func(n *CarrierAdditionalServiceGLS, e *Country) { n.appendNamedCountriesConsignee(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range casgq.withNamedCountriesConsignor {
		if err := casgq.loadCountriesConsignor(ctx, query, nodes,
			func(n *CarrierAdditionalServiceGLS) { n.appendNamedCountriesConsignor(name) },
			func(n *CarrierAdditionalServiceGLS, e *Country) { n.appendNamedCountriesConsignor(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range casgq.loadTotal {
		if err := casgq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (casgq *CarrierAdditionalServiceGLSQuery) loadCarrierServiceGLS(ctx context.Context, query *CarrierServiceGLSQuery, nodes []*CarrierAdditionalServiceGLS, init func(*CarrierAdditionalServiceGLS), assign func(*CarrierAdditionalServiceGLS, *CarrierServiceGLS)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierAdditionalServiceGLS)
	for i := range nodes {
		if nodes[i].carrier_service_gls_carrier_additional_service_gls == nil {
			continue
		}
		fk := *nodes[i].carrier_service_gls_carrier_additional_service_gls
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierservicegls.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_service_gls_carrier_additional_service_gls" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (casgq *CarrierAdditionalServiceGLSQuery) loadDeliveryOptionGLS(ctx context.Context, query *DeliveryOptionGLSQuery, nodes []*CarrierAdditionalServiceGLS, init func(*CarrierAdditionalServiceGLS), assign func(*CarrierAdditionalServiceGLS, *DeliveryOptionGLS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceGLS)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceGLS]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicegls.DeliveryOptionGLSTable)
		s.Join(joinT).On(s.C(deliveryoptiongls.FieldID), joinT.C(carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceGLS]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOptionGLS](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option_gls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (casgq *CarrierAdditionalServiceGLSQuery) loadCountriesConsignee(ctx context.Context, query *CountryQuery, nodes []*CarrierAdditionalServiceGLS, init func(*CarrierAdditionalServiceGLS), assign func(*CarrierAdditionalServiceGLS, *Country)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceGLS)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceGLS]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicegls.CountriesConsigneeTable)
		s.Join(joinT).On(s.C(country.FieldID), joinT.C(carrieradditionalservicegls.CountriesConsigneePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicegls.CountriesConsigneePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicegls.CountriesConsigneePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceGLS]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Country](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "countries_consignee" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (casgq *CarrierAdditionalServiceGLSQuery) loadCountriesConsignor(ctx context.Context, query *CountryQuery, nodes []*CarrierAdditionalServiceGLS, init func(*CarrierAdditionalServiceGLS), assign func(*CarrierAdditionalServiceGLS, *Country)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceGLS)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceGLS]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicegls.CountriesConsignorTable)
		s.Join(joinT).On(s.C(country.FieldID), joinT.C(carrieradditionalservicegls.CountriesConsignorPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicegls.CountriesConsignorPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicegls.CountriesConsignorPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceGLS]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Country](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "countries_consignor" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (casgq *CarrierAdditionalServiceGLSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := casgq.querySpec()
	if len(casgq.modifiers) > 0 {
		_spec.Modifiers = casgq.modifiers
	}
	_spec.Node.Columns = casgq.ctx.Fields
	if len(casgq.ctx.Fields) > 0 {
		_spec.Unique = casgq.ctx.Unique != nil && *casgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, casgq.driver, _spec)
}

func (casgq *CarrierAdditionalServiceGLSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrieradditionalservicegls.Table, carrieradditionalservicegls.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString))
	_spec.From = casgq.sql
	if unique := casgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if casgq.path != nil {
		_spec.Unique = true
	}
	if fields := casgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicegls.FieldID)
		for i := range fields {
			if fields[i] != carrieradditionalservicegls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := casgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := casgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := casgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := casgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (casgq *CarrierAdditionalServiceGLSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(casgq.driver.Dialect())
	t1 := builder.Table(carrieradditionalservicegls.Table)
	columns := casgq.ctx.Fields
	if len(columns) == 0 {
		columns = carrieradditionalservicegls.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if casgq.sql != nil {
		selector = casgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if casgq.ctx.Unique != nil && *casgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range casgq.predicates {
		p(selector)
	}
	for _, p := range casgq.order {
		p(selector)
	}
	if offset := casgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := casgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryOptionGLS tells the query-builder to eager-load the nodes that are connected to the "delivery_option_gls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casgq *CarrierAdditionalServiceGLSQuery) WithNamedDeliveryOptionGLS(name string, opts ...func(*DeliveryOptionGLSQuery)) *CarrierAdditionalServiceGLSQuery {
	query := (&DeliveryOptionGLSClient{config: casgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casgq.withNamedDeliveryOptionGLS == nil {
		casgq.withNamedDeliveryOptionGLS = make(map[string]*DeliveryOptionGLSQuery)
	}
	casgq.withNamedDeliveryOptionGLS[name] = query
	return casgq
}

// WithNamedCountriesConsignee tells the query-builder to eager-load the nodes that are connected to the "countries_consignee"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casgq *CarrierAdditionalServiceGLSQuery) WithNamedCountriesConsignee(name string, opts ...func(*CountryQuery)) *CarrierAdditionalServiceGLSQuery {
	query := (&CountryClient{config: casgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casgq.withNamedCountriesConsignee == nil {
		casgq.withNamedCountriesConsignee = make(map[string]*CountryQuery)
	}
	casgq.withNamedCountriesConsignee[name] = query
	return casgq
}

// WithNamedCountriesConsignor tells the query-builder to eager-load the nodes that are connected to the "countries_consignor"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casgq *CarrierAdditionalServiceGLSQuery) WithNamedCountriesConsignor(name string, opts ...func(*CountryQuery)) *CarrierAdditionalServiceGLSQuery {
	query := (&CountryClient{config: casgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casgq.withNamedCountriesConsignor == nil {
		casgq.withNamedCountriesConsignor = make(map[string]*CountryQuery)
	}
	casgq.withNamedCountriesConsignor[name] = query
	return casgq
}

// CarrierAdditionalServiceGLSGroupBy is the group-by builder for CarrierAdditionalServiceGLS entities.
type CarrierAdditionalServiceGLSGroupBy struct {
	selector
	build *CarrierAdditionalServiceGLSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (casggb *CarrierAdditionalServiceGLSGroupBy) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceGLSGroupBy {
	casggb.fns = append(casggb.fns, fns...)
	return casggb
}

// Scan applies the selector query and scans the result into the given value.
func (casggb *CarrierAdditionalServiceGLSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casggb.build.ctx, ent.OpQueryGroupBy)
	if err := casggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceGLSQuery, *CarrierAdditionalServiceGLSGroupBy](ctx, casggb.build, casggb, casggb.build.inters, v)
}

func (casggb *CarrierAdditionalServiceGLSGroupBy) sqlScan(ctx context.Context, root *CarrierAdditionalServiceGLSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(casggb.fns))
	for _, fn := range casggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*casggb.flds)+len(casggb.fns))
		for _, f := range *casggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*casggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierAdditionalServiceGLSSelect is the builder for selecting fields of CarrierAdditionalServiceGLS entities.
type CarrierAdditionalServiceGLSSelect struct {
	*CarrierAdditionalServiceGLSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (casgs *CarrierAdditionalServiceGLSSelect) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceGLSSelect {
	casgs.fns = append(casgs.fns, fns...)
	return casgs
}

// Scan applies the selector query and scans the result into the given value.
func (casgs *CarrierAdditionalServiceGLSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casgs.ctx, ent.OpQuerySelect)
	if err := casgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceGLSQuery, *CarrierAdditionalServiceGLSSelect](ctx, casgs.CarrierAdditionalServiceGLSQuery, casgs, casgs.inters, v)
}

func (casgs *CarrierAdditionalServiceGLSSelect) sqlScan(ctx context.Context, root *CarrierAdditionalServiceGLSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(casgs.fns))
	for _, fn := range casgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*casgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
