// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                          *QueryContext
	order                        []user.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.User
	withTenant                   *TenantQuery
	withOtkRequests              *OTKRequestsQuery
	withSignupOptions            *SignupOptionsQuery
	withLanguage                 *LanguageQuery
	withChangeHistory            *ChangeHistoryQuery
	withPlanHistoryUser          *PlanHistoryQuery
	withAPIToken                 *APITokenQuery
	withSelectedWorkstation      *WorkstationQuery
	withSeatGroup                *SeatGroupQuery
	withWorkspaceRecentScan      *WorkspaceRecentScanQuery
	withFKs                      bool
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*User) error
	withNamedOtkRequests         map[string]*OTKRequestsQuery
	withNamedChangeHistory       map[string]*ChangeHistoryQuery
	withNamedPlanHistoryUser     map[string]*PlanHistoryQuery
	withNamedAPIToken            map[string]*APITokenQuery
	withNamedWorkspaceRecentScan map[string]*WorkspaceRecentScanQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryTenant chains the current query on the "tenant" edge.
func (uq *UserQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.TenantTable, user.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOtkRequests chains the current query on the "otk_requests" edge.
func (uq *UserQuery) QueryOtkRequests() *OTKRequestsQuery {
	query := (&OTKRequestsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(otkrequests.Table, otkrequests.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OtkRequestsTable, user.OtkRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySignupOptions chains the current query on the "signup_options" edge.
func (uq *UserQuery) QuerySignupOptions() *SignupOptionsQuery {
	query := (&SignupOptionsClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(signupoptions.Table, signupoptions.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SignupOptionsTable, user.SignupOptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLanguage chains the current query on the "language" edge.
func (uq *UserQuery) QueryLanguage() *LanguageQuery {
	query := (&LanguageClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.LanguageTable, user.LanguageColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChangeHistory chains the current query on the "change_history" edge.
func (uq *UserQuery) QueryChangeHistory() *ChangeHistoryQuery {
	query := (&ChangeHistoryClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(changehistory.Table, changehistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ChangeHistoryTable, user.ChangeHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlanHistoryUser chains the current query on the "plan_history_user" edge.
func (uq *UserQuery) QueryPlanHistoryUser() *PlanHistoryQuery {
	query := (&PlanHistoryClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(planhistory.Table, planhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PlanHistoryUserTable, user.PlanHistoryUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAPIToken chains the current query on the "api_token" edge.
func (uq *UserQuery) QueryAPIToken() *APITokenQuery {
	query := (&APITokenClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.APITokenTable, user.APITokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySelectedWorkstation chains the current query on the "selected_workstation" edge.
func (uq *UserQuery) QuerySelectedWorkstation() *WorkstationQuery {
	query := (&WorkstationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(workstation.Table, workstation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SelectedWorkstationTable, user.SelectedWorkstationColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySeatGroup chains the current query on the "seat_group" edge.
func (uq *UserQuery) QuerySeatGroup() *SeatGroupQuery {
	query := (&SeatGroupClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(seatgroup.Table, seatgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.SeatGroupTable, user.SeatGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspaceRecentScan chains the current query on the "workspace_recent_scan" edge.
func (uq *UserQuery) QueryWorkspaceRecentScan() *WorkspaceRecentScanQuery {
	query := (&WorkspaceRecentScanClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(workspacerecentscan.Table, workspacerecentscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.WorkspaceRecentScanTable, user.WorkspaceRecentScanColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryAll)
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryIDs)
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryCount)
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryExist)
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                  uq.config,
		ctx:                     uq.ctx.Clone(),
		order:                   append([]user.OrderOption{}, uq.order...),
		inters:                  append([]Interceptor{}, uq.inters...),
		predicates:              append([]predicate.User{}, uq.predicates...),
		withTenant:              uq.withTenant.Clone(),
		withOtkRequests:         uq.withOtkRequests.Clone(),
		withSignupOptions:       uq.withSignupOptions.Clone(),
		withLanguage:            uq.withLanguage.Clone(),
		withChangeHistory:       uq.withChangeHistory.Clone(),
		withPlanHistoryUser:     uq.withPlanHistoryUser.Clone(),
		withAPIToken:            uq.withAPIToken.Clone(),
		withSelectedWorkstation: uq.withSelectedWorkstation.Clone(),
		withSeatGroup:           uq.withSeatGroup.Clone(),
		withWorkspaceRecentScan: uq.withWorkspaceRecentScan.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTenant(opts ...func(*TenantQuery)) *UserQuery {
	query := (&TenantClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withTenant = query
	return uq
}

// WithOtkRequests tells the query-builder to eager-load the nodes that are connected to
// the "otk_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithOtkRequests(opts ...func(*OTKRequestsQuery)) *UserQuery {
	query := (&OTKRequestsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withOtkRequests = query
	return uq
}

// WithSignupOptions tells the query-builder to eager-load the nodes that are connected to
// the "signup_options" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSignupOptions(opts ...func(*SignupOptionsQuery)) *UserQuery {
	query := (&SignupOptionsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSignupOptions = query
	return uq
}

// WithLanguage tells the query-builder to eager-load the nodes that are connected to
// the "language" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithLanguage(opts ...func(*LanguageQuery)) *UserQuery {
	query := (&LanguageClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withLanguage = query
	return uq
}

// WithChangeHistory tells the query-builder to eager-load the nodes that are connected to
// the "change_history" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithChangeHistory(opts ...func(*ChangeHistoryQuery)) *UserQuery {
	query := (&ChangeHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withChangeHistory = query
	return uq
}

// WithPlanHistoryUser tells the query-builder to eager-load the nodes that are connected to
// the "plan_history_user" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithPlanHistoryUser(opts ...func(*PlanHistoryQuery)) *UserQuery {
	query := (&PlanHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withPlanHistoryUser = query
	return uq
}

// WithAPIToken tells the query-builder to eager-load the nodes that are connected to
// the "api_token" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAPIToken(opts ...func(*APITokenQuery)) *UserQuery {
	query := (&APITokenClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAPIToken = query
	return uq
}

// WithSelectedWorkstation tells the query-builder to eager-load the nodes that are connected to
// the "selected_workstation" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSelectedWorkstation(opts ...func(*WorkstationQuery)) *UserQuery {
	query := (&WorkstationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSelectedWorkstation = query
	return uq
}

// WithSeatGroup tells the query-builder to eager-load the nodes that are connected to
// the "seat_group" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSeatGroup(opts ...func(*SeatGroupQuery)) *UserQuery {
	query := (&SeatGroupClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSeatGroup = query
	return uq
}

// WithWorkspaceRecentScan tells the query-builder to eager-load the nodes that are connected to
// the "workspace_recent_scan" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithWorkspaceRecentScan(opts ...func(*WorkspaceRecentScanQuery)) *UserQuery {
	query := (&WorkspaceRecentScanClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withWorkspaceRecentScan = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldTenantID).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	if user.Policy == nil {
		return errors.New("ent: uninitialized user.Policy (forgotten import ent/runtime?)")
	}
	if err := user.Policy.EvalQuery(ctx, uq); err != nil {
		return err
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		withFKs     = uq.withFKs
		_spec       = uq.querySpec()
		loadedTypes = [10]bool{
			uq.withTenant != nil,
			uq.withOtkRequests != nil,
			uq.withSignupOptions != nil,
			uq.withLanguage != nil,
			uq.withChangeHistory != nil,
			uq.withPlanHistoryUser != nil,
			uq.withAPIToken != nil,
			uq.withSelectedWorkstation != nil,
			uq.withSeatGroup != nil,
			uq.withWorkspaceRecentScan != nil,
		}
	)
	if uq.withLanguage != nil || uq.withSeatGroup != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, user.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withTenant; query != nil {
		if err := uq.loadTenant(ctx, query, nodes, nil,
			func(n *User, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withOtkRequests; query != nil {
		if err := uq.loadOtkRequests(ctx, query, nodes,
			func(n *User) { n.Edges.OtkRequests = []*OTKRequests{} },
			func(n *User, e *OTKRequests) { n.Edges.OtkRequests = append(n.Edges.OtkRequests, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSignupOptions; query != nil {
		if err := uq.loadSignupOptions(ctx, query, nodes, nil,
			func(n *User, e *SignupOptions) { n.Edges.SignupOptions = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withLanguage; query != nil {
		if err := uq.loadLanguage(ctx, query, nodes, nil,
			func(n *User, e *Language) { n.Edges.Language = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withChangeHistory; query != nil {
		if err := uq.loadChangeHistory(ctx, query, nodes,
			func(n *User) { n.Edges.ChangeHistory = []*ChangeHistory{} },
			func(n *User, e *ChangeHistory) { n.Edges.ChangeHistory = append(n.Edges.ChangeHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withPlanHistoryUser; query != nil {
		if err := uq.loadPlanHistoryUser(ctx, query, nodes,
			func(n *User) { n.Edges.PlanHistoryUser = []*PlanHistory{} },
			func(n *User, e *PlanHistory) { n.Edges.PlanHistoryUser = append(n.Edges.PlanHistoryUser, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAPIToken; query != nil {
		if err := uq.loadAPIToken(ctx, query, nodes,
			func(n *User) { n.Edges.APIToken = []*APIToken{} },
			func(n *User, e *APIToken) { n.Edges.APIToken = append(n.Edges.APIToken, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSelectedWorkstation; query != nil {
		if err := uq.loadSelectedWorkstation(ctx, query, nodes, nil,
			func(n *User, e *Workstation) { n.Edges.SelectedWorkstation = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSeatGroup; query != nil {
		if err := uq.loadSeatGroup(ctx, query, nodes, nil,
			func(n *User, e *SeatGroup) { n.Edges.SeatGroup = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withWorkspaceRecentScan; query != nil {
		if err := uq.loadWorkspaceRecentScan(ctx, query, nodes,
			func(n *User) { n.Edges.WorkspaceRecentScan = []*WorkspaceRecentScan{} },
			func(n *User, e *WorkspaceRecentScan) {
				n.Edges.WorkspaceRecentScan = append(n.Edges.WorkspaceRecentScan, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedOtkRequests {
		if err := uq.loadOtkRequests(ctx, query, nodes,
			func(n *User) { n.appendNamedOtkRequests(name) },
			func(n *User, e *OTKRequests) { n.appendNamedOtkRequests(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedChangeHistory {
		if err := uq.loadChangeHistory(ctx, query, nodes,
			func(n *User) { n.appendNamedChangeHistory(name) },
			func(n *User, e *ChangeHistory) { n.appendNamedChangeHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedPlanHistoryUser {
		if err := uq.loadPlanHistoryUser(ctx, query, nodes,
			func(n *User) { n.appendNamedPlanHistoryUser(name) },
			func(n *User, e *PlanHistory) { n.appendNamedPlanHistoryUser(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedAPIToken {
		if err := uq.loadAPIToken(ctx, query, nodes,
			func(n *User) { n.appendNamedAPIToken(name) },
			func(n *User, e *APIToken) { n.appendNamedAPIToken(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedWorkspaceRecentScan {
		if err := uq.loadWorkspaceRecentScan(ctx, query, nodes,
			func(n *User) { n.appendNamedWorkspaceRecentScan(name) },
			func(n *User, e *WorkspaceRecentScan) { n.appendNamedWorkspaceRecentScan(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range uq.loadTotal {
		if err := uq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*User, init func(*User), assign func(*User, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*User)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadOtkRequests(ctx context.Context, query *OTKRequestsQuery, nodes []*User, init func(*User), assign func(*User, *OTKRequests)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.OTKRequests(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.OtkRequestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_otk_requests
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_otk_requests" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_otk_requests" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadSignupOptions(ctx context.Context, query *SignupOptionsQuery, nodes []*User, init func(*User), assign func(*User, *SignupOptions)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.SignupOptions(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SignupOptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_signup_options
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_signup_options" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_signup_options" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadLanguage(ctx context.Context, query *LanguageQuery, nodes []*User, init func(*User), assign func(*User, *Language)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*User)
	for i := range nodes {
		if nodes[i].user_language == nil {
			continue
		}
		fk := *nodes[i].user_language
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(language.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_language" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadChangeHistory(ctx context.Context, query *ChangeHistoryQuery, nodes []*User, init func(*User), assign func(*User, *ChangeHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ChangeHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ChangeHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.change_history_user
		if fk == nil {
			return fmt.Errorf(`foreign-key "change_history_user" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "change_history_user" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadPlanHistoryUser(ctx context.Context, query *PlanHistoryQuery, nodes []*User, init func(*User), assign func(*User, *PlanHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlanHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.PlanHistoryUserColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_plan_history_user
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_plan_history_user" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_plan_history_user" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadAPIToken(ctx context.Context, query *APITokenQuery, nodes []*User, init func(*User), assign func(*User, *APIToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.APIToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.APITokenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_api_token
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_api_token" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_api_token" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadSelectedWorkstation(ctx context.Context, query *WorkstationQuery, nodes []*User, init func(*User), assign func(*User, *Workstation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Workstation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SelectedWorkstationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_selected_workstation
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_selected_workstation" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_selected_workstation" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadSeatGroup(ctx context.Context, query *SeatGroupQuery, nodes []*User, init func(*User), assign func(*User, *SeatGroup)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*User)
	for i := range nodes {
		if nodes[i].seat_group_user == nil {
			continue
		}
		fk := *nodes[i].seat_group_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(seatgroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "seat_group_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadWorkspaceRecentScan(ctx context.Context, query *WorkspaceRecentScanQuery, nodes []*User, init func(*User), assign func(*User, *WorkspaceRecentScan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.WorkspaceRecentScan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.WorkspaceRecentScanColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workspace_recent_scan_user
		if fk == nil {
			return fmt.Errorf(`foreign-key "workspace_recent_scan_user" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workspace_recent_scan_user" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if uq.withTenant != nil {
			_spec.Node.AddColumnOnce(user.FieldTenantID)
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedOtkRequests tells the query-builder to eager-load the nodes that are connected to the "otk_requests"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedOtkRequests(name string, opts ...func(*OTKRequestsQuery)) *UserQuery {
	query := (&OTKRequestsClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedOtkRequests == nil {
		uq.withNamedOtkRequests = make(map[string]*OTKRequestsQuery)
	}
	uq.withNamedOtkRequests[name] = query
	return uq
}

// WithNamedChangeHistory tells the query-builder to eager-load the nodes that are connected to the "change_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedChangeHistory(name string, opts ...func(*ChangeHistoryQuery)) *UserQuery {
	query := (&ChangeHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedChangeHistory == nil {
		uq.withNamedChangeHistory = make(map[string]*ChangeHistoryQuery)
	}
	uq.withNamedChangeHistory[name] = query
	return uq
}

// WithNamedPlanHistoryUser tells the query-builder to eager-load the nodes that are connected to the "plan_history_user"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedPlanHistoryUser(name string, opts ...func(*PlanHistoryQuery)) *UserQuery {
	query := (&PlanHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedPlanHistoryUser == nil {
		uq.withNamedPlanHistoryUser = make(map[string]*PlanHistoryQuery)
	}
	uq.withNamedPlanHistoryUser[name] = query
	return uq
}

// WithNamedAPIToken tells the query-builder to eager-load the nodes that are connected to the "api_token"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedAPIToken(name string, opts ...func(*APITokenQuery)) *UserQuery {
	query := (&APITokenClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedAPIToken == nil {
		uq.withNamedAPIToken = make(map[string]*APITokenQuery)
	}
	uq.withNamedAPIToken[name] = query
	return uq
}

// WithNamedWorkspaceRecentScan tells the query-builder to eager-load the nodes that are connected to the "workspace_recent_scan"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedWorkspaceRecentScan(name string, opts ...func(*WorkspaceRecentScanQuery)) *UserQuery {
	query := (&WorkspaceRecentScanClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedWorkspaceRecentScan == nil {
		uq.withNamedWorkspaceRecentScan = make(map[string]*WorkspaceRecentScanQuery)
	}
	uq.withNamedWorkspaceRecentScan[name] = query
	return uq
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, ent.OpQueryGroupBy)
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, ent.OpQuerySelect)
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
