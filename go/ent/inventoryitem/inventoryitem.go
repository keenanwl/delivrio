// Code generated by ent, DO NOT EDIT.

package inventoryitem

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the inventoryitem type in the database.
	Label = "inventory_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldSku holds the string denoting the sku field in the database.
	FieldSku = "sku"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCountryHarmonizedCode holds the string denoting the country_harmonized_code edge name in mutations.
	EdgeCountryHarmonizedCode = "country_harmonized_code"
	// EdgeCountryOfOrigin holds the string denoting the country_of_origin edge name in mutations.
	EdgeCountryOfOrigin = "country_of_origin"
	// EdgeProductVariant holds the string denoting the product_variant edge name in mutations.
	EdgeProductVariant = "product_variant"
	// Table holds the table name of the inventoryitem in the database.
	Table = "inventory_items"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "inventory_items"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CountryHarmonizedCodeTable is the table that holds the country_harmonized_code relation/edge.
	CountryHarmonizedCodeTable = "country_harmonized_codes"
	// CountryHarmonizedCodeInverseTable is the table name for the CountryHarmonizedCode entity.
	// It exists in this package in order to avoid circular dependency with the "countryharmonizedcode" package.
	CountryHarmonizedCodeInverseTable = "country_harmonized_codes"
	// CountryHarmonizedCodeColumn is the table column denoting the country_harmonized_code relation/edge.
	CountryHarmonizedCodeColumn = "inventory_item_country_harmonized_code"
	// CountryOfOriginTable is the table that holds the country_of_origin relation/edge.
	CountryOfOriginTable = "inventory_items"
	// CountryOfOriginInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryOfOriginInverseTable = "countries"
	// CountryOfOriginColumn is the table column denoting the country_of_origin relation/edge.
	CountryOfOriginColumn = "inventory_item_country_of_origin"
	// ProductVariantTable is the table that holds the product_variant relation/edge.
	ProductVariantTable = "inventory_items"
	// ProductVariantInverseTable is the table name for the ProductVariant entity.
	// It exists in this package in order to avoid circular dependency with the "productvariant" package.
	ProductVariantInverseTable = "product_variants"
	// ProductVariantColumn is the table column denoting the product_variant relation/edge.
	ProductVariantColumn = "product_variant_inventory_item"
)

// Columns holds all SQL columns for inventoryitem fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldExternalID,
	FieldCode,
	FieldSku,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "inventory_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"inventory_item_country_of_origin",
	"product_variant_inventory_item",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the InventoryItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByExternalID orders the results by the external_ID field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// BySku orders the results by the sku field.
func BySku(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSku, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCountryHarmonizedCodeCount orders the results by country_harmonized_code count.
func ByCountryHarmonizedCodeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCountryHarmonizedCodeStep(), opts...)
	}
}

// ByCountryHarmonizedCode orders the results by country_harmonized_code terms.
func ByCountryHarmonizedCode(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryHarmonizedCodeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCountryOfOriginField orders the results by country_of_origin field.
func ByCountryOfOriginField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryOfOriginStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductVariantField orders the results by product_variant field.
func ByProductVariantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductVariantStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newCountryHarmonizedCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryHarmonizedCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CountryHarmonizedCodeTable, CountryHarmonizedCodeColumn),
	)
}
func newCountryOfOriginStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryOfOriginInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CountryOfOriginTable, CountryOfOriginColumn),
	)
}
func newProductVariantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductVariantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProductVariantTable, ProductVariantColumn),
	)
}
