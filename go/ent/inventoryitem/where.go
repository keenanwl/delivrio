// Code generated by ent, DO NOT EDIT.

package inventoryitem

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldTenantID, v))
}

// ExternalID applies equality check predicate on the "external_ID" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldExternalID, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldCode, v))
}

// Sku applies equality check predicate on the "sku" field. It's identical to SkuEQ.
func Sku(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldSku, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.InventoryItem {
	vc := string(v)
	return predicate.InventoryItem(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.InventoryItem {
	vc := string(v)
	return predicate.InventoryItem(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.InventoryItem {
	vc := string(v)
	return predicate.InventoryItem(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.InventoryItem {
	vc := string(v)
	return predicate.InventoryItem(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.InventoryItem {
	vc := string(v)
	return predicate.InventoryItem(sql.FieldContainsFold(FieldTenantID, vc))
}

// ExternalIDEQ applies the EQ predicate on the "external_ID" field.
func ExternalIDEQ(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_ID" field.
func ExternalIDNEQ(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_ID" field.
func ExternalIDIn(vs ...string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_ID" field.
func ExternalIDNotIn(vs ...string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_ID" field.
func ExternalIDGT(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_ID" field.
func ExternalIDGTE(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_ID" field.
func ExternalIDLT(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_ID" field.
func ExternalIDLTE(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_ID" field.
func ExternalIDContains(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_ID" field.
func ExternalIDHasPrefix(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_ID" field.
func ExternalIDHasSuffix(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_ID" field.
func ExternalIDIsNil() predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_ID" field.
func ExternalIDNotNil() predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_ID" field.
func ExternalIDEqualFold(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_ID" field.
func ExternalIDContainsFold(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldContainsFold(FieldExternalID, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldContainsFold(FieldCode, v))
}

// SkuEQ applies the EQ predicate on the "sku" field.
func SkuEQ(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldSku, v))
}

// SkuNEQ applies the NEQ predicate on the "sku" field.
func SkuNEQ(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNEQ(FieldSku, v))
}

// SkuIn applies the In predicate on the "sku" field.
func SkuIn(vs ...string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIn(FieldSku, vs...))
}

// SkuNotIn applies the NotIn predicate on the "sku" field.
func SkuNotIn(vs ...string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotIn(FieldSku, vs...))
}

// SkuGT applies the GT predicate on the "sku" field.
func SkuGT(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGT(FieldSku, v))
}

// SkuGTE applies the GTE predicate on the "sku" field.
func SkuGTE(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGTE(FieldSku, v))
}

// SkuLT applies the LT predicate on the "sku" field.
func SkuLT(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLT(FieldSku, v))
}

// SkuLTE applies the LTE predicate on the "sku" field.
func SkuLTE(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLTE(FieldSku, v))
}

// SkuContains applies the Contains predicate on the "sku" field.
func SkuContains(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldContains(FieldSku, v))
}

// SkuHasPrefix applies the HasPrefix predicate on the "sku" field.
func SkuHasPrefix(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldHasPrefix(FieldSku, v))
}

// SkuHasSuffix applies the HasSuffix predicate on the "sku" field.
func SkuHasSuffix(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldHasSuffix(FieldSku, v))
}

// SkuIsNil applies the IsNil predicate on the "sku" field.
func SkuIsNil() predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIsNull(FieldSku))
}

// SkuNotNil applies the NotNil predicate on the "sku" field.
func SkuNotNil() predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotNull(FieldSku))
}

// SkuEqualFold applies the EqualFold predicate on the "sku" field.
func SkuEqualFold(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEqualFold(FieldSku, v))
}

// SkuContainsFold applies the ContainsFold predicate on the "sku" field.
func SkuContainsFold(v string) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldContainsFold(FieldSku, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountryHarmonizedCode applies the HasEdge predicate on the "country_harmonized_code" edge.
func HasCountryHarmonizedCode() predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CountryHarmonizedCodeTable, CountryHarmonizedCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryHarmonizedCodeWith applies the HasEdge predicate on the "country_harmonized_code" edge with a given conditions (other predicates).
func HasCountryHarmonizedCodeWith(preds ...predicate.CountryHarmonizedCode) predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := newCountryHarmonizedCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountryOfOrigin applies the HasEdge predicate on the "country_of_origin" edge.
func HasCountryOfOrigin() predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CountryOfOriginTable, CountryOfOriginColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryOfOriginWith applies the HasEdge predicate on the "country_of_origin" edge with a given conditions (other predicates).
func HasCountryOfOriginWith(preds ...predicate.Country) predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := newCountryOfOriginStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductVariant applies the HasEdge predicate on the "product_variant" edge.
func HasProductVariant() predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProductVariantTable, ProductVariantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductVariantWith applies the HasEdge predicate on the "product_variant" edge with a given conditions (other predicates).
func HasProductVariantWith(preds ...predicate.ProductVariant) predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := newProductVariantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InventoryItem) predicate.InventoryItem {
	return predicate.InventoryItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InventoryItem) predicate.InventoryItem {
	return predicate.InventoryItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InventoryItem) predicate.InventoryItem {
	return predicate.InventoryItem(sql.NotPredicates(p))
}
