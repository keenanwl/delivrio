// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSRateIndicatorQuery is the builder for querying PackagingUSPSRateIndicator entities.
type PackagingUSPSRateIndicatorQuery struct {
	config
	ctx                    *QueryContext
	order                  []packaginguspsrateindicator.OrderOption
	inters                 []Interceptor
	predicates             []predicate.PackagingUSPSRateIndicator
	withPackagingUSPS      *PackagingUSPSQuery
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*PackagingUSPSRateIndicator) error
	withNamedPackagingUSPS map[string]*PackagingUSPSQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PackagingUSPSRateIndicatorQuery builder.
func (puriq *PackagingUSPSRateIndicatorQuery) Where(ps ...predicate.PackagingUSPSRateIndicator) *PackagingUSPSRateIndicatorQuery {
	puriq.predicates = append(puriq.predicates, ps...)
	return puriq
}

// Limit the number of records to be returned by this query.
func (puriq *PackagingUSPSRateIndicatorQuery) Limit(limit int) *PackagingUSPSRateIndicatorQuery {
	puriq.ctx.Limit = &limit
	return puriq
}

// Offset to start from.
func (puriq *PackagingUSPSRateIndicatorQuery) Offset(offset int) *PackagingUSPSRateIndicatorQuery {
	puriq.ctx.Offset = &offset
	return puriq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (puriq *PackagingUSPSRateIndicatorQuery) Unique(unique bool) *PackagingUSPSRateIndicatorQuery {
	puriq.ctx.Unique = &unique
	return puriq
}

// Order specifies how the records should be ordered.
func (puriq *PackagingUSPSRateIndicatorQuery) Order(o ...packaginguspsrateindicator.OrderOption) *PackagingUSPSRateIndicatorQuery {
	puriq.order = append(puriq.order, o...)
	return puriq
}

// QueryPackagingUSPS chains the current query on the "packaging_usps" edge.
func (puriq *PackagingUSPSRateIndicatorQuery) QueryPackagingUSPS() *PackagingUSPSQuery {
	query := (&PackagingUSPSClient{config: puriq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puriq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puriq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packaginguspsrateindicator.Table, packaginguspsrateindicator.FieldID, selector),
			sqlgraph.To(packagingusps.Table, packagingusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaginguspsrateindicator.PackagingUSPSTable, packaginguspsrateindicator.PackagingUSPSColumn),
		)
		fromU = sqlgraph.SetNeighbors(puriq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PackagingUSPSRateIndicator entity from the query.
// Returns a *NotFoundError when no PackagingUSPSRateIndicator was found.
func (puriq *PackagingUSPSRateIndicatorQuery) First(ctx context.Context) (*PackagingUSPSRateIndicator, error) {
	nodes, err := puriq.Limit(1).All(setContextOp(ctx, puriq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{packaginguspsrateindicator.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (puriq *PackagingUSPSRateIndicatorQuery) FirstX(ctx context.Context) *PackagingUSPSRateIndicator {
	node, err := puriq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PackagingUSPSRateIndicator ID from the query.
// Returns a *NotFoundError when no PackagingUSPSRateIndicator ID was found.
func (puriq *PackagingUSPSRateIndicatorQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = puriq.Limit(1).IDs(setContextOp(ctx, puriq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{packaginguspsrateindicator.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (puriq *PackagingUSPSRateIndicatorQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := puriq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PackagingUSPSRateIndicator entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PackagingUSPSRateIndicator entity is found.
// Returns a *NotFoundError when no PackagingUSPSRateIndicator entities are found.
func (puriq *PackagingUSPSRateIndicatorQuery) Only(ctx context.Context) (*PackagingUSPSRateIndicator, error) {
	nodes, err := puriq.Limit(2).All(setContextOp(ctx, puriq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{packaginguspsrateindicator.Label}
	default:
		return nil, &NotSingularError{packaginguspsrateindicator.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (puriq *PackagingUSPSRateIndicatorQuery) OnlyX(ctx context.Context) *PackagingUSPSRateIndicator {
	node, err := puriq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PackagingUSPSRateIndicator ID in the query.
// Returns a *NotSingularError when more than one PackagingUSPSRateIndicator ID is found.
// Returns a *NotFoundError when no entities are found.
func (puriq *PackagingUSPSRateIndicatorQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = puriq.Limit(2).IDs(setContextOp(ctx, puriq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{packaginguspsrateindicator.Label}
	default:
		err = &NotSingularError{packaginguspsrateindicator.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (puriq *PackagingUSPSRateIndicatorQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := puriq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PackagingUSPSRateIndicators.
func (puriq *PackagingUSPSRateIndicatorQuery) All(ctx context.Context) ([]*PackagingUSPSRateIndicator, error) {
	ctx = setContextOp(ctx, puriq.ctx, ent.OpQueryAll)
	if err := puriq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PackagingUSPSRateIndicator, *PackagingUSPSRateIndicatorQuery]()
	return withInterceptors[[]*PackagingUSPSRateIndicator](ctx, puriq, qr, puriq.inters)
}

// AllX is like All, but panics if an error occurs.
func (puriq *PackagingUSPSRateIndicatorQuery) AllX(ctx context.Context) []*PackagingUSPSRateIndicator {
	nodes, err := puriq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PackagingUSPSRateIndicator IDs.
func (puriq *PackagingUSPSRateIndicatorQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if puriq.ctx.Unique == nil && puriq.path != nil {
		puriq.Unique(true)
	}
	ctx = setContextOp(ctx, puriq.ctx, ent.OpQueryIDs)
	if err = puriq.Select(packaginguspsrateindicator.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (puriq *PackagingUSPSRateIndicatorQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := puriq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (puriq *PackagingUSPSRateIndicatorQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, puriq.ctx, ent.OpQueryCount)
	if err := puriq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, puriq, querierCount[*PackagingUSPSRateIndicatorQuery](), puriq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (puriq *PackagingUSPSRateIndicatorQuery) CountX(ctx context.Context) int {
	count, err := puriq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (puriq *PackagingUSPSRateIndicatorQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, puriq.ctx, ent.OpQueryExist)
	switch _, err := puriq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (puriq *PackagingUSPSRateIndicatorQuery) ExistX(ctx context.Context) bool {
	exist, err := puriq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PackagingUSPSRateIndicatorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (puriq *PackagingUSPSRateIndicatorQuery) Clone() *PackagingUSPSRateIndicatorQuery {
	if puriq == nil {
		return nil
	}
	return &PackagingUSPSRateIndicatorQuery{
		config:            puriq.config,
		ctx:               puriq.ctx.Clone(),
		order:             append([]packaginguspsrateindicator.OrderOption{}, puriq.order...),
		inters:            append([]Interceptor{}, puriq.inters...),
		predicates:        append([]predicate.PackagingUSPSRateIndicator{}, puriq.predicates...),
		withPackagingUSPS: puriq.withPackagingUSPS.Clone(),
		// clone intermediate query.
		sql:  puriq.sql.Clone(),
		path: puriq.path,
	}
}

// WithPackagingUSPS tells the query-builder to eager-load the nodes that are connected to
// the "packaging_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (puriq *PackagingUSPSRateIndicatorQuery) WithPackagingUSPS(opts ...func(*PackagingUSPSQuery)) *PackagingUSPSRateIndicatorQuery {
	query := (&PackagingUSPSClient{config: puriq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puriq.withPackagingUSPS = query
	return puriq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PackagingUSPSRateIndicator.Query().
//		GroupBy(packaginguspsrateindicator.FieldCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (puriq *PackagingUSPSRateIndicatorQuery) GroupBy(field string, fields ...string) *PackagingUSPSRateIndicatorGroupBy {
	puriq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PackagingUSPSRateIndicatorGroupBy{build: puriq}
	grbuild.flds = &puriq.ctx.Fields
	grbuild.label = packaginguspsrateindicator.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//	}
//
//	client.PackagingUSPSRateIndicator.Query().
//		Select(packaginguspsrateindicator.FieldCode).
//		Scan(ctx, &v)
func (puriq *PackagingUSPSRateIndicatorQuery) Select(fields ...string) *PackagingUSPSRateIndicatorSelect {
	puriq.ctx.Fields = append(puriq.ctx.Fields, fields...)
	sbuild := &PackagingUSPSRateIndicatorSelect{PackagingUSPSRateIndicatorQuery: puriq}
	sbuild.label = packaginguspsrateindicator.Label
	sbuild.flds, sbuild.scan = &puriq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PackagingUSPSRateIndicatorSelect configured with the given aggregations.
func (puriq *PackagingUSPSRateIndicatorQuery) Aggregate(fns ...AggregateFunc) *PackagingUSPSRateIndicatorSelect {
	return puriq.Select().Aggregate(fns...)
}

func (puriq *PackagingUSPSRateIndicatorQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range puriq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, puriq); err != nil {
				return err
			}
		}
	}
	for _, f := range puriq.ctx.Fields {
		if !packaginguspsrateindicator.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if puriq.path != nil {
		prev, err := puriq.path(ctx)
		if err != nil {
			return err
		}
		puriq.sql = prev
	}
	if packaginguspsrateindicator.Policy == nil {
		return errors.New("ent: uninitialized packaginguspsrateindicator.Policy (forgotten import ent/runtime?)")
	}
	if err := packaginguspsrateindicator.Policy.EvalQuery(ctx, puriq); err != nil {
		return err
	}
	return nil
}

func (puriq *PackagingUSPSRateIndicatorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PackagingUSPSRateIndicator, error) {
	var (
		nodes       = []*PackagingUSPSRateIndicator{}
		_spec       = puriq.querySpec()
		loadedTypes = [1]bool{
			puriq.withPackagingUSPS != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PackagingUSPSRateIndicator).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PackagingUSPSRateIndicator{config: puriq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(puriq.modifiers) > 0 {
		_spec.Modifiers = puriq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, puriq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := puriq.withPackagingUSPS; query != nil {
		if err := puriq.loadPackagingUSPS(ctx, query, nodes,
			func(n *PackagingUSPSRateIndicator) { n.Edges.PackagingUSPS = []*PackagingUSPS{} },
			func(n *PackagingUSPSRateIndicator, e *PackagingUSPS) {
				n.Edges.PackagingUSPS = append(n.Edges.PackagingUSPS, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range puriq.withNamedPackagingUSPS {
		if err := puriq.loadPackagingUSPS(ctx, query, nodes,
			func(n *PackagingUSPSRateIndicator) { n.appendNamedPackagingUSPS(name) },
			func(n *PackagingUSPSRateIndicator, e *PackagingUSPS) { n.appendNamedPackagingUSPS(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range puriq.loadTotal {
		if err := puriq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (puriq *PackagingUSPSRateIndicatorQuery) loadPackagingUSPS(ctx context.Context, query *PackagingUSPSQuery, nodes []*PackagingUSPSRateIndicator, init func(*PackagingUSPSRateIndicator), assign func(*PackagingUSPSRateIndicator, *PackagingUSPS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*PackagingUSPSRateIndicator)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PackagingUSPS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(packaginguspsrateindicator.PackagingUSPSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.packaging_usps_packaging_usps_rate_indicator
		if fk == nil {
			return fmt.Errorf(`foreign-key "packaging_usps_packaging_usps_rate_indicator" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "packaging_usps_packaging_usps_rate_indicator" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (puriq *PackagingUSPSRateIndicatorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := puriq.querySpec()
	if len(puriq.modifiers) > 0 {
		_spec.Modifiers = puriq.modifiers
	}
	_spec.Node.Columns = puriq.ctx.Fields
	if len(puriq.ctx.Fields) > 0 {
		_spec.Unique = puriq.ctx.Unique != nil && *puriq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, puriq.driver, _spec)
}

func (puriq *PackagingUSPSRateIndicatorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(packaginguspsrateindicator.Table, packaginguspsrateindicator.Columns, sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString))
	_spec.From = puriq.sql
	if unique := puriq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if puriq.path != nil {
		_spec.Unique = true
	}
	if fields := puriq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packaginguspsrateindicator.FieldID)
		for i := range fields {
			if fields[i] != packaginguspsrateindicator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := puriq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := puriq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := puriq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := puriq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (puriq *PackagingUSPSRateIndicatorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(puriq.driver.Dialect())
	t1 := builder.Table(packaginguspsrateindicator.Table)
	columns := puriq.ctx.Fields
	if len(columns) == 0 {
		columns = packaginguspsrateindicator.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if puriq.sql != nil {
		selector = puriq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if puriq.ctx.Unique != nil && *puriq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range puriq.predicates {
		p(selector)
	}
	for _, p := range puriq.order {
		p(selector)
	}
	if offset := puriq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := puriq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPackagingUSPS tells the query-builder to eager-load the nodes that are connected to the "packaging_usps"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (puriq *PackagingUSPSRateIndicatorQuery) WithNamedPackagingUSPS(name string, opts ...func(*PackagingUSPSQuery)) *PackagingUSPSRateIndicatorQuery {
	query := (&PackagingUSPSClient{config: puriq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if puriq.withNamedPackagingUSPS == nil {
		puriq.withNamedPackagingUSPS = make(map[string]*PackagingUSPSQuery)
	}
	puriq.withNamedPackagingUSPS[name] = query
	return puriq
}

// PackagingUSPSRateIndicatorGroupBy is the group-by builder for PackagingUSPSRateIndicator entities.
type PackagingUSPSRateIndicatorGroupBy struct {
	selector
	build *PackagingUSPSRateIndicatorQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (purigb *PackagingUSPSRateIndicatorGroupBy) Aggregate(fns ...AggregateFunc) *PackagingUSPSRateIndicatorGroupBy {
	purigb.fns = append(purigb.fns, fns...)
	return purigb
}

// Scan applies the selector query and scans the result into the given value.
func (purigb *PackagingUSPSRateIndicatorGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, purigb.build.ctx, ent.OpQueryGroupBy)
	if err := purigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackagingUSPSRateIndicatorQuery, *PackagingUSPSRateIndicatorGroupBy](ctx, purigb.build, purigb, purigb.build.inters, v)
}

func (purigb *PackagingUSPSRateIndicatorGroupBy) sqlScan(ctx context.Context, root *PackagingUSPSRateIndicatorQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(purigb.fns))
	for _, fn := range purigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*purigb.flds)+len(purigb.fns))
		for _, f := range *purigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*purigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := purigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PackagingUSPSRateIndicatorSelect is the builder for selecting fields of PackagingUSPSRateIndicator entities.
type PackagingUSPSRateIndicatorSelect struct {
	*PackagingUSPSRateIndicatorQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (puris *PackagingUSPSRateIndicatorSelect) Aggregate(fns ...AggregateFunc) *PackagingUSPSRateIndicatorSelect {
	puris.fns = append(puris.fns, fns...)
	return puris
}

// Scan applies the selector query and scans the result into the given value.
func (puris *PackagingUSPSRateIndicatorSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, puris.ctx, ent.OpQuerySelect)
	if err := puris.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackagingUSPSRateIndicatorQuery, *PackagingUSPSRateIndicatorSelect](ctx, puris.PackagingUSPSRateIndicatorQuery, puris, puris.inters, v)
}

func (puris *PackagingUSPSRateIndicatorSelect) sqlScan(ctx context.Context, root *PackagingUSPSRateIndicatorQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(puris.fns))
	for _, fn := range puris.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*puris.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := puris.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
