// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceGLSDelete is the builder for deleting a CarrierServiceGLS entity.
type CarrierServiceGLSDelete struct {
	config
	hooks    []Hook
	mutation *CarrierServiceGLSMutation
}

// Where appends a list predicates to the CarrierServiceGLSDelete builder.
func (csgd *CarrierServiceGLSDelete) Where(ps ...predicate.CarrierServiceGLS) *CarrierServiceGLSDelete {
	csgd.mutation.Where(ps...)
	return csgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (csgd *CarrierServiceGLSDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, csgd.sqlExec, csgd.mutation, csgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (csgd *CarrierServiceGLSDelete) ExecX(ctx context.Context) int {
	n, err := csgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (csgd *CarrierServiceGLSDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(carrierservicegls.Table, sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString))
	if ps := csgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, csgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	csgd.mutation.done = true
	return affected, err
}

// CarrierServiceGLSDeleteOne is the builder for deleting a single CarrierServiceGLS entity.
type CarrierServiceGLSDeleteOne struct {
	csgd *CarrierServiceGLSDelete
}

// Where appends a list predicates to the CarrierServiceGLSDelete builder.
func (csgdo *CarrierServiceGLSDeleteOne) Where(ps ...predicate.CarrierServiceGLS) *CarrierServiceGLSDeleteOne {
	csgdo.csgd.mutation.Where(ps...)
	return csgdo
}

// Exec executes the deletion query.
func (csgdo *CarrierServiceGLSDeleteOne) Exec(ctx context.Context) error {
	n, err := csgdo.csgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{carrierservicegls.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (csgdo *CarrierServiceGLSDeleteOne) ExecX(ctx context.Context) {
	if err := csgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
