// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChangeHistoryUpdate is the builder for updating ChangeHistory entities.
type ChangeHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ChangeHistoryMutation
}

// Where appends a list predicates to the ChangeHistoryUpdate builder.
func (chu *ChangeHistoryUpdate) Where(ps ...predicate.ChangeHistory) *ChangeHistoryUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetTenantID sets the "tenant_id" field.
func (chu *ChangeHistoryUpdate) SetTenantID(pu pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.SetTenantID(pu)
	return chu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (chu *ChangeHistoryUpdate) SetNillableTenantID(pu *pulid.ID) *ChangeHistoryUpdate {
	if pu != nil {
		chu.SetTenantID(*pu)
	}
	return chu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (chu *ChangeHistoryUpdate) SetTenant(t *Tenant) *ChangeHistoryUpdate {
	return chu.SetTenantID(t.ID)
}

// AddPlanHistoryIDs adds the "plan_history" edge to the PlanHistory entity by IDs.
func (chu *ChangeHistoryUpdate) AddPlanHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.AddPlanHistoryIDs(ids...)
	return chu
}

// AddPlanHistory adds the "plan_history" edges to the PlanHistory entity.
func (chu *ChangeHistoryUpdate) AddPlanHistory(p ...*PlanHistory) *ChangeHistoryUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return chu.AddPlanHistoryIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (chu *ChangeHistoryUpdate) SetUserID(id pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.SetUserID(id)
	return chu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (chu *ChangeHistoryUpdate) SetNillableUserID(id *pulid.ID) *ChangeHistoryUpdate {
	if id != nil {
		chu = chu.SetUserID(*id)
	}
	return chu
}

// SetUser sets the "user" edge to the User entity.
func (chu *ChangeHistoryUpdate) SetUser(u *User) *ChangeHistoryUpdate {
	return chu.SetUserID(u.ID)
}

// AddOrderHistoryIDs adds the "order_history" edge to the OrderHistory entity by IDs.
func (chu *ChangeHistoryUpdate) AddOrderHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.AddOrderHistoryIDs(ids...)
	return chu
}

// AddOrderHistory adds the "order_history" edges to the OrderHistory entity.
func (chu *ChangeHistoryUpdate) AddOrderHistory(o ...*OrderHistory) *ChangeHistoryUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return chu.AddOrderHistoryIDs(ids...)
}

// AddShipmentHistoryIDs adds the "shipment_history" edge to the ShipmentHistory entity by IDs.
func (chu *ChangeHistoryUpdate) AddShipmentHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.AddShipmentHistoryIDs(ids...)
	return chu
}

// AddShipmentHistory adds the "shipment_history" edges to the ShipmentHistory entity.
func (chu *ChangeHistoryUpdate) AddShipmentHistory(s ...*ShipmentHistory) *ChangeHistoryUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return chu.AddShipmentHistoryIDs(ids...)
}

// AddReturnColliHistoryIDs adds the "return_colli_history" edge to the ReturnColliHistory entity by IDs.
func (chu *ChangeHistoryUpdate) AddReturnColliHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.AddReturnColliHistoryIDs(ids...)
	return chu
}

// AddReturnColliHistory adds the "return_colli_history" edges to the ReturnColliHistory entity.
func (chu *ChangeHistoryUpdate) AddReturnColliHistory(r ...*ReturnColliHistory) *ChangeHistoryUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return chu.AddReturnColliHistoryIDs(ids...)
}

// Mutation returns the ChangeHistoryMutation object of the builder.
func (chu *ChangeHistoryUpdate) Mutation() *ChangeHistoryMutation {
	return chu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (chu *ChangeHistoryUpdate) ClearTenant() *ChangeHistoryUpdate {
	chu.mutation.ClearTenant()
	return chu
}

// ClearPlanHistory clears all "plan_history" edges to the PlanHistory entity.
func (chu *ChangeHistoryUpdate) ClearPlanHistory() *ChangeHistoryUpdate {
	chu.mutation.ClearPlanHistory()
	return chu
}

// RemovePlanHistoryIDs removes the "plan_history" edge to PlanHistory entities by IDs.
func (chu *ChangeHistoryUpdate) RemovePlanHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.RemovePlanHistoryIDs(ids...)
	return chu
}

// RemovePlanHistory removes "plan_history" edges to PlanHistory entities.
func (chu *ChangeHistoryUpdate) RemovePlanHistory(p ...*PlanHistory) *ChangeHistoryUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return chu.RemovePlanHistoryIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (chu *ChangeHistoryUpdate) ClearUser() *ChangeHistoryUpdate {
	chu.mutation.ClearUser()
	return chu
}

// ClearOrderHistory clears all "order_history" edges to the OrderHistory entity.
func (chu *ChangeHistoryUpdate) ClearOrderHistory() *ChangeHistoryUpdate {
	chu.mutation.ClearOrderHistory()
	return chu
}

// RemoveOrderHistoryIDs removes the "order_history" edge to OrderHistory entities by IDs.
func (chu *ChangeHistoryUpdate) RemoveOrderHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.RemoveOrderHistoryIDs(ids...)
	return chu
}

// RemoveOrderHistory removes "order_history" edges to OrderHistory entities.
func (chu *ChangeHistoryUpdate) RemoveOrderHistory(o ...*OrderHistory) *ChangeHistoryUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return chu.RemoveOrderHistoryIDs(ids...)
}

// ClearShipmentHistory clears all "shipment_history" edges to the ShipmentHistory entity.
func (chu *ChangeHistoryUpdate) ClearShipmentHistory() *ChangeHistoryUpdate {
	chu.mutation.ClearShipmentHistory()
	return chu
}

// RemoveShipmentHistoryIDs removes the "shipment_history" edge to ShipmentHistory entities by IDs.
func (chu *ChangeHistoryUpdate) RemoveShipmentHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.RemoveShipmentHistoryIDs(ids...)
	return chu
}

// RemoveShipmentHistory removes "shipment_history" edges to ShipmentHistory entities.
func (chu *ChangeHistoryUpdate) RemoveShipmentHistory(s ...*ShipmentHistory) *ChangeHistoryUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return chu.RemoveShipmentHistoryIDs(ids...)
}

// ClearReturnColliHistory clears all "return_colli_history" edges to the ReturnColliHistory entity.
func (chu *ChangeHistoryUpdate) ClearReturnColliHistory() *ChangeHistoryUpdate {
	chu.mutation.ClearReturnColliHistory()
	return chu
}

// RemoveReturnColliHistoryIDs removes the "return_colli_history" edge to ReturnColliHistory entities by IDs.
func (chu *ChangeHistoryUpdate) RemoveReturnColliHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdate {
	chu.mutation.RemoveReturnColliHistoryIDs(ids...)
	return chu
}

// RemoveReturnColliHistory removes "return_colli_history" edges to ReturnColliHistory entities.
func (chu *ChangeHistoryUpdate) RemoveReturnColliHistory(r ...*ReturnColliHistory) *ChangeHistoryUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return chu.RemoveReturnColliHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *ChangeHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, chu.sqlSave, chu.mutation, chu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chu *ChangeHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *ChangeHistoryUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *ChangeHistoryUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chu *ChangeHistoryUpdate) check() error {
	if chu.mutation.TenantCleared() && len(chu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChangeHistory.tenant"`)
	}
	return nil
}

func (chu *ChangeHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := chu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(changehistory.Table, changehistory.Columns, sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString))
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if chu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.TenantTable,
			Columns: []string{changehistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.TenantTable,
			Columns: []string{changehistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chu.mutation.PlanHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.PlanHistoryTable,
			Columns: []string{changehistory.PlanHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.RemovedPlanHistoryIDs(); len(nodes) > 0 && !chu.mutation.PlanHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.PlanHistoryTable,
			Columns: []string{changehistory.PlanHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.PlanHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.PlanHistoryTable,
			Columns: []string{changehistory.PlanHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.UserTable,
			Columns: []string{changehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.UserTable,
			Columns: []string{changehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chu.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.OrderHistoryTable,
			Columns: []string{changehistory.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.RemovedOrderHistoryIDs(); len(nodes) > 0 && !chu.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.OrderHistoryTable,
			Columns: []string{changehistory.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.OrderHistoryTable,
			Columns: []string{changehistory.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chu.mutation.ShipmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ShipmentHistoryTable,
			Columns: []string{changehistory.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.RemovedShipmentHistoryIDs(); len(nodes) > 0 && !chu.mutation.ShipmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ShipmentHistoryTable,
			Columns: []string{changehistory.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.ShipmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ShipmentHistoryTable,
			Columns: []string{changehistory.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chu.mutation.ReturnColliHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ReturnColliHistoryTable,
			Columns: []string{changehistory.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.RemovedReturnColliHistoryIDs(); len(nodes) > 0 && !chu.mutation.ReturnColliHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ReturnColliHistoryTable,
			Columns: []string{changehistory.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chu.mutation.ReturnColliHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ReturnColliHistoryTable,
			Columns: []string{changehistory.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chu.mutation.done = true
	return n, nil
}

// ChangeHistoryUpdateOne is the builder for updating a single ChangeHistory entity.
type ChangeHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChangeHistoryMutation
}

// SetTenantID sets the "tenant_id" field.
func (chuo *ChangeHistoryUpdateOne) SetTenantID(pu pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.SetTenantID(pu)
	return chuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (chuo *ChangeHistoryUpdateOne) SetNillableTenantID(pu *pulid.ID) *ChangeHistoryUpdateOne {
	if pu != nil {
		chuo.SetTenantID(*pu)
	}
	return chuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (chuo *ChangeHistoryUpdateOne) SetTenant(t *Tenant) *ChangeHistoryUpdateOne {
	return chuo.SetTenantID(t.ID)
}

// AddPlanHistoryIDs adds the "plan_history" edge to the PlanHistory entity by IDs.
func (chuo *ChangeHistoryUpdateOne) AddPlanHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.AddPlanHistoryIDs(ids...)
	return chuo
}

// AddPlanHistory adds the "plan_history" edges to the PlanHistory entity.
func (chuo *ChangeHistoryUpdateOne) AddPlanHistory(p ...*PlanHistory) *ChangeHistoryUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return chuo.AddPlanHistoryIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (chuo *ChangeHistoryUpdateOne) SetUserID(id pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.SetUserID(id)
	return chuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (chuo *ChangeHistoryUpdateOne) SetNillableUserID(id *pulid.ID) *ChangeHistoryUpdateOne {
	if id != nil {
		chuo = chuo.SetUserID(*id)
	}
	return chuo
}

// SetUser sets the "user" edge to the User entity.
func (chuo *ChangeHistoryUpdateOne) SetUser(u *User) *ChangeHistoryUpdateOne {
	return chuo.SetUserID(u.ID)
}

// AddOrderHistoryIDs adds the "order_history" edge to the OrderHistory entity by IDs.
func (chuo *ChangeHistoryUpdateOne) AddOrderHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.AddOrderHistoryIDs(ids...)
	return chuo
}

// AddOrderHistory adds the "order_history" edges to the OrderHistory entity.
func (chuo *ChangeHistoryUpdateOne) AddOrderHistory(o ...*OrderHistory) *ChangeHistoryUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return chuo.AddOrderHistoryIDs(ids...)
}

// AddShipmentHistoryIDs adds the "shipment_history" edge to the ShipmentHistory entity by IDs.
func (chuo *ChangeHistoryUpdateOne) AddShipmentHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.AddShipmentHistoryIDs(ids...)
	return chuo
}

// AddShipmentHistory adds the "shipment_history" edges to the ShipmentHistory entity.
func (chuo *ChangeHistoryUpdateOne) AddShipmentHistory(s ...*ShipmentHistory) *ChangeHistoryUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return chuo.AddShipmentHistoryIDs(ids...)
}

// AddReturnColliHistoryIDs adds the "return_colli_history" edge to the ReturnColliHistory entity by IDs.
func (chuo *ChangeHistoryUpdateOne) AddReturnColliHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.AddReturnColliHistoryIDs(ids...)
	return chuo
}

// AddReturnColliHistory adds the "return_colli_history" edges to the ReturnColliHistory entity.
func (chuo *ChangeHistoryUpdateOne) AddReturnColliHistory(r ...*ReturnColliHistory) *ChangeHistoryUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return chuo.AddReturnColliHistoryIDs(ids...)
}

// Mutation returns the ChangeHistoryMutation object of the builder.
func (chuo *ChangeHistoryUpdateOne) Mutation() *ChangeHistoryMutation {
	return chuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (chuo *ChangeHistoryUpdateOne) ClearTenant() *ChangeHistoryUpdateOne {
	chuo.mutation.ClearTenant()
	return chuo
}

// ClearPlanHistory clears all "plan_history" edges to the PlanHistory entity.
func (chuo *ChangeHistoryUpdateOne) ClearPlanHistory() *ChangeHistoryUpdateOne {
	chuo.mutation.ClearPlanHistory()
	return chuo
}

// RemovePlanHistoryIDs removes the "plan_history" edge to PlanHistory entities by IDs.
func (chuo *ChangeHistoryUpdateOne) RemovePlanHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.RemovePlanHistoryIDs(ids...)
	return chuo
}

// RemovePlanHistory removes "plan_history" edges to PlanHistory entities.
func (chuo *ChangeHistoryUpdateOne) RemovePlanHistory(p ...*PlanHistory) *ChangeHistoryUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return chuo.RemovePlanHistoryIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (chuo *ChangeHistoryUpdateOne) ClearUser() *ChangeHistoryUpdateOne {
	chuo.mutation.ClearUser()
	return chuo
}

// ClearOrderHistory clears all "order_history" edges to the OrderHistory entity.
func (chuo *ChangeHistoryUpdateOne) ClearOrderHistory() *ChangeHistoryUpdateOne {
	chuo.mutation.ClearOrderHistory()
	return chuo
}

// RemoveOrderHistoryIDs removes the "order_history" edge to OrderHistory entities by IDs.
func (chuo *ChangeHistoryUpdateOne) RemoveOrderHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.RemoveOrderHistoryIDs(ids...)
	return chuo
}

// RemoveOrderHistory removes "order_history" edges to OrderHistory entities.
func (chuo *ChangeHistoryUpdateOne) RemoveOrderHistory(o ...*OrderHistory) *ChangeHistoryUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return chuo.RemoveOrderHistoryIDs(ids...)
}

// ClearShipmentHistory clears all "shipment_history" edges to the ShipmentHistory entity.
func (chuo *ChangeHistoryUpdateOne) ClearShipmentHistory() *ChangeHistoryUpdateOne {
	chuo.mutation.ClearShipmentHistory()
	return chuo
}

// RemoveShipmentHistoryIDs removes the "shipment_history" edge to ShipmentHistory entities by IDs.
func (chuo *ChangeHistoryUpdateOne) RemoveShipmentHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.RemoveShipmentHistoryIDs(ids...)
	return chuo
}

// RemoveShipmentHistory removes "shipment_history" edges to ShipmentHistory entities.
func (chuo *ChangeHistoryUpdateOne) RemoveShipmentHistory(s ...*ShipmentHistory) *ChangeHistoryUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return chuo.RemoveShipmentHistoryIDs(ids...)
}

// ClearReturnColliHistory clears all "return_colli_history" edges to the ReturnColliHistory entity.
func (chuo *ChangeHistoryUpdateOne) ClearReturnColliHistory() *ChangeHistoryUpdateOne {
	chuo.mutation.ClearReturnColliHistory()
	return chuo
}

// RemoveReturnColliHistoryIDs removes the "return_colli_history" edge to ReturnColliHistory entities by IDs.
func (chuo *ChangeHistoryUpdateOne) RemoveReturnColliHistoryIDs(ids ...pulid.ID) *ChangeHistoryUpdateOne {
	chuo.mutation.RemoveReturnColliHistoryIDs(ids...)
	return chuo
}

// RemoveReturnColliHistory removes "return_colli_history" edges to ReturnColliHistory entities.
func (chuo *ChangeHistoryUpdateOne) RemoveReturnColliHistory(r ...*ReturnColliHistory) *ChangeHistoryUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return chuo.RemoveReturnColliHistoryIDs(ids...)
}

// Where appends a list predicates to the ChangeHistoryUpdate builder.
func (chuo *ChangeHistoryUpdateOne) Where(ps ...predicate.ChangeHistory) *ChangeHistoryUpdateOne {
	chuo.mutation.Where(ps...)
	return chuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *ChangeHistoryUpdateOne) Select(field string, fields ...string) *ChangeHistoryUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated ChangeHistory entity.
func (chuo *ChangeHistoryUpdateOne) Save(ctx context.Context) (*ChangeHistory, error) {
	return withHooks(ctx, chuo.sqlSave, chuo.mutation, chuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *ChangeHistoryUpdateOne) SaveX(ctx context.Context) *ChangeHistory {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *ChangeHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *ChangeHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chuo *ChangeHistoryUpdateOne) check() error {
	if chuo.mutation.TenantCleared() && len(chuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChangeHistory.tenant"`)
	}
	return nil
}

func (chuo *ChangeHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ChangeHistory, err error) {
	if err := chuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(changehistory.Table, changehistory.Columns, sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString))
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChangeHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, changehistory.FieldID)
		for _, f := range fields {
			if !changehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != changehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if chuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.TenantTable,
			Columns: []string{changehistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.TenantTable,
			Columns: []string{changehistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chuo.mutation.PlanHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.PlanHistoryTable,
			Columns: []string{changehistory.PlanHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.RemovedPlanHistoryIDs(); len(nodes) > 0 && !chuo.mutation.PlanHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.PlanHistoryTable,
			Columns: []string{changehistory.PlanHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.PlanHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.PlanHistoryTable,
			Columns: []string{changehistory.PlanHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.UserTable,
			Columns: []string{changehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.UserTable,
			Columns: []string{changehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chuo.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.OrderHistoryTable,
			Columns: []string{changehistory.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.RemovedOrderHistoryIDs(); len(nodes) > 0 && !chuo.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.OrderHistoryTable,
			Columns: []string{changehistory.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.OrderHistoryTable,
			Columns: []string{changehistory.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chuo.mutation.ShipmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ShipmentHistoryTable,
			Columns: []string{changehistory.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.RemovedShipmentHistoryIDs(); len(nodes) > 0 && !chuo.mutation.ShipmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ShipmentHistoryTable,
			Columns: []string{changehistory.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.ShipmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ShipmentHistoryTable,
			Columns: []string{changehistory.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chuo.mutation.ReturnColliHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ReturnColliHistoryTable,
			Columns: []string{changehistory.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.RemovedReturnColliHistoryIDs(); len(nodes) > 0 && !chuo.mutation.ReturnColliHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ReturnColliHistoryTable,
			Columns: []string{changehistory.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chuo.mutation.ReturnColliHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ReturnColliHistoryTable,
			Columns: []string{changehistory.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChangeHistory{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chuo.mutation.done = true
	return _node, nil
}
