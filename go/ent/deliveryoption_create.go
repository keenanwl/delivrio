// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionCreate is the builder for creating a DeliveryOption entity.
type DeliveryOptionCreate struct {
	config
	mutation *DeliveryOptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (doc *DeliveryOptionCreate) SetTenantID(pu pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetTenantID(pu)
	return doc
}

// SetArchivedAt sets the "archived_at" field.
func (doc *DeliveryOptionCreate) SetArchivedAt(t time.Time) *DeliveryOptionCreate {
	doc.mutation.SetArchivedAt(t)
	return doc
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableArchivedAt(t *time.Time) *DeliveryOptionCreate {
	if t != nil {
		doc.SetArchivedAt(*t)
	}
	return doc
}

// SetName sets the "name" field.
func (doc *DeliveryOptionCreate) SetName(s string) *DeliveryOptionCreate {
	doc.mutation.SetName(s)
	return doc
}

// SetSortOrder sets the "sort_order" field.
func (doc *DeliveryOptionCreate) SetSortOrder(i int) *DeliveryOptionCreate {
	doc.mutation.SetSortOrder(i)
	return doc
}

// SetClickOptionDisplayCount sets the "click_option_display_count" field.
func (doc *DeliveryOptionCreate) SetClickOptionDisplayCount(i int) *DeliveryOptionCreate {
	doc.mutation.SetClickOptionDisplayCount(i)
	return doc
}

// SetNillableClickOptionDisplayCount sets the "click_option_display_count" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableClickOptionDisplayCount(i *int) *DeliveryOptionCreate {
	if i != nil {
		doc.SetClickOptionDisplayCount(*i)
	}
	return doc
}

// SetDescription sets the "description" field.
func (doc *DeliveryOptionCreate) SetDescription(s string) *DeliveryOptionCreate {
	doc.mutation.SetDescription(s)
	return doc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDescription(s *string) *DeliveryOptionCreate {
	if s != nil {
		doc.SetDescription(*s)
	}
	return doc
}

// SetClickCollect sets the "click_collect" field.
func (doc *DeliveryOptionCreate) SetClickCollect(b bool) *DeliveryOptionCreate {
	doc.mutation.SetClickCollect(b)
	return doc
}

// SetNillableClickCollect sets the "click_collect" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableClickCollect(b *bool) *DeliveryOptionCreate {
	if b != nil {
		doc.SetClickCollect(*b)
	}
	return doc
}

// SetOverrideSenderAddress sets the "override_sender_address" field.
func (doc *DeliveryOptionCreate) SetOverrideSenderAddress(b bool) *DeliveryOptionCreate {
	doc.mutation.SetOverrideSenderAddress(b)
	return doc
}

// SetNillableOverrideSenderAddress sets the "override_sender_address" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableOverrideSenderAddress(b *bool) *DeliveryOptionCreate {
	if b != nil {
		doc.SetOverrideSenderAddress(*b)
	}
	return doc
}

// SetOverrideReturnAddress sets the "override_return_address" field.
func (doc *DeliveryOptionCreate) SetOverrideReturnAddress(b bool) *DeliveryOptionCreate {
	doc.mutation.SetOverrideReturnAddress(b)
	return doc
}

// SetNillableOverrideReturnAddress sets the "override_return_address" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableOverrideReturnAddress(b *bool) *DeliveryOptionCreate {
	if b != nil {
		doc.SetOverrideReturnAddress(*b)
	}
	return doc
}

// SetHideDeliveryOption sets the "hide_delivery_option" field.
func (doc *DeliveryOptionCreate) SetHideDeliveryOption(b bool) *DeliveryOptionCreate {
	doc.mutation.SetHideDeliveryOption(b)
	return doc
}

// SetNillableHideDeliveryOption sets the "hide_delivery_option" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableHideDeliveryOption(b *bool) *DeliveryOptionCreate {
	if b != nil {
		doc.SetHideDeliveryOption(*b)
	}
	return doc
}

// SetDeliveryEstimateFrom sets the "delivery_estimate_from" field.
func (doc *DeliveryOptionCreate) SetDeliveryEstimateFrom(i int) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryEstimateFrom(i)
	return doc
}

// SetNillableDeliveryEstimateFrom sets the "delivery_estimate_from" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryEstimateFrom(i *int) *DeliveryOptionCreate {
	if i != nil {
		doc.SetDeliveryEstimateFrom(*i)
	}
	return doc
}

// SetDeliveryEstimateTo sets the "delivery_estimate_to" field.
func (doc *DeliveryOptionCreate) SetDeliveryEstimateTo(i int) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryEstimateTo(i)
	return doc
}

// SetNillableDeliveryEstimateTo sets the "delivery_estimate_to" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryEstimateTo(i *int) *DeliveryOptionCreate {
	if i != nil {
		doc.SetDeliveryEstimateTo(*i)
	}
	return doc
}

// SetWebshipperIntegration sets the "webshipper_integration" field.
func (doc *DeliveryOptionCreate) SetWebshipperIntegration(b bool) *DeliveryOptionCreate {
	doc.mutation.SetWebshipperIntegration(b)
	return doc
}

// SetNillableWebshipperIntegration sets the "webshipper_integration" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableWebshipperIntegration(b *bool) *DeliveryOptionCreate {
	if b != nil {
		doc.SetWebshipperIntegration(*b)
	}
	return doc
}

// SetWebshipperID sets the "webshipper_id" field.
func (doc *DeliveryOptionCreate) SetWebshipperID(i int) *DeliveryOptionCreate {
	doc.mutation.SetWebshipperID(i)
	return doc
}

// SetNillableWebshipperID sets the "webshipper_id" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableWebshipperID(i *int) *DeliveryOptionCreate {
	if i != nil {
		doc.SetWebshipperID(*i)
	}
	return doc
}

// SetShipmondoIntegration sets the "shipmondo_integration" field.
func (doc *DeliveryOptionCreate) SetShipmondoIntegration(b bool) *DeliveryOptionCreate {
	doc.mutation.SetShipmondoIntegration(b)
	return doc
}

// SetNillableShipmondoIntegration sets the "shipmondo_integration" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableShipmondoIntegration(b *bool) *DeliveryOptionCreate {
	if b != nil {
		doc.SetShipmondoIntegration(*b)
	}
	return doc
}

// SetShipmondoDeliveryOption sets the "shipmondo_delivery_option" field.
func (doc *DeliveryOptionCreate) SetShipmondoDeliveryOption(s string) *DeliveryOptionCreate {
	doc.mutation.SetShipmondoDeliveryOption(s)
	return doc
}

// SetNillableShipmondoDeliveryOption sets the "shipmondo_delivery_option" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableShipmondoDeliveryOption(s *string) *DeliveryOptionCreate {
	if s != nil {
		doc.SetShipmondoDeliveryOption(*s)
	}
	return doc
}

// SetCustomsEnabled sets the "customs_enabled" field.
func (doc *DeliveryOptionCreate) SetCustomsEnabled(b bool) *DeliveryOptionCreate {
	doc.mutation.SetCustomsEnabled(b)
	return doc
}

// SetNillableCustomsEnabled sets the "customs_enabled" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableCustomsEnabled(b *bool) *DeliveryOptionCreate {
	if b != nil {
		doc.SetCustomsEnabled(*b)
	}
	return doc
}

// SetCustomsSigner sets the "customs_signer" field.
func (doc *DeliveryOptionCreate) SetCustomsSigner(s string) *DeliveryOptionCreate {
	doc.mutation.SetCustomsSigner(s)
	return doc
}

// SetNillableCustomsSigner sets the "customs_signer" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableCustomsSigner(s *string) *DeliveryOptionCreate {
	if s != nil {
		doc.SetCustomsSigner(*s)
	}
	return doc
}

// SetHideIfCompanyEmpty sets the "hide_if_company_empty" field.
func (doc *DeliveryOptionCreate) SetHideIfCompanyEmpty(b bool) *DeliveryOptionCreate {
	doc.mutation.SetHideIfCompanyEmpty(b)
	return doc
}

// SetNillableHideIfCompanyEmpty sets the "hide_if_company_empty" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableHideIfCompanyEmpty(b *bool) *DeliveryOptionCreate {
	if b != nil {
		doc.SetHideIfCompanyEmpty(*b)
	}
	return doc
}

// SetID sets the "id" field.
func (doc *DeliveryOptionCreate) SetID(pu pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetID(pu)
	return doc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableID(pu *pulid.ID) *DeliveryOptionCreate {
	if pu != nil {
		doc.SetID(*pu)
	}
	return doc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (doc *DeliveryOptionCreate) SetTenant(t *Tenant) *DeliveryOptionCreate {
	return doc.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (doc *DeliveryOptionCreate) SetCarrierID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetCarrierID(id)
	return doc
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (doc *DeliveryOptionCreate) SetCarrier(c *Carrier) *DeliveryOptionCreate {
	return doc.SetCarrierID(c.ID)
}

// AddDeliveryRuleIDs adds the "delivery_rule" edge to the DeliveryRule entity by IDs.
func (doc *DeliveryOptionCreate) AddDeliveryRuleIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddDeliveryRuleIDs(ids...)
	return doc
}

// AddDeliveryRule adds the "delivery_rule" edges to the DeliveryRule entity.
func (doc *DeliveryOptionCreate) AddDeliveryRule(d ...*DeliveryRule) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return doc.AddDeliveryRuleIDs(ids...)
}

// SetDeliveryOptionDAOID sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity by ID.
func (doc *DeliveryOptionCreate) SetDeliveryOptionDAOID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryOptionDAOID(id)
	return doc
}

// SetNillableDeliveryOptionDAOID sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryOptionDAOID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDeliveryOptionDAOID(*id)
	}
	return doc
}

// SetDeliveryOptionDAO sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity.
func (doc *DeliveryOptionCreate) SetDeliveryOptionDAO(d *DeliveryOptionDAO) *DeliveryOptionCreate {
	return doc.SetDeliveryOptionDAOID(d.ID)
}

// SetDeliveryOptionDFID sets the "delivery_option_df" edge to the DeliveryOptionDF entity by ID.
func (doc *DeliveryOptionCreate) SetDeliveryOptionDFID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryOptionDFID(id)
	return doc
}

// SetNillableDeliveryOptionDFID sets the "delivery_option_df" edge to the DeliveryOptionDF entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryOptionDFID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDeliveryOptionDFID(*id)
	}
	return doc
}

// SetDeliveryOptionDF sets the "delivery_option_df" edge to the DeliveryOptionDF entity.
func (doc *DeliveryOptionCreate) SetDeliveryOptionDF(d *DeliveryOptionDF) *DeliveryOptionCreate {
	return doc.SetDeliveryOptionDFID(d.ID)
}

// SetDeliveryOptionDSVID sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by ID.
func (doc *DeliveryOptionCreate) SetDeliveryOptionDSVID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryOptionDSVID(id)
	return doc
}

// SetNillableDeliveryOptionDSVID sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryOptionDSVID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDeliveryOptionDSVID(*id)
	}
	return doc
}

// SetDeliveryOptionDSV sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity.
func (doc *DeliveryOptionCreate) SetDeliveryOptionDSV(d *DeliveryOptionDSV) *DeliveryOptionCreate {
	return doc.SetDeliveryOptionDSVID(d.ID)
}

// SetDeliveryOptionEasyPostID sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by ID.
func (doc *DeliveryOptionCreate) SetDeliveryOptionEasyPostID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryOptionEasyPostID(id)
	return doc
}

// SetNillableDeliveryOptionEasyPostID sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryOptionEasyPostID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDeliveryOptionEasyPostID(*id)
	}
	return doc
}

// SetDeliveryOptionEasyPost sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity.
func (doc *DeliveryOptionCreate) SetDeliveryOptionEasyPost(d *DeliveryOptionEasyPost) *DeliveryOptionCreate {
	return doc.SetDeliveryOptionEasyPostID(d.ID)
}

// SetDeliveryOptionGLSID sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity by ID.
func (doc *DeliveryOptionCreate) SetDeliveryOptionGLSID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryOptionGLSID(id)
	return doc
}

// SetNillableDeliveryOptionGLSID sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryOptionGLSID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDeliveryOptionGLSID(*id)
	}
	return doc
}

// SetDeliveryOptionGLS sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity.
func (doc *DeliveryOptionCreate) SetDeliveryOptionGLS(d *DeliveryOptionGLS) *DeliveryOptionCreate {
	return doc.SetDeliveryOptionGLSID(d.ID)
}

// SetDeliveryOptionPostNordID sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity by ID.
func (doc *DeliveryOptionCreate) SetDeliveryOptionPostNordID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryOptionPostNordID(id)
	return doc
}

// SetNillableDeliveryOptionPostNordID sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryOptionPostNordID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDeliveryOptionPostNordID(*id)
	}
	return doc
}

// SetDeliveryOptionPostNord sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity.
func (doc *DeliveryOptionCreate) SetDeliveryOptionPostNord(d *DeliveryOptionPostNord) *DeliveryOptionCreate {
	return doc.SetDeliveryOptionPostNordID(d.ID)
}

// SetDeliveryOptionUSPSID sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by ID.
func (doc *DeliveryOptionCreate) SetDeliveryOptionUSPSID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryOptionUSPSID(id)
	return doc
}

// SetNillableDeliveryOptionUSPSID sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryOptionUSPSID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDeliveryOptionUSPSID(*id)
	}
	return doc
}

// SetDeliveryOptionUSPS sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity.
func (doc *DeliveryOptionCreate) SetDeliveryOptionUSPS(d *DeliveryOptionUSPS) *DeliveryOptionCreate {
	return doc.SetDeliveryOptionUSPSID(d.ID)
}

// SetDeliveryOptionBringID sets the "delivery_option_bring" edge to the DeliveryOptionBring entity by ID.
func (doc *DeliveryOptionCreate) SetDeliveryOptionBringID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDeliveryOptionBringID(id)
	return doc
}

// SetNillableDeliveryOptionBringID sets the "delivery_option_bring" edge to the DeliveryOptionBring entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDeliveryOptionBringID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDeliveryOptionBringID(*id)
	}
	return doc
}

// SetDeliveryOptionBring sets the "delivery_option_bring" edge to the DeliveryOptionBring entity.
func (doc *DeliveryOptionCreate) SetDeliveryOptionBring(d *DeliveryOptionBring) *DeliveryOptionCreate {
	return doc.SetDeliveryOptionBringID(d.ID)
}

// AddReturnPortalIDs adds the "return_portals" edge to the ReturnPortal entity by IDs.
func (doc *DeliveryOptionCreate) AddReturnPortalIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddReturnPortalIDs(ids...)
	return doc
}

// AddReturnPortals adds the "return_portals" edges to the ReturnPortal entity.
func (doc *DeliveryOptionCreate) AddReturnPortals(r ...*ReturnPortal) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return doc.AddReturnPortalIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (doc *DeliveryOptionCreate) AddColliIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddColliIDs(ids...)
	return doc
}

// AddColli adds the "colli" edges to the Colli entity.
func (doc *DeliveryOptionCreate) AddColli(c ...*Colli) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doc.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (doc *DeliveryOptionCreate) AddReturnColliIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddReturnColliIDs(ids...)
	return doc
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (doc *DeliveryOptionCreate) AddReturnColli(r ...*ReturnColli) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return doc.AddReturnColliIDs(ids...)
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (doc *DeliveryOptionCreate) SetCarrierServiceID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetCarrierServiceID(id)
	return doc
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (doc *DeliveryOptionCreate) SetCarrierService(c *CarrierService) *DeliveryOptionCreate {
	return doc.SetCarrierServiceID(c.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (doc *DeliveryOptionCreate) SetConnectionID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetConnectionID(id)
	return doc
}

// SetConnection sets the "connection" edge to the Connection entity.
func (doc *DeliveryOptionCreate) SetConnection(c *Connection) *DeliveryOptionCreate {
	return doc.SetConnectionID(c.ID)
}

// SetConnectionDefaultID sets the "connection_default" edge to the Connection entity by ID.
func (doc *DeliveryOptionCreate) SetConnectionDefaultID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetConnectionDefaultID(id)
	return doc
}

// SetNillableConnectionDefaultID sets the "connection_default" edge to the Connection entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableConnectionDefaultID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetConnectionDefaultID(*id)
	}
	return doc
}

// SetConnectionDefault sets the "connection_default" edge to the Connection entity.
func (doc *DeliveryOptionCreate) SetConnectionDefault(c *Connection) *DeliveryOptionCreate {
	return doc.SetConnectionDefaultID(c.ID)
}

// AddHypothesisTestDeliveryOptionGroupOneIDs adds the "hypothesis_test_delivery_option_group_one" edge to the HypothesisTestDeliveryOption entity by IDs.
func (doc *DeliveryOptionCreate) AddHypothesisTestDeliveryOptionGroupOneIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddHypothesisTestDeliveryOptionGroupOneIDs(ids...)
	return doc
}

// AddHypothesisTestDeliveryOptionGroupOne adds the "hypothesis_test_delivery_option_group_one" edges to the HypothesisTestDeliveryOption entity.
func (doc *DeliveryOptionCreate) AddHypothesisTestDeliveryOptionGroupOne(h ...*HypothesisTestDeliveryOption) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return doc.AddHypothesisTestDeliveryOptionGroupOneIDs(ids...)
}

// AddHypothesisTestDeliveryOptionGroupTwoIDs adds the "hypothesis_test_delivery_option_group_two" edge to the HypothesisTestDeliveryOption entity by IDs.
func (doc *DeliveryOptionCreate) AddHypothesisTestDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
	return doc
}

// AddHypothesisTestDeliveryOptionGroupTwo adds the "hypothesis_test_delivery_option_group_two" edges to the HypothesisTestDeliveryOption entity.
func (doc *DeliveryOptionCreate) AddHypothesisTestDeliveryOptionGroupTwo(h ...*HypothesisTestDeliveryOption) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return doc.AddHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
}

// AddHypothesisTestDeliveryOptionLookupIDs adds the "hypothesis_test_delivery_option_lookup" edge to the HypothesisTestDeliveryOptionLookup entity by IDs.
func (doc *DeliveryOptionCreate) AddHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
	return doc
}

// AddHypothesisTestDeliveryOptionLookup adds the "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (doc *DeliveryOptionCreate) AddHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return doc.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// AddClickCollectLocationIDs adds the "click_collect_location" edge to the Location entity by IDs.
func (doc *DeliveryOptionCreate) AddClickCollectLocationIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddClickCollectLocationIDs(ids...)
	return doc
}

// AddClickCollectLocation adds the "click_collect_location" edges to the Location entity.
func (doc *DeliveryOptionCreate) AddClickCollectLocation(l ...*Location) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return doc.AddClickCollectLocationIDs(ids...)
}

// SetEmailClickCollectAtStoreID sets the "email_click_collect_at_store" edge to the EmailTemplate entity by ID.
func (doc *DeliveryOptionCreate) SetEmailClickCollectAtStoreID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetEmailClickCollectAtStoreID(id)
	return doc
}

// SetNillableEmailClickCollectAtStoreID sets the "email_click_collect_at_store" edge to the EmailTemplate entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableEmailClickCollectAtStoreID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetEmailClickCollectAtStoreID(*id)
	}
	return doc
}

// SetEmailClickCollectAtStore sets the "email_click_collect_at_store" edge to the EmailTemplate entity.
func (doc *DeliveryOptionCreate) SetEmailClickCollectAtStore(e *EmailTemplate) *DeliveryOptionCreate {
	return doc.SetEmailClickCollectAtStoreID(e.ID)
}

// AddConsolidationIDs adds the "consolidation" edge to the Consolidation entity by IDs.
func (doc *DeliveryOptionCreate) AddConsolidationIDs(ids ...pulid.ID) *DeliveryOptionCreate {
	doc.mutation.AddConsolidationIDs(ids...)
	return doc
}

// AddConsolidation adds the "consolidation" edges to the Consolidation entity.
func (doc *DeliveryOptionCreate) AddConsolidation(c ...*Consolidation) *DeliveryOptionCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doc.AddConsolidationIDs(ids...)
}

// SetDefaultPackagingID sets the "default_packaging" edge to the Packaging entity by ID.
func (doc *DeliveryOptionCreate) SetDefaultPackagingID(id pulid.ID) *DeliveryOptionCreate {
	doc.mutation.SetDefaultPackagingID(id)
	return doc
}

// SetNillableDefaultPackagingID sets the "default_packaging" edge to the Packaging entity by ID if the given value is not nil.
func (doc *DeliveryOptionCreate) SetNillableDefaultPackagingID(id *pulid.ID) *DeliveryOptionCreate {
	if id != nil {
		doc = doc.SetDefaultPackagingID(*id)
	}
	return doc
}

// SetDefaultPackaging sets the "default_packaging" edge to the Packaging entity.
func (doc *DeliveryOptionCreate) SetDefaultPackaging(p *Packaging) *DeliveryOptionCreate {
	return doc.SetDefaultPackagingID(p.ID)
}

// Mutation returns the DeliveryOptionMutation object of the builder.
func (doc *DeliveryOptionCreate) Mutation() *DeliveryOptionMutation {
	return doc.mutation
}

// Save creates the DeliveryOption in the database.
func (doc *DeliveryOptionCreate) Save(ctx context.Context) (*DeliveryOption, error) {
	if err := doc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, doc.sqlSave, doc.mutation, doc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (doc *DeliveryOptionCreate) SaveX(ctx context.Context) *DeliveryOption {
	v, err := doc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (doc *DeliveryOptionCreate) Exec(ctx context.Context) error {
	_, err := doc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doc *DeliveryOptionCreate) ExecX(ctx context.Context) {
	if err := doc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (doc *DeliveryOptionCreate) defaults() error {
	if _, ok := doc.mutation.ClickOptionDisplayCount(); !ok {
		v := deliveryoption.DefaultClickOptionDisplayCount
		doc.mutation.SetClickOptionDisplayCount(v)
	}
	if _, ok := doc.mutation.ClickCollect(); !ok {
		v := deliveryoption.DefaultClickCollect
		doc.mutation.SetClickCollect(v)
	}
	if _, ok := doc.mutation.OverrideSenderAddress(); !ok {
		v := deliveryoption.DefaultOverrideSenderAddress
		doc.mutation.SetOverrideSenderAddress(v)
	}
	if _, ok := doc.mutation.OverrideReturnAddress(); !ok {
		v := deliveryoption.DefaultOverrideReturnAddress
		doc.mutation.SetOverrideReturnAddress(v)
	}
	if _, ok := doc.mutation.HideDeliveryOption(); !ok {
		v := deliveryoption.DefaultHideDeliveryOption
		doc.mutation.SetHideDeliveryOption(v)
	}
	if _, ok := doc.mutation.WebshipperIntegration(); !ok {
		v := deliveryoption.DefaultWebshipperIntegration
		doc.mutation.SetWebshipperIntegration(v)
	}
	if _, ok := doc.mutation.WebshipperID(); !ok {
		v := deliveryoption.DefaultWebshipperID
		doc.mutation.SetWebshipperID(v)
	}
	if _, ok := doc.mutation.ShipmondoIntegration(); !ok {
		v := deliveryoption.DefaultShipmondoIntegration
		doc.mutation.SetShipmondoIntegration(v)
	}
	if _, ok := doc.mutation.CustomsEnabled(); !ok {
		v := deliveryoption.DefaultCustomsEnabled
		doc.mutation.SetCustomsEnabled(v)
	}
	if _, ok := doc.mutation.HideIfCompanyEmpty(); !ok {
		v := deliveryoption.DefaultHideIfCompanyEmpty
		doc.mutation.SetHideIfCompanyEmpty(v)
	}
	if _, ok := doc.mutation.ID(); !ok {
		if deliveryoption.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deliveryoption.DefaultID (forgotten import ent/runtime?)")
		}
		v := deliveryoption.DefaultID()
		doc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (doc *DeliveryOptionCreate) check() error {
	if _, ok := doc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DeliveryOption.tenant_id"`)}
	}
	if _, ok := doc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DeliveryOption.name"`)}
	}
	if _, ok := doc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "DeliveryOption.sort_order"`)}
	}
	if v, ok := doc.mutation.ClickOptionDisplayCount(); ok {
		if err := deliveryoption.ClickOptionDisplayCountValidator(v); err != nil {
			return &ValidationError{Name: "click_option_display_count", err: fmt.Errorf(`ent: validator failed for field "DeliveryOption.click_option_display_count": %w`, err)}
		}
	}
	if _, ok := doc.mutation.WebshipperIntegration(); !ok {
		return &ValidationError{Name: "webshipper_integration", err: errors.New(`ent: missing required field "DeliveryOption.webshipper_integration"`)}
	}
	if v, ok := doc.mutation.WebshipperID(); ok {
		if err := deliveryoption.WebshipperIDValidator(v); err != nil {
			return &ValidationError{Name: "webshipper_id", err: fmt.Errorf(`ent: validator failed for field "DeliveryOption.webshipper_id": %w`, err)}
		}
	}
	if _, ok := doc.mutation.ShipmondoIntegration(); !ok {
		return &ValidationError{Name: "shipmondo_integration", err: errors.New(`ent: missing required field "DeliveryOption.shipmondo_integration"`)}
	}
	if _, ok := doc.mutation.CustomsEnabled(); !ok {
		return &ValidationError{Name: "customs_enabled", err: errors.New(`ent: missing required field "DeliveryOption.customs_enabled"`)}
	}
	if _, ok := doc.mutation.HideIfCompanyEmpty(); !ok {
		return &ValidationError{Name: "hide_if_company_empty", err: errors.New(`ent: missing required field "DeliveryOption.hide_if_company_empty"`)}
	}
	if len(doc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DeliveryOption.tenant"`)}
	}
	if len(doc.mutation.CarrierIDs()) == 0 {
		return &ValidationError{Name: "carrier", err: errors.New(`ent: missing required edge "DeliveryOption.carrier"`)}
	}
	if len(doc.mutation.CarrierServiceIDs()) == 0 {
		return &ValidationError{Name: "carrier_service", err: errors.New(`ent: missing required edge "DeliveryOption.carrier_service"`)}
	}
	if len(doc.mutation.ConnectionIDs()) == 0 {
		return &ValidationError{Name: "connection", err: errors.New(`ent: missing required edge "DeliveryOption.connection"`)}
	}
	return nil
}

func (doc *DeliveryOptionCreate) sqlSave(ctx context.Context) (*DeliveryOption, error) {
	if err := doc.check(); err != nil {
		return nil, err
	}
	_node, _spec := doc.createSpec()
	if err := sqlgraph.CreateNode(ctx, doc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	doc.mutation.id = &_node.ID
	doc.mutation.done = true
	return _node, nil
}

func (doc *DeliveryOptionCreate) createSpec() (*DeliveryOption, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryOption{config: doc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryoption.Table, sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString))
	)
	_spec.OnConflict = doc.conflict
	if id, ok := doc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := doc.mutation.ArchivedAt(); ok {
		_spec.SetField(deliveryoption.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = value
	}
	if value, ok := doc.mutation.Name(); ok {
		_spec.SetField(deliveryoption.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := doc.mutation.SortOrder(); ok {
		_spec.SetField(deliveryoption.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := doc.mutation.ClickOptionDisplayCount(); ok {
		_spec.SetField(deliveryoption.FieldClickOptionDisplayCount, field.TypeInt, value)
		_node.ClickOptionDisplayCount = value
	}
	if value, ok := doc.mutation.Description(); ok {
		_spec.SetField(deliveryoption.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := doc.mutation.ClickCollect(); ok {
		_spec.SetField(deliveryoption.FieldClickCollect, field.TypeBool, value)
		_node.ClickCollect = value
	}
	if value, ok := doc.mutation.OverrideSenderAddress(); ok {
		_spec.SetField(deliveryoption.FieldOverrideSenderAddress, field.TypeBool, value)
		_node.OverrideSenderAddress = value
	}
	if value, ok := doc.mutation.OverrideReturnAddress(); ok {
		_spec.SetField(deliveryoption.FieldOverrideReturnAddress, field.TypeBool, value)
		_node.OverrideReturnAddress = value
	}
	if value, ok := doc.mutation.HideDeliveryOption(); ok {
		_spec.SetField(deliveryoption.FieldHideDeliveryOption, field.TypeBool, value)
		_node.HideDeliveryOption = value
	}
	if value, ok := doc.mutation.DeliveryEstimateFrom(); ok {
		_spec.SetField(deliveryoption.FieldDeliveryEstimateFrom, field.TypeInt, value)
		_node.DeliveryEstimateFrom = value
	}
	if value, ok := doc.mutation.DeliveryEstimateTo(); ok {
		_spec.SetField(deliveryoption.FieldDeliveryEstimateTo, field.TypeInt, value)
		_node.DeliveryEstimateTo = value
	}
	if value, ok := doc.mutation.WebshipperIntegration(); ok {
		_spec.SetField(deliveryoption.FieldWebshipperIntegration, field.TypeBool, value)
		_node.WebshipperIntegration = value
	}
	if value, ok := doc.mutation.WebshipperID(); ok {
		_spec.SetField(deliveryoption.FieldWebshipperID, field.TypeInt, value)
		_node.WebshipperID = value
	}
	if value, ok := doc.mutation.ShipmondoIntegration(); ok {
		_spec.SetField(deliveryoption.FieldShipmondoIntegration, field.TypeBool, value)
		_node.ShipmondoIntegration = value
	}
	if value, ok := doc.mutation.ShipmondoDeliveryOption(); ok {
		_spec.SetField(deliveryoption.FieldShipmondoDeliveryOption, field.TypeString, value)
		_node.ShipmondoDeliveryOption = value
	}
	if value, ok := doc.mutation.CustomsEnabled(); ok {
		_spec.SetField(deliveryoption.FieldCustomsEnabled, field.TypeBool, value)
		_node.CustomsEnabled = value
	}
	if value, ok := doc.mutation.CustomsSigner(); ok {
		_spec.SetField(deliveryoption.FieldCustomsSigner, field.TypeString, value)
		_node.CustomsSigner = value
	}
	if value, ok := doc.mutation.HideIfCompanyEmpty(); ok {
		_spec.SetField(deliveryoption.FieldHideIfCompanyEmpty, field.TypeBool, value)
		_node.HideIfCompanyEmpty = value
	}
	if nodes := doc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.TenantTable,
			Columns: []string{deliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierTable,
			Columns: []string{deliveryoption.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_carrier = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryoption.DeliveryRuleTable,
			Columns: []string{deliveryoption.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryOptionDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDAOTable,
			Columns: []string{deliveryoption.DeliveryOptionDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryOptionDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDFTable,
			Columns: []string{deliveryoption.DeliveryOptionDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryOptionDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDSVTable,
			Columns: []string{deliveryoption.DeliveryOptionDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryOptionEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionEasyPostTable,
			Columns: []string{deliveryoption.DeliveryOptionEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryOptionGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionGLSTable,
			Columns: []string{deliveryoption.DeliveryOptionGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryOptionPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionPostNordTable,
			Columns: []string{deliveryoption.DeliveryOptionPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryOptionUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionUSPSTable,
			Columns: []string{deliveryoption.DeliveryOptionUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DeliveryOptionBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionBringTable,
			Columns: []string{deliveryoption.DeliveryOptionBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.ReturnPortalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.ReturnPortalsTable,
			Columns: deliveryoption.ReturnPortalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ColliTable,
			Columns: []string{deliveryoption.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ReturnColliTable,
			Columns: []string{deliveryoption.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierServiceTable,
			Columns: []string{deliveryoption.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_carrier_service = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionTable,
			Columns: []string{deliveryoption.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_delivery_option = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.ConnectionDefaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionDefaultTable,
			Columns: []string{deliveryoption.ConnectionDefaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_default_delivery_option = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.HypothesisTestDeliveryOptionGroupOneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupOneTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.HypothesisTestDeliveryOptionGroupTwoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.HypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{deliveryoption.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.ClickCollectLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoption.ClickCollectLocationTable,
			Columns: deliveryoption.ClickCollectLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.EmailClickCollectAtStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.EmailClickCollectAtStoreTable,
			Columns: []string{deliveryoption.EmailClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_email_click_collect_at_store = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ConsolidationTable,
			Columns: []string{deliveryoption.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doc.mutation.DefaultPackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.DefaultPackagingTable,
			Columns: []string{deliveryoption.DefaultPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_default_packaging = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOption.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (doc *DeliveryOptionCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionUpsertOne {
	doc.conflict = opts
	return &DeliveryOptionUpsertOne{
		create: doc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOption.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (doc *DeliveryOptionCreate) OnConflictColumns(columns ...string) *DeliveryOptionUpsertOne {
	doc.conflict = append(doc.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionUpsertOne{
		create: doc,
	}
}

type (
	// DeliveryOptionUpsertOne is the builder for "upsert"-ing
	//  one DeliveryOption node.
	DeliveryOptionUpsertOne struct {
		create *DeliveryOptionCreate
	}

	// DeliveryOptionUpsert is the "OnConflict" setter.
	DeliveryOptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionUpsert) SetTenantID(v pulid.ID) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateTenantID() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldTenantID)
	return u
}

// SetArchivedAt sets the "archived_at" field.
func (u *DeliveryOptionUpsert) SetArchivedAt(v time.Time) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldArchivedAt, v)
	return u
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateArchivedAt() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldArchivedAt)
	return u
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *DeliveryOptionUpsert) ClearArchivedAt() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldArchivedAt)
	return u
}

// SetName sets the "name" field.
func (u *DeliveryOptionUpsert) SetName(v string) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateName() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldName)
	return u
}

// SetSortOrder sets the "sort_order" field.
func (u *DeliveryOptionUpsert) SetSortOrder(v int) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldSortOrder, v)
	return u
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateSortOrder() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldSortOrder)
	return u
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DeliveryOptionUpsert) AddSortOrder(v int) *DeliveryOptionUpsert {
	u.Add(deliveryoption.FieldSortOrder, v)
	return u
}

// SetClickOptionDisplayCount sets the "click_option_display_count" field.
func (u *DeliveryOptionUpsert) SetClickOptionDisplayCount(v int) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldClickOptionDisplayCount, v)
	return u
}

// UpdateClickOptionDisplayCount sets the "click_option_display_count" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateClickOptionDisplayCount() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldClickOptionDisplayCount)
	return u
}

// AddClickOptionDisplayCount adds v to the "click_option_display_count" field.
func (u *DeliveryOptionUpsert) AddClickOptionDisplayCount(v int) *DeliveryOptionUpsert {
	u.Add(deliveryoption.FieldClickOptionDisplayCount, v)
	return u
}

// ClearClickOptionDisplayCount clears the value of the "click_option_display_count" field.
func (u *DeliveryOptionUpsert) ClearClickOptionDisplayCount() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldClickOptionDisplayCount)
	return u
}

// SetDescription sets the "description" field.
func (u *DeliveryOptionUpsert) SetDescription(v string) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateDescription() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DeliveryOptionUpsert) ClearDescription() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldDescription)
	return u
}

// SetClickCollect sets the "click_collect" field.
func (u *DeliveryOptionUpsert) SetClickCollect(v bool) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldClickCollect, v)
	return u
}

// UpdateClickCollect sets the "click_collect" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateClickCollect() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldClickCollect)
	return u
}

// ClearClickCollect clears the value of the "click_collect" field.
func (u *DeliveryOptionUpsert) ClearClickCollect() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldClickCollect)
	return u
}

// SetOverrideSenderAddress sets the "override_sender_address" field.
func (u *DeliveryOptionUpsert) SetOverrideSenderAddress(v bool) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldOverrideSenderAddress, v)
	return u
}

// UpdateOverrideSenderAddress sets the "override_sender_address" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateOverrideSenderAddress() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldOverrideSenderAddress)
	return u
}

// ClearOverrideSenderAddress clears the value of the "override_sender_address" field.
func (u *DeliveryOptionUpsert) ClearOverrideSenderAddress() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldOverrideSenderAddress)
	return u
}

// SetOverrideReturnAddress sets the "override_return_address" field.
func (u *DeliveryOptionUpsert) SetOverrideReturnAddress(v bool) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldOverrideReturnAddress, v)
	return u
}

// UpdateOverrideReturnAddress sets the "override_return_address" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateOverrideReturnAddress() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldOverrideReturnAddress)
	return u
}

// ClearOverrideReturnAddress clears the value of the "override_return_address" field.
func (u *DeliveryOptionUpsert) ClearOverrideReturnAddress() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldOverrideReturnAddress)
	return u
}

// SetHideDeliveryOption sets the "hide_delivery_option" field.
func (u *DeliveryOptionUpsert) SetHideDeliveryOption(v bool) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldHideDeliveryOption, v)
	return u
}

// UpdateHideDeliveryOption sets the "hide_delivery_option" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateHideDeliveryOption() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldHideDeliveryOption)
	return u
}

// ClearHideDeliveryOption clears the value of the "hide_delivery_option" field.
func (u *DeliveryOptionUpsert) ClearHideDeliveryOption() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldHideDeliveryOption)
	return u
}

// SetDeliveryEstimateFrom sets the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsert) SetDeliveryEstimateFrom(v int) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldDeliveryEstimateFrom, v)
	return u
}

// UpdateDeliveryEstimateFrom sets the "delivery_estimate_from" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateDeliveryEstimateFrom() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldDeliveryEstimateFrom)
	return u
}

// AddDeliveryEstimateFrom adds v to the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsert) AddDeliveryEstimateFrom(v int) *DeliveryOptionUpsert {
	u.Add(deliveryoption.FieldDeliveryEstimateFrom, v)
	return u
}

// ClearDeliveryEstimateFrom clears the value of the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsert) ClearDeliveryEstimateFrom() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldDeliveryEstimateFrom)
	return u
}

// SetDeliveryEstimateTo sets the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsert) SetDeliveryEstimateTo(v int) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldDeliveryEstimateTo, v)
	return u
}

// UpdateDeliveryEstimateTo sets the "delivery_estimate_to" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateDeliveryEstimateTo() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldDeliveryEstimateTo)
	return u
}

// AddDeliveryEstimateTo adds v to the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsert) AddDeliveryEstimateTo(v int) *DeliveryOptionUpsert {
	u.Add(deliveryoption.FieldDeliveryEstimateTo, v)
	return u
}

// ClearDeliveryEstimateTo clears the value of the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsert) ClearDeliveryEstimateTo() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldDeliveryEstimateTo)
	return u
}

// SetWebshipperIntegration sets the "webshipper_integration" field.
func (u *DeliveryOptionUpsert) SetWebshipperIntegration(v bool) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldWebshipperIntegration, v)
	return u
}

// UpdateWebshipperIntegration sets the "webshipper_integration" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateWebshipperIntegration() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldWebshipperIntegration)
	return u
}

// SetWebshipperID sets the "webshipper_id" field.
func (u *DeliveryOptionUpsert) SetWebshipperID(v int) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldWebshipperID, v)
	return u
}

// UpdateWebshipperID sets the "webshipper_id" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateWebshipperID() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldWebshipperID)
	return u
}

// AddWebshipperID adds v to the "webshipper_id" field.
func (u *DeliveryOptionUpsert) AddWebshipperID(v int) *DeliveryOptionUpsert {
	u.Add(deliveryoption.FieldWebshipperID, v)
	return u
}

// ClearWebshipperID clears the value of the "webshipper_id" field.
func (u *DeliveryOptionUpsert) ClearWebshipperID() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldWebshipperID)
	return u
}

// SetShipmondoIntegration sets the "shipmondo_integration" field.
func (u *DeliveryOptionUpsert) SetShipmondoIntegration(v bool) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldShipmondoIntegration, v)
	return u
}

// UpdateShipmondoIntegration sets the "shipmondo_integration" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateShipmondoIntegration() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldShipmondoIntegration)
	return u
}

// SetShipmondoDeliveryOption sets the "shipmondo_delivery_option" field.
func (u *DeliveryOptionUpsert) SetShipmondoDeliveryOption(v string) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldShipmondoDeliveryOption, v)
	return u
}

// UpdateShipmondoDeliveryOption sets the "shipmondo_delivery_option" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateShipmondoDeliveryOption() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldShipmondoDeliveryOption)
	return u
}

// ClearShipmondoDeliveryOption clears the value of the "shipmondo_delivery_option" field.
func (u *DeliveryOptionUpsert) ClearShipmondoDeliveryOption() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldShipmondoDeliveryOption)
	return u
}

// SetCustomsEnabled sets the "customs_enabled" field.
func (u *DeliveryOptionUpsert) SetCustomsEnabled(v bool) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldCustomsEnabled, v)
	return u
}

// UpdateCustomsEnabled sets the "customs_enabled" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateCustomsEnabled() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldCustomsEnabled)
	return u
}

// SetCustomsSigner sets the "customs_signer" field.
func (u *DeliveryOptionUpsert) SetCustomsSigner(v string) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldCustomsSigner, v)
	return u
}

// UpdateCustomsSigner sets the "customs_signer" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateCustomsSigner() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldCustomsSigner)
	return u
}

// ClearCustomsSigner clears the value of the "customs_signer" field.
func (u *DeliveryOptionUpsert) ClearCustomsSigner() *DeliveryOptionUpsert {
	u.SetNull(deliveryoption.FieldCustomsSigner)
	return u
}

// SetHideIfCompanyEmpty sets the "hide_if_company_empty" field.
func (u *DeliveryOptionUpsert) SetHideIfCompanyEmpty(v bool) *DeliveryOptionUpsert {
	u.Set(deliveryoption.FieldHideIfCompanyEmpty, v)
	return u
}

// UpdateHideIfCompanyEmpty sets the "hide_if_company_empty" field to the value that was provided on create.
func (u *DeliveryOptionUpsert) UpdateHideIfCompanyEmpty() *DeliveryOptionUpsert {
	u.SetExcluded(deliveryoption.FieldHideIfCompanyEmpty)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeliveryOption.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoption.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionUpsertOne) UpdateNewValues() *DeliveryOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deliveryoption.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOption.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryOptionUpsertOne) Ignore() *DeliveryOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionUpsertOne) DoNothing() *DeliveryOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionCreate.OnConflict
// documentation for more info.
func (u *DeliveryOptionUpsertOne) Update(set func(*DeliveryOptionUpsert)) *DeliveryOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionUpsertOne) SetTenantID(v pulid.ID) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateTenantID() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateTenantID()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *DeliveryOptionUpsertOne) SetArchivedAt(v time.Time) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateArchivedAt() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *DeliveryOptionUpsertOne) ClearArchivedAt() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearArchivedAt()
	})
}

// SetName sets the "name" field.
func (u *DeliveryOptionUpsertOne) SetName(v string) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateName() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateName()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *DeliveryOptionUpsertOne) SetSortOrder(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DeliveryOptionUpsertOne) AddSortOrder(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateSortOrder() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateSortOrder()
	})
}

// SetClickOptionDisplayCount sets the "click_option_display_count" field.
func (u *DeliveryOptionUpsertOne) SetClickOptionDisplayCount(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetClickOptionDisplayCount(v)
	})
}

// AddClickOptionDisplayCount adds v to the "click_option_display_count" field.
func (u *DeliveryOptionUpsertOne) AddClickOptionDisplayCount(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddClickOptionDisplayCount(v)
	})
}

// UpdateClickOptionDisplayCount sets the "click_option_display_count" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateClickOptionDisplayCount() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateClickOptionDisplayCount()
	})
}

// ClearClickOptionDisplayCount clears the value of the "click_option_display_count" field.
func (u *DeliveryOptionUpsertOne) ClearClickOptionDisplayCount() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearClickOptionDisplayCount()
	})
}

// SetDescription sets the "description" field.
func (u *DeliveryOptionUpsertOne) SetDescription(v string) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateDescription() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DeliveryOptionUpsertOne) ClearDescription() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearDescription()
	})
}

// SetClickCollect sets the "click_collect" field.
func (u *DeliveryOptionUpsertOne) SetClickCollect(v bool) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetClickCollect(v)
	})
}

// UpdateClickCollect sets the "click_collect" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateClickCollect() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateClickCollect()
	})
}

// ClearClickCollect clears the value of the "click_collect" field.
func (u *DeliveryOptionUpsertOne) ClearClickCollect() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearClickCollect()
	})
}

// SetOverrideSenderAddress sets the "override_sender_address" field.
func (u *DeliveryOptionUpsertOne) SetOverrideSenderAddress(v bool) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetOverrideSenderAddress(v)
	})
}

// UpdateOverrideSenderAddress sets the "override_sender_address" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateOverrideSenderAddress() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateOverrideSenderAddress()
	})
}

// ClearOverrideSenderAddress clears the value of the "override_sender_address" field.
func (u *DeliveryOptionUpsertOne) ClearOverrideSenderAddress() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearOverrideSenderAddress()
	})
}

// SetOverrideReturnAddress sets the "override_return_address" field.
func (u *DeliveryOptionUpsertOne) SetOverrideReturnAddress(v bool) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetOverrideReturnAddress(v)
	})
}

// UpdateOverrideReturnAddress sets the "override_return_address" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateOverrideReturnAddress() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateOverrideReturnAddress()
	})
}

// ClearOverrideReturnAddress clears the value of the "override_return_address" field.
func (u *DeliveryOptionUpsertOne) ClearOverrideReturnAddress() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearOverrideReturnAddress()
	})
}

// SetHideDeliveryOption sets the "hide_delivery_option" field.
func (u *DeliveryOptionUpsertOne) SetHideDeliveryOption(v bool) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetHideDeliveryOption(v)
	})
}

// UpdateHideDeliveryOption sets the "hide_delivery_option" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateHideDeliveryOption() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateHideDeliveryOption()
	})
}

// ClearHideDeliveryOption clears the value of the "hide_delivery_option" field.
func (u *DeliveryOptionUpsertOne) ClearHideDeliveryOption() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearHideDeliveryOption()
	})
}

// SetDeliveryEstimateFrom sets the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsertOne) SetDeliveryEstimateFrom(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetDeliveryEstimateFrom(v)
	})
}

// AddDeliveryEstimateFrom adds v to the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsertOne) AddDeliveryEstimateFrom(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddDeliveryEstimateFrom(v)
	})
}

// UpdateDeliveryEstimateFrom sets the "delivery_estimate_from" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateDeliveryEstimateFrom() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateDeliveryEstimateFrom()
	})
}

// ClearDeliveryEstimateFrom clears the value of the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsertOne) ClearDeliveryEstimateFrom() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearDeliveryEstimateFrom()
	})
}

// SetDeliveryEstimateTo sets the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsertOne) SetDeliveryEstimateTo(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetDeliveryEstimateTo(v)
	})
}

// AddDeliveryEstimateTo adds v to the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsertOne) AddDeliveryEstimateTo(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddDeliveryEstimateTo(v)
	})
}

// UpdateDeliveryEstimateTo sets the "delivery_estimate_to" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateDeliveryEstimateTo() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateDeliveryEstimateTo()
	})
}

// ClearDeliveryEstimateTo clears the value of the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsertOne) ClearDeliveryEstimateTo() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearDeliveryEstimateTo()
	})
}

// SetWebshipperIntegration sets the "webshipper_integration" field.
func (u *DeliveryOptionUpsertOne) SetWebshipperIntegration(v bool) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetWebshipperIntegration(v)
	})
}

// UpdateWebshipperIntegration sets the "webshipper_integration" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateWebshipperIntegration() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateWebshipperIntegration()
	})
}

// SetWebshipperID sets the "webshipper_id" field.
func (u *DeliveryOptionUpsertOne) SetWebshipperID(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetWebshipperID(v)
	})
}

// AddWebshipperID adds v to the "webshipper_id" field.
func (u *DeliveryOptionUpsertOne) AddWebshipperID(v int) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddWebshipperID(v)
	})
}

// UpdateWebshipperID sets the "webshipper_id" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateWebshipperID() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateWebshipperID()
	})
}

// ClearWebshipperID clears the value of the "webshipper_id" field.
func (u *DeliveryOptionUpsertOne) ClearWebshipperID() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearWebshipperID()
	})
}

// SetShipmondoIntegration sets the "shipmondo_integration" field.
func (u *DeliveryOptionUpsertOne) SetShipmondoIntegration(v bool) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetShipmondoIntegration(v)
	})
}

// UpdateShipmondoIntegration sets the "shipmondo_integration" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateShipmondoIntegration() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateShipmondoIntegration()
	})
}

// SetShipmondoDeliveryOption sets the "shipmondo_delivery_option" field.
func (u *DeliveryOptionUpsertOne) SetShipmondoDeliveryOption(v string) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetShipmondoDeliveryOption(v)
	})
}

// UpdateShipmondoDeliveryOption sets the "shipmondo_delivery_option" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateShipmondoDeliveryOption() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateShipmondoDeliveryOption()
	})
}

// ClearShipmondoDeliveryOption clears the value of the "shipmondo_delivery_option" field.
func (u *DeliveryOptionUpsertOne) ClearShipmondoDeliveryOption() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearShipmondoDeliveryOption()
	})
}

// SetCustomsEnabled sets the "customs_enabled" field.
func (u *DeliveryOptionUpsertOne) SetCustomsEnabled(v bool) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetCustomsEnabled(v)
	})
}

// UpdateCustomsEnabled sets the "customs_enabled" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateCustomsEnabled() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateCustomsEnabled()
	})
}

// SetCustomsSigner sets the "customs_signer" field.
func (u *DeliveryOptionUpsertOne) SetCustomsSigner(v string) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetCustomsSigner(v)
	})
}

// UpdateCustomsSigner sets the "customs_signer" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateCustomsSigner() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateCustomsSigner()
	})
}

// ClearCustomsSigner clears the value of the "customs_signer" field.
func (u *DeliveryOptionUpsertOne) ClearCustomsSigner() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearCustomsSigner()
	})
}

// SetHideIfCompanyEmpty sets the "hide_if_company_empty" field.
func (u *DeliveryOptionUpsertOne) SetHideIfCompanyEmpty(v bool) *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetHideIfCompanyEmpty(v)
	})
}

// UpdateHideIfCompanyEmpty sets the "hide_if_company_empty" field to the value that was provided on create.
func (u *DeliveryOptionUpsertOne) UpdateHideIfCompanyEmpty() *DeliveryOptionUpsertOne {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateHideIfCompanyEmpty()
	})
}

// Exec executes the query.
func (u *DeliveryOptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryOptionUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeliveryOptionUpsertOne.ID is not supported by MySQL driver. Use DeliveryOptionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryOptionUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryOptionCreateBulk is the builder for creating many DeliveryOption entities in bulk.
type DeliveryOptionCreateBulk struct {
	config
	err      error
	builders []*DeliveryOptionCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryOption entities in the database.
func (docb *DeliveryOptionCreateBulk) Save(ctx context.Context) ([]*DeliveryOption, error) {
	if docb.err != nil {
		return nil, docb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(docb.builders))
	nodes := make([]*DeliveryOption, len(docb.builders))
	mutators := make([]Mutator, len(docb.builders))
	for i := range docb.builders {
		func(i int, root context.Context) {
			builder := docb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, docb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = docb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, docb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, docb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (docb *DeliveryOptionCreateBulk) SaveX(ctx context.Context) []*DeliveryOption {
	v, err := docb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (docb *DeliveryOptionCreateBulk) Exec(ctx context.Context) error {
	_, err := docb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (docb *DeliveryOptionCreateBulk) ExecX(ctx context.Context) {
	if err := docb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOption.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (docb *DeliveryOptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionUpsertBulk {
	docb.conflict = opts
	return &DeliveryOptionUpsertBulk{
		create: docb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOption.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (docb *DeliveryOptionCreateBulk) OnConflictColumns(columns ...string) *DeliveryOptionUpsertBulk {
	docb.conflict = append(docb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionUpsertBulk{
		create: docb,
	}
}

// DeliveryOptionUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryOption nodes.
type DeliveryOptionUpsertBulk struct {
	create *DeliveryOptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryOption.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoption.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionUpsertBulk) UpdateNewValues() *DeliveryOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deliveryoption.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOption.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryOptionUpsertBulk) Ignore() *DeliveryOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionUpsertBulk) DoNothing() *DeliveryOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryOptionUpsertBulk) Update(set func(*DeliveryOptionUpsert)) *DeliveryOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionUpsertBulk) SetTenantID(v pulid.ID) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateTenantID() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateTenantID()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *DeliveryOptionUpsertBulk) SetArchivedAt(v time.Time) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateArchivedAt() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *DeliveryOptionUpsertBulk) ClearArchivedAt() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearArchivedAt()
	})
}

// SetName sets the "name" field.
func (u *DeliveryOptionUpsertBulk) SetName(v string) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateName() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateName()
	})
}

// SetSortOrder sets the "sort_order" field.
func (u *DeliveryOptionUpsertBulk) SetSortOrder(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetSortOrder(v)
	})
}

// AddSortOrder adds v to the "sort_order" field.
func (u *DeliveryOptionUpsertBulk) AddSortOrder(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddSortOrder(v)
	})
}

// UpdateSortOrder sets the "sort_order" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateSortOrder() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateSortOrder()
	})
}

// SetClickOptionDisplayCount sets the "click_option_display_count" field.
func (u *DeliveryOptionUpsertBulk) SetClickOptionDisplayCount(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetClickOptionDisplayCount(v)
	})
}

// AddClickOptionDisplayCount adds v to the "click_option_display_count" field.
func (u *DeliveryOptionUpsertBulk) AddClickOptionDisplayCount(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddClickOptionDisplayCount(v)
	})
}

// UpdateClickOptionDisplayCount sets the "click_option_display_count" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateClickOptionDisplayCount() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateClickOptionDisplayCount()
	})
}

// ClearClickOptionDisplayCount clears the value of the "click_option_display_count" field.
func (u *DeliveryOptionUpsertBulk) ClearClickOptionDisplayCount() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearClickOptionDisplayCount()
	})
}

// SetDescription sets the "description" field.
func (u *DeliveryOptionUpsertBulk) SetDescription(v string) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateDescription() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DeliveryOptionUpsertBulk) ClearDescription() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearDescription()
	})
}

// SetClickCollect sets the "click_collect" field.
func (u *DeliveryOptionUpsertBulk) SetClickCollect(v bool) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetClickCollect(v)
	})
}

// UpdateClickCollect sets the "click_collect" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateClickCollect() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateClickCollect()
	})
}

// ClearClickCollect clears the value of the "click_collect" field.
func (u *DeliveryOptionUpsertBulk) ClearClickCollect() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearClickCollect()
	})
}

// SetOverrideSenderAddress sets the "override_sender_address" field.
func (u *DeliveryOptionUpsertBulk) SetOverrideSenderAddress(v bool) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetOverrideSenderAddress(v)
	})
}

// UpdateOverrideSenderAddress sets the "override_sender_address" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateOverrideSenderAddress() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateOverrideSenderAddress()
	})
}

// ClearOverrideSenderAddress clears the value of the "override_sender_address" field.
func (u *DeliveryOptionUpsertBulk) ClearOverrideSenderAddress() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearOverrideSenderAddress()
	})
}

// SetOverrideReturnAddress sets the "override_return_address" field.
func (u *DeliveryOptionUpsertBulk) SetOverrideReturnAddress(v bool) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetOverrideReturnAddress(v)
	})
}

// UpdateOverrideReturnAddress sets the "override_return_address" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateOverrideReturnAddress() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateOverrideReturnAddress()
	})
}

// ClearOverrideReturnAddress clears the value of the "override_return_address" field.
func (u *DeliveryOptionUpsertBulk) ClearOverrideReturnAddress() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearOverrideReturnAddress()
	})
}

// SetHideDeliveryOption sets the "hide_delivery_option" field.
func (u *DeliveryOptionUpsertBulk) SetHideDeliveryOption(v bool) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetHideDeliveryOption(v)
	})
}

// UpdateHideDeliveryOption sets the "hide_delivery_option" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateHideDeliveryOption() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateHideDeliveryOption()
	})
}

// ClearHideDeliveryOption clears the value of the "hide_delivery_option" field.
func (u *DeliveryOptionUpsertBulk) ClearHideDeliveryOption() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearHideDeliveryOption()
	})
}

// SetDeliveryEstimateFrom sets the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsertBulk) SetDeliveryEstimateFrom(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetDeliveryEstimateFrom(v)
	})
}

// AddDeliveryEstimateFrom adds v to the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsertBulk) AddDeliveryEstimateFrom(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddDeliveryEstimateFrom(v)
	})
}

// UpdateDeliveryEstimateFrom sets the "delivery_estimate_from" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateDeliveryEstimateFrom() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateDeliveryEstimateFrom()
	})
}

// ClearDeliveryEstimateFrom clears the value of the "delivery_estimate_from" field.
func (u *DeliveryOptionUpsertBulk) ClearDeliveryEstimateFrom() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearDeliveryEstimateFrom()
	})
}

// SetDeliveryEstimateTo sets the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsertBulk) SetDeliveryEstimateTo(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetDeliveryEstimateTo(v)
	})
}

// AddDeliveryEstimateTo adds v to the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsertBulk) AddDeliveryEstimateTo(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddDeliveryEstimateTo(v)
	})
}

// UpdateDeliveryEstimateTo sets the "delivery_estimate_to" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateDeliveryEstimateTo() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateDeliveryEstimateTo()
	})
}

// ClearDeliveryEstimateTo clears the value of the "delivery_estimate_to" field.
func (u *DeliveryOptionUpsertBulk) ClearDeliveryEstimateTo() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearDeliveryEstimateTo()
	})
}

// SetWebshipperIntegration sets the "webshipper_integration" field.
func (u *DeliveryOptionUpsertBulk) SetWebshipperIntegration(v bool) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetWebshipperIntegration(v)
	})
}

// UpdateWebshipperIntegration sets the "webshipper_integration" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateWebshipperIntegration() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateWebshipperIntegration()
	})
}

// SetWebshipperID sets the "webshipper_id" field.
func (u *DeliveryOptionUpsertBulk) SetWebshipperID(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetWebshipperID(v)
	})
}

// AddWebshipperID adds v to the "webshipper_id" field.
func (u *DeliveryOptionUpsertBulk) AddWebshipperID(v int) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.AddWebshipperID(v)
	})
}

// UpdateWebshipperID sets the "webshipper_id" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateWebshipperID() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateWebshipperID()
	})
}

// ClearWebshipperID clears the value of the "webshipper_id" field.
func (u *DeliveryOptionUpsertBulk) ClearWebshipperID() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearWebshipperID()
	})
}

// SetShipmondoIntegration sets the "shipmondo_integration" field.
func (u *DeliveryOptionUpsertBulk) SetShipmondoIntegration(v bool) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetShipmondoIntegration(v)
	})
}

// UpdateShipmondoIntegration sets the "shipmondo_integration" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateShipmondoIntegration() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateShipmondoIntegration()
	})
}

// SetShipmondoDeliveryOption sets the "shipmondo_delivery_option" field.
func (u *DeliveryOptionUpsertBulk) SetShipmondoDeliveryOption(v string) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetShipmondoDeliveryOption(v)
	})
}

// UpdateShipmondoDeliveryOption sets the "shipmondo_delivery_option" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateShipmondoDeliveryOption() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateShipmondoDeliveryOption()
	})
}

// ClearShipmondoDeliveryOption clears the value of the "shipmondo_delivery_option" field.
func (u *DeliveryOptionUpsertBulk) ClearShipmondoDeliveryOption() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearShipmondoDeliveryOption()
	})
}

// SetCustomsEnabled sets the "customs_enabled" field.
func (u *DeliveryOptionUpsertBulk) SetCustomsEnabled(v bool) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetCustomsEnabled(v)
	})
}

// UpdateCustomsEnabled sets the "customs_enabled" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateCustomsEnabled() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateCustomsEnabled()
	})
}

// SetCustomsSigner sets the "customs_signer" field.
func (u *DeliveryOptionUpsertBulk) SetCustomsSigner(v string) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetCustomsSigner(v)
	})
}

// UpdateCustomsSigner sets the "customs_signer" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateCustomsSigner() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateCustomsSigner()
	})
}

// ClearCustomsSigner clears the value of the "customs_signer" field.
func (u *DeliveryOptionUpsertBulk) ClearCustomsSigner() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.ClearCustomsSigner()
	})
}

// SetHideIfCompanyEmpty sets the "hide_if_company_empty" field.
func (u *DeliveryOptionUpsertBulk) SetHideIfCompanyEmpty(v bool) *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.SetHideIfCompanyEmpty(v)
	})
}

// UpdateHideIfCompanyEmpty sets the "hide_if_company_empty" field to the value that was provided on create.
func (u *DeliveryOptionUpsertBulk) UpdateHideIfCompanyEmpty() *DeliveryOptionUpsertBulk {
	return u.Update(func(s *DeliveryOptionUpsert) {
		s.UpdateHideIfCompanyEmpty()
	})
}

// Exec executes the query.
func (u *DeliveryOptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryOptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
