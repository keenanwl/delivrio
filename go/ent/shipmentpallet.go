// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShipmentPallet is the model entity for the ShipmentPallet schema.
type ShipmentPallet struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Barcode holds the value of the "barcode" field.
	Barcode string `json:"barcode,omitempty"`
	// ColliNumber holds the value of the "colli_number" field.
	ColliNumber string `json:"colli_number,omitempty"`
	// CarrierID holds the value of the "carrier_id" field.
	CarrierID string `json:"carrier_id,omitempty"`
	// LabelPdf holds the value of the "label_pdf" field.
	LabelPdf string `json:"label_pdf,omitempty"`
	// LabelZpl holds the value of the "label_zpl" field.
	LabelZpl string `json:"label_zpl,omitempty"`
	// Status holds the value of the "status" field.
	Status shipmentpallet.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentPalletQuery when eager-loading is set.
	Edges                    ShipmentPalletEdges `json:"edges"`
	pallet_shipment_pallet   *pulid.ID
	shipment_shipment_pallet *pulid.ID
	selectValues             sql.SelectValues
}

// ShipmentPalletEdges holds the relations/edges for other nodes in the graph.
type ShipmentPalletEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Pallet holds the value of the pallet edge.
	Pallet *Pallet `json:"pallet,omitempty"`
	// After shipment cancelled, ref moved here. Mostly for consistency, since the Shipment is also connected still.
	OldPallet []*Pallet `json:"old_pallet,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedOldPallet map[string][]*Pallet
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentPalletEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// PalletOrErr returns the Pallet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentPalletEdges) PalletOrErr() (*Pallet, error) {
	if e.Pallet != nil {
		return e.Pallet, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: pallet.Label}
	}
	return nil, &NotLoadedError{edge: "pallet"}
}

// OldPalletOrErr returns the OldPallet value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentPalletEdges) OldPalletOrErr() ([]*Pallet, error) {
	if e.loadedTypes[2] {
		return e.OldPallet, nil
	}
	return nil, &NotLoadedError{edge: "old_pallet"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentPalletEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentPallet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentpallet.FieldID, shipmentpallet.FieldTenantID:
			values[i] = new(pulid.ID)
		case shipmentpallet.FieldBarcode, shipmentpallet.FieldColliNumber, shipmentpallet.FieldCarrierID, shipmentpallet.FieldLabelPdf, shipmentpallet.FieldLabelZpl, shipmentpallet.FieldStatus:
			values[i] = new(sql.NullString)
		case shipmentpallet.ForeignKeys[0]: // pallet_shipment_pallet
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case shipmentpallet.ForeignKeys[1]: // shipment_shipment_pallet
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentPallet fields.
func (sp *ShipmentPallet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentpallet.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sp.ID = *value
			}
		case shipmentpallet.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				sp.TenantID = *value
			}
		case shipmentpallet.FieldBarcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field barcode", values[i])
			} else if value.Valid {
				sp.Barcode = value.String
			}
		case shipmentpallet.FieldColliNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field colli_number", values[i])
			} else if value.Valid {
				sp.ColliNumber = value.String
			}
		case shipmentpallet.FieldCarrierID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_id", values[i])
			} else if value.Valid {
				sp.CarrierID = value.String
			}
		case shipmentpallet.FieldLabelPdf:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_pdf", values[i])
			} else if value.Valid {
				sp.LabelPdf = value.String
			}
		case shipmentpallet.FieldLabelZpl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_zpl", values[i])
			} else if value.Valid {
				sp.LabelZpl = value.String
			}
		case shipmentpallet.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = shipmentpallet.Status(value.String)
			}
		case shipmentpallet.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field pallet_shipment_pallet", values[i])
			} else if value.Valid {
				sp.pallet_shipment_pallet = new(pulid.ID)
				*sp.pallet_shipment_pallet = *value.S.(*pulid.ID)
			}
		case shipmentpallet.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_shipment_pallet", values[i])
			} else if value.Valid {
				sp.shipment_shipment_pallet = new(pulid.ID)
				*sp.shipment_shipment_pallet = *value.S.(*pulid.ID)
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentPallet.
// This includes values selected through modifiers, order, etc.
func (sp *ShipmentPallet) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ShipmentPallet entity.
func (sp *ShipmentPallet) QueryTenant() *TenantQuery {
	return NewShipmentPalletClient(sp.config).QueryTenant(sp)
}

// QueryPallet queries the "pallet" edge of the ShipmentPallet entity.
func (sp *ShipmentPallet) QueryPallet() *PalletQuery {
	return NewShipmentPalletClient(sp.config).QueryPallet(sp)
}

// QueryOldPallet queries the "old_pallet" edge of the ShipmentPallet entity.
func (sp *ShipmentPallet) QueryOldPallet() *PalletQuery {
	return NewShipmentPalletClient(sp.config).QueryOldPallet(sp)
}

// QueryShipment queries the "shipment" edge of the ShipmentPallet entity.
func (sp *ShipmentPallet) QueryShipment() *ShipmentQuery {
	return NewShipmentPalletClient(sp.config).QueryShipment(sp)
}

// Update returns a builder for updating this ShipmentPallet.
// Note that you need to call ShipmentPallet.Unwrap() before calling this method if this ShipmentPallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *ShipmentPallet) Update() *ShipmentPalletUpdateOne {
	return NewShipmentPalletClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the ShipmentPallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *ShipmentPallet) Unwrap() *ShipmentPallet {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentPallet is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *ShipmentPallet) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentPallet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.TenantID))
	builder.WriteString(", ")
	builder.WriteString("barcode=")
	builder.WriteString(sp.Barcode)
	builder.WriteString(", ")
	builder.WriteString("colli_number=")
	builder.WriteString(sp.ColliNumber)
	builder.WriteString(", ")
	builder.WriteString("carrier_id=")
	builder.WriteString(sp.CarrierID)
	builder.WriteString(", ")
	builder.WriteString("label_pdf=")
	builder.WriteString(sp.LabelPdf)
	builder.WriteString(", ")
	builder.WriteString("label_zpl=")
	builder.WriteString(sp.LabelZpl)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOldPallet returns the OldPallet named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sp *ShipmentPallet) NamedOldPallet(name string) ([]*Pallet, error) {
	if sp.Edges.namedOldPallet == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sp.Edges.namedOldPallet[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sp *ShipmentPallet) appendNamedOldPallet(name string, edges ...*Pallet) {
	if sp.Edges.namedOldPallet == nil {
		sp.Edges.namedOldPallet = make(map[string][]*Pallet)
	}
	if len(edges) == 0 {
		sp.Edges.namedOldPallet[name] = []*Pallet{}
	} else {
		sp.Edges.namedOldPallet[name] = append(sp.Edges.namedOldPallet[name], edges...)
	}
}

// ShipmentPallets is a parsable slice of ShipmentPallet.
type ShipmentPallets []*ShipmentPallet
