// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductImage is the model entity for the ProductImage schema.
type ProductImage struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID *string `json:"external_id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductImageQuery when eager-loading is set.
	Edges                 ProductImageEdges `json:"edges"`
	product_image_product *pulid.ID
	selectValues          sql.SelectValues
}

// ProductImageEdges holds the relations/edges for other nodes in the graph.
type ProductImageEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// ProductVariant holds the value of the product_variant edge.
	ProductVariant []*ProductVariant `json:"product_variant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedProductVariant map[string][]*ProductVariant
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductImageEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductImageEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// ProductVariantOrErr returns the ProductVariant value or an error if the edge
// was not loaded in eager-loading.
func (e ProductImageEdges) ProductVariantOrErr() ([]*ProductVariant, error) {
	if e.loadedTypes[2] {
		return e.ProductVariant, nil
	}
	return nil, &NotLoadedError{edge: "product_variant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productimage.FieldID, productimage.FieldTenantID:
			values[i] = new(pulid.ID)
		case productimage.FieldExternalID, productimage.FieldURL:
			values[i] = new(sql.NullString)
		case productimage.ForeignKeys[0]: // product_image_product
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductImage fields.
func (pi *ProductImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productimage.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pi.ID = *value
			}
		case productimage.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pi.TenantID = *value
			}
		case productimage.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				pi.ExternalID = new(string)
				*pi.ExternalID = value.String
			}
		case productimage.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pi.URL = value.String
			}
		case productimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_image_product", values[i])
			} else if value.Valid {
				pi.product_image_product = new(pulid.ID)
				*pi.product_image_product = *value.S.(*pulid.ID)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductImage.
// This includes values selected through modifiers, order, etc.
func (pi *ProductImage) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ProductImage entity.
func (pi *ProductImage) QueryTenant() *TenantQuery {
	return NewProductImageClient(pi.config).QueryTenant(pi)
}

// QueryProduct queries the "product" edge of the ProductImage entity.
func (pi *ProductImage) QueryProduct() *ProductQuery {
	return NewProductImageClient(pi.config).QueryProduct(pi)
}

// QueryProductVariant queries the "product_variant" edge of the ProductImage entity.
func (pi *ProductImage) QueryProductVariant() *ProductVariantQuery {
	return NewProductImageClient(pi.config).QueryProductVariant(pi)
}

// Update returns a builder for updating this ProductImage.
// Note that you need to call ProductImage.Unwrap() before calling this method if this ProductImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProductImage) Update() *ProductImageUpdateOne {
	return NewProductImageClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProductImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProductImage) Unwrap() *ProductImage {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductImage is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProductImage) String() string {
	var builder strings.Builder
	builder.WriteString("ProductImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.TenantID))
	builder.WriteString(", ")
	if v := pi.ExternalID; v != nil {
		builder.WriteString("external_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pi.URL)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProductVariant returns the ProductVariant named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pi *ProductImage) NamedProductVariant(name string) ([]*ProductVariant, error) {
	if pi.Edges.namedProductVariant == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pi.Edges.namedProductVariant[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pi *ProductImage) appendNamedProductVariant(name string, edges ...*ProductVariant) {
	if pi.Edges.namedProductVariant == nil {
		pi.Edges.namedProductVariant = make(map[string][]*ProductVariant)
	}
	if len(edges) == 0 {
		pi.Edges.namedProductVariant[name] = []*ProductVariant{}
	} else {
		pi.Edges.namedProductVariant[name] = append(pi.Edges.namedProductVariant[name], edges...)
	}
}

// ProductImages is a parsable slice of ProductImage.
type ProductImages []*ProductImage
